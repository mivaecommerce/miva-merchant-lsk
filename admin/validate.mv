<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-ADM-VLD-
| Next Error Code: 1
|
</MvCOMMENT>

<MvFUNCTION NAME = "Validate_Code" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Validation codes are:
	|		1	Blank
	|		2	Too long
	|		3	Invalid Characters - Strict
	|		4	Invalid Characters - Loose
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" 	VALUE = "Please specify a code">
		<MvASSIGN NAME = "g.Validation_Code" 		VALUE = 1>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ len( l.value ) GT 50 }">
		<MvASSIGN NAME = "g.Validation_Message" 	VALUE = "Code must be 50 characters long or shorter">
		<MvASSIGN NAME = "g.Validation_Code" 		VALUE = 2>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ g.Domain:strictcode }">
		<MvASSIGN NAME = "l.value" VALUE = "{ glosub( l.value, '-', '' ) }">
		<MvASSIGN NAME = "l.value" VALUE = "{ glosub( l.value, '_', '' ) }">
		<MvIF EXPR = "{ NOT isalnum( l.value ) }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Codes may only contain letters, numbers, underscores (_) and dashes (-).">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 3>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ '%' IN l.value }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Code may not contain a percent sign">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 4>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ '\\' IN l.value }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Code may not contain a backslash (\\)">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 5>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ asciichar( 0 ) IN l.value }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Code may not contain a null byte">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 6>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Code_NonBlank_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Validation codes are:
	|		1	Too long
	|		2	Invalid Characters - Strict
	|		3	Invalid Characters - Loose
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ len( l.value ) GT 50 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Code must be 50 characters long or shorter">

		<MvASSIGN NAME = "g.Validation_Code" VALUE = 2>
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ g.Domain:strictcode }">
		<MvASSIGN NAME = "l.value" VALUE = "{ glosub( l.value, '-', '' ) }">
		<MvASSIGN NAME = "l.value" VALUE = "{ glosub( l.value, '_', '' ) }">
		<MvIF EXPR = "{ NOT isalnum( l.value ) }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Codes may only contain letters, numbers, underscores (_) and dashes (-).">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 3>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ '%' IN l.value }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Code may not contain a percent sign">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 4>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ '\\' IN l.value }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Code may not contain a backslash (\\)">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 5>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_CC_Mod10" PARAMETERS = "ccnum" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.valid" VALUE = 1>

	<MvASSIGN NAME = "l.ccnum" VALUE = "{ glosub( l.ccnum, ' ', '' ) }">
	<MvASSIGN NAME = "l.ccnum" VALUE = "{ glosub( l.ccnum, '-', '' ) }">

	<MvIF EXPR = "{ len( l.ccnum ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a credit card number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ isdigit( l.ccnum ) }">
		<MvCOMMENT>
		|
		| Add all the digits together.  We start at the end
		| and proceed towards the front.  Odd-numbered positions
		| are multiplied by two
		|
		</MvCOMMENT>
		<MvASSIGN NAME = "l.odd" VALUE = 0>
		<MvASSIGN NAME = "l.pos" VALUE = "{ len( l.ccnum ) }">
		<MvASSIGN NAME = "l.total" VALUE = 0>
			<MvWHILE EXPR = "{ l.pos GT 0 }">
			<MvASSIGN NAME = "l.digit" VALUE = "{ substring( l.ccnum, l.pos , 1 ) }">
			<MvIF EXPR = "{ l.odd }">
				<MvASSIGN NAME = "l.digit" VALUE = "{ l.digit * 2 }">
				<MvIF EXPR = "{ l.digit GT 9 }">
					<MvASSIGN NAME = "l.digit" VALUE = "{ l.digit - 9 }">
				</MvIF>
			</MvIF>
				<MvASSIGN NAME = "l.total" VALUE = "{ l.total + l.digit }">
			<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos - 1 }">
			<MvASSIGN NAME = "l.odd" VALUE = "{ NOT l.odd }">
		</MvWHILE>
		<MvCOMMENT>
		|
		| The result must be evenly dividable by 10
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ( l.total MOD 10 ) NE 0 }">
			<MvASSIGN NAME = "l.valid" VALUE = 0>
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please specify a valid credit card number">

		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.valid" VALUE = 0>
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Credit card number may contain only digits, spaces( ) and dashes (-).">

	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.valid }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Login" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Validation codes are:
	|		1	Blank
	|		2	Too long
	|		3	Invalid Characters
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please specify a login">
		<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 1>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ len( l.value ) GT 50 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Login must be 50 characters long or shorter">
		<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 2>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ g.Domain:strictcode }">
		<MvASSIGN NAME = "l.value" VALUE = "{ glosub( l.value, '-', '' ) }">
		<MvASSIGN NAME = "l.value" VALUE = "{ glosub( l.value, '_', '' ) }">
		<MvIF EXPR = "{ NOT isalnum( l.value ) }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Login may only contain letters, numbers, underscores (_) and dashes (-).">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 3>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ '%' IN l.value }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Login may not contain a percent sign">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 3>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ '\\' IN l.value }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Login may not contain a backslash (\\)">
			<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 3>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Group_Name" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Validation codes are:
	|		1	Blank
	|		2	Too long
	|		3	Invalid Characters
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please specify a Group Name">
		<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 1>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ len( l.value ) GT 40 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Group Name must be 40 characters long or shorter">
		<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 2>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ '%' IN l.value }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Group Name may not contain a percent sign">
		<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 3>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ '\\' IN l.value }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Group Name may not contain a backslash (\\)">
		<MvASSIGN NAME = "g.Validation_Code" 	VALUE = 3>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Method_Length" PARAMETERS = "value, length" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please specify a method">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ len( l.value ) GT l.length }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Method must be ' $ l.length $ ' characters long or shorter' }">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ '%' IN l.value }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Method may not contain a percent sign">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ('\\' IN l.value) OR (',' IN l.value) OR (':' IN l.value) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Method may not contain a backslash (\\), comma (,) or colon (:)">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Email" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Email_Validate( l.value ) }">
		<MvASSIGN NAME = "g.Validation_Message"	VALUE = "Please specify a valid email address">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Phone" PARAMETERS = "value, country" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Phone_Validate( l.value, l.country ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please specify a valid phone number">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Zip" PARAMETERS = "value, country" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Zip_Validate( l.value, l.country ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please specify a valid zip/postal code">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Value_In_List" PARAMETERS = "value, allowed" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.fields" COUNT = "{ miva_splitstring( l.allowed, ',', l.fields, 'trim,lower' ) }">
		<MvIF EXPR = "{ l.value EQ l.field }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_WholeNumber" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.validate" VALUE = "{ l.value }">

	<MvIF EXPR = "{ ( len( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "l.validate" VALUE = "{ substring( l.value, 2, len( l.value ) - 1 ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT isdigit( l.validate ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value GT [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number no greater than ' $ [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_WholeNumber_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.validate" VALUE = "{ l.value }">

	<MvIF EXPR = "{ ( len( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "l.validate" VALUE = "{ substring( l.value, 2, len( l.value ) - 1 ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT isdigit( l.validate ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value GT [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number no greater than ' $ [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_WholeNumber_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.validate" VALUE = "{ l.value }">

	<MvIF EXPR = "{ ( len( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "l.validate" VALUE = "{ substring( l.value, 2, len( l.value ) - 1 ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT isdigit( l.validate ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value GT [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number no greater than ' $ [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_WholeNumber_Range_Required" PARAMETERS = "value, low, high" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.validate" VALUE = "{ l.value }">

	<MvIF EXPR = "{ ( len( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "l.validate" VALUE = "{ substring( l.value, 2, len( l.value ) - 1 ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT isdigit( l.validate ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( l.value LT l.low ) OR ( l.value GT l.high ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number between ' $ l.low $ ' and ' $ l.high }">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_WholeNumber_NonNegative_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ '-' IN l.value EQ 1 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.validate" VALUE = "{ l.value }">

	<MvIF EXPR = "{ NOT isdigit( l.validate ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value GT [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number no greater than ' $ [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_WholeNumber_NonNegative_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( len( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.validate" VALUE = "{ l.value }">

	<MvIF EXPR = "{ NOT isdigit( l.validate ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value GT [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number no greater than ' $ [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_WholeNumber_Positive_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value LE 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a positive number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.validate" VALUE = "{ l.value }">

	<MvIF EXPR = "{ NOT isdigit( l.validate ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value GT [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number no greater than ' $ [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_WholeNumber_Positive_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.value LE 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a positive number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.validate" VALUE = "{ l.value }">

	<MvIF EXPR = "{ NOT isdigit( l.validate ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a whole number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value GT [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number no greater than ' $ [ g.Library_Native_DBAPI ].DB_Max_INTEGER() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.valid" 		VALUE = 1>
	<MvASSIGN NAME = "l.pos" 		VALUE = 1>
	<MvASSIGN NAME = "l.len" 		VALUE = "{ len( l.value ) }">
	<MvASSIGN NAME = "l.have_decimal" 	VALUE = 0>

	<MvIF EXPR = "{ ( len( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvIF>

	<MvWHILE EXPR = "{ l.valid AND ( l.pos LE l.len ) }">
		<MvASSIGN NAME = "l.char" VALUE = "{ substring( l.value, l.pos, 1 ) }">
		<MvIF EXPR = "{ NOT isdigit( l.char ) }">
			<MvIF EXPR = "{ l.char EQ '.' }">
				<MvIF EXPR = "{ l.have_decimal }">
					<MvASSIGN NAME = "l.valid" VALUE = 0>
				<MvELSE>
					<MvASSIGN NAME = "l.have_decimal" VALUE = 1>
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.valid" VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.valid }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Currency_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 10, 2 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Currency_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 10, 2 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Currency_NonNegative_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ ( len( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 10, 2 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Currency_NonNegative_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( len( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 10, 2 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Currency_Positive_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Validate_Currency_NonNegative_Required( l.value ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a positive number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Price_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.value }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 16, 8 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Price_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.value }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 16, 8 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Price_NonNegative_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.value }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ ( len_var( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 16, 8 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Price_NonNegative_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.value }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( len_var( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 16, 8 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 10, 2 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 10, 2 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_NonNegative_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ ( len( l.value ) GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 10, 2 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_NonNegative_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value LT 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 10, 2 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_Positive_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value LE 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a positive number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 10, 2 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_Length_NonNegative_Optional" PARAMETERS = "value, left, right" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0}">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.value LT 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, l.left, l.right ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_Length_NonNegative_Required" PARAMETERS = "value, left, right" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0}">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value LT 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a non-negative number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, l.left, l.right ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_Length_Positive_Optional" PARAMETERS = "value, left, right" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.value LE 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a positive number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, l.left, l.right ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_Length_Positive_Required" PARAMETERS = "value, left, right" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.value LE 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a positive number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, l.left, l.right ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_FloatingPoint_Length_Required" PARAMETERS = "value, left, right" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, l.left, l.right ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Weight" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ Validate_FloatingPoint_Length_NonNegative_Required( l.value, 16, 8 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Weight_Required" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.value }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 16, 8 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Weight_Optional" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.value }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Validate_Decimal( l.value, 16, 8 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Decimal" PARAMETERS = "value, precision, scale" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.left"		VALUE = "{ l.precision - l.scale }">
	<MvASSIGN NAME = "l.right"		VALUE = "{ l.scale }">
	<MvASSIGN NAME = "l.len" 		VALUE = "{ len_var( l.value ) }">

	<MvIF EXPR = "{ ( l.len GT 1 ) AND ( '-' IN l.value EQ 1 ) }">
		<MvASSIGN NAME = "l.value" 	VALUE = "{ substring_var( l.value, 2, l.len ) }">
		<MvASSIGN NAME = "l.len" 	VALUE = "{ l.len - 1 }">
	</MvIF>

	<MvASSIGN NAME = "l.decimal" VALUE = "{ '.' IN l.value }">
	<MvIF EXPR = "{ l.decimal }">
		<MvASSIGN NAME = "l.leftpart" 	VALUE = "{ substring_var( l.value, 1, l.decimal - 1 ) }">
		<MvASSIGN NAME = "l.rightpart" 	VALUE = "{ substring_var( l.value, l.decimal + 1, l.len - l.decimal ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.leftpart" 	VALUE = "{ l.value }">
		<MvASSIGN NAME = "l.rightpart" 	VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ NOT ( isdigit( l.leftpart ) AND isdigit( l.rightpart ) ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a number">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ len_var( l.leftpart ) GT l.left }">
		<MvIF EXPR = "{ l.left EQ 1 }">	<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please specify a number with 1 digit or less to the left of the decimal point">
		<MvELSE>						<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number with ' $ l.left $ ' digits or less to the left of the decimal point' }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ len_var( l.rightpart ) GT l.right }">
		<MvIF EXPR = "{ l.right EQ 1 }">	<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please specify a number with 1 digit or less to the right of the decimal point">
		<MvELSE>							<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please specify a number with ' $ l.right $ ' digits or less to the right of the decimal point' }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Extension_ToLowerCase" PARAMETERS = "old_file var, valid_ext, old_file_ext var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.old_file_ext"		VALUE = "{ tolower( [ g.Library_Utilities ].Extension_NoDot( l.old_file ) ) }">
	<MvASSIGN NAME = "l.old_file"			VALUE = "{ substring( l.old_file, 1, len( l.old_file ) - len( l.old_file_ext ) ) $ l.old_file_ext }">

	<MvFOR INDEX = "l.pos" FIRST = "{ 1 }" NEXT = "{ l.pos + 1 }" EXPR = "{ 1 }">
		<MvASSIGN NAME = "l.allowed_ext"	VALUE = "{ trim( gettoken( l.valid_ext, ',', l.pos ) ) }">

		<MvIF EXPR = "{ ISNULL l.allowed_ext }">			<MvFORSTOP>						</MvIF>
		<MvIF EXPR = "{ l.old_file_ext EQ l.allowed_ext }">	<MvFUNCTIONRETURN VALUE = 1>	</MvIF>
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Extension" PARAMETERS = "old_file, valid_ext, old_file_ext var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.old_file_ext"		VALUE = "{ [ g.Library_Utilities ].Extension_NoDot( l.old_file ) }">

	<MvFOR INDEX = "l.pos" FIRST = "{ 1 }" NEXT = "{ l.pos + 1 }" EXPR = "{ 1 }">
		<MvASSIGN NAME = "l.allowed_ext"	VALUE = "{ trim( gettoken( l.valid_ext, ',', l.pos ) ) }">

		<MvIF EXPR = "{ ISNULL l.allowed_ext }">			<MvFORSTOP>						</MvIF>
		<MvIF EXPR = "{ l.old_file_ext EQ l.allowed_ext }">	<MvFUNCTIONRETURN VALUE = 1>	</MvIF>
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Image_Extension" PARAMETERS = "old_image, old_image_ext var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ Validate_Extension( l.old_image, g.Domain:img_ext, l.old_image_ext ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Image_Extension_ToLowerCase" PARAMETERS = "image_filepath var, extension var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.extension"		VALUE = "{ tolower( [ g.Library_Utilities ].Extension_NoDot( l.image_filepath ) ) }">
	<MvASSIGN NAME = "l.image_filepath"	VALUE = "{ substring( l.image_filepath, 1, len( l.image_filepath ) - len( l.extension ) ) $ l.extension }">

	<MvFOR INDEX = "l.pos" FIRST = "{ 1 }" NEXT = "{ l.pos + 1 }" EXPR = "{ 1 }">
		<MvASSIGN NAME = "l.allowed_ext"	VALUE = "{ trim( gettoken( g.Domain:img_ext, ',', l.pos ) ) }">

		<MvIF EXPR = "{ ISNULL l.allowed_ext }">			<MvFORSTOP>						</MvIF>
		<MvIF EXPR = "{ l.extension EQ l.allowed_ext }">	<MvFUNCTIONRETURN VALUE = 1>	</MvIF>
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Passphrase" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Validation codes are:
	|		1	Blank
	|		2	Too Short
	|		3	Too Long
	|		4	Invalid Characters - all alpha
	|		5	Invalid Characters - all numbers
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvASSIGN NAME = "g.Validation_Message"	VALUE = "Please specify a passphrase">
		<MvASSIGN NAME = "g.Validation_Code"	VALUE = 1>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ len( l.value ) LT 16 }">
		<MvASSIGN NAME = "g.Validation_Message"	VALUE = "Passphrase must be at least 16 characters, 23 characters recommended">
		<MvASSIGN NAME = "g.Validation_Code"	VALUE = 2>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ len( l.value ) LT 23 }">
		<MvASSIGN NAME = "g.Validation_Message"	VALUE = "Passphrase should be at least 23 characters">
		<MvASSIGN NAME = "g.Validation_Code"	VALUE = 2>
	</MvIF>

	<MvIF EXPR = "{ len( l.value ) GT 254 }">
		<MvASSIGN NAME = "g.Validation_Message"	VALUE = "Passphrase must be 254 characters or less">
		<MvASSIGN NAME = "g.Validation_Code"	VALUE = 3>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ isalpha( l.value ) }">
		<MvASSIGN NAME = "g.Validation_Message"	VALUE = "Passphrase must contain some non-alphabetic characters (numbers or punctiation)">
		<MvASSIGN NAME = "g.Validation_Code"	VALUE = 4>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ isdigit( l.value ) }">
		<MvASSIGN NAME = "g.Validation_Message"	VALUE = "Passphrase must contain some non-numeric characters (letters or punctiation)">
		<MvASSIGN NAME = "g.Validation_Code"	VALUE = 5>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Validates a "token" from the HTML 1.1 RFC Augmented BNF
|	http://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html#sec2.1
|
</MvCOMMENT>

<MvFUNCTION NAME = "Validate_HTMLToken" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pos"			VALUE = 1>
	<MvASSIGN NAME = "l.len"			VALUE = "{ len( l.value ) }">

	<MvWHILE EXPR = "{ l.pos LE l.len }">
		<MvASSIGN NAME = "l.char"		VALUE = "{ substring( l.value, l.pos, 1 ) }">

		<MvIF EXPR = "{ l.char EQ '(' }">			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ ')' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '<' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '>' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '@' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ ',' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ ';' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ ':' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '\\' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '"' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '/' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '[' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ ']' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '?' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '=' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '{' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ '}' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.char EQ ' ' }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.byte"	VALUE = "{ asciivalue( l.char ) }">
			<MvIF EXPR = "{ l.byte LE 31 }">		<MvFUNCTIONRETURN VALUE = 0>
			<MvELSEIF EXPR = "{ l.byte EQ 127 }">	<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Password" PARAMETERS = "settings var, password" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len_var( l.password ) LT l.settings:pw_min_len }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ 'Please enter a password that is at least ' $ l.settings:pw_min_len $ ' character(s) long' }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.settings:pw_complex }">
		<MvASSIGN NAME = "l.pos"		VALUE = 1>
		<MvASSIGN NAME = "l.len"		VALUE = "{ len_var( l.password ) }">

		<MvASSIGN NAME = "l.have_upper"	VALUE = 0>
		<MvASSIGN NAME = "l.have_lower"	VALUE = 0>
		<MvASSIGN NAME = "l.have_digit"	VALUE = 0>
		<MvASSIGN NAME = "l.have_other"	VALUE = 0>

		<MvWHILE EXPR = "{ l.pos LE l.len }">
			<MvASSIGN NAME = "l.char"	VALUE = "{ substring( l.password, l.pos, 1 ) }">

			<MvIF EXPR = "{ isupper( l.char ) }">		<MvASSIGN NAME = "l.have_upper"	VALUE = "{ l.have_upper + 1 }">
			<MvELSEIF EXPR = "{ islower( l.char ) }">	<MvASSIGN NAME = "l.have_lower"	VALUE = "{ l.have_lower + 1 }">
			<MvELSEIF EXPR = "{ isdigit( l.char ) }">	<MvASSIGN NAME = "l.have_digit"	VALUE = "{ l.have_digit + 1 }">
			<MvELSE>									<MvASSIGN NAME = "l.have_other"	VALUE = "{ l.have_other + 1 }">
			</MvIF>

			<MvASSIGN NAME = "l.pos"	VALUE = "{ l.pos + 1 }">
		</MvWHILE>

		<MvIF EXPR = "{ l.settings:pw_complex EQ 1 }">
			<MvIF EXPR = "{ ( ( l.have_upper + l.have_lower ) EQ 0 ) OR ( ( l.have_digit + l.have_other ) EQ 0 ) }">
				<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a password that contains at least one letter and one number or punctuation character">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.settings:pw_complex EQ 2 }">
			<MvIF EXPR = "{ ( l.have_upper EQ 0 ) OR ( l.have_lower EQ 0 ) OR ( ( l.have_digit + l.have_other ) EQ 0 ) }">
				<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please enter a password that contains at least one upper case letter, one lower case letter, and one number or punctuation character">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_Symmetric_Password_Encryption" PARAMETERS = "password" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( ( 'ENCR:' IN l.password ) EQ 1 ) OR
					( ( 'ENC2:' IN l.password ) EQ 1 ) }">
		<MvASSIGN NAME = "g.Validation_Message"		VALUE = "Password is encrypted using an obsolete key">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ ( 'PBES2:' IN l.password ) NE 1 }">
		<MvASSIGN NAME = "g.Validation_Message"		VALUE = "Password is stored in plain text">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.cipher"						VALUE = "{ gettoken( l.password, ':', 4 ) }">
	<MvASSIGN NAME = "l.key_id"						VALUE = "{ gettoken( l.password, ':', 6 ) }">

	<MvIF EXPR = "{ crypto_cipher_mode( l.cipher ) NE 'cbc' }">
		<MvASSIGN NAME = "g.Validation_Message"		VALUE = "Password is encrypted using an inappropriate block mode">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.key_id LT 3 }">
		<MvASSIGN NAME = "g.Validation_Message"		VALUE = "Password is encrypted using an obsolete key">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_URI" PARAMETERS = "uri" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.uri }">
		<MvASSIGN NAME = "g.Validation_Message"	VALUE = "Please specify a URI">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( '/' IN l.uri ) NE 1 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "URIs must begin with a forward slash">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( ' ' IN l.uri )				OR
					( asciichar( 9 ) IN l.uri )		OR
					( asciichar( 10 ) IN l.uri )	OR
					( asciichar( 13 ) IN l.uri )	OR
					( '?' IN l.uri )				OR
					( '#' IN l.uri ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "URIs may not contain spaces or any of the following characters: ? #">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Trim_Boolean" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.value }">
		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_StandardFields" PARAMETERS = "fields var, address var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.fields:mode_fname EQ 'R' AND ISNULL l.address:fname }">								<MvASSIGN NAME = "g.Validation_Message" VALUE = "First name is required">				<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_lname EQ 'R' AND ISNULL l.address:lname }">								<MvASSIGN NAME = "g.Validation_Message" VALUE = "Last name is required">				<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_email EQ 'R' AND ISNULL l.address:email }">								<MvASSIGN NAME = "g.Validation_Message" VALUE = "Email is required">					<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.address:email AND NOT Validate_Email( l.address:email ) }">																										<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_phone EQ 'R' AND ISNULL l.address:phone }">								<MvASSIGN NAME = "g.Validation_Message" VALUE = "Phone is required">					<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.address:phone AND NOT Validate_Phone( l.address:phone, l.address:cntry ) }">																						<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_fax EQ 'R' AND ISNULL l.address:fax }">									<MvASSIGN NAME = "g.Validation_Message" VALUE = "Fax is required">						<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.address:fax AND NOT Validate_Phone( l.address:fax, l.address:cntry ) }">	<MvASSIGN NAME = "g.Validation_Message" VALUE = "Please specify a valid fax number">	<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_comp EQ 'R' AND ISNULL l.address:comp }">									<MvASSIGN NAME = "g.Validation_Message" VALUE = "Company is required">					<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_addr EQ 'R' AND ISNULL l.address:addr1 }">								<MvASSIGN NAME = "g.Validation_Message" VALUE = "Address is required">					<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_addr2 EQ 'R' AND ISNULL l.address:addr2 }">								<MvASSIGN NAME = "g.Validation_Message" VALUE = "Address 2 is required">				<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_city EQ 'R' AND ISNULL l.address:city }">									<MvASSIGN NAME = "g.Validation_Message" VALUE = "City is required">						<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_state EQ 'R' AND ISNULL l.address:state }">								<MvASSIGN NAME = "g.Validation_Message" VALUE = "State is required">					<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_zip EQ 'R' AND ISNULL l.address:zip }">									<MvASSIGN NAME = "g.Validation_Message" VALUE = "Zip is required">						<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.address:zip AND NOT Validate_Zip( l.address:zip, l.address:cntry ) }">																								<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ l.fields:mode_cntry EQ 'R' AND ISNULL l.address:cntry }">								<MvASSIGN NAME = "g.Validation_Message" VALUE = "Country is required">					<MvFUNCTIONRETURN VALUE = 0> </MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_IP_List" PARAMETERS = "ips" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.entry" ARRAY = "l.entries" COUNT = "{ miva_splitstring( l.ips, ',', l.entries, 'trim,noempty' ) }">
		<MvIF EXPR = "{ NOT Validate_IP( l.entry ) }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ l.entry $ ': ' $ g.Validation_Message }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_CIDR_List" PARAMETERS = "cidrs" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.entry" ARRAY = "l.entries" COUNT = "{ miva_splitstring( l.cidrs, ',', l.entries, 'trim,noempty' ) }">
		<MvIF EXPR = "{ NOT Validate_CIDR( l.entry ) }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ l.entry $ ': ' $ g.Validation_Message }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_IP" PARAMETERS = "ip" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_ip_normalize( l.ip, l.null ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Invalid IPv4 / IPv6 address format">
		<MvFUNCTIONRETURN VALUE = 0>	
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_CIDR" PARAMETERS = "cidr" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Parse_CIDR_Components( l.cidr, l.components ) }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "{ g.Error_Message }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.components:version EQ 4 }">
		<MvIF EXPR = "{ NOT miva_ip_normalize( l.components:ip, l.normalized_ip ) }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Invalid IPv4 address">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT Validate_IPv4_Routing_Prefix( l.components:routing_prefix ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.components:version EQ 6 }">
		<MvIF EXPR = "{ NOT miva_ip_normalize( l.components:ip, l.normalized_ip ) }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Invalid IPv6 address">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT Validate_IPv6_Routing_Prefix( l.components:routing_prefix ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "Invalid IP address version">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ strcmp( l.components:routing_prefix, '0' ) EQ 0 }">
		<MvIF EXPR = "{ l.normalized_ip NE '0.0.0.0' AND l.normalized_ip NE '::' }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Routing prefix /0 is only valid with the default routes 0.0.0.0 and ::0">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_IPv4" PARAMETERS = "ip" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ miva_ip_version( l.ip ) EQ 4 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "g.Validation_Message" VALUE = "Invalid IPv4 address">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_IPv4_Routing_Prefix" PARAMETERS = "routing_prefix" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.routing_prefix OR NOT isdigit( l.routing_prefix ) OR l.routing_prefix LT 0 OR l.routing_prefix GT 32 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "IPv4 routing prefix must be between 0 and 32">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_IPv6" PARAMETERS = "ip" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ miva_ip_version( l.ip ) EQ 6 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "g.Validation_Message" VALUE = "Invalid IPv6 address">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_IPv6_Routing_Prefix" PARAMETERS = "routing_prefix" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.routing_prefix OR NOT isdigit( l.routing_prefix ) OR l.routing_prefix LT 0 OR l.routing_prefix GT 128 }">
		<MvASSIGN NAME = "g.Validation_Message" VALUE = "IPv6 routing prefix must be between 0 and 128">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>
