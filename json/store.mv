<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-JSN-STR-
| Next Error Code: 33   
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Store" PARAMETERS = "store var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.store:id ) }">,
	"manager_id":	<MvEVAL EXPR = "{ int( l.store:manager_id ) }">,
	"code":			"<MvEVAL EXPR = "{ JSON_Encode( l.store:code ) }">",
	"license":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:license ) }">",
	"name":			"<MvEVAL EXPR = "{ JSON_Encode( l.store:name ) }">",
	"owner":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:owner ) }">",
	"email":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:email ) }">",
	"company":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:company ) }">",
	"address":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:address ) }">",
	"city":			"<MvEVAL EXPR = "{ JSON_Encode( l.store:city ) }">",
	"state":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:state ) }">",
	"zip":			"<MvEVAL EXPR = "{ JSON_Encode( l.store:zip ) }">",
	"phone":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:phone ) }">",
	"fax":			"<MvEVAL EXPR = "{ JSON_Encode( l.store:fax ) }">",
	"country":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:country ) }">",
	"wtunits":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:wtunits ) }">",
	"wtunitcode":	"<MvEVAL EXPR = "{ JSON_Encode( l.store:wtunitcode ) }">",
	"dmunitcode":	"<MvEVAL EXPR = "{ JSON_Encode( l.store:dmunitcode ) }">",
	"baskexp":		<MvEVAL EXPR = "{ int( l.store:baskexp ) }">,
	"pgrp_ovlp":	"<MvEVAL EXPR = "{ JSON_Encode( l.store:pgrp_ovlp ) }">",
	"ui_id":		<MvEVAL EXPR = "{ int( l.store:ui_id ) }">,
	"tax_id":		<MvEVAL EXPR = "{ int( l.store:tax_id ) }">,
	"currncy_id":	<MvEVAL EXPR = "{ int( l.store:currncy_id ) }">,
	"boxpack_id":	<MvEVAL EXPR = "{ int( l.store:boxpack_id ) }">,
	"addrval_id":	<MvEVAL EXPR = "{ int( l.store:addrval_id ) }">,
	"mnt_warn":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:mnt_warn ) }">",
	"mnt_close":	"<MvEVAL EXPR = "{ JSON_Encode( l.store:mnt_close ) }">",
	"mnt_time":		<MvEVAL EXPR = "{ int( l.store:mnt_time ) }">,
	"mnt_no_new":	<MvEVAL EXPR = "{ int( l.store:mnt_no_new ) }">,
	"omin_quant":	<MvEVAL EXPR = "{ int( l.store:omin_quant ) }">,
	"omin_price":	<MvEVAL EXPR = "{ l.store:omin_price ROUND 2 }">,
	"omin_all":		<MvEVAL EXPR = "{ JSON_Boolean( l.store:omin_all ) }">,
	"omin_msg":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:omin_msg ) }">",
	"crypt_id":		<MvEVAL EXPR = "{ int( l.store:crypt_id ) }">,
	"req_ship":		<MvEVAL EXPR = "{ JSON_Boolean( l.store:req_ship ) }">,
	"req_tax":		<MvEVAL EXPR = "{ JSON_Boolean( l.store:req_tax ) }">,
	"req_frship":	<MvEVAL EXPR = "{ JSON_Boolean( l.store:req_frship ) }">,
	"charset":		"<MvEVAL EXPR = "{ JSON_Encode( l.store:charset ) }">",
	"cache_type":	"<MvEVAL EXPR = "{ JSON_Encode( l.store:cache_type ) }">",
	"cache_comp":	<MvEVAL EXPR = "{ JSON_Boolean( l.store:cache_comp ) }">,
	"redishost":	"<MvEVAL EXPR = "{ JSON_Encode( l.store:redishost ) }">",
	"redisport":	<MvEVAL EXPR = "{ int( l.store:redisport ) }">,
	"redisto":		<MvEVAL EXPR = "{ int( l.store:redisto ) }">,
	"redisex":		<MvEVAL EXPR = "{ int( l.store:redisex ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Store_Load" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">	<MvFUNCTIONRETURN> </MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_Store( g.Store ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreList_Load_All" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	[
		<MvASSIGN NAME = "l.count" VALUE = 0>
		<MvFOREACH ITERATOR = "l.store" ARRAY = "l.stores" COUNT = "{ [ g.Module_Library_DB ].StoreList_Load_User( g.Admin_User_ID, l.stores ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.count ) }">
				<MvEVAL EXPR = "{ JSON_Store( l.store ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">

	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'code',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'license',	'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'name',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'owner',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'email',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'company',	'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'address',	'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'city',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'state',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'zip',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'phone',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'fax',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'country',	'' ) }">

	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT JSON_Input_Text(	'o', 'Sort',	l.sort )	OR
					NOT JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.search_query"				VALUE = "">

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query,	'*' ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_FROM( l.search_query,		'Stores', '' ) }">

	<MvEVAL EXPR = "{ JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ JSON_OrderBy( l.search_query, l.sort, 'code,license,name,owner,email,company,address,city,state,zip,phone,fax,country', 'id' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Stores', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-STR-00005', g.MvOPENVIEW_Error ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.store_count" VALUE = 0>
	
	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Stores.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.store_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].Store_Read( l.store ) }">

			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.store_count ) }">
				<MvEVAL EXPR = "{ JSON_Store( l.store ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Stores" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Stores">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreCountryList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'STCT', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.count_sql"				VALUE = "">
	<MvASSIGN NAME = "l.search_query"			VALUE = "">
	<MvASSIGN NAME = "l.countries_query"		VALUE = "">
	<MvASSIGN NAME = "l.storecountries_query"	VALUE = "">
	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = "">
	<MvASSIGN NAME = "l.count"					VALUE = "">
	<MvASSIGN NAME = "l.assigned"				VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"				VALUE = 0>
	
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters_countries, 		'c.alpha',	'alpha' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters_countries, 		'c.name',	'name' ) }">

	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters_store_countries, 	'sc.alpha',	'alpha' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters_store_countries, 	'sc.name',	'name' ) }">
	
	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT JSON_Input_Text(	'o', 'Sort',		l.sort )		OR
					NOT JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.assigned AND NOT l.unassigned }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
	</MvIF>

	<MvIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.countries_query, 'c.id			AS id,
																						c.name			AS name,
																						c.alpha			AS alpha,
																						c.iso_code		AS iso_code,
																						0				AS disp_order,
																						0				AS assigned' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.countries_query, 'Countries', 'c' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.countries_query, 'c', g.Store_Table_Prefix $ 'StoreCountries', 'sc', 'sc.id = c.id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.countries_query, 'sc.id IS NULL', '' ) }">
		<MvEVAL EXPR = "{ JSON_Filter( l.countries_query, l.filter, l.available_filters_countries ) }">
	</MvIF>

	<MvIF EXPR = "{ l.assigned }">		
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.storecountries_query, 'sc.id			AS id,
																							 sc.name		AS name,
																							 sc.alpha		AS alpha,
																							 sc.iso_code	AS iso_code,
																							 sc.disp_order	AS disp_order,
																							 1				AS assigned' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.storecountries_query, g.Store_Table_Prefix $ 'StoreCountries', 'sc' ) }">
		<MvEVAL EXPR = "{ JSON_Filter( l.storecountries_query, l.filter, l.available_filters_store_countries ) }">
	</MvIF>

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.countries_query ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.storecountries_query ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, l.sort, 'alpha,name,disp_order', 'disp_order' ) }">

		<MvASSIGN NAME = "l.countries_count_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.countries_query,		l.null ) }">
		<MvASSIGN NAME = "l.storecountries_count_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.storecountries_query, 	l.null ) }">

		<MvASSIGN NAME = "l.count_sql"					VALUE = "{ l.countries_count_sql $ ' UNION ALL ' $ l.storecountries_count_sql }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvASSIGN NAME = "l.search_query"				VALUE = "{ l.storecountries_query }">
		<MvASSIGN NAME = "l.count_sql"					VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.search_query,	l.null ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, l.sort, 'alpha,name,disp_order', 'disp_order' ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvASSIGN NAME = "l.search_query"				VALUE = "{ l.countries_query }">
		<MvASSIGN NAME = "l.count_sql"					VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.search_query,	l.null ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, l.sort, 'alpha,name,disp_order', 'disp_order' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Count( l.count_sql, l.search_fields, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Countries', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-STR-00001', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.country_count" VALUE = 0>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Countries.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.country_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].Country_Read( l.country ) }">

			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.country_count ) }">
				"id":			<MvEVAL EXPR = "{ int( l.country:id  )}">,
				"alpha":		"<MvEVAL EXPR = "{ JSON_Encode( l.country:alpha ) }">",
				"name":			"<MvEVAL EXPR = "{ JSON_Encode( l.country:name ) }">",
				"disp_order":	<MvEVAL EXPR = "{ int( Countries.d.disp_order ) }">,
				"assigned":		<MvEVAL EXPR = "{ JSON_Boolean( Countries.d.assigned ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Countries" ROWS = 1>
		</MvWHILE>
		]
	}

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Countries">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreCountryIndex_Load_ID" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'STCT', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.countries_query"		VALUE = "">
	<MvASSIGN NAME = "l.storecountries_query"	VALUE = "">
	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = "">
	<MvASSIGN NAME = "l.count"					VALUE = "">
	<MvASSIGN NAME = "l.country_id"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"				VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"				VALUE = 0>
	
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters_countries, 		'c.alpha',	'alpha' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters_countries, 		'c.name',	'name' ) }">

	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters_store_countries, 	'alpha',	'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters_store_countries, 	'name',		'' ) }">

	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT JSON_Input_Text(	'o', 'Sort',		l.sort )		OR
					NOT JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT JSON_Input_Integer(	'R', 'Country_ID',	l.country_id )	OR
					NOT JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvREFERENCE NAME = "l.countries_record:c"	VARIABLE = "l.country">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Country_Load_ID( l.country_id, l.country ) }">
		<MvIF EXPR = "{ [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-STR-00014', 'Country ' $ l.country_id $ ' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].StoreCountry_Load_ID( l.country_id, l.country ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.countries_query, 'Countries', 'c' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.countries_query, 'c', g.Store_Table_Prefix $ 'StoreCountries', 'sc', 'sc.id = c.id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.countries_query, 'sc.id IS NULL', '' ) }">

		<MvEVAL EXPR = "{ JSON_Filter( l.countries_query, l.filter, l.available_filters_countries ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_OrderBy_Fields( l.countries_query, l.sort, 'alpha:c.alpha,name:c.name', 'c.name' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.assigned }">		
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.storecountries_query, g.Store_Table_Prefix $ 'StoreCountries', '' ) }">

		<MvEVAL EXPR = "{ JSON_Filter( l.storecountries_query, l.filter, l.available_filters_store_countries ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_OrderBy_Fields( l.storecountries_query, l.sort, 'alpha,name,disp_order', 'disp_order' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].SQL_Query_Index( l.countries_query, l.countries_record, l.countries_index ) OR
						NOT [ g.Library_DB ].SQL_Query_Index( l.storecountries_query, l.country, l.storecountries_index ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.index"				VALUE = "{ l.countries_index + l.storecountries_index }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].SQL_Query_Index( l.storecountries_query, l.country, l.index ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].SQL_Query_Index( l.countries_query, l.countries_record, l.index ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"index":	<MvEVAL EXPR = "{ int( l.index ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreCountry_Update_Assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.can_add" 	VALUE = "{ [ g.Module_Admin ].CanI( 'STCT', 0, 1, 0, 0 ) }">
	<MvASSIGN NAME = "l.can_delete" VALUE = "{ [ g.Module_Admin ].CanI( 'STCT', 0, 0, 0, 1 ) }">

	<MvASSIGN NAME = "g.Country_ID"	VALUE = "{ int( g.Country_ID ) }">
	<MvASSIGN NAME = "g.Assigned"	VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Assigned ) }">

	<MvASSIGN NAME = "l.assigned"	VALUE = "{ [ g.Module_Library_DB ].StoreCountry_Load_ID( g.Country_ID, l.storecountry ) }">

	<MvIF EXPR = "{ g.Assigned }">
		<MvIF EXPR = "{ l.can_add AND ( NOT l.assigned ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Country_Load_ID( g.Country_ID, l.country ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-STR-00011', 'Failed to load country' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreCountry_Insert( l.country ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-JSN-STR-00012', 'Country \'' $ l.country:alpha $ '\' assigned' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.assigned AND l.can_delete }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreCountry_Delete_ID( l.storecountry:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-JSN-STR-00013', 'Country \'' $ l.storecountry:alpha $ '\' unassigned' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreCountryList_DisplayOrder_Update" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'STCT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvFOREACH ITERATOR = "l.storecountry_order" ARRAY = "g.StoreCountry_Order" INDEX = "l.pos">
		<MvASSIGN NAME = "l.storecountry_order:id"				VALUE = "{ int( l.storecountry_order:id ) }">
		<MvASSIGN NAME = "l.storecountry_order:offset"			VALUE = "{ int( l.storecountry_order:offset ) }">
		<MvASSIGN NAME = "l.storecountry_order:original_offset"	VALUE = "{ int( l.storecountry_order:original_offset ) }">

		<MvIF EXPR = "{ NOT [ g.Filename_Admin ].Validate_WholeNumber_Positive_Required( l.storecountry_order:offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_FieldError( 'StoreCountry_Order[' $ l.pos $ ']', g.Validation_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.change_count"							VALUE = 0>

	<MvFOREACH ITERATOR = "l.storecountry_order" ARRAY = "g.StoreCountry_Order">
		<MvASSIGN NAME = "l.changes" INDEX = "{ ++l.change_count }"	VALUE = "{ l.storecountry_order }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.change_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].StoreCountryList_Update_Offsets( l.changes ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Filename_Admin ].Admin_Log_Action( 'MER-JSN-STR-00015', 'Store Country sort order updated' ) }">
	
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreIcon_Upload_ValidateFileUpload" PARAMETERS = "field, filename, content_type" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT g.Admin_User_Administrator }"> <MvFUNCTIONRETURN VALUE = -1> </MvIF>

	<MvCOMMENT>
	|
	| If more than one uploaded file is present in a single call, just ignore it.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( NOT ISNULL g.Filename ) OR ( NOT ISNULL g.File_MD5 ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvIF EXPR = "{ l.content_type EQ 'image/jpeg'	OR
					l.content_type EQ 'image/png'	OR
					l.content_type EQ 'image/webp' }">
		<MvFUNCTIONRETURN VALUE = 2097152>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-JSN-STR-00016', 'Invalid or unsupported image type for file \'' $ l.filename $ '\'' ) }">
	<MvEVAL EXPR = "{ JSON_FileUpload_Error( 'MER-JSN-STR-00017', 'Invalid or unsupported image type' ) }">
	<MvFUNCTIONRETURN VALUE = -1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreIcon_Upload_ProcessFileUpload" PARAMETERS = "field, filename, status, tempfile, content_type, size" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT g.Admin_User_Administrator }"> <MvFUNCTIONRETURN> </MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_ProcessFileUpload( 'Store Icon', l.field, l.filename, l.status, l.tempfile, l.content_type, l.size ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreIcon_Upload" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT g.Admin_User_Administrator }"> <MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_ValidateUploadedFile( l.uploaded_tempfile ) }">									<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-STR-00018', 'Invalid store icon. Please upload an icon that is under 2MB.' ) }">
	<MvELSEIF EXPR = "{ NOT JSON_StoreIcon_Upload_Process_IconFile( l.uploaded_tempfile, l.uploaded_icon ) }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-JSN-STR-00019', 'Store Icon \'' $ l.uploaded_icon $ '\' uploaded' ) }">

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
		"<MvEVAL EXPR = "{ JSON_Encode( l.uploaded_icon ) }">"
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreIcon_Upload_Process_IconFile" PARAMETERS = "uploaded_tempfile, icon var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.result"	VALUE = "{ JSON_StoreIcon_Upload_Process_IconFile_LowLevel( l.uploaded_tempfile, l.icon ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ fdelete( l.uploaded_tempfile ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_StoreIcon_Upload_Process_IconFile_LowLevel" PARAMETERS = "uploaded_tempfile, icon var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].Validate_Extension_ToLowerCase( g.Filename, 'jpg,jpeg,jpe,png,webp', l.null ) }">
		<MvEVAL EXPR = "{ [ g.Filename_Admin ].Admin_Log_Action( 'MER-JSN-STR-00020', 'Store Icon uploaded with invalid extension for file \'' $ g.Filename $ '\' at path \'' $ l.uploaded_tempfile $ '\'' ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error( 'MER-JSN-STR-00021', 'Invalid image extension' ) }">
	</MvIF>

	<MvIF EXPR = "{ file_read( l.uploaded_tempfile, 'data', l.uploaded_tempfile_content ) LE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error( 'MER-JSN-STR-00022', 'Temporary image file not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.filename"				VALUE = "{ JSON_Decode( g.Filename ) }">
	<MvASSIGN NAME = "l.extension"				VALUE = "{ [ g.Library_Utilities ].Extension( l.filename ) }">
	<MvASSIGN NAME = "l.new_filename"			VALUE = "{ crypto_md5( l.uploaded_tempfile_content ) }">
	<MvASSIGN NAME = "l.imagedir"				VALUE = "{ [ g.Filename_Admin ].Store_Icon_Directory() }">
	<MvASSIGN NAME = "l.test_file_data"			VALUE = "{ 'JSON_StoreIcon_Upload_Process_IconFile;' $ s.process_id $ ';' $ l.filename $ ';' $ g.File_MD5 }">

	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Image_Type_From_Header_Memory( l.uploaded_tempfile_content, l.type ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Value_In_List( l.type, 'jpg,png,webp' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error( 'MER-JSN-STR-00023', 'Invalid or unsupported image type' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].EnsurePathExists( 'script', g.imageroot $ l.imagedir ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.destfile_path"			VALUE = "{ l.imagedir $ l.new_filename $ l.extension }">

	<MvCOMMENT>
	|
	| file_create atomically either creates the file or tells us it already exists.  We write
	| fairly arbitrary data to the file--its contents will be overwritten below.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ file_create( g.imageroot $ l.destfile_path, 'script', l.test_file_data ) LT 0 }">
		<MvCOMMENT>
		|
		| File has already been uploaded
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.icon"				VALUE = "{ l.destfile_path }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT fsrename( l.uploaded_tempfile, g.imageroot $ l.destfile_path ) }">
		<MvASSIGN NAME = "l.file_last_error"	VALUE = "{ file_last_error() }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ sdelete( g.imageroot $ l.destfile_path ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error( 'MER-JSN-STR-00024', 'Unable to rename temporary image file "' $ l.uploaded_tempfile $ '" to "' $ g.imageroot $ l.destfile_path $ '": ' $ file_last_error() ) }">
	</MvIF>

	<MvASSIGN NAME = "l.icon"					VALUE = "{ l.destfile_path }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CacheSetting_Load" PARAMETERS = "store var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ JSON_Input_Retrieve( 'Edit_CacheSetting_Type', l.settings:type ) AND
					JSON_Input_Retrieve( 'Edit_CacheSetting_Name', l.settings:name ) }">
		<MvREFERENCEARRAY NAME = "l.settings:ref" VARIABLE = "l.store:cacheset">
			<MvMEMBER NAME = "{ l.settings:type }">
			<MvMEMBER NAME = "{ l.settings:name }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ISNULL l.settings:ref }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error( 'MER-JSN-STR-00025', 'Cache settings not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error( 'MER-JSN-STR-00026', 'Unable to load cache settings: Edit_CacheSetting_Type and Edit_CacheSetting_Name must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CacheSettingList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>												</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'STOR', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"		VALUE = "">
	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = 0>
	<MvASSIGN NAME = "l.count"					VALUE = 0>
	<MvASSIGN NAME = "l.records"				VALUE = "">
	<MvASSIGN NAME = "l.search_expression"		VALUE = "1 EQ 1">

	<MvEVAL EXPR = "{ JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'name',	'l.record:name' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'type',	'l.record:type' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'mode',	'l.record:mode' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'value',	'l.record:value' ) }">

	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o',		'Filter',	l.filter )	OR
					NOT JSON_Input_Text(	'o',		'Sort',		l.sort )	OR
					NOT JSON_Input_Integer(	'o:nonneg', 'Offset',	l.offset )	OR
					NOT JSON_Input_Integer(	'o',		'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.type" ARRAY = "l.types" COUNT = "{ miva_struct_members( g.Store:cacheset, l.types ) }">
		<MvREFERENCEARRAY NAME = "l.name_struct" VARIABLE = "g.Store:cacheset">
			<MvMEMBER NAME = "{ l.type }">
		</MvREFERENCEARRAY>

		<MvFOREACH ITERATOR = "l.name" ARRAY = "l.names" COUNT = "{ miva_struct_members( l.name_struct, l.names ) }">
			<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "g.Store:cacheset">
				<MvMEMBER NAME = "{ l.type }">
				<MvMEMBER NAME = "{ l.name }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.record"			VALUE = "">
			<MvASSIGN NAME = "l.record:name"	VALUE = "{ l.name }">
			<MvASSIGN NAME = "l.record:type"	VALUE = "{ l.type }">
			<MvASSIGN NAME = "l.record:mode"	VALUE = "{ l.settings:mode }">
			<MvASSIGN NAME = "l.record:value"	VALUE = "{ l.settings:value }">

			<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert_var( l.records, l.record, -1 ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvEVAL EXPR = "{ JSON_Filter_MivaScript( l.search_expression, l.filter, l.available_filters ) }">

	<MvASSIGN NAME = "l.total_count"			VALUE = "{ miva_array_filter_ref( l.records, 1, l.record, l.search_expression, l.filtered_records ) }">
	<MvASSIGN NAME = "l.null"					VALUE = "{ miva_array_sort( l.filtered_records, 'CacheSettingList_Sort_Callback', l.sort ) }">
	<MvASSIGN NAME = "l.output_count"			VALUE = 0>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.record" ARRAY = "l.filtered_records" FIRST = "{ l.offset + 1 }" LAST = "{ l.total_count }">
				<MvIF EXPR = "{ ( l.output_count GE l.count ) AND ( l.count NE 0 ) }">
					<MvFOREACHSTOP>
				</MvIF>

				<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.output_count ) }">
					"type":		"<MvEVAL EXPR = "{ JSON_Encode( l.record:type ) }">",
					"name":		"<MvEVAL EXPR = "{ JSON_Encode( l.record:name ) }">",
					"mode":		"<MvEVAL EXPR = "{ JSON_Encode( l.record:mode ) }">",
					"value":	"<MvEVAL EXPR = "{ JSON_Encode( l.record:value ) }">"
				<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "CacheSettingList_Sort_Callback" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.data EQ 'name' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:name, l.right:name ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-name' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:name, l.left:name ) }">
	<MvELSEIF EXPR = "{ l.data EQ 'type' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:type, l.right:type ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-type' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:type, l.left:type ) }">
	<MvELSEIF EXPR = "{ l.data EQ 'mode' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:mode, l.right:mode ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-mode' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:mode, l.left:mode ) }">
	<MvELSEIF EXPR = "{ l.data EQ 'value' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:value, l.right:value ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-value' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:value, l.left:value ) }">
	</MvIF>

	<MvIF EXPR = "{ l.result NE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.result }">
	</MvIF>

	<MvCOMMENT>
	|
	| Break ties using name then type
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ substring_var( l.data, 1, 1 ) NE '-' }">
		<MvIF EXPR = "{ strcasecmp( l.left:name, l.right:name ) LT 0 }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:name, l.right:name ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:type, l.right:type ) LT 0 }">	<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:type, l.right:type ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ strcasecmp( l.right:name, l.left:name ) LT 0 }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.right:name, l.left:name ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ strcasecmp( l.right:type, l.left:type ) LT 0 }">	<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.right:type, l.left:type ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CacheSetting_Insert" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>												</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'STOR', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Access_Denied() }">	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_CHE_UT ].Store_CacheSettings_LockFile( g.Store ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_CacheSetting_Insert_LowLevel() }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CacheSetting_Insert_LowLevel" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_ID( g.Store:id, l.store )  }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>	

	<MvIF EXPR = "{ NOT JSON_Input_List( 'R', 'Type', l.type, 'cookie,parameter,header', 'cookie,parameter,header' ) OR
					NOT JSON_Input_Text( 'R', 'Name', l.name ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.store:cacheset">
		<MvMEMBER NAME = "{ l.type }">
		<MvMEMBER NAME = "{ l.name }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT ISNULL l.settings }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-STR-00027', 'Cache settings with type \'' $ l.type $ '\' and name \'' $ l.name $ '\' already defined' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.type EQ 'parameter' }">
		<MvIF EXPR = "{ NOT JSON_Input_List( 'R', 'Mode', l.settings:mode, 'ignore,disable,disable_substring,disable_equal', 'ignore,disable,disable_substring,disable_equal' ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT JSON_Input_List( 'R', 'Mode', l.settings:mode, 'key,disable,disable_substring,disable_equal', 'key,disable,disable_substring,disable_equal' ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.settings:mode EQ 'disable_substring' OR l.settings:mode EQ 'disable_equal' }">
		<MvIF EXPR = "{ NOT JSON_Input_Text( 'R', 'Value', l.settings:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Store_Update_CacheSettings( l.store ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Filename_Admin ].Admin_Log_Action( 'MER-JSN-STR-00029', 'Store cache settings with type \'' $ l.type $ '\' and name \'' $ l.name $ '\' created' ) }">

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CacheSetting_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>												</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'STOR', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Access_Denied() }">	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_CHE_UT ].Store_CacheSettings_LockFile( g.Store ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_CacheSetting_Update_LowLevel() }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CacheSetting_Update_LowLevel" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_ID( g.Store:id, l.store )  }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>	

	<MvIF EXPR = "{ NOT JSON_CacheSetting_Load( l.store, l.data ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvREFERENCE NAME = "l.settings"		VARIABLE = "l.data:ref">
	<MvASSIGN NAME = "l.original_settings"	VALUE = "{ l.settings }">

	<MvIF EXPR = "{ JSON_Input_Exists( 'Name' ) }">
		<MvIF EXPR = "{ NOT JSON_Input_Text( 'R', 'Name', l.updated_name ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ strcasecmp( l.updated_name, l.data:name ) NE 0 }">
			<MvREFERENCEARRAY NAME = "l.updated_settings"	VARIABLE = "l.store:cacheset">
				<MvMEMBER NAME = "{ l.data:type }">
				<MvMEMBER NAME = "{ l.updated_name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.updated_settings }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-STR-00028', 'Cache settings with type \'' $ l.data:type $ '\' and name \'' $ l.updated_name $ '\' already defined' ) }">
			</MvIF>

			<MvCOMMENT>
			|
			| Copy existing settings to new location
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.updated_settings:mode"	VALUE = "{ l.settings:mode }">
			<MvASSIGN NAME = "l.updated_settings:value"	VALUE = "{ l.settings:value }">

			<MvCOMMENT>
			|
			| Delete existing settings structure
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.settings"				VALUE = "">

			<MvREFERENCEARRAY NAME = "l.settings"	VARIABLE = "l.store:cacheset">
				<MvMEMBER NAME = "{ l.data:type }">
				<MvMEMBER NAME = "{ l.updated_name }">
			</MvREFERENCEARRAY>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.data:type EQ 'parameter' }">
		<MvIF EXPR = "{ NOT JSON_Input_List( 'O', 'Mode', l.settings:mode, 'ignore,disable,disable_substring,disable_equal', 'ignore,disable,disable_substring,disable_equal' ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT JSON_Input_List( 'O', 'Mode', l.settings:mode, 'key,disable,disable_substring,disable_equal', 'key,disable,disable_substring,disable_equal' ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.settings:mode EQ 'disable_substring' OR l.settings:mode EQ 'disable_equal' }">
		<MvIF EXPR = "{ l.original_settings:mode NE 'disable_substring' AND l.original_settings:mode NE 'disable_equal' }">	<MvASSIGN NAME = "l.value_required" VALUE = "R">
		<MvELSE>																											<MvASSIGN NAME = "l.value_required" VALUE = "O">
		</MvIF>

		<MvIF EXPR = "{ NOT JSON_Input_Text( l.value_required, 'Value', l.settings:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.settings:value" VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Store_Update_CacheSettings( l.store ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Filename_Admin ].Admin_Log_Action( 'MER-JSN-STR-00030', 'Store cache settings with type \'' $ l.data:type $ '\' and name \'' $ ternary( NOT ISNULL l.updated_name, l.updated_name, l.data:name ) $ '\' updated' ) }">

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CacheSetting_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>												</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'STOR', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Access_Denied() }">	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_CHE_UT ].Store_CacheSettings_LockFile( g.Store ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_CacheSetting_Delete_LowLevel() }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CacheSetting_Delete_LowLevel"STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_ID( g.Store:id, l.store )  }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>	

	<MvIF EXPR = "{ NOT JSON_CacheSetting_Load( l.store, l.data ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvREFERENCE NAME = "l.settings"	VARIABLE = "l.data:ref">
	<MvASSIGN NAME = "l.settings"		VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Store_Update_CacheSettings( l.store ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Filename_Admin ].Admin_Log_Action( 'MER-JSN-STR-00031', 'Store cache settings with type \'' $ l.data:type $ '\' and name \'' $ l.data:name $ '\' deleted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Cache_Flush" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ g.Store:cache_type EQ 'redis' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CHE_UT ].Cache_Redis_Connect( g.Store:redishost, g.Store:redisport, g.Store:redisto, [ g.Module_Library_Crypto ].Decrypt_Payment_Password( g.Store:redispwd ), l.conn_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.result"	VALUE = "{ [ g.Module_Feature_CHE_UT ].Cache_Redis_FlushDB( l.conn_id ) }">
		<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Feature_CHE_UT ].Cache_Redis_Disconnect( l.conn_id ) }">

		<MvIF EXPR = "{ NOT l.result }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-JSN-STR-00032', 'Cache flushed' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvINCLUDE FILE = "json/mivascript.mv">
