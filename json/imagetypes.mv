<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2019 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-JSN-ITY-
| Next Error Code: 11   
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_ImageType_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.ImageType_ID"		VALUE = "{ int( g.ImageType_ID ) }">
	<MvASSIGN NAME = "g.ImageType_Code"		VALUE = "{ JSON_Decode( g.ImageType_Code ) }">
	<MvASSIGN NAME = "g.ImageType_Descrip"	VALUE = "{ JSON_Decode( g.ImageType_Descrip ) }">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].ImageType_Load_ID( g.ImageType_ID, l.imagetype ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-ITY-00010', 'Image type does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL g.ImageType_Code }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_FieldError( 'ImageType_Code', 'Please specify an image type code' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].Validate_Code( g.ImageType_Code ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_FieldError( 'ImageType_Code', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL g.ImageType_Descrip }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_FieldError( 'ImageType_Descrip', 'Please specify an image type description' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Library_DB ].ImageType_Load_Code( g.ImageType_Code, l.existing_imagetype ) }">
		<MvIF EXPR = "{ l.existing_imagetype:id NE l.imagetype:id }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_FieldError( 'ImageType_Code', 'An image type with the code \'' $ g.ImageType_Code $ '\' already exists' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.imagetype:code"		VALUE = "{ g.ImageType_Code }">
	<MvASSIGN NAME = "l.imagetype:descrip"	VALUE = "{ g.ImageType_Descrip }">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].ImageType_Update( l.imagetype ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageType_Insert" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }"> <MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.ImageType_Code"		VALUE = "{ JSON_Decode( g.ImageType_Code ) }">
	<MvASSIGN NAME = "g.ImageType_Descrip"	VALUE = "{ JSON_Decode( g.ImageType_Descrip ) }">
	
	<MvIF EXPR = "{ ISNULL g.ImageType_Code }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_FieldError( 'ImageType_Code', 'Please specify an image type code' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].Validate_Code( g.ImageType_Code ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_FieldError( 'ImageType_Code', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL g.ImageType_Descrip }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_FieldError( 'ImageType_Descrip', 'Please specify an image type description' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Library_DB ].ImageType_Load_Code( g.ImageType_Code, l.imagetype ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_FieldError( 'ImageType_Code', 'An image type with the code \'' $ g.ImageType_Code $ '\' already exists' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.imagetype:code"		VALUE = "{ g.ImageType_Code }">
	<MvASSIGN NAME = "l.imagetype:descrip"	VALUE = "{ g.ImageType_Descrip }">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].ImageType_Insert( l.imagetype ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageTypeList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>												</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) AND
					NOT [ g.Filename_Admin ].CanI( 'PROD', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'code',		'' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'descrip',	'' ) }">

	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT JSON_Input_Text(	'o', 'Sort',	l.sort )	OR
					NOT JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ImageTypes', '' ) }">

	<MvEVAL EXPR = "{ JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, l.sort, 'code,descrip', 'code' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ImageTypes', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-ITY-00009', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.type_count" VALUE = 0>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ImageTypes.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.type_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.type_count ) }">
			"id":		<MvEVAL EXPR = "{ ImageTypes.d.id }">,
			"code":		"<MvEVAL EXPR = "{ JSON_Encode( ImageTypes.d.code ) }">",
			"descrip":	"<MvEVAL EXPR = "{ JSON_Encode( ImageTypes.d.descrip ) }">"
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ImageTypes" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ImageTypes">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageTypeList_Load_All" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) AND
					NOT [ g.Filename_Admin ].CanI( 'PROD', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.imagetype_count" VALUE = "{ [ g.Library_DB ].ImageTypeList_Load_All( l.imagetypes ) }">
	<MvIF EXPR = "{ l.imagetype_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	[
	<MvFOREACH ITERATOR = "l.imagetype" ARRAY = "l.imagetypes" COUNT = "{ l.imagetype_count }">
		<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.imagetype_pos ) }">
		"id":		<MvEVAL EXPR = "{ l.imagetype:id }">,
		"code":		"<MvEVAL EXPR = "{ JSON_Encode( l.imagetype:code ) }">",
		"descrip":	"<MvEVAL EXPR = "{ JSON_Encode( l.imagetype:descrip ) }">"
		<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
	</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageType_Load_ID" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) AND
					NOT [ g.Filename_Admin ].CanI( 'PROD', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].ImageType_Load_ID( int( g.ImageType_ID ), l.imagetype ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
	"id":		<MvEVAL EXPR = "{ l.imagetype:id }">,
	"code":		"<MvEVAL EXPR = "{ JSON_Encode( l.imagetype:code ) }">",
	"descrip":	"<MvEVAL EXPR = "{ JSON_Encode( l.imagetype:descrip ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageType_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">								<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Filename_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].ImageType_Delete( int( g.ImageType_ID ) ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>
