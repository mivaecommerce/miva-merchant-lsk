<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2025 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-JSN-RTM-
| Next Error Code: 61    
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Runtime_AttributeAndOptionList_Load_Product" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_Code( g.Product_Code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	<MvEVAL EXPR = "{ JSON_Runtime_Product_AttributeAndOption( l.product ) }">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_AttributeAndOption" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.attribute_output_count"				VALUE = 0>

	<MvIF EXPR = "{ l.product:variant_id AND ( ISNULL l.product:productvariant_count ) }">
		<MvASSIGN NAME = "l.product:productvariant_count"	VALUE = "{ [ g.Module_Library_DB ].ProductVariantList_Load_Variant( l.product:id, l.product:variant_id, l.product:productvariants ) }">
	</MvIF>

	[
	<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ [ g.Library_DB ].AttributeList_Load_Product( l.product:id, l.attributes ) }">
		<MvASSIGN NAME = "l.attribute_price" VALUE = "{ [ g.Module_Library_Utilities ].Adjusted_Price( l.product, l.attribute:price, l.attribute:cost ) }">

		<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.attribute_output_count ) }">
		"id":				<MvEVAL EXPR = "{ int( l.attribute:id ) }">,
		"product_id":		<MvEVAL EXPR = "{ int( l.attribute:product_id ) }">,
		"default_id":		<MvEVAL EXPR = "{ int( l.attribute:default_id ) }">,
		"disp_order":		<MvEVAL EXPR = "{ int( l.attribute:disp_order ) }">,
		"code":				"<MvEVAL EXPR = "{ JSON_Encode( l.attribute:code ) }">",
		"type":				"<MvEVAL EXPR = "{ JSON_Encode( l.attribute:type ) }">",
		"attemp_id":		<MvEVAL EXPR = "{ int( l.attribute:attemp_id ) }">,
		"prompt":			"<MvEVAL EXPR = "{ JSON_Encode( l.attribute:prompt ) }">",
		"price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.attribute_price ) }">,
		"formatted_price":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency:module, l.attribute_price ) ) }">",
		"weight":			<MvEVAL EXPR = "{ l.attribute:weight ROUND 2 }">,
		"formatted_weight":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Library_Utilities ].Format_Weight( l.attribute:weight ) ) }">",
		"required":			<MvEVAL EXPR = "{ JSON_Boolean( l.attribute:required ) }">,
		"inventory":		<MvEVAL EXPR = "{ JSON_Boolean( l.attribute:inventory ) }">,
		"image":			"<MvEVAL EXPR = "{ JSON_Encode( l.attribute:image ) }">"

		<MvIF EXPR = "{ l.attribute:type NE 'template' }">
			<MvIF EXPR = "{ ( l.attribute:type EQ 'radio' ) OR ( l.attribute:type EQ 'select' ) OR ( l.attribute:type EQ 'swatch-select' ) }">
				<MvASSIGN NAME = "l.option_output_count"	VALUE = 0>

				,"options":
				[
				<MvFOREACH ITERATOR = "l.option" ARRAY = "l.options" COUNT = "{ [ g.Library_DB ].OptionList_Load_Attribute( l.attribute:id, l.options ) }">
					<MvASSIGN NAME = "l.option_price" VALUE = "{ [ g.Module_Library_Utilities ].Adjusted_Price( l.product, l.option:price, l.option:cost ) }">

					<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.option_output_count ) }">
					"id":				<MvEVAL EXPR = "{ int( l.option:id ) }">,
					"product_id":		<MvEVAL EXPR = "{ int( l.option:product_id ) }">,
					"attr_id":			<MvEVAL EXPR = "{ int( l.option:attr_id ) }">,
					"disp_order":		<MvEVAL EXPR = "{ int( l.option:disp_order ) }">,
					"code":				"<MvEVAL EXPR = "{ JSON_Encode( l.option:code ) }">",
					"prompt":			"<MvEVAL EXPR = "{ JSON_Encode( l.option:prompt ) }">",
					"price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.option_price ) }">,
					"formatted_price":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency:module, l.option_price ) ) }">",
					"weight":			<MvEVAL EXPR = "{ l.option:weight ROUND 2 }">,
					"formatted_weight":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Library_Utilities ].Format_Weight( l.option:weight ) ) }">",
					"image":			"<MvEVAL EXPR = "{ JSON_Encode( l.option:image ) }">"
					<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
				</MvFOREACH>
				]
			</MvIF>

			<MvIF EXPR = "{ ( l.attribute:type NE 'text' ) AND ( l.attribute:type NE 'memo' ) AND l.product:variant_id }">
				<MvIF EXPR = "{ miva_array_search( l.product:productvariants, 1, l.productvariant, '( l.productvariant:attr_id EQ l.attribute:id ) AND ( l.productvariant:attmpat_id EQ l.attribute:attmpat_id )' ) }">
					<MvIF EXPR = "{ l.attribute:type EQ 'checkbox' }">
						,"value": <MvEVAL EXPR = "{ encodejavascriptboolean( l.productvariant:option_id ) }">
					<MvELSEIF EXPR = "{ miva_array_search( l.options, 1, l.option, 'l.option:id EQ l.productvariant:option_id' ) }">
						,"value": "<MvEVAL EXPR = "{ encodejavascriptstring( l.option:code ) }">"
					</MvIF>
				</MvIF>
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.template_attr_output_count"	VALUE = 0>

			,"attributes":
			[
			<MvFOREACH ITERATOR = "l.template_attr" ARRAY = "l.template_attrs" COUNT = "{ [ g.Feature_ATT_DB ].AttributeTemplateAttrList_Load_Template( l.attribute:attemp_id, l.template_attrs )  }">
				<MvASSIGN NAME = "l.attribute_price" VALUE = "{ [ g.Module_Library_Utilities ].Adjusted_Price( l.product, l.template_attr:price, l.template_attr:cost ) }">

				<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.template_attr_output_count ) }">
				"id":				<MvEVAL EXPR = "{ int( l.template_attr:id ) }">,
				"attemp_id":		<MvEVAL EXPR = "{ int( l.template_attr:attemp_id ) }">,
				"default_id":		<MvEVAL EXPR = "{ int( l.template_attr:default_id ) }">,
				"disp_order":		<MvEVAL EXPR = "{ int( l.template_attr:disporder ) }">,
				"code":				"<MvEVAL EXPR = "{ JSON_Encode( l.template_attr:code ) }">",
				"type":				"<MvEVAL EXPR = "{ JSON_Encode( l.template_attr:type ) }">",
				"prompt":			"<MvEVAL EXPR = "{ JSON_Encode( l.template_attr:prompt ) }">",
				"price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.attribute_price ) }">,
				"formatted_price":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency:module, l.attribute_price ) ) }">",
				"weight":			<MvEVAL EXPR = "{ l.template_attr:weight ROUND 2 }">,
				"formatted_weight":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Library_Utilities ].Format_Weight( l.template_attr:weight ) ) }">",
				"required":			<MvEVAL EXPR = "{ JSON_Boolean( l.template_attr:required ) }">,
				"inventory":		<MvEVAL EXPR = "{ JSON_Boolean( l.template_attr:inventory ) }">,
				"image":			"<MvEVAL EXPR = "{ JSON_Encode( l.template_attr:image ) }">"

				<MvIF EXPR = "{ ( l.template_attr:type EQ 'radio' ) OR ( l.template_attr:type EQ 'select' ) OR ( l.template_attr:type EQ 'swatch-select' ) }">
					<MvASSIGN NAME = "l.option_output_count" VALUE = 0>

					,"options":
					[
					<MvFOREACH ITERATOR = "l.option" ARRAY = "l.options" COUNT = "{ [ g.Feature_ATT_DB ].AttributeTemplateOptionList_Load_Attribute( l.template_attr:id, l.options ) }">						
						<MvASSIGN NAME = "l.option_price" VALUE = "{ [ g.Module_Library_Utilities ].Adjusted_Price( l.product, l.option:price, l.option:cost ) }">

						<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.option_output_count ) }">
						"id":				<MvEVAL EXPR = "{ int( l.option:id ) }">,
						"attemp_id":		<MvEVAL EXPR = "{ int( l.option:attemp_id ) }">,
						"attmpat_id":		<MvEVAL EXPR = "{ int( l.option:attmpat_id ) }">,
						"disp_order":		<MvEVAL EXPR = "{ int( l.option:disporder ) }">,
						"code":				"<MvEVAL EXPR = "{ JSON_Encode( l.option:code ) }">",
						"prompt":			"<MvEVAL EXPR = "{ JSON_Encode( l.option:prompt ) }">",
						"price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.option_price ) }">,
						"formatted_price":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency:module, l.option_price ) ) }">",
						"weight":			<MvEVAL EXPR = "{ l.option:weight ROUND 2 }">,
						"formatted_weight":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Library_Utilities ].Format_Weight( l.option:weight ) ) }">",
						"image":			"<MvEVAL EXPR = "{ JSON_Encode( l.option:image ) }">"
						<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
					</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ ( l.template_attr:type NE 'text' ) AND ( l.template_attr:type NE 'memo' ) AND l.product:variant_id }">
					<MvIF EXPR = "{ miva_array_search( l.product:productvariants, 1, l.productvariant, '( l.productvariant:attr_id EQ l.attribute:id ) AND ( l.productvariant:attmpat_id EQ l.template_attr:id )' ) }">
						<MvIF EXPR = "{ l.template_attr:type EQ 'checkbox' }">
							,"value": <MvEVAL EXPR = "{ encodejavascriptboolean( l.productvariant:option_id ) }">
						<MvELSEIF EXPR = "{ miva_array_search( l.options, 1, l.option, 'l.option:id EQ l.productvariant:option_id' ) }">
							,"value": "<MvEVAL EXPR = "{ encodejavascriptstring( l.option:code ) }">"
						</MvIF>
					</MvIF>
				</MvIF>

				<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
			</MvFOREACH>
			]
		</MvIF>
		<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
	</MvFOREACH>
	]
</MvFUNCTION>

<MvCOMMENT>
|
| Given A B C(last_selected) d e f g
|
|	Load a complete variant with exactly A B C
|	If no variant and there are unselected attributes, check if there are any variants containing A B C 
| 	If no variant(s)
| 		Solve for A B d e f g using C(last_selected)
| 		Solve for C using empty set
| 	Else
| 		Solution for d e f g = variant(s)
| 		Solve for A using B C
| 		Solve for B using A C
| 		Solve for C using A B
| 
| 	Return:
| 
| 		a b c d e f g
| 		complete variant, if it exists
|
| Selected_Attributes	= []
| Last_Selected_ID		= n
| Unselected_Attributes	= []
| 
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Possible_Load_Variant" PARAMETERS = "product var,
															  selected_attributes var, selected_count,
															  unselected_attributes var, unselected_count,
															  applied_facets var, applied_facet_count,
															  have_incomplete_variants var, have_complete_variant var, complete_variant var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.have_complete_variant"	VALUE = "{ [ g.Library_DB ].ProductVariant_Load_Attributes_WithInventory_Facets( l.product:id, l.selected_attributes, l.selected_count, l.applied_facets, l.applied_facet_count, l.complete_variant ) }">
	<MvIF EXPR = "{ NOT l.have_complete_variant }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.unselected_count }">
			<MvIF EXPR = "{ [ g.Library_DB ].ProductVariant_Is_Possible_Facets( l.product:id, l.selected_attributes, l.selected_count, l.applied_facets, l.applied_facet_count ) }">
				<MvASSIGN NAME = "l.have_incomplete_variants" VALUE = 1>
			<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_Output" PARAMETERS = "product var, productsubscriptionterm var, have_complete_variant, complete_variant var, predict_discounts, calculate_sale_price, selected_attributes var, selected_attribute_count, output_attributes var, output_attribute_count" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.attr_price_override"		VALUE = 0>
	<MvASSIGN NAME = "l.use_discount_state"			VALUE = 0>

	<MvIF EXPR = "{ l.have_complete_variant }">
		<MvIF EXPR = "{ NOT [ g.Feature_INV_RT ].Inventory_Load_Variant( l.product, l.complete_variant:variant_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_RT ].Inventory_Adjust_VariantPricing( l.product, l.complete_variant:variant_id, l.attr_price_override ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.predict_discounts }">
		<MvASSIGN NAME = "l.use_discount_state"		VALUE = 1>
	<MvELSE>
		<MvASSIGN NAME = "l.retail"					VALUE = "{ l.product:price }">
		<MvASSIGN NAME = "l.base_price"				VALUE = "{ [ g.Library_Utilities ].Adjusted_Price( l.product, l.product:price, l.product:cost ) }">
		<MvASSIGN NAME = "l.weight"					VALUE = "{ l.product:weight }">

		<MvIF EXPR = "{ NOT l.attr_price_override }">
			<MvFOREACH ITERATOR = "l.selected_attribute" ARRAY = "l.selected_attributes" COUNT = "{ l.selected_attribute_count }">
				<MvIF EXPR = "{ l.selected_attribute:option_id EQ 0 }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.retail"			VALUE = "{ l.retail + l.selected_attribute:retail }">
				<MvASSIGN NAME = "l.base_price"		VALUE = "{ l.base_price + l.selected_attribute:price }">
				<MvASSIGN NAME = "l.weight"			VALUE = "{ l.weight + l.selected_attribute:weight }">
			</MvFOREACH>
		</MvIF>

		<MvIF EXPR = "{ NOT l.calculate_sale_price }">
			<MvASSIGN NAME = "l.price"	VALUE = "{ l.base_price }">
		<MvELSE>
			<MvIF EXPR = "{ l.productsubscriptionterm:id OR NOT l.have_complete_variant }">
				<MvASSIGN NAME = "l.use_discount_state"			VALUE = 1>
			<MvELSEIF EXPR = "{ l.selected_attribute_count EQ 0 OR miva_array_search( l.selected_attributes, -1, l.attribute, 'l.attribute:inventory EQ 0 AND l.attribute:price GT 0' ) }">
				<MvASSIGN NAME = "l.use_discount_state"			VALUE = 1>
			<MvELSE>
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountSignature_Calculate_Cached( g.Basket:cust_id, l.discount_signature ) OR ISNULL l.discount_signature }">
					<MvASSIGN NAME = "l.use_discount_state"		VALUE = 1>
				<MvELSE>
					<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].DiscountVariantPrice_Load( l.discount_signature, l.complete_variant:product_id, l.complete_variant:variant_id, l.discountprice ) }">
						<MvASSIGN NAME = "l.use_discount_state"	VALUE = 1>
					<MvELSE>
						<MvASSIGN NAME = "l.base_price"			VALUE = "{ l.discountprice:base_price }">
						<MvASSIGN NAME = "l.price"				VALUE = "{ l.discountprice:price }">
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.use_discount_state }">
		<MvIF EXPR = "{ ISNULL g.Session:cache:json_possible_output:discount_state }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_CreateFromBasket( g.Basket, g.Session:cache:json_possible_output:discount_state ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Load_PriceGroups_Basket( g.Basket, g.Session:cache:json_possible_output:discount_state ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Disable_Unused_Item_PriceGroups( g.Session:cache:json_possible_output:discount_state ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Predict_Baseline_Discounts( g.Session:cache:json_possible_output:discount_state ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.retail"					VALUE = "{ l.product:price }">
		<MvASSIGN NAME = "l.base_price"				VALUE = "{ [ g.Library_Utilities ].Adjusted_Price( l.product, l.product:price, l.product:cost ) }">
		<MvASSIGN NAME = "l.weight"					VALUE = "{ l.product:weight }">

		<MvASSIGN NAME = "l.discount_product"		VALUE = "{ l.product }">
		<MvASSIGN NAME = "l.discount_product:price"	VALUE = "{ l.base_price }">

		<MvIF EXPR = "{ l.productsubscriptionterm:id }">	<MvASSIGN NAME = "l.subterm_id" VALUE = "{ l.productsubscriptionterm:id }">
		<MvELSE>											<MvASSIGN NAME = "l.subterm_id" VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.option_count"			VALUE = 0>

		<MvFOREACH ITERATOR = "l.selected_attribute" ARRAY = "l.selected_attributes" COUNT = "{ l.selected_attribute_count }">
			<MvIF EXPR = "{ l.selected_attribute:option_id EQ 0 }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.option"					VALUE = "">
			<MvASSIGN NAME = "l.option:attr_id"			VALUE = "{ l.selected_attribute:attr_id }">
			<MvASSIGN NAME = "l.option:attmpat_id"		VALUE = "{ l.selected_attribute:attmpat_id }">
			<MvASSIGN NAME = "l.option:option_id"		VALUE = "{ l.selected_attribute:option_id }">

			<MvIF EXPR = "{ l.attr_price_override }">
				<MvASSIGN NAME = "l.option:retail"		VALUE = 0.00>
				<MvASSIGN NAME = "l.option:base_price"	VALUE = 0.00>
				<MvASSIGN NAME = "l.option:price"		VALUE = 0.00>
				<MvASSIGN NAME = "l.option:weight"		VALUE = 0.00>
			<MvELSE>
				<MvASSIGN NAME = "l.option:retail"		VALUE = "{ l.selected_attribute:retail }">
				<MvASSIGN NAME = "l.option:base_price"	VALUE = "{ l.selected_attribute:price }">
				<MvASSIGN NAME = "l.option:price"		VALUE = "{ l.option:base_price }">
				<MvASSIGN NAME = "l.option:weight"		VALUE = "{ l.selected_attribute:weight }">
			</MvIF>

			<MvASSIGN NAME = "l.retail"					VALUE = "{ l.retail + l.option:retail }">
			<MvASSIGN NAME = "l.base_price"				VALUE = "{ l.base_price + l.option:base_price }">
			<MvASSIGN NAME = "l.weight"					VALUE = "{ l.weight + l.option:weight }">

			<MvASSIGN NAME = "l.option_count"			VALUE = "{ miva_array_insert_var( l.options, l.option, -1 ) }">
		</MvFOREACH>

		<MvIF EXPR = "{ l.have_complete_variant }">
			<MvASSIGN NAME = "l.variant_id"				VALUE = "{ l.complete_variant:variant_id }">
		<MvELSE>
			<MvASSIGN NAME = "l.variant_id"				VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Predict_Product_Discounts_WithProductSubscriptionTermAndOptions( g.Session:cache:json_possible_output:discount_state, l.discount_product, l.subterm_id, l.variant_id, 1, l.options, l.option_count, l.price, l.discounts, l.discount_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		<MvIF EXPR = "{ l.have_complete_variant }">
			"variant":
			{
				"variant_id":		<MvEVAL EXPR = "{ int( l.complete_variant:variant_id ) }">,
				"inv_active":		<MvEVAL EXPR = "{ JSON_Boolean( l.product:inv_active ) }">,
				"inv_available":	<MvEVAL EXPR = "{ int( l.product:inv_available ) }">,
				"inv_instock":		<MvEVAL EXPR = "{ int( l.product:inv_instock ) }">,
				"inv_level":		"<MvEVAL EXPR = "{ JSON_Encode( l.product:inv_level ) }">",
				"inv_long":			"<MvEVAL EXPR = "{ JSON_Encode( l.product:inv_long ) }">",
				"inv_short":		"<MvEVAL EXPR = "{ JSON_Encode( l.product:inv_short ) }">"
			},
		</MvIF>

		"have_price":			true,
		"retail":				<MvEVAL EXPR = "{ encodejavascriptnumber( l.retail ) }">,
		"formatted_retail":		"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency:module, l.retail ) ) }">",
		"base_price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.base_price ) }">,
		"formatted_base_price":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency:module, l.base_price ) ) }">",
		"price":				<MvEVAL EXPR = "{ encodejavascriptnumber( l.price ) }">,
		"formatted_price":		"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency:module, l.price ) ) }">",
		"weight":				<MvEVAL EXPR = "{ encodejavascriptnumber( l.weight ) }">,
		"formatted_weight":		"<MvEVAL EXPR = "{ JSON_Encode( [ g.Library_Utilities ].Format_Weight( l.weight ) ) }">",
		"padded_weight":		"<MvEVAL EXPR = "{ JSON_Encode( [ g.Library_Utilities ].Decimal_Pad( l.weight, g.Store:wtdispdig ) ) }">",

		<MvIF EXPR = "{ l.predict_discounts }">
			"discounts":
			[
				<MvASSIGN NAME = "l.output_count"	VALUE = 0>

				<MvFOREACH ITERATOR = "l.discount" ARRAY = "l.discounts" COUNT = "{ l.discount_count }">
					<MvIF EXPR = "{ l.discount:display }">
						<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.output_count ) }">
						"descrip":				"<MvEVAL EXPR = "{ JSON_Encode( l.discount:descrip ) }">",
						"discount":				<MvEVAL EXPR = "{ l.discount:discount ROUND 2 }">,
						"formatted_discount":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency:module, l.discount:discount ) ) }">"
						<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
					</MvIF>
				</MvFOREACH>
			],
		</MvIF>

		<MvCOMMENT>
		|
		| Output Attributes and Options
		|
		</MvCOMMENT>

		"attributes":
		[
		<MvASSIGN NAME = "l.output_attribute_pos"			VALUE = 1>
		<MvASSIGN NAME = "l.output_count"					VALUE = 0>

		<MvWHILE EXPR = "{ l.output_attribute_pos LE l.output_attribute_count }">
			<MvREFERENCEARRAY NAME = "l.output_attribute" VARIABLE = "l.output_attributes">
				<MvDIMENSION INDEX = "{ l.output_attribute_pos }">
			</MvREFERENCEARRAY>

			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.output_count ) }">
			"id":				<MvEVAL EXPR = "{ encodejavascriptnumber( l.output_attribute:attr_id ) }">,
			"attmpat_id":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.output_attribute:attmpat_id ) }">,

			<MvIF EXPR = "{ len( l.output_attribute:selected_id ) }">
				"selected_id":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.output_attribute:selected_id ) }">,
			</MvIF>

			"options":
			[
				<MvASSIGN NAME = "l.output_option_pos"		VALUE = 1>
				<MvWHILE EXPR = "{ l.output_option_pos LE l.output_attribute:option_count }">
					<MvIF EXPR = "{ l.output_option_pos GT 1 }">
						,
					</MvIF>

					<MvEVAL EXPR = "{ encodejavascriptnumber( l.output_attribute:options[ l.output_option_pos ] ) }">

					<MvASSIGN NAME = "l.output_option_pos"	VALUE = "{ l.output_option_pos + 1 }">
				</MvWHILE>
			]
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
			
			<MvASSIGN NAME = "l.output_attribute_pos"	VALUE = "{ l.output_attribute_pos + 1 }">
		</MvWHILE>
		]
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_AppendOptions" PARAMETERS = "attribute var, options var, option_count, output_attributes var, output_attribute_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.output_attribute_count"	VALUE = "{ l.output_attribute_count + 1 }">

	<MvREFERENCEARRAY NAME = "l.output_attribute" VARIABLE = "l.output_attributes">
		<MvDIMENSION INDEX = "{ l.output_attribute_count }">
	</MvREFERENCEARRAY>

	<MvASSIGN NAME = "l.output_attribute:attr_id"		VALUE = "{ l.attribute:attr_id }">
	<MvASSIGN NAME = "l.output_attribute:attmpat_id"	VALUE = "{ l.attribute:attmpat_id }">
	<MvASSIGN NAME = "l.output_attribute:selected_id"	VALUE = "{ l.attribute:option_id }">
	<MvASSIGN NAME = "l.output_attribute:option_count"	VALUE = "{ l.option_count }">
	<MvASSIGN NAME = "l.output_attribute:options"		VALUE = "{ l.options }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_ValidSelection" PARAMETERS = "product var, dependency_resolution,
																last_selected_attribute var,
																selected_attributes var, selected_count,
																unselected_attributes var, unselected_count,
																applied_facets var, applied_facet_count,
															    have_incomplete_variants var, have_complete_variant var, complete_variant var,
																output_attributes var, output_attribute_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Using the current selection, solve for any other attributes
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.output_attribute_count"	VALUE = "{ [ g.Library_DB ].AttributeList_Load_ProductVariant_Possible_Facets( l.product:id, l.selected_attributes, l.selected_count, l.applied_facets, l.applied_facet_count, l.output_attributes ) }">
	<MvIF EXPR = "{ l.output_attribute_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| If there are any unselected attributes marked to be reselected at this point,
	| reselect them and start over.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.have_reselect"				VALUE = 0>

	<MvFOREACH ITERATOR = "l.unselected_attribute" ARRAY = "l.unselected_attributes" COUNT = "{ l.unselected_count }">
		<MvIF EXPR = "{ l.unselected_attribute:reselect }">
			<MvASSIGN NAME = "l.have_reselect"		VALUE = 1>
			<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT l.have_reselect }">
		<MvIF EXPR = "{ l.dependency_resolution EQ 'cascade' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Possible_ValidSelection_Cascade( l.product, l.selected_attributes, l.selected_count, l.applied_facets, l.applied_facet_count, l.output_attributes, l.output_attribute_count ) }">
		<MvELSEIF EXPR = "{ l.dependency_resolution EQ 'last' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Possible_ValidSelection_LastSelected( l.product, l.last_selected_attribute, l.selected_attributes, l.selected_count, l.applied_facets, l.applied_facet_count, l.output_attributes, l.output_attribute_count ) }">
		<MvELSE>													<MvFUNCTIONRETURN VALUE = "{ JSON_Possible_ValidSelection_FirstSelected( l.product, l.selected_attributes, l.selected_count, l.applied_facets, l.applied_facet_count, l.output_attributes, l.output_attribute_count ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.new_selected"														VALUE = "{ l.selected_attributes }">
	<MvASSIGN NAME = "l.new_selected_count"													VALUE = "{ l.selected_count }">
	<MvASSIGN NAME = "l.new_unselected_count"												VALUE = 0>

	<MvFOREACH ITERATOR = "l.unselected_attribute" ARRAY = "l.unselected_attributes" COUNT = "{ l.unselected_count }">
		<MvIF EXPR = "{ NOT l.unselected_attribute:reselect }">
			<MvASSIGN NAME = "l.new_unselected_count"										VALUE = "{ l.new_unselected_count + 1 }">
			<MvASSIGN NAME = "l.new_unselected" INDEX = "{ l.new_unselected_count }"		VALUE = "{ l.unselected_attribute }">
		<MvELSE>
			<MvASSIGN NAME = "l.unselected_attribute:reselect"								VALUE = 0>

			<MvFOREACH ITERATOR = "l.output_attribute" ARRAY = "l.output_attributes" COUNT = "{ l.output_attribute_count }">
				<MvIF EXPR = "{ ( l.output_attribute:attr_id EQ l.unselected_attribute:attr_id ) AND 
								( l.output_attribute:attmpat_id EQ l.unselected_attribute:attmpat_id ) }">
					<MvIF EXPR = "{ l.output_attribute:selected_id }">			<MvFOREACHSTOP>		</MvIF>
					<MvIF EXPR = "{ l.output_attribute:option_count EQ 0 }">	<MvFOREACHSTOP>		</MvIF>

					<MvASSIGN NAME = "l.unselected_attribute:option_id"						VALUE = "{ l.output_attribute:options[ 1 ] }">
					<MvASSIGN NAME = "l.new_selected_count"									VALUE = "{ l.new_selected_count + 1 }">
					<MvASSIGN NAME = "l.new_selected" INDEX = "{ l.new_selected_count }"	VALUE = "{ l.unselected_attribute }">

					<MvFOREACHSTOP>
				</MvIF>
			</MvFOREACH>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Possible( l.product, l.dependency_resolution,
												l.last_selected_attribute, 1,
												l.new_selected, l.new_selected_count,
												l.new_unselected, l.new_unselected_count,
												l.applied_facets, l.applied_facet_count,
												l.have_incomplete_variants, l.have_complete_variant, l.complete_variant,
												l.output_attributes, l.output_attribute_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_ValidSelection_Cascade" PARAMETERS = "product var,
																		selected_attributes var, selected_count,
																  		applied_facets var, applied_facet_count,
																		output_attributes var, output_attribute_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Solve for each selected attribute using the attributes that proceed it.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.selected_pos"		VALUE = "{ l.selected_count }">
	<MvWHILE EXPR = "{ l.selected_pos GT 0 }">
		<MvASSIGN NAME = "l.option_count"	VALUE = "{ [ g.Library_DB ].OptionList_Load_ProductVariant_Possible_Facets( l.product:id,
																												 l.selected_attributes[ l.selected_pos ]:attr_id,
																												 l.selected_attributes[ l.selected_pos ]:attmpat_id,
																												 l.selected_attributes, l.selected_pos - 1,
																												 l.facets, l.facet_count,
																												 l.options ) }">
		<MvIF EXPR = "{ l.option_count }">
			<MvEVAL EXPR = "{ JSON_Possible_AppendOptions( l.selected_attributes[ l.selected_pos ], l.options, l.option_count, l.output_attributes, l.output_attribute_count ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.selected_pos"	VALUE = "{ l.selected_pos - 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_ValidSelection_LastSelected" PARAMETERS = "product var,
																			 last_selected_attribute var,
																			 selected_attributes var, selected_count,
																  			 applied_facets var, applied_facet_count,
																			 output_attributes var, output_attribute_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Solve for the last selected attribute using an empty set.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.option_count" VALUE = "{ [ g.Library_DB ].OptionList_Load_ProductVariant_Possible_Facets( l.product:id,
																										   l.last_selected_attribute:attr_id, l.last_selected_attribute:attmpat_id,
																										   l.null, 0,
																										   l.applied_facets, l.applied_facet_count,
																										   l.options ) }">
	<MvIF EXPR = "{ l.option_count }">
		<MvEVAL EXPR = "{ JSON_Possible_AppendOptions( l.last_selected_attribute, l.options, l.option_count, l.output_attributes, l.output_attribute_count ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Solve for each other selected attribute using the other selected attributes.  Boolean attributes ignore other boolean attributes.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.selected_pos"						VALUE = 1>
	<MvWHILE EXPR = "{ l.selected_pos LE l.selected_count }">
		<MvIF EXPR = "{ ( l.selected_attributes[ l.selected_pos ]:attr_id NE l.last_selected_attribute:attr_id ) OR
						( l.selected_attributes[ l.selected_pos ]:attmpat_id NE l.last_selected_attribute:attmpat_id ) }">
			<MvASSIGN NAME = "l.sub_selected_count"				VALUE = 0>
			<MvASSIGN NAME = "l.sub_selected_pos"				VALUE = 1>

			<MvWHILE EXPR = "{ l.sub_selected_pos LE l.selected_count }">
				<MvIF EXPR = "{ ( ( l.selected_attributes[ l.sub_selected_pos ]:attr_id NE l.selected_attributes[ l.selected_pos ]:attr_id ) OR
								  ( l.selected_attributes[ l.sub_selected_pos ]:attmpat_id NE l.selected_attributes[ l.selected_pos ]:attmpat_id ) ) AND
								( ( ( l.selected_attributes[ l.sub_selected_pos ]:type NE 'checkbox' ) AND ( l.selected_attributes[ l.sub_selected_pos ]:type NE 'text' ) AND ( l.selected_attributes[ l.sub_selected_pos ]:type NE 'memo' ) ) OR
								  ( ( l.selected_attributes[ l.selected_pos ]:type NE 'checkbox' ) AND ( l.selected_attributes[ l.selected_pos ]:type NE 'text' ) AND ( l.selected_attributes[ l.selected_pos ]:type NE 'memo' ) ) ) }">
					<MvASSIGN NAME = "l.sub_selected_count"									VALUE = "{ l.sub_selected_count + 1 }">
					<MvASSIGN NAME = "l.sub_selected" INDEX = "{ l.sub_selected_count }"	VALUE = "{ l.selected_attributes[ l.sub_selected_pos ] }">
				</MvIF>

				<MvASSIGN NAME = "l.sub_selected_pos"			VALUE = "{ l.sub_selected_pos + 1 }">
			</MvWHILE>

			<MvASSIGN NAME = "l.option_count"					VALUE = "{ [ g.Library_DB ].OptionList_Load_ProductVariant_Possible_Facets( l.product:id,
																																	 l.selected_attributes[ l.selected_pos ]:attr_id,
																																	 l.selected_attributes[ l.selected_pos ]:attmpat_id,
																																	 l.sub_selected, l.sub_selected_count,
																										   							 l.applied_facets, l.applied_facet_count,
																																	 l.options ) }">
			<MvIF EXPR = "{ l.option_count }">
				<MvEVAL EXPR = "{ JSON_Possible_AppendOptions( l.selected_attributes[ l.selected_pos ], l.options, l.option_count, l.output_attributes, l.output_attribute_count ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.selected_pos"					VALUE = "{ l.selected_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_ValidSelection_FirstSelected" PARAMETERS = "product var,
																			  selected_attributes var, selected_count,
																  			  applied_facets var, applied_facet_count,
																			  output_attributes var, output_attribute_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Solve for the first selected attribute using an empty set.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.option_count" VALUE = "{ [ g.Library_DB ].OptionList_Load_ProductVariant_Possible_Facets( l.product:id,
																										   l.selected_attributes[ 1 ]:attr_id, l.selected_attributes[ 1 ]:attmpat_id,
																										   l.null, 0,																										   
																										   l.applied_facets, l.applied_facet_count,
																										   l.options ) }">
	<MvIF EXPR = "{ l.option_count }">
		<MvEVAL EXPR = "{ JSON_Possible_AppendOptions( l.selected_attributes[ 1 ], l.options, l.option_count, l.output_attributes, l.output_attribute_count ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Solve for each other selected attribute using the other selected attributes.  Boolean attributes ignore other boolean attributes.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.selected_pos"						VALUE = 2>
	<MvWHILE EXPR = "{ l.selected_pos LE l.selected_count }">
		<MvASSIGN NAME = "l.sub_selected_count"				VALUE = 0>
		<MvASSIGN NAME = "l.sub_selected_pos"				VALUE = 1>

		<MvWHILE EXPR = "{ l.sub_selected_pos LE l.selected_count }">
			<MvIF EXPR = "{ ( ( l.selected_attributes[ l.sub_selected_pos ]:attr_id NE l.selected_attributes[ l.selected_pos ]:attr_id ) OR
							  ( l.selected_attributes[ l.sub_selected_pos ]:attmpat_id NE l.selected_attributes[ l.selected_pos ]:attmpat_id ) ) AND
							( ( ( l.selected_attributes[ l.sub_selected_pos ]:type NE 'checkbox' ) AND ( l.selected_attributes[ l.sub_selected_pos ]:type NE 'text' ) AND ( l.selected_attributes[ l.sub_selected_pos ]:type NE 'memo' ) ) OR
							  ( ( l.selected_attributes[ l.selected_pos ]:type NE 'checkbox' ) AND ( l.selected_attributes[ l.selected_pos ]:type NE 'text' ) AND ( l.selected_attributes[ l.selected_pos ]:type NE 'memo' ) ) ) }">
				<MvASSIGN NAME = "l.sub_selected_count"									VALUE = "{ l.sub_selected_count + 1 }">
				<MvASSIGN NAME = "l.sub_selected" INDEX = "{ l.sub_selected_count }"	VALUE = "{ l.selected_attributes[ l.sub_selected_pos ] }">
			</MvIF>

			<MvASSIGN NAME = "l.sub_selected_pos"			VALUE = "{ l.sub_selected_pos + 1 }">
		</MvWHILE>

		<MvASSIGN NAME = "l.option_count"					VALUE = "{ [ g.Library_DB ].OptionList_Load_ProductVariant_Possible_Facets( l.product:id,
																																 l.selected_attributes[ l.selected_pos ]:attr_id,
																																 l.selected_attributes[ l.selected_pos ]:attmpat_id,
																																 l.sub_selected, l.sub_selected_count,
																										   						 l.applied_facets, l.applied_facet_count,
																																 l.options ) }">
		<MvIF EXPR = "{ l.option_count }">
			<MvEVAL EXPR = "{ JSON_Possible_AppendOptions( l.selected_attributes[ l.selected_pos ], l.options, l.option_count, l.output_attributes, l.output_attribute_count ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.selected_pos"					VALUE = "{ l.selected_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_LoadSelectedAttributeInfo" PARAMETERS = "product var, selected_attribute var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.selected_attribute:price"			VALUE = 0.00>
	<MvASSIGN NAME = "l.selected_attribute:retail"			VALUE = 0.00>
	<MvASSIGN NAME = "l.selected_attribute:cost"			VALUE = 0.00>
	<MvASSIGN NAME = "l.selected_attribute:weight"			VALUE = 0.00>
	<MvASSIGN NAME = "l.selected_attribute:inventory"		VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Attribute_Load_ID( l.selected_attribute:attr_id, l.attribute ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.attribute:product_id NE l.product:id }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.selected_attribute:attmpat_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_ATT_DB ].AttributeTemplateAttr_Load_ID( l.selected_attribute:attmpat_id, l.attributetemplateattr ) }">
			<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ l.attributetemplateattr:attemp_id NE l.attribute:attemp_id }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.selected_attribute:inventory"	VALUE = "{ l.attributetemplateattr:inventory }">

		<MvIF EXPR = "{ ( l.attributetemplateattr:type EQ 'checkbox' ) OR ( l.attributetemplateattr:type EQ 'text' ) OR ( l.attributetemplateattr:type EQ 'memo' ) }">
			<MvASSIGN NAME = "l.selected_attribute:price"	VALUE = "{ l.attributetemplateattr:price }">
			<MvASSIGN NAME = "l.selected_attribute:cost"	VALUE = "{ l.attributetemplateattr:cost }">
			<MvASSIGN NAME = "l.selected_attribute:weight"	VALUE = "{ l.attributetemplateattr:weight }">
		<MvELSEIF EXPR = "{ ( l.attributetemplateattr:type EQ 'radio' ) OR ( l.attributetemplateattr:type EQ 'select' ) OR ( l.attributetemplateattr:type EQ 'swatch-select' ) }">
			<MvIF EXPR = "{ NOT [ g.Feature_ATT_DB ].AttributeTemplateOption_Load_ID( l.selected_attribute:option_id, l.attributetemplateoption ) }">
				<MvFUNCTIONRETURN>
			<MvELSEIF EXPR = "{ l.attributetemplateoption:attmpat_id NE l.attributetemplateattr:id }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.selected_attribute:price"	VALUE = "{ l.attributetemplateoption:price }">
			<MvASSIGN NAME = "l.selected_attribute:cost"	VALUE = "{ l.attributetemplateoption:cost }">
			<MvASSIGN NAME = "l.selected_attribute:weight"	VALUE = "{ l.attributetemplateoption:weight }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.attribute:type NE l.selected_attribute:type }">
		<MvFUNCTIONRETURN>
	<MvELSE>
		<MvASSIGN NAME = "l.selected_attribute:inventory"	VALUE = "{ l.attribute:inventory }">

		<MvIF EXPR = "{ ( l.attribute:type EQ 'checkbox' ) OR ( l.attribute:type EQ 'text' ) OR ( l.attribute:type EQ 'memo' ) }">
			<MvASSIGN NAME = "l.selected_attribute:price"	VALUE = "{ l.attribute:price }">
			<MvASSIGN NAME = "l.selected_attribute:cost"	VALUE = "{ l.attribute:cost }">
			<MvASSIGN NAME = "l.selected_attribute:weight"	VALUE = "{ l.attribute:weight }">
		<MvELSEIF EXPR = "{ ( l.attribute:type EQ 'radio' ) OR ( l.attribute:type EQ 'select' ) OR ( l.attribute:type EQ 'swatch-select' ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Option_Load_ID( l.selected_attribute:option_id, l.option ) }">
				<MvFUNCTIONRETURN>
			<MvELSEIF EXPR = "{ ( l.option:product_id NE l.product:id ) OR ( l.option:attr_id NE l.attribute:id ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.selected_attribute:price"	VALUE = "{ l.option:price }">
			<MvASSIGN NAME = "l.selected_attribute:cost"	VALUE = "{ l.option:cost }">
			<MvASSIGN NAME = "l.selected_attribute:weight"	VALUE = "{ l.option:weight }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.selected_attribute:retail"			VALUE = "{ l.selected_attribute:price }">
	<MvASSIGN NAME = "l.selected_attribute:price"			VALUE = "{ [ g.Library_Utilities ].Adjusted_Price( l.product, l.selected_attribute:price, l.selected_attribute:cost ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_LoadUnselectedAttributeInfo" PARAMETERS = "product var, unselected_attribute var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.unselected_attribute:inventory"		VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Attribute_Load_ID( l.unselected_attribute:attr_id, l.attribute ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.attribute:product_id NE l.product:id }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.unselected_attribute:attmpat_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_ATT_DB ].AttributeTemplateAttr_Load_ID( l.unselected_attribute:attmpat_id, l.attributetemplateattr ) }">
			<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ l.attributetemplateattr:attemp_id NE l.attribute:attemp_id }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.unselected_attribute:inventory"	VALUE = "{ l.attributetemplateattr:inventory }">
	<MvELSE>
		<MvASSIGN NAME = "l.unselected_attribute:inventory"	VALUE = "{ l.attribute:inventory }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_BuildLookup" PARAMETERS = "attributes var, attribute_count, attribute_lookup var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| attribute_lookup[ attr_id ][ attmpat_id + 1 ]
	|
	|		exists		= 1
	|		attribute:
	|			attr_id
	|			attmpat_id
	|			option_count
	|			options
	|		option_lookup[ option_id + 1 ]
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.attribute_pos"		VALUE = 1>
	<MvWHILE EXPR = "{ l.attribute_pos LE l.attribute_count }">
		<MvREFERENCEARRAY NAME = "l.attribute" VARIABLE = "l.attributes">
			<MvDIMENSION INDEX = "{ l.attribute_pos }">
		</MvREFERENCEARRAY>

		<MvASSIGNARRAY NAME = "l.attribute_lookup" VALUE = 1>
			<MvDIMENSION INDEX = "{ l.attribute:attr_id }">
			<MvDIMENSION INDEX = "{ l.attribute:attmpat_id + 1 }">
			<MvMEMBER NAME = "exists">
		</MvASSIGNARRAY>

		<MvASSIGNARRAY NAME = "l.attribute_lookup" VALUE = "{ l.attribute }">
			<MvDIMENSION INDEX = "{ l.attribute:attr_id }">
			<MvDIMENSION INDEX = "{ l.attribute:attmpat_id + 1 }">
			<MvMEMBER NAME = "attribute">
		</MvASSIGNARRAY>
		
		<MvIF EXPR = "{ l.attribute:option_count }">
			<MvREFERENCEARRAY NAME = "l.option_lookup" VARIABLE = "l.attribute_lookup">
				<MvDIMENSION INDEX = "{ l.attribute:attr_id }">
				<MvDIMENSION INDEX = "{ l.attribute:attmpat_id + 1 }">
				<MvMEMBER NAME = "option_lookup">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.option_pos"		VALUE = 1>
			<MvWHILE EXPR = "{ l.option_pos LE l.attribute:option_count }">
				<MvASSIGN NAME = "l.option_lookup" INDEX = "{ l.attribute:options[ l.option_pos ] + 1 }" VALUE = 1>

				<MvASSIGN NAME = "l.option_pos"	VALUE = "{ l.option_pos + 1 }">
			</MvWHILE>
		</MvIF>

		<MvASSIGN NAME = "l.attribute_pos"	VALUE = "{ l.attribute_pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible_InvalidSelection" PARAMETERS = "product var, dependency_resolution,
																  last_selected var, last_selected_count,
																  selected_attributes var, selected_count,
																  unselected_attributes var, unselected_count,
																  applied_facets var, applied_facet_count,
																  have_incomplete_variants var, have_complete_variant var, complete_variant var,
																  output_attributes var, output_attribute_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.last_selected_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error( 'MER-JSN-RTM-00001', 'A selection was specified with no last-selected attribute' ) }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.last_selected_attribute" VARIABLE = "l.last_selected">
		<MvDIMENSION INDEX = "{ l.last_selected_count }">
	</MvREFERENCEARRAY>

	<MvCOMMENT>
	|
	| Using the last selected attribute(s), solve for any other attributes
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.possible_count"	VALUE = "{ [ g.Library_DB ].AttributeList_Load_ProductVariant_Possible_Facets( l.product:id, l.last_selected, l.last_selected_count, l.applied_facets, l.applied_facet_count, l.possible_attributes ) }">
	<MvIF EXPR = "{ l.possible_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| There are no combinations using the last selected attribute(s), so query without the last selected attribute (which may result in an empty set)
		| to find a valid selection for the last selected attribute, then restart the search as if it had been initially selected
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.new_selected_count"							VALUE = 0>
		<MvASSIGN NAME = "l.selected_pos"								VALUE = 1>

		<MvWHILE EXPR = "{ l.selected_pos LE l.selected_count }">
			<MvREFERENCEARRAY NAME = "l.selected_attribute" VARIABLE = "l.selected_attributes">
				<MvDIMENSION INDEX = "{ l.selected_pos }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ( l.selected_attribute:attr_id NE l.last_selected_attribute:attr_id ) OR 
							( l.selected_attribute:attmpat_id NE l.last_selected_attribute:attmpat_id ) }">
				<MvASSIGN NAME = "l.new_selected_count"									VALUE = "{ l.new_selected_count + 1 }">
				<MvASSIGN NAME = "l.new_selected" INDEX = "{ l.new_selected_count }"	VALUE = "{ l.selected_attribute }">
			</MvIF>
			
			<MvASSIGN NAME = "l.selected_pos"							VALUE = "{ l.selected_pos + 1 }">
		</MvWHILE>

		<MvASSIGN NAME = "l.option_count" VALUE = "{ [ g.Library_DB ].OptionList_Load_ProductVariant_Possible_Facets( l.product:id,
																											   l.last_selected_attribute:attr_id, l.last_selected_attribute:attmpat_id,
																											   l.new_selected, l.new_selected_count,
																											   l.applied_facets, l.applied_facet_count,
																											   l.options ) }">
		<MvIF EXPR = "{ l.option_count EQ 0 }">
			<MvIF EXPR = "{ l.new_selected_count EQ 0 }">
				<MvASSIGN NAME = "l.new_last_selected"						VALUE = "">
				<MvASSIGN NAME = "l.new_last_selected_count"				VALUE = 0>
			<MvELSE>
				<MvASSIGN NAME = "l.new_last_selected"			INDEX = 1	VALUE = "{ l.new_selected[ 1 ] }">
				<MvASSIGN NAME = "l.new_last_selected_count"				VALUE = 1>
			</MvIF>

			<MvCOMMENT>
			|
			| Mark this attribute to be "reselected" later if we find a valid variant, and remove it from the selection
			| to broaden our search.
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.last_selected_attribute:reselect"						VALUE = 1>

			<MvASSIGN NAME = "l.new_unselected"											VALUE = "{ l.unselected_attributes }">
			<MvASSIGN NAME = "l.new_unselected_count"									VALUE = "{ l.unselected_count + 1 }">
			<MvASSIGN NAME = "l.new_unselected" INDEX = "{ l.new_unselected_count }"	VALUE = "{ l.last_selected_attribute }">

			<MvFUNCTIONRETURN VALUE = "{ JSON_Possible( l.product, l.dependency_resolution,
														l.new_last_selected, l.new_last_selected_count,
														l.new_selected, l.new_selected_count,
														l.new_unselected, l.new_unselected_count,
														l.applied_facets, l.applied_facet_count,
														l.have_incomplete_variants, l.have_complete_variant, l.complete_variant,
														l.output_attributes, l.output_attribute_count ) }">
		<MvELSE>
			<MvCOMMENT>
			|
			| Replace the selected option in both last_selected and selected_attributes
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.last_selected_attribute:option_id"		VALUE = "{ l.options[ 1 ] }">
			<MvASSIGN NAME = "l.selected_pos"							VALUE = 1>

			<MvWHILE EXPR = "{ l.selected_pos LE l.selected_count }">
				<MvREFERENCEARRAY NAME = "l.selected_attribute" VARIABLE = "l.selected_attributes">
					<MvDIMENSION INDEX = "{ l.selected_pos }">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ ( l.selected_attribute:attr_id EQ l.last_selected_attribute:attr_id ) AND
								( l.selected_attribute:attmpat_id EQ l.last_selected_attribute:attmpat_id ) }">
					<MvASSIGN NAME = "l.selected_attribute:option_id"	VALUE = "{ l.options[ 1 ] }">
					<MvWHILESTOP>
				</MvIF>

				<MvASSIGN NAME = "l.selected_pos"			VALUE = "{ l.selected_pos + 1 }">
			</MvWHILE>

			<MvFUNCTIONRETURN VALUE = "{ JSON_Possible( l.product, l.dependency_resolution,
														l.last_selected, l.last_selected_count,
														l.selected_attributes, l.selected_count,
														l.unselected_attributes, l.unselected_count,
														l.applied_facets, l.applied_facet_count,
														l.have_incomplete_variants, l.have_complete_variant, l.complete_variant,
														l.output_attributes, l.output_attribute_count ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Possible_BuildLookup( l.possible_attributes, l.possible_count, l.possible_lookup ) }">

	<MvASSIGN NAME = "l.selected_pos"				VALUE = 1>
	<MvASSIGN NAME = "l.new_selected_count"			VALUE = 0>
	<MvASSIGN NAME = "l.new_unselected"				VALUE = "{ l.unselected_attributes }">
	<MvASSIGN NAME = "l.new_unselected_count"		VALUE = "{ l.unselected_count }">

	<MvWHILE EXPR = "{ l.selected_pos LE l.selected_count }">
		<MvREFERENCEARRAY NAME = "l.selected_attribute" VARIABLE = "l.selected_attributes">
			<MvDIMENSION INDEX = "{ l.selected_pos }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.last_selected_pos"		VALUE = 1>
		<MvWHILE EXPR = "{ l.last_selected_pos LE l.last_selected_count }">
			<MvIF EXPR = "{ ( l.selected_attribute:attr_id EQ l.last_selected[ l.last_selected_pos ]:attr_id ) AND
							( l.selected_attribute:attmpat_id EQ l.last_selected[ l.last_selected_pos ]:attmpat_id ) }">
				<MvASSIGN NAME = "l.new_selected_count"											VALUE = "{ l.new_selected_count + 1 }">
				<MvASSIGN NAME = "l.new_selected" INDEX = "{ l.new_selected_count }"			VALUE = "{ l.selected_attribute }">

				<MvWHILESTOP>
			</MvIF>

			<MvASSIGN NAME = "l.last_selected_pos"	VALUE = "{ l.last_selected_pos + 1 }">
		</MvWHILE>

		<MvIF EXPR = "{ l.last_selected_pos GT l.last_selected_count }">
			<MvREFERENCEARRAY NAME = "l.possible_attribute" VARIABLE = "l.possible_lookup">
				<MvDIMENSION INDEX = "{ l.selected_attribute:attr_id }">
				<MvDIMENSION INDEX = "{ l.selected_attribute:attmpat_id + 1 }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT l.possible_attribute:exists }">
				<MvASSIGN NAME = "l.new_unselected_count"									VALUE = "{ l.new_unselected_count + 1 }">
				<MvASSIGN NAME = "l.new_unselected" INDEX = "{ l.new_unselected_count }"	VALUE = "{ l.selected_attribute }">
			<MvELSE>
				<MvASSIGN NAME = "l.new_selected_count"										VALUE = "{ l.new_selected_count + 1 }">
				<MvASSIGN NAME = "l.new_selected" INDEX = "{ l.new_selected_count }"		VALUE = "{ l.selected_attribute }">

				<MvIF EXPR = "{ NOT l.possible_attribute:option_lookup[ l.selected_attribute:option_id + 1 ] }">
					<MvCOMMENT>
					|
					| Change the selection to the first available option
					|
					</MvCOMMENT>

					<MvASSIGNARRAY NAME = "l.new_selected" VALUE = "{ l.possible_attribute:attribute:options[ 1 ] }">
						<MvDIMENSION INDEX = "{ l.new_selected_count }">
						<MvMEMBER NAME = "option_id">
					</MvASSIGNARRAY>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.selected_pos"			VALUE = "{ l.selected_pos + 1 }">
	</MvWHILE>

	<MvCOMMENT>
	|
	| See if this new selection got us a valid combination.  If it did, we are done.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT JSON_Possible_Load_Variant( l.product,
													l.new_selected, l.new_selected_count,
													l.new_unselected, l.new_unselected_count,
													l.applied_facets, l.applied_facet_count,
													l.have_incomplete_variants, l.have_complete_variant, l.complete_variant ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.have_incomplete_variants OR l.have_complete_variant }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Possible_ValidSelection( l.product, l.dependency_resolution,
																   l.last_selected_attribute,
																   l.new_selected, l.new_selected_count,
																   l.new_unselected, l.new_unselected_count,
																   l.applied_facets, l.applied_facet_count,
																   l.have_incomplete_variants, l.have_complete_variant, l.complete_variant,
																   l.output_attributes, l.output_attribute_count ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| If not, we must iterate to solve for another attribute.  Choose the first attribute that is not already in the last
	| selected list.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.last_selected_count EQ l.selected_count }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Possible_BuildLookup( l.last_selected, l.last_selected_count, l.last_selected_lookup ) }">

	<MvASSIGN NAME = "l.new_selected_pos"			VALUE = 1>
	<MvWHILE EXPR = "{ l.new_selected_pos LE l.new_selected_count }">
		<MvREFERENCEARRAY NAME = "l.new_selected_attribute" VARIABLE = "l.new_selected">
			<MvDIMENSION INDEX = "{ l.new_selected_pos }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT l.last_selected_lookup[ l.new_selected_attribute:attr_id ][ l.new_selected_attribute:attmpat_id + 1 ]:exists }">
			<MvASSIGN NAME = "l.last_selected" INDEX = "{ l.last_selected_count + 1 }" VALUE = "{ l.new_selected_attribute }">

			<MvFUNCTIONRETURN VALUE = "{ JSON_Possible_InvalidSelection( l.product, l.dependency_resolution,
																		 l.last_selected, l.last_selected_count + 1,
																		 l.new_selected, l.new_selected_count,
																		 l.new_unselected, l.new_unselected_count,
																		 l.applied_facets, l.applied_facet_count,
																		 l.have_incomplete_variants, l.have_complete_variant, l.complete_variant,
																		 l.output_attributes, l.output_attribute_count ) }">
		</MvIF>

		<MvASSIGN NAME = "l.new_selected_pos"		VALUE = "{ l.new_selected_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Possible" PARAMETERS = "product var, dependency_resolution,
												 last_selected var, last_selected_count,
												 selected_attributes var, selected_count,
												 unselected_attributes var, unselected_count,
												 applied_facets var, applied_facet_count,
												 have_incomplete_variants var, have_complete_variant var, complete_variant var,
												 output_attributes var, output_attribute_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| If the selection is empty, just output the possible set and exit
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( l.selected_count EQ 0 ) AND ( l.unselected_count NE 0 ) }">
		<MvASSIGN NAME = "l.have_complete_variant"	VALUE = 0>
		<MvASSIGN NAME = "l.output_attribute_count"	VALUE = "{ [ g.Library_DB ].AttributeList_Load_ProductVariant_Possible_Facets( l.product:id, l.null, 0, l.applied_facets, l.applied_facet_count, l.output_attributes ) }">

		<MvIF EXPR = "{ l.output_attribute_count EQ 0 }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Possible_Load_Variant( l.product,
													l.selected_attributes, l.selected_count,
													l.unselected_attributes, l.unselected_count,													
													l.applied_facets, l.applied_facet_count,
													l.have_incomplete_variants, l.have_complete_variant, l.complete_variant ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.have_incomplete_variants OR l.have_complete_variant }">
		<MvIF EXPR = "{ NOT JSON_Possible_ValidSelection( l.product, l.dependency_resolution,
														  l.last_selected[ l.last_selected_count ],
														  l.selected_attributes, l.selected_count,
														  l.unselected_attributes, l.unselected_count,														  
														  l.applied_facets, l.applied_facet_count,
														  l.have_incomplete_variants, l.have_complete_variant, l.complete_variant,
														  l.output_attributes, l.output_attribute_count ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT JSON_Possible_InvalidSelection( l.product, l.dependency_resolution,
															l.last_selected, l.last_selected_count,
															l.selected_attributes, l.selected_count,
															l.unselected_attributes, l.unselected_count,
															l.applied_facets, l.applied_facet_count,
															l.have_incomplete_variants, l.have_complete_variant, l.complete_variant,
															l.output_attributes, l.output_attribute_count ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_AttributeList_Load_ProductVariant_Possible" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "g.Product_Code"				VALUE = "{ JSON_Decode( g.Product_Code ) }">
	<MvASSIGN NAME = "g.Selected_Term_ID"			VALUE = "{ int( g.Selected_Term_ID ) }">
	<MvASSIGN NAME = "g.Predict_Discounts"			VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Predict_Discounts ) }">

	<MvIF EXPR = "{ ISNULL g.Calculate_Sale_Price }">
		<MvASSIGN NAME = "g.Calculate_Sale_Price"	VALUE = "{ g.Predict_Discounts }">
	</MvIF>

	<MvASSIGN NAME = "g.Calculate_Sale_Price"		VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Calculate_Sale_Price ) }">

	<MvASSIGN NAME = "l.selected_count"				VALUE = "{ JSON_Array_Coalesce_Integer( g.Selected_Attribute_IDs,						l.selected_attributes,		'attr_id' ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ JSON_Array_Coalesce_Integer( g.Selected_AttributeTemplateAttribute_IDs,		l.selected_attributes,		'attmpat_id' ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ JSON_Array_Coalesce_Integer( g.Selected_Option_IDs,							l.selected_attributes,		'option_id' ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ JSON_Array_Coalesce_String( g.Selected_Attribute_Types,						l.selected_attributes,		'type' ) }">

	<MvASSIGN NAME = "l.unselected_count"			VALUE = "{ JSON_Array_Coalesce_Integer( g.Unselected_Attribute_IDs,						l.unselected_attributes,	'attr_id' ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ JSON_Array_Coalesce_Integer( g.Unselected_AttributeTemplateAttribute_IDs,	l.unselected_attributes,	'attmpat_id' ) }">

	<MvCOMMENT>
	|
	| Force all numeric input array elements to have a default value.  This is necsssary as the array inputs may be different lengths.
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.selected_attribute" ARRAY = "l.selected_attributes" COUNT = "{ l.selected_count }">
		<MvASSIGN NAME = "l.selected_attribute:attr_id"		VALUE = "{ int( l.selected_attribute:attr_id ) }">
		<MvASSIGN NAME = "l.selected_attribute:attmpat_id"	VALUE = "{ int( l.selected_attribute:attmpat_id ) }">
		<MvASSIGN NAME = "l.selected_attribute:option_id"	VALUE = "{ int( l.selected_attribute:option_id ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.unselected_attribute" ARRAY = "l.unselected_attributes" COUNT = "{ l.unselected_count }">
		<MvASSIGN NAME = "l.unselected_attribute:attr_id"		VALUE = "{ int( l.unselected_attribute:attr_id ) }">
		<MvASSIGN NAME = "l.unselected_attribute:attmpat_id"	VALUE = "{ int( l.unselected_attribute:attmpat_id ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Load facet and product information
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.applied_facet_count" VALUE = "{ JSON_Runtime_Product_AppliedFacets( l.applied_facets ) }">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_Code( g.Product_Code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Load attribute information
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.selected_attribute" ARRAY = "l.selected_attributes" COUNT = "{ l.selected_count }">
		<MvEVAL EXPR = "{ JSON_Possible_LoadSelectedAttributeInfo( l.product, l.selected_attribute ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.unselected_attribute" ARRAY = "l.unselected_attributes" COUNT = "{ l.unselected_count }">
		<MvEVAL EXPR = "{ JSON_Possible_LoadUnselectedAttributeInfo( l.product, l.unselected_attribute ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| The variant loading functions only want inventory attributes, so filter out non-inventory attributes
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.selected_inventory_count"	VALUE = "{ miva_array_filter( l.selected_attributes, 1, l.selected_attribute, 'l.selected_attribute:inventory', l.selected_inventory_attributes ) }">
	<MvASSIGN NAME = "l.unselected_inventory_count"	VALUE = "{ miva_array_filter( l.unselected_attributes, 1, l.unselected_attribute, 'l.unselected_attribute:inventory', l.unselected_inventory_attributes ) }">

	<MvCOMMENT>
	|
	| Load subscription term
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ g.Selected_Term_ID }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_ID( g.Selected_Term_ID, l.productsubscriptionterm ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.have_incomplete_variants"	VALUE = 0>
	<MvASSIGN NAME = "l.have_complete_variant"		VALUE = 0>
	<MvASSIGN NAME = "l.output_attribute_count"		VALUE = 0>

	<MvIF EXPR = "{ l.selected_inventory_count + l.unselected_inventory_count GT 0 }">
		<MvCOMMENT>
		|
		| Determine the last selected inventory attribute
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.last_selected"							VALUE = "">
		<MvASSIGN NAME = "l.last_selected_count"					VALUE = 0>

		<MvIF EXPR = "{ l.selected_inventory_count }">
			<MvIF EXPR = "{ ( ISNULL g.Last_Selected_Attribute_ID ) OR
							( ISNULL g.Last_Selected_AttributeTemplateAttribute_ID ) OR
							( ISNULL g.Last_Selected_Option_ID ) }">
				<MvASSIGN NAME = "l.last_selected_attr"				VALUE = "{ l.selected_inventory_attributes[ 1 ] }">
			<MvELSE>
				<MvASSIGN NAME = "l.last_selected_attr"				VALUE = "">
				<MvASSIGN NAME = "l.last_selected_attr:attr_id"		VALUE = "{ int( g.Last_Selected_Attribute_ID ) }">
				<MvASSIGN NAME = "l.last_selected_attr:attmpat_id"	VALUE = "{ int( g.Last_Selected_AttributeTemplateAttribute_ID ) }">
				<MvASSIGN NAME = "l.last_selected_attr:option_id"	VALUE = "{ int( g.Last_Selected_Option_ID ) }">
			</MvIF>

			<MvASSIGN NAME = "l.last_selected_count"				VALUE = "{ miva_array_insert_var( l.last_selected, l.last_selected_attr, -1 ) }">
		</MvIF>

		<MvCOMMENT>
		|
		| Determine possibilities
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT JSON_Possible( l.product, g.Dependency_Resolution,
										   l.last_selected, l.last_selected_count,
										   l.selected_inventory_attributes, l.selected_inventory_count,
										   l.unselected_inventory_attributes, l.unselected_inventory_count,
										   l.applied_facets, l.applied_facet_count,
										   l.have_incomplete_variants, l.have_complete_variant, l.complete_variant,
										   l.output_attributes, l.output_attribute_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Possible_Output( l.product, l.productsubscriptionterm, l.have_complete_variant, l.complete_variant, g.Predict_Discounts, g.Calculate_Sale_Price, l.selected_attributes, l.selected_count, l.output_attributes, l.output_attribute_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ProductVariant_Load_Attributes" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_Code( g.Product_Code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>	

	<MvASSIGN NAME = "l.attribute_count"			VALUE = "{ JSON_Array_Integer( g.Attribute_IDs, l.attribute_ids ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ JSON_Array_Integer( g.AttributeTemplateAttribute_IDs, l.attmpat_ids ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ JSON_Array_Integer( g.Option_IDs, l.option_ids ) }">

	<MvASSIGN NAME = "l.attribute_pos"				VALUE = 1>

	<MvWHILE EXPR = "{ l.attribute_pos LE l.attribute_count }">
		<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_pos }" MEMBER = "attr_id"	VALUE = "{ l.attribute_ids[ l.attribute_pos ] }">
		<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_pos }" MEMBER = "attmpat_id"	VALUE = "{ l.attmpat_ids[ l.attribute_pos ] }">
		<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_pos }" MEMBER = "option_id"	VALUE = "{ l.option_ids[ l.attribute_pos ] }">

		<MvASSIGN NAME = "l.attribute_pos"			VALUE = "{ l.attribute_pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].ProductVariant_Load_Attributes( l.product:id, l.attributes, l.attribute_count, l.productvariant ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ JSON_Response_Start() }">
		{
			"variant_id":	-1
		}
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_INV_RT ].Inventory_Load_Variant( l.product, l.productvariant:variant_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"variant_id":		<MvEVAL EXPR = "{ int( l.productvariant:variant_id ) }">,
		"inv_active":		<MvEVAL EXPR = "{ JSON_Boolean( l.product:inv_active ) }">,
		"inv_available":	<MvEVAL EXPR = "{ int( l.product:inv_available ) }">,
		"inv_instock":		<MvEVAL EXPR = "{ int( l.product:inv_instock ) }">,
		"inv_long":			"<MvEVAL EXPR = "{ JSON_Encode( l.product:inv_long ) }">",
		"inv_short":		"<MvEVAL EXPR = "{ JSON_Encode( l.product:inv_short ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ProductImageList_Load_Product_Variant" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvASSIGN NAME = "l.variant_id"				VALUE = "{ int( g.Variant_ID ) }">
	<MvASSIGN NAME = "l.imagesize_count"		VALUE = "{ JSON_Array_String( g.Image_Sizes, l.image_sizes ) }">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_Code( g.Product_Code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.constraints"			VALUE = "">
	<MvASSIGN NAME = "l.constraint_count"		VALUE = 0>

	<MvFOREACH ITERATOR = "l.image_size" ARRAY = "l.image_sizes" COUNT = "{ l.imagesize_count }">
		<MvIF EXPR = "{ l.image_size NE 'original' }">
			<MvASSIGN NAME = "l.dimensions"		VALUE = "{ trim( gettoken( l.image_size, ':', 1 ) ) }">
			<MvASSIGN NAME = "l.width"			VALUE = "{ int( gettoken( l.dimensions, 'x', 1 ) ) }">
			<MvASSIGN NAME = "l.height"			VALUE = "{ int( gettoken( l.dimensions, 'x', 2 ) ) }">

			<MvIF EXPR = "{ ( l.width LE 0 ) OR ( l.height LE 0 ) }">
				<MvASSIGN NAME = "l.image_size"	VALUE = "original">
			<MvELSE>
				<MvASSIGN NAME = "l.constraint_count"														VALUE = "{ l.constraint_count + 1 }">
				<MvASSIGN NAME = "l.constraints"		INDEX = "{ l.constraint_count }" MEMBER = "width"	VALUE = "{ l.width }">
				<MvASSIGN NAME = "l.constraints"		INDEX = "{ l.constraint_count }" MEMBER = "height"	VALUE = "{ l.height }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.productimagedata_count"	VALUE = "{ [ g.Library_DB ].ProductImageDataList_Load_Product_Variant_Constrained( l.product:id, l.variant_id, l.constraints, l.constraint_count, l.productimagedatalist ) }">
	<MvIF EXPR = "{ l.productimagedata_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	<MvEVAL EXPR = "{ JSON_Runtime_ProductImageDataList_Output( l.productimagedatalist, l.productimagedata_count, l.image_sizes, l.imagesize_count ) }">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ProductImageDataList_Output" PARAMETERS = "productimagedatalist var, productimagedata_count, image_sizes var, imagesize_count" STANDARDOUTPUTLEVEL = "text,html,compresswhitespace">
	[
	<MvFOREACH ITERATOR = "l.productimagedata" ARRAY = "l.productimagedatalist" COUNT = "{ l.productimagedata_count }">
		<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.scratch ) }">
		"type_code":	"<MvEVAL EXPR = "{ JSON_Encode( l.productimagedata:imagetype:code ) }">",
		"image_data":
		[
		<MvASSIGN NAME = "l.generatedimage_pos"			VALUE = 0>
		<MvFOREACH INDEX = "l.image_pos" ITERATOR = "l.image_size" ARRAY = "l.image_sizes" COUNT = "{ l.imagesize_count }">
			<MvIF EXPR = "{ l.image_size EQ 'original' }">
				<MvASSIGN NAME = "l.image_path"			VALUE = "{ l.productimagedata:image:image }">
			<MvELSE>
				<MvASSIGN NAME = "l.generatedimage_pos"	VALUE = "{ l.generatedimage_pos + 1 }">

				<MvIF EXPR = "{ NOT ISNULL l.productimagedata:generatedimages[ l.generatedimage_pos ]:image }">
					<MvASSIGN NAME = "l.image_path"		VALUE = "{ l.productimagedata:generatedimages[ l.generatedimage_pos ]:image }">
				<MvELSE>
					<MvASSIGN NAME = "l.dimensions"		VALUE = "{ trim( gettoken( l.image_size, ':', 1 ) ) }">
					<MvASSIGN NAME = "l.flags"			VALUE = "{ tolower( trim( gettoken( l.image_size, ':', 2 ) ) ) }">
					<MvASSIGN NAME = "l.width"			VALUE = "{ int( gettoken( l.dimensions, 'x', 1 ) ) }">
					<MvASSIGN NAME = "l.height"			VALUE = "{ int( gettoken( l.dimensions, 'x', 2 ) ) }">

					<MvIF EXPR = "{ ( l.flags EQ 'multipleonly' ) AND ( l.productimagedata_count EQ 1 ) }">
						<MvASSIGN NAME = "l.image_path"	VALUE = "">
					<MvELSEIF EXPR = "{ ( l.productimagedata:image:width LE l.width ) AND ( l.productimagedata:image:height LE l.height ) }">
						<MvASSIGN NAME = "l.image_path"	VALUE = "{ l.productimagedata:image:image }">
					<MvELSEIF EXPR = "{ [ g.Library_DB ].GeneratedImage_FindOrInsert_Image_Dimensions( l.productimagedata:image, l.width, l.height, l.generatedimage ) }">
						<MvASSIGN NAME = "l.image_path"	VALUE = "{ l.generatedimage:image }">
					<MvELSE>
						<MvASSIGN NAME = "l.image_path"	VALUE = "">
					</MvIF>
				</MvIF>
			</MvIF>
			
			"<MvEVAL EXPR = "{ JSON_Encode( l.image_path ) }">"<MvIF EXPR = "{ l.image_pos LT l.imagesize_count }">,</MvIF>
		</MvFOREACH>
		]

		<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
	</MvFOREACH>
	]
</MvFUNCTION>

<MvCOMMENT>
|
| JSON_Runtime_Discount_Basket and JSON_Runtime_Discount_Basket_LowLevel must be maintainted to be in sync with their PGR counterparts
| Runtime_Discount_Basket and Runtime_Discount_Basket_LowLevel which are located in pgr_rt.mv
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Runtime_Discount_Basket" PARAMETERS = "basket var" STANDARDOUTPUTLEVEL = "">
	<MvLOCKFILE FILE = "{ [ g.Module_Feature_PGR_UT ].Basket_Discount_LockFile( l.basket ) }">
		<MvASSIGN NAME = "l.result"	VALUE = "{ JSON_Runtime_Discount_Basket_LowLevel( l.basket ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Discount_Basket_LowLevel" PARAMETERS = "basket var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Basket_Load_ID( l.basket:basket_id, l.basket ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_CreateFromBasket( l.basket, l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Load_PriceGroups_Basket( l.basket, l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Basket( l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_ApplyToBasket( l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_RemoveUnusedCoupons( l.discount_state, l.null, l.null ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_BasketItem_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.variant_id"					VALUE = 0>
	<MvASSIGN NAME = "l.subterm_id"					VALUE = 0>
	<MvASSIGN NAME = "l.items"						VALUE = "">
	<MvASSIGN NAME = "l.item_count"					VALUE = 0>
	<MvASSIGN NAME = "l.product_attributes"			VALUE = "">
	<MvASSIGN NAME = "l.product_attribute_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT JSON_Runtime_Product_Load( l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Input_Integer( 'R:positive',	'Quantity',				l.quantity ) OR
					NOT JSON_Input_Integer( 'O',			'Subscription_Term_ID',	l.subterm_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.input_attribute" ARRAY = "l.input_attributes" COUNT = "{ JSON_Input_Array( 'Attributes', l.input_attributes ) }">
		<MvASSIGN NAME = "l.product_attribute"					VALUE = "">
		<MvASSIGN NAME = "l.product_attribute:code"				VALUE = "">
		<MvASSIGN NAME = "l.product_attribute:template_code"	VALUE = "">
		<MvASSIGN NAME = "l.product_attribute:value"			VALUE = "">

		<MvIF EXPR = "{ NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'code',			l.product_attribute:code )			OR
						NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'template_code',	l.product_attribute:template_code )	OR
						NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'value',			l.product_attribute:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.product_attribute_count"			VALUE = "{ miva_array_insert_var( l.product_attributes, l.product_attribute, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.subterm_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_SUB_DB ].ProductSubscriptionTerm_Load_ID( l.subterm_id, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'invalid_subscription', 'Invalid subscription' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_SUB_DB ].ProductSubscriptionSettings_Load_ProductOrDefault( l.product:id, l.productsubscriptionsettings ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ l.productsubscriptionsettings:enabled AND l.productsubscriptionsettings:mandatory }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'subscription_required', 'Subscription is required for this product' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Validate_Attributes_DetermineVariant( l.product, 0, l.product_attributes, l.product_attribute_count, l.basketoptions, l.basketoption_count, l.variant_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'product_attributes', 'One or more required attributes are missing, or an invalid combination of attributes was specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.variant_id EQ -1 }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'invalid_variant', 'Invalid variant' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Library_DB ].Basket_Is_Provisional( g.Basket ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Register( g.Basket ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Check to see if there is already an entry that has the same options as this add request, and if so,
	| update the quantity of the existing record rather than inserting a new one.
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.basketitem" ARRAY = "l.basketitems" COUNT = "{ [ g.Library_DB ].BasketItemList_Load_Basket_Product( g.Basket:basket_id, l.product:id, l.basketitems ) }">
		<MvIF EXPR = "{ l.basketitem:parent_id						OR
						l.basketitem:wish_id						OR
						l.basketitem:upsold							OR
						( l.basketitem:type NE 'product' )			OR
						( l.basketitem:variant_id NE l.variant_id )	OR
						( l.basketitem:subterm_id NE l.subterm_id ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.basketitem:option_count" VALUE = "{ [ g.Library_DB ].BasketOptionList_Load_Line( l.basketitem:line_id, l.basketitem:options ) }">

		<MvIF EXPR = "{ l.basketitem:option_count NE l.basketoption_count }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.basketoptions_match" VALUE = 1>

		<MvFOREACH ITERATOR = "l.existing_basketoption" ARRAY = "l.basketitem:options" COUNT = "{ l.basketitem:option_count }">
			<MvIF EXPR = "{ NOT miva_array_search( l.basketoptions, 1, l.basketoption, '( l.basketoption:attr_id EQ l.existing_basketoption:attr_id )		AND
																						( l.basketoption:attmpat_id EQ l.existing_basketoption:attmpat_id )	AND
																						( l.basketoption:option_id EQ l.existing_basketoption:option_id )	AND
																						( l.basketoption:data EQ l.existing_basketoption:data )				AND
																						( l.basketoption:data_long EQ l.existing_basketoption:data_long )' ) }">
				<MvASSIGN NAME = "l.basketoptions_match" VALUE = 0>
				<MvFOREACHSTOP>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ NOT l.basketoptions_match }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| Found a matching item
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.original_basketitem"	VALUE = "{ l.basketitem }">
		<MvASSIGN NAME = "l.basketitem:quantity"	VALUE = "{ l.original_basketitem:quantity + l.quantity }">
		<MvASSIGN NAME = "l.item_count"				VALUE = "{ [ g.Library_DB ].Runtime_BasketItemList_Process_AppendItem_Update( l.product, l.original_basketitem, l.basketitem, l.items ) }">

		<MvFOREACHSTOP>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT l.item_count }">
		<MvCOMMENT>
		|
		| Nothing matched, so add a new item to the basket
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.attr_price_override" VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Feature_INV_RT ].Inventory_Adjust_VariantPricing( l.product, l.variant_id, l.attr_price_override ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.basketitem"							VALUE = "">
		<MvASSIGN NAME = "l.basketitem:basket_id"				VALUE = "{ g.Basket:basket_id }">
		<MvASSIGN NAME = "l.basketitem:line_id"					VALUE = "">							<MvCOMMENT> Allow database code to generate line_id </MvCOMMENT>
		<MvASSIGN NAME = "l.basketitem:group_id"				VALUE = "">							<MvCOMMENT> Allow database code to assign to group_id </MvCOMMENT>
		<MvASSIGN NAME = "l.basketitem:product_id" 				VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.basketitem:variant_id"				VALUE = "{ l.variant_id }">
		<MvASSIGN NAME = "l.basketitem:wish_id"					VALUE = 0>
		<MvASSIGN NAME = "l.basketitem:subterm_id"				VALUE = "{ l.subterm_id }">
		<MvASSIGN NAME = "l.basketitem:code" 					VALUE = "{ l.product:code }">
		<MvASSIGN NAME = "l.basketitem:name" 					VALUE = "{ l.product:name }">
		<MvASSIGN NAME = "l.basketitem:type" 					VALUE = "product">

		<MvASSIGN NAME = "l.part_count"							VALUE = "{ [ g.Library_DB ].ProductList_Load_Variant( l.product:id, l.variant_id, l.parts ) }">

		<MvIF EXPR = "{ l.variant_id EQ 0 AND l.part_count EQ 0 }">	<MvASSIGN NAME = "l.basketitem:sku" VALUE = "{ l.product:sku }">
		<MvELSEIF EXPR = "{ l.part_count EQ 1 }">					<MvASSIGN NAME = "l.basketitem:sku" VALUE = "{ l.parts[ 1 ]:sku }">
		<MvELSE>													<MvASSIGN NAME = "l.basketitem:sku" VALUE = "">
		</MvIF>

		<MvASSIGN NAME = "l.basketitem:retail"					VALUE = "{ l.product:price }">
		<MvASSIGN NAME = "l.basketitem:base_price"				VALUE = "{ [ g.Library_Utilities ].Adjusted_Price( l.product, l.product:price, l.product:cost ) }">
		<MvASSIGN NAME = "l.basketitem:price"					VALUE = "{ l.basketitem:base_price }">
		<MvASSIGN NAME = "l.basketitem:weight" 					VALUE = "{ l.product:weight }">
		<MvASSIGN NAME = "l.basketitem:taxable" 				VALUE = "{ l.product:taxable }">
		<MvASSIGN NAME = "l.basketitem:upsold" 					VALUE = 0>
		<MvASSIGN NAME = "l.basketitem:quantity" 				VALUE = "{ l.quantity }">

		<MvFOREACH ITERATOR = "l.basketoption" ARRAY = "l.basketoptions" COUNT = "{ l.basketoption_count }">
			<MvASSIGN NAME = "l.basketoption:basket_id"			VALUE = "{ l.basketitem:basket_id }">
			<MvASSIGN NAME = "l.basketoption:line_id"			VALUE = "{ l.basketitem:line_id }">

			<MvIF EXPR = "{ l.attr_price_override }">
				<MvASSIGN NAME = "l.basketoption:retail"		VALUE = 0.00>
				<MvASSIGN NAME = "l.basketoption:base_price"	VALUE = 0.00>
				<MvASSIGN NAME = "l.basketoption:price"			VALUE = 0.00>
				<MvASSIGN NAME = "l.basketoption:weight"		VALUE = 0.00>
			</MvIF>

			<MvASSIGN NAME = "l.basketitem:option_count"		VALUE = "{ miva_array_insert_var( l.basketitem:options, l.basketoption, -1 ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.item_count"							VALUE = "{ [ g.Library_DB ].Runtime_BasketItemList_Process_AppendItem_Insert( l.product, l.basketitem, l.items ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Validate inventory
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_BasketItemList_Is_Available_Inventory( l.items, l.item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'inventory_out', ternary( NOT ISNULL g.Error_Messages, g.Error_Messages, g.Error_Message ) ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Apply Updates
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_BasketItemList_Process( l.items, l.item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Discount_Basket( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "g.Basket:total" 				VALUE = "{ [ g.Library_DB ].Basket_Total( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:subtotal" 			VALUE = "{ [ g.Library_DB ].Basket_SubTotal( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:formatted_total" 	VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:total ) }">
	<MvASSIGN NAME = "g.Basket:formatted_subtotal" 	VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:subtotal ) }">

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total":				<MvEVAL EXPR = "{ encodejavascriptnumber( g.Basket:total ) }">,
		"subtotal":				<MvEVAL EXPR = "{ encodejavascriptnumber( g.Basket:subtotal ) }">,
		"formatted_total":		"<MvEVAL EXPR = "{ encodejavascriptstring( g.Basket:formatted_total ) }">",
		"formatted_subtotal":	"<MvEVAL EXPR = "{ encodejavascriptstring( g.Basket:formatted_subtotal ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_BasketItemList_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.product_lookup"	VALUE = "">
	<MvASSIGN NAME = "l.products"		VALUE = "">
	<MvASSIGN NAME = "l.items"			VALUE = "">
	<MvASSIGN NAME = "l.item_count"		VALUE = 0>
	<MvASSIGN NAME = "l.errors"			VALUE = "">
	<MvASSIGN NAME = "l.error_count"	VALUE = 0>
	<MvASSIGN NAME = "l.field_prefix"	VALUE = "">

	<MvIF EXPR = "{ [ g.Library_DB ].Basket_Is_Provisional( g.Basket ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Register( g.Basket ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Input_Exists( 'Products' ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00029', 'Missing required parameter' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Load products and merge duplicate product entries into a new list
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.input_product" ARRAY = "l.input_products" INDEX = "l.pos" COUNT = "{ JSON_Input_Array( 'Products', l.input_products ) }">
		<MvIF EXPR = "{ NOT JSON_Runtime_Product_Load_Element( l.input_product, l.product ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.product:quantity"	VALUE = 0>
		<MvASSIGN NAME = "l.product:subterm_id"	VALUE = 0>

		<MvIF EXPR = "{ NOT JSON_Input_Element_Integer( l.input_product, 'R:positive',	'quantity',						l.product:quantity ) OR
						NOT JSON_Input_Element_Integer( l.input_product, 'O',			'product_subscription_term_id',	l.product:subterm_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.input_attribute" ARRAY = "l.input_attributes" COUNT = "{ JSON_Input_Element_Array( l.input_product, 'Attributes', l.input_attributes ) }">
			<MvASSIGN NAME = "l.product_attribute"					VALUE = "">
			<MvASSIGN NAME = "l.product_attribute:code"				VALUE = "">
			<MvASSIGN NAME = "l.product_attribute:template_code"	VALUE = "">
			<MvASSIGN NAME = "l.product_attribute:value"			VALUE = "">

			<MvIF EXPR = "{ NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'code',			l.product_attribute:code )			OR
							NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'template_code',	l.product_attribute:template_code )	OR
							NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'value',			l.product_attribute:value ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
			</MvIF>

			<MvASSIGN NAME = "l.product_attribute_count"			VALUE = "{ miva_array_insert_var( l.product:attributes, l.product_attribute, -1 ) }">
		</MvFOREACH>

		<MvREFERENCEARRAY NAME = "l.reference_product" VARIABLE = "l.product_lookup">
			<MvMEMBER NAME = "{ l.product:code $ ':' $ l.product:subterm_id $ ':' $ crypto_md5( miva_array_serialize( l.product:attributes ) ) }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT ISNULL l.reference_product }">
			<MvASSIGN NAME = "l.reference_product:quantity"	VALUE = "{ l.reference_product:quantity + l.product:quantity }">
		<MvELSE>
			<MvASSIGN NAME = "l.reference_product"			VALUE = "{ l.product }">
			<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert_ref( l.products, l.reference_product, l.pos ) }">
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Process merged products and build list of basket item changes
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" INDEX = "l.pos">
		<MvASSIGN NAME = "l.field_prefix" VALUE = "{ 'Products[' $ l.pos $ ']' }">

		<MvIF EXPR = "{ NOT Runtime_BasketItemList_Insert_ProcessProduct( l.field_prefix, l.product, l.items, l.item_count, l.errors, l.error_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Validate inventory
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_BasketItemList_Is_Available_Inventory_Filter( l.items, l.item_count, l.filtered_items, l.filtered_item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Apply Updates
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_BasketItemList_Process( l.filtered_items, l.filtered_item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Discount_Basket( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "g.Basket:total"				VALUE = "{ [ g.Library_DB ].Basket_Total( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:subtotal"			VALUE = "{ [ g.Library_DB ].Basket_SubTotal( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:formatted_total"		VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:total ) }">
	<MvASSIGN NAME = "g.Basket:formatted_subtotal"	VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:subtotal ) }">

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total":				<MvEVAL EXPR = "{ encodejavascriptnumber( g.Basket:total ) }">,
		"subtotal":				<MvEVAL EXPR = "{ encodejavascriptnumber( g.Basket:subtotal ) }">,
		"formatted_total":		"<MvEVAL EXPR = "{ encodejavascriptstring( g.Basket:formatted_total ) }">",
		"formatted_subtotal":	"<MvEVAL EXPR = "{ encodejavascriptstring( g.Basket:formatted_subtotal ) }">"

		<MvIF EXPR = "{ l.error_count }">
			,"skipped_products":
			[
				<MvFOREACH ITERATOR = "l.error" ARRAY = "l.errors" INDEX = "l.pos" COUNT = "{ l.error_count }">
					<MvIF EXPR = "{ l.pos GT 1 }">
						,
					</MvIF>
					{
						"identifier":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.error:identifier ) }">",
						"error_code":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.error:error_code ) }">",
						"error_message":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.error:error_message ) }">"
					}
				</MvFOREACH>
			]
		</MvIF>
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "Runtime_BasketItemList_Insert_ProcessProduct" PARAMETERS = "field_prefix, product var, items var, item_count var, errors var, error_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.basketitem_found" VALUE = 0>

	<MvIF EXPR = "{ l.product:subterm_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_SUB_DB ].ProductSubscriptionTerm_Load_ID( l.product:subterm_id, l.productsubscriptionterm ) }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.field_prefix $ ':subterm_id', g.Error_Code, 'Invalid subscription', l.errors ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.subterm_id" VALUE = "{ l.productsubscriptionterm:id }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_SUB_DB ].ProductSubscriptionSettings_Load_ProductOrDefault( l.product:id, l.productsubscriptionsettings ) }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.field_prefix $ ':subterm_id', g.Error_Code, g.Error_Message, l.errors ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ l.productsubscriptionsettings:enabled AND l.productsubscriptionsettings:mandatory }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.field_prefix, g.Error_Code, 'Subscription is required for this product', l.errors ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.subterm_id" VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.basketoptions"			VALUE = "">
	<MvASSIGN NAME = "l.basketoption_count"		VALUE = 0>
	<MvASSIGN NAME = "l.attribute_count"		VALUE = "{ miva_array_elements( l.product:attributes ) }">

	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Validate_Attributes_DetermineVariant( l.product, 0, l.product:attributes, l.attribute_count, l.basketoptions, l.basketoption_count, l.variant_id ) }">
		<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.field_prefix, 'MER-JSN-RTM-00032', 'One or more required attributes are missing, or an invalid combination of attributes was specified', l.errors ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.variant_id EQ -1 }">
		<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.field_prefix, 'MER-JSN-RTM-00033', 'Invalid variant', l.errors ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Check to see if there is already an entry that has the same options as this add request, and if so,
	| update the quantity of the existing record rather than inserting a new one.
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.basketitem" ARRAY = "l.basketitems" COUNT = "{ [ g.Library_DB ].BasketItemList_Load_Basket_Product( g.Basket:basket_id, l.product:id, l.basketitems ) }">
		<MvIF EXPR = "{ l.basketitem:parent_id						OR
						l.basketitem:wish_id						OR
						l.basketitem:upsold							OR
						( l.basketitem:type NE 'product' )			OR
						( l.basketitem:variant_id NE l.variant_id )	OR
						( l.basketitem:subterm_id NE l.subterm_id ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.basketitem:option_count" VALUE = "{ [ g.Library_DB ].BasketOptionList_Load_Line( l.basketitem:line_id, l.basketitem:options ) }">

		<MvIF EXPR = "{ l.basketitem:option_count NE l.basketoption_count }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.basketoptions_match" VALUE = 1>

		<MvFOREACH ITERATOR = "l.existing_basketoption" ARRAY = "l.basketitem:options" COUNT = "{ l.basketitem:option_count }">
			<MvIF EXPR = "{ NOT miva_array_search( l.basketoptions, 1, l.basketoption, '( l.basketoption:attr_id EQ l.existing_basketoption:attr_id )		AND
																						( l.basketoption:attmpat_id EQ l.existing_basketoption:attmpat_id )	AND
																						( l.basketoption:option_id EQ l.existing_basketoption:option_id )	AND
																						( l.basketoption:data EQ l.existing_basketoption:data )				AND
																						( l.basketoption:data_long EQ l.existing_basketoption:data_long )' ) }">
				<MvASSIGN NAME = "l.basketoptions_match" VALUE = 0>
				<MvFOREACHSTOP>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ NOT l.basketoptions_match }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| Found a matching item
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.original_basketitem"	VALUE = "{ l.basketitem }">
		<MvASSIGN NAME = "l.basketitem:quantity"	VALUE = "{ l.original_basketitem:quantity + l.product:quantity }">
		<MvASSIGN NAME = "l.item_count"				VALUE = "{ [ g.Library_DB ].Runtime_BasketItemList_Process_AppendItem_Update( l.product, l.original_basketitem, l.basketitem, l.items ) }">
		<MvASSIGN NAME = "l.basketitem_found"		VALUE = 1>

		<MvFOREACHSTOP>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT l.basketitem_found }">
		<MvCOMMENT>
		|
		| Nothing matched, so add a new item to be inserted into the basket
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.attr_price_override" VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Feature_INV_RT ].Inventory_Adjust_VariantPricing( l.product, l.variant_id, l.attr_price_override ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.basketitem"							VALUE = "">
		<MvASSIGN NAME = "l.basketitem:basket_id"				VALUE = "{ g.Basket:basket_id }">
		<MvASSIGN NAME = "l.basketitem:line_id"					VALUE = "">							<MvCOMMENT> Allow database code to generate line_id </MvCOMMENT>
		<MvASSIGN NAME = "l.basketitem:group_id"				VALUE = "">							<MvCOMMENT> Allow database code to assign to group_id </MvCOMMENT>
		<MvASSIGN NAME = "l.basketitem:product_id"				VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.basketitem:variant_id"				VALUE = "{ l.variant_id }">
		<MvASSIGN NAME = "l.basketitem:wish_id"					VALUE = 0>
		<MvASSIGN NAME = "l.basketitem:subterm_id"				VALUE = "{ l.subterm_id }">
		<MvASSIGN NAME = "l.basketitem:code"					VALUE = "{ l.product:code }">
		<MvASSIGN NAME = "l.basketitem:name"					VALUE = "{ l.product:name }">
		<MvASSIGN NAME = "l.basketitem:type"					VALUE = "product">

		<MvASSIGN NAME = "l.part_count"							VALUE = "{ [ g.Library_DB ].ProductList_Load_Variant( l.product:id, l.variant_id, l.parts ) }">

		<MvIF EXPR = "{ l.variant_id EQ 0 AND l.part_count EQ 0 }">	<MvASSIGN NAME = "l.basketitem:sku" VALUE = "{ l.product:sku }">
		<MvELSEIF EXPR = "{ l.part_count EQ 1 }">					<MvASSIGN NAME = "l.basketitem:sku" VALUE = "{ l.parts[ 1 ]:sku }">
		<MvELSE>													<MvASSIGN NAME = "l.basketitem:sku" VALUE = "">
		</MvIF>

		<MvASSIGN NAME = "l.basketitem:retail"					VALUE = "{ l.product:price }">
		<MvASSIGN NAME = "l.basketitem:base_price"				VALUE = "{ [ g.Library_Utilities ].Adjusted_Price( l.product, l.product:price, l.product:cost ) }">
		<MvASSIGN NAME = "l.basketitem:price"					VALUE = "{ l.basketitem:base_price }">
		<MvASSIGN NAME = "l.basketitem:weight"					VALUE = "{ l.product:weight }">
		<MvASSIGN NAME = "l.basketitem:taxable"					VALUE = "{ l.product:taxable }">
		<MvASSIGN NAME = "l.basketitem:upsold"					VALUE = 0>
		<MvASSIGN NAME = "l.basketitem:quantity"				VALUE = "{ l.product:quantity }">

		<MvFOREACH ITERATOR = "l.basketoption" ARRAY = "l.basketoptions" COUNT = "{ l.basketoption_count }">
			<MvASSIGN NAME = "l.basketoption:basket_id"			VALUE = "{ l.basketitem:basket_id }">
			<MvASSIGN NAME = "l.basketoption:line_id"			VALUE = "{ l.basketitem:line_id }">

			<MvIF EXPR = "{ l.attr_price_override }">
				<MvASSIGN NAME = "l.basketoption:retail"		VALUE = 0.00>
				<MvASSIGN NAME = "l.basketoption:base_price"	VALUE = 0.00>
				<MvASSIGN NAME = "l.basketoption:price"			VALUE = 0.00>
				<MvASSIGN NAME = "l.basketoption:weight"		VALUE = 0.00>
			</MvIF>

			<MvASSIGN NAME = "l.basketitem:option_count"		VALUE = "{ miva_array_insert_var( l.basketitem:options, l.basketoption, -1 ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.item_count"							VALUE = "{ [ g.Library_DB ].Runtime_BasketItemList_Process_AppendItem_Insert( l.product, l.basketitem, l.items ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_BasketItem_Update" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.basketitems"		VALUE = "">
	<MvASSIGN NAME = "l.basketitem_count"	VALUE = 0>

	<MvIF EXPR = "{ JSON_Input_Exists( 'Line_ID' ) }">
		<MvIF EXPR = "{ NOT JSON_Input_Integer( 'R', 'Line_ID', l.line_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_DB ].BasketItem_Load_Line( g.Basket:basket_id, l.line_id, l.basketitem ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00002', 'Unable to load requested Basket Item. Some or all of the Basket Contents may no longer be available.' ) }">
		<MvELSEIF EXPR = "{ l.basketitem:parent_id }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00024', 'This item cannot be directly modified.' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.basketitem_count" VALUE = "{ miva_array_insert_var( l.basketitems, l.basketitem, -1 ) }">
	<MvELSEIF EXPR = "{ JSON_Input_Exists( 'Group_ID' ) }">
		<MvIF EXPR = "{ NOT JSON_Input_Integer( 'R', 'Group_ID', l.group_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.basketitem_count" VALUE = "{ [ g.Library_DB ].BasketItemList_Load_Basket_Group( g.Basket:basket_id, l.group_id, l.basketitems ) }">

		<MvIF EXPR = "{ l.basketitem_count EQ 0 }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00003', 'Unable to load requested Basket Item. Some or all of the Basket Contents may no longer be available.' ) }">
		<MvELSEIF EXPR = "{ miva_array_search( l.basketitems, 1, l.basketitem, 'l.basketitem:parent_id' ) NE 0 }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00025', 'One or more items cannot be directly modified.' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00004', 'One of Line_ID or Group_ID must be specified' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.variant_id"					VALUE = 0>
	<MvASSIGN NAME = "l.subterm_id"					VALUE = 0>
	<MvASSIGN NAME = "l.product_attributes"			VALUE = "">
	<MvASSIGN NAME = "l.product_attribute_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT JSON_Input_Integer( 'R:positive',	'Quantity',				l.quantity ) OR
					NOT JSON_Input_Integer( 'O',			'Subscription_Term_ID',	l.subterm_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.input_attribute" ARRAY = "l.input_attributes" COUNT = "{ JSON_Input_Array( 'Attributes', l.input_attributes ) }">
		<MvASSIGN NAME = "l.product_attribute"					VALUE = "">
		<MvASSIGN NAME = "l.product_attribute:code"				VALUE = "">
		<MvASSIGN NAME = "l.product_attribute:template_code"	VALUE = "">
		<MvASSIGN NAME = "l.product_attribute:value"			VALUE = "">

		<MvIF EXPR = "{ NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'code',			l.product_attribute:code )			OR
						NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'template_code',	l.product_attribute:template_code )	OR
						NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'value',			l.product_attribute:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.product_attribute_count"			VALUE = "{ miva_array_insert_var( l.product_attributes, l.product_attribute, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Feature_INV_DB ].InventorySettings_Load_Cached( l.inventorysettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_BasketItem( l.basketitems[ 1 ], l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.product"	VALUE = "">
		<MvASSIGN NAME = "l.product:id"	VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.product:id }">
		<MvIF EXPR = "{ l.subterm_id }">
			<MvIF EXPR = "{ NOT [ g.Feature_SUB_DB ].ProductSubscriptionTerm_Load_ID( l.subterm_id, l.productsubscriptionterm ) }">
				<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00005', 'Invalid subscription' ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_SUB_DB ].ProductSubscriptionSettings_Load_ProductOrDefault( l.product:id, l.productsubscriptionsettings ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ l.productsubscriptionsettings:enabled AND l.productsubscriptionsettings:mandatory }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00006', 'Subscription is required for this product' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Validate_Attributes_DetermineVariant( l.product, 0, l.product_attributes, l.product_attribute_count, l.basketoptions, l.basketoption_count, l.variant_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00007', 'One or more required attributes are missing, or an invalid combination of attributes was specified' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.variant_id EQ -1 }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00008', 'Invalid variant' ) }">
		<MvELSEIF EXPR = "{ l.variant_id }">
			<MvIF EXPR = "{ NOT [ g.Feature_INV_RT ].Inventory_Adjust_VariantPricing( l.product, l.variant_id, l.attr_price_override ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Build changes
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.items"										VALUE = "">
	<MvASSIGN NAME = "l.item_count"									VALUE = 0>
	<MvASSIGN NAME = "l.total_quantity"								VALUE = 0>

	<MvIF EXPR = "{ l.variant_id NE l.basketitems[ 1 ]:variant_id }">
		<MvASSIGN NAME = "l.part_count"								VALUE = "{ [ g.Library_DB ].ProductList_Load_Variant( l.product:id, l.variant_id, l.parts ) }">

		<MvIF EXPR = "{ l.variant_id EQ 0 AND l.part_count EQ 0 }">	<MvASSIGN NAME = "l.sku" VALUE = "{ l.product:sku }">
		<MvELSEIF EXPR = "{ l.part_count EQ 1 }">					<MvASSIGN NAME = "l.sku" VALUE = "{ l.parts[ 1 ]:sku }">
		<MvELSE>													<MvASSIGN NAME = "l.sku" VALUE = "">
		</MvIF>

		<MvASSIGN NAME = "l.retail"									VALUE = "{ l.product:price }">
		<MvASSIGN NAME = "l.base_price"								VALUE = "{ [ g.Library_Utilities ].Adjusted_Price( l.product, l.product:price, l.product:cost ) }">
		<MvASSIGN NAME = "l.price"									VALUE = "{ l.base_price }">
		<MvASSIGN NAME = "l.weight" 								VALUE = "{ l.product:weight }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.basketitem" ARRAY = "l.basketitems" COUNT = "{ l.basketitem_count }">
		<MvASSIGN NAME = "l.total_quantity"							VALUE = "{ l.total_quantity + l.basketitem:quantity }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.quantity_adjustment"						VALUE = "{ l.quantity - l.total_quantity }">

	<MvFOREACH INDEX = "l.basketitem_pos" ITERATOR = "l.basketitem" ARRAY = "l.basketitems" COUNT = "{ l.basketitem_count }">
		<MvCOMMENT>
		|
		| Calculate quantity change (delete basketitem if necessary)
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.basketitem_quantity"					VALUE = "{ l.basketitem:quantity }">

		<MvIF EXPR = "{ ( l.quantity_adjustment GT 0 ) OR ( l.basketitem_count EQ 1 ) }">
			<MvIF EXPR = "{ l.basketitem_pos EQ 1 }">
				<MvASSIGN NAME = "l.basketitem_quantity"			VALUE = "{ l.basketitem:quantity + ( l.quantity - l.total_quantity ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.quantity LT l.basketitem_count }">
			<MvIF EXPR = "{ l.basketitem_pos LE l.quantity }">
				<MvASSIGN NAME = "l.basketitem_quantity"			VALUE = 1>
			<MvELSE>
				<MvASSIGN NAME = "l.item_count"						VALUE = "{ [ g.Library_DB ].Runtime_BasketItemList_Process_AppendItem_Delete( l.product, l.original_basketitem, l.items ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.avg_quantity"						VALUE = "{ floor( l.quantity / l.basketitem_count ) }">

			<MvIF EXPR = "{ l.basketitem_pos EQ 1 }">
				<MvASSIGN NAME = "l.first_quantity"					VALUE = "{ l.quantity - ( l.avg_quantity * ( l.basketitem_count - 1 ) ) }">
				<MvASSIGN NAME = "l.basketitem_quantity"			VALUE = "{ l.first_quantity }">
			<MvELSE>
				<MvASSIGN NAME = "l.basketitem_quantity"			VALUE = "{ l.avg_quantity }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Build updated basketitem
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.original_basketitem"					VALUE = "{ l.basketitem }">
		<MvASSIGN NAME = "l.original_basketitem:option_count"		VALUE = "{ [ g.Library_DB ].BasketOptionList_Load_Line( l.original_basketitem:line_id, l.original_basketitem:options ) }">

		<MvASSIGN NAME = "l.basketitem:product_id"					VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.basketitem:variant_id"					VALUE = "{ l.variant_id }">
		<MvASSIGN NAME = "l.basketitem:subterm_id"					VALUE = "{ l.subterm_id }">
		<MvASSIGN NAME = "l.basketitem:quantity"					VALUE = "{ l.basketitem_quantity }">

		<MvIF EXPR = "{ l.variant_id NE l.original_basketitem:variant_id }">
			<MvASSIGN NAME = "l.basketitem:sku"						VALUE = "{ l.sku }">
			<MvASSIGN NAME = "l.basketitem:retail"					VALUE = "{ l.retail }">
			<MvASSIGN NAME = "l.basketitem:base_price"				VALUE = "{ l.base_price }">
			<MvASSIGN NAME = "l.basketitem:price"					VALUE = "{ l.price }">
			<MvASSIGN NAME = "l.basketitem:weight"					VALUE = "{ l.weight }">
		</MvIF>

		<MvASSIGN NAME = "l.basketitem:options"						VALUE = "{ l.basketoptions }">
		<MvASSIGN NAME = "l.basketitem:option_count"				VALUE = "{ l.basketoption_count }">

		<MvFOREACH ITERATOR = "l.basketoption" ARRAY = "l.basketitem:options" COUNT = "{ l.basketitem:option_count }">
			<MvASSIGN NAME = "l.basketoption:basket_id"				VALUE = "{ g.Basket:basket_id }">
			<MvASSIGN NAME = "l.basketoption:line_id"				VALUE = "{ l.basketitem:line_id }">

			<MvIF EXPR = "{ l.attr_price_override }">
				<MvASSIGN NAME = "l.basketoption:retail"			VALUE = 0.00>
				<MvASSIGN NAME = "l.basketoption:base_price"		VALUE = 0.00>
				<MvASSIGN NAME = "l.basketoption:price"				VALUE = 0.00>
				<MvASSIGN NAME = "l.basketoption:weight"			VALUE = 0.00>
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.item_count"								VALUE = "{ [ g.Library_DB ].Runtime_BasketItemList_Process_AppendItem_Update( l.product, l.original_basketitem, l.basketitem, l.items ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Validate inventory
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Runtime_BasketItemList_Is_Available_Inventory( l.items, l.item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00009', 'Insufficient inventory' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Apply Updates
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_BasketItemList_Process( l.items, l.item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Discount_Basket( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "g.Basket:total" 				VALUE = "{ [ g.Library_DB ].Basket_Total( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:subtotal" 			VALUE = "{ [ g.Library_DB ].Basket_SubTotal( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:formatted_total" 	VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:total ) }">
	<MvASSIGN NAME = "g.Basket:formatted_subtotal" 	VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:subtotal ) }">

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total":				<MvEVAL EXPR = "{ g.Basket:total ROUND 2 }">,
		"subtotal":				<MvEVAL EXPR = "{ g.Basket:subtotal ROUND 2 }">,
		"formatted_total":		"<MvEVAL EXPR = "{ JSON_Encode( g.Basket:formatted_total ) }">",
		"formatted_subtotal":	"<MvEVAL EXPR = "{ JSON_Encode( g.Basket:formatted_subtotal ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_BasketItem_Delete" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.basketitems"		VALUE = "">
	<MvASSIGN NAME = "l.basketitem_count"	VALUE = 0>

	<MvIF EXPR = "{ JSON_Input_Exists( 'Line_ID' ) }">
		<MvIF EXPR = "{ NOT JSON_Input_Integer( 'R', 'Line_ID', l.line_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_DB ].BasketItem_Load_Line( g.Basket:basket_id, l.line_id, l.basketitem ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00010', 'Unable to load requested Basket Item. Some or all of the Basket Contents may no longer be available.' ) }">
		<MvELSEIF EXPR = "{ l.basketitem:parent_id }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00026', 'This item cannot be directly removed.' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.basketitem_count" VALUE = "{ miva_array_insert_var( l.basketitems, l.basketitem, -1 ) }">
	<MvELSEIF EXPR = "{ JSON_Input_Exists( 'Group_ID' ) }">
		<MvIF EXPR = "{ NOT JSON_Input_Integer( 'R', 'Group_ID', l.group_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.basketitem_count" VALUE = "{ [ g.Library_DB ].BasketItemList_Load_Basket_Group( g.Basket:basket_id, l.group_id, l.basketitems ) }">

		<MvIF EXPR = "{ l.basketitem_count EQ 0 }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00011', 'Unable to load requested Basket Item. Some or all of the Basket Contents may no longer be available.' ) }">
		<MvELSEIF EXPR = "{ miva_array_search( l.basketitems, 1, l.basketitem, 'l.basketitem:parent_id' ) NE 0 }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00027', 'One or more items cannot be directly removed.' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00012', 'One of Line_ID or Group_ID must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_BasketItem( l.basketitems[ 1 ], l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.product"					VALUE = "">
		<MvASSIGN NAME = "l.product:id"					VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.items"							VALUE = "">
	<MvASSIGN NAME = "l.item_count"						VALUE = 0>

	<MvFOREACH ITERATOR = "l.basketitem" ARRAY = "l.basketitems" COUNT = "{ l.basketitem_count }">
		<MvASSIGN NAME = "l.basketitem:option_count"	VALUE = "{ [ g.Library_DB ].BasketOptionList_Load_Line( l.basketitem:line_id, l.basketitem:options ) }">
		<MvASSIGN NAME = "l.item_count"					VALUE = "{ [ g.Library_DB ].Runtime_BasketItemList_Process_AppendItem_Delete( l.product, l.basketitem, l.items ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_BasketItemList_Process( l.items, l.item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Discount_Basket( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "g.Basket:total" 					VALUE = "{ [ g.Library_DB ].Basket_Total( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:subtotal" 				VALUE = "{ [ g.Library_DB ].Basket_SubTotal( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:formatted_total" 		VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:total ) }">
	<MvASSIGN NAME = "g.Basket:formatted_subtotal" 		VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:subtotal ) }">

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total":				<MvEVAL EXPR = "{ g.Basket:total ROUND 2 }">,
		"subtotal":				<MvEVAL EXPR = "{ g.Basket:subtotal ROUND 2 }">,
		"formatted_total":		"<MvEVAL EXPR = "{ JSON_Encode( g.Basket:formatted_total ) }">",
		"formatted_subtotal":	"<MvEVAL EXPR = "{ JSON_Encode( g.Basket:formatted_subtotal ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ShippingMethodList_Load" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">			<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT g.Checkout_Session_Verified }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.methods"			VALUE = "">
	<MvASSIGN NAME = "l.method_count"		VALUE = 0>

	<MvFOREACH ITERATOR = "l.loaded_method" ARRAY = "l.loaded_methods" COUNT = "{ [ g.Feature_SHP_UT ].ShippingMethodList_Load_Basket( l.loaded_methods ) }">
		<MvASSIGN NAME = "l.method"			VALUE = "">
		<MvASSIGN NAME = "l.method:module"	VALUE = "{ l.loaded_method:module:code }">
		<MvASSIGN NAME = "l.method:code"	VALUE = "{ l.loaded_method:code }">
		<MvASSIGN NAME = "l.method:name"	VALUE = "{ l.loaded_method:name }">
		<MvASSIGN NAME = "l.method:price"	VALUE = "{ l.loaded_method:price }">

		<MvASSIGN NAME = "l.method_count"	VALUE = "{ miva_array_insert_var( l.methods, l.method, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.method_count EQ 0 }">
		<MvIF EXPR = "{ g.Store:req_ship }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Library_Utilities ].Error_No_ShippingMethods() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvCOMMENT>
		|
		| Calculate the fallback method to include in our list, including handling, if applicable
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.method"			VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_UT ].FallbackShippingMethod_Valid_ForBasket() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_SHP_UT ].FallbackShippingMethod_Load_Basket( l.method ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.method_count"	VALUE = "{ miva_array_insert_var( l.methods, l.method, -1 ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	[
		<MvASSIGN NAME = "l.output_count" VALUE = 0>

		<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.output_count ) }">
				"module":			"<MvEVAL EXPR = "{ JSON_Encode( l.method:module ) }">",
				"code":				"<MvEVAL EXPR = "{ JSON_Encode( l.method:code ) }">",
				"name":				"<MvEVAL EXPR = "{ JSON_Encode( l.method:name ) }">",
				"price":			<MvEVAL EXPR = "{ l.method:price ROUND 2 }">,
				"formatted_price":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.method:price ) ) }">"
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CalculateCharges" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">			<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT g.Checkout_Session_Verified }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.payment_method" VALUE = "">

	<MvIF EXPR = "{ NOT JSON_Input_Text( 'r', 'ShippingMethod',		l.shipping_method ) OR
					NOT JSON_Input_Text( 'o', 'PaymentMethod',		l.payment_method ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Merchant ].Merchant_Actions_CheckoutLockFile() }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_Runtime_CalculateCharges_LowLevel( l.shipping_method, l.payment_method ) }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "g.Basket:total" 				VALUE = "{ [ g.Library_DB ].Basket_Total( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:subtotal" 			VALUE = "{ [ g.Library_DB ].Basket_SubTotal( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:formatted_total" 	VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:total ) }">
	<MvASSIGN NAME = "g.Basket:formatted_subtotal" 	VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:subtotal ) }">

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total":				<MvEVAL EXPR = "{ g.Basket:total ROUND 2 }">,
		"subtotal":				<MvEVAL EXPR = "{ g.Basket:subtotal ROUND 2 }">,
		"formatted_total":		"<MvEVAL EXPR = "{ JSON_Encode( g.Basket:formatted_total ) }">",
		"formatted_subtotal":	"<MvEVAL EXPR = "{ JSON_Encode( g.Basket:formatted_subtotal ) }">",
		"charges":
		[
			<MvASSIGN NAME = "l.charge_count" VALUE = 0>

			<MvFOREACH ITERATOR = "l.basketcharge" ARRAY = "l.basketcharges" COUNT = "{ [ g.Library_DB ].BasketChargeList_Load_Basket( g.Basket:basket_id, l.basketcharges ) }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.charge_count ) }">				
					<MvEVAL EXPR = "{ JSON_Runtime_BasketCharge( l.basketcharge ) }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
			</MvFOREACH>
		]
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CalculateCharges_LowLevel" PARAMETERS = "shipping_method, payment_method" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Load_ID( g.Basket:basket_id, g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ g.Basket:order_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error( 'basket_changed', 'The contents of your basket changed during the checkout process.  As a security precaution, you have been returned to the beginning of the checkout process.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_CalculateCharges_LowLevel_UpdateShipping( l.shipping_method ) }">		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT JSON_Runtime_CalculateCharges_LowLevel_UpdatePayment( l.payment_method ) }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT JSON_Runtime_CalculateCharges_LowLevel_CalculateTax() }">						<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CalculateCharges_LowLevel_UpdateShipping" PARAMETERS = "shipping_method" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'SHIPPING' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.shipping_method }">
		<MvASSIGN NAME = "l.module_code" VALUE = "{ substring_var( l.shipping_method, 1, ( ':' IN l.shipping_method ) - 1 ) }">
		<MvASSIGN NAME = "l.module_data" VALUE = "{ substring_var( l.shipping_method, ( ':' IN l.shipping_method ) + 1, len_var( l.shipping_method ) ) }">

		<MvIF EXPR = "{ ISNULL l.module_code }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error_ShippingMethod_Invalid() }">
		<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].Module_Load_Code( l.module_code, l.module ) OR
							NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error_ShippingMethod_Invalid() }">
		<MvELSEIF EXPR = "{ NOT [ g.Library_DB ].StoreModule_Load( l.module:id, 'shipping', l.storemodule ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error_ShippingMethod_Invalid() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_SHP_UT ].ShippingMethod_ApplyToBasket_LowLevel( l.module, l.module_data ) }">
			<MvIF EXPR = "{ [ g.Library_Utilities ].Error_Is_ShippingMethod_Invalid() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error_ShippingMethod_Invalid() }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvCOMMENT>
		|
		| If a method was not specified, first make sure shipping is not required, then apply the fallback
		| method.  If shipping is not required for free orders, do not insert any shipping or handling
		| charges, as the UI will be skipping the OSEL and OPAY screens, and if the order total is not
		| 0 during the AUTH action an error will be generated.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.total" VALUE = "{ [ g.Library_DB ].Basket_Total( g.Basket:basket_id ) }">

		<MvIF EXPR = "{ ( l.total GT 0 ) AND g.Store:req_ship }">				<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error_ShippingMethod_Invalid() }">
		<MvELSEIF EXPR = "{ ( l.total EQ 0 ) AND ( NOT g.Store:req_frship ) }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_UT ].FallbackShippingMethod_Valid_ForBasket() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_SHP_UT ].FallbackShippingMethod_ApplyToBasket() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_SHP_UT ].HandlingCharge_CalculateAndApplyToBasket() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_PGR_UT ].Discount_Shipping( g.Basket, l.module, l.module_data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Library_DB ].Basket_Update_Shipping( g.Basket ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CalculateCharges_LowLevel_UpdatePayment" PARAMETERS = "payment_method" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.payment_method }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ g.Basket:cust_id AND g.Customer_Session_Verified }">	<MvASSIGN NAME = "l.customer_id" VALUE = "{ g.Basket:cust_id }">
	<MvELSE>																<MvASSIGN NAME = "l.customer_id" VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'PAYMENT' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].PaymentMethod_Parse_Runtime_WithModule( l.payment_method, l.customer_id, l.module, l.module_data, l.paymentcard, l.paymentcardtype ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Utilities ].Error_PaymentMethod_Invalid() }">
	<MvELSEIF EXPR = "{ NOT ISNULL l.module }">
		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].PaymentModule_Manipulate_Shipping( l.module, l.module_data ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CalculateCharges_LowLevel_CalculateTax" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Reset_Tax( g.Basket:basket_id ) OR
					NOT [ g.Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'TAX' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Root $ g.Store:tax_mod:module ].TaxModule_Calculate_Basket( g.Store:tax_mod ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_AppliedFacets" PARAMETERS = "applied_facets var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.applied_facets"			VALUE = "">
	<MvASSIGN NAME = "l.applied_facet_count"	VALUE = 0>
	<MvASSIGN NAME = "l.facet_count"			VALUE = "{ [ g.Module_Feature_FCT_UT ].FacetList_Load_All_Cached( l.facets ) }">

	<MvFOREACH ITERATOR = "l.facet" ARRAY = "l.enabled_facets" COUNT = "{ miva_array_filter_ref( l.facets, 1, l.facet, 'l.facet:handle EQ \'show\' OR l.facet:handle EQ \'hide\'', l.enabled_facets ) }">
		<MvREFERENCE NAME = "l.facet_value" VARIABLE = "{ 'g.' $ l.facet:code }">

		<MvIF EXPR = "{ ISNULL l.facet_value }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.applied_facet"								VALUE = "{ l.facet }">

		<MvIF EXPR = "{ miva_array_elements( l.facet_value ) EQ 0 }">
			<MvASSIGN NAME = "l.applied_facet:input_value_count"		VALUE = "{ miva_array_insert_var( l.applied_facet:input_values, l.facet_value, -1 ) }">
		<MvELSE>
			<MvFOREACH ITERATOR = "l.individual_facet_value" ARRAY = "l.facet_value">
				<MvASSIGN NAME = "l.applied_facet:input_value_count"	VALUE = "{ miva_array_insert_var( l.applied_facet:input_values, l.individual_facet_value, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvASSIGN NAME = "l.applied_facet_count"						VALUE = "{ miva_array_insert_var( l.applied_facets, l.applied_facet, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.applied_facet_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_PaymentMethodList_Load" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">			<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT g.Checkout_Session_Verified }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.method_count" VALUE = "{ [ g.Module_Feature_PAY_UT ].PaymentMethodList_Load_Basket( l.methods ) }">

	<MvIF EXPR = "{ l.method_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'no_payment_methods', 'No payment methods available' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.output_count" VALUE = 0>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.output_count ) }">
				<MvIF EXPR = "{ l.method:paymentcardtype:id EQ -1 }">
					<MvASSIGN NAME = "l.module_code"		VALUE = "mivapay">
					<MvASSIGN NAME = "l.method_code"		VALUE = "">
					<MvASSIGN NAME = "l.method_name"		VALUE = "{ l.method:name }">
					<MvASSIGN NAME = "l.paymentmethod"		VALUE = "mivapay:">
				<MvELSE>
					<MvASSIGN NAME = "l.module_code"		VALUE = "{ l.method:module:code }">
					<MvASSIGN NAME = "l.method_code"		VALUE = "{ l.method:code }">
					<MvASSIGN NAME = "l.method_name"		VALUE = "{ l.method:name }">

					<MvIF EXPR = "{ l.method:paymentcard }">			<MvASSIGN NAME = "l.paymentmethod" VALUE = "{ 'paymentcard:' $ l.method:paymentcard:id }">
					<MvELSEIF EXPR = "{ l.method:paymentcardtype:id }">	<MvASSIGN NAME = "l.paymentmethod" VALUE = "{ 'paymentcardtype:' $ l.method:paymentcardtype:id }">
					<MvELSE>											<MvASSIGN NAME = "l.paymentmethod" VALUE = "{ l.module_code $ ':' $ l.method_code }">
					</MvIF>
				</MvIF>
				
				"module":			"<MvEVAL EXPR = "{ JSON_Encode( l.module_code ) }">",
				"code":				"<MvEVAL EXPR = "{ JSON_Encode( l.method_code ) }">",
				"name":				"<MvEVAL EXPR = "{ JSON_Encode( l.method_name ) }">",
				"paymentmethod":	"<MvEVAL EXPR = "{ JSON_Encode( l.paymentmethod ) }">"
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ValidateAddress" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.address" VALUE = "">

	<MvIF EXPR = "{ NOT JSON_Input_Text( 	'o', 'Company', 	l.address:comp )	OR
					NOT JSON_Input_Text( 	'o', 'Address1', 	l.address:addr1 )	OR
					NOT JSON_Input_Text( 	'o', 'Address2', 	l.address:addr2 )	OR
					NOT JSON_Input_Text( 	'o', 'City', 		l.address:city )	OR
					NOT JSON_Input_Text( 	'o', 'State', 		l.address:state )	OR
					NOT JSON_Input_Text( 	'o', 'Zip', 		l.address:zip )		OR
					NOT JSON_Input_Text( 	'o', 'Country', 	l.address:cntry )	OR
					NOT JSON_Input_Boolean(	'o', 'Residential',	l.address:resdntl ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_ValidateAddress_LowLevel( l.address, l.verified_addresses, l.verified_address_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.output_count" VALUE = 0>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.address" ARRAY = "l.verified_addresses" COUNT = "{ l.verified_address_count }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.output_count ) }">
				"addr1":	"<MvEVAL EXPR = "{ JSON_Encode( l.address:addr1 ) }">",
				"addr2":	"<MvEVAL EXPR = "{ JSON_Encode( l.address:addr2 ) }">",
				"comp":		"<MvEVAL EXPR = "{ JSON_Encode( l.address:comp ) }">",
				"city":		"<MvEVAL EXPR = "{ JSON_Encode( l.address:city ) }">",
				"state":	"<MvEVAL EXPR = "{ JSON_Encode( l.address:state ) }">",
				"zip":		"<MvEVAL EXPR = "{ JSON_Encode( l.address:zip ) }">",
				"country":	"<MvEVAL EXPR = "{ JSON_Encode( l.address:country ) }">",
				"resdntl":	<MvEVAL EXPR = "{ JSON_Boolean( l.address:resdntl ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ValidateAddress_LowLevel" PARAMETERS = "address var, verified_addresses var, verified_address_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.verified_addresses" 	VALUE = "">
	<MvASSIGN NAME = "l.verified_address_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT g.Store:addrval_id }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( g.Store:addrval_id, l.address_module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT l.address_module:active }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.address_module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.address_module:feature_hash:addrval }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.verified_address_count" VALUE = "{ [ g.Module_Root $ l.address_module:module ].AddressValidationModule_Validate_Address( l.address_module, l.address, l.verified_addresses ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_BasketCharge" PARAMETERS = "basketcharge var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"type":					"<MvEVAL EXPR = "{ JSON_Encode( l.basketcharge:type ) }">",
	"descrip":				"<MvEVAL EXPR = "{ JSON_Encode( l.basketcharge:descrip ) }">",
	"amount":				<MvEVAL EXPR = "{ l.basketcharge:amount ROUND 3 }">,
	"disp_amt":				<MvEVAL EXPR = "{ l.basketcharge:disp_amt ROUND 3 }">,
	"tax_exempt":			<MvEVAL EXPR = "{ JSON_Boolean( l.basketcharge:tax_exempt ) }">,
	"tax":					<MvEVAL EXPR = "{ l.basketcharge:tax ROUND 2 }">,
	"formatted_amount":		"<MvEVAL EXPR = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketcharge:amount ) }">",
	"formatted_disp_amt":	"<MvEVAL EXPR = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketcharge:disp_amt ) }">",
	"formatted_tax":		"<MvEVAL EXPR = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketcharge:tax ) }">"
</MvFUNCTION>

<MvCOMMENT>
|
| JSON_Runtime_InitiateCheckout
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Runtime_InitiateCheckout" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Merchant ].Merchant_Actions_CheckoutLockFile() }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_Runtime_InitiateCheckout_LowLevel() }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_InitiateCheckout_LowLevel" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Basket_Load_Session( g.Basket:session_id, g.Basket ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Clear_Customer_Information( g.Basket ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'checkout_invalid_session', 'Your session has timed out.' ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Basket:sub_count AND ( NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'order_customer_required', 'Subscriptions require a customer account. Please sign in or create a new customer account.' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Library_DB ].Basket_Quantity_All( g.Basket:basket_id ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'basket_empty', 'Your basket is currently empty' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Library_Utilities ].OrderMinimumsMet() }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'order_minimum_unmet', g.Store:omin_msg ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_RT ].Inventory_Check_Available_AtCheckout( g.Basket, l.available ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT l.available }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'inventory_unavailable_atcheckout', 'One or more items are out of stock' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( g.Basket:order_id EQ 0 ) OR ( g.Basket:order_proc ) }">
		<MvASSIGN NAME = "g.Basket:order_id"	VALUE = "{ [ g.Library_DB ].StoreKey_Generate( 'Orders' ) }">
		<MvASSIGN NAME = "g.Basket:order_proc"	VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Update_Order( g.Basket ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ISNULL g.Basket:chksess_id }">
		<MvASSIGN NAME = "g.Checkout_Session_Verified"	VALUE = 1>
		<MvASSIGN NAME = "g.Checkout_Session_ID"		VALUE = "{ MakeSessionID() }">
		<MvASSIGN NAME = "g.Basket:chksess_id"			VALUE = "{ g.Checkout_Session_ID }">
		<MvASSIGN NAME = "g.Basket:auth_token"			VALUE = "{ MakeSessionID() }">
		<MvASSIGN NAME = "g.Basket:auth_fails"			VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Update_Customer_Information( g.Basket ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].BasketInfo_Delete_ClearOnMod_Basket( g.Basket:basket_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Library_Utilities ].UpdateSessionID() }">

	<MvIF EXPR = "{ NOT JSON_Runtime_Discount_Basket( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Runtime_OutputCheckoutResponse() }">
</MvFUNCTION>

<MvCOMMENT>
|
| JSON_Runtime_UpdateShipping
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Runtime_UpdateShipping" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Merchant ].Merchant_Actions_CheckoutLockFile() }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_Runtime_UpdateShipping_LowLevel() }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_UpdateShipping_LowLevel" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Load_Session( g.Basket:session_id, g.Basket ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Clear_Customer_Information( g.Basket ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'checkout_invalid_session', 'Your session has timed out.' ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Basket:sub_count AND ( NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'order_customer_required', 'Subscriptions require a customer account. Please sign in or create a new customer account.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].StandardFields_Load_Cached( l.std_fields ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.update_customer"	VALUE = 0>
	<MvASSIGN NAME = "l.address_id"			VALUE = 0>
	<MvASSIGN NAME = "l.address"			VALUE = "">
	<MvASSIGN NAME = "l.address:fname"		VALUE = "{ g.Basket:ship_fname }">
	<MvASSIGN NAME = "l.address:lname"		VALUE = "{ g.Basket:ship_lname }">
	<MvASSIGN NAME = "l.address:email"		VALUE = "{ g.Basket:ship_email }">
	<MvASSIGN NAME = "l.address:comp"		VALUE = "{ g.Basket:ship_comp }">
	<MvASSIGN NAME = "l.address:phone"		VALUE = "{ g.Basket:ship_phone }">
	<MvASSIGN NAME = "l.address:fax"		VALUE = "{ g.Basket:ship_fax }">
	<MvASSIGN NAME = "l.address:addr1"		VALUE = "{ g.Basket:ship_addr1 }">
	<MvASSIGN NAME = "l.address:addr2"		VALUE = "{ g.Basket:ship_addr2 }">
	<MvASSIGN NAME = "l.address:city"		VALUE = "{ g.Basket:ship_city }">
	<MvASSIGN NAME = "l.address:state"		VALUE = "{ g.Basket:ship_state }">
	<MvASSIGN NAME = "l.address:zip"		VALUE = "{ g.Basket:ship_zip }">
	<MvASSIGN NAME = "l.address:cntry"		VALUE = "{ g.Basket:ship_cntry }">
	<MvASSIGN NAME = "l.address:resdntl"	VALUE = "{ g.Basket:ship_res }">

	<MvIF EXPR = "{ g.Basket:cust_id AND g.Customer_Session_Verified AND JSON_Input_Exists( 'Address_ID' ) }">
		<MvIF EXPR = "{ NOT JSON_Input_Integer( 'o', 'Address_ID',	l.address_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
	
		<MvIF EXPR = "{ l.address_id }">
			<MvIF EXPR = "{ NOT [ g.Feature_CUS_DB ].CustomerAddress_Load( g.Basket:cust_id, l.address_id, l.address ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'invalid_customer_address', 'Customer address does not exist' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Input_Text( 	'o', 'FirstName',		l.address:fname ) 	OR
					NOT JSON_Input_Text( 	'o', 'LastName',		l.address:lname ) 	OR
					NOT JSON_Input_Text( 	'o', 'Email',			l.address:email ) 	OR
					NOT JSON_Input_Text( 	'o', 'Phone',			l.address:phone ) 	OR
					NOT JSON_Input_Text( 	'o', 'Fax',				l.address:fax ) 	OR
					NOT JSON_Input_Text( 	'o', 'Company',			l.address:comp ) 	OR
					NOT JSON_Input_Text( 	'o', 'Address1',		l.address:addr1 )	OR
					NOT JSON_Input_Text( 	'o', 'Address2',		l.address:addr2 ) 	OR
					NOT JSON_Input_Text( 	'o', 'City',			l.address:city ) 	OR
					NOT JSON_Input_Text( 	'o', 'State',			l.address:state ) 	OR
					NOT JSON_Input_Text( 	'o', 'Zip',				l.address:zip ) 	OR
					NOT JSON_Input_Text( 	'o', 'Country',			l.address:cntry )	OR
					NOT JSON_Input_Boolean(	'o', 'Residential',		l.address:resdntl )	OR
					NOT JSON_Input_Boolean(	'o', 'Update_Customer',	l.update_customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.std_fields:ship_res EQ 'A' }">
		<MvASSIGN NAME = "l.address:resdntl"	VALUE = "{ ISNULL l.address:comp }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Validate_StandardFields( l.std_fields, l.address ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "g.Basket:addr_val_s"		VALUE = 1>
	<MvASSIGN NAME = "g.Basket:ship_fname"		VALUE = "{ l.address:fname }">
	<MvASSIGN NAME = "g.Basket:ship_lname"		VALUE = "{ l.address:lname }">
	<MvASSIGN NAME = "g.Basket:ship_email"		VALUE = "{ l.address:email }">
	<MvASSIGN NAME = "g.Basket:ship_comp"		VALUE = "{ l.address:comp }">
	<MvASSIGN NAME = "g.Basket:ship_phone"		VALUE = "{ l.address:phone }">
	<MvASSIGN NAME = "g.Basket:ship_fax"		VALUE = "{ l.address:fax }">
	<MvASSIGN NAME = "g.Basket:ship_addr"		VALUE = "">
	<MvASSIGN NAME = "g.Basket:ship_addr1"		VALUE = "{ l.address:addr1 }">
	<MvASSIGN NAME = "g.Basket:ship_addr2"		VALUE = "{ l.address:addr2 }">
	<MvASSIGN NAME = "g.Basket:ship_city"		VALUE = "{ l.address:city }">
	<MvASSIGN NAME = "g.Basket:ship_state"		VALUE = "{ l.address:state }">
	<MvASSIGN NAME = "g.Basket:ship_zip"		VALUE = "{ l.address:zip }">
	<MvASSIGN NAME = "g.Basket:ship_cntry"		VALUE = "{ l.address:cntry }">
	<MvASSIGN NAME = "g.Basket:ship_res"		VALUE = "{ l.address:resdntl }">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Update_Customer_Information( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.update_customer AND g.Basket:cust_id AND g.Customer_Session_Verified }">
		<MvIF EXPR = "{ NOT JSON_Runtime_UpdateAddress_Customer( 'shipping', l.address, l.std_fields ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'TAX' )		OR
					NOT [ g.Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'SHIPPING' )	OR
					NOT [ g.Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'HANDLING' )	OR
					NOT [ g.Library_DB ].Basket_Reset_Tax( g.Basket:basket_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Basket:ship_id }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Module_Load_ID( g.Basket:ship_id, l.shipping_module )			OR
						NOT [ g.Library_DB ].StoreModule_Load( l.shipping_module:id, 'shipping', l.null )	OR
						NOT l.shipping_module:active }">
			<MvASSIGN NAME = "g.Basket:ship_id"		VALUE = 0>
			<MvASSIGN NAME = "g.Basket:ship_data"	VALUE = "">
		<MvELSEIF EXPR = "{ NOT [ g.Feature_SHP_UT ].ShippingMethod_ApplyToBasket_LowLevel( l.shipping_module, g.Basket:ship_data ) }">
			<MvASSIGN NAME = "g.Basket:ship_id"		VALUE = 0>
			<MvASSIGN NAME = "g.Basket:ship_data"	VALUE = "">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_SHP_UT ].HandlingCharge_CalculateAndApplyToBasket() }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_PGR_UT ].Discount_Shipping( g.Basket, l.shipping_module, g.Basket:ship_data ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Update_Shipping( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ g.Store:tax_mod:module ].TaxModule_Calculate_Basket( g.Store:tax_mod ) }">

	<MvFUNCTIONRETURN VALUE = "{ JSON_Runtime_OutputCheckoutResponse() }">
</MvFUNCTION>

<MvCOMMENT>
|
| JSON_Runtime_UpdateBilling
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Runtime_UpdateBilling" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Merchant ].Merchant_Actions_CheckoutLockFile() }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_Runtime_UpdateBilling_LowLevel() }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_UpdateBilling_LowLevel" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Load_Session( g.Basket:session_id, g.Basket ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Clear_Customer_Information( g.Basket ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'checkout_invalid_session', 'Your session has timed out.' ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Basket:sub_count AND ( NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'order_customer_required', 'Subscriptions require a customer account. Please sign in or create a new customer account.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].StandardFields_Load_Cached( l.std_fields ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.update_customer"	VALUE = 0>
	<MvASSIGN NAME = "l.address_id"			VALUE = 0>
	<MvASSIGN NAME = "l.address"			VALUE = "">
	<MvASSIGN NAME = "l.address:fname"		VALUE = "{ g.Basket:bill_fname }">
	<MvASSIGN NAME = "l.address:lname"		VALUE = "{ g.Basket:bill_lname }">
	<MvASSIGN NAME = "l.address:email"		VALUE = "{ g.Basket:bill_email }">
	<MvASSIGN NAME = "l.address:comp"		VALUE = "{ g.Basket:bill_comp }">
	<MvASSIGN NAME = "l.address:phone"		VALUE = "{ g.Basket:bill_phone }">
	<MvASSIGN NAME = "l.address:fax"		VALUE = "{ g.Basket:bill_fax }">
	<MvASSIGN NAME = "l.address:addr1"		VALUE = "{ g.Basket:bill_addr1 }">
	<MvASSIGN NAME = "l.address:addr2"		VALUE = "{ g.Basket:bill_addr2 }">
	<MvASSIGN NAME = "l.address:city"		VALUE = "{ g.Basket:bill_city }">
	<MvASSIGN NAME = "l.address:state"		VALUE = "{ g.Basket:bill_state }">
	<MvASSIGN NAME = "l.address:zip"		VALUE = "{ g.Basket:bill_zip }">
	<MvASSIGN NAME = "l.address:cntry"		VALUE = "{ g.Basket:bill_cntry }">
	<MvASSIGN NAME = "l.address:resdntl"	VALUE = 0>

	<MvIF EXPR = "{ g.Basket:cust_id AND g.Customer_Session_Verified AND JSON_Input_Exists( 'Address_ID' ) }">
		<MvIF EXPR = "{ NOT JSON_Input_Integer( 'o', 'Address_ID',	l.address_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
		
		<MvIF EXPR = "{ l.address_id }">
			<MvIF EXPR = "{ NOT [ g.Feature_CUS_DB ].CustomerAddress_Load( g.Basket:cust_id, l.address_id, l.address ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'invalid_customer_address', 'Customer address does not exist' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Input_Text( 	'o', 'FirstName',		l.address:fname ) 	OR
					NOT JSON_Input_Text( 	'o', 'LastName',		l.address:lname ) 	OR
					NOT JSON_Input_Text( 	'o', 'Email',			l.address:email ) 	OR
					NOT JSON_Input_Text( 	'o', 'Phone',			l.address:phone ) 	OR
					NOT JSON_Input_Text( 	'o', 'Fax',				l.address:fax ) 	OR
					NOT JSON_Input_Text( 	'o', 'Company',			l.address:comp ) 	OR
					NOT JSON_Input_Text( 	'o', 'Address1',		l.address:addr1 )	OR
					NOT JSON_Input_Text( 	'o', 'Address2',		l.address:addr2 ) 	OR
					NOT JSON_Input_Text( 	'o', 'City',			l.address:city ) 	OR
					NOT JSON_Input_Text( 	'o', 'State',			l.address:state ) 	OR
					NOT JSON_Input_Text( 	'o', 'Zip',				l.address:zip ) 	OR
					NOT JSON_Input_Text( 	'o', 'Country',			l.address:cntry )	OR
					NOT JSON_Input_Boolean(	'o', 'Residential',		l.address:resdntl )	OR
					NOT JSON_Input_Boolean(	'o', 'Update_Customer',	l.update_customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Validate_StandardFields( l.std_fields, l.address ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "g.Basket:addr_val_b"		VALUE = 1>
	<MvASSIGN NAME = "g.Basket:bill_fname"		VALUE = "{ l.address:fname }">
	<MvASSIGN NAME = "g.Basket:bill_lname"		VALUE = "{ l.address:lname }">
	<MvASSIGN NAME = "g.Basket:bill_email"		VALUE = "{ l.address:email }">
	<MvASSIGN NAME = "g.Basket:bill_comp"		VALUE = "{ l.address:comp }">
	<MvASSIGN NAME = "g.Basket:bill_phone"		VALUE = "{ l.address:phone }">
	<MvASSIGN NAME = "g.Basket:bill_fax"		VALUE = "{ l.address:fax }">
	<MvASSIGN NAME = "g.Basket:bill_addr"		VALUE = "">
	<MvASSIGN NAME = "g.Basket:bill_addr1"		VALUE = "{ l.address:addr1 }">
	<MvASSIGN NAME = "g.Basket:bill_addr2"		VALUE = "{ l.address:addr2 }">
	<MvASSIGN NAME = "g.Basket:bill_city"		VALUE = "{ l.address:city }">
	<MvASSIGN NAME = "g.Basket:bill_state"		VALUE = "{ l.address:state }">
	<MvASSIGN NAME = "g.Basket:bill_zip"		VALUE = "{ l.address:zip }">
	<MvASSIGN NAME = "g.Basket:bill_cntry"		VALUE = "{ l.address:cntry }">

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Update_Customer_Information( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.update_customer AND g.Basket:cust_id AND g.Customer_Session_Verified }">
		<MvIF EXPR = "{ NOT JSON_Runtime_UpdateAddress_Customer( 'billing', l.address, l.std_fields ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'TAX' )		OR
					NOT [ g.Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'SHIPPING' )	OR
					NOT [ g.Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'HANDLING' )	OR
					NOT [ g.Library_DB ].Basket_Reset_Tax( g.Basket:basket_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Basket:ship_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( g.Basket:ship_id, l.shipping_module )			OR
						NOT [ g.Module_Library_DB ].StoreModule_Load( l.shipping_module:id, 'shipping', l.null )	OR
						NOT l.shipping_module:active }">
			<MvASSIGN NAME = "g.Basket:ship_id"		VALUE = 0>
			<MvASSIGN NAME = "g.Basket:ship_data"	VALUE = "">
		<MvELSEIF EXPR = "{ NOT [ g.Feature_SHP_UT ].ShippingMethod_ApplyToBasket_LowLevel( l.shipping_module, g.Basket:ship_data ) }">
			<MvASSIGN NAME = "g.Basket:ship_id"		VALUE = 0>
			<MvASSIGN NAME = "g.Basket:ship_data"	VALUE = "">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_SHP_UT ].HandlingCharge_CalculateAndApplyToBasket() }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_PGR_UT ].Discount_Shipping( g.Basket, l.shipping_module, g.Basket:ship_data ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Basket_Update_Shipping( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ g.Store:tax_mod:module ].TaxModule_Calculate_Basket( g.Store:tax_mod ) }">

	<MvFUNCTIONRETURN VALUE = "{ JSON_Runtime_OutputCheckoutResponse() }">
</MvFUNCTION>

<MvCOMMENT>
|
| JSON_Runtime_UpdateShipping and JSON_Runtime_UpdateBilling helper functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Runtime_UpdateAddress_Customer" PARAMETERS = "address_type, address var, std_fields var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.address_type EQ 'shipping' }">
		<MvASSIGN NAME = "l.ship_id"				VALUE = "{ ternary( l.address:id, l.address:id, g.Customer:ship_id ) }">
		<MvASSIGN NAME = "l.bill_id"				VALUE = "{ g.Customer:bill_id }">
	<MvELSE>
		<MvASSIGN NAME = "l.ship_id"				VALUE = "{ g.Customer:ship_id }">
		<MvASSIGN NAME = "l.bill_id"				VALUE = "{ ternary( l.address:id, l.address:id, g.Customer:bill_id ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.address:id }">
		<MvASSIGN NAME = "l.address:cust_id"		VALUE = "{ g.Basket:cust_id }">

		<MvIF EXPR = "{ [ g.Feature_CUS_DB ].CustomerAddress_Load_AddressFields( g.Basket:cust_id, l.address, l.customeraddress ) }">
			<MvASSIGN NAME = "l.address:id" 		VALUE = "{ l.customeraddress:id }">
			<MvASSIGN NAME = "l.address:descrip"	VALUE = "{ l.customeraddress:descrip }">
			<MvASSIGN NAME = "l.address:resdntl"	VALUE = "{ ternary( l.address_type EQ 'billing', 0, l.address:resdntl ) }">

			<MvIF EXPR = "{ l.address_type EQ 'shipping' AND l.customeraddress:resdntl NE l.address:resdntl }">
				<MvIF EXPR = "{ NOT [ g.Feature_CUS_DB ].CustomerAddress_Update( l.address ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.address:descrip"	VALUE = "{ l.address:addr_1 }">

			<MvIF EXPR = "{ NOT [ g.Feature_CUS_DB ].CustomerAddress_Insert( l.address ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.ship_id NE l.bill_id }">
			<MvIF EXPR = "{ NOT [ g.Feature_CUS_DB ].CustomerAddress_Update( l.address ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ ( l.address_type EQ 'shipping' AND l.std_fields:primaddr EQ 'shipping' ) OR
							( l.address_type EQ 'billing' AND l.std_fields:primaddr EQ 'billing' ) }">
				<MvIF EXPR = "{ NOT [ g.Feature_CUS_DB ].CustomerAddress_Update( l.address ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ NOT [ g.Feature_CUS_DB ].CustomerAddress_Load_AddressFields( g.Basket:cust_id, l.address, l.customeraddress ) }">
				<MvIF EXPR = "{ NOT [ g.Feature_CUS_DB ].CustomerAddress_Insert( l.address ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.address_type EQ 'shipping' AND ( ( g.Customer:ship_id EQ l.address:id ) OR ( g.Customer:ship_id EQ 0 ) ) }">
		<MvIF EXPR = "{ l.std_fields:mode_fname NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_fname" 	VALUE = "{ l.address:fname }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_lname NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_lname" 	VALUE = "{ l.address:lname }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_email NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_email" 	VALUE = "{ l.address:email }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_comp NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_comp" 	VALUE = "{ l.address:comp }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_phone NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_phone" 	VALUE = "{ l.address:phone }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_fax NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_fax" 		VALUE = "{ l.address:fax }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_addr NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_addr1" 	VALUE = "{ l.address:addr1 }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_addr2 NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_addr2" 	VALUE = "{ l.address:addr2 }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_city NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_city" 	VALUE = "{ l.address:city }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_state NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_state" 	VALUE = "{ l.address:state }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_zip NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_zip" 		VALUE = "{ l.address:zip }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_cntry NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:ship_cntry" 	VALUE = "{ l.address:cntry }"> 	</MvIF>

		<MvASSIGN NAME = "g.Customer:ship_descrip"		VALUE = "{ l.address:descrip }">
		<MvASSIGN NAME = "g.Customer:ship_res"			VALUE = "{ l.address:resdntl }">
		<MvASSIGN NAME = "g.Customer:ship_addr"			VALUE = "">

		<MvIF EXPR = "{ l.address:id }">
			<MvASSIGN NAME = "g.Customer:ship_id"		VALUE = "{ l.address:id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_CUS_DB ].Customer_Update( g.Customer ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.address_type EQ 'billing' AND ( ( g.Customer:bill_id EQ l.address:id ) OR ( g.Customer:bill_id EQ 0 ) ) }">
		<MvIF EXPR = "{ l.std_fields:mode_fname NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_fname" 	VALUE = "{ l.address:fname }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_lname NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_lname" 	VALUE = "{ l.address:lname }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_email NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_email" 	VALUE = "{ l.address:email }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_comp NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_comp" 	VALUE = "{ l.address:comp }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_phone NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_phone" 	VALUE = "{ l.address:phone }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_fax NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_fax" 		VALUE = "{ l.address:fax }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_addr NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_addr1" 	VALUE = "{ l.address:addr1 }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_addr2 NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_addr2" 	VALUE = "{ l.address:addr2 }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_city NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_city" 	VALUE = "{ l.address:city }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_state NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_state" 	VALUE = "{ l.address:state }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_zip NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_zip" 		VALUE = "{ l.address:zip }"> 	</MvIF>
		<MvIF EXPR = "{ l.std_fields:mode_cntry NE 'H' }"> 	<MvASSIGN NAME = "g.Customer:bill_cntry" 	VALUE = "{ l.address:cntry }"> 	</MvIF>

		<MvASSIGN NAME = "g.Customer:bill_descrip"		VALUE = "{ l.address:descrip }">
		<MvASSIGN NAME = "g.Customer:bill_addr"			VALUE = "">

		<MvIF EXPR = "{ l.address:id }">
			<MvASSIGN NAME = "g.Customer:bill_id"		VALUE = "{ l.address:id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_CUS_DB ].Customer_Update( g.Customer ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_OutputCheckoutResponse" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "g.Basket:total" 							VALUE = "{ [ g.Library_DB ].Basket_Total( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:subtotal" 						VALUE = "{ [ g.Library_DB ].Basket_SubTotal( g.Basket:basket_id ) }">
	<MvASSIGN NAME = "g.Basket:formatted_total" 				VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:total ) }">
	<MvASSIGN NAME = "g.Basket:formatted_subtotal" 				VALUE = "{ [ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, g.Basket:subtotal ) }">
	<MvASSIGN NAME = "l.basketcharge_count"						VALUE = "{ [ g.Library_DB ].BasketChargeList_Load_Basket( g.Basket:basket_id, l.basketcharges ) }">
	<MvASSIGN NAME = "l.ready_for_checkout_shipping"			VALUE = 1>
	<MvASSIGN NAME = "l.ready_for_checkout_tax"					VALUE = 1>

	<MvIF EXPR = "{ ( ( g.Basket:total GT 0 ) AND g.Store:req_ship ) OR
					( ( g.Basket:total EQ 0 ) AND g.Store:req_frship ) }">
		<MvIF EXPR = "{ NOT miva_array_search( l.basketcharges, 1, l.element, 'l.element:type EQ \'SHIPPING\'' ) }">
			<MvASSIGN NAME = "l.ready_for_checkout_shipping"	VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ g.Store:req_tax }">
		<MvIF EXPR = "{ NOT miva_array_search( l.basketcharges, 1, l.element, 'l.element:type EQ \'TAX\'' ) }">
			<MvASSIGN NAME = "l.ready_for_checkout_tax"			VALUE = 0>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total":				<MvEVAL EXPR = "{ g.Basket:total ROUND 2 }">,
		"subtotal":				<MvEVAL EXPR = "{ g.Basket:subtotal ROUND 2 }">,
		"formatted_total":		"<MvEVAL EXPR = "{ JSON_Encode( g.Basket:formatted_total ) }">",
		"formatted_subtotal":	"<MvEVAL EXPR = "{ JSON_Encode( g.Basket:formatted_subtotal ) }">",
		"charges":
		[
			<MvASSIGN NAME = "l.charge_count" VALUE = 0>

			<MvFOREACH ITERATOR = "l.basketcharge" ARRAY = "l.basketcharges" COUNT = "{ l.basketcharge_count }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.charge_count ) }">				
					<MvEVAL EXPR = "{ JSON_Runtime_BasketCharge( l.basketcharge ) }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
			</MvFOREACH>
		],

		<MvIF EXPR = "{ l.ready_for_checkout_shipping AND l.ready_for_checkout_tax }">
			"ready_for_checkout": true
		<MvELSE>
			"ready_for_checkout": false,

			<MvIF EXPR = "{ NOT l.ready_for_checkout_shipping AND NOT l.ready_for_checkout_tax }">
				"ready_for_checkout_reason": "Missing shipping and tax"
			<MvELSEIF EXPR = "{ NOT l.ready_for_checkout_shipping }">
				"ready_for_checkout_reason": "Missing shipping"
			<MvELSE>
				"ready_for_checkout_reason": "Missing tax"
			</MvIF>
		</MvIF>
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvCOMMENT>
|
| JSON_Runtime_CategoryList_Load_Query
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Runtime_CategoryList_Load_Query" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Enabled() }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off store-settings' ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Runtime_CategoryList_Load_Query_LowLevel() }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Connect( l.conn_id ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off connection-failed' ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Runtime_CategoryList_Load_Query_LowLevel() }">
	</MvIF>

	<MvASSIGN NAME = "l.cache" 				VALUE = "">
	<MvASSIGN NAME = "l.cache:keys" 		VALUE = "">
	<MvASSIGN NAME = "l.cache:func_name" 	VALUE = "json_runtime_categorylist_load_query">
	<MvASSIGN NAME = "l.cache_key"			VALUE = "">

	<MvEVAL EXPR = "{ JSON_Runtime_Cache_ParseFilters( l.cache ) }">

	<MvASSIGN NAME = "l.null" 				VALUE = "{ JSON_Input_Integer(	'o', 'Parent_ID', l.cache:keys:parent_id ) }">

	<MvIF EXPR = "{ JSON_Runtime_Cache_Output( l.conn_id, l.cache, l.cache_key ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCAPTURE VARIABLE = "l.response">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_Runtime_CategoryList_Load_Query_LowLevel() }">
	</MvCAPTURE>

	<MvCOMMENT>
	|
	| Store response in database. Return response. 
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ l.response }">

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'miss ' $ gettoken( l.cache_key, ':', 2 ) ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ JSON_Runtime_Cache_Redis_Set_Response( l.conn_id, l.cache_key, l.response ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CategoryList_Load_Query_LowLevel" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = 0>
	<MvASSIGN NAME = "l.count"					VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"		VALUE = "">
	<MvASSIGN NAME = "l.search_query" 			VALUE = "">
	<MvASSIGN NAME = "l.catlimit_module_count"	VALUE = "{ [ g.Library_DB ].StoreModuleList_Load_Features_Cached( 'catlimit', l.catlimit_modules ) }">

	<MvEVAL EXPR = "{ JSON_AvailableFilter_INTEGER(	l.available_filters, 'cat.id',		'id' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'cat.code',	'code' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'cat.name',	'name' ) }">

	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT JSON_Input_Text(	'o', 'Sort',	l.sort )	OR
					NOT JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, 'cat.id, cat.parent_id, cat.code, cat.name, cat.page_title, cat.disp_order' ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Categories', 'cat' ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_WHERE( l.search_query, 'cat.active = 1', '' ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_WHERE( l.search_query, '( ' $ [ g.Library_DB ].Runtime_Category_AvailabilityGroup_Where( l.agrp_fields ) $ ' )', l.agrp_fields ) }">

	<MvIF EXPR = "{ JSON_Input_Exists( 'Parent_ID' ) }">
		<MvIF EXPR = "{ NOT JSON_Input_Integer(	'O', 'Parent_ID', l.parent_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_WHERE( l.search_query, 'cat.parent_id = ?', [ g.Library_DB ].SQL_Query_Field( l.parent_id ) ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Filter_Callback_With_FilteredCustomFields( l.search_query, l.filter, l.available_filters, g.Module_JSON, 'JSON_Runtime_CategoryList_Load_Query_Filter', '', 'JSON_Category_CustomFields_Query_Filter', 'JSON_Runtime_Category_CustomField_Filter', l.data ) }">

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.catlimit_modules" COUNT = "{ l.catlimit_module_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_CategoryLimitation_Query( l.module, l.search_query, 'cat', 'id' ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.data:children:depth GT 0 AND ( l.count NE 0 OR l.offset NE 0 ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00016', 'Count and/or Offset cannot be used when specifying a child category depth' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.orderby_columns" VALUE = "{ JSON_Runtime_CategoryList_OrderByColumns( l.data:children:depth, l.orderby_default_sort ) }">

	<MvEVAL EXPR = "{ JSON_Query_Callback_With_FilteredCustomFields( l.search_query, l.filter, g.Module_JSON, 'JSON_Runtime_Category_CustomFields_Query', 'JSON_Runtime_Category_CustomField_Filter' ) }">
	<MvEVAL EXPR = "{ JSON_OrderBy_Callback_With_FilteredCustomFields( l.search_query, l.sort, l.orderby_columns, l.orderby_default_sort, g.Module_JSON, 'JSON_Category_CustomFields_Query_OrderBy', 'JSON_Runtime_Category_CustomField_Filter' ) }">

	<MvIF EXPR = "{ l.data:children:depth LE 0 }">
		<MvREFERENCE NAME = "l.count_query"				VARIABLE = "l.search_query">
	<MvELSE>
		<MvASSIGN NAME = "l.count_query"				VALUE = "{ l.search_query }">
		<MvASSIGN NAME = "l.previous_correlation"		VALUE = "cat">

		<MvFOR INDEX = "l.pos" COUNT = "{ l.data:children:depth }">
			<MvASSIGN NAME = "l.correlation"			VALUE = "{ 'cat_' $ l.pos }">
			<MvASSIGN NAME = "l.join_fields"			VALUE = "">
			<MvASSIGN NAME = "l.join_on"				VALUE = "{ l.correlation $ '.parent_id = ' $ l.previous_correlation $ '.id AND ' $ l.correlation $ '.active = 1  AND '	$
																   '( ' $ [ g.Library_DB ].Runtime_Category_AvailabilityGroup_Where_Correlation( l.correlation, l.join_fields ) $ ' )' }">

			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, l.correlation $ '.id AS ' 			$ l.correlation $ '_id' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, l.correlation $ '.parent_id AS ' 	$ l.correlation $ '_parent_id' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, l.correlation $ '.code AS ' 		$ l.correlation $ '_code' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, l.correlation $ '.name AS ' 		$ l.correlation $ '_name' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, l.correlation $ '.disp_order AS ' 	$ l.correlation $ '_disp_order' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'cat', g.Store_Table_Prefix $ 'Categories', l.correlation, l.join_on, l.join_fields ) }">

			<MvFOREACH ITERATOR = "l.module" ARRAY = "l.catlimit_modules" COUNT = "{ l.catlimit_module_count }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_CategoryLimitation_Query( l.module, l.search_query, l.correlation, 'id' ) }">
			</MvFOREACH>

			<MvASSIGN NAME = "l.previous_correlation"	VALUE = "{ l.correlation }">
		</MvFOR>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].SQL_Query_Count( l.count_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Categories', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00015', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.category_output_count"	VALUE = 0>
	<MvASSIGN NAME = "l.fragment_rendering"		VALUE = "{ l.data:filters:fragments }">

	<MvEVAL EXPR = "{ JSON_Runtime_Category_CustomFields_Initialize( l.filter, l.customfield_state ) }">
	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Categories.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.category_output_count LT l.count ) ) }">
			<MvIF EXPR = "{ Categories.d.id EQ l.category:id }">
				<MvSKIP NAME = "Merchant" VIEW = "Categories" ROWS = 1>
				<MvWHILECONTINUE>
			</MvIF>

			<MvEVAL EXPR = "{ JSON_Runtime_Category_Read( l.category ) }">

			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.category_output_count ) }">

			<MvCOMMENT>
			|
			| If no fragments were requested, the record can be immediately output. Otherwise, the record is captured, output, decoded,
			| and then used to render the requested fragments, allowing the fragments to operate on the exact category record that is output.
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT l.fragment_rendering }">
				<MvEVAL EXPR = "{ JSON_Runtime_Category( l.category ) }">
				<MvEVAL EXPR = "{ JSON_Category_CustomFields_With_Query( l.search_query, l.customfield_state, Categories.d.id, 'Categories' ) }">

				<MvIF EXPR = "{ l.data:children:depth LE 0 OR NOT JSON_Runtime_Category_Read_IsValidDepth( 1 ) }">
					<MvSKIP NAME = "Merchant" VIEW = "Categories" ROWS = 1>
				<MvELSE>
					<MvEVAL EXPR = "{ JSON_Runtime_CategoryList_Load_Query_ReadChildren( l.category, 1, l.customfield_state ) }">
				</MvIF>
			<MvELSE>
				<MvCAPTURE VARIABLE = "l.json_category">
					<MvEVAL EXPR = "{ JSON_Runtime_Category( l.category ) }">
					<MvEVAL EXPR = "{ JSON_Category_CustomFields_With_Query( l.search_query, l.customfield_state, Categories.d.id, 'Categories' ) }">

					<MvIF EXPR = "{ l.data:children:depth LE 0 OR NOT JSON_Runtime_Category_Read_IsValidDepth( 1 ) }">
						<MvSKIP NAME = "Merchant" VIEW = "Categories" ROWS = 1>
					<MvELSE>
						<MvEVAL EXPR = "{ JSON_Runtime_CategoryList_Load_Query_ReadChildren( l.category, 1, l.customfield_state ) }">
					</MvIF>
				</MvCAPTURE>

				<MvEVAL EXPR = "{ l.json_category }">
				<MvEVAL EXPR = "{ JSON_Runtime_Category_Fragments( l.json_category, l.data ) }">
			</MvIF>

			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Categories">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CategoryList_Load_Query_ReadChildren" PARAMETERS = "parent_category var, depth, customfield_state var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.last_id"		VALUE = 0>
	<MvASSIGN NAME = "l.output_count"	VALUE = 0>

	,"children":
	[
	<MvWHILE EXPR = "{ NOT Categories.d.EOF }">
		<MvEVAL EXPR = "{ JSON_Runtime_Category_Read_Depth( l.child_category, l.depth ) }">

		<MvIF EXPR = "{ l.child_category:parent_id NE l.parent_category:id }">
			<MvWHILESTOP>
		</MvIF>

		<MvIF EXPR = "{ l.child_category:id EQ l.last_id }">
			<MvIF EXPR = "{ NOT Categories.d.EOF }">
				<MvSKIP NAME = "Merchant" VIEW = "Categories" ROWS = 1>
			</MvIF>

			<MvWHILECONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.last_id" VALUE = "{ l.child_category:id }">

		<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.output_count ) }">
		<MvEVAL EXPR = "{ JSON_Runtime_Category( l.child_category ) }">
		<MvEVAL EXPR = "{ JSON_Category_CustomFields( l.customfield_state, l.child_category:id ) }">

		<MvIF EXPR = "{ JSON_Runtime_Category_Read_IsValidDepth( l.depth + 1 ) }">
			<MvEVAL EXPR = "{ JSON_Runtime_CategoryList_Load_Query_ReadChildren( l.child_category, ( l.depth + 1 ), l.customfield_state ) }">
		</MvIF>

		<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
	</MvWHILE>
	]
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Category_Fragments" PARAMETERS = "json_category var, data var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvCOMMENT>
	|
	| Fragments operate on the category record being output so we take the raw data, turn it into an object, and decode it
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT miva_json_decode( '{' $ l.json_category $ '}', l.category ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.page_settings"				VALUE = "">
	<MvASSIGN NAME = "l.page_settings:page"			VALUE = "">
	<MvREFERENCE NAME = "l.page_settings:category"	VARIABLE = "l.category">

	<MvCOMMENT>
	|
	| Build template safe custom fields
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL l.category:CustomField_Values }">
		<MvASSIGN NAME = "l.copied_customfield_values" VALUE = "{ l.category:CustomField_Values }">
		<MvEVAL EXPR = "{ miva_member_delete( l.category, 'CustomField_Values' ) }">

		<MvFOREACH ITERATOR = "l.module_code" ARRAY = "l.module_codes" COUNT = "{ miva_struct_members( l.copied_customfield_values, l.module_codes ) }">
			<MvASSIGN NAME = "l.template_safe_module_code" VALUE = "{ [ g.Module_Feature_TUI_UT ].StripSpecialCharacters_TemplateCode( l.module_code ) }">

			<MvREFERENCEARRAY NAME = "l.module_fields" VARIABLE = "l.copied_customfield_values">
				<MvMEMBER NAME = "{ l.module_code }">
			</MvREFERENCEARRAY>

			<MvFOREACH ITERATOR = "l.field_code" ARRAY = "l.field_codes" COUNT = "{ miva_struct_members( l.module_fields, l.field_codes ) }">
				<MvASSIGN NAME = "l.template_safe_field_code" VALUE = "{ [ g.Module_Feature_TUI_UT ].StripSpecialCharacters_TemplateCode( l.field_code ) }">

				<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.module_fields">
					<MvMEMBER NAME = "{ l.field_code }">
				</MvREFERENCEARRAY>

				<MvASSIGNARRAY NAME = "l.page_settings:category:customfield_values" VALUE = "{ l.value }">
					<MvMEMBER NAME = "{ l.template_safe_module_code }">
					<MvMEMBER NAME = "{ l.template_safe_field_code }">
				</MvASSIGNARRAY>
			</MvFOREACH>
		</MvFOREACH>
	</MvIF>

	<MvCOMMENT>
	|
	| Render the fragments
	|
	</MvCOMMENT>

	,"fragments":
	{
		<MvFOREACH ITERATOR = "l.fragment_code" ARRAY = "l.data:fragment_codes" INDEX = "l.pos" COUNT = "{ l.data:fragment_code_count }">
			<MvIF EXPR = "{ l.pos GT 1 }">
				,
			</MvIF>

			<MvASSIGN NAME = "l.output"	VALUE = "">
			<MvASSIGN NAME = "l.share"	VALUE = "">

			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code_Cached( l.fragment_code, l.fragment ) AND l.fragment:fragment AND l.fragment:public }">
				<MvCAPTURE VARIABLE = "l.output"><MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Fragment_Render_LowLevel( l.page_settings, l.fragment, l.share ) }"></MvCAPTURE>	
			</MvIF>			

			"<MvEVAL EXPR = "{ encodejavascriptstring( l.fragment_code ) }">": "<MvEVAL EXPR = "{ encodejavascriptstring( l.output ) }">"
		</MvFOREACH>
	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CategoryList_OrderByColumns" PARAMETERS = "depth, default var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.default" 	VALUE = "cat.disp_order">
	<MvASSIGN NAME = "l.field_list"	VALUE = "id:cat.id,code:cat.code,name:cat.name,page_title:cat.page_title">

	<MvIF EXPR = "{ l.depth LE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.field_list }">
	</MvIF>

	<MvFOR INDEX = "l.pos" COUNT = "{ l.depth }">
		<MvASSIGN NAME = "l.default" VALUE = "{ l.default $ ';cat_' $ l.pos $ '.disp_order'  }">
	</MvFOR>

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.fields" COUNT = "{ miva_splitstring( l.field_list, ',', l.fields, '' ) }">
		<MvASSIGN NAME = "l.field_name" VALUE = "{ gettoken( l.field, ':', 1 ) }">

		<MvFOR INDEX = "l.pos" COUNT = "{ l.depth }">
			<MvASSIGN NAME = "l.field" VALUE = "{ l.field $ ';cat_' $ l.pos $ '.' $ l.field_name  }">
		</MvFOR>

		<MvIF EXPR = "{ len_var( l.default_field ) AND l.field_name EQ l.default_field }">
			<MvASSIGN NAME = "l.default" 	VALUE = "{ gettoken( l.field, ':', 2 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ miva_joinstring( l.fields, ',', '' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Category" PARAMETERS = "category var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.url_flags"				VALUE = "">
	<MvASSIGN NAME = "l.url_flags:nosession"	VALUE = 1>

	"id":			<MvEVAL EXPR = "{ int( l.category:id ) }">,
	"parent_id":	<MvEVAL EXPR = "{ int( l.category:parent_id ) }">,
	"code": 		"<MvEVAL EXPR = "{ JSON_Encode( l.category:code ) }">",
	"name": 		"<MvEVAL EXPR = "{ JSON_Encode( l.category:name ) }">",
	"page_title": 	"<MvEVAL EXPR = "{ JSON_Encode( l.category:page_title ) }">",
	"url":			"<MvEVAL EXPR = "{ JSON_Encode( [ g.Feature_URI_UT ].Store_Category_URL( l.category, l.url_flags ) ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Category_Read" PARAMETERS = "category var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.category:id" 			VALUE = "{ Categories.d.id }">
	<MvASSIGN NAME = "l.category:parent_id" 	VALUE = "{ Categories.d.parent_id }">
	<MvASSIGN NAME = "l.category:code" 			VALUE = "{ Categories.d.code }">
	<MvASSIGN NAME = "l.category:name" 			VALUE = "{ Categories.d.name }">
	<MvASSIGN NAME = "l.category:page_title" 	VALUE = "{ Categories.d.page_title }">
	<MvASSIGN NAME = "l.category:disp_order" 	VALUE = "{ Categories.d.disp_order }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Category_Read_Depth" PARAMETERS = "category var, depth" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.category:id" 			VALUE = "{ miva_variable_value( 'Categories.d.cat_' $ l.depth $ '_id' ) }">
	<MvASSIGN NAME = "l.category:parent_id" 	VALUE = "{ miva_variable_value( 'Categories.d.cat_' $ l.depth $ '_parent_id' ) }">
	<MvASSIGN NAME = "l.category:code" 			VALUE = "{ miva_variable_value( 'Categories.d.cat_' $ l.depth $ '_code' ) }">
	<MvASSIGN NAME = "l.category:name" 			VALUE = "{ miva_variable_value( 'Categories.d.cat_' $ l.depth $ '_name' ) }">
	<MvASSIGN NAME = "l.category:page_title" 	VALUE = "{ miva_variable_value( 'Categories.d.cat_' $ l.depth $ '_page_title' ) }">
	<MvASSIGN NAME = "l.category:disp_order" 	VALUE = "{ miva_variable_value( 'Categories.d.cat_' $ l.depth $ '_disp_order' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Category_Read_IsValidDepth" PARAMETERS = "depth" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ miva_variable_value( 'Categories.d.cat_' $ l.depth $ '_id' ) GT 0 }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CategoryList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data:ondemandcolumns" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.filter_name EQ 'children' }">
		<MvASSIGN NAME = "l.data:children:depth"		VALUE = "{ int( l.filter_value:depth ) }">

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.filter_name EQ 'fragments' }">
		<MvASSIGN NAME = "l.data:filters:fragments"		VALUE = 0>
		<MvASSIGN NAME = "l.data:fragment_codes"		VALUE = "">
		<MvASSIGN NAME = "l.data:fragment_code_count"	VALUE = 0>

		<MvFOREACH ITERATOR = "l.value" ARRAY = "l.filter_value">
			<MvASSIGN NAME = "l.value" VALUE = "{ trim( l.value ) }">

			<MvIF EXPR = "{ NOT ISNULL l.value }">
				<MvIF EXPR = "{ NOT miva_array_search( l.data:fragment_codes, 1, l.element, 'strcasecmp( l.element, l.value ) EQ 0' ) }">
					<MvASSIGN NAME = "l.data:fragment_code_count" VALUE = "{ miva_array_insert_var( l.data:fragment_codes, l.value, -1 ) }">
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.data:filters:fragments"		VALUE = "{ l.data:fragment_code_count GT 0 }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CategoryCustomFieldList_Load" PARAMETERS = "fields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ JSON_Category_CustomFieldsList_Load_Cached( l.fields ) }">

	<MvFUNCTIONRETURN VALUE = "{ miva_array_filter_ref( l.fields, 1, l.field, 'l.field:public EQ 1', l.fields ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Category_CustomFields_Initialize" PARAMETERS = "filter var, customfield_state var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.field_count" VALUE = "{ JSON_Runtime_CategoryCustomFieldList_Load( l.fields ) }">

	<MvFUNCTIONRETURN VALUE = "{ JSON_Category_CustomFieldList_Initialize( l.filter, l.fields, l.field_count, l.customfield_state ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Category_CustomField_Filter" PARAMETERS = "query var, module_code, field_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.module_code EQ '*' OR l.field_code EQ '*' }">
		<MvCOMMENT>
		|
		| See JSON_Runtime_Category_CustomFields_Query
		|
		</MvCOMMENT>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT JSON_Runtime_CategoryCustomFieldList_Load( l.customfields ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ miva_array_search( l.customfields, 1, l.customfield, 'strcasecmp( l.customfield:module:code, l.module_code ) EQ 0 AND strcasecmp( l.customfield:code, l.field_code ) EQ 0' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Category_CustomFields_Query" PARAMETERS = "query var, module var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.module EQ '*' }">
		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Library_DB ].StoreModuleList_Load_Features_Cached( 'fields_cat', l.modules ) }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Library_DB ].Module_Load_Features_Cached( l.module ) }">

			<MvIF EXPR = "{ NOT JSON_Runtime_Category_CustomFields_Query( l.query, l.module, '*' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ ( l.module:api_ver LT 9.07 ) OR ( NOT l.module:feature_hash:fields_cat ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.code EQ '*' }">
		<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.customfields" COUNT = "{ JSON_Runtime_CategoryCustomFieldList_Load( l.customfields ) }">
			<MvIF EXPR = "{ strcasecmp( l.module:code, l.customfield:module:code ) EQ 0 }">
				<MvIF EXPR = "{ NOT JSON_Runtime_Category_CustomFields_Query( l.query, l.module, l.customfield:code ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_CategoryCustomFieldList_Load( l.customfields ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT miva_array_search( l.customfields, 1, l.customfield, 'strcasecmp( l.customfield:module:code, l.module:code ) EQ 0 AND strcasecmp( l.customfield:code, l.code ) EQ 0' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Category_CustomFields_Query( l.query, l.module, l.code ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| JSON_Runtime_ProductList_Load_Query / JSON_Runtime_CategoryProductList_Load_Query / JSON_Runtime_MerchandisingProductList_Load_Query / JSON_Runtime_RelatedProductList_Load_Query
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Runtime_Category_Load" PARAMETERS = "category var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ JSON_Input_Retrieve_Integer( 'Category_ID', l.category_id ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Category_Load_ID( l.category_id, l.category ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-JSN-RTM-00020', 'Category not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ JSON_Input_Retrieve( 'Category_Code', l.category_code ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Category_Load_Code( l.category_code, l.category ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-JSN-RTM-00021', 'Category not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-JSN-RTM-00017', 'One of Category_ID or Category_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_Load" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ JSON_Input_Retrieve_Integer( 'Product_ID', l.product_id ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_ID( l.product_id, l.product ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-JSN-RTM-00022', 'Product not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ JSON_Input_Retrieve( 'Product_Code', l.product_code ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_Code( l.product_code, l.product ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-JSN-RTM-00023', 'Product not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-JSN-RTM-00018', 'One of Product_ID or Product_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_Load_Element" PARAMETERS = "input_element var, product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ JSON_Input_Element_Retrieve( l.input_element, 'product_id', l.product_id ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_ID( l.product_id, l.product ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Input_Element_Error( l.input_element, 'product_id', g.Error_Code $ ': ' $ g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ JSON_Input_Element_Error( l.input_element, 'product_id', 'Product not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ JSON_Input_Element_Retrieve( l.input_element, 'product_code', l.product_code ) }">
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_Product_Load_Code( l.product_code, l.product ) }">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Input_Element_Error( l.input_element, 'product_code', g.Error_Code $ ': ' $ g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ JSON_Input_Element_Error( l.input_element, 'product_code', 'Product not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ JSON_Input_Element_Error( l.input_element, '', 'One of product_id or product_code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ProductList_Build_Query" PARAMETERS = "search_query var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query( l.search_query ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, 'prod.disp_order AS output_disp_order' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CategoryProductList_Build_Query" PARAMETERS = "search_query var, category var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query( l.search_query ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Category( l.search_query, l.category ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, 'cxp.disp_order AS output_disp_order' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_RelatedProductList_Build_Query" PARAMETERS = "search_query var, product var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query( l.search_query ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_RelatedProducts( l.search_query, l.product ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, 'rlp.disp_order AS output_disp_order' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ProductList_Load_Query" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Enabled() }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off store-settings' ) }">
		<MvEVAL EXPR = "{ JSON_Runtime_ProductList_Build_Query( l.search_query ) }">

		<MvFUNCTIONRETURN VALUE = "{ JSON_BaseRuntimeProductList_Load_Query( l.search_query ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Connect( l.conn_id ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off connection-failed' ) }">
		<MvEVAL EXPR = "{ JSON_Runtime_ProductList_Build_Query( l.search_query ) }">

		<MvFUNCTIONRETURN VALUE = "{ JSON_BaseRuntimeProductList_Load_Query( l.search_query ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cache" 				VALUE = "">
	<MvASSIGN NAME = "l.cache:keys" 		VALUE = "">
	<MvASSIGN NAME = "l.cache:func_name" 	VALUE = "json_runtime_productlist_load_query">
	<MvASSIGN NAME = "l.cache_key" 			VALUE = "">

	<MvEVAL EXPR = "{ JSON_Runtime_Cache_ParseFilters( l.cache ) }">

	<MvIF EXPR = "{ JSON_Runtime_Cache_Output( l.conn_id, l.cache, l.cache_key ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCAPTURE VARIABLE = "l.response">
		<MvEVAL EXPR = "{ JSON_Runtime_ProductList_Build_Query( l.search_query ) }">

		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_BaseRuntimeProductList_Load_Query( l.search_query ) }">
	</MvCAPTURE>

	<MvCOMMENT>
	|
	| Store response in database. Return response. 
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ l.response }">

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'miss ' $ gettoken( l.cache_key, ':', 2 ) ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ JSON_Runtime_Cache_Redis_Set_Response( l.conn_id, l.cache_key, l.response ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_CategoryProductList_Load_Query" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Enabled() }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off store-settings' ) }">

		<MvIF EXPR = "{ NOT JSON_Runtime_Category_Load( l.category ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ JSON_Runtime_CategoryProductList_Build_Query( l.search_query, l.category ) }">

		<MvFUNCTIONRETURN VALUE = "{ JSON_BaseRuntimeProductList_Load_Query( l.search_query ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Connect( l.conn_id ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off connection-failed' ) }">

		<MvIF EXPR = "{ NOT JSON_Runtime_Category_Load( l.category ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ JSON_Runtime_CategoryProductList_Build_Query( l.search_query, l.category ) }">

		<MvFUNCTIONRETURN VALUE = "{ JSON_BaseRuntimeProductList_Load_Query( l.search_query ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cache" 				VALUE = "">
	<MvASSIGN NAME = "l.cache:keys" 		VALUE = "">
	<MvASSIGN NAME = "l.cache:func_name" 	VALUE = "json_runtime_categoryproductlist_load_query">
	<MvASSIGN NAME = "l.cache_key" 			VALUE = "">

	<MvEVAL EXPR = "{ JSON_Runtime_Cache_ParseFilters( l.cache ) }">

	<MvASSIGN NAME = "l.null" 				VALUE = "{ JSON_Input_Retrieve_Integer( 'Category_ID', l.cache:keys:category_id ) }">
	<MvASSIGN NAME = "l.null" 				VALUE = "{ JSON_Input_Retrieve( 'Category_Code', l.cache:keys:category_code ) }">

	<MvIF EXPR = "{ JSON_Runtime_Cache_Output( l.conn_id, l.cache, l.cache_key ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCAPTURE VARIABLE = "l.response">
		<MvIF EXPR = "{ NOT JSON_Runtime_Category_Load( l.category ) }">
			<MvASSIGN NAME = "l.result" VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		<MvELSE>
			<MvEVAL EXPR = "{ JSON_Runtime_CategoryProductList_Build_Query( l.search_query, l.category ) }">

			<MvASSIGN NAME = "l.result" VALUE = "{ JSON_BaseRuntimeProductList_Load_Query( l.search_query ) }">
		</MvIF>
	</MvCAPTURE>

	<MvCOMMENT>
	|
	| Store response in database. Return response. 
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ l.response }">

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'miss ' $ gettoken( l.cache_key, ':', 2 ) ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ JSON_Runtime_Cache_Redis_Set_Response( l.conn_id, l.cache_key, l.response ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_MaintenanceMode_Bypass_Runtime_MerchandisingProductList_Load_Query" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Runtime_MerchandisingProductList_Load_Query_ValidatePreviewSession( l.previewsession ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_MerchandisingProductList_Load_Query_ValidatePreviewSession" PARAMETERS = "previewsession var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_ValidatePreviewSession( l.previewsession, l.user ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].CanI( l.user:admin, l.user:id, 'MRCH', 0, 0, 1, 0 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_MerchandisingProductList_Load_Query" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }">						<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT JSON_Runtime_CORS_Preflight_Headers() }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.previewsession"	VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_MCH_JSON ].JSON_MerchandisingPrompt_Load( l.merchandisingprompt ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ JSON_Input_Exists( 'PreviewSession_ID' ) }">
		<MvIF EXPR = "{ NOT JSON_Runtime_MerchandisingProductList_Load_Query_ValidatePreviewSession( l.previewsession ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT JSON_Input_Text( 'O', 'PreviewSession_Prompt', l.merchandisingprompt:prompt ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Input_Retrieve_Raw( 'MerchandisingPrompt_Context', l.merchandisingcontext ) OR ( miva_variable_type( l.merchandisingcontext ) NE 'STRUCTURE' ) }">
		<MvASSIGN NAME = "l.merchandisingcontext"		VALUE = "">
	</MvIF>

	<MvASSIGN NAME = "l.merchandisingcontext:basket_id"	VALUE = "{ g.Basket:basket_id }">

	<MvCOMMENT>
	|
	| In addition to the normal cache enablement logic, we also bypass caching for preview sessions
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Enabled() OR ( NOT ISNULL l.previewsession ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off store-settings' ) }">

		<MvEVAL EXPR = "{ JSON_Runtime_ProductList_Build_Query( l.search_query ) }">

		<MvFUNCTIONRETURN VALUE = "{ JSON_Runtime_MerchandisingProductList_Load_Query_LowLevel( l.search_query, l.merchandisingprompt, l.merchandisingcontext ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Connect( l.conn_id ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off connection-failed' ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_MCH_JSON ].JSON_MerchandisingPrompt_Load( l.merchandisingprompt ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ JSON_Runtime_ProductList_Build_Query( l.search_query ) }">

		<MvFUNCTIONRETURN VALUE = "{ JSON_Runtime_MerchandisingProductList_Load_Query_LowLevel( l.search_query, l.merchandisingprompt, l.merchandisingcontext ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cache" 				VALUE = "">
	<MvASSIGN NAME = "l.cache:keys" 		VALUE = "">
	<MvASSIGN NAME = "l.cache:func_name" 	VALUE = "json_runtime_merchandisingproductlist_load_query">
	<MvASSIGN NAME = "l.cache_key" 			VALUE = "">

	<MvEVAL EXPR = "{ JSON_Runtime_Cache_ParseFilters( l.cache ) }">

	<MvASSIGN NAME = "l.cache:keys:merchandisingprompt"		VALUE = "{ l.merchandisingprompt }">
	<MvASSIGN NAME = "l.cache:keys:merchandisingcontext"	VALUE = "{ l.merchandisingcontext }">

	<MvEVAL EXPR = "{ miva_member_delete( l.cache:keys:merchandisingcontext, 'basket_id' ) }">

	<MvIF EXPR = "{ JSON_Runtime_Cache_Output( l.conn_id, l.cache, l.cache_key ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCAPTURE VARIABLE = "l.response">
		<MvEVAL EXPR = "{ JSON_Runtime_ProductList_Build_Query( l.search_query ) }">

		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_Runtime_MerchandisingProductList_Load_Query_LowLevel( l.search_query, l.merchandisingprompt, l.merchandisingcontext ) }">
	</MvCAPTURE>

	<MvCOMMENT>
	|
	| Store response in database. Return response. 
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ l.response }">

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'miss ' $ gettoken( l.cache_key, ':', 2 ) ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ JSON_Runtime_Cache_Redis_Set_Response( l.conn_id, l.cache_key, l.response ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_MerchandisingProductList_Load_Query_LowLevel" PARAMETERS = "search_query var, merchandisingprompt var, merchandisingcontext var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Reference( l.search_query, 'Runtime_ProductList', l.query_params ) }">

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.search_term"		VALUE = "">
	<MvASSIGN NAME = "l.search_index"		VALUE = "">
	<MvASSIGN NAME = "l.search_origin"		VALUE = "{ 'Merchandising: ' $ l.merchandisingprompt:code }">

	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.code',		'code' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.name',		'name' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.sku',		'sku' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.image',		'image' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.thumbnail',	'thumbnail' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_DOUBLE(	l.available_filters, 'prod.price',		'price' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_DOUBLE(	l.available_filters, 'prod.weight',		'weight' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_BOOL(	l.available_filters, 'prod.taxable',	'taxable' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_RFC3339(	l.available_filters, 'prod.dt_created',	'dt_created' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_RFC3339(	l.available_filters, 'prod.dt_updated',	'dt_updated' ) }">

	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o', 'Filter',			l.filter )	OR
					NOT JSON_Input_Text(	'o', 'Sort',			l.sort )	OR
					NOT JSON_Input_Integer(	'o', 'Offset',			l.offset )	OR
					NOT JSON_Input_Integer(	'o', 'Count',			l.count )	OR
					NOT JSON_Input_Text(	'O', 'Search_Index',	l.search_index ) OR
					NOT JSON_Input_Text(	'O', 'Search_Origin',	l.search_origin ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_MCH_UT ].MerchandisingPrompt_Complete( l.merchandisingprompt, l.merchandisingcontext, l.search_term, l.tokens_present ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Filter_Callback_With_FilteredCustomFields( l.search_query, l.filter, l.available_filters, g.Module_JSON, 'JSON_Runtime_ProductList_Load_Query_Filter', '', 'JSON_Product_CustomFields_Query_Filter', 'JSON_Runtime_Product_CustomField_Filter', l.data ) }">

	<MvCOMMENT>
	|
	| Apply the merchandising search to the query
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL l.search_index }">
		<MvIF EXPR = "{ ( NOT [ g.Module_Feature_AI_DB ].AISearchIndex_Load_Code( l.search_index, l.ai_index ) ) OR ( NOT l.ai_index:active ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00057', 'Invalid or inactive runtime_search index' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_MCH_DB ].MerchandisingSettings_Load_Cached( l.merchandisingsettings ) OR NOT l.merchandisingsettings:index_id }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00059', 'Invalid or inactive runtime_search index' ) }">
		<MvELSEIF EXPR = "{ ( NOT [ g.Module_Feature_AI_DB ].AISearchIndex_Load_ID( l.merchandisingsettings:index_id, l.ai_index ) ) OR ( NOT l.ai_index:active ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00060', 'Invalid or inactive runtime_search index' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_ProductList_Build_Query_Search_AI( l.search_query, l.search_term, l.ai_index ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Search_Origin( l.search_query, l.search_origin ) }">

	<MvCOMMENT>
	|
	| If the Merchandising Context includes a product_id, ensure that it is excluded from the search results
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.merchandisingcontext:product_id }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Search_Operator_Conversion_With_Type( l.search_query, 'INTEGER', 'prod.id', 'NE', l.merchandisingcontext:product_id, 'AND', 'AND' ) }">
	<MvELSEIF EXPR = "{ NOT ISNULL l.merchandisingcontext:product_code }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Search_Operator_Conversion_With_Type( l.search_query, 'CHAR', 'prod.code', 'NE', l.merchandisingcontext:product_code, 'AND', 'AND' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Runtime_Product_OrderBy( l.search_query, l.sort ) }">

	<MvIF EXPR = "{ l.data:ondemandcolumns:sale_price }">
		<MvIF EXPR = "{ [ g.Feature_PGR_UT ].DiscountSignature_Calculate_Cached( g.Basket:cust_id, l.data:discount_signature ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Set_DiscountSignature( l.search_query, l.data:discount_signature ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.facets_with_values"			VALUE = "">
	<MvASSIGN NAME = "l.facets_with_values_count"	VALUE = 0>

	<MvIF EXPR = "{ l.data:ondemandcolumns:facets }">
		<MvIF EXPR = "{ l.query_params:data:category }">	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_FCT_UT ].FacetList_Load_Category_Query_Cached( l.query_params:data:category, l.search_query, l.possible_facets ) }">
		<MvELSE>											<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_FCT_UT ].FacetList_Load_Query_Cached( l.search_query, l.possible_facets ) }">
		</MvIF>

		<MvASSIGN NAME = "l.enabled_facet_count" VALUE = "{ miva_array_filter_ref( l.possible_facets, 1, l.facet, 'l.facet:handle EQ \'show\'', l.enabled_facets ) }">

		<MvFOREACH ITERATOR = "l.facet" ARRAY = "l.enabled_facets" COUNT = "{ l.enabled_facet_count }">
			<MvIF EXPR = "{ miva_array_search( l.data:query_facets, 1, l.search_facet, 'l.search_facet:code EQ l.facet:code' ) }">
				<MvASSIGN NAME = "l.facet:input_values" 		VALUE = "{ l.search_facet:input_values }">
				<MvASSIGN NAME = "l.facet:input_value_count" 	VALUE = "{ l.search_facet:input_value_count }">
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.facets_with_values_count" VALUE = "{ [ g.Module_Feature_FCT_UT ].FacetList_Load_Values_Query( l.search_query, l.enabled_facets, l.enabled_facet_count, l.facets_with_values ) }">
	</MvIF>

	<MvIF EXPR = "{ l.data:query_facet_count }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Facets( l.search_query, l.data:query_facets, l.data:query_facet_count ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_INV_DB ].InventorySettings_Load_Cached( l.data:inventorysettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_ProductList_Cache( l.search_query, l.cachedproductlist ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cached_query" VALUE = "{ l.search_query }">

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Clear( l.cached_query ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Copy_Key( l.cached_query, l.search_query, 'Runtime_ProductList' ) }">

	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_Clear( l.cached_query ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_FROM_Clear( l.cached_query ) }">

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Reference( l.cached_query, 'Runtime_ProductList', l.query_params ) }">

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_WHERE_Clear( l.cached_query ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_ORDER_BY_Clear( l.cached_query ) }">

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_FROM( l.cached_query, g.Store_Table_Prefix $ 'CachedProductListXProduct', 'plxp' ) }">

	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_FROM( l.cached_query ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_Inventory( l.cached_query ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_DiscountPrices( l.cached_query ) }">

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.cached_query, 'plxp.disp_order AS output_disp_order' ) }">

	<MvEVAL EXPR = "{ JSON_Query_Callback_With_FilteredCustomFields( l.cached_query, l.filter, g.Module_JSON, 'JSON_Runtime_Product_CustomFields_Query', 'JSON_Runtime_Product_CustomField_Filter' ) }">

	<MvIF EXPR = "{ l.data:ondemandcolumns:page }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.cached_query,	'pv.page_id',	'page_id' ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cached_query, 		'pv.code',		'alt_page_code' ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cached_query, 		'pv.title',		'alt_page_title' ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.cached_query, 'prod', g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv', 'prod.page_code <> \'\' AND pbv.branch_id = ? AND pbv.head = 1 AND ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'pbv.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'prod.page_code' ), [ g.Module_Library_DB ].SQL_Query_Field( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID() ) ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.cached_query, 'prod', g.Store_Table_Prefix $ 'PageVersions', 'pv', 'pv.id = pbv.version_id', '' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:category }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cached_query, 'cat.code', 'cancat_code' ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cached_query, 'cat.name', 'cancat_name' ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.cached_query, 'prod', g.Store_Table_Prefix $ 'Categories', 'cat', 'prod.cancat_id = cat.id', '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_WHERE( l.cached_query, 'plxp.cache_id = ? AND prod.id = plxp.product_id', [ g.Library_DB ].SQL_Query_Field( l.cachedproductlist:id ) ) }">

	<MvIF EXPR = "{ ISNULL l.query_params:data:sort_dir }">	<MvASSIGN NAME = "l.sort_dir" VALUE = "ASC">
	<MvELSE>												<MvASSIGN NAME = "l.sort_dir" VALUE = "{ l.query_params:data:sort_dir }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_ORDER_BY( l.cached_query, 'plxp.disp_order', l.sort_dir ) }">

	<MvIF EXPR = "{ ( NOT l.data:inventorysettings:active ) OR ( ( NOT l.data:inventorysettings:out_hide ) AND ( NOT l.cachedproductlist:out_hide ) ) }">
		<MvASSIGN NAME = "l.total_count"	VALUE = "{ l.cachedproductlist:prodcount }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_HideOutOfStockProducts( l.cached_query ) }">

		<MvIF EXPR = "{ NOT [ g.Library_DB ].SQL_Query_Count( l.cached_query, l.total_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Library_DB ].SQL_Query_Build( l.cached_query, l.search_fields ) }">

	<MvCOMMENT>
	|
	| Copy the Product_CustomFields key back to the original search_query so
	| JSON_Product_CustomFields_With_Query can use Module_Product_Field_Query_Value
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Copy_Key( l.search_query, l.cached_query, 'Product_CustomFields' ) }">

	<MvIF EXPR = "{ l.offset EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_UT ].SearchLogEntry_Process_Runtime_Search( l.search_term, l.total_count, l.query_params:data:search_origin, int( l.query_params:data:ai_index_id ) ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Use the "RuntimeProducts" view to avoid potential conflicts with other helper functions that may be called and use the "Products" view
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'RuntimeProducts', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00058', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.product_output_count"			VALUE = 0>
	<MvASSIGN NAME = "l.tokens_present_output_count"	VALUE = 0>
	<MvASSIGN NAME = "l.fragment_rendering"				VALUE = "{ l.data:filters:fragments }">

	<MvEVAL EXPR = "{ JSON_Runtime_Product_CustomFields_Initialize( l.filter, l.data:customfield_state ) }">
	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ encodejavascriptnumber( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ encodejavascriptnumber( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT RuntimeProducts.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.product_output_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ JSON_Runtime_Product_Read( l.product, l.data ) }">

			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.product_output_count ) }">

			<MvCOMMENT>
			|
			| If no fragments were requested, the record can be immediately output. Otherwise, the record is captured, output, decoded,
			| and then used to render the requested fragments, allowing the fragments to operate on the exact product record that is output.
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT l.fragment_rendering }">
				<MvEVAL EXPR = "{ JSON_Runtime_Product( l.product, l.data ) }">
				<MvEVAL EXPR = "{ JSON_Product_CustomFields_With_Query( l.search_query, l.data:customfield_state, l.product:id, 'RuntimeProducts' ) }">
			<MvELSE>
				<MvCAPTURE VARIABLE = "l.json_product">
					<MvEVAL EXPR = "{ JSON_Runtime_Product( l.product, l.data ) }">
					<MvEVAL EXPR = "{ JSON_Product_CustomFields_With_Query( l.search_query, l.data:customfield_state, l.product:id, 'RuntimeProducts' ) }">
				</MvCAPTURE>

				<MvEVAL EXPR = "{ l.json_product }">
				<MvEVAL EXPR = "{ JSON_Runtime_Product_Fragments( l.json_product, l.data ) }">
			</MvIF>

			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "RuntimeProducts" ROWS = 1>
		</MvWHILE>
		],
		"search_term": "<MvEVAL EXPR = "{ encodejavascriptstring( l.search_term ) }">",
		"tokens_present":
		[
			<MvFOREACH ITERATOR = "l.token_name" ARRAY = "l.token_names" COUNT = "{ miva_struct_members( l.tokens_present, l.token_names ) }">
				<MvREFERENCEARRAY NAME = "l.token_present" VARIABLE = "l.tokens_present">
					<MvMEMBER NAME = "{ l.token_name }">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ l.token_present }">
					<MvIF EXPR = "{ l.tokens_present_output_count++ }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ encodejavascriptstring( l.token_name ) }">"
				</MvIF>
			</MvFOREACH>
		]
		<MvIF EXPR = "{ l.facets_with_values_count }">
			,<MvEVAL EXPR = "{ JSON_Runtime_ProductList_Facets( l.facets_with_values, l.facets_with_values_count ) }">
		</MvIF>
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "RuntimeProducts">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_RelatedProductList_Load_Query" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Enabled() }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off store-settings' ) }">

		<MvIF EXPR = "{ NOT JSON_Runtime_Product_Load( l.product ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ JSON_Runtime_RelatedProductList_Build_Query( l.search_query, l.product ) }">

		<MvFUNCTIONRETURN VALUE = "{ JSON_BaseRuntimeProductList_Load_Query( l.search_query ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Connect( l.conn_id ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off connection-failed' ) }">

		<MvIF EXPR = "{ NOT JSON_Runtime_Product_Load( l.product ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ JSON_Runtime_RelatedProductList_Build_Query( l.search_query, l.product ) }">

		<MvFUNCTIONRETURN VALUE = "{ JSON_BaseRuntimeProductList_Load_Query( l.search_query ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cache" 				VALUE = "">
	<MvASSIGN NAME = "l.cache:keys" 		VALUE = "">
	<MvASSIGN NAME = "l.cache:func_name" 	VALUE = "json_runtime_relatedproductlist_load_query">
	<MvASSIGN NAME = "l.cache_key" 			VALUE = "">

	<MvEVAL EXPR = "{ JSON_Runtime_Cache_ParseFilters( l.cache ) }">

	<MvASSIGN NAME = "l.null" 				VALUE = "{ JSON_Input_Retrieve_Integer( 'Product_ID', l.cache:keys:product_id ) }">
	<MvASSIGN NAME = "l.null" 				VALUE = "{ JSON_Input_Retrieve( 'Product_Code', l.cache:keys:product_code ) }">

	<MvIF EXPR = "{ JSON_Runtime_Cache_Output( l.conn_id, l.cache, l.cache_key ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCAPTURE VARIABLE = "l.response">
		<MvIF EXPR = "{ NOT JSON_Runtime_Product_Load( l.product ) }">
			<MvASSIGN NAME = "l.result" VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		<MvELSE>
			<MvEVAL EXPR = "{ JSON_Runtime_RelatedProductList_Build_Query( l.search_query, l.product ) }">

			<MvASSIGN NAME = "l.result" VALUE = "{ JSON_BaseRuntimeProductList_Load_Query( l.search_query ) }">
		</MvIF>
	</MvCAPTURE>

	<MvCOMMENT>
	|
	| Store response in database. Return response. 
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ l.response }">

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'miss ' $ gettoken( l.cache_key, ':', 2 ) ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ JSON_Runtime_Cache_Redis_Set_Response( l.conn_id, l.cache_key, l.response ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BaseRuntimeProductList_Load_Query" PARAMETERS = "search_query var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Reference( l.search_query, 'Runtime_ProductList', l.query_params ) }">

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.code',		'code' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.name',		'name' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.sku',		'sku' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.image',		'image' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR(	l.available_filters, 'prod.thumbnail',	'thumbnail' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_DOUBLE(	l.available_filters, 'prod.price',		'price' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_DOUBLE(	l.available_filters, 'prod.weight',		'weight' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_BOOL(	l.available_filters, 'prod.taxable',	'taxable' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_RFC3339(	l.available_filters, 'prod.dt_created',	'dt_created' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_RFC3339(	l.available_filters, 'prod.dt_updated',	'dt_updated' ) }">

	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT JSON_Input_Text(	'o', 'Sort',	l.sort )	OR
					NOT JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Filter_Callback_With_FilteredCustomFields( l.search_query, l.filter, l.available_filters, g.Module_JSON, 'JSON_Runtime_ProductList_Load_Query_Filter', '', 'JSON_Product_CustomFields_Query_Filter', 'JSON_Runtime_Product_CustomField_Filter', l.data ) }">

	<MvCOMMENT>
	|
	| Cache all queries that specify a filter
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.searchable_filter" ARRAY = "l.searchable_filters" COUNT = "{ miva_splitstring( l.available_filters, ',', l.searchable_filters, '' ) }">
		<MvIF EXPR = "{ JSON_Filter_Contains_Search_Field( l.filter, gettoken( l.searchable_filter, ':', 1 ), l.null ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Cache( l.search_query ) }">
			<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Handle runtime_search filter
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL l.data:runtime_search }">
		<MvIF EXPR = "{ l.data:runtime_search:type EQ 'system' }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Search( l.search_query, l.data:runtime_search:search ) }">
		<MvELSEIF EXPR = "{ l.data:runtime_search:type EQ 'relational' }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Search_Relational( l.search_query, l.data:runtime_search:search ) }">
		<MvELSEIF EXPR = "{ l.data:runtime_search:type EQ 'ai' }">
			<MvIF EXPR = "{ ( NOT [ g.Module_Feature_AI_DB ].AISearchIndex_Load_Code( l.data:runtime_search:index, l.ai_index ) ) OR ( NOT l.ai_index:active ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00034', 'Invalid or inactive runtime_search index' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_ProductList_Build_Query_Search_AI( l.search_query, l.data:runtime_search:search, l.ai_index ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00035', 'Unsupported runtime_search type' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Search_Origin( l.search_query, l.data:runtime_search:origin ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Runtime_Product_OrderBy( l.search_query, l.sort ) }">

	<MvIF EXPR = "{ l.data:ondemandcolumns:sale_price }">
		<MvIF EXPR = "{ [ g.Feature_PGR_UT ].DiscountSignature_Calculate_Cached( g.Basket:cust_id, l.data:discount_signature ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Set_DiscountSignature( l.search_query, l.data:discount_signature ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.facets_with_values"			VALUE = "">
	<MvASSIGN NAME = "l.facets_with_values_count"	VALUE = 0>

	<MvIF EXPR = "{ l.data:ondemandcolumns:facets }">
		<MvIF EXPR = "{ l.query_params:data:category }">	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_FCT_UT ].FacetList_Load_Category_Query_Cached( l.query_params:data:category, l.search_query, l.possible_facets ) }">
		<MvELSE>											<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_FCT_UT ].FacetList_Load_Query_Cached( l.search_query, l.possible_facets ) }">
		</MvIF>

		<MvASSIGN NAME = "l.enabled_facet_count" VALUE = "{ miva_array_filter_ref( l.possible_facets, 1, l.facet, 'l.facet:handle EQ \'show\'', l.enabled_facets ) }">

		<MvFOREACH ITERATOR = "l.facet" ARRAY = "l.enabled_facets" COUNT = "{ l.enabled_facet_count }">
			<MvIF EXPR = "{ miva_array_search( l.data:query_facets, 1, l.search_facet, 'l.search_facet:code EQ l.facet:code' ) }">
				<MvASSIGN NAME = "l.facet:input_values" 		VALUE = "{ l.search_facet:input_values }">
				<MvASSIGN NAME = "l.facet:input_value_count" 	VALUE = "{ l.search_facet:input_value_count }">
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.facets_with_values_count" VALUE = "{ [ g.Module_Feature_FCT_UT ].FacetList_Load_Values_Query( l.search_query, l.enabled_facets, l.enabled_facet_count, l.facets_with_values ) }">
	</MvIF>

	<MvIF EXPR = "{ l.data:query_facet_count }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_Facets( l.search_query, l.data:query_facets, l.data:query_facet_count ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_INV_DB ].InventorySettings_Load_Cached( l.data:inventorysettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.query_params:data:cache }">
		<MvIF EXPR = "{ l.data:inventorysettings:active }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_HideOutOfStockProducts( l.search_query ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_Inventory( l.search_query ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_DiscountPrices( l.search_query ) }">
		<MvEVAL EXPR = "{ JSON_Query_Callback_With_FilteredCustomFields( l.search_query, l.filter, g.Module_JSON, 'JSON_Runtime_Product_CustomFields_Query', 'JSON_Runtime_Product_CustomField_Filter' ) }">

		<MvIF EXPR = "{ l.data:ondemandcolumns:page }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query,	'pv.page_id',	'page_id' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 		'pv.code',		'alt_page_code' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 		'pv.title',		'alt_page_title' ) }">

			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'prod', g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv', 'prod.page_code <> \'\' AND pbv.branch_id = ? AND pbv.head = 1 AND ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'pbv.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'prod.page_code' ), [ g.Module_Library_DB ].SQL_Query_Field( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID() ) ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'prod', g.Store_Table_Prefix $ 'PageVersions', 'pv', 'pv.id = pbv.version_id', '' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.data:ondemandcolumns:category }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'cat.code', 'cancat_code' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'cat.name', 'cancat_name' ) }">

			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'prod', g.Store_Table_Prefix $ 'Categories', 'cat', 'prod.cancat_id = cat.id', '' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Library_DB ].Runtime_ProductList_Cache( l.search_query, l.cachedproductlist ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.cached_query" VALUE = "{ l.search_query }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Clear( l.cached_query ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Copy_Key( l.cached_query, l.search_query, 'Runtime_ProductList' ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_Clear( l.cached_query ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_FROM_Clear( l.cached_query ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Reference( l.cached_query, 'Runtime_ProductList', l.query_params ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_WHERE_Clear( l.cached_query ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_ORDER_BY_Clear( l.cached_query ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_FROM( l.cached_query, g.Store_Table_Prefix $ 'CachedProductListXProduct', 'plxp' ) }">

		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_FROM( l.cached_query ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_Inventory( l.cached_query ) }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_SELECT_DiscountPrices( l.cached_query ) }">
		<MvEVAL EXPR = "{ JSON_Query_Callback_With_FilteredCustomFields( l.cached_query, l.filter, g.Module_JSON, 'JSON_Runtime_Product_CustomFields_Query', 'JSON_Runtime_Product_CustomField_Filter' ) }">

		<MvIF EXPR = "{ l.data:ondemandcolumns:page }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.cached_query,	'pv.page_id',	'page_id' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cached_query, 		'pv.code',		'alt_page_code' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cached_query, 		'pv.title',		'alt_page_title' ) }">

			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.cached_query, 'prod', g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv', 'prod.page_code <> \'\' AND pbv.branch_id = ? AND pbv.head = 1 AND ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'pbv.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'prod.page_code' ), [ g.Module_Library_DB ].SQL_Query_Field( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID() ) ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.cached_query, 'prod', g.Store_Table_Prefix $ 'PageVersions', 'pv', 'pv.id = pbv.version_id', '' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.data:ondemandcolumns:category }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cached_query, 'cat.code', 'cancat_code' ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cached_query, 'cat.name', 'cancat_name' ) }">

			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.cached_query, 'prod', g.Store_Table_Prefix $ 'Categories', 'cat', 'prod.cancat_id = cat.id', '' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_WHERE( l.cached_query, 'plxp.cache_id = ? AND prod.id = plxp.product_id', [ g.Library_DB ].SQL_Query_Field( l.cachedproductlist:id ) ) }">

		<MvIF EXPR = "{ ISNULL l.query_params:data:sort_dir }">	<MvASSIGN NAME = "l.sort_dir" VALUE = "ASC">
		<MvELSE>												<MvASSIGN NAME = "l.sort_dir" VALUE = "{ l.query_params:data:sort_dir }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_ORDER_BY( l.cached_query, 'plxp.disp_order', l.sort_dir ) }">

		<MvIF EXPR = "{ ( NOT l.data:inventorysettings:active ) OR ( ( NOT l.data:inventorysettings:out_hide ) AND ( NOT l.cachedproductlist:out_hide ) ) }">
			<MvASSIGN NAME = "l.total_count"	VALUE = "{ l.cachedproductlist:prodcount }">
		<MvELSE>
			<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_HideOutOfStockProducts( l.cached_query ) }">

			<MvIF EXPR = "{ NOT [ g.Library_DB ].SQL_Query_Count( l.cached_query, l.total_count ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Library_DB ].SQL_Query_Build( l.cached_query, l.search_fields ) }">

		<MvCOMMENT>
		|
		| Copy the Product_CustomFields key back to the original search_query so
		| JSON_Product_CustomFields_With_Query can use Module_Product_Field_Query_Value
		|
		</MvCOMMENT>

		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Copy_Key( l.search_query, l.cached_query, 'Product_CustomFields' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.query_params:data:search AND l.offset EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_UT ].SearchLogEntry_Process_Runtime_Search( l.query_params:data:search, l.total_count, l.query_params:data:search_origin, int( l.query_params:data:ai_index_id ) ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Use the "RuntimeProducts" view to avoid potential conflicts with other helper functions that may be called and use the "Products" view
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'RuntimeProducts', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00019', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.product_output_count"	VALUE = 0>
	<MvASSIGN NAME = "l.fragment_rendering"		VALUE = "{ l.data:filters:fragments }">

	<MvEVAL EXPR = "{ JSON_Runtime_Product_CustomFields_Initialize( l.filter, l.data:customfield_state ) }">
	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT RuntimeProducts.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.product_output_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ JSON_Runtime_Product_Read( l.product, l.data ) }">

			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.product_output_count ) }">

			<MvCOMMENT>
			|
			| If no fragments were requested, the record can be immediately output. Otherwise, the record is captured, output, decoded,
			| and then used to render the requested fragments, allowing the fragments to operate on the exact product record that is output.
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT l.fragment_rendering }">
				<MvEVAL EXPR = "{ JSON_Runtime_Product( l.product, l.data ) }">
				<MvEVAL EXPR = "{ JSON_Product_CustomFields_With_Query( l.search_query, l.data:customfield_state, l.product:id, 'RuntimeProducts' ) }">
			<MvELSE>
				<MvCAPTURE VARIABLE = "l.json_product">
					<MvEVAL EXPR = "{ JSON_Runtime_Product( l.product, l.data ) }">
					<MvEVAL EXPR = "{ JSON_Product_CustomFields_With_Query( l.search_query, l.data:customfield_state, l.product:id, 'RuntimeProducts' ) }">
				</MvCAPTURE>

				<MvEVAL EXPR = "{ l.json_product }">
				<MvEVAL EXPR = "{ JSON_Runtime_Product_Fragments( l.json_product, l.data ) }">
			</MvIF>

			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "RuntimeProducts" ROWS = 1>
		</MvWHILE>
		]
		<MvIF EXPR = "{ l.facets_with_values_count }">
			,<MvEVAL EXPR = "{ JSON_Runtime_ProductList_Facets( l.facets_with_values, l.facets_with_values_count ) }">
		</MvIF>
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "RuntimeProducts">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ProductList_Facets" PARAMETERS = "facets_with_values var, facets_with_values_count" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"facets":
	{
	<MvFOREACH ITERATOR = "l.facet" ARRAY = "l.facets_with_values" INDEX = "l.pos" COUNT = "{ l.facets_with_values_count }">
		<MvIF EXPR = "{ l.pos GT 1 }">
			,
		</MvIF>

		"<MvEVAL EXPR = "{ JSON_Encode( l.facet:code ) }">":
		{
			"type":			"<MvEVAL EXPR = "{ JSON_Encode( l.facet:type ) }">",
			"name":			"<MvEVAL EXPR = "{ JSON_Encode( l.facet:name ) }">",
			"formatting":	"<MvEVAL EXPR = "{ JSON_Encode( l.facet:formatting ) }">",
			"module_code":	"<MvEVAL EXPR = "{ JSON_Encode( l.facet:module:code ) }">"

			<MvIF EXPR = "{ l.facet:type EQ 'rangeslider' }">
				,"value_low": 			<MvEVAL EXPR = "{ gettoken( l.facet:values[ 1 ]:value, '-', 1 ) ROUND 2 }">,
				"value_high": 			<MvEVAL EXPR = "{ gettoken( l.facet:values[ 1 ]:value, '-', 2 ) ROUND 2 }">,
				"selected_value_low": 	<MvEVAL EXPR = "{ gettoken( l.facet:input_values[ 1 ], '-', 1 ) ROUND 2 }">,
				"selected_value_high": 	<MvEVAL EXPR = "{ gettoken( l.facet:input_values[ 1 ], '-', 2 ) ROUND 2 }">
			<MvELSEIF EXPR = "{ l.facet:type EQ 'nested' AND miva_array_search( l.facets_with_values, 1, l.search_facet, 'l.search_facet:code EQ l.facet:code AND l.search_facet:input_value_count GT 0' ) }">
				,"applied_prompts":
				[
				<MvFOREACH ITERATOR = "l.value" ARRAY = "l.search_facet:input_values" INDEX = "l.pos_2" COUNT = "{ l.search_facet:input_value_count }">
					<MvIF EXPR = "{ l.pos_2 GT 1 }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ JSON_Encode( [ g.Module_Root $ l.search_facet:module:module ].Module_Product_Facet_Value_Prompt( l.search_facet:module, l.search_facet, l.value ) ) }">"
				</MvFOREACH>
				],
				"applied_values":
				[
				<MvFOREACH ITERATOR = "l.value" ARRAY = "l.search_facet:input_values" INDEX = "l.pos_2" COUNT = "{ l.search_facet:input_value_count }">
					<MvIF EXPR = "{ l.pos_2 GT 1 }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ JSON_Encode( l.value ) }">"
				</MvFOREACH>
				]
			</MvIF>

			,"values":
			[
			<MvASSIGN NAME = "l.value_count" VALUE = 0>
			<MvFOREACH ITERATOR = "l.value" ARRAY = "l.facet:values" COUNT = "{ l.facet:value_count }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.value_count ) }">
					"prompt":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Module_Root $ l.facet:module:module ].Module_Product_Facet_Value_Prompt( l.facet:module, l.facet, l.value:value ) ) }">",
					"value":	"<MvEVAL EXPR = "{ JSON_Encode( l.value:value ) }">",
					"count":	<MvEVAL EXPR = "{ int( l.value:count ) }">,
					"selected":	<MvEVAL EXPR = "{ JSON_Boolean( [ g.Module_Root $ l.facet:module:module ].Module_Product_Facet_Value_Selected( l.facet:module, l.facet, l.value:value, l.facet:input_values, l.facet:input_value_count ) ) }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
			</MvFOREACH>
			]
		}
	</MvFOREACH>
	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_DiscountState_Create" PARAMETERS = "discount_state var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.discount_state }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Feature_PGR_UT ].DiscountState_CreateEmpty( l.discount_state ) }">
		<MvASSIGN NAME = "l.pricegroup_count"	VALUE = "{ [ g.Feature_PGR_UT ].ResolvedPriceGroupAndModuleList_Load_Customer_Cached( g.Basket:cust_id, l.pricegroups ) }">

		<MvEVAL EXPR = "{ [ g.Feature_PGR_UT ].DiscountState_Set_PriceGroups( l.discount_state, l.pricegroups, l.pricegroup_count ) }">

		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Feature_PGR_UT ].DiscountState_Disable_Unused_Item_PriceGroups( l.discount_state ) }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Feature_PGR_UT ].DiscountState_Predict_Baseline_Discounts( l.discount_state ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_Read" PARAMETERS = "product var, data var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ JSON_Runtime_Product_DiscountState_Create( l.data:discount_state ) }">

	<MvASSIGN NAME = "l.product"					VALUE = "">
	<MvASSIGN NAME = "l.product:id"					VALUE = "{ RuntimeProducts.d.id }">
	<MvASSIGN NAME = "l.product:catcount"			VALUE = "{ RuntimeProducts.d.catcount }">
	<MvASSIGN NAME = "l.product:cancat_id"			VALUE = "{ RuntimeProducts.d.cancat_id }">
	<MvASSIGN NAME = "l.product:agrpcount"			VALUE = "{ RuntimeProducts.d.agrpcount }">
	<MvASSIGN NAME = "l.product:pgrpcount"			VALUE = "{ RuntimeProducts.d.pgrpcount }">
	<MvASSIGN NAME = "l.product:disp_order"			VALUE = "{ RuntimeProducts.d.disp_order }">
	<MvASSIGN NAME = "l.product:page_code"			VALUE = "{ RuntimeProducts.d.page_code }">
	<MvASSIGN NAME = "l.product:code"				VALUE = "{ RuntimeProducts.d.code }">
	<MvASSIGN NAME = "l.product:sku"				VALUE = "{ RuntimeProducts.d.sku }">
	<MvASSIGN NAME = "l.product:name"				VALUE = "{ RuntimeProducts.d.name }">
	<MvASSIGN NAME = "l.product:page_title"			VALUE = "{ RuntimeProducts.d.page_title }">
	<MvASSIGN NAME = "l.product:thumbnail"			VALUE = "{ RuntimeProducts.d.thumbnail }">
	<MvASSIGN NAME = "l.product:image"				VALUE = "{ RuntimeProducts.d.image }">
	<MvASSIGN NAME = "l.product:price"				VALUE = "{ RuntimeProducts.d.price }">
	<MvASSIGN NAME = "l.product:cost"				VALUE = "{ RuntimeProducts.d.cost }">
	<MvASSIGN NAME = "l.product:descrip"			VALUE = "{ RuntimeProducts.d.descrip }">
	<MvASSIGN NAME = "l.product:weight"				VALUE = "{ RuntimeProducts.d.weight }">
	<MvASSIGN NAME = "l.product:taxable"			VALUE = "{ RuntimeProducts.d.taxable }">
	<MvASSIGN NAME = "l.product:active"				VALUE = "{ RuntimeProducts.d.active }">
	<MvASSIGN NAME = "l.product:original_active"	VALUE = "{ RuntimeProducts.d.active }">
	<MvASSIGN NAME = "l.product:dt_created"			VALUE = "{ RuntimeProducts.d.dt_created }">
	<MvASSIGN NAME = "l.product:dt_updated"			VALUE = "{ RuntimeProducts.d.dt_updated }">

	<MvASSIGN NAME = "l.product:output_disp_order"	VALUE = "{ RuntimeProducts.d.output_disp_order }">

	<MvIF EXPR = "{ ISNULL l.data:variant_ids }">
		<MvASSIGN NAME = "l.product:variant_id"		VALUE = 0>
	<MvELSE>
		<MvREFERENCEARRAY NAME = "l.variant_id" VARIABLE = "l.data:variant_ids">
			<MvMEMBER NAME = "{ l.product:code }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.product:variant_id"		VALUE = "{ int( l.variant_id ) }">
	</MvIF>

	<MvIF EXPR = "{ l.product:variant_id EQ 0 }">
		<MvASSIGN NAME = "l.product:retail"				VALUE = "{ l.product:price }">

		<MvIF EXPR = "{ ISNULL RuntimeProducts.d.base_price }">
			<MvASSIGN NAME = "l.product:base_price"		VALUE = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Adjusted_Price( l.data:discount_state, l.product, l.product:price, l.product:cost ) }">	
		<MvELSE>
			<MvASSIGN NAME = "l.product:base_price"		VALUE = "{ RuntimeProducts.d.base_price }">
		</MvIF>

		<MvIF EXPR = "{ ISNULL RuntimeProducts.d.sale_price }">
			<MvASSIGN NAME = "l.product:price"			VALUE = "{ l.product:base_price }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:price"			VALUE = "{ RuntimeProducts.d.sale_price }">
			<MvASSIGN NAME = "l.product:sale_price"		VALUE = "{ RuntimeProducts.d.sale_price }">
		</MvIF>

		<MvIF EXPR = "{ l.data:ondemandcolumns:inventory }">
			<MvEVAL EXPR = "{ JSON_Runtime_Product_InventoryFields_Read_WithInventorySettings( l.data:inventorysettings, l.product ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.calculate_prices"			VALUE = 1>
		<MvASSIGN NAME = "l.attr_price_override"		VALUE = 0>
		<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Adjust_VariantPricing( l.product, l.product:variant_id, l.attr_price_override ) }">

		<MvCOMMENT>
		|
		| If we are able to load base_price, price and sale_price from DiscountVariantPrices, there is no need
		| to go through long form calculation of price.
		|
		| If the Inventory_Adjust_VariantPricing call above failed for any reason, the output will reflect the master product only.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT ISNULL l.data:discount_signature }">
			<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].DiscountVariantPrice_Load( l.data:discount_signature, l.product:id, l.product:variant_id, l.discountprice ) }">
				<MvASSIGN NAME = "l.product:retail"		VALUE = "{ l.product:price }">
				<MvASSIGN NAME = "l.product:base_price"	VALUE = "{ l.discountprice:base_price }">
				<MvASSIGN NAME = "l.product:price"		VALUE = "{ l.discountprice:price }">
				<MvASSIGN NAME = "l.product:sale_price"	VALUE = "{ l.discountprice:price }">

				<MvASSIGN NAME = "l.calculate_prices"	VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.calculate_prices }">
			<MvASSIGN NAME = "l.product:retail"			VALUE = "{ l.product:price }">
			<MvASSIGN NAME = "l.product:base_price"		VALUE = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Adjusted_Price( l.data:discount_state, l.product, l.product:price, l.product:cost ) }">	

			<MvIF EXPR = "{ NOT l.attr_price_override }">
				<MvEVAL EXPR = "{ JSON_Runtime_Product_Read_AddVariantAttributePriceAndWeight( l.product, l.data ) }">
			</MvIF>

			<MvASSIGN NAME = "l.product:price"			VALUE = "{ l.product:base_price }">
			<MvASSIGN NAME = "l.product:sale_price"		VALUE = "">								<MvCOMMENT> Force long-form calculation, if being output </MvCOMMENT>
		</MvIF>

		<MvIF EXPR = "{ l.data:ondemandcolumns:inventory }">
			<MvIF EXPR = "{ NOT [ g.Feature_INV_RT ].Inventory_Load_Variant( l.product, l.product:variant_id ) }">
				<MvCOMMENT>
				|
				| Fall back to master product inventory values if variant load fails
				|
				</MvCOMMENT>

				<MvEVAL EXPR = "{ JSON_Runtime_Product_InventoryFields_Read_WithInventorySettings( l.data:inventorysettings, l.product ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:category }">
		<MvASSIGN NAME = "l.product:cancat_code" VALUE = "{ RuntimeProducts.d.cancat_code }">
		<MvASSIGN NAME = "l.product:cancat_name" VALUE = "{ RuntimeProducts.d.cancat_name }">
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:page }">
		<MvASSIGN NAME = "l.product:page_id"		VALUE = "{ RuntimeProducts.d.page_id }">
		<MvASSIGN NAME = "l.product:alt_page_code"	VALUE = "{ RuntimeProducts.d.alt_page_code }">
		<MvASSIGN NAME = "l.product:alt_page_title"	VALUE = "{ RuntimeProducts.d.alt_page_title }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_Read_AddVariantAttributePriceAndWeight" PARAMETERS = "product var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.product:productvariant_count }">
		<MvASSIGN NAME = "l.product:productvariant_count"	VALUE = "{ [ g.Module_Library_DB ].ProductVariantList_Load_Variant( l.product:id, l.product:variant_id, l.product:productvariants ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.productvariant" ARRAY = "l.product:productvariants" COUNT = "{ l.product:productvariant_count }">
		<MvASSIGN NAME = "l.price"				VALUE = 0.00>
		<MvASSIGN NAME = "l.cost"				VALUE = 0.00>
		<MvASSIGN NAME = "l.weight"				VALUE = 0.00>

		<MvIF EXPR = "{ l.productvariant:attmpat_id }">
			<MvIF EXPR = "{ NOT [ g.Feature_ATT_DB ].AttributeTemplateAttr_Load_ID( l.productvariant:attmpat_id, l.attributetemplateattr ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ ( l.attributetemplateattr:type EQ 'checkbox' ) OR ( l.attributetemplateattr:type EQ 'text' ) OR ( l.attributetemplateattr:type EQ 'memo' ) }">
				<MvASSIGN NAME = "l.price"		VALUE = "{ l.attributetemplateattr:price }">
				<MvASSIGN NAME = "l.cost"		VALUE = "{ l.attributetemplateattr:cost }">
				<MvASSIGN NAME = "l.weight"		VALUE = "{ l.attributetemplateattr:weight }">
			<MvELSEIF EXPR = "{ ( l.attributetemplateattr:type EQ 'radio' ) OR ( l.attributetemplateattr:type EQ 'select' ) OR ( l.attributetemplateattr:type EQ 'swatch-select' ) }">
				<MvIF EXPR = "{ NOT [ g.Feature_ATT_DB ].AttributeTemplateOption_Load_ID( l.productvariant:option_id, l.attributetemplateoption ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.price"		VALUE = "{ l.attributetemplateoption:price }">
				<MvASSIGN NAME = "l.cost"		VALUE = "{ l.attributetemplateoption:cost }">
				<MvASSIGN NAME = "l.weight"		VALUE = "{ l.attributetemplateoption:weight }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Library_DB ].Attribute_Load_ID( l.productvariant:attr_id, l.attribute ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ ( l.attribute:type EQ 'checkbox' ) OR ( l.attribute:type EQ 'text' ) OR ( l.attribute:type EQ 'memo' ) }">
				<MvASSIGN NAME = "l.price"		VALUE = "{ l.attribute:price }">
				<MvASSIGN NAME = "l.cost"		VALUE = "{ l.attribute:cost }">
				<MvASSIGN NAME = "l.weight"		VALUE = "{ l.attribute:weight }">
			<MvELSEIF EXPR = "{ ( l.attribute:type EQ 'radio' ) OR ( l.attribute:type EQ 'select' ) OR ( l.attribute:type EQ 'swatch-select' ) }">
				<MvIF EXPR = "{ NOT [ g.Library_DB ].Option_Load_ID( l.productvariant:option_id, l.option ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.price"		VALUE = "{ l.option:price }">
				<MvASSIGN NAME = "l.cost"		VALUE = "{ l.option:cost }">
				<MvASSIGN NAME = "l.weight"		VALUE = "{ l.option:weight }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.product:retail"		VALUE = "{ l.product:retail + l.price }">
		<MvASSIGN NAME = "l.product:base_price"	VALUE = "{ l.product:base_price + [ g.Module_Feature_PGR_UT ].DiscountState_Adjusted_Price( l.data:discount_state, l.product, l.price, l.cost ) }">
		<MvASSIGN NAME = "l.product:weight"		VALUE = "{ l.product:weight + l.weight }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_InventoryFields_Read_WithInventorySettings" PARAMETERS = "inventorysettings var, product var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.product:inv_active"		VALUE = "{ RuntimeProducts.d.ips_active AND l.inventorysettings:active }">

	<MvIF EXPR = "{ NOT l.product:inv_active }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ( RuntimeProducts.d.ips_out_track EQ 'y' ) OR ( ( RuntimeProducts.d.ips_out_track EQ 'd' ) AND ( l.inventorysettings:out_track ) ) }">
		<MvASSIGN NAME = "l.product:inv_out_track"		VALUE = 1>

		<MvIF EXPR = "{ RuntimeProducts.d.ips_out_lvl_d }">
			<MvASSIGN NAME = "l.product:inv_out_level"	VALUE = "{ l.inventorysettings:out_level }">
			<MvASSIGN NAME = "l.product:inv_available"	VALUE = "{ RuntimeProducts.d.ipc_inventory - l.inventorysettings:out_level }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_out_level"	VALUE = "{ RuntimeProducts.d.ips_out_level }">
			<MvASSIGN NAME = "l.product:inv_available"	VALUE = "{ RuntimeProducts.d.ipc_inventory - RuntimeProducts.d.ips_out_level }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_out_track"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_out_level"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_available"		VALUE = "{ RuntimeProducts.d.ipc_inventory }">
	</MvIF>

	<MvIF EXPR = "{ ( RuntimeProducts.d.ips_low_track EQ 'y' ) OR ( ( RuntimeProducts.d.ips_low_track EQ 'd' ) AND ( l.inventorysettings:low_track ) ) }">
		<MvASSIGN NAME = "l.product:inv_low_track"		VALUE = 1>

		<MvIF EXPR = "{ RuntimeProducts.d.ips_low_lvl_d }">
			<MvASSIGN NAME = "l.product:inv_low_level"	VALUE = "{ l.inventorysettings:low_level }">
			<MvASSIGN NAME = "l.product:inv_instock"	VALUE = "{ RuntimeProducts.d.ipc_inventory - l.inventorysettings:low_level }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_low_level"	VALUE = "{ RuntimeProducts.d.ips_low_level }">
			<MvASSIGN NAME = "l.product:inv_instock"	VALUE = "{ RuntimeProducts.d.ipc_inventory - RuntimeProducts.d.ips_low_level }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_low_track"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_low_level"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_instock"		VALUE = "{ RuntimeProducts.d.ipc_inventory }">
	</MvIF>

	<MvIF EXPR = "{ ( l.product:inv_available LE 0 ) AND l.product:inv_out_track }">
		<MvASSIGN NAME = "l.product:inv_level"		VALUE = "out">

		<MvIF EXPR = "{ NOT ISNULL RuntimeProducts.d.ips_out_short }">
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, RuntimeProducts.d.ips_out_short ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, l.inventorysettings:out_short ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL RuntimeProducts.d.ips_out_long }">
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, RuntimeProducts.d.ips_out_long ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, l.inventorysettings:out_long ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ ( l.product:inv_instock LE 0 ) AND l.product:inv_low_track }">
		<MvASSIGN NAME = "l.product:inv_level"		VALUE = "low">

		<MvIF EXPR = "{ NOT ISNULL RuntimeProducts.d.ips_low_short }">
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, RuntimeProducts.d.ips_low_short ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, l.inventorysettings:low_short ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL RuntimeProducts.d.ips_low_long }">
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, RuntimeProducts.d.ips_low_long ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, l.inventorysettings:low_long ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_level"		VALUE = "in">

		<MvIF EXPR = "{ NOT ISNULL RuntimeProducts.d.ips_in_short }">
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, RuntimeProducts.d.ips_in_short ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, l.inventorysettings:in_short ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL RuntimeProducts.d.ips_in_long }">
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, RuntimeProducts.d.ips_in_long ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Tokenize_Message( l.product, l.inventorysettings:in_long ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product" PARAMETERS = "product var, data var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.data:ondemandcolumns:discounts OR ( l.data:ondemandcolumns:sale_price AND ISNULL l.product:sale_price ) }">
		<MvEVAL EXPR = "{ JSON_Runtime_Product_DiscountState_Create( l.data:discount_state ) }">

		<MvCOMMENT>
		|
		| Always calculate the discounts / predicted price based on the base price of the product
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.original_price"	VALUE = "{ l.product:price }">
		<MvASSIGN NAME = "l.product:price"	VALUE = "{ l.product:base_price }">
		<MvASSIGN NAME = "l.result"			VALUE = "{ [ g.Feature_PGR_UT ].DiscountState_Predict_Product_Discounts_WithProductSubscriptionTerm( l.data:discount_state, l.product, 0, l.product:variant_id, 1, l.predicted_price, l.discounts, l.discount_count ) }">
		<MvASSIGN NAME = "l.product:price"	VALUE = "{ l.original_price }">

		<MvIF EXPR = "{ l.data:ondemandcolumns:sale_price }">
			<MvIF EXPR = "{ NOT l.result }">
				<MvASSIGN NAME = "l.product:sale_price" VALUE = "{ l.product:price }">
			<MvELSE>
				<MvASSIGN NAME = "l.product:price"		VALUE = "{ l.predicted_price }">
				<MvASSIGN NAME = "l.product:sale_price"	VALUE = "{ l.predicted_price }">
			</MvIF>
		</MvIF>
	</MvIF>

	"id":						<MvEVAL EXPR = "{ int( l.product:id ) }">,
	"code":						"<MvEVAL EXPR = "{ JSON_Encode( l.product:code ) }">",
	"name":						"<MvEVAL EXPR = "{ JSON_Encode( l.product:name ) }">",
	"sku":						"<MvEVAL EXPR = "{ JSON_Encode( l.product:sku ) }">",
	"image":					"<MvEVAL EXPR = "{ JSON_Encode( l.product:image ) }">",
	"thumbnail":				"<MvEVAL EXPR = "{ JSON_Encode( l.product:thumbnail ) }">",
	"disp_order":				<MvEVAL EXPR = "{ int( l.product:disp_order ) }">,
	"output_disp_order":		<MvEVAL EXPR = "{ int( l.product:output_disp_order ) }">,
	"dt_created":				<MvEVAL EXPR = "{ JSON_DateTime( l.product:dt_created ) }">,
	"dt_updated":				<MvEVAL EXPR = "{ JSON_DateTime( l.product:dt_updated ) }">,
	"weight":					<MvEVAL EXPR = "{ encodejavascriptnumber( l.product:weight ) }">,
	"formatted_weight":			"<MvEVAL EXPR = "{ JSON_Encode( [ g.Library_Utilities ].Format_Weight( l.product:weight ) ) }">",
	"taxable":					<MvEVAL EXPR = "{ JSON_Boolean( l.product:taxable ) }">,
	"price":					<MvEVAL EXPR = "{ encodejavascriptnumber( l.product:price ) }">,
	"formatted_price":			"<MvEVAL EXPR = "{ JSON_Encode( [ g.Module_Store_Module_Currency ].CurrencyModule_AddFormatting( g.Store_Module_Currency, l.product:price ) ) }">",
	"retail":					<MvEVAL EXPR = "{ encodejavascriptnumber( l.product:retail ) }">,
	"formatted_retail":			"<MvEVAL EXPR = "{ JSON_Encode( [ g.Module_Store_Module_Currency ].CurrencyModule_AddFormatting( g.Store_Module_Currency, l.product:retail ) ) }">",
	"base_price":				<MvEVAL EXPR = "{ encodejavascriptnumber( l.product:base_price ) }">,
	"formatted_base_price":		"<MvEVAL EXPR = "{ JSON_Encode( [ g.Module_Store_Module_Currency ].CurrencyModule_AddFormatting( g.Store_Module_Currency, l.product:base_price ) ) }">",
	"quantity":					<MvEVAL EXPR = "{ int( [ g.Library_DB ].Basket_Quantity( g.Basket:basket_id, l.product:id ) ) }">,
	"url":						"<MvEVAL EXPR = "{ JSON_Encode( [ g.Feature_URI_UT ].Store_Product_URL( l.product, miva_array_deserialize( ':nosession=1' ) ) ) }">"

	<MvIF EXPR = "{ l.data:ondemandcolumns:descrip }">
		,"descrip": "<MvEVAL EXPR = "{ JSON_Encode( l.product:descrip ) }">"
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:attributes }">
		,"attributes": <MvEVAL EXPR = "{ JSON_Runtime_Product_AttributeAndOption( l.product ) }">
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:sale_price }">
		,"sale_price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.product:sale_price ) }">,
		"formatted_sale_price":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Module_Store_Module_Currency ].CurrencyModule_AddFormatting( g.Store_Module_Currency, l.product:sale_price ) ) }">"
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:inventory }">
		,"inv_active":		<MvEVAL EXPR = "{ JSON_Boolean( l.product:inv_active ) }">,
		"inv_level":		"<MvEVAL EXPR = "{ JSON_Encode( l.product:inv_level ) }">",
		"inv_available":	<MvEVAL EXPR = "{ int( l.product:inv_available ) }">,
		"inv_instock":		<MvEVAL EXPR = "{ int( l.product:inv_instock ) }">,
		"inv_short":		"<MvEVAL EXPR = "{ JSON_Encode( l.product:inv_short ) }">",
		"inv_long":			"<MvEVAL EXPR = "{ JSON_Encode( l.product:inv_long ) }">"
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:page }">
		<MvIF EXPR = "{ l.product:page_id }">
			<MvASSIGN NAME = "l.page_id"	VALUE = "{ l.product:page_id }">
			<MvASSIGN NAME = "l.page_code"	VALUE = "{ l.product:alt_page_code }">
			<MvASSIGN NAME = "l.page_title"	VALUE = "{ l.product:alt_page_title }">
		<MvELSEIF EXPR = "{ [ g.Feature_TUI_DB ].Page_Load_Code_Cached( 'PROD', l.page ) }">
			<MvASSIGN NAME = "l.page_id"	VALUE = "{ l.page:id }">
			<MvASSIGN NAME = "l.page_code"	VALUE = "{ l.page:code }">
			<MvASSIGN NAME = "l.page_title"	VALUE = "{ l.page:title }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.page_id }">
			,"page":
			{
				"id":		<MvEVAL EXPR = "{ int( l.page_id ) }">,
				"code":		"<MvEVAL EXPR = "{ JSON_Encode( l.page_code ) }">",
				"title":	"<MvEVAL EXPR = "{ JSON_Encode( l.page_title ) }">"
			}
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:category }">
		<MvIF EXPR = "{ l.product:cancat_id }">
			<MvASSIGN NAME = "l.category_id"	VALUE = "{ l.product:cancat_id }">
			<MvASSIGN NAME = "l.category_code"	VALUE = "{ l.product:cancat_code }">
			<MvASSIGN NAME = "l.category_name"	VALUE = "{ l.product:cancat_name }">
		<MvELSEIF EXPR = "{ [ g.Library_DB ].Runtime_Category_Load_Product_First( l.product:id, l.category ) }">
			<MvASSIGN NAME = "l.category_id"	VALUE = "{ l.category:id }">
			<MvASSIGN NAME = "l.category_code"	VALUE = "{ l.category:code }">
			<MvASSIGN NAME = "l.category_name"	VALUE = "{ l.category:name }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.category_id }">
			,"category":
			{
				"id":	<MvEVAL EXPR = "{ int( l.category_id ) }">,
				"code":	"<MvEVAL EXPR = "{ JSON_Encode( l.category_code ) }">",
				"name":	"<MvEVAL EXPR = "{ JSON_Encode( l.category_name ) }">",
				"url":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Feature_URI_UT ].Store_Category_Code_URL( l.category_code, l.null ) ) }">"
			}
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:discounts }">
		,"discounts":
		[
			<MvFOREACH ITERATOR = "l.discount" ARRAY = "l.displayable_discounts" COUNT = "{ miva_array_filter_ref( l.discounts, 1, l.discount, 'l.discount:display', l.displayable_discounts ) }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.discount_output_count ) }">
				"descrip":				"<MvEVAL EXPR = "{ JSON_Encode( l.discount:descrip ) }">",
				"discount":				<MvEVAL EXPR = "{ l.discount:discount ROUND 2 }">,
				"formatted_discount":	"<MvEVAL EXPR = "{ JSON_Encode( [ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency:module, l.discount:discount ) ) }">"
				<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
			</MvFOREACH>
		]
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:subscriptionsettings }">
		<MvIF EXPR = "{ [ g.Module_Feature_SUB_DB ].ProductSubscriptionSettings_Load_ProductOrDefault( l.product:id, l.productsubscriptionsettings ) }">
			,"subscriptionsettings":
			{
				<MvEVAL EXPR = "{ [ g.Module_Feature_SUB_JSON ].JSON_ProductSubscriptionSettings( l.productsubscriptionsettings ) }">
			}
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:subscriptionterms }">
		<MvASSIGN NAME = "l.productsubscriptionterm_count" VALUE = 0>

		,"subscriptionterms":
		[
			<MvFOREACH ITERATOR = "l.productsubscriptionterm" ARRAY = "l.productsubscriptionterms" COUNT = "{ [ g.Module_Feature_SUB_DB ].ProductSubscriptionTermList_Load_Product( l.product:id, l.productsubscriptionterms ) }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.productsubscriptionterm_count ) }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_SUB_JSON ].JSON_ProductSubscriptionTerm( l.productsubscriptionterm ) }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
			</MvFOREACH>
		]
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:quantity_in_wishlists }">
		<MvASSIGN NAME = "l.quantity_in_wishlists" VALUE = 0>

		<MvIF EXPR = "{ g.Basket:cust_id AND g.Customer_Session_Verified }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_WSH_DB ].WishListItemQuantity_Load_Customer_And_Product( g.Basket:cust_id, l.product:id, l.quantity_in_wishlists ) }">
		</MvIF>

		,"quantity_in_wishlists": <MvEVAL EXPR = "{ encodejavascriptnumber( l.quantity_in_wishlists ) }">
	</MvIF>

	<MvIF EXPR = "{ l.data:filters:images }">
		<MvASSIGN NAME = "l.image_output_count" VALUE = 0>

		,"images":
		[
			<MvIF EXPR = "{ l.data:images:original OR l.data:images:constraint_count GT 0 }">
				<MvFOREACH ITERATOR = "l.productimagedata" ARRAY = "l.productimagedatalist" COUNT = "{ [ g.Library_DB ].ProductImageDataList_Load_Product_Variant_Constrained( l.product:id, l.product:variant_id, l.data:images:constraints, l.data:images:constraint_count, l.productimagedatalist ) }">
					<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.image_output_count ) }">
					"code":		"<MvEVAL EXPR = "{ JSON_Encode( l.productimagedata:imagetype:code ) }">",
					"descrip":	"<MvEVAL EXPR = "{ JSON_Encode( l.productimagedata:imagetype:descrip ) }">",
					"sizes":
					{
						<MvASSIGN NAME = "l.size_image_count"		VALUE = 0>

						<MvIF EXPR = "{ l.data:images:original }">
							"original":
							{
								"url":		"<MvEVAL EXPR = "{ encodejavascriptstring( g.basehref $ l.productimagedata:image:image ) }">",
								"width":	<MvEVAL EXPR = "{ int( l.productimagedata:image:width ) }">,
								"height":	<MvEVAL EXPR = "{ int( l.productimagedata:image:height ) }">
							}

							<MvASSIGN NAME = "l.size_image_count"	VALUE = "{ l.size_image_count + 1 }">
						</MvIF>

						<MvFOREACH INDEX = "l.pos" ITERATOR = "l.constraint" ARRAY = "l.data:images:constraints" COUNT = "{ l.data:images:constraint_count }">
							<MvREFERENCEARRAY NAME = "l.generatedimage" VARIABLE = "l.productimagedata:generatedimages">
								<MvDIMENSION INDEX = "{ l.pos }">
							</MvREFERENCEARRAY>

							<MvIF EXPR = "{ ISNULL l.generatedimages:image }">
								<MvIF EXPR = "{ NOT [ g.Library_DB ].GeneratedImage_FindOrInsert_Image_Dimensions( l.productimagedata:image, l.constraint:width, l.constraint:height, l.generatedimage ) }">
									<MvFOREACHCONTINUE>
								</MvIF>
							</MvIF>

							<MvIF EXPR = "{ ++l.size_image_count GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ encodejavascriptstring( l.constraint:width $ 'x' $ l.constraint:height ) }">":
							{
								"url":		"<MvEVAL EXPR = "{ JSON_Encode( g.basehref $ l.generatedimage:image ) }">",
								"width":	<MvEVAL EXPR = "{ int( l.generatedimage:width ) }">,
								"height":	<MvEVAL EXPR = "{ int( l.generatedimage:height ) }">
							}
						</MvFOREACH>
					}
					<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
				</MvFOREACH>
			</MvIF>
		]
	</MvIF>

	<MvIF EXPR = "{ l.data:filters:imagetypes }">
		<MvASSIGN NAME = "l.imagetype_output_count" VALUE = 0>

		,"imagetypes":
		{
			<MvFOREACH ITERATOR = "l.imagetype" ARRAY = "l.data:imagetypes" COUNT = "{ l.data:imagetype_count }">
				<MvFOREACH ITERATOR = "l.productimagedata" ARRAY = "l.productimagedatalist" COUNT = "{ [ g.Library_DB ].ProductImageDataList_Load_Product_Variant_TypeCodes_Constrained( l.product:id, l.product:variant_id, l.imagetype:types, l.imagetype:type_count, l.imagetype:constraints, l.imagetype:constraint_count, l.productimagedatalist ) }">
					<MvIF EXPR = "{ ++l.imagetype_output_count GT 1 }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ JSON_Encode( l.productimagedata:imagetype:code ) }">":
					{
						"descrip": "<MvEVAL EXPR = "{ JSON_Encode( l.productimagedata:imagetype:descrip ) }">",
						"sizes":
						{
							<MvASSIGN NAME = "l.size_image_count"		VALUE = 0>

							<MvIF EXPR = "{ l.imagetype:original }">
								"original":
								{
									"url":		"<MvEVAL EXPR = "{ encodejavascriptstring( g.basehref $ l.productimagedata:image:image ) }">",
									"width":	<MvEVAL EXPR = "{ int( l.productimagedata:image:width ) }">,
									"height":	<MvEVAL EXPR = "{ int( l.productimagedata:image:height ) }">
								}

								<MvASSIGN NAME = "l.size_image_count"	VALUE = "{ l.size_image_count + 1 }">
							</MvIF>

							<MvFOREACH INDEX = "l.pos" ITERATOR = "l.constraint" ARRAY = "l.imagetype:constraints" COUNT = "{ l.imagetype:constraint_count }">
								<MvREFERENCEARRAY NAME = "l.generatedimage" VARIABLE = "l.productimagedata:generatedimages">
									<MvDIMENSION INDEX = "{ l.pos }">
								</MvREFERENCEARRAY>

								<MvIF EXPR = "{ ISNULL l.generatedimages:image }">
									<MvIF EXPR = "{ NOT [ g.Library_DB ].GeneratedImage_FindOrInsert_Image_Dimensions( l.productimagedata:image, l.constraint:width, l.constraint:height, l.generatedimage ) }">
										<MvFOREACHCONTINUE>
									</MvIF>
								</MvIF>

								<MvIF EXPR = "{ ++l.size_image_count GT 1 }">
									,
								</MvIF>

								"<MvEVAL EXPR = "{ encodejavascriptstring( l.constraint:width $ 'x' $ l.constraint:height ) }">":
								{
									"url":		"<MvEVAL EXPR = "{ JSON_Encode( g.basehref $ l.generatedimage:image ) }">",
									"width":	<MvEVAL EXPR = "{ int( l.generatedimage:width ) }">,
									"height":	<MvEVAL EXPR = "{ int( l.generatedimage:height ) }">
								}
							</MvFOREACH>
						}
					}
				</MvFOREACH>
			</MvFOREACH>
		}
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_Fragments" PARAMETERS = "json_product var, data var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvCOMMENT>
	|
	| Fragments operate on the product record being output so we take the raw data, turn it into an object, and decode it
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT miva_json_decode( '{' $ l.json_product $ '}', l.product ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.page_settings"				VALUE = "">
	<MvASSIGN NAME = "l.page_settings:page"			VALUE = "">
	<MvREFERENCE NAME = "l.page_settings:product"	VARIABLE = "l.product">

	<MvCOMMENT>
	|
	| Build template safe imagetype codes
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL l.product:imagetypes }">
		<MvASSIGN NAME = "l.copied_imagetypes" VALUE = "{ l.product:imagetypes }">
		<MvEVAL EXPR = "{ miva_member_delete( l.product, 'imagetypes' ) }">

		<MvFOREACH ITERATOR = "l.imagetype_code" ARRAY = "l.imagetype_codes" COUNT = "{ miva_struct_members( l.copied_imagetypes, l.imagetype_codes ) }">
			<MvASSIGN NAME = "l.template_safe_imagetype_code" VALUE = "{ [ g.Module_Feature_TUI_UT ].StripSpecialCharacters_TemplateCode( l.imagetype_code ) }">

			<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.copied_imagetypes">
				<MvMEMBER NAME = "{ l.imagetype_code }">
			</MvREFERENCEARRAY>

			<MvASSIGNARRAY NAME = "l.page_settings:product:imagetypes" VALUE = "{ l.value }">
				<MvMEMBER NAME = "{ l.template_safe_imagetype_code }">
			</MvASSIGNARRAY>
		</MvFOREACH>
	</MvIF>

	<MvCOMMENT>
	|
	| Build template safe custom fields
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL l.product:CustomField_Values }">
		<MvASSIGN NAME = "l.copied_customfield_values" VALUE = "{ l.product:CustomField_Values }">
		<MvEVAL EXPR = "{ miva_member_delete( l.product, 'CustomField_Values' ) }">

		<MvFOREACH ITERATOR = "l.module_code" ARRAY = "l.module_codes" COUNT = "{ miva_struct_members( l.copied_customfield_values, l.module_codes ) }">
			<MvASSIGN NAME = "l.template_safe_module_code" VALUE = "{ [ g.Module_Feature_TUI_UT ].StripSpecialCharacters_TemplateCode( l.module_code ) }">

			<MvREFERENCEARRAY NAME = "l.module_fields" VARIABLE = "l.copied_customfield_values">
				<MvMEMBER NAME = "{ l.module_code }">
			</MvREFERENCEARRAY>

			<MvFOREACH ITERATOR = "l.field_code" ARRAY = "l.field_codes" COUNT = "{ miva_struct_members( l.module_fields, l.field_codes ) }">
				<MvASSIGN NAME = "l.template_safe_field_code" VALUE = "{ [ g.Module_Feature_TUI_UT ].StripSpecialCharacters_TemplateCode( l.field_code ) }">

				<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.module_fields">
					<MvMEMBER NAME = "{ l.field_code }">
				</MvREFERENCEARRAY>

				<MvASSIGNARRAY NAME = "l.page_settings:product:customfield_values" VALUE = "{ l.value }">
					<MvMEMBER NAME = "{ l.template_safe_module_code }">
					<MvMEMBER NAME = "{ l.template_safe_field_code }">
				</MvASSIGNARRAY>
			</MvFOREACH>
		</MvFOREACH>
	</MvIF>

	<MvCOMMENT>
	|
	| Render the fragments
	|
	</MvCOMMENT>

	,"fragments":
	{
		<MvFOREACH ITERATOR = "l.fragment_code" ARRAY = "l.data:fragment_codes" INDEX = "l.pos" COUNT = "{ l.data:fragment_code_count }">
			<MvIF EXPR = "{ l.pos GT 1 }">
				,
			</MvIF>

			<MvASSIGN NAME = "l.output"	VALUE = "">
			<MvASSIGN NAME = "l.share"	VALUE = "">

			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code_Cached( l.fragment_code, l.fragment ) AND l.fragment:fragment AND l.fragment:public }">
				<MvCAPTURE VARIABLE = "l.output"><MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Fragment_Render_LowLevel( l.page_settings, l.fragment, l.share ) }"></MvCAPTURE>	
			</MvIF>			

			"<MvEVAL EXPR = "{ JSON_Encode( l.fragment_code ) }">": "<MvEVAL EXPR = "{ JSON_Encode( l.output ) }">"
		</MvFOREACH>
	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ProductCustomFieldList_Load" PARAMETERS = "fields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ JSON_Product_CustomFieldsList_Load_Cached( l.fields ) }">

	<MvFUNCTIONRETURN VALUE = "{ miva_array_filter_ref( l.fields, 1, l.field, 'l.field:public EQ 1', l.fields ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_CustomFields_Initialize" PARAMETERS = "filter var, customfield_state var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.field_count" VALUE = "{ JSON_Runtime_ProductCustomFieldList_Load( l.fields ) }">

	<MvFUNCTIONRETURN VALUE = "{ JSON_Product_CustomFieldList_Initialize( l.filter, l.fields, l.field_count, l.customfield_state ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_OrderBy" PARAMETERS = "query var, sort" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| We need to make sure if we are sorting by a custom field that the field is a public field before
	| calling Runtime_ProductList_Build_Query_ORDER_BY.  If the field is not public we should set a default
	| sort and exit.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( ( 'customfield:' IN l.sort ) EQ 1 ) OR
					( ( 'customfield_desc:' IN l.sort ) ) EQ 1 }">
		<MvASSIGN NAME = "l.module_code"	VALUE = "{ gettoken( l.sort, ':', 2 ) }">
		<MvASSIGN NAME = "l.field_code"		VALUE = "{ gettoken( l.sort, ':', 3 ) }">

		<MvIF EXPR = "{ NOT JSON_Runtime_Product_CustomField_Filter( l.query, l.module_code, l.field_code ) }">
			<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_ORDER_BY( l.query, 'prod.id', '' ) }">

			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Library_DB ].Runtime_ProductList_Build_Query_ORDER_BY( l.query, l.sort ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_CustomField_Filter" PARAMETERS = "query var, module_code, field_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.module_code EQ '*' OR l.field_code EQ '*' }">
		<MvCOMMENT>
		|
		| See JSON_Runtime_Product_CustomFields_Query
		|
		</MvCOMMENT>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT JSON_Runtime_ProductCustomFieldList_Load( l.customfields ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ miva_array_search( l.customfields, 1, l.customfield, 'strcasecmp( l.customfield:module:code, l.module_code ) EQ 0 AND strcasecmp( l.customfield:code, l.field_code ) EQ 0' ) GT 0 }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_ProductList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'runtime_search' }">
		<MvASSIGN NAME = "l.data:runtime_search"			VALUE = "">

		<MvIF EXPR = "{ miva_variable_type( l.filter_value ) NE 'STRUCTURE' }">
			<MvASSIGN NAME = "l.data:runtime_search:search"	VALUE = "{ l.filter_value }">
			<MvASSIGN NAME = "l.data:runtime_search:origin"	VALUE = "Runtime API">
			<MvASSIGN NAME = "l.data:runtime_search:type"	VALUE = "system">
		<MvELSE>
			<MvASSIGN NAME = "l.data:runtime_search:search"	VALUE = "{ l.filter_value:search }">
			<MvASSIGN NAME = "l.data:runtime_search:origin"	VALUE = "{ ternary( ISNULL l.filter_value:origin, 'Runtime API', l.filter_value:origin ) }">
			<MvASSIGN NAME = "l.data:runtime_search:type"	VALUE = "{ ternary( ISNULL l.filter_value:type, 'system', l.filter_value:type ) }">
			<MvASSIGN NAME = "l.data:runtime_search:index"	VALUE = "{ l.filter_value:index }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.filter_name EQ 'facets' }">
		<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_Data_Reference( l.query, 'Runtime_ProductList', l.query_params ) }">

		<MvASSIGN NAME = "l.data:query_facets" 			VALUE = "">
		<MvASSIGN NAME = "l.data:query_facet_count" 	VALUE = 0>

		<MvIF EXPR = "{ l.query_params:data:category }">	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_FCT_UT ].FacetList_Load_Category_Cached( l.query_params:data:category, l.facets ) }">
		<MvELSE>											<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_FCT_UT ].FacetList_Load_All_Cached( l.facets ) }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.facet" ARRAY = "l.enabled_facets" COUNT = "{ miva_array_filter_ref( l.facets, 1, l.facet, 'l.facet:handle EQ \'show\' OR l.facet:handle EQ \'hide\'', l.enabled_facets ) }">
			<MvIF EXPR = "{ miva_member_exists( l.filter_value, l.facet:code ) }">
				<MvREFERENCE NAME = "l.facet_value" VARIABLE = "{ 'l.filter_value:' $ l.facet:code }">
			<MvELSE>
				<MvREFERENCE NAME = "l.facet_value" VARIABLE = "{ 'g.' $ l.facet:code }">
			</MvIF>

			<MvIF EXPR = "{ ISNULL l.facet_value }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_array_elements( l.facet_value ) }">
				<MvASSIGN NAME = "l.facet:input_value_count" 	VALUE = "{ miva_array_insert_var( l.facet:input_values, l.facet_value, -1 ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.facet:input_values" 		VALUE = "{ l.facet_value }">
				<MvASSIGN NAME = "l.facet:input_value_count" 	VALUE = "{ miva_array_elements( l.facet:input_values ) }">
			</MvIF>

			<MvASSIGN NAME = "l.data:query_facet_count" 		VALUE = "{ miva_array_insert_var( l.data:query_facets, l.facet, -1 ) }">
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data:ondemandcolumns" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.filter_name EQ 'images' }">
		<MvASSIGN NAME = "l.data:filters:images"							VALUE = 1>
		<MvASSIGN NAME = "l.data:image:original"							VALUE = 0>
		<MvASSIGN NAME = "l.data:images:constraints"						VALUE = "">
		<MvASSIGN NAME = "l.data:images:constraint_count"					VALUE = 0>
		
		<MvIF EXPR = "{ ISNULL l.filter_value }">
			<MvASSIGN NAME = "l.data:images:original"						VALUE = 1>
		<MvELSE>
			<MvFOREACH ITERATOR = "l.size" ARRAY = "l.filter_value:sizes">
				<MvIF EXPR = "{ l.size EQ 'original' }">
					<MvASSIGN NAME = "l.data:images:original"				VALUE = 1>
				<MvELSE>
					<MvASSIGN NAME = "l.width"								VALUE = "{ int( trim( gettoken( l.size, 'x', 1 ) ) ) }">
					<MvASSIGN NAME = "l.height"								VALUE = "{ int( trim( gettoken( l.size, 'x', 2 ) ) ) }">

					<MvIF EXPR = "{ l.width LE 0 OR l.height LE 0 }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<MvASSIGN NAME = "l.constraint"							VALUE = "">
					<MvASSIGN NAME = "l.constraint:width"					VALUE = "{ l.width }">
					<MvASSIGN NAME = "l.constraint:height"					VALUE = "{ l.height }">

					<MvIF EXPR = "{ NOT miva_array_search( l.data:images:constraints, 1, l.existing_constraint, 'l.existing_constraint:width EQ l.constraint:width AND l.existing_constraint:height EQ l.constraint:height' ) }">
						<MvASSIGN NAME = "l.data:images:constraint_count"	VALUE = "{ miva_array_insert_var( l.data:images:constraints, l.constraint, -1 ) }">
					</MvIF>
				</MvIF>
			</MvFOREACH>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.filter_name EQ 'imagetypes' }">
		<MvCOMMENT>
		|
		| The "imagetypes" filter can be specified multiple times.  This allows
		| multiple imagetypes to be specified with different sizes.  I.e. "main"
		| is requested with sizes "500x500" and and "mini" is requested with
		| sizes "50x50".
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ISNULL l.data:filters:imagetypes }">
			<MvASSIGN NAME = "l.data:filters:imagetypes"				VALUE = 1>
			<MvASSIGN NAME = "l.data:imagetypes"						VALUE = "">
			<MvASSIGN NAME = "l.data:imagetype_count"					VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.imagetype"									VALUE = "">
		<MvASSIGN NAME = "l.imagetype:types"							VALUE = "">
		<MvASSIGN NAME = "l.imagetype:original"							VALUE = 0>
		<MvASSIGN NAME = "l.imagetype:constraints"						VALUE = "">
		<MvASSIGN NAME = "l.imagetype:constraint_count"					VALUE = 0>

		<MvIF EXPR = "{ NOT ISNULL l.filter_value:type }">		<MvASSIGN NAME = "l.imagetype:types[ 1 ]"	VALUE = "{ l.filter_value:type }">
		<MvELSEIF EXPR = "{ NOT ISNULL l.filter_value:types }">	<MvASSIGN NAME = "l.imagetype:types"		VALUE = "{ l.filter_value:types }">
		<MvELSE>												<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.imagetype:type_count"						VALUE = "{ miva_array_elements( l.imagetype:types ) }">

		<MvIF EXPR = "{ ISNULL l.filter_value:sizes }">
			<MvASSIGN NAME = "l.imagetype:original"						VALUE = 1>
		<MvELSE>
			<MvFOREACH ITERATOR = "l.size" ARRAY = "l.filter_value:sizes">
				<MvIF EXPR = "{ l.size EQ 'original' }">
					<MvASSIGN NAME = "l.imagetype:original"				VALUE = 1>
				<MvELSE>
					<MvASSIGN NAME = "l.width"							VALUE = "{ int( trim( gettoken( l.size, 'x', 1 ) ) ) }">
					<MvASSIGN NAME = "l.height"							VALUE = "{ int( trim( gettoken( l.size, 'x', 2 ) ) ) }">

					<MvIF EXPR = "{ l.width LE 0 OR l.height LE 0 }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<MvASSIGN NAME = "l.constraint"						VALUE = "">
					<MvASSIGN NAME = "l.constraint:width"				VALUE = "{ l.width }">
					<MvASSIGN NAME = "l.constraint:height"				VALUE = "{ l.height }">

					<MvIF EXPR = "{ NOT miva_array_search( l.imagetype:constraints, 1, l.existing_constraint, 'l.existing_constraint:width EQ l.constraint:width AND l.existing_constraint:height EQ l.constraint:height' ) }">
						<MvASSIGN NAME = "l.imagetype:constraint_count"	VALUE = "{ miva_array_insert_var( l.imagetype:constraints, l.constraint, -1 ) }">
					</MvIF>
				</MvIF>
			</MvFOREACH>
		</MvIF>

		<MvIF EXPR = "{ l.imagetype:original OR l.imagetype:constraint_count GT 0 }">
			<MvASSIGN NAME = "l.data:imagetype_count"					VALUE = "{ miva_array_insert_var( l.data:imagetypes, l.imagetype, -1 ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.filter_name EQ 'fragments' }">
		<MvASSIGN NAME = "l.data:filters:fragments"		VALUE = 0>
		<MvASSIGN NAME = "l.data:fragment_codes"		VALUE = "">
		<MvASSIGN NAME = "l.data:fragment_code_count"	VALUE = 0>

		<MvFOREACH ITERATOR = "l.value" ARRAY = "l.filter_value">
			<MvASSIGN NAME = "l.value" VALUE = "{ trim( l.value ) }">

			<MvIF EXPR = "{ NOT ISNULL l.value }">
				<MvIF EXPR = "{ NOT miva_array_search( l.data:fragment_codes, 1, l.element, 'strcasecmp( l.element, l.value ) EQ 0' ) }">
					<MvASSIGN NAME = "l.data:fragment_code_count" VALUE = "{ miva_array_insert_var( l.data:fragment_codes, l.value, -1 ) }">
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.data:filters:fragments"		VALUE = "{ l.data:fragment_code_count GT 0 }">
	<MvELSEIF EXPR = "{ l.filter_name EQ 'variant_ids' }">
		<MvASSIGN NAME = "l.data:variant_ids"			VALUE = "{ l.filter_value }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Product_CustomFields_Query" PARAMETERS = "query var, module var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.module EQ '*' }">
		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Library_DB ].StoreModuleList_Load_Features_Cached( 'fields_prod', l.modules ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Library_DB ].Module_Load_Features_Cached( l.module ) }">

			<MvIF EXPR = "{ NOT JSON_Runtime_Product_CustomFields_Query( l.query, l.module, '*' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ ( l.module:api_ver LT 9.07 ) OR ( NOT l.module:feature_hash:fields_prod ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.code EQ '*' }">
		<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.customfields" COUNT = "{ JSON_Runtime_ProductCustomFieldList_Load( l.customfields ) }">
			<MvIF EXPR = "{ strcasecmp( l.module:code, l.customfield:module:code ) EQ 0 }">
				<MvIF EXPR = "{ NOT JSON_Runtime_Product_CustomFields_Query( l.query, l.module, l.customfield:code ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_ProductCustomFieldList_Load( l.customfields ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT miva_array_search( l.customfields, 1, l.customfield, 'strcasecmp( l.customfield:module:code, l.module:code ) EQ 0 AND strcasecmp( l.customfield:code, l.code ) EQ 0' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Product_CustomFields_Query( l.query, l.module, l.code ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_ParseFilters" PARAMETERS = "cache var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.filter" 			VALUE = "">
	<MvASSIGN NAME = "l.sort" 				VALUE = "">
	<MvASSIGN NAME = "l.offset" 			VALUE = "">
	<MvASSIGN NAME = "l.count" 				VALUE = "">

	<MvASSIGN NAME = "l.null" 				VALUE = "{ JSON_Input_Filter(	'o', 'Filter',	l.filter ) }">
	<MvASSIGN NAME = "l.null" 				VALUE = "{ JSON_Input_Text(		'o', 'Sort',	l.sort ) }">
	<MvASSIGN NAME = "l.null" 				VALUE = "{ JSON_Input_Integer(	'o', 'Offset',	l.offset ) }">
	<MvASSIGN NAME = "l.null" 				VALUE = "{ JSON_Input_Integer(	'o', 'Count',	l.count ) }">

	<MvASSIGN NAME = "l.cache:keys:filter" 	VALUE = "{ miva_array_serialize( l.filter ) }">
	<MvASSIGN NAME = "l.cache:keys:sort" 	VALUE = "{ l.sort }">
	<MvASSIGN NAME = "l.cache:keys:offset" 	VALUE = "{ l.offset }">
	<MvASSIGN NAME = "l.cache:keys:count" 	VALUE = "{ l.count }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_Enabled" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Store:cache_type EQ 'none' }">								<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ g.Basket:cust_id NE 0 }">									<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Basket_Is_Empty( g.Basket ) }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSE>																		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_Connect" PARAMETERS = "conn_id var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Store:cache_type EQ 'redis' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_CHE_UT ].Store_Cache_Redis_Connect( l.conn_id ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_Output" PARAMETERS = "conn_id var, cache var, cache_key var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.header_key" VALUE = "{ crypto_md5( miva_array_serialize( l.cache:keys ) ) }">
	<MvASSIGN NAME = "l.cache_key" 	VALUE = "{ l.cache:func_name $ ':' $ l.header_key }">

	<MvIF EXPR = "{ NOT JSON_Runtime_Cache_Get_Response( l.conn_id, l.cache_key, l.cache ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'hit ' $ l.header_key ) }">
	<MvEVAL EXPR = "{ l.cache:response }">

	<MvFUNCTIONRETURN VALUE = 1>	
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_Redis_Set_Response" PARAMETERS = "conn_id, cache_key, response var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ JSON_Runtime_Cache_Redis_Set_Response_Load_LUA( l.sha1, l.script ) }">

	<MvASSIGN NAME = "l.keys"				VALUE = "">
	<MvASSIGN NAME = "l.args"				VALUE = "">

	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, l.cache_key,								-1 ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, 'response',								-1 ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, 'compression',							-1 ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, JSON_Runtime_Cache_Redis_Page_Cache_Stats_Key(),	-1 ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, 'misses',									-1 ) }">

	<MvASSIGN NAME = "l.compressed" 		VALUE = 0>

	<MvIF EXPR = "{ g.Store:cache_comp }">
		<MvASSIGN NAME = "l.compressed" 	VALUE = "{ bzip2_compress( l.response, 1, l.response_compressed ) }">
	</MvIF>

	<MvIF EXPR = "{ l.compressed }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert_ref( l.args, l.response_compressed,	-1 ) }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert( l.args, 'bzip2',						-1 ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert_ref( l.args, l.response,				-1 ) }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert( l.args, '',							-1 ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert_var( l.args, g.Store:redisex,			-1 ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_CHE_UT ].Cache_Redis_Load_And_Execute_LUA( l.conn_id, l.sha1, l.script, l.keys, l.args, l.null ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_Get_Response" PARAMETERS = "conn_id, cache_key, cache var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.cache"			VALUE = "">
	<MvASSIGN NAME = "l.cache:response"	VALUE = "">

	<MvCOMMENT>
	|
	| Cache managers will return the following:
	|	-1: The cache_key does not exist and the cache structure is not populated
	|	 0: An error has occurred within the cache
	|	 1: The cache_key does exist and the cache structure is populated
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.result"			VALUE = 0>

	<MvIF EXPR = "{ g.Store:cache_type EQ 'redis' }">
		<MvASSIGN NAME = "l.result"		VALUE = "{ JSON_Runtime_Cache_Redis_Get_Response( l.conn_id, l.cache_key, l.cache ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Convert the cache result to a 1/0 and ignore all errors as we don't want
	| to bubble up any cache errors.  -1/0 will cause the page to be fully rendered.
	|
	</MvCOMMENT>

	<MvFUNCTIONRETURN VALUE = "{ l.result EQ 1 }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_Redis_Get_Response" PARAMETERS = "conn_id, cache_key, cache var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ JSON_Runtime_Cache_Redis_Get_Response_Load_LUA( l.sha1, l.script ) }">

	<MvASSIGN NAME = "l.keys"	VALUE = "">
	<MvASSIGN NAME = "l.args"	VALUE = "">

	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, l.cache_key,										-1 ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, 'response',										-1 ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, 'compression',									-1 ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, JSON_Runtime_Cache_Redis_Page_Cache_Stats_Key(),	-1 ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, 'hits',											-1 ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CHE_UT ].Cache_Redis_Load_And_Execute_LUA_Array( l.conn_id, l.sha1, l.script, l.keys, l.args, l.data, l.null ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| No cache entry exists, the page needs to be fully rendered
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.data[ 1 ] EQ 0 }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvCOMMENT>
	|
	| Cache entry does exist, map the output
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.cache"			VALUE = "">
	<MvASSIGN NAME = "l.response" 		VALUE = "{ l.data[ 2 ] }">
	<MvASSIGN NAME = "l.compression" 	VALUE = "{ l.data[ 3 ] }">

	<MvIF EXPR = "{ ISNULL l.compression }">
		<MvREFERENCE NAME = "l.cache:response" VARIABLE = "l.response">
	<MvELSEIF EXPR = "{ l.compression EQ 'bzip2' }">
		<MvIF EXPR = "{ NOT bzip2_decompress( l.response, l.cache:response ) }">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_Redis_Page_Cache_Stats_Key" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'json_cache_stats:' $ g.Store:id }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_Redis_Get_Response_Load_LUA" PARAMETERS = "sha1 var, script var" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "json/rediscacheget_lua.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Cache_Redis_Set_Response_Load_LUA" PARAMETERS = "sha1 var, script var" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "json/rediscacheset_lua.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Customer_Login" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Input_Text( 'R', 'Customer_Password', l.password ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ JSON_Input_Retrieve( 'Customer_LoginEmail', l.pw_email ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Email( l.pw_email, l.customer ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.pw_email, l.customer ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].FailedLoginDelay() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'customer_invalid_login', 'The username or password you entered is incorrect.' ) }">
			</MvIF>
		</MvIF>
	<MvELSEIF EXPR = "{ JSON_Input_Retrieve( 'Customer_Login', l.login ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.login, l.customer ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Email( l.login, l.customer ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].FailedLoginDelay() }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'customer_invalid_login', 'The username or password you entered is incorrect.' ) }">
			</MvIF>
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00028', 'One of Customer_LoginEmail or Customer_Login must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_UT ].Customer_Password_Verify( l.password, l.customer:password ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Customer_Login_Failure( l.customer:login, 'Invalid password' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].FailedLoginDelay() }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'customer_invalid_login', 'The username or password you entered is incorrect.' ) }">
	</MvIF>

	<MvASSIGN NAME = "g.Customer_Session_Verified"	VALUE = 1>
	<MvASSIGN NAME = "g.Customer_Session_ID"		VALUE = "{ MakeSessionID() }">
	<MvASSIGN NAME = "g.Basket:cussess_id"			VALUE = "{ g.Customer_Session_ID }">
	<MvASSIGN NAME = "g.Basket:cust_id"				VALUE = "{ l.customer:id }">
	<MvASSIGN NAME = "g.Customer" 					VALUE = "{ l.customer }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_UT ].TaxExempt_Load_Customer( l.customer, g.Basket:tax_exempt ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Basket_Update_Customer_ID( g.Basket ) OR
					NOT [ g.Module_Feature_CUS_DB ].Customer_Update_LastLogin( g.Customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].UpdateSessionID() }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_RT ].Runtime_Discount_Basket( g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_UT ].SearchLogEntry_Process_Customer_Login( l.customer:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Customer_Login( g.Session_ID, l.customer:login ) }">

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishList" PARAMETERS = "wishlist var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.wishlist:id ) }">,
	"cust_id":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.wishlist:cust_id ) }">,
	"title":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.wishlist:title ) }">",
	"notes":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.wishlist:notes ) }">",
	"shared":	<MvEVAL EXPR = "{ encodejavascriptboolean( l.wishlist:shared ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishListItem_OnDemandColumns" PARAMETERS = "wishlistitem var, ondemandcolumns var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.wishlistitem:id ) }">,
	"wshlst_id":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.wishlistitem:wshlst_id ) }">,
	"parent_id":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.wishlistitem:parent_id ) }">,
	"product_id":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.wishlistitem:product_id ) }">,
	"dtadded":		<MvEVAL EXPR = "{ JSON_DateTime( l.wishlistitem:dtadded ) }">,
	"quantity":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.wishlistitem:quantity ) }">,
	"notes":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.wishlistitem:notes ) }">"

	<MvIF EXPR = "{ l.ondemandcolumns:options }">
		<MvASSIGN NAME = "l.option_count"	VALUE = 0>

		, "options":
		[
			<MvFOREACH ITERATOR = "l.option" ARRAY = "l.options" COUNT = "{ [ g.Module_Feature_WSH_DB ].WishListOptionList_Load_WishListItem( l.wishlistitem:id, l.options ) }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.option_count ) }">
				"wish_id":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:wish_id ) }">,
				"attr_id":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:attr_id ) }">,
				"attmpat_id":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:attmpat_id ) }">,
				"option_id":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:option_id ) }">,
				"data":				"<MvEVAL EXPR = "{ encodejavascriptstring( l.option:data ) }">",
				"data_long":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.option:data_long ) }">",
				"attr_code":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.option:attr_code ) }">",
				"attr_type":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.option:attr_type ) }">",
				"attr_prompt":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.option:attr_prompt ) }">",
				"attr_price":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:attr_price ) }">,
				"attr_cost":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:attr_cost ) }">,
				"attr_weight":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:attr_weight ) }">,
				"attr_required":	<MvEVAL EXPR = "{ encodejavascriptboolean( l.option:attr_required ) }">,
				"attr_inventory":	<MvEVAL EXPR = "{ encodejavascriptboolean( l.option:attr_inventory ) }">,
				"attr_image":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.option:attr_image ) }">",
				"opt_code":			"<MvEVAL EXPR = "{ encodejavascriptstring( l.option:opt_code ) }">",
				"opt_prompt":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.option:opt_prompt ) }">",
				"opt_price":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:opt_price ) }">,
				"opt_cost":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:opt_cost ) }">,
				"opt_weight":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:opt_weight ) }">,
				"opt_image":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.option:opt_image ) }">",
				"retail":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:retail ) }">,
				"base_price":		<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:base_price ) }">,
				"price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:price ) }">,
				"weight":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.option:weight ) }">
				<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">
			</MvFOREACH>
		]
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishList_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_customer_login', 'You must have a customer account to create a wish list.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.wishlist" 			VALUE = "">
	<MvASSIGN NAME = "l.wishlist:cust_id" 	VALUE = "{ g.Basket:cust_id }">
	<MvASSIGN NAME = "l.wishlist:title" 	VALUE = "">
	<MvASSIGN NAME = "l.wishlist:notes" 	VALUE = "">
	<MvASSIGN NAME = "l.wishlist:shared" 	VALUE = 0>

	<MvIF EXPR = "{ NOT JSON_Input_Text(	'R:254',	'WishList_Title',	l.wishlist:title ) OR
					NOT JSON_Input_Text(	'o',		'WishList_Notes',	l.wishlist:notes ) OR
					NOT JSON_Input_Boolean(	'O',		'WishList_Shared',	l.wishlist:shared ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_WSH_DB ].WishList_Insert( l.wishlist ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_Runtime_WishList( l.wishlist ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishListList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = 0>
	<MvASSIGN NAME = "l.count"					VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"		VALUE = "">
	<MvASSIGN NAME = "l.search_query"			VALUE = "">

	<MvIF EXPR = "{ NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_customer_login', 'You must have a customer account to load wishlists.' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'title',	'title' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters, 'notes',	'notes' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_BOOL( l.available_filters, 'shared',	'shared' ) }">

	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT JSON_Input_Text(	'o', 'Sort',	l.sort )	OR
					NOT JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'WishLists', '' ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_WHERE( l.search_query, 'cust_id = ?', [ g.Library_DB ].SQL_Query_Field( g.Basket:cust_id ) ) }">

	<MvEVAL EXPR = "{ JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ JSON_OrderBy( l.search_query, l.sort, 'id,title,notes,shared', 'id' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'WishLists', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00043', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.wishlist_count" VALUE = 0>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( ( l.count EQ 0 ) OR ( l.wishlist_count LT l.count ) ) AND ( NOT WishLists.d.EOF ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.wishlist_count ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_WSH_DB ].WishList_Read( l.wishlist ) }">
			<MvEVAL EXPR = "{ JSON_Runtime_WishList( l.wishlist ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "WishLists" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "WishLists">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishListItemList_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.product_lookup"	VALUE = "">
	<MvASSIGN NAME = "l.products"		VALUE = "">
	<MvASSIGN NAME = "l.items"			VALUE = "">
	<MvASSIGN NAME = "l.item_count"		VALUE = 0>
	<MvASSIGN NAME = "l.errors"			VALUE = "">
	<MvASSIGN NAME = "l.error_count"	VALUE = 0>
	<MvASSIGN NAME = "l.field_prefix"	VALUE = "">

	<MvIF EXPR = "{ NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_customer_login', 'You must have a customer account to add items to a wish list.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Input_Exists( 'Products' ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00048', 'Missing required parameter' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_WishList_ValidateDestination( l.destination_wishlist ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Load products and merge duplicate product entries into a new list
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.input_product" ARRAY = "l.input_products" INDEX = "l.pos" COUNT = "{ JSON_Input_Array( 'Products', l.input_products ) }">
		<MvASSIGN NAME = "l.product"			VALUE = "">
		<MvASSIGN NAME = "l.product_attribute"	VALUE = "">

		<MvIF EXPR = "{ NOT JSON_Runtime_Product_Load_Element( l.input_product, l.product ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.product:quantity" VALUE = 0>

		<MvIF EXPR = "{ NOT JSON_Input_Element_Integer( l.input_product, 'R:positive', 'quantity', l.product:quantity ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.input_attribute" ARRAY = "l.input_attributes" COUNT = "{ JSON_Input_Element_Array( l.input_product, 'Attributes', l.input_attributes ) }">
			<MvASSIGN NAME = "l.product_attribute"					VALUE = "">
			<MvASSIGN NAME = "l.product_attribute:code"				VALUE = "">
			<MvASSIGN NAME = "l.product_attribute:template_code"	VALUE = "">
			<MvASSIGN NAME = "l.product_attribute:value"			VALUE = "">

			<MvIF EXPR = "{ NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'code',			l.product_attribute:code )			OR
							NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'template_code',	l.product_attribute:template_code )	OR
							NOT JSON_Input_Element_Text( l.input_attribute, 'o', 'value',			l.product_attribute:value ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
			</MvIF>

			<MvASSIGN NAME = "l.product_attribute_count"			VALUE = "{ miva_array_insert_var( l.product:attributes, l.product_attribute, -1 ) }">
		</MvFOREACH>

		<MvREFERENCEARRAY NAME = "l.reference_product" VARIABLE = "l.product_lookup">
			<MvMEMBER NAME = "{ l.product:code $ ':' $ crypto_md5( miva_array_serialize( l.product_attribute ) ) }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT ISNULL l.reference_product }">
			<MvASSIGN NAME = "l.reference_product:quantity"	VALUE = "{ l.reference_product:quantity + l.product:quantity }">
		<MvELSE>
			<MvASSIGN NAME = "l.reference_product"			VALUE = "{ l.product }">
			<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert_ref( l.products, l.reference_product, l.pos ) }">
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Process merged products and build list of wishlist item changes
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" INDEX = "l.pos">
		<MvASSIGN NAME = "l.field_prefix" VALUE = "{ 'Products[' $ l.pos $ ']' }">

		<MvIF EXPR = "{ NOT Runtime_WishListItemList_Insert_ProcessProduct( l.field_prefix, l.destination_wishlist, l.product, l.items, l.item_count, l.errors, l.error_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_WSH_RT ].Runtime_WishListItemList_Process_Items( l.items, l.item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"wishlistitems":
		[
			<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items" INDEX = "l.pos" COUNT = "{ l.item_count }">
				<MvIF EXPR = "{ l.pos GT 1 }">
					,
				</MvIF>
				{
					<MvEVAL EXPR = "{ JSON_Runtime_WishListItem_OnDemandColumns( l.item:wishlistitem, l.null ) }">
				}
			</MvFOREACH>
		]
		<MvIF EXPR = "{ l.error_count }">
			,"skipped_products":
			[
				<MvFOREACH ITERATOR = "l.error" ARRAY = "l.errors" INDEX = "l.pos" COUNT = "{ l.error_count }">
					<MvIF EXPR = "{ l.pos GT 1 }">
						,
					</MvIF>
					{
						"identifier":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.error:identifier ) }">",
						"error_code":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.error:error_code ) }">",
						"error_message":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.error:error_message ) }">"
					}
				</MvFOREACH>
			]
		</MvIF>
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "Runtime_WishListItemList_Insert_ProcessProduct" PARAMETERS = "field_prefix, wishlist var, product var, items var, item_count var, errors var, error_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.wishlistitem"		VALUE = "">
	<MvASSIGN NAME = "l.wishlistitem_found"	VALUE = 0>

	<MvASSIGN NAME = "l.product_attribute_count" VALUE = "{ miva_array_elements( l.product:attributes ) }">

	<MvIF EXPR = "{ NOT [ g.Library_Utilities ].Validate_Attributes_DetermineVariant( l.product, 0, l.product:attributes, l.product_attribute_count, l.item_wishlistoptions, l.item_wishlistoption_count, l.variant_id ) }">
		<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.field_prefix, 'product_attributes', 'One or more required attributes are missing, or an invalid combination of attributes was specified', l.errors ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.variant_id EQ -1 }">
		<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.field_prefix, 'invalid_variant', 'Invalid variant', l.errors ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionSettings_Load_ProductOrDefault( l.product:id, l.productsubscriptionsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.productsubscriptionsettings:enabled AND l.productsubscriptionsettings:mandatory }">
		<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.field_prefix, 'subscription_required', 'Product \'' $ l.product:code $ '\' requires a subscription and cannot be added to the wish list', l.errors ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.wishlistitem:options"		VALUE = "{ l.item_wishlistoptions }">
	<MvASSIGN NAME = "l.wishlistitem:option_count"	VALUE = "{ l.item_wishlistoption_count }">

	<MvFOREACH ITERATOR = "l.existing_wishlistitem" ARRAY = "l.existing_wishlistitems" COUNT = "{ [ g.Module_Feature_WSH_DB ].WishListItemList_Load_WishList_Product( l.wishlist:id, l.product:id, l.existing_wishlistitems ) }">
		<MvIF EXPR = "{ l.existing_wishlistitem:parent_id }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.wishlistoption_count" VALUE = "{ [ g.Module_Feature_WSH_DB ].WishListOptionList_Load_WishListItem( l.existing_wishlistitem:id, l.wishlistoptions ) }">

		<MvIF EXPR = "{ l.wishlistoption_count NE l.wishlistitem:option_count }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvFOREACH INDEX = "l.wishlistoption_pos" ITERATOR = "l.wishlistoption" ARRAY = "l.wishlistoptions" COUNT = "{ l.wishlistoption_count }">
			<MvIF EXPR = "{ NOT miva_array_search( l.wishlistitem:options, 1,	l.option,
													'( l.wishlistoption:attr_id		EQ l.option:attr_id )		AND
													( l.wishlistoption:attmpat_id	EQ l.option:attmpat_id )	AND
													( l.wishlistoption:option_id	EQ l.option:option_id )		AND
													( l.wishlistoption:data			EQ l.option:data )			AND
													( l.wishlistoption:data_long	EQ l.option:data_long )' ) }">
				<MvFOREACHSTOP>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.wishlistoption_pos GT l.wishlistoption_count }">
			<MvASSIGN NAME = "l.wishlistitem"			VALUE = "{ l.existing_wishlistitem }">
			<MvASSIGN NAME = "l.wishlistitem:quantity"	VALUE = "{ l.existing_wishlistitem:quantity + l.product:quantity }">
			<MvASSIGN NAME = "l.item_count"				VALUE = "{ [ g.Module_Feature_WSH_RT ].Runtime_WishListList_Process_AppendItem_Update( l.existing_wishlistitem, l.wishlistitem, l.items ) }">
			<MvASSIGN NAME = "l.wishlistitem_found"		VALUE = 1>

			<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT l.wishlistitem_found }">
		<MvCOMMENT>
		|
		| Nothing matched, so add a new item to be inserted into the wishlist
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.wishlistitem"				VALUE = "">
		<MvASSIGN NAME = "l.wishlistitem:product_id"	VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.wishlistitem:quantity"		VALUE = "{ l.product:quantity }">
		<MvASSIGN NAME = "l.wishlistitem:dtadded" 		VALUE = "{ s.dyn_time_t }">
		<MvASSIGN NAME = "l.wishlistitem:options"		VALUE = "{ l.item_wishlistoptions }">
		<MvASSIGN NAME = "l.wishlistitem:option_count"	VALUE = "{ l.item_wishlistoption_count }">
		<MvASSIGN NAME = "l.wishlistitem:notes" 		VALUE = "">

		<MvASSIGN NAME = "l.item_count"					VALUE = "{ [ g.Module_Feature_WSH_RT ].Runtime_WishListItemList_Process_AppendItem_Insert( l.wishlist, l.wishlistitem, l.items ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishListItemList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.search_query"		VALUE = "">

	<MvIF EXPR = "{ NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_customer_login', 'You must have a customer account to load wishlist items.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Runtime_WishList_Load( l.wishlist ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_AvailableFilter_NUMBER( l.available_filters,		'wshlst_id',	'wshlst_id' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_NUMBER( l.available_filters,		'parent_id',	'parent_id' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_NUMBER( l.available_filters,		'product_id',	'product_id' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_RFC3339( l.available_filters,	'dtadded',		'dtadded' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_INTEGER( l.available_filters,	'quantity',		'quantity' ) }">
	<MvEVAL EXPR = "{ JSON_AvailableFilter_CHAR( l.available_filters,		'notes',		'notes' ) }">

	<MvIF EXPR = "{ NOT JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT JSON_Input_Text(	'o', 'Sort',	l.sort )	OR
					NOT JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'WishListItems', '' ) }">
	<MvEVAL EXPR = "{ [ g.Library_DB ].SQL_Query_WHERE( l.search_query, 'wshlst_id = ?', [ g.Library_DB ].SQL_Query_Field( l.wishlist:id ) ) }">

	<MvEVAL EXPR = "{ JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_JSON, 'JSON_Runtime_WishListItemList_Load_Query_Filter', '', l.data ) }">
	<MvEVAL EXPR = "{ JSON_OrderBy( l.search_query, l.sort, 'id,parent_id,product_id,dtadded,quantity,notes', 'id' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'WishListItems', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00044', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.wishlist_item_count" VALUE = 0>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( ( l.count EQ 0 ) OR ( l.wishlist_item_count LT l.count ) ) AND ( NOT WishListItems.d.EOF ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_Start( l.wishlist_item_count ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_WSH_DB ].WishListItem_Read( l.wishlistitem ) }">
			<MvEVAL EXPR = "{ JSON_Runtime_WishListItem_OnDemandColumns( l.wishlistitem, l.data:ondemandcolumns ) }">
			<MvEVAL EXPR = "{ JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "WishListItems" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "WishListItems">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishListItem_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_customer_login', 'You must have a customer account to remove items from a wish list.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.items"		VALUE = "">
	<MvASSIGN NAME = "l.item_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT JSON_Input_Integer( 'R', 'Wish_ID', l.wish_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_WSH_DB ].WishListItem_Load_ID( l.wish_id, l.wishlistitem ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_WSH_DB ].WishList_Load_ID_Cached( l.wishlistitem:wshlst_id, l.wishlist ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_invalid', 'Invalid wish list' ) }">
	<MvELSEIF EXPR = "{ l.wishlist:cust_id NE g.Basket:cust_id }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_invalid', 'Invalid wish list' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.wishlistitem:parent_id }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00042', 'Child items cannot be removed directly from a wish list.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.item_count" VALUE = "{ [ g.Module_Feature_WSH_RT ].Runtime_WishListItemList_Process_AppendItem_Delete( l.wishlistitem, l.items ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_WSH_RT ].Runtime_WishListItemList_Process_Items( l.items, l.item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_BasketItemList_MoveToWishlist" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT JSON_Store_Open() }"> <MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_customer_login', 'You must have a customer account to add items to a wish list.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.moveall"	VALUE = "{ JSON_Input_Exists( 'MoveAll' ) }">
	<MvASSIGN NAME = "l.line_ids"	VALUE = "{ JSON_Input_Exists( 'Line_IDs' ) }">
	<MvASSIGN NAME = "l.group_ids"	VALUE = "{ JSON_Input_Exists( 'Group_IDs' ) }">
	<MvASSIGN NAME = "l.sum"		VALUE = "{ l.moveall + l.line_ids + l.group_ids }">

	<MvIF EXPR = "{ l.sum EQ 0 }">		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00049', 'One of MoveAll, Line_IDs, or Group_IDs must be specified.' ) }">
	<MvELSEIF EXPR = "{ l.sum GT 1 }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00050', 'Only one of MoveAll, Line_IDs, or Group_IDs may be specified.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.error_count"	VALUE = 0>
	<MvASSIGN NAME = "l.errors"			VALUE = "">

	<MvIF EXPR = "{ NOT JSON_Runtime_WishList_ValidateDestination( l.destination_wishlist ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.basketitem_count"	VALUE = 0>
	<MvASSIGN NAME = "l.basketitems"		VALUE = "">

	<MvIF EXPR = "{ l.moveall }">
		<MvIF EXPR = "{ NOT JSON_Input_Boolean(	'R', 'MoveAll',	l.moveall ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ l.moveall }">
			<MvASSIGN NAME = "l.basketitem_count" VALUE = "{ [ g.Module_Library_DB ].BasketItemList_Load_Basket( g.Basket:basket_id, l.basketitems ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.line_ids }">
		<MvIF EXPR = "{ NOT JSON_Input_Integer_Array( 'R', 'Line_IDs', l.input_line_ids, l.input_line_ids_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.line_id_lookup"			VALUE = "">
		<MvASSIGN NAME = "l.filtered_line_id_count"	VALUE = 0>
		<MvASSIGN NAME = "l.filtered_line_ids"		VALUE = "">

		<MvFOREACH ITERATOR = "l.input_line_id" ARRAY = "l.input_line_ids" COUNT = "{ l.input_line_ids_count }" INDEX = "l.pos">
			<MvREFERENCEARRAY NAME = "l.reference_line_id" VARIABLE = "l.line_id_lookup">
				<MvMEMBER NAME = "{ l.input_line_id }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ISNULL l.reference_line_id }">
				<MvASSIGN NAME = "l.reference_line_id"		VALUE = "{ l.input_line_id }">
				<MvASSIGN NAME = "l.filtered_line_id_count"	VALUE = "{ miva_array_insert_ref( l.filtered_line_ids, l.reference_line_id, l.pos ) }">
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.filtered_line_id" ARRAY = "l.filtered_line_ids" INDEX = "l.pos">
			<MvIF EXPR = "{ NOT [ g.Library_DB ].BasketItem_Load_Line( g.Basket:basket_id, l.filtered_line_id, l.basketitem ) }">
				<MvIF EXPR = "{ NOT [ g.Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.line_prefix"	VALUE = "{ 'Items[' $ l.pos $ ']' }">
				<MvASSIGN NAME = "l.error_count"	VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.line_prefix, 'MER-JSN-RTM-00051', 'Basket item does not exist.', l.errors ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.basketitem_count" VALUE = "{ miva_array_insert_var( l.basketitems, l.basketitem, l.pos ) }">
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.group_ids }">
		<MvIF EXPR = "{ NOT JSON_Input_Integer_Array( 'R', 'Group_IDs', l.input_group_ids, l.input_group_ids_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.group_id_lookup"			VALUE = "">
		<MvASSIGN NAME = "l.filtered_group_id_count"	VALUE = 0>
		<MvASSIGN NAME = "l.filtered_group_ids"			VALUE = "">

		<MvFOREACH ITERATOR = "l.input_group_id" ARRAY = "l.input_group_ids" COUNT = "{ l.input_group_ids_count }" INDEX = "l.pos">
			<MvREFERENCEARRAY NAME = "l.reference_group_id" VARIABLE = "l.group_id_lookup">
				<MvMEMBER NAME = "{ l.input_group_id }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ISNULL l.reference_group_id }">
				<MvASSIGN NAME = "l.reference_group_id"			VALUE = "{ l.input_group_id }">
				<MvASSIGN NAME = "l.filtered_group_id_count"	VALUE = "{ miva_array_insert_ref( l.filtered_group_ids, l.reference_group_id, -1 ) }">
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.filtered_group_id" ARRAY = "l.filtered_group_ids" COUNT = "{ l.filtered_group_id_count }" INDEX = "l.pos">
			<MvASSIGN NAME = "l.group_basketitem_count"	VALUE = "{ [ g.Module_Library_DB ].BasketItemList_Load_Basket_Group( g.Basket:basket_id, l.filtered_group_id, l.group_basketitems ) }">
			<MvASSIGN NAME = "l.basketitem_count"		VALUE = "{ miva_array_merge( l.group_basketitems, 1, l.group_basketitem_count, l.basketitems, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ l.basketitem_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'MER-JSN-RTM-00052', 'Unable to load requested Basket Item(s). Some or all of the Basket Contents may no longer be available.' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.basketitem" ARRAY = "l.basketitems" INDEX = "l.pos">
		<MvASSIGN NAME = "l.item_prefix"	VALUE = "{ 'Items[' $ l.pos $ ']' }">

		<MvIF EXPR = "{ l.basketitem:parent_id }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.item_prefix, 'MER-JSN-RTM-00053', 'Child items cannot be moved directly to a wish list.', l.errors ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Runtime_Product_Load_BasketItem( l.basketitem, l.product ) }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.item_prefix, 'MER-JSN-RTM-00054', 'Item \'' $ l.basketitem:code $ '\' could not be added to the wish list.', l.errors ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionSettings_Load_ProductOrDefault( l.product:id, l.productsubscriptionsettings ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ l.productsubscriptionsettings:enabled AND l.productsubscriptionsettings:mandatory }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.item_prefix, 'MER-JSN-RTM-00055', 'Item \'' $ l.product:code $ '\' requires a subscription and cannot be added to the wish list', l.errors ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.item"							VALUE = "">
		<MvASSIGN NAME = "l.item:product"					VALUE = "{ l.product }">
		<MvASSIGN NAME = "l.item:basketitem"				VALUE = "{ l.basketitem }">
		<MvASSIGN NAME = "l.item:basketitem:option_count"	VALUE = "{ [ g.Module_Library_DB ].BasketOptionList_Load_Line( l.item:basketitem:line_id, l.item:basketitem:options ) }">
		<MvASSIGN NAME = "l.item:child_basketitems"			VALUE = "">
		<MvASSIGN NAME = "l.item:child_basketitem_count"	VALUE = 0>

		<MvFOREACH ITERATOR = "l.child_basketitem" ARRAY = "l.child_basketitems" COUNT = "{ [ g.Module_Library_DB ].BasketItemList_Load_Parent( l.basketitem:basket_id, l.basketitem:line_id, l.child_basketitems ) }" INDEX = "l.child_pos">
			<MvASSIGN NAME = "l.item_prefix"	VALUE = "{ l.item_prefix $ ':Child_Items[' $ l.child_pos $ ']' }">

			<MvIF EXPR = "{ l.child_basketitem:type NE 'product' }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Runtime_Product_Load_BasketItem( l.child_basketitem, l.child_product ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.item_prefix, 'MER-JSN-RTM-00056', 'Item \'' $ l.child_basketitem:code $ '\' could not be added to the wish list.', l.errors ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.child_basketitem:option_count"	VALUE = "{ [ g.Module_Library_DB ].BasketOptionList_Load_Line( l.child_basketitem:line_id, l.child_basketitem:options ) }">
			<MvASSIGN NAME = "l.item:child_basketitem_count"	VALUE = "{ miva_array_insert_var( l.item:child_basketitems, l.child_basketitem, -1 ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_insert_var( l.items, l.item, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_WSH_RT ].Runtime_BasketItemListMoveToWishList_Process( l.destination_wishlist, l.items, l.item_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ JSON_Response_Start() }">
	{
		"wishlistitems":
		[
			<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items" INDEX = "l.pos" COUNT = "{ l.item_count }">
				<MvIF EXPR = "{ l.pos GT 1 }">
					,
				</MvIF>

				<MvASSIGN NAME = "l.ondemandcolumns"			VALUE = "">
				<MvASSIGN NAME = "l.ondemandcolumns:options"	VALUE = "{ l.item:wishlistitem:option_count }">

				{
					<MvEVAL EXPR = "{ JSON_Runtime_WishListItem_OnDemandColumns( l.item:wishlistitem, l.ondemandcolumns ) }">
				}
			</MvFOREACH>
		]
		<MvIF EXPR = "{ l.error_count }">
			,"skipped_products":
			[
				<MvFOREACH ITERATOR = "l.error" ARRAY = "l.errors" INDEX = "l.pos" COUNT = "{ l.error_count }">
					<MvIF EXPR = "{ l.pos GT 1 }">
						,
					</MvIF>
					{
						"identifier":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.error:identifier ) }">",
						"error_code":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.error:error_code ) }">",
						"error_message":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.error:error_message ) }">"
					}
				</MvFOREACH>
			]
		</MvIF>
	}
	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishList_ValidateDestination" PARAMETERS = "wishlist var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ JSON_Input_Exists( 'WishList_ID' ) }">
		<MvIF EXPR = "{ JSON_Input_Integer( 'O', 'WishList_ID', l.wishlist_id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_WSH_DB ].WishList_Load_ID_Cached( l.wishlist_id, l.wishlist ) }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_invalid', 'Invalid wish list' ) }">
			<MvELSEIF EXPR = "{ l.wishlist:cust_id NE g.Basket:cust_id }">
				<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_invalid', 'Invalid wish list' ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_InputErrors() }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.wishlist_count" VALUE = "{ [ g.Module_Feature_WSH_DB ].WishListList_Load_Customer( g.Basket:cust_id, l.wishlists ) }">

	<MvIF EXPR = "{ l.wishlist_count EQ 1 }">
		<MvASSIGN NAME = "l.wishlist"		VALUE = "{ l.wishlists[ 1 ] }">

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.wishlist_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerSettings_Load_Cached( l.customersettings ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.wishlist"			VALUE = "">
		<MvASSIGN NAME = "l.wishlist:cust_id"	VALUE = "{ g.Basket:cust_id }">
		<MvASSIGN NAME = "l.wishlist:title"		VALUE = "{ l.customersettings:def_wshlst }">
		<MvASSIGN NAME = "l.wishlist:notes"		VALUE = "">
		<MvASSIGN NAME = "l.wishlist:shared"	VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_WSH_DB ].WishList_Insert( l.wishlist ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_Response_Error( 'wishlist_pick', 'Please specify a wishlist' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishList_Load" PARAMETERS = "wishlist var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ JSON_Input_Retrieve_Integer( 'WishList_ID', l.wishlist_id ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_WSH_DB ].WishList_Load_ID_Cached( l.wishlist_id, l.wishlist ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'wishlist_invalid', 'Invalid wish list' ) }">
		<MvELSEIF EXPR = "{ l.wishlist:cust_id NE g.Basket:cust_id }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'wishlist_invalid', 'Invalid wish list' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-JSN-RTM-00047', 'WishList_ID must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_WishListItemList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data:ondemandcolumns" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>
