<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2025 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-PGB-UT-
| Next Error Code: 4
|
</MvCOMMENT>

<MvFUNCTION NAME = "PageBuilder_Lockfile_Path" PARAMETERS = "page_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.MerchantPath $ 'pagebuilder_' $  l.page_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreviewSession_Start" PARAMETERS = "pagebuilderpreviewsession var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_PGB_DB ].PageBuilderPreviewSession_Load_AdminSessionAndStore( g.Session_ID, g.Store:id, l.pagebuilderpreviewsession ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.pagebuilderpreviewsession"						VALUE = "">
		<MvASSIGN NAME = "l.pagebuilderpreviewsession:session_id"			VALUE = "{ MakeSessionID() }">
		<MvASSIGN NAME = "l.pagebuilderpreviewsession:admsess_id"			VALUE = "{ g.Session_ID }">
		<MvASSIGN NAME = "l.pagebuilderpreviewsession:user_id"				VALUE = "{ g.User:id }">
		<MvASSIGN NAME = "l.pagebuilderpreviewsession:store_id"				VALUE = "{ g.Store:id }">

		<MvFOR INDEX = "l.attempt" COUNT = 100>
			<MvIF EXPR = "{ [ g.Feature_Filename_PGB_DB ].PageBuilderPreviewSession_Insert( l.pagebuilderpreviewsession ) }">
				<MvFORSTOP>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.pagebuilderpreviewsession:session_id"		VALUE = "{ MakeSessionID() }">
		</MvFOR>

		<MvIF EXPR = "{ l.attempt GT 100 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-PGB-UT-00001', 'Unable to generate unique preview session after 100 attempts' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreviewSessionFragmentKey_Generate" PARAMETERS = "pagebuilderpreviewsession var, pagebuilderpreviewsessionfragmentkey var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pagebuilderpreviewsessionfragmentkey"				VALUE = "">
	<MvASSIGN NAME = "l.pagebuilderpreviewsessionfragmentkey:session_id"	VALUE = "{ l.pagebuilderpreviewsession:session_id }">
	<MvASSIGN NAME = "l.pagebuilderpreviewsessionfragmentkey:fragkey"		VALUE = "{ MakeSessionID() }">
	<MvASSIGN NAME = "l.pagebuilderpreviewsessionfragmentkey:lastused"		VALUE = "{ s.dyn_time_t }">

	<MvFOR INDEX = "l.attempt" COUNT = 100>
		<MvIF EXPR = "{ [ g.Feature_Filename_PGB_DB ].PageBuilderPreviewSessionFragmentKey_Insert( l.pagebuilderpreviewsessionfragmentkey ) }">
			<MvFORSTOP>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.pagebuilderpreviewsessionfragmentkey:fragkey"	VALUE = "{ MakeSessionID() }">
	</MvFOR>

	<MvIF EXPR = "{ l.attempt GT 100 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-PGB-UT-00002', 'Unable to generate unique fragment key after 100 attempts' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreview_Start" PARAMETERS = "pagebuilderpreviewsession var, pagebuilderpreviewsessionfragmentkey var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Session:_mgr:pagebuilderpage_preview"											VALUE = "">
	<MvASSIGN NAME = "g.Session:_mgr:pagebuilderpage_preview:active"									VALUE = 1>
	<MvASSIGN NAME = "g.Session:_mgr:pagebuilderpage_preview:fragment_replacement_token"				VALUE = "{ MakeSessionID() }">
	<MvREFERENCE NAME = "g.Session:_mgr:pagebuilderpage_preview:pagebuilderpreviewsession"				VARIABLE = "l.pagebuilderpreviewsession">
	<MvREFERENCE NAME = "g.Session:_mgr:pagebuilderpage_preview:pagebuilderpreviewsessionfragmentkey"	VARIABLE = "l.pagebuilderpreviewsessionfragmentkey">

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].v10_SetCookie( g.Output_Cookies, 'mm5-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-pagebuilder-preview-session', g.Session:_mgr:pagebuilderpage_preview:pagebuilderpreviewsession:session_id, g.cookiedomain, '', '', g.Secure, 'Strict' ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_PGB_DB ].PageBuilderPreviewSessionFragmentData_Delete_All_FragmentKey( g.Session:_mgr:pagebuilderpage_preview:pagebuilderpreviewsessionfragmentkey:fragkey )	AND
								 [ g.Feature_Filename_PGB_DB ].PageBuilderPreviewSessionFragmentKey_Delete_All_OlderThan( s.time_t - ( 5 * 60 ) )																	AND
								 [ g.Feature_Filename_PGB_DB ].PageBuilderPreviewSessionFragmentKey_Update_LastUsed( g.Session:_mgr:pagebuilderpage_preview:pagebuilderpreviewsessionfragmentkey ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreview_Active" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.Session:_mgr:pagebuilderpage_preview:active EQ 1 }">
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreview_FragmentKey" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.Session:_mgr:pagebuilderpage_preview:pagebuilderpreviewsessionfragmentkey:fragkey }">
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreview_FragmentReplacementToken" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.Session:_mgr:pagebuilderpage_preview:fragment_replacement_token }">
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreview_StoreFragmentSettings" PARAMETERS = "page_code, settings var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Store settings in session cache to preview fragment changes in this session
	|
	</MvCOMMENT>

	<MvASSIGNARRAY NAME = "g.Session:_mgr:pagebuilderpage_preview:fragment_settings" VALUE = "{ l.settings }">
		<MvMEMBER NAME = "{ l.page_code }">
	</MvASSIGNARRAY>

	<MvCOMMENT>
	|
	| Store settings in database to preview fragment settings in supplemental
	| load requests within the preview context.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.pagebuilderpreviewsessionfragmentdata"				VALUE = "">
	<MvASSIGN NAME = "l.pagebuilderpreviewsessionfragmentdata:fragkey"		VALUE = "{ PageBuilderPreview_FragmentKey() }">
	<MvASSIGN NAME = "l.pagebuilderpreviewsessionfragmentdata:code"			VALUE = "{ l.page_code }">
	<MvREFERENCE NAME = "l.pagebuilderpreviewsessionfragmentdata:settings"	VARIABLE = "l.settings">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_PGB_DB ].PageBuilderPreviewSessionFragmentData_InsertOrUpdate( l.pagebuilderpreviewsessionfragmentdata ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreview_OverrideFragmentSettings" PARAMETERS = "fragment var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Use Session cache if we're in an active preview state
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ PageBuilderPreview_Active() }">
		<MvIF EXPR = "{ miva_member_exists( g.Session:_mgr:pagebuilderpage_preview:fragment_settings, l.fragment:code ) }">
			<MvREFERENCEARRAY NAME = "l.preview_settings" VARIABLE = "g.Session:_mgr:pagebuilderpage_preview:fragment_settings">
				<MvMEMBER NAME = "{ l.fragment:code }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.fragment:settings" VALUE = "{ l.preview_settings }">
		</MvIF>

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvCOMMENT>
	|
	| If both cookie and X-Miva-PageBuilder-Preview-FragmentKey header are present, attempt
	| to load the modified settings for the rendered preview.
	|
	</MvCOMMENT>

	<MvREFERENCEARRAY NAME = "l.pagebuilderpreviewsession_id" VARIABLE = "g.Request_Cookies">
		<MvMEMBER NAME = "{ 'mm5-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-pagebuilder-preview-session' }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT ISNULL l.pagebuilderpreviewsession_id AND NOT ISNULL s.HTTP_X_Miva_PageBuilder_Preview_FragmentKey }">
		<MvIF EXPR = "{ [ g.Feature_Filename_PGB_DB ].PageBuilderPreviewSessionFragmentKey_Load( l.pagebuilderpreviewsession_id, s.HTTP_X_Miva_PageBuilder_Preview_FragmentKey, l.pagebuilderpreviewsessionfragmentkey ) }">
			<MvIF EXPR = "{ [ g.Feature_Filename_PGB_DB ].PageBuilderPreviewSessionFragmentData_Load( l.pagebuilderpreviewsessionfragmentkey:fragkey, l.fragment:code, l.pagebuilderpreviewsessionfragmentdata ) }">
				<MvASSIGN NAME = "l.fragment:settings" VALUE = "{ l.pagebuilderpreviewsessionfragmentdata:settings }">
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreview_RenderPage" PARAMETERS = "page var, page_rendered var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.rendered_content">
		<MvASSIGN NAME = "l.page_rendered" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Render_Page_LowLevel( l.page:code, l.page ) }">
	</MvCAPTURE>

	<MvIF EXPR = "{ ISNULL g.Session:_mgr:fragments }">
		<MvASSIGN NAME = "l.pagebuilder_rendered_fragments" VALUE = "">
	<MvELSE>
		<MvCAPTURE VARIABLE = "l.pagebuilder_rendered_fragments" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
			<MvFOREACH INDEX = "l.pos" ITERATOR = "l.fragment_code" ARRAY = "l.fragment_codes" COUNT = "{ miva_struct_members( g.Session:_mgr:fragments, l.fragment_codes ) }">
				<MvIF EXPR = "{ l.pos GT 1 }">
					,
				</MvIF>

				'<MvEVAL EXPR = "{ encodejavascriptstring( l.fragment_code ) }">'
			</MvFOREACH>
		</MvCAPTURE>
	</MvIF>

	<MvEVAL EXPR = "{ glosub( l.rendered_content, PageBuilderPreview_FragmentReplacementToken(), l.pagebuilder_rendered_fragments ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilderPreview_End" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Session:_mgr:pagebuilderpage_preview" VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "PageBuilder_CMark_Supported" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| CMark version 0.21.0 or higher (5376) is required.
	| Versions prior to this did not support the "safe" flag.
	|
	</MvCOMMENT>

	<MvFUNCTIONRETURN VALUE = "{ cmark_version() GE 5376 }">
</MvFUNCTION>

<MvFUNCTION NAME = "MMXFontFamily_To_FontProperty" PARAMETERS = "font_family" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.font_family EQ 'Helvetica, sans-serif' }">									<MvFUNCTIONRETURN VALUE = "helvetica">
	<MvELSEIF EXPR = "{ l.font_family EQ 'Georgia, serif' }">										<MvFUNCTIONRETURN VALUE = "georgia">
	<MvELSEIF EXPR = "{ l.font_family EQ '"Palatino Linotype", "Book Antiqua", Palatino, serif' }">	<MvFUNCTIONRETURN VALUE = "palatino_linotype">
	<MvELSEIF EXPR = "{ l.font_family EQ '"Times New Roman", Times, serif' }">						<MvFUNCTIONRETURN VALUE = "times_new_roman">
	<MvELSEIF EXPR = "{ l.font_family EQ 'Arial, Helvetica, sans-serif' }">							<MvFUNCTIONRETURN VALUE = "arial">
	<MvELSEIF EXPR = "{ l.font_family EQ '"Arial Black", Gadget, sans-serif' }">					<MvFUNCTIONRETURN VALUE = "arial_black">
	<MvELSEIF EXPR = "{ l.font_family EQ '"Comic Sans MS", cursive, sans-serif' }">					<MvFUNCTIONRETURN VALUE = "comic_sans_ms">
	<MvELSEIF EXPR = "{ l.font_family EQ 'Impact, Charcoal, sans-serif' }">							<MvFUNCTIONRETURN VALUE = "impact">
	<MvELSEIF EXPR = "{ l.font_family EQ '"Lucida Sans Unicode", "Lucida Grande", sans-serif' }">	<MvFUNCTIONRETURN VALUE = "lucida_sans_unicode">
	<MvELSEIF EXPR = "{ l.font_family EQ 'Tahoma, Geneva, sans-serif' }">							<MvFUNCTIONRETURN VALUE = "tahoma">
	<MvELSEIF EXPR = "{ l.font_family EQ '"Trebuchet MS", Helvetica, sans-serif' }">				<MvFUNCTIONRETURN VALUE = "trebuchet_ms">
	<MvELSEIF EXPR = "{ l.font_family EQ 'Verdana, Geneva, sans-serif' }">							<MvFUNCTIONRETURN VALUE = "verdana">
	<MvELSEIF EXPR = "{ l.font_family EQ '"Courier New", Courier, monospace' }">					<MvFUNCTIONRETURN VALUE = "courier_new">
	<MvELSEIF EXPR = "{ l.font_family EQ '"Lucida Console", Monaco, monospace' }">					<MvFUNCTIONRETURN VALUE = "lucida_console">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Theme
|
</MvCOMMENT>

<MvFUNCTION NAME = "Theme_Lockfile_Path" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.MerchantPath $ 'theme_' $ int( g.Store:id ) $ '_' $ int( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID() ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Theme_Validate_ClassName" PARAMETERS = "theme var, data var, classname" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Verify classname consists of only valid characters
	|
	</MvCOMMENT>

	<MvFOR INDEX = "l.pos" COUNT = "{ len_var( l.classname ) }">
		<MvASSIGN NAME = "l.byte" VALUE = "{ asciivalue( substring_var( l.classname, l.pos, 1 ) ) }">

		<MvIF EXPR = "{ ( l.byte GE 48 ) AND ( l.byte LE 57 ) }">		<MvCOMMENT> 0 - 9 </MvCOMMENT>
		<MvELSEIF EXPR = "{ ( l.byte GE 65 ) AND ( l.byte LE 90 ) }">	<MvCOMMENT> A - Z </MvCOMMENT>
		<MvELSEIF EXPR = "{ ( l.byte GE 97 ) AND ( l.byte LE 122 ) }">	<MvCOMMENT> a - z </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.byte EQ 45 }">							<MvCOMMENT> - </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.byte EQ 95 }">							<MvCOMMENT> _ </MvCOMMENT>
		<MvELSE>
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Classname may only contain the following characters: a-zA-Z0-9_-">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOR>

	<MvCOMMENT>
	|
	| Verify classname is not already used within the theme, excluding the matches
	| against the specified button, button size, or typography
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.button" ARRAY = "l.theme:buttons" COUNT = "{ l.theme:button_count }">
		<MvIF EXPR = "{ strcasecmp( l.button:code, l.data:button_code ) NE 0 AND strcasecmp( l.button:classname, l.classname ) EQ 0 }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Classname already exists">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFOREACH ITERATOR = "l.size" ARRAY = "l.button:sizes" COUNT = "{ l.button:size_count }">
			<MvIF EXPR = "{ ( strcasecmp( l.button:code, l.data:button_code ) NE 0 OR strcasecmp( l.size:code, l.data:size_code ) NE 0 ) AND strcasecmp( l.size:classname, l.classname ) EQ 0 }">
				<MvASSIGN NAME = "g.Validation_Message" VALUE = "Classname already exists">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.typgraphy" ARRAY = "l.theme:typographies" COUNT = "{ l.theme:typography_count }">
		<MvIF EXPR = "{ strcasecmp( l.typgraphy:code, l.data:typography_code ) NE 0 AND strcasecmp( l.typgraphy:classname, l.classname ) EQ 0 }">
			<MvASSIGN NAME = "g.Validation_Message" VALUE = "Classname already exists">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Theme_Validate_Button_ClassName" PARAMETERS = "theme var, button_code, classname" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data"				VALUE = "">
	<MvASSIGN NAME = "l.data:button_code"	VALUE = "{ l.button_code }">

	<MvFUNCTIONRETURN VALUE = "{ Theme_Validate_ClassName( l.theme, l.data, l.classname ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Theme_Validate_Button_Size_ClassName" PARAMETERS = "theme var, button_code, size_code, classname" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data"				VALUE = "">
	<MvASSIGN NAME = "l.data:button_code"	VALUE = "{ l.button_code }">
	<MvASSIGN NAME = "l.data:size_code"		VALUE = "{ l.size_code }">

	<MvFUNCTIONRETURN VALUE = "{ Theme_Validate_ClassName( l.theme, l.data, l.classname ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Theme_Validate_Typography_ClassName" PARAMETERS = "theme var, typography_code, classname" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data"					VALUE = "">
	<MvASSIGN NAME = "l.data:typography_code"	VALUE = "{ l.typography_code }">

	<MvFUNCTIONRETURN VALUE = "{ Theme_Validate_ClassName( l.theme, l.data, l.classname ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Theme_Generate_Classname" PARAMETERS = "theme var, data var, base_classname, classname var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Build existing classname lookup for theme, excluding current button, button size, or typography (if present)
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.classname_lookup" VALUE = "">

	<MvFOREACH ITERATOR = "l.button" ARRAY = "l.theme:buttons" COUNT = "{ l.theme:button_count }">
		<MvIF EXPR = "{ strcasecmp( l.button:code, l.data:button:code ) NE 0 }">
			<MvASSIGNARRAY NAME = "l.classname_lookup" VALUE = 1>
				<MvMEMBER NAME = "{ l.button:classname }">
			</MvASSIGNARRAY>
		</MvIF>

		<MvFOREACH ITERATOR = "l.size" ARRAY = "l.button:sizes" COUNT = "{ l.button:size_count }">
			<MvIF EXPR = "{ strcasecmp( l.button:code, l.data:button:code ) NE 0 OR strcasecmp( l.size:code, l.data:size:code ) NE 0 }">
				<MvASSIGNARRAY NAME = "l.classname_lookup" VALUE = 1>
					<MvMEMBER NAME = "{ l.size:classname }">
				</MvASSIGNARRAY>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.typography" ARRAY = "l.theme:typographies" COUNT = "{ l.theme:typography_count }">
		<MvIF EXPR = "{ strcasecmp( l.typography:code, l.data:typography:code ) NE 0 }">
			<MvASSIGNARRAY NAME = "l.classname_lookup" VALUE = 1>
				<MvMEMBER NAME = "{ l.typography:classname }">
			</MvASSIGNARRAY>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Generate unique classname. Limit to 1000 attempts.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.counter"	VALUE = 0>
	<MvASSIGN NAME = "l.classname"	VALUE = "{ l.base_classname }">

	<MvWHILE EXPR = "{ l.counter LT 1000 }">
		<MvREFERENCEARRAY NAME = "l.classname_exists" VARIABLE = "l.classname_lookup">
			<MvMEMBER NAME = "{ l.classname }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT l.classname_exists }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.classname" VALUE = "{ l.base_classname $ '-' $ ( ++l.counter ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-PGB-UT-00003', 'Unable to generate unique classname after 1000 attempts' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Theme_Generate_Button_Classname" PARAMETERS = "theme var, button var, classname var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCE NAME = "l.data:button" VARIABLE = "l.button">

	<MvFUNCTIONRETURN VALUE = "{ Theme_Generate_Classname( l.theme, l.data, 'mm-theme-button-' $ slugify( tolower( l.button:name ) ), l.classname ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Theme_Generate_Button_Size_Classname" PARAMETERS = "theme var, button var, size var, classname var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCE NAME = "l.data:button"	VARIABLE = "l.button">
	<MvREFERENCE NAME = "l.data:size"	VARIABLE = "l.size">

	<MvFUNCTIONRETURN VALUE = "{ Theme_Generate_Classname( l.theme, l.data, l.button:classname $ '__' $ slugify( tolower( l.size:name ) ), l.classname ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Theme_Generate_Typography_Classname" PARAMETERS = "theme var, typography var, classname var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCE NAME = "l.data:typography" VARIABLE = "l.typography">

	<MvFUNCTIONRETURN VALUE = "{ Theme_Generate_Classname( l.theme, l.data, 'mm-theme-typography-' $ slugify( tolower( l.typography:name ) ), l.classname ) }">
</MvFUNCTION>
