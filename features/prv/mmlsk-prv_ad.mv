<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2025 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-PRV-ADM-
| Next Error Code: 156
|
</MvCOMMENT>

<MvFUNCTION NAME = "PRV_ProvisionAsNeeded" PARAMETERS = "provide_filename" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ fexists( l.provide_filename ) }">
		<MvCOMMENT>If g.PRV_log_file_name is ever to change, make sure to change it in setup.mv as well</MvCOMMENT>
		<MvASSIGN NAME = "g.PRV_log_file_name"	VALUE = "{ glosub( l.provide_filename, '.xml', '.log' ) }">

		<MvCOMMENT>
		|
		| Handle extremely small provisioning files in one fell swoop, and launch the interating/progress
		| bar provisioner for large ones
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ( NOT g.Admin_User_ID ) OR ( fsize( l.provide_filename ) LE 10240 ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Action_ProvisionEntireFile( l.provide_filename ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Frameset( l.provide_filename ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_ProvisionEntireFile" PARAMETERS = "provide_filename" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.PRV_Return_Import }">
		<MvASSIGN NAME = "g.Provision_Email" 		VALUE = "{ g.ProvisioningImport_Email }">
		<MvASSIGN NAME = "g.Provision_Completed"	VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT xml_parse( l.provide_filename, 'data', l.provide_xml ) }">
		<MvASSIGN NAME = "l.moved"	VALUE = "{ frename( l.provide_filename, l.provide_filename $ '-' $ PRV_ErroredStamp() ) }">

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogParseError() }">
	</MvIF>

	<MvASSIGN NAME = "l.null"						VALUE = "{ PRV_Action_Provision_Fragment( l.provide_xml:Provision ) }">

	<MvIF EXPR = "{ tolower( l.provide_xml:Provision:attribute:oncomplete ) EQ 'delete' }">
		<MvASSIGN NAME = "l.null"					VALUE = "{ fdelete( l.provide_filename ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.renamed"				VALUE = "{ frename( l.provide_filename, l.provide_filename $ '-' $ PRV_ExecutedStamp() ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_ProvisionStringData" PARAMETERS = "string_data" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| JEH: 06/08/2005: Added provisioning from a string for LITE end of setup (pre-login) provisioning
	|	Text safe export XML to real file to run provisioning
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.saved_logfile"		VALUE = "{ g.PRV_log_file_name }">
	<MvASSIGN NAME = "g.PRV_log_file_name"	VALUE = "{ 'PRV_inline.log'  }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ fdelete( 'PRV_inline.xml' ) }">
	
	<MvASSIGN NAME = "l.size" VALUE = "{ file_create( 'PRV_inline.xml', 'data', l.string_data ) }">
	
	<MvIF EXPR = "{ NOT xml_parse( 'PRV_inline.xml', 'data', l.provide_xml ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogParseError() }">
	</MvIF>

	<MvASSIGN NAME = "l.null"				VALUE="{ PRV_Action_Provision_Fragment( l.provide_xml:Provision ) }">
	<MvASSIGN NAME = "g.PRV_log_file_name"	VALUE = "{ l.saved_logfile }">
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_ErroredStamp" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'errored-' $
								 time_t_year( s.time_t, g.Merchant_Local_Timezone ) $ padl( time_t_month( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ padl( time_t_dayofmonth( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $
								 '-' $
								 padl( time_t_hour( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ padl( time_t_min( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_ExecutedStamp" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'processed-' $
								 time_t_year( s.time_t, g.Merchant_Local_Timezone ) $ padl( time_t_month( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ padl( time_t_dayofmonth( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $
								 '-' $
								 padl( time_t_hour( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ padl( time_t_min( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Frameset" PARAMETERS = "provide_filename" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<head><title>Miva Merchant: Provisioning in Progress</title></head>

	<frameset rows = "*, 25%, 22%" border = 0>
		<frame name = "Info"		src = "{ g.adminurl $ 'Screen=PRVI' }" noresize>

		<MvIF EXPR = "{ g.PRV_Return_Import }">
			<frame name = "Work"		src = "{ g.adminurl $ 'Screen=PRVW&Provide_Filename=' $ encodeattribute( l.provide_filename ) $ '&Return_Store=' $ encodeattribute( g.Store_Code ) $ '&Provision_Email=' $ encodeattribute( g.ProvisioningImport_Email ) }" noresize>
		<MvELSE>
			<frame name = "Work"		src = "{ g.adminurl $ 'Screen=PRVW&Provide_Filename=' $ encodeattribute( l.provide_filename ) }" noresize>
		</MvIF>
		
		<frame name = "Progress"	src = "{ g.adminurl $ 'Screen=BLNK' }" noresize>

		<noframes>Miva Merchant requires a browser that supports frames</noframes>
	</frameset>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Screen_Info" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<head>
	<title>Miva Merchant: Provisioning: Information</title>
	<MvEVAL EXPR = "{ [ g.Module_Admin ].StyleSheet() }">
	</head>
	<body onload="loaded = 1;">
<script language="JavaScript">
<!--
var loaded = 0;

function PRV_Draw_Status( output_document, status, percent_complete )
{
	var percent_remaining;
	var output_document;

	percent_remaining = 100 - percent_complete;

	output_document.open( 'text/html', 1 );
	output_document.writeln( '<html>' );

	output_document.writeln( '<style type="text/css">' );
	output_document.writeln( 'body {' );
	output_document.writeln( 'background-color: #ffffff; ' );
	output_document.writeln( 'font-family: Verdana, Arial, Helvetica, sans-serif;' );
	output_document.writeln( 'font-size: 11px;' );
	output_document.writeln( 'color: #333333; ' );
	output_document.writeln( '}' );
	output_document.writeln( 'A:link, A:visited, A:active, A:hover {' );
	output_document.writeln( 'color: #b20000;' );
	output_document.writeln( '}' );
	output_document.writeln( 'A:hover {' );
	output_document.writeln( 'color: #999999;' );
	output_document.writeln( 'text-decoration: none;' );
	output_document.writeln( '}' );
	output_document.writeln( 'td {' );
	output_document.writeln( 'font-family: Verdana, Arial, Helvetica, sans-serif;' );
	output_document.writeln( 'font-size: 11px;' );
	output_document.writeln( 'color: #333333;' );
	output_document.writeln( '</style>' );

	output_document.writeln( '<body>' );
	output_document.writeln( '<table border=0 width="100%">' );
	output_document.writeln( '<tr><td nowrap>' );
	output_document.writeln( '	<b>Status:</b>' );
	output_document.writeln( '</td><td width="100%">' );
	output_document.writeln( '	' + status );
	output_document.writeln( '</td></tr>' );

	output_document.writeln( '' );
	output_document.writeln( '<tr><td nowrap>' );
	output_document.writeln( '	<b>Progress:</b>' );
	output_document.writeln( '</td><td width="100%">' );
	output_document.writeln( '	<table border=0 cellpadding=1 width="100%">' );
	output_document.writeln( '	<tr><td bgcolor="#000000">' );
	output_document.writeln( '		<table border=0 cellspacing=0 cellpadding=0 width="100%">' );
	output_document.writeln( '		<tr>' );
	output_document.writeln( '			<td width="100%" bgcolor="#000000">' );
	output_document.writeln( '				<table border=0 cellspacing=0 cellpadding=0 width="100%">' );
	output_document.writeln( '				<tr>' );

	if ( percent_complete == 100 )
	{
		output_document.writeln( '					<td width="100%" bgcolor="blue">&nbsp;</td>' );
	}
	else
	{
		output_document.writeln( '					<td width="' + Math.round( percent_complete ) + '%" bgcolor="blue">&nbsp;</td>' );
		output_document.writeln( '					<td width="' + Math.round( percent_remaining ) + '%" bgcolor="white">&nbsp;</td>' );
	}

	output_document.writeln( '				</tr>' );
	output_document.writeln( '				</table>' );
	output_document.writeln( '			</td>' );
	output_document.writeln( '		</tr>' );
	output_document.writeln( '		</table>' );
	output_document.writeln( '	</td></tr>' );
	output_document.writeln( '	</table>' );
	output_document.writeln( '</td></tr>' );

	output_document.writeln( '</table>' );
	output_document.writeln( '</body></html>' );
	output_document.close();
}
//-->
</script>

	<table border=0 cellpadding=2 cellspacing=0 width="100%">
	<tr><td valign="top" align="left" colspan=2>
		<p>
		Miva Merchant is performing automated configuration operations.  This process may take some time.
		</p>

		<p>
		<b><font color="red">Please do not close your browser until the configuration process has completed</font></b>
		</p>
	</td></tr>
	</table>

<script language="JavaScript">
<!--
PRV_Draw_Status( parent.Progress.document, 'Initializing', 0 );
//-->
</script>
	</body>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Screen_Work" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<head>
	<title>Miva Merchant: Provisioning: Work</title>
	<MvEVAL EXPR = "{ [ g.Module_Admin ].StyleSheet() }">
	</head>

	<body onload="PRV_Refresh();">
<script language="JavaScript">
<!--
var PRV_Status_Message = 'Initializing';
var PRV_Status_Percent = 0;

function PRV_Status_Poll()
{
	if ( parent.Info.loaded )
	{
		parent.Info.PRV_Draw_Status( parent.Progress.document, PRV_Status_Message, PRV_Status_Percent );
	}
}

function PRV_Draw_Status( status, percent_complete )
{
	PRV_Status_Message	= status;
	PRV_Status_Percent	= percent_complete;

	PRV_Status_Poll();
}

setInterval( PRV_Status_Poll, 1000 );
//-->
</script>
	
	<MvIF EXPR = "{ NOT g.PRV_Initialized }">
		<MvASSIGN NAME = "g.PRV_Initialized"	VALUE = 1>
		<MvASSIGN NAME = "g.PRV_log_file_name"	VALUE = "{ glosub( g.Provide_Filename, '.xml', '.log' ) }">
		<MvASSIGN NAME = "g.Provide_Filesize"	VALUE = "{ fsize( g.Provide_Filename ) }">
		<MvASSIGN NAME = "g.Provide_OnComplete"	VALUE = "archive">

		<MvIF EXPR = "{ NOT xml_parse_section_init( g.Provide_Filename, 'data', 2 ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.null, 'xml_parse_section_init failure' ) }">
			<MvEXIT>
		</MvIF>			
	<MvELSE>
		<MvIF EXPR = "{ NOT xml_parse_section_setstate( g.Provide_State ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.null, 'xml_parse_section_setstate failure' ) }">
			<MvEXIT>
		</MvIF>
	</MvIF>

	<MvWHILE EXPR = "{ 1 }">
		<MvIF EXPR = "{ NOT xml_parse_section( l.provide_xml, l.done ) }">
			<MvEVAL EXPR = "{ PRV_LogParseError() }">
			<MvASSIGN NAME = "l.done" VALUE = 1>
			<MvWHILESTOP>
		</MvIF>

		<MvIF EXPR = "{ l.done }">
			<MvWHILESTOP>
		</MvIF>

		<MvEVAL EXPR = "{ PRV_Status( l.provide_xml ) }">

		<MvIF EXPR = "{ miva_member_exists( l.provide_xml:Provision:attribute, 'oncomplete' ) }">
			<MvASSIGN NAME = "g.Provide_OnComplete"	VALUE = "{ tolower( l.provide_xml:Provision:attribute:oncomplete ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null"					VALUE = "{ PRV_Action_Provision_Fragment( l.provide_xml:Provision ) }">

		<MvIF EXPR = "{ ( s.dyn_time_remaining NE -1 ) AND ( s.dyn_time_remaining LE ( s.globaltimeout / 3 ) ) }">
			<MvWHILESTOP>
		</MvIF>
	</MvWHILE>

	<MvIF EXPR = "{ l.done }">
		<MvIF EXPR = "{ g.Provide_OnComplete EQ 'delete' }">
			<MvASSIGN NAME = "l.null"				VALUE = "{ fdelete( g.Provide_Filename ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.moved"				VALUE = "{ frename( g.Provide_Filename, g.Provide_Filename $ '-' $ PRV_ExecutedStamp() ) }">
		</MvIF>
		
		<MvIF EXPR = "{ len( g.Return_Store ) EQ 0 }">
			<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_SetVariables( 'g', 'adminurl' ) }">

<script language="JavaScript">
<!--
function PRV_Refresh()
{
	parent.window.location.replace( adminurl );
}
//-->
</script>
		<MvELSE>
			<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_SetVariables( 'g', 'adminurl, Return_Store, Provision_Email' ) }">

<script language="JavaScript">
<!--
function PRV_Refresh()
{
	parent.parent.Main.location.replace( adminurl + 'Screen=IMPT&Module_Code=provimpt&Store_Code=' + encodeURIComponent( Return_Store ) + '&Provision_Completed=1&Provision_Email=' + encodeURIComponent( Provision_Email ) );		
}
//-->
</script>

		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT xml_parse_section_getstate( g.Provide_State ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.null, 'xml_parse_section_getstate failure' ) }">
			<MvEXIT>
		</MvIF>

		<form name="{ g.Screen }" method="POST" action="{ g.adminurl }">
		<MvHIDE FIELDS = "g.Screen, g.PRV_Initialized, g.PRV_log_file_name, g.Provide_Filename, g.Provide_Filesize, g.Provide_OnComplete, g.Provide_State, g.Return_Store, g.Provision_Email">
		</form>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_SetVariables( 'g', 'Screen' ) }">
<script language="JavaScript">
<!--
function PRV_Refresh()
{
	document.forms[ Screen ].submit();
}
//-->
</script>
	</MvIF>
	</body>
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Status" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( s.dyn_time_t GT g.PRV5_Last_Status ) OR
					( tolower( l.provide_xml:Provision:children[ 1 ]:children[ 1 ]:name ) EQ 'store_create' ) }">
		<MvASSIGN NAME = "l.status"		VALUE = "{ l.provide_xml:Provision:children[ 1 ]:children[ 1 ]:name }">
		<MvASSIGN NAME = "l.percent"	VALUE = "{ ( ( l.provide_xml:Provision:children[ 1 ]:children[ 1 ]:offset / g.Provide_Filesize ) * 100 ) ROUND 0 }">

		<MvEVAL EXPR = "{ '<script language="JavaScript">' $ 
						  'PRV_Draw_Status( \'' $ [ g.Module_Admin ].JavaScriptEncode( l.status ) $ '\', ' $ l.percent $ ' );' $
						  '</script>' }">
		<MvEVAL EXPR = "{ miva_output_flush() }">

		<MvASSIGN NAME = "g.PRV5_Last_Status"	VALUE = "{ s.dyn_time_t }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Fragment" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.child_pos"		VALUE = 1>
	<MvASSIGN NAME = "l.child_count"	VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvIF EXPR = "{ l.name EQ 'domain' }">		<MvEVAL EXPR = "{ PRV_Action_Provision_Domain( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'store' }">	<MvEVAL EXPR = "{ PRV_Action_Provision_Store( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'user' }">	<MvEVAL EXPR = "{ PRV_Action_Provision_User( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSE>									<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Unknown tag' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"	VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.child_pos"		VALUE = 1>
	<MvASSIGN NAME = "l.child_count"	VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00056', 'Processing domain provision tag: \'' $ l.name $ '\'' ) }">

		<MvIF EXPR = "{ l.name EQ 'settings_update' }">						<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_Settings( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'twofactorsettings_update' }">		<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_TwoFactorSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'country_add' }">						<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_Country_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'country_update' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_Country_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'country_delete' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_Country_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_add' }">						<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_Group_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_update' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_Group_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_delete' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_Group_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_user_assign' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_GroupUser_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_user_unassign' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_GroupUser_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_importmodule_assign' }">		<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_GroupImportModule_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_importmodule_unassign' }">		<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_GroupImportModule_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_exportmodule_assign' }">		<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_GroupExportModule_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_exportmodule_unassign' }">		<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_GroupExportModule_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'user_add' }">						<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_UserAdd( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'user_update' }">						<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_UserUpdate( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'user_delete' }">						<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_UserDelete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'store_create' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_StoreCreate( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'store_update' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_StoreUpdate( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'store_delete' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_StoreDelete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'trackinglink_add' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_TrackingLink_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'trackinglink_update' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_TrackingLink_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'trackinglink_delete' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_TrackingLink_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'seosettings_update' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_SEOSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'urisettings_update' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_URISettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'printqueue_add' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_PrintQueue_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'printqueue_update' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_PrintQueue_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'printqueue_delete' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_PrintQueue_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'module' }">							<MvEVAL EXPR = "{ PRV_Action_Provision_Domain_Module( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSE>															<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Unknown tag' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"	VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_User" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:attribute, 'login' ) }">
		<MvASSIGN NAME = "l.user" 	VALUE = "{ g.User }">
	<MvELSE>
		<MvASSIGN NAME = "l.login"	VALUE = "{ trim( miva_variable_value( 'l.provide_xml:attribute:login' ) ) }">
		
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.login, l.user ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load user \'' $ l.login $ '\'' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].User_Edit_Privileges( l.user, l.privileges ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT l.privileges:can_update_preferences }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children" COUNT = "{ miva_array_elements( l.provide_xml:children ) }">
		<MvASSIGN NAME = "l.name" 		VALUE = "{ tolower( l.child_xml:name ) }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00057', 'Processing user provision tag: \'' $ l.name $ '\'' ) }">

		<MvIF EXPR = "{ l.name EQ 'bookmark_add' }">						<MvEVAL EXPR = "{ PRV_Action_Provision_User_BookmarkAdd( l.user, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'bookmarks_deleteall' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_User_BookmarksDeleteAll( l.user, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'settings_update' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_User_SettingsUpdate( l.user, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'userpreference_add' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_User_UserPreferenceAdd( l.user, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'userpreferences_deleteall' }">		<MvEVAL EXPR = "{ PRV_Action_Provision_User_UserPreferencesDeleteAll( l.user, l.child_xml ) }">
		<MvELSE>															<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.store_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Admin_Open_Store( l.store_code, g.Store ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| A store must be open before we can load a branch (as it is a store table). We must therefore first
	| ensure the store has been opened, then load the branch, and finally update the "open" branch via
	| TemplateManager_Determine_Branch. Because Admin_Open_Store does not reopen a store that is already
	| open (and therefore reset any open branch), we must reset the open branch every time.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.branch" VALUE = "">

	<MvIF EXPR = "{ PRV_Attribute_Exists( l.provide_xml, 'branchkey' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'branchkey', l.branchkey ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Branch_Load_BranchKey( l.branchkey, l.branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Branch not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ PRV_Attribute_Exists( l.provide_xml, 'branch_name' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'branch_name', l.branch_name ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Branch_Load_Name( l.branch_name, l.branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Branch not found' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.branch }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Set_Working_Branch( l.branch ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.child_pos"					VALUE = 1>	
	<MvASSIGN NAME = "l.child_count"				VALUE = "{ miva_array_elements( l.provide_xml:children ) }">

	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name"					VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00058', 'Processing store provision tag: \'' $ l.name $ '\'' ) }">

		<MvIF EXPR =	 "{ l.name EQ 'module' }">																<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Module( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'module_cleanup' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Module_Cleanup( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customerfields_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CustomerFields_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_user_assign' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_GroupUser_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_user_unassign' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_GroupUser_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_import_assign' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_GroupImport_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'group_import_unassign' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_GroupImport_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'country_assign' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Country_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'country_unassign' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Country_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'countries_replace' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Countries_Replace( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'state_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_State_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'state_update' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_State_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'state_delete' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_State_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'state_deleteall' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_State_DeleteAll( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'item_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Item_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'item_update' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Item_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'item_delete' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Item_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'itemextension_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ItemExtension_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'itemextension_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ItemExtension_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'page_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Page_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'page_update' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Page_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'page_delete' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Page_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'page_customfield' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Page_CustomField( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pageitem_assign' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PageItem_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pageitem_unassign' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PageItem_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'product_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Product_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'product_update' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Product_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'product_delete' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Product_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'product_customfield' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Product_CustomField( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productattribute_add' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductAttribute_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productattribute_add_template' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductAttributeTemplate_Add( l.provide_xml:children[ l.child_pos ] ) }">		
		<MvELSEIF EXPR = "{ l.name EQ 'productattribute_add_templatecopy' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductAttributeTemplate_Copy( l.provide_xml:children[ l.child_pos ] ) }">		
		<MvELSEIF EXPR = "{ l.name EQ 'productattribute_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductAttribute_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productattribute_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductAttribute_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productattribute_delete_all' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductAttribute_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productattributeoption_add' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductAttributeOption_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productattributeoption_update' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductAttributeOption_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productattributeoption_delete' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductAttributeOption_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productrelatedproduct_assign' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductRelatedProduct_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productrelatedproduct_unassign' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductRelatedProduct_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'category_add' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Category_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'category_update' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Category_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'category_delete' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Category_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'category_customfield' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Category_CustomField( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'categoryproduct_assign' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CategoryProduct_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'categoryproduct_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CategoryProduct_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplate_add' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AttributeTemplate_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplate_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AttributeTemplate_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplate_delete' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AttributeTemplate_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplateattribute_add' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AttributeTemplateAttribute_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplateattribute_update' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AttributeTemplateAttribute_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplateattribute_delete' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AttributeTemplateAttribute_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplateattributeoption_add' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AttributeTemplateAttributeOption_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplateattributeoption_update' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AttributeTemplateAttributeOption_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplateattributeoption_delete' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AttributeTemplateAttributeOption_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customer_add' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Customer_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customer_update' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Customer_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customer_delete' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Customer_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customersettings_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CustomerSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customerlostpasswordemail_update' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CustomerLostPasswordEmail_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customer_customfield' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Customer_CustomField( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customeraddress_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CustomerAddress_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customeraddress_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CustomerAddress_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'customeraddress_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CustomerAddress_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'businessaccount_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_BusinessAccount_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'businessaccount_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_BusinessAccount_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'businessaccount_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_BusinessAccount_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroup_add' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroup_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroup_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroup_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroup_delete' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroup_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupcustomer_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupCustomer_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupcustomer_unassign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupCustomer_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupproduct_assign' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupProduct_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupproduct_unassign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupProduct_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupcategory_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupCategory_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupcategory_unassign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupCategory_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupbusinessaccount_assign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupBusinessAccount_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupbusinessaccount_unassign' }">							<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupBusinessAccount_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupshippingmethod_assign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupShippingMethod_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupshippingmethod_unassign' }">							<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupShippingMethod_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygrouppaymentmethod_assign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupPaymentMethod_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygrouppaymentmethod_unassign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupPaymentMethod_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'discountoptions_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_DiscountOptions_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroup_add' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroup_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroup_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroup_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroup_delete' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroup_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupcustomer_assign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupCustomer_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupcustomer_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupCustomer_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupproduct_assign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupProduct_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupproduct_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupProduct_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupexcludedproduct_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupExcludedProduct_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupexcludedproduct_unassign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupExcludedProduct_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupproductsubscriptionterm_assign' }">							<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupProductSubscriptionTerm_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupproductsubscriptionterm_unassign' }">							<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupProductSubscriptionTerm_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupexcludedproductsubscriptionterm_assign' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupExcludedProductSubscriptionTerm_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupexcludedproductsubscriptionterm_unassign' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupExcludedProductSubscriptionTerm_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupqualifyingproduct_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupQualifyingProduct_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupqualifyingproduct_unassign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupQualifyingProduct_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupqualifyingproductsubscriptionterm_assign' }">					<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupQualifyingProductSubscriptionTerm_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupqualifyingproductsubscriptionterm_unassign' }">				<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupQualifyingProductSubscriptionTerm_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupbusinessaccount_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupBusinessAccount_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupbusinessaccount_unassign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupBusinessAccount_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupcategory_assign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupCategory_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupcategory_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupCategory_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupexcludedcategory_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupExcludedCategory_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupexcludedcategory_unassign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupExcludedCategory_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'coupon_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Coupon_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'coupon_update' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Coupon_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'coupon_delete' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Coupon_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'couponpricegroup_assign' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CouponPriceGroup_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'couponpricegroup_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CouponPriceGroup_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'couponcustomer_assign' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CouponCustomer_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'couponcustomer_unassign' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CouponCustomer_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'couponbusinessaccount_assign' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CouponBusinessAccount_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'couponbusinessaccount_unassign' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CouponBusinessAccount_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'giftcertificate_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_GiftCertificate_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'giftcertificate_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_GiftCertificate_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'giftcertificate_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_GiftCertificate_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'giftcertificatesales_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_GiftCertificateSales_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'affiliateoptions_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AffiliateOptions_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'affiliatelostpasswordemail_update' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AffiliateLostPasswordEmail_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'affiliateemailnotification_update' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AffiliateEmailNotification_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'affiliate_add' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Affiliate_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'affiliate_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Affiliate_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'affiliate_delete' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Affiliate_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'inventorysettings_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_InventorySettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'inventoryemailnotification_update' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_InventoryEmailNotification_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'inventoryproductsettings_update' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_InventoryProductSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'upsellsettings_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_UpsellSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'upsoldproduct_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_UpsoldProduct_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'upsoldproduct_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_UpsoldProduct_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'upsoldproduct_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_UpsoldProduct_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'upsoldproductrequiredproduct_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_UpsoldProductRequiredProduct_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'upsoldproductrequiredproduct_unassign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_UpsoldProductRequiredProduct_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'encryption_add' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Encryption_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'encryption_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Encryption_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'encryption_delete' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Encryption_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'skin_select' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Skin_Select( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productkit_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductKit_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productkit_delete' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductKit_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productkit_delete_all' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductKit_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productkit_generate_variants' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductKit_Generate_Variants( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productvariant_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductVariant_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productvariant_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductVariant_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productvariant_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductVariant_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productvariant_delete_all' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductVariant_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productvariant_update_default' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductVariant_Update_Default( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productvariant_delete_default' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductVariant_Delete_Default( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productvariant_generate' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductVariant_Generate( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'themelayout_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ThemeLayout_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themebutton_add' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ThemeButton_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themebutton_delete' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ThemeButton_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themebutton_delete_all' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ThemeButton_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themetypography_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ThemeTypography_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themetypography_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ThemeTypography_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themetypography_delete_all' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ThemeTypography_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresource_add' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResource_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresource_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResource_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresource_delete' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResource_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresource_delete_all' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResource_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexpage_assign' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResourceXPage_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexpage_unassign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResourceXPage_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexpage_unassign_all_resource' }">						<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResourceXPage_Unassign_All_Resource( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexgroup_assign' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResourceXGroup_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexgroup_unassign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResourceXGroup_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexgroup_unassign_all_group' }">							<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptResourceXGroup_Unassign_All_Group( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptcombinedresourcexresource_assign' }">							<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptCombinedResourceXResource_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptcombinedresourcexresource_unassign' }">						<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptCombinedResourceXResource_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptcombinedresourcexresource_unassign_all_combinedresource' }">	<MvEVAL EXPR = "{ PRV_Action_Provision_Store_JavaScriptCombinedResourceXResource_Unassign_All_CombinedResource( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'cssresource_add' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResource_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresource_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResource_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresource_delete' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResource_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresource_delete_all' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResource_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexpage_assign' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResourceXPage_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexpage_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResourceXPage_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexpage_unassign_all_resource' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResourceXPage_Unassign_All_Resource( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexgroup_assign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResourceXGroup_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexgroup_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResourceXGroup_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexgroup_unassign_all_group' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSResourceXGroup_Unassign_All_Group( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'csscombinedresourcexresource_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSCombinedResourceXResource_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'csscombinedresourcexresource_unassign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSCombinedResourceXResource_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'csscombinedresourcexresource_unassign_all_combinedresource' }">			<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CSSCombinedResourceXResource_Unassign_All_CombinedResource( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'resourcegroup_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ResourceGroup_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'resourcegroup_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ResourceGroup_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'resourcegroup_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ResourceGroup_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'resourcegroup_delete_all' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ResourceGroup_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'font_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Font_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'font_delete' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Font_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'font_delete_all' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Font_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">
		
		<MvELSEIF EXPR = "{ l.name EQ 'image_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Image_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'image_delete' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Image_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'imagetype_add' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ImageType_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'imagetype_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ImageType_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'imagetype_delete' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ImageType_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productimage_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductImage_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productimage_delete_file' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductImage_Delete_File( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productimage_delete_type' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductImage_Delete_Type( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productimage_delete_all_product' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductImage_Delete_All_Product( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productimage_replace_type' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductImage_Replace_Type( l.provide_xml:children[ l.child_pos ] ) }">
		
		<MvELSEIF EXPR = "{ l.name EQ 'order_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Order_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'order_update' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Order_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'order_delete' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Order_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'ordercoupon_assign' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_OrderCoupon_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'ordercoupon_unassign' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_OrderCoupon_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'orderpricegroup_assign' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_OrderPriceGroup_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'orderpricegroup_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_OrderPriceGroup_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'ordershipment_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_OrderShipment_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'ordershipment_setstatus' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_OrderShipment_SetStatus( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'order_add_item' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Order_Add_Item( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'order_update_item' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Order_Update_Item( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'order_delete_item' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Order_Delete_Item( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'order_add_product' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Order_Add_Product( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'order_backorder_items' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Order_Backorder_Items( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'order_customfield' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Order_CustomField( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'report_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Report_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'import_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Import_Add( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'paymentrules_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PaymentRules_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'paymentmethodrules_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PaymentMethodRules_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productpaymentrules_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductPaymentRules_Update( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'shippingrules_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ShippingRules_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'handlingcharge_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_HandlingCharge_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'shippingmethodrules_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ShippingMethodRules_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'packagingrules_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PackagingRules_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productshippingrules_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductShippingRules_Update( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'box_add' }">																<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Box_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'box_customfield' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Box_CustomField( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'skin_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Skin_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'skin_delete' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Skin_Delete( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'note_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Note_Add( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'uri_delete' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_URI_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'uri_delete_all' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_URI_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'uri_add' }">																<MvEVAL EXPR = "{ PRV_Action_Provision_Store_URI_Add( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'digitaldownloadsettings_update' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_DigitalDownloadSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'digitaldownloadproductsettings_update' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_DigitalDownloadProductSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'digitaldownloadcdn_add' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_DigitalDownloadCDN_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'digitaldownloadcdn_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_DigitalDownloadCDN_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'digitaldownloadcdn_delete' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_DigitalDownloadCDN_Delete( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'feed_add' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Feed_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'feed_update' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Feed_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'feed_delete' }">															<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Feed_Delete( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'scheduledtask_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ScheduledTask_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'scheduledtask_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ScheduledTask_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'scheduledtask_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ScheduledTask_Delete( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'subscriptionsettings_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_SubscriptionSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'productsubscriptionsettings_update' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductSubscriptionSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productsubscriptionterm_add' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductSubscriptionTerm_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productsubscriptionterm_update' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductSubscriptionTerm_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productsubscriptionterm_delete' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductSubscriptionTerm_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'productsubscriptionterm_delete_all' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductSubscriptionTerm_Delete_All( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'mivapaysettings_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_MivaPaySettings_Update( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'paymentcardtype_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PaymentCardType_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'paymentcardtype_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PaymentCardType_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'paymentcardtype_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PaymentCardType_Delete( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'searchsettings_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_SearchSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'aisettings_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AISettings_Update( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'aisearchindex_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AISearchIndex_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'aisearchindex_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AISearchIndex_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'aisearchindex_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AISearchIndex_Delete( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'facetrules_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_FacetRules_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'categoryfacetrules_update' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CategoryFacetRules_Update( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'cachesettings_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CacheSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'redissettings_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_RedisSettings_Update( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'copyproductrules_add' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CopyProductRules_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'copyproductrules_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CopyProductRules_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'copyproductrules_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CopyProductRules_Delete( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'copypagerules_add' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CopyPageRules_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'copypagerules_update' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CopyPageRules_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'copypagerules_delete' }">												<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CopyPageRules_Delete( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSEIF EXPR = "{ l.name EQ 'collection_add' }">														<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Collection_Add( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'collection_update' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Collection_Update( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'collection_delete' }">													<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Collection_Delete( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'categorycollection_assign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CategoryCollection_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'categorycollection_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CategoryCollection_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'collectionproduct_assign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CollectionProduct_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'collectionproduct_unassign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_CollectionProduct_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupcollection_assign' }">											<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupCollection_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupcollection_unassign' }">										<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupCollection_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupexcludedcollection_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupExcludedCollection_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupexcludedcollection_unassign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupExcludedCollection_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupqualifyingcollection_assign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupQualifyingCollection_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'pricegroupqualifyingcollection_unassign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PriceGroupQualifyingCollection_Unassign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupcollection_assign' }">									<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupCollection_Assign( l.provide_xml:children[ l.child_pos ] ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'availabilitygroupcollection_unassign' }">								<MvEVAL EXPR = "{ PRV_Action_Provision_Store_AvailabilityGroupCollection_Unassign( l.provide_xml:children[ l.child_pos ] ) }">

		<MvELSE>																								<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Unknown tag' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"	VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Module" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',		l.code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'feature',	l.feature ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.code $ ' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.code $ ' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT miva_variable_value( 'l.module:feature_hash:' $ l.feature ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'' $ l.feature $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.feature EQ 'storeui' ) AND ( l.module:id NE g.Store:ui_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is not the current UI module for store \'' $ g.Store:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ ( l.feature EQ 'tax' ) AND ( l.module:id NE g.Store:tax_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is not the current tax module for store \'' $ g.Store:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ ( l.feature EQ 'currency' ) AND ( l.module:id NE g.Store:currncy_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is not the current currency module for store \'' $ g.Store:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ ( l.feature EQ 'boxpacking' ) AND ( l.module:id NE g.Store:boxpack_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is not the current box packing module for store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Load( l.module:id, l.feature, l.storemodule ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Install_NoForcedRemoval( l.module, l.message ) }">
		<MvIF EXPR = "{ l.result EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ l.result EQ -2 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Install( l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ miva_array_elements( l.provide_xml:children ) }">
		<MvASSIGN NAME = "l.provide_xml:name" VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

		<MvIF EXPR = "{ NOT l.module:feature_hash:provision_store }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support store-level provisioning' ) }">
		</MvIF>

		<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.null" VALUE = "{ Module_Provision_Store( l.module, l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Module_Cleanup" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:attribute, 'module_code' ) }">
		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'cleanup_store', l.modules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module:code, l.module ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvFOREACHCONTINUE>
			<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cleanup_store }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].Module_Cleanup_Store( l.module ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvFOREACH>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'Module_Code', l.module_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
		
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' could not be found.' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.module:feature_hash:cleanup_store }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' does not implement the cleanup_store feature.' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].Module_Cleanup_Store( l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CustomerFields_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StandardFields_Load( l.standard_fields ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Could not load StandardFields' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_List( 'o', l.provide_xml, 'Shipping',				l.standard_fields:shipping,		'Defaults,Optional,Hidden', 		'D,O,H' ) 				OR 
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Billing',				l.standard_fields:billing, 		'Defaults,Optional,Hidden',			'D,O,H' ) 				OR 
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Primary',				l.standard_fields:primaddr, 	'Shipping,Billing',					'shipping,billing' )	OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'ResidentialDelivery',	l.standard_fields:ship_res, 	'Automatic,Residential,Commercial',	'A,R,C' )				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'FirstName',				l.standard_fields:mode_fname, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'LastName',				l.standard_fields:mode_lname, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Email',					l.standard_fields:mode_email, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Phone',					l.standard_fields:mode_phone, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Fax',					l.standard_fields:mode_fax, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Company',				l.standard_fields:mode_comp, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Address',				l.standard_fields:mode_addr, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Address2',				l.standard_fields:mode_addr2, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'City',					l.standard_fields:mode_city, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'State',					l.standard_fields:mode_state, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Zip',					l.standard_fields:mode_zip, 	'Required,Optional,Hidden', 		'R,O,H' ) 				OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 'Country',				l.standard_fields:mode_cntry, 	'Required,Optional,Hidden', 		'R,O,H' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StandardFields_Update( l.standard_fields ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_GroupUser_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',	l.group_name ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'user',	l.user_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.user_name, l.user ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User with the name \'' $ l.user_name $ '\' does not exist' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserXGroup_Load( l.user:id, g.Store:id, l.group:id, l.userxgroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserXGroup_Insert( l.user:id, g.Store:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00035', 'User \'' $ l.user:name $ '\' assigned to group \'' $ l.group:name $ '\' in store \'' $ g.Store:code $ '\'' ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A user with the name \'' $ l.user_name $ '\' is already assigned to group \'' $ l.group_name $ '\' in store \'' $ g.Store:name $ '\'' ) }">		
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_GroupUser_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',	l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'user',	l.user_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.user_name, l.user ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User with the name \'' $ l.user_name $ '\' does not exist' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Library_DB ].UserXGroup_Load( l.user:id, g.Store:id, l.group:id, l.userxgroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserXGroup_Delete( l.user:id, g.Store:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00036', 'User \'' $ l.user:name $ '\' unassigned from group \'' $ l.group:name $ '\' in store \'' $ g.Store:code $ '\'' ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A user with the name \'' $ l.user_name $ '\' is not assigned to group \'' $ l.group_name $ '\' in store \'' $ g.Store:name $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_GroupImport_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',		l.group_name ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'import',	l.import_descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].Import_Load_Description( l.import_descrip, l.import ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An import with the description \'' $ l.import_descrip $ '\' does not exist' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Feature_IMP_DB ].ImportXGroup_Load( l.import:id, l.group:id, l.importxgroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An import with the description\'' $ l.import_descrip $ '\' is already assigned to group \'' $ l.group_name $ '\'' ) }">		
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].ImportXGroup_Insert( l.import:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00037', 'Import \'' $ l.import:descrip $ '\' assigned to group \'' $ l.group:name $ '\' in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_GroupImport_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',		l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'import',	l.import_descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].Import_Load_Description( l.import_descrip, l.import ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An import with the description \'' $ l.import_descrip $ '\' does not exist' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].ImportXGroup_Load( l.import:id, l.group:id, l.importxgroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An import with the description \'' $ l.import_descrip $ '\' is not assigned to group \'' $ l.group_name $ '\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].ImportXGroup_Delete( l.import:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00038', 'Import \'' $ l.import:descrip $ '\' unassigned from group \'' $ l.group:name $ '\' in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Country_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.country_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Country_Load_Alpha( l.country_code, l.country ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Country with the code \'' $ l.country_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreCountry_Load_ID( l.country:id, l.storecountry ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreCountry_Insert( l.country ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Country with the code \'' $ l.country_code $ '\' is already assigned to this store' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Country_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.country_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Country_Load_Alpha( l.country_code, l.country ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Country with the code \'' $ l.country_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvASSIGN NAME = "l.storecountry_count"		VALUE = "{ [ g.Module_Library_DB ].StoreCountryList_Load_All( l.storecountries ) }">
	<MvIF EXPR = "{ l.storecountry_count EQ 1 }">
		<MvIF EXPR = "{ l.storecountries[1]:alpha EQ l.country_code }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'You must have at least one country on your list, ignored' ) }">		
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreCountry_Load_ID( l.country:id, l.storecountry ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreCountry_Delete_ID( l.storecountry:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Country with the code \'' $ l.country_code $ '\' is not assigned to this store' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Countries_Replace" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreCountry_Delete_All() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.child_pos"		VALUE = 1>
	<MvASSIGN NAME = "l.child_count"	VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name"		VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvIF EXPR = "{ l.name EQ 'country' }">	<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Country( l.provide_xml:children[ l.child_pos ] ) }">
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"	VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Country" PARAMETERS = "provide_xml var"  STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'code',	l.country_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreCountry_Load_Alpha( l.country_code, l.storecountry ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One or more countries with the code \'' $ l.country_code $ '\' are already assigned' ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.country_pos"		VALUE = 1>
	<MvASSIGN NAME = "l.country_count"		VALUE = "{ [ g.Module_Library_DB ].CountryList_Load_Alpha( l.country_code, l.countries ) }">
	
	<MvIF EXPR = "{ l.country_count EQ 0 }">		
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A country with the code \'' $ l.country_code $ '\' does not exist' ) }">						
	</MvIF>
	
	<MvWHILE EXPR = "{ l.country_pos LE l.country_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreCountry_Insert( l.countries[ l.country_pos ] ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.country_pos"	VALUE = "{ l.country_pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_State_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name',	l.state:name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.state:code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].State_Load_Code( l.state:code, l.null ) }">
		<MvIF EXPR = "{ len( l.state:code ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A state with the code \'' $ l.state:code $ '\' already exists' ) }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A state with a blank code already exists' ) }">
		</MvIF>
		
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ 'x' $ l.state:code EQ 'x0' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A state code cannot be \'0\'' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].State_Insert( l.state:code, l.state:name ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_State_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'code',		l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].State_Load_Code( l.code, l.state ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A state with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml,	'Code',	l.state:code ) OR
					NOT PRV_Tag_Text( 'O', l.provide_xml,	'Name',	l.state:name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ l.code NE l.state:code }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].State_Load_Code( l.state:code, l.null ) }">
			<MvIF EXPR = "{ len( l.state:code ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A state with the code \'' $ l.state:code $ '\' already exists' ) }">
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A state with a blank code already exists' ) }">
			</MvIF>
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ 'x' $ l.state:code EQ 'x0' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A state code cannot be \'0\'' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].State_Update( l.code, l.state:code,  l.state:name ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_State_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].State_Load_Code( l.code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A state with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].State_Delete( l.code ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_State_DeleteAll" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.state_count" VALUE = "{ StateList_Load_All( l.state ) }">
	
	<MvASSIGN NAME = "l.pos" VALUE = 1>
	<MvWHILE EXPR = "{ l.pos LE l.state_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].State_Delete( l.state[ l.pos ]:code ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	
		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvCOMMENT>
|
|	Features
|
</MvCOMMENT>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Item_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'code',		l.item:code ) OR
					NOT PRV_Attribute_Text( 	l.provide_xml, 'module',	l.item:module ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.item:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Item with the code \'' $ l.item:code $ '\' already exists' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.item:module, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load module \'' $ l.item:module $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) OR
					NOT l.module:feature_hash:component }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' does not implement the component feature' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_Item( l.item:code, l.item:module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Item_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',		l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 'R', 	l.provide_xml, 'Module',	l.module_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.code, l.item ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Item not found' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.module:code, l.item:mod_code ) NE 0 }">
		<MvIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) OR
						NOT l.module:feature_hash:component }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not implement the component feature' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Update_Item( l.item, l.item:code, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Item_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.code, l.item ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Item not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_Item( l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ItemExtension_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'itemcode',	l.itemcode ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'module',	l.module ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.itemcode, l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Item not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module, l.extension_module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.extension_module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.extension_module:code $ '\' has been deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.extension_module ) OR
					NOT l.extension_module:feature_hash:component }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.extension_module:code $ '\' does not implement the component feature' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Load( l.extension_module:id, 'component', l.storemodule ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.extension_module:code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ItemExtension_Load_ItemModuleCode( l.item:id, l.extension_module:code, l.existing_itemextension ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An Item Extension with module code \'' $ l.existing_itemextension:mod_code $ '\' already exists for item \'' $ l.item:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ItemExtension_LowLevel( l.item, l.extension_module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ItemExtension_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'itemcode',	l.itemcode ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'module',	l.module_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.itemcode, l.item ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Item not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ItemExtension_Load_ItemModuleCode( l.item:id, l.module:code, l.itemextension ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Item extension not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_ItemExtension( l.itemextension ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Page_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.page:admin"		VALUE = 0>
	<MvASSIGN NAME = "l.page:layout"	VALUE = 0>
	<MvASSIGN NAME = "l.page:fragment"	VALUE = 0>
	<MvASSIGN NAME = "l.page:secure"	VALUE = 0>
	<MvASSIGN NAME = "l.page:public"	VALUE = 0>
	<MvASSIGN NAME = "l.page:ui_id"		VALUE = 0>
	<MvASSIGN NAME = "l.ui"				VALUE = 0>
	<MvASSIGN NAME = "l.page:cache" 	VALUE = "anonempty">
	<MvASSIGN NAME = "l.page:cacheset" 	VALUE = "">

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'R',		l.provide_xml, 'Code',		l.page:code ) 		OR
					NOT PRV_Tag_Text(		'R:100',	l.provide_xml, 'Name',		l.page:name ) 		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Secure',	l.page:secure )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Public',	l.page:public )		OR
					NOT PRV_Tag_Text(		'o:254',	l.provide_xml, 'Title',		l.page:title ) 		OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'UI',		l.ui )				OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'Admin',		l.page:admin )		OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'Layout',	l.page:layout )		OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'Fragment',	l.page:fragment )	OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml, 'Template',	l.template )		OR
					NOT PRV_Tag_List(		'o',		l.provide_xml, 'Cache',		l.page:cache, 'Never,ProvisionalBasket,AnonymousEmptyBasket,EmptyBasket,Always', 'never,provisional,anonempty,allempty,always' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CacheSettings' ) }">
		<MvIF EXPR = "{ NOT PRV_PageCacheSettings( l.provide_xml:tags:CacheSettings[ 1 ], l.page:cacheset ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.ui }">
		<MvASSIGN NAME = "l.page:ui_id"	VALUE = "{ g.Store:ui_id }">
	</MvIF>

	<MvIF EXPR = "{ ( l.page:admin + l.page:layout + l.page:fragment ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Only one of Admin, Layout, or Fragment may be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page with the code \'' $ l.page:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_Page_LowLevel( l.page, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.page:admin AND NOT l.page:layout AND NOT l.page:fragment }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Page_New( l.page ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Page_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'code',		l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.code, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_page" VALUE = "{ l.page }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'O',		l.provide_xml, 'Code',		l.page:code ) 		OR
					NOT PRV_Tag_Text(		'O:100',	l.provide_xml, 'Name',		l.page:name ) 		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Secure',	l.page:secure )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Public',	l.page:public )		OR
					NOT PRV_Tag_Text(		'o:254',	l.provide_xml, 'Title',		l.page:title ) 		OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'Admin',		l.page:admin )		OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'Layout',	l.page:layout )		OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'Fragment',	l.page:fragment )	OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml, 'Template',	l.template ) 		OR
					NOT PRV_Tag_Text(		'O',		l.provide_xml, 'Notes',		l.notes )			OR
					NOT PRV_Tag_List(		'o',		l.provide_xml, 'Cache',		l.page:cache, 'Never,ProvisionalBasket,AnonymousEmptyBasket,EmptyBasket,Always', 'never,provisional,anonempty,allempty,always' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CacheSettings' ) }">
		<MvIF EXPR = "{ NOT PRV_PageCacheSettings( l.provide_xml:tags:CacheSettings[ 1 ], l.page:cacheset ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'UI' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 'R', l.provide_xml, 'UI', l.ui ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.ui }">	<MvASSIGN NAME = "l.page:ui_id" VALUE = "{ g.Store:ui_id }">
		<MvELSE>					<MvASSIGN NAME = "l.page:ui_id" VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.child_pos"		VALUE = 1>
	<MvASSIGN NAME = "l.child_count"	VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name"		VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvIF EXPR = "{ l.name EQ 'item' }">	<MvEVAL EXPR = "{ PRV_Action_Provision_Store_Page_Item( l.page, l.provide_xml:children[ l.child_pos ] ) }">
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"	VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.page:templ_id, l.managedtemplateversion ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page:code, l.existing_page ) AND l.page:id NE l.existing_page:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page with the code \'' $ l.page:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.page:admin + l.page:layout + l.page:fragment ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Only one of Admin, Layout, or Fragment may be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page:ui_id NE 0 AND l.code NE l.page:code }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.code $ '\' is required by the User Interface and the code cannot be updated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_ID( l.page:templ_id, l.managedtemplate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ len( l.template ) }">
		<MvIF EXPR = "{ crypto_md5( l.template ) NE crypto_md5( l.managedtemplateversion:source ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplateVersion( l.managedtemplate, l.notes, l.template, l.managedtemplateversion:settings, l.compile_error ) }">
				<MvIF EXPR = "{ len( l.compile_error ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template compilation error: ' $ l.compile_error ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Update_CacheSettings_LowLevel( l.page ) OR
					NOT [ g.Module_Feature_TUI_DB ].Page_Update( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Handle_Page_Code_Change( l.original_page, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.page:admin AND NOT l.page:layout AND NOT l.page:fragment }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Page_Update( l.page ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Page_Item" PARAMETERS = "page var, provide_xml var"  STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.code, l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Item \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Assign_Item_LowLevel( l.page, l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_array_elements( l.provide_xml:children ) }">
		<MvASSIGN NAME = "l.provide_xml:name" VALUE = "{ l.provide_xml:name $ '(' $ l.item:code $ ')' }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.item:mod_code, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module for item \'' $ l.item:code $ '\' not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) OR
						NOT l.module:feature_hash:component_prov }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support component-level provisioning' ) }">
		</MvIF>

		<MvREFERENCE NAME = "l.item_settings" VARIABLE = "{ 'l.page:settings:' $ l.item:code }">
		<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.null" VALUE = "{ ComponentModule_Provision( l.module, l.provide_xml, l.item_settings ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Page_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.code, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page:ui_id NE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.page:code $ '\' is required by the User Interface and cannot be removed' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_Page( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Page_CustomField" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module',	l.module_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'page',		l.page_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'field',		l.field_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_page }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'fields_page\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module( l.module:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page with the code \'' $ l.page_code $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.branch_id"				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID() }">
	<MvASSIGN NAME = "l.pageversion"			VALUE = "">
	<MvASSIGN NAME = "l.previous_version_id"	VALUE = "{ l.page:version_id }">

	<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_DB ].PageVersion_Copy_Page( l.page, l.pageversion ) }">

	<MvASSIGN NAME = "l.pageversion:user_id"	VALUE = "{ int( g.User:id ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].PageVersion_Insert( l.pageversion ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Copy_PageVersion( l.pageversion, l.page ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].PageBranchVersion_Insert( l.branch_id, l.page:id, l.pageversion:id ) OR
					NOT [ g.Module_Feature_TUI_DB ].PageBranchVersion_Update_Head( l.branch_id, l.page:id, l.pageversion:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Fields_Propagate( l.page:id, l.previous_version_id, l.pageversion:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Record_PageVersion( l.page:id, l.previous_version_id, l.pageversion:id, l.pageversion:xref_id, 'Page \'' $ l.page:code $ '\' custom field \'' $ l.module:code $ ':' $ l.field_code $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.module:api_ver LT 10.08 }">	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Set_Field( l.module, l.page:id, l.field_code, l.provide_xml:value ) }">
	<MvELSE>										<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Set_Field( l.module, l.page:id, l.pageversion:id, l.field_code, l.provide_xml:value ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PageItem_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'pagecode',	l.page_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'itemcode',	l.item_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.original_page ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page not found' ) }">		
	</MvIF>

	<MvASSIGN NAME = "l.page" VALUE = "{ l.original_page }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.item_code, l.item ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Item not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.item:mod_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) OR
					NOT l.module:feature_hash:component }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not implement the component feature' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page:fragment AND NOT l.module:feature_hash:component_frag }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not implement the component_frag feature' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].PageXItem_Load( l.page:id, l.item:id, l.pagexitem ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An item with the code \'' $ l.item_code $ '\' is already assigned to page \'' $ l.page_code $ '\'' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Assign_Item( l.page, l.item:code ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Global_Settings( l.page, 'Item Assignment' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_IfModified( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PageItem_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'pagecode',	l.page_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'itemcode',	l.item_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.original_page ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page not found' ) }">		
	</MvIF>

	<MvASSIGN NAME = "l.page" VALUE = "{ l.original_page }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.item_code, l.item ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Item not found' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.item:mod_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) OR
					NOT l.module:feature_hash:component }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not implement the component feature' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].PageXItem_Load( l.page:id, l.item:id, l.pagexitem ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An item with the code \'' $ l.item_code $ '\' is not assigned to page \'' $ l.page_code $ '\'' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Unassign_Item( l.page, l.item:code ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_IfModified( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ThemeLayout_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load theme settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Breakpoints' ) }">
		<MvASSIGN NAME = "l.theme:layout:breakpoints"			VALUE = "">
		<MvASSIGN NAME = "l.theme:layout:breakpoint_count"		VALUE = 0>

		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Breakpoints[ 1 ]:children">
			<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

			<MvIF EXPR = "{ l.tag NE 'breakpoint' }">
				<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.breakpoint"						VALUE = "">
			<MvASSIGN NAME = "l.breakpoint:start:unit"			VALUE = "px">
			<MvASSIGN NAME = "l.breakpoint:start:value"			VALUE = "">
			<MvASSIGN NAME = "l.breakpoint:end:unit"			VALUE = "px">
			<MvASSIGN NAME = "l.breakpoint:end:value"			VALUE = "">

			<MvIF EXPR = "{ NOT PRV_Tag_Code( 'R',		l.child_xml, 'Code', l.breakpoint:code ) OR
							NOT PRV_Tag_Text( 'R:100',	l.child_xml, 'Name', l.breakpoint:name ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ miva_array_search( l.theme:layout:breakpoints, 1, l.existing_breakpoint, 'strcasecmp( l.existing_breakpoint:code, l.breakpoint:code ) EQ 0' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Breakpoint \'' $ l.existing_breakpoint:code $ '\' already exists' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.child_xml, 'Start' ) AND NOT PRV_Tag_Exists( l.child_xml, 'End' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'At least one Start or End tag must be specified' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Theme_Tag_LengthUnit( 'o', l.child_xml, 'Start',	l.breakpoint:start ) OR
							NOT PRV_Theme_Tag_LengthUnit( 'o', l.child_xml, 'End',		l.breakpoint:end ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.theme:layout:breakpoint_count" VALUE = "{ miva_array_insert_var( l.theme:layout:breakpoints, l.breakpoint, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Update_Theme( l.theme ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00145', 'Theme layout updated on branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ThemeButton_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load theme settings' ) }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.button" VARIABLE = "l.theme:buttons">
		<MvDIMENSION INDEX = "{ ++l.theme:button_count }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 'R',		l.provide_xml, 'Code', l.button:code ) OR
					NOT PRV_Tag_Text( 'R:100',	l.provide_xml, 'Name', l.button:name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.existing_index" VALUE = "{ miva_array_search( l.theme:buttons, 1, l.existing_button, 'strcasecmp( l.existing_button:code, l.button:code ) EQ 0' ) }">

	<MvIF EXPR = "{ l.existing_index GT 0 AND l.existing_index NE l.theme:button_count }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Button \'' $ l.existing_button:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'ClassName' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGB_UT ].Theme_Generate_Button_Classname( l.theme, l.button, l.button:classname ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT PRV_Tag_Text( 'O',	l.provide_xml, 'ClassName',	l.button:classname ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PGB_UT ].Theme_Validate_Button_ClassName( l.theme, l.button:code, l.button:classname ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Styles' ) }">
		<MvIF EXPR = "{ NOT PRV_Theme_ThemeButton_Styles( l.provide_xml:tags:Styles[ 1 ], l.button:styles ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'HoverStyles' ) }">
		<MvIF EXPR = "{ NOT PRV_Theme_ThemeButton_StateStyles( l.provide_xml:tags:HoverStyles[ 1 ], l.button:styles, l.button:hover_styles ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'DisabledStyles' ) }">
		<MvIF EXPR = "{ NOT PRV_Theme_ThemeButton_StateStyles( l.provide_xml:tags:DisabledStyles[ 1 ], l.button:styles, l.button:disabled_styles ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Theme_ThemeButton_Sizes( l.provide_xml, l.theme, l.button, l.button:sizes, l.button:size_count ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Update_Theme( l.theme ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00148', 'Theme button \'' $ l.button:code $ '\' inserted on branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ThemeButton_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load theme settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.index" VALUE = "{ miva_array_search( l.theme:buttons, 1, l.button, 'strcasecmp( l.button:code, l.code ) EQ 0' ) }">

	<MvIF EXPR = "{ l.index EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Theme button \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.theme:button_count" VALUE = "{ miva_array_delete( l.theme:buttons, l.index, 1 ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Update_Theme( l.theme ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00147', 'Theme button \'' $ l.code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ThemeButton_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load theme settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.theme:buttons"		VALUE = "">
	<MvASSIGN NAME = "l.theme:button_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Update_Theme( l.theme ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00146', 'All theme buttons deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_ThemeButton_Styles" PARAMETERS = "provide_xml var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'BorderRadius' ) }">
		<MvIF EXPR = "{ NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'BorderRadius', l.border_radius ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.styles:border_top_left_radius"		VALUE = "{ l.border_radius }">
		<MvASSIGN NAME = "l.styles:border_top_right_radius"		VALUE = "{ l.border_radius }">
		<MvASSIGN NAME = "l.styles:border_bottom_right_radius"	VALUE = "{ l.border_radius }">
		<MvASSIGN NAME = "l.styles:border_bottom_left_radius"	VALUE = "{ l.border_radius }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(				'o', l.provide_xml, 'Color',					l.styles:color:value )														OR
					NOT PRV_Tag_Text(				'o', l.provide_xml, 'BackgroundColor',			l.styles:background_color:value )											OR
					NOT PRV_Theme_Tag_Font(			'o', l.provide_xml, 'Font',						l.styles:font )																OR
					NOT PRV_Tag_List(				'o', l.provide_xml, 'TextTransform',			l.styles:text_transform:value,		'None,Uppercase,Lowercase,Capitalize',
																																		'none,uppercase,lowercase,capitalize' )	OR
					NOT PRV_Tag_List(				'o', l.provide_xml, 'OverflowWrap',				l.styles:overflow_wrap:value,		'Normal,Break-Word,Anywhere',
																																		'normal,break-word,anywhere' )			OR
					NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml, 'BorderTopLeftRadius',		l.styles:border_top_left_radius )											OR
					NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml, 'BorderTopRightRadius',		l.styles:border_top_right_radius )											OR
					NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml, 'BorderBottomRightRadius',	l.styles:border_bottom_right_radius )										OR
					NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml, 'BorderBottomLeftRadius',	l.styles:border_bottom_left_radius ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Border' ) }">
		<MvASSIGN NAME = "l.styles:border_enabled:value" VALUE = 1>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:Border[ 1 ], 'BorderWidth' ) }">
			<MvIF EXPR = "{ NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml:tags:Border[ 1 ], 'BorderWidth', l.border_width ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.styles:border_top_width"	VALUE = "{ l.border_width }">
			<MvASSIGN NAME = "l.styles:border_right_width"	VALUE = "{ l.border_width }">
			<MvASSIGN NAME = "l.styles:border_bottom_width"	VALUE = "{ l.border_width }">
			<MvASSIGN NAME = "l.styles:border_left_width"	VALUE = "{ l.border_width }">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Tag_List(				'o', l.provide_xml:tags:Border[ 1 ], 'BorderStyle',			l.styles:border_style:value,		'Dotted,Dashed,Solid',
																																						'dotted,dashed,solid' )	OR
						NOT PRV_Tag_Text(				'o', l.provide_xml:tags:Border[ 1 ], 'BorderColor',			l.styles:border_color:value )								OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:Border[ 1 ], 'BorderTopWidth',		l.styles:border_top_width )									OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:Border[ 1 ], 'BorderRightWidth',	l.styles:border_right_width )								OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:Border[ 1 ], 'BorderBottomWidth',	l.styles:border_bottom_width )								OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:Border[ 1 ], 'BorderLeftWidth',		l.styles:border_left_width ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'BoxShadow' ) }">
		<MvASSIGN NAME = "l.styles:box_shadow_enabled:value" VALUE = 1>

		<MvIF EXPR = "{ NOT PRV_Tag_List(				'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowInset',	l.styles:box_shadow_inset:value,	'None,Inset',
																																						',inset' )	OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowOffsetX',	l.styles:box_shadow_offset_x )					OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowOffsetY',	l.styles:box_shadow_offset_y )					OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowBlur',	l.styles:box_shadow_blur )						OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowSpread',	l.styles:box_shadow_spread )					OR
						NOT PRV_Tag_Text(				'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowColor',	l.styles:box_shadow_color:value ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'TextUnderline' ) }">
		<MvASSIGN NAME = "l.styles:text_underline_enabled:value" VALUE = 1>

		<MvIF EXPR = "{ NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml:tags:TextUnderline[ 1 ], 'TextUnderlineThickness',	l.styles:text_underline_thickness ) OR
						NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml:tags:TextUnderline[ 1 ], 'TextUnderlineOffset',	l.styles:text_underline_offset ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_ThemeButton_StateStyles" PARAMETERS = "provide_xml var, styles var, state_styles var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'Color',				l.state_styles:color:value ) OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 'BackgroundColor',	l.state_styles:background_color:value ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.styles:border_enabled:value }">
		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Border' ) }">
			<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml:tags:Border[ 1 ], 'BorderColor', l.state_styles:border_color:value ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'BoxShadow' ) }">
		<MvASSIGN NAME = "l.state_styles:box_shadow_enabled:value" VALUE = 1>

		<MvIF EXPR = "{ NOT PRV_Tag_List(				'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowInset',	l.state_styles:box_shadow_inset:value,	'None,Inset',
																																							',inset' )	OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowOffsetX',	l.state_styles:box_shadow_offset_x )				OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowOffsetY',	l.state_styles:box_shadow_offset_y )				OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowBlur',	l.state_styles:box_shadow_blur )					OR
						NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowSpread',	l.state_styles:box_shadow_spread )					OR
						NOT PRV_Tag_Text(				'o', l.provide_xml:tags:BoxShadow[ 1 ], 'BoxShadowColor',	l.state_styles:box_shadow_color:value ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'TextUnderline' ) }">
		<MvASSIGN NAME = "l.state_styles:text_underline_enabled:value" VALUE = 1>

		<MvIF EXPR = "{ NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml:tags:TextUnderline[ 1 ], 'TextUnderlineThickness',	l.state_styles:text_underline_thickness ) OR
						NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml:tags:TextUnderline[ 1 ], 'TextUnderlineOffset',	l.state_styles:text_underline_offset ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_ThemeButton_Sizes" PARAMETERS = "provide_xml var, theme var, button var, sizes var, size_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sizes"				VALUE = "">
	<MvASSIGN NAME = "l.size_count"			VALUE = 0>
	<MvASSIGN NAME = "l.default_assigned"	VALUE = 0>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Sizes' ) }">
		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Sizes[ 1 ]:children">
			<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

			<MvIF EXPR = "{ l.tag NE 'size' }">
				<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.size"			VALUE = "">
			<MvASSIGN NAME = "l.size:default"	VALUE = 0>
			<MvASSIGN NAME = "l.size:classname" VALUE = "">

			<MvIF EXPR = "{ NOT PRV_Tag_Code(		'R',		l.child_xml, 'Code',	l.size:code ) OR
							NOT PRV_Tag_Text(		'R:100',	l.child_xml, 'Name',	l.size:name ) OR
							NOT PRV_Tag_Boolean(	'O',		l.child_xml, 'Default', l.size:default ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ miva_array_search( l.sizes, 1, l.existing_size, 'strcasecmp( l.existing_size:code, l.size:code ) EQ 0' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Size \'' $ l.existing_size:code $ '\' already exists' ) }">
			</MvIF>

			<MvIF EXPR = "{ l.size:default }">
				<MvASSIGN NAME = "l.default_assigned" VALUE = 1>

				<MvIF EXPR = "{ miva_array_search( l.sizes, 1, l.existing_size, 'l.existing_size:default' ) }">
					<MvASSIGN NAME = "l.existing_size:default" VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.child_xml, 'ClassName' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PGB_UT ].Theme_Generate_Button_Size_Classname( l.theme, l.button, l.size, l.size:classname ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, g.Error_Message ) }">
				</MvIF>
			<MvELSEIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.child_xml, 'ClassName', l.size:classname ) }">
				<MvFUNCTIONRETURN>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PGB_UT ].Theme_Validate_Button_Size_ClassName( l.theme, l.button:code, l.size:code, l.size:classname ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, g.Validation_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ PRV_Tag_Exists( l.child_xml, 'Styles' ) }">
				<MvIF EXPR = "{ NOT PRV_Theme_ThemeButton_Size_Styles( l.child_xml:tags:Styles[ 1 ], l.size:styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ PRV_Tag_Exists( l.child_xml, 'BreakpointStyles' ) }">
				<MvIF EXPR = "{ NOT PRV_Theme_ThemeButton_Size_BreakpointStyles( l.child_xml:tags:BreakpointStyles[ 1 ], l.size:breakpoint_styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.size_count" VALUE = "{ miva_array_insert_var( l.sizes, l.size, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ l.size_count EQ 0 }">
		<MvASSIGN NAME = "l.default_size"					VALUE = "">
		<MvASSIGN NAME = "l.default_size:code"				VALUE = "default">
		<MvASSIGN NAME = "l.default_size:name"				VALUE = "Default">
		<MvASSIGN NAME = "l.default_size:default"			VALUE = 1>
		<MvASSIGN NAME = "l.default_size:styles"			VALUE = "">
		<MvASSIGN NAME = "l.default_size:breakpoint_styles"	VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGB_UT ].Theme_Generate_Button_Size_Classname( l.theme, l.button, l.default_size, l.default_size:classname ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.size_count" VALUE = "{ miva_array_insert_var( l.sizes, l.default_size, -1 ) }">
	<MvELSEIF EXPR = "{ NOT l.default_assigned }">
		<MvREFERENCEARRAY NAME = "l.first_size" VARIABLE = "l.sizes">
			<MvDIMENSION INDEX = 1>
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.first_size:default" VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_ThemeButton_Size_Styles" PARAMETERS = "provide_xml var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Grouped Styles
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Padding' ) }">
		<MvIF EXPR = "{ NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'Padding', l.padding ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.styles:padding_top"		VALUE = "{ l.padding }">
		<MvASSIGN NAME = "l.styles:padding_right"	VALUE = "{ l.padding }">
		<MvASSIGN NAME = "l.styles:padding_bottom"	VALUE = "{ l.padding }">
		<MvASSIGN NAME = "l.styles:padding_left"	VALUE = "{ l.padding }">
	</MvIF>

	<MvCOMMENT>
	|
	| Individual Styles
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'FontSize',		l.styles:font_size )		OR
					NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'LineHeight',		l.styles:line_height )		OR
					NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'LetterSpacing',	l.styles:letter_spacing )	OR
					NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'PaddingTop',		l.styles:padding_top )		OR
					NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'PaddingRight',	l.styles:padding_right )	OR
					NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'PaddingBottom',	l.styles:padding_bottom )	OR
					NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'PaddingLeft',	l.styles:padding_left ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_ThemeButton_Size_BreakpointStyles" PARAMETERS = "provide_xml var, breakpoint_styles var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag NE 'breakpoint' }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'code', l.code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.styles" VARIABLE = "l.breakpoint_styles">
			<MvMEMBER NAME = "{ l.code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT PRV_Theme_ThemeButton_Size_Styles( l.child_xml, l.styles ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ThemeTypography_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load theme settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.typography" VALUE = "">

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 'R',		l.provide_xml, 'Code', l.typography:code )	OR
					NOT PRV_Tag_Text( 'R:100',	l.provide_xml, 'Name', l.typography:name )	OR
					NOT PRV_Tag_List( 'R',		l.provide_xml, 'Type', l.typography:type, 'Heading,Paragraph', 'heading,paragraph' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ miva_array_search( l.theme:typographies, 1, l.existing_typography, 'strcasecmp( l.existing_typography:code, l.typography:code ) EQ 0' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Typography \'' $ l.existing_typography:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'ClassName' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGB_UT ].Theme_Generate_Typography_Classname( l.theme, l.typography, l.typography:classname ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT PRV_Tag_Text( 'O',	l.provide_xml, 'ClassName',	l.typography:classname ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PGB_UT ].Theme_Validate_Typography_ClassName( l.theme, l.typography:code, l.typography:classname ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Styles' ) }">
		<MvIF EXPR = "{ NOT PRV_Theme_ThemeTypography_Styles( l.provide_xml:tags:Styles[ 1 ], l.typography:type, l.typography:styles ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'BreakpointStyles' ) }">
		<MvIF EXPR = "{ NOT PRV_Theme_ThemeTypography_BreakpointStyles( l.provide_xml:tags:BreakpointStyles[ 1 ], l.typography:breakpoint_styles ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.theme:typography_count" VALUE = "{ miva_array_insert_var( l.theme:typographies, l.typography, -1 ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Update_Theme( l.theme ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00151', 'Theme typography \'' $ l.typography:code $ '\' inserted on branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ThemeTypography_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load theme settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.index" VALUE = "{ miva_array_search( l.theme:typographies, 1, l.typography, 'strcasecmp( l.typography:code, l.code ) EQ 0' ) }">

	<MvIF EXPR = "{ l.index EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Theme typography \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.theme:typography_count" VALUE = "{ miva_array_delete( l.theme:typographies, l.index, 1 ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Update_Theme( l.theme ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00150', 'Theme typography \'' $ l.code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ThemeTypography_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load theme settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.theme:typographies"		VALUE = "">
	<MvASSIGN NAME = "l.theme:typography_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Update_Theme( l.theme ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00149', 'All theme typography deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_ThemeTypography_Styles" PARAMETERS = "provide_xml var, type, styles var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text(				'o', l.provide_xml, 'Color',					l.styles:color:value )														OR
					NOT PRV_Theme_Tag_Font(			'o', l.provide_xml, 'Font',						l.styles:font )																OR
					NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml, 'FontSize',					l.styles:font_size )														OR
					NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml, 'LineHeight',				l.styles:line_height )														OR
					NOT PRV_Theme_Tag_LengthUnit(	'o', l.provide_xml, 'LetterSpacing',			l.styles:letter_spacing )													OR
					NOT PRV_Tag_List(				'o', l.provide_xml, 'TextTransform',			l.styles:text_transform:value,	'None,Uppercase,Lowercase,Capitalize',
																																	'none,uppercase,lowercase,capitalize' )		OR
					NOT PRV_Tag_List(				'o', l.provide_xml, 'OverflowWrap',				l.styles:overflow_wrap:value,	'Normal,Break-Word,Anywhere',
																																	'normal,break-word,anywhere' )				OR
					NOT PRV_Tag_List(				'o', l.provide_xml, 'WhiteSpace',				l.styles:white_space:value,		'Normal,Nowrap,Pre,PreWrap,PreLine',
																																	'normal,nowrap,pre,prewrap,preline' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.type EQ 'paragraph' }">
		<MvIF EXPR = "{ NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'ParaphraphSpacing',		l.styles:paragraph_spacing ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_ThemeTypography_BreakpointStyles" PARAMETERS = "provide_xml var, breakpoint_styles var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag NE 'breakpoint' }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'code', l.code ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.styles" VARIABLE = "l.breakpoint_styles">
			<MvMEMBER NAME = "{ l.code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT PRV_Theme_ThemeTypography_BreakpointStyles_Styles( l.child_xml, l.styles ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_ThemeTypography_BreakpointStyles_Styles" PARAMETERS = "provide_xml var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'FontSize',		l.styles:font_size )	OR
					NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'LineHeight',		l.styles:line_height )	OR
					NOT PRV_Theme_Tag_LengthUnit( 'o', l.provide_xml, 'LetterSpacing',	l.styles:letter_spacing ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_Tag_LengthUnit" PARAMETERS = "required, provide_xml var, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:tags, l.tag_name ) }">
		<MvIF EXPR = "{ ( l.required EQ 'R' ) OR ( l.required EQ 'r' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag ' $ l.tag_name ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.tag" VARIABLE = "l.provide_xml:tags">
		<MvMEMBER NAME = "{ l.tag_name }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ miva_array_elements( l.tag ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Multiple values for ' $ l.tag_name $ ' specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.tag[ 1 ], 'unit' ) }">
		<MvASSIGN NAME = "l.output:unit" VALUE = "px">
	<MvELSEIF EXPR = "{ NOT PRV_Attribute_List( l.tag[ 1 ], 'unit', l.output:unit, 'px,pt,em,rem,vw,vh,%', 'px,pt,em,rem,vw,vh,%' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.output:value" VALUE = "{ trim( l.tag[ 1 ]:value ) }">

	<MvIF EXPR = "{ ISNULL l.output:value }">
		<MvIF EXPR = "{ ( l.required EQ 'R' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The value of ' $ l.tag_name $ ' may not be blank' ) }">
		<MvELSEIF EXPR = "{ l.required EQ 'O' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'If specified, the value of ' $ l.tag_name $ ' may not be blank' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.output:value AND miva_decimal_precision( l.output:value ) EQ -1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for ' $ l.tag_name $ ': Please specify a number' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Theme_Tag_Font" PARAMETERS = "required, provide_xml var, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( l.required, l.provide_xml, l.tag_name, l.output:code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, l.tag_name ) }"> 
		<MvREFERENCEARRAY NAME = "l.tag" VARIABLE = "l.provide_xml:tags">
			<MvMEMBER NAME = "{ l.tag_name }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.tag[ 1 ], 'weight' ) }">
			<MvASSIGN NAME = "l.output:weight" VALUE = "400">
		<MvELSEIF EXPR = "{ NOT PRV_Attribute_List( l.tag[ 1 ], 'weight', l.output:weight, '100,200,300,400,500,600,700,800,900', '100,200,300,400,500,600,700,800,900' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.tag[ 1 ], 'style' ) }">
			<MvASSIGN NAME = "l.output:style" VALUE = "normal">
		<MvELSEIF EXPR = "{ NOT PRV_Attribute_List( l.tag[ 1 ], 'style', l.output:style, 'normal,italic', 'normal,italic' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvCOMMENT>
		|
		| Validate weight / style if font code is defined. If font code is blank, inherit / default
		| logic is used and we allow any weight / style value because we don't know what font it is inheriting.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT ISNULL l.output:code }"> 
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Font_Load_Code( l.output:code, l.loaded_font ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for ' $ l.tag_name $ ': Font not found' ) }">
			</MvIF>

			<MvREFERENCEARRAY NAME = "l.font_weight_available" VARIABLE = "l.loaded_font:weights">
				<MvMEMBER NAME = "{ l.output:weight }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.font_style_available" VARIABLE = "l.loaded_font:styles">
				<MvMEMBER NAME = "{ l.output:style }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT l.font_weight_available }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.tag[ 1 ], 'weight \'' $ l.output:weight $ '\' not available for font \'' $ l.loaded_font:code $ '\'' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.font_style_available }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.tag[ 1 ], 'style \'' $ l.output:style $ '\' not available for font \'' $ l.loaded_font:code $ '\'' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Product_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.product:price" 		VALUE = "0.00">
	<MvASSIGN NAME = "l.product:cost" 		VALUE = "0.00">
	<MvASSIGN NAME = "l.product:weight" 	VALUE = "0.00">

	<MvASSIGN NAME = "l.product:taxable" 	VALUE = 1>
	<MvASSIGN NAME = "l.product:active" 	VALUE = 1>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 		'R', l.provide_xml,	'Code',					l.product:code )			OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'SKU',					l.product:sku )				OR
					NOT PRV_Tag_Text(		'R', l.provide_xml,	'Name',					l.product:name )			OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'CategoryCode',			l.category_list )			OR
					NOT PRV_Tag_Price( 		'o', l.provide_xml,	'Price',				l.product:price )			OR
					NOT PRV_Tag_Price( 		'o', l.provide_xml,	'Cost',					l.product:cost )			OR
					NOT PRV_Tag_Weight( 	'o', l.provide_xml,	'Weight',				l.product:weight )			OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'Description',			l.product:descrip )			OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'ThumbnailImage',		l.product:thumbnail )		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'FullSizeImage',		l.product:image )			OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,	'Taxable',				l.product:taxable )			OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,	'Active',				l.product:active )			OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'PageTitle',			l.product:page_title )		OR
					NOT PRV_Tag_Code( 		'o', l.provide_xml,	'AlternateDisplayPage',	l.product:page_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Product_Load_Code( l.product:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CanonicalCategoryCode' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml,	'CanonicalCategoryCode', l.product:cancat_code ) }">			<MvASSIGN NAME = "l.product:cancat_id" 	VALUE = 0>
		<MvELSEIF EXPR = "{ ISNULL l.product:cancat_code }">																	<MvASSIGN NAME = "l.product:cancat_id" 	VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.product:cancat_code, l.canonical_category ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvASSIGN NAME = "l.product:cancat_id" 	VALUE = 0>
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'The Category \'' $ l.product:cancat_code $ '\' does not exist' ) }">
		<MvELSE>																												<MvASSIGN NAME = "l.product:cancat_id" 	VALUE = "{ l.canonical_category:id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ',' IN l.category_list }">
		<MvASSIGN NAME = "l.category_count" 	VALUE = 0>
		<MvASSIGN NAME = "l.pos" 				VALUE = 1>

		<MvASSIGN NAME = "l.product_category" 	VALUE = "{ gettoken( l.category_list, ',', l.pos ) }">
		<MvWHILE EXPR = "{ len( l.product_category ) }">
			<MvASSIGN NAME = "l.category_count"   VALUE = "{ l.category_count + 1 }">
			<MvASSIGN NAME = "l.product_category" VALUE = "{ trim( l.product_category ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.product_category, l.temp_category ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.product_category $ '\' does not exist' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.category" INDEX = "{ l.category_count }" VALUE = "{ l.temp_category }">
			<MvASSIGN NAME = "l.pos"   									 VALUE = "{ l.pos + 1 }">

			<MvASSIGN NAME = "l.product_category" 	VALUE = "{ gettoken( l.category_list, ',', l.pos ) }">
		</MvWHILE>
	<MvELSEIF EXPR = "{ len( l.category_list ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_list, l.category ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_list $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.category_count" 	VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.product:catcount" 	VALUE = 0>
	<MvASSIGN NAME = "l.product:agrpcount" 	VALUE = 0>
	<MvASSIGN NAME = "l.product:pgrpcount" 	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Insert( l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Product_New( l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.category_count GT 1 }">
		<MvASSIGN NAME = "l.pos" VALUE = 1>
		<MvWHILE EXPR = "{ l.pos LE l.category_count }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].CategoryXProduct_Load( l.category[ l.pos ]:id, l.product:id, l.catxprod ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].CategoryXProduct_Insert( l.category[ l.pos ]:id, l.product:id ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.pos" 				VALUE = "{ l.pos + 1 }">
		</MvWHILE>
	<MvELSEIF EXPR = "{ l.category_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].CategoryXProduct_Load( l.category:id, l.product:id, l.catxprod ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].CategoryXProduct_Insert( l.category:id, l.product:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Product_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 		'O', l.provide_xml,	'Code',						l.product:code )			OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'SKU',						l.product:sku )				OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'Name',						l.product:name )			OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,	'Price',					l.product:price )			OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,	'Cost',						l.product:cost )			OR
					NOT PRV_Tag_Weight( 	'o', l.provide_xml,	'Weight',					l.product:weight )			OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'Description',				l.product:descrip )			OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'ThumbnailImage',			l.product:thumbnail )		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'FullSizeImage',			l.product:image )			OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,	'Taxable',					l.product:taxable )			OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,	'Active',					l.product:active ) 			OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'PageTitle',				l.product:page_title )		OR
					NOT PRV_Tag_Code( 		'o', l.provide_xml,	'AlternateDisplayPage',		l.product:page_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ tolower( l.product:code ) NE tolower( l.code ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Product_Load_Code( l.product:code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product:code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CanonicalCategoryCode' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml,	'CanonicalCategoryCode', l.product:cancat_code ) }">			<MvASSIGN NAME = "l.product:cancat_id" 	VALUE = 0>
		<MvELSEIF EXPR = "{ ISNULL l.product:cancat_code }">																	<MvASSIGN NAME = "l.product:cancat_id" 	VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.product:cancat_code, l.canonical_category ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvASSIGN NAME = "l.product:cancat_id" 	VALUE = 0>
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'The Category \'' $ l.product:cancat_code $ '\' does not exist' ) }">
		<MvELSE>																												<MvASSIGN NAME = "l.product:cancat_id" 	VALUE = "{ l.canonical_category:id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update( l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Product_Update( l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Product_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Delete( l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Product_CustomField" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module',	l.module_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'product',	l.product_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'field',		l.field_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module_code $ ' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module:code $ ' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_prod }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'fields_prod\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module( l.module:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.null" VALUE = "{ Module_Product_Set_Field( l.module, l.product:id, l.field_code, l.provide_xml:value ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_prod', l.modules ) }">
		<MvIF EXPR = "{ l.module:api_ver GE 9.03 }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_Product_Update( l.module, l.product ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_COL_UT ].Product_Evaluate_Collections( l.product ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductAttribute_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.attribute:price"		VALUE = "0.00">
	<MvASSIGN NAME = "l.attribute:cost"			VALUE = "0.00">
	<MvASSIGN NAME = "l.attribute:weight"		VALUE = "0.00">
	<MvASSIGN NAME = "l.attribute:required"		VALUE = 0>
	<MvASSIGN NAME = "l.attribute:inventory"	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 		'R', l.provide_xml,		'Code',			l.attribute:code )														OR
					NOT PRV_Tag_List( 		'R', l.provide_xml,		'Type',			l.attribute:type,	'radio,select,checkbox,text,memo,swatch-select',
																										'radio,select,checkbox,text,memo,swatch-select' )	OR
					NOT PRV_Tag_Text( 		'R', l.provide_xml,		'Prompt',		l.attribute:prompt )													OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,		'Price',		l.attribute:price )														OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,		'Cost',			l.attribute:cost )														OR
					NOT PRV_Tag_Weight( 	'o', l.provide_xml,		'Weight',		l.attribute:weight )													OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,		'Required',		l.attribute:required )													OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,		'Inventory',	l.attribute:inventory )													OR
					NOT PRV_Tag_Text(		'o', l.provide_xml,		'Image',		l.attribute:image ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An attribute with the code \'' $ l.attribute:code $ '\' already exists' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.attribute:product_id" 	VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.attribute:default_id" 	VALUE = 0>
	<MvASSIGN NAME = "l.attribute:attemp_id" 	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Insert( l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductAttributeTemplate_Copy" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'product_code',				l.product_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml,	'attribute_template_code',	l.template_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template_code, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Copy( l.template:id, l.product:id, '' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductAttributeTemplate_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'AttributeTemplateCode',	l.template_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.attribute_code"		VALUE = "{ l.template_code }">
	<MvASSIGN NAME = "l.attribute_prompt"	VALUE = "{ l.template_code }">

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'AttributeCode',			l.attribute_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'AttributePrompt',		l.attribute_prompt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.attribute_count" VALUE = "{ AttributeList_Load_Product( l.product:id, l.temp_attr ) }">
	
	<MvASSIGN NAME = "l.pos" VALUE = 1>
	<MvWHILE EXPR = "{ l.pos LE l.attribute_count }">
		<MvIF EXPR = "{ l.temp_attr[ l.pos ]:code EQ l.attribute_code }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An attribute template with the code \'' $ l.template_code $ '\' already exists' ) }">
		</MvIF>		

		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template_code, l.template ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute Template with the code \'' $ l.template_code $ '\' does not exist' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.attribute:code"			VALUE = "{ l.attribute_code }">
	<MvASSIGN NAME = "l.attribute:prompt"	 	VALUE = "{ l.attribute_prompt }">
	<MvASSIGN NAME = "l.attribute:type" 		VALUE = "template">
	<MvASSIGN NAME = "l.attribute:product_id" 	VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.attribute:default_id" 	VALUE = 0>
	<MvASSIGN NAME = "l.attribute:attemp_id" 	VALUE = "{ l.template:id }">
	<MvASSIGN NAME = "l.attribute:price"		VALUE = 0.00>
	<MvASSIGN NAME = "l.attribute:cost"			VALUE = 0.00>
	<MvASSIGN NAME = "l.attribute:weight"		VALUE = 0.00>
	<MvASSIGN NAME = "l.attribute:required"		VALUE = 0>
	<MvASSIGN NAME = "l.attribute:inventory"	VALUE = 0>
	<MvASSIGN NAME = "l.attribute:image"		VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Insert( l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductAttribute_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'product_code',		l.product_code ) OR 
					NOT PRV_Attribute_Text( l.provide_xml,	'attribute_code',	l.attribute_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute_code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute with the code \'' $ l.attribute_code $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_attribute"	VALUE = "{ l.attribute }">
	<MvASSIGN NAME = "l.inventory"			VALUE = "{ l.original_attribute:inventory }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 		'O',		l.provide_xml, 'Code',		l.attribute:code )																OR
					NOT PRV_Tag_List( 		'O',		l.provide_xml, 'Type',		l.attribute_type,	'radio,select,checkbox,text,memo,template,swatch-select',
																										'radio,select,checkbox,text,memo,template,swatch-select' )	OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'Prompt',	l.attribute:prompt )															OR
					NOT PRV_Tag_Price(		'O',		l.provide_xml, 'Price',		l.attribute:price )																OR
					NOT PRV_Tag_Price(		'O',		l.provide_xml, 'Cost',		l.attribute:cost )																OR
					NOT PRV_Tag_Weight( 	'o',		l.provide_xml, 'Weight',	l.attribute:weight )															OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'Required',	l.attribute:required )															OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'Inventory',	l.inventory )																	OR
					NOT PRV_Tag_Text( 		'o:254',	l.provide_xml, 'Image',		l.attribute:image ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute:code, l.existing_attribute ) AND l.existing_attribute:id NE l.attribute:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An attribute with the code \'' $ l.attribute:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.attribute_type EQ 'template' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Code( 'R', l.provide_xml, 'Template_Code', l.template_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template_code, l.attributetemplate ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An attribute template with the code \'' $ l.template_code $ '\' does not exist' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.original_attribute:attemp_id NE l.attributetemplate:id }">
			<MvIF EXPR = "{ l.original_attribute:attemp_id }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Decrement_ReferenceCount( l.original_attribute:attemp_id ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Increment_ReferenceCount( l.attributetemplate:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.attribute:type"			VALUE = "{ l.attribute_type }">
		<MvASSIGN NAME = "l.attribute:attemp_id"	VALUE = "{ l.attributetemplate:id }">
	<MvELSEIF EXPR = "{ NOT ISNULL l.attribute_type }">
		<MvIF EXPR = "{ l.original_attribute:type EQ 'template' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Decrement_ReferenceCount( l.original_attribute:attemp_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.attribute:type" 		VALUE = "{ l.attribute_type }">
		<MvASSIGN NAME = "l.attribute:attemp_id"	VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Update( l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.original_attribute:type	NE l.attribute:type )	AND
					( l.attribute:type			NE 'radio' )			AND
					( l.attribute:type			NE 'select' )			AND
					( l.attribute:type			NE 'swatch-select' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Option_Delete_All_Attribute( l.attribute:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.inventory NE l.attribute:inventory }">
		<MvASSIGN NAME = "l.attribute:inventory"	VALUE = "{ l.inventory }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Update_Inventory( l.attribute ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductAttribute_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Decrement_ReferenceCount_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Delete_All_Product( l.product:id ) OR
					NOT [ g.Module_Library_DB ].Option_Delete_All_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductAttribute_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'attribute_code',	l.attribute_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute_code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute with the code \'' $ l.attribute_code $ '\' is not assigned to product \'' $ l.product_code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Delete( l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductAttributeOption_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'product_code',		l.product_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml,	'attribute_code',	l.attribute_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute_code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute with the code \'' $ l.attribute_code $ '\' is not assigned to product \'' $ l.product_code $ '\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.option:price" 		VALUE = "0.00">
	<MvASSIGN NAME = "l.option:cost" 		VALUE = "0.00">
	<MvASSIGN NAME = "l.option:weight" 		VALUE = "0.00">
	
	<MvASSIGN NAME = "l.option:default" 	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 	 	'R', l.provide_xml,	'Code',				l.option:code )		OR
					NOT PRV_Tag_Text( 	 	'R', l.provide_xml,	'Prompt',			l.option:prompt )	OR
					NOT PRV_Tag_Price(	 	'o', l.provide_xml,	'Price',			l.option:price )	OR
					NOT PRV_Tag_Price(	 	'o', l.provide_xml,	'Cost',				l.option:cost )		OR
					NOT PRV_Tag_Weight(		'o', l.provide_xml,	'Weight',			l.option:weight )	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'Image',			l.option:image )	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml,	'DefaultOption',	l.option:default ) 	}">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Option_Load_Code( l.attribute:id, l.option:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An option with the code \'' $ l.option:code $ '\' already exists' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.option:product_id"	VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.option:attr_id"		VALUE = "{ l.attribute:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Option_Insert( l.option ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.option:default }">
		<MvASSIGN NAME = "l.attribute:default_id" VALUE = "{ l.option:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Update_Default( l.attribute ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductAttributeOption_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'product_code',		l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml,	'attribute_code',	l.attribute_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml,	'option_code',		l.option_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute_code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute with the code \'' $ l.attribute_code $ '\' is not assigned to product \'' $ l.product_code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Option_Load_Code( l.attribute:id, l.option_code, l.option ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An option with the code \'' $ l.option_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 	 	'O', l.provide_xml, 'Code',				l.option:code )		OR
					NOT PRV_Tag_Text( 	 	'O', l.provide_xml, 'Prompt',			l.option:prompt )	OR
					NOT PRV_Tag_Price(	 	'o', l.provide_xml, 'Price',			l.option:price )	OR
					NOT PRV_Tag_Price(	 	'o', l.provide_xml, 'Cost',				l.option:cost )		OR
					NOT PRV_Tag_Weight(		'o', l.provide_xml, 'Weight',			l.option:weight )	OR
					NOT PRV_Tag_Text( 	 	'o', l.provide_xml, 'Image',			l.option:image )	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'DefaultOption',	l.option:default ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.option:code NE l.option_code }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Option_Load_Code( l.attribute:id, l.option:code, l.existing_option ) AND l.existing_option:id NE l.option:id }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An option with the code \'' $ l.option:code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Option_Update( l.option ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.option:default }">
		<MvASSIGN NAME = "l.attribute:default_id" VALUE = "{ l.option:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Update_Default( l.attribute ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.option:id EQ l.attribute:default_id }">
			<MvASSIGN NAME = "l.attribute:default_id" VALUE = 0>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Update_Default( l.attribute ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductAttributeOption_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',		l.product_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'attribute_code',	l.attribute_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'option_code',		l.option_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute_code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute with the code \'' $ l.attribute_code $ '\' is not assigned to product \'' $ l.product_code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Option_Load_Code( l.attribute:id, l.option_code, l.option ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An option with the code \'' $ l.option_code $ '\' is not assigned to attribute \'' $ l.attribute_code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Option_Delete( l.attribute, l.option ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Update_LastUpdated( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductRelatedProduct_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',			l.product_code ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'relatedproduct_code',	l.relprod_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.relprod_code, l.related_product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Related Product with the code \'' $ l.relprod_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ l.product:id EQ l.related_product:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A product may not be related to itself' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_RPD_DB ].RelatedProduct_Load_Product( l.product:id, l.related_product:id, l.null ) }">
		<MvASSIGN NAME = "l.relatedproduct:product_id"	VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.relatedproduct:relprod_id"	VALUE = "{ l.related_product:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_RPD_DB ].RelatedProduct_Insert( l.relatedproduct ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductRelatedProduct_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',			l.product_code ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'relatedproduct_code',	l.relprod_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.relprod_code, l.related_product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Related Product with the code \'' $ l.relprod_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_RPD_DB ].RelatedProduct_Load_Product( l.product:id, l.related_product:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_RPD_DB ].RelatedProduct_Delete( l.product:id, l.related_product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Category_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.category:active" VALUE = 1>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 		'R', l.provide_xml, 'Code',					l.category:code ) 			OR
					NOT PRV_Tag_Text( 		'R', l.provide_xml, 'Name',					l.category:name ) 			OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ParentCategoryCode',	l.parentcategory_code ) 	OR
					NOT PRV_Tag_Code( 		'o', l.provide_xml, 'AlternateDisplayPage',	l.category:page_code )		OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'Active',				l.category:active )			OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'PageTitle',			l.category:page_title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Category_Load_Code( l.category:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ len( l.parentcategory_code ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.parentcategory_code, l.parent_category ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Parent Category with the code \'' $ l.parentcategory_code $ '\' does not exist' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.parent_category:parent_id }">
			<MvASSIGN NAME = "l.temp_cat"	VALUE = "{ l.parent_category }">
			<MvWHILE EXPR = "{ l.temp_cat:parent_id }">
				<MvIF EXPR = "{ l.category:id EQ l.temp_cat:id }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A category can not be the child of one of its children' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_ID( l.temp_cat:parent_id, l.temp_cat ) }">
					<MvWHILESTOP>
				</MvIF>
			</MvWHILE>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.category:agrpcount" VALUE = 0>

	<MvIF EXPR = "{ l.parent_category:id }">
		<MvASSIGN NAME = "l.category:parent_id"	VALUE = "{ l.parent_category:id }">
	<MvELSE>
		<MvASSIGN NAME = "l.category:parent_id"	VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Insert( l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Category_New( l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Category_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'code',	l.category_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 	 'O', l.provide_xml, 'Code',					l.category:code ) 			OR
					NOT PRV_Tag_Text( 	 'O', l.provide_xml, 'Name',					l.category:name ) 			OR
					NOT PRV_Tag_Text( 	 'o', l.provide_xml, 'ParentCategoryCode',		l.parentcategory_code ) 	OR
					NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'Active',					l.category:active )			OR
					NOT PRV_Tag_Text(	 'o', l.provide_xml, 'PageTitle',				l.category:page_title )		OR
					NOT PRV_Tag_Code( 	 'o', l.provide_xml, 'AlternateDisplayPage',	l.category:page_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.category_code NE l.category_code }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ len( l.parentcategory_code ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.parentcategory_code, l.parent_category ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Parent Category with the code \'' $ l.parentcategory_code $ '\' does not exist' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.parent_category:parent_id }">
			<MvASSIGN NAME = "l.temp_cat"	VALUE = "{ l.parent_category }">
			<MvWHILE EXPR = "{ l.temp_cat:parent_id }">
				<MvIF EXPR = "{ l.category:id EQ l.temp_cat:id }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A category can not be the child of one of its children' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_ID( l.temp_cat:parent_id, l.temp_cat ) }">
					<MvWHILESTOP>
				</MvIF>
			</MvWHILE>
		</MvIF>

		<MvASSIGN NAME = "l.category:parent_id"	VALUE = "{ l.parent_category:id }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Update( l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Category_Update( l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Category_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Delete( l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Category_CustomField" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module',	l.module_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'category',	l.category_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'field',		l.field_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module_code $ ' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module:code $ ' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_cat }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'fields_cat\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module( l.module:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.null" VALUE = "{ Module_Category_Set_Field( l.module, l.category:id, l.field_code, l.provide_xml:value ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Update_LastUpdated( l.category:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CategoryProduct_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'category_code',	l.category_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].CategoryXProduct_Load( l.category:id, l.product:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].CategoryXProduct_Insert( l.category:id, l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is already assigned to Category \'' $ l.category_code $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CategoryProduct_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'category_code',	l.category_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].CategoryXProduct_Load( l.category:id, l.product:id, l.categoryxproduct ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v10_CategoryXProduct_Delete( l.categoryxproduct ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is not assigned to Category \'' $ l.category_code $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AttributeTemplate_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',		l.template:code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'prompt',	l.template:prompt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.template:code $ '\' already exists' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.template:refcount" 	VALUE = 0>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Insert( l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AttributeTemplate_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 			l.provide_xml, 'template_code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.code, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'Template_Code',	l.template:code ) OR
					NOT PRV_Tag_Text( 'O', l.provide_xml, 'Prompt',			l.template:prompt )	}">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ l.template:code NE l.code }">
		<MvIF EXPR = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template:code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.template:code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Update( l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AttributeTemplate_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.code, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ l.template:refcount GT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template \'' $ l.template:code $ '\' cannot be deleted because it is in use by one or more products.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Delete( l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AttributeTemplateAttribute_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'template_code',	l.template_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template_code, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.template_code $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.attribute:price"		VALUE = "0.00">
	<MvASSIGN NAME = "l.attribute:cost"			VALUE = "0.00">
	<MvASSIGN NAME = "l.attribute:weight"		VALUE = "0.00">
	<MvASSIGN NAME = "l.attribute:required"		VALUE = 0>
	<MvASSIGN NAME = "l.attribute:inventory"	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Price(		'o', l.provide_xml,		'Price',		l.attribute:price )		OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,		'Cost',			l.attribute:cost )		OR
					NOT PRV_Tag_Weight( 	'o', l.provide_xml,		'Weight',		l.attribute:weight )	OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,		'Required',		l.attribute:required )	OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,		'Inventory',	l.attribute:inventory )	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,		'Image',		l.attribute:image )		OR
					NOT PRV_Tag_Code( 		'R', l.provide_xml,		'Code',			l.attribute:code )		OR
					NOT PRV_Tag_Text( 		'R', l.provide_xml,		'Prompt',		l.attribute:prompt )	OR
					NOT PRV_Tag_List( 		'R', l.provide_xml,		'Type',			l.attribute:type,	'radio,select,checkbox,text,memo,swatch-select',
																										'radio,select,checkbox,text,memo,swatch-select' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.attribute:attemp_id" 	VALUE = "{ l.template:id }">
	<MvASSIGN NAME = "l.attribute:default_id" 	VALUE = 0>

	<MvIF EXPR = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Code( l.template:id, l.attribute:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An attribute with the code \'' $ l.attribute:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Insert( l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AttributeTemplateAttribute_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'template_code',		l.template_code ) 		OR
					NOT PRV_Attribute_Text( l.provide_xml, 'attribute_code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template_code, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.template_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Code( l.template:id, l.code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An attribute with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.inventory"					VALUE = "{ l.attribute:inventory }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 		'O', l.provide_xml,		'Code',			l.attribute:code )		OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml,		'Prompt',		l.attribute:prompt )	OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,		'Price',		l.attribute:price )		OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,		'Cost',			l.attribute:cost )		OR
					NOT PRV_Tag_Weight( 	'o', l.provide_xml,		'Weight',		l.attribute:weight ) 	OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,		'Required',		l.attribute:required )	OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,		'Inventory',	l.inventory )			OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,		'Image',		l.attribute:image )		OR
					NOT PRV_Tag_List( 		'O', l.provide_xml,		'Type',			l.attribute:type,	'radio,select,checkbox,text,memo,swatch-select',
																										'radio,select,checkbox,text,memo,swatch-select' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.attribute:code NE l.code }">
		<MvIF EXPR = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Code( l.template:id, l.attribute_code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An attribute with the code \'' $ l.attribute:code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Update( l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.inventory NE l.attribute:inventory }">
		<MvASSIGN NAME = "l.attribute:inventory"	VALUE = "{ l.inventory }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Update_Inventory( l.attribute ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AttributeTemplateAttribute_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 		l.provide_xml, 'template_code',			l.template_code ) 		OR
					NOT PRV_Attribute_Text( 		l.provide_xml, 'attribute_code',		l.attribute_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template_code, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.template_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Code( l.template:id, l.attribute_code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute with the code \'' $ l.attribute_code $ '\' is not assigned to template \'' $ l.template_code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Delete_Attr( l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AttributeTemplateAttributeOption_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'template_code',	l.template_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml,	'attribute_code',	l.attribute_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template_code, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.template_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Code( l.template:id, l.attribute_code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute with the code \'' $ l.attribute_code $ '\' is not assigned to template \'' $ l.template_code $ '\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.option:price" 		VALUE = "0.00">
	<MvASSIGN NAME = "l.option:cost" 		VALUE = "0.00">
	<MvASSIGN NAME = "l.option:weight" 		VALUE = "0.00">

	<MvASSIGN NAME = "l.option:default" 	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 		'R', l.provide_xml,	'Code',				l.option:code )		OR
					NOT PRV_Tag_Text( 		'R', l.provide_xml,	'Prompt',			l.option:prompt )	OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,	'Price',			l.option:price )	OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,	'Cost',				l.option:cost )		OR
					NOT PRV_Tag_Weight( 	'o', l.provide_xml,	'Weight',			l.option:weight )	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'Image',			l.option:image )	OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,	'DefaultOption',	l.option:default ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.option:attemp_id"	VALUE = "{ l.template:id }">
	<MvASSIGN NAME = "l.option:attmpat_id"	VALUE = "{ l.attribute:id }">

	<MvIF EXPR = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Load_Code( l.attribute:id, l.option:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An option with the code \'' $ l.option:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Insert( l.option ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.option:default }">
		<MvASSIGN NAME = "l.attribute:default_id" VALUE = "{ l.option:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Update( l.attribute ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AttributeTemplateAttributeOption_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'template_code',	l.template_code ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml,	'attribute_code',	l.attribute_code )  OR
					NOT PRV_Attribute_Text( l.provide_xml,	'option_code',		l.option_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template_code, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.template_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Code( l.template:id, l.attribute_code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute with the code \'' $ l.attribute_code $ '\' is not assigned to template \'' $ l.template_code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Load_Code( l.attribute:id, l.option_code, l.option ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An option with the code \'' $ l.option_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 		'O', l.provide_xml,	'Code',				l.option:code )		OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'Prompt',			l.option:prompt )	OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,	'Price',			l.option:price )	OR
					NOT PRV_Tag_Price(		'o', l.provide_xml,	'Cost',				l.option:cost )		OR
					NOT PRV_Tag_Weight( 	'o', l.provide_xml,	'Weight',			l.option:weight )	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'Image',			l.option:image )	OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,	'DefaultOption',	l.option:default ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.option:code NE l.option_code }">
		<MvIF EXPR = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Load_Code( l.attribute:id, l.option_code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An option with the code \'' $ l.option_code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Update( l.option ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.option:default }">
		<MvASSIGN NAME = "l.attribute:default_id" VALUE = "{ l.option:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Update( l.attribute ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.option:id EQ l.attribute:default_id }">
			<MvASSIGN NAME = "l.attribute:default_id" VALUE = 0>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Update( l.attribute ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AttributeTemplateAttributeOption_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'template_code',			l.template_code ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'attribute_code',		l.attribute_code )  OR
					NOT PRV_Attribute_Text( l.provide_xml, 'option_code',			l.option_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplate_Load_Code( l.template_code, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template with the code \'' $ l.template_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Code( l.template:id, l.attribute_code, l.attribute ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Attribute with the code \'' $ l.attribute_code $ '\' is not assigned to product \'' $ l.product_code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Load_Code( l.attribute:id, l.option_code, l.option ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An option with the code \'' $ l.option_code $ '\' is not assigned to attribute \'' $ l.attribute_code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.option:id EQ l.attribute:default_id }">
		<MvASSIGN NAME = "l.attribute:default_id" VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Update( l.attribute ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Delete_ID( l.option:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Customer_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customer:ship_cntry" VALUE = "{ g.Store:country }">
	<MvASSIGN NAME = "l.customer:bill_cntry" VALUE = "{ g.Store:country }">

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'R', l.provide_xml, 'Login',						l.customer:login ) 			OR
					NOT PRV_Tag_Text( 		'R', l.provide_xml, 'LostPasswordEmail',			l.customer:pw_email ) 		OR
					NOT PRV_Tag_Text( 		'R', l.provide_xml, 'Password',						l.customer:password ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BusinessAccount',				l.business_title )			OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'ShipResidential',				l.customer:ship_res )		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipFirstName',				l.customer:ship_fname ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipLastName',					l.customer:ship_lname ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipEmail',					l.customer:ship_email ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipCompany',					l.customer:ship_comp ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipPhone',					l.customer:ship_phone ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipFax',						l.customer:ship_fax ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipAddress',					l.customer:ship_addr )		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipAddress1',					l.customer:ship_addr1 )		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipAddress2',					l.customer:ship_addr2 ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipCity',						l.customer:ship_city ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipStateCode',				l.customer:ship_state ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipZip',						l.customer:ship_zip ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipCountryCode',				l.customer:ship_cntry ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShippingAddressDescription', 	l.customer:ship_descrip ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillFirstName',				l.customer:bill_fname ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillLastName',					l.customer:bill_lname ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillEmail',					l.customer:bill_email ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillCompany',					l.customer:bill_comp ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillPhone',					l.customer:bill_phone ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillFax',						l.customer:bill_fax ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillAddress',					l.customer:bill_addr ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillAddress1',					l.customer:bill_addr1 )		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillAddress2',					l.customer:bill_addr2 ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillCity',						l.customer:bill_city ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillStateCode',				l.customer:bill_state ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillZip',						l.customer:bill_zip ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillCountryCode',				l.customer:bill_cntry ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillingAddressDescription',	l.customer:bill_descrip )	OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'TaxExempt',					l.customer:tax_exempt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Login( l.customer:login ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Login: ' $ g.Validation_Message ) }">
	<MvELSEIF EXPR = "{ [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer:login, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A customer with the login \'' $ l.customer:login $ '\' already exists' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Email( l.customer:pw_email ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for LostPasswordEmail: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_UT ].Customer_Password_Encrypted( l.customer:password ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerSettings_Load_Cached( l.customersettings ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Password( l.customersettings, l.customer:password ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Password: ' $ g.Validation_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_UT ].Customer_Password_Encrypt( l.customer:password, l.customer:password ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.business_title }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.business_title, l.businessaccount ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.business_title $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.customer:account_id" VALUE = "{ l.businessaccount:id }">		
	</MvIF>

	<MvASSIGN NAME = "l.customer:pgrpcount" VALUE = 0>
	<MvASSIGN NAME = "l.customer:order_cnt" VALUE = 0>
	<MvASSIGN NAME = "l.customer:order_avg" VALUE = 0.00>
	<MvASSIGN NAME = "l.customer:order_tot" VALUE = 0.00>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Insert( l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Customer_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'login',	l.login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A customer with the login \'' $ l.login $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.new_password"			VALUE = "">
	<MvASSIGN NAME = "l.customer:ship_addr"		VALUE = "">
	<MvASSIGN NAME = "l.customer:bill_addr"		VALUE = "">

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'O', l.provide_xml, 'Login',					l.customer:login ) 		OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml, 'LostPasswordEmail',		l.customer:pw_email ) 	OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml, 'Password',					l.new_password )	 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BusinessAccount',			l.business_title )		OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'ShipResidential',			l.customer:ship_res )	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipFirstName',			l.customer:ship_fname ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipLastName',				l.customer:ship_lname ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipEmail',				l.customer:ship_email ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipCompany',				l.customer:ship_comp ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipPhone',				l.customer:ship_phone ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipFax',					l.customer:ship_fax ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipAddress',				l.customer:ship_addr ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipAddress1',				l.customer:ship_addr1 )	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipAddress2',				l.customer:ship_addr2 ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipCity',					l.customer:ship_city ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipStateCode',			l.customer:ship_state ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipZip',					l.customer:ship_zip ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'ShipCountryCode',			l.customer:ship_cntry ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillFirstName',			l.customer:bill_fname ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillLastName',				l.customer:bill_lname ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillEmail',				l.customer:bill_email ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillCompany',				l.customer:bill_comp ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillPhone',				l.customer:bill_phone ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillFax',					l.customer:bill_fax ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillAddress',				l.customer:bill_addr ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillAddress1',				l.customer:bill_addr1 )	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillAddress2',				l.customer:bill_addr2 ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillCity',					l.customer:bill_city ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillStateCode',			l.customer:bill_state ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillZip',					l.customer:bill_zip ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'BillCountryCode',			l.customer:bill_cntry ) OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'DefaultShippingAddress', 	l.ship_descrip ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'DefaultBillingAddress', 	l.bill_descrip )		OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'TaxExempt',				l.customer:tax_exempt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer:login, l.existing_customer ) AND ( l.existing_customer:id NE l.customer:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A customer with the login \'' $ l.customer:login $ '\' already exists' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.password_changed"		VALUE = 0>

	<MvIF EXPR = "{ NOT ISNULL l.new_password }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerSettings_Load_Cached( l.customersettings ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_UT ].Customer_Password_Encrypted( l.new_password ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Password( l.customersettings, l.new_password ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Password: ' $ g.Validation_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_UT ].Customer_Password_Encrypt( l.new_password, l.new_password ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.customer:password"	VALUE = "{ l.new_password }">
		<MvASSIGN NAME = "l.password_changed"	VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'BusinessAccount' ) }">
		<MvIF EXPR = "{ ISNULL l.business_title }">
			<MvASSIGN NAME = "l.customer:account_id" VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.business_title, l.businessaccount ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.business_title $ '\' does not exist' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.customer:account_id" VALUE = "{ l.businessaccount:id }">	
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.ship_descrip }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_Description( l.customer:id, l.ship_descrip, l.ship_customeraddress ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_Address( l.customer:id, l.ship_descrip, l.ship_customeraddress ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer address \'' $ l.ship_descrip $ '\' not found' ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.customer:ship_id" 		VALUE = "{ l.ship_customeraddress:id }">
		<MvASSIGN NAME = "l.customer:ship_res"		VALUE = "{ l.ship_customeraddress:resdntl }">
		<MvASSIGN NAME = "l.customer:ship_fname"	VALUE = "{ l.ship_customeraddress:fname }">
		<MvASSIGN NAME = "l.customer:ship_lname"	VALUE = "{ l.ship_customeraddress:lname }">
		<MvASSIGN NAME = "l.customer:ship_email"	VALUE = "{ l.ship_customeraddress:email }">
		<MvASSIGN NAME = "l.customer:ship_comp"		VALUE = "{ l.ship_customeraddress:comp }">
		<MvASSIGN NAME = "l.customer:ship_phone"	VALUE = "{ l.ship_customeraddress:phone }">
		<MvASSIGN NAME = "l.customer:ship_fax"		VALUE = "{ l.ship_customeraddress:fax }">
		<MvASSIGN NAME = "l.customer:ship_addr"		VALUE = "{ l.ship_customeraddress:addr }">
		<MvASSIGN NAME = "l.customer:ship_addr1"	VALUE = "{ l.ship_customeraddress:addr1 }">
		<MvASSIGN NAME = "l.customer:ship_addr2"	VALUE = "{ l.ship_customeraddress:addr2 }">
		<MvASSIGN NAME = "l.customer:ship_city"		VALUE = "{ l.ship_customeraddress:city }">
		<MvASSIGN NAME = "l.customer:ship_state"	VALUE = "{ l.ship_customeraddress:state }">
		<MvASSIGN NAME = "l.customer:ship_zip"		VALUE = "{ l.ship_customeraddress:zip }">
		<MvASSIGN NAME = "l.customer:ship_cntry"	VALUE = "{ l.ship_customeraddress:cntry }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.bill_descrip }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_Description( l.customer:id, l.bill_descrip, l.bill_customeraddress ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_Address( l.customer:id, l.bill_descrip, l.bill_customeraddress ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer address \'' $ l.bill_descrip $ '\' not found' ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.customer:bill_id" 		VALUE = "{ l.bill_customeraddress:id }">
		<MvASSIGN NAME = "l.customer:bill_fname"	VALUE = "{ l.bill_customeraddress:fname }">
		<MvASSIGN NAME = "l.customer:bill_lname"	VALUE = "{ l.bill_customeraddress:lname }">
		<MvASSIGN NAME = "l.customer:bill_email"	VALUE = "{ l.bill_customeraddress:email }">
		<MvASSIGN NAME = "l.customer:bill_comp"		VALUE = "{ l.bill_customeraddress:comp }">
		<MvASSIGN NAME = "l.customer:bill_phone"	VALUE = "{ l.bill_customeraddress:phone }">
		<MvASSIGN NAME = "l.customer:bill_fax"		VALUE = "{ l.bill_customeraddress:fax }">
		<MvASSIGN NAME = "l.customer:bill_addr"		VALUE = "{ l.bill_customeraddress:addr }">
		<MvASSIGN NAME = "l.customer:bill_addr1"	VALUE = "{ l.bill_customeraddress:addr1 }">
		<MvASSIGN NAME = "l.customer:bill_addr2"	VALUE = "{ l.bill_customeraddress:addr2 }">
		<MvASSIGN NAME = "l.customer:bill_city"		VALUE = "{ l.bill_customeraddress:city }">
		<MvASSIGN NAME = "l.customer:bill_state"	VALUE = "{ l.bill_customeraddress:state }">
		<MvASSIGN NAME = "l.customer:bill_zip"		VALUE = "{ l.bill_customeraddress:zip }">
		<MvASSIGN NAME = "l.customer:bill_cntry"	VALUE = "{ l.bill_customeraddress:cntry }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Update( l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.password_changed }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Basket_Expire_All_Customer( l.customer:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Customer_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'login',	l.login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Delete( l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CustomerSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerSettings_Load( l.customersettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.pw_min_len"							VALUE = "">
	<MvASSIGN NAME = "l.resetexp"							VALUE = "">

	<MvIF EXPR = "{ NOT PRV_Tag_Integer(	'O', l.provide_xml, 'MinimumPasswordLength',			l.pw_min_len )					OR 
					NOT PRV_Tag_List(		'O', l.provide_xml, 'PasswordComplexity',				l.customersettings:pw_complex,
															   	'none,alphanum,mixed',				'0,1,2' )						OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'ResetType',						l.customersettings:resettype,
																'TemporaryPassword,PasswordChange',	'temporary,change' )			OR
					NOT PRV_Tag_Integer(	'O', l.provide_xml, 'ResetLinkExpiration',				l.resetexp )					OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'PasswordChangeRequiresReauth',		l.customersettings:pwchgauth )	OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'RequireCSRFToken',					l.customersettings:req_token ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.pw_min_len }">
		<MvIF EXPR = "{ l.pw_min_len LT 1 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a minimum password length value of 1 or higher' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.customersettings:pw_min_len"	VALUE = "{ l.pw_min_len }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.resetexp }">
		<MvIF EXPR = "{ l.resetexp LT 1 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a reset link expiration value of 1 or higher' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.customersettings:resetexp"		VALUE = "{ l.resetexp }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerSettings_Update( l.customersettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CustomerLostPasswordEmail_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerEmail_Load( l.customer_email ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'EmailFrom',	l.customer_email:email_from ) 	OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 'EmailCC',	l.customer_email:email_cc ) 	OR
					NOT PRV_Tag_Text( 'O', l.provide_xml, 'Subject',	l.customer_email:subject ) 		OR
					NOT PRV_Tag_Text( 'O', l.provide_xml, 'HeaderText',	l.customer_email:header ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerEmail_Update( l.customer_email ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Customer_CustomField" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module',	l.module_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'customer',	l.customer_login ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'field',		l.field_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module_code $ ' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module:code $ ' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_cust }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'fields_cust\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module( l.module:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
	</MvIF>

	<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.null" VALUE = "{ Module_Customer_Set_Field( l.module, l.customer:id, l.field_code, l.provide_xml:value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CustomerAddress_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'customer', l.login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Description',				l.customeraddress:descrip ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'FirstName',				l.customeraddress:fname ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'LastName',					l.customeraddress:lname ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Email',					l.customeraddress:email ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Company',					l.customeraddress:comp ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Phone',					l.customeraddress:phone ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Fax',						l.customeraddress:fax ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Address',					l.customeraddress:addr1 ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Address2',					l.customeraddress:addr2 ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'City',						l.customeraddress:city ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'State',					l.customeraddress:state ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Zip',						l.customeraddress:zip ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Country',					l.customeraddress:cntry )		OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'Residential',				l.customeraddress:resdntl )		OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'CustomerShippingAddress', 	l.customershippingaddress )		OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'CustomerBillingAddress', 	l.customerbillingaddress ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StandardFields_Load( l.standardfields ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_StandardFields( l.standardfields, l.customeraddress ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.customeraddress:resdntl }">
		<MvIF EXPR = "{ NOT ISNULL l.customeraddress:comp }">
			<MvASSIGN NAME = "l.customeraddress:resdntl"	VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.customeraddress:resdntl"	VALUE = 1>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.customeraddress:descrip }">
		<MvASSIGN NAME = "l.customeraddress:descrip" 		VALUE = "{ l.customeraddress:addr1 }">
	</MvIF>

	<MvASSIGN NAME = "l.customeraddress:cust_id" 			VALUE = "{ l.customer:id }">

	<MvIF EXPR = "{ [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_AddressFields( l.customer:id, l.customeraddress, l.loaded_customeraddress ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer address \'' $ l.customeraddress:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Insert( l.customeraddress ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.update_customer" 					VALUE = 0>

	<MvIF EXPR = "{ l.customershippingaddress }">
		<MvASSIGN NAME = "l.customer:ship_id" 				VALUE = "{ l.customeraddress:id }">
		<MvASSIGN NAME = "l.customer:ship_descrip"			VALUE = "{ l.customeraddress:descrip }">
		<MvASSIGN NAME = "l.customer:ship_fname"			VALUE = "{ l.customeraddress:fname }">
		<MvASSIGN NAME = "l.customer:ship_lname"			VALUE = "{ l.customeraddress:lname }">
		<MvASSIGN NAME = "l.customer:ship_email"			VALUE = "{ l.customeraddress:email }">
		<MvASSIGN NAME = "l.customer:ship_comp"				VALUE = "{ l.customeraddress:comp }">
		<MvASSIGN NAME = "l.customer:ship_phone"			VALUE = "{ l.customeraddress:phone }">
		<MvASSIGN NAME = "l.customer:ship_fax"				VALUE = "{ l.customeraddress:fax }">
		<MvASSIGN NAME = "l.customer:ship_addr"				VALUE = "">
		<MvASSIGN NAME = "l.customer:ship_addr1"			VALUE = "{ l.customeraddress:addr1 }">
		<MvASSIGN NAME = "l.customer:ship_addr2"			VALUE = "{ l.customeraddress:addr2 }">
		<MvASSIGN NAME = "l.customer:ship_city"				VALUE = "{ l.customeraddress:city }">
		<MvASSIGN NAME = "l.customer:ship_state"			VALUE = "{ l.customeraddress:state }">
		<MvASSIGN NAME = "l.customer:ship_zip"				VALUE = "{ l.customeraddress:zip }">
		<MvASSIGN NAME = "l.customer:ship_cntry"			VALUE = "{ l.customeraddress:cntry }">
		<MvASSIGN NAME = "l.customer:ship_res"				VALUE = "{ l.customeraddress:resdntl }">
		<MvASSIGN NAME = "l.update_customer" 				VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.customerbillingaddress }">
		<MvASSIGN NAME = "l.customer:bill_id" 				VALUE = "{ l.customeraddress:id }">
		<MvASSIGN NAME = "l.customer:bill_descrip"			VALUE = "{ l.customeraddress:descrip }">
		<MvASSIGN NAME = "l.customer:bill_fname"			VALUE = "{ l.customeraddress:fname }">
		<MvASSIGN NAME = "l.customer:bill_lname"			VALUE = "{ l.customeraddress:lname }">
		<MvASSIGN NAME = "l.customer:bill_email"			VALUE = "{ l.customeraddress:email }">
		<MvASSIGN NAME = "l.customer:bill_comp"				VALUE = "{ l.customeraddress:comp }">
		<MvASSIGN NAME = "l.customer:bill_phone"			VALUE = "{ l.customeraddress:phone }">
		<MvASSIGN NAME = "l.customer:bill_fax"				VALUE = "{ l.customeraddress:fax }">
		<MvASSIGN NAME = "l.customer:bill_addr"				VALUE = "">
		<MvASSIGN NAME = "l.customer:bill_addr1"			VALUE = "{ l.customeraddress:addr1 }">
		<MvASSIGN NAME = "l.customer:bill_addr2"			VALUE = "{ l.customeraddress:addr2 }">
		<MvASSIGN NAME = "l.customer:bill_city"				VALUE = "{ l.customeraddress:city }">
		<MvASSIGN NAME = "l.customer:bill_state"			VALUE = "{ l.customeraddress:state }">
		<MvASSIGN NAME = "l.customer:bill_zip"				VALUE = "{ l.customeraddress:zip }">
		<MvASSIGN NAME = "l.customer:bill_cntry"			VALUE = "{ l.customeraddress:cntry }">
		<MvASSIGN NAME = "l.update_customer" 				VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.update_customer }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Update( l.customer ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Update_LastUpdated( l.customer:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CustomerAddress_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'customer', 	l.login ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'address', 	l.address_descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_Description( l.customer:id, l.address_descrip, l.customeraddress ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_Address( l.customer:id, l.address_descrip, l.customeraddress ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer address \'' $ l.address_descrip $ '\' not found' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Description',				l.customeraddress:descrip ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'FirstName',				l.customeraddress:fname ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'LastName',					l.customeraddress:lname ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Email',					l.customeraddress:email ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Company',					l.customeraddress:comp ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Phone',					l.customeraddress:phone ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Fax',						l.customeraddress:fax ) 		OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml, 'Address',					l.customeraddress:addr1 )		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Address2',					l.customeraddress:addr2 ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'City',						l.customeraddress:city ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'State',					l.customeraddress:state ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Zip',						l.customeraddress:zip ) 		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Country',					l.customeraddress:cntry )		OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'Residential',				l.customeraddress:resdntl )		OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'CustomerShippingAddress', 	l.customershippingaddress )		OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'CustomerBillingAddress', 	l.customerbillingaddress ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StandardFields_Load( l.standardfields ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_StandardFields( l.standardfields, l.customeraddress ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_AddressFields( l.customer:id, l.customeraddress, l.loaded_customeraddress ) }">
		<MvIF EXPR = "{ l.customeraddress:id NE l.loaded_customeraddress:id }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer address \'' $ l.customeraddress:descrip $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Update( l.customeraddress ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.update_customer"				VALUE = 0>

	<MvIF EXPR = "{ l.customershippingaddress }">
		<MvASSIGN NAME = "l.customer:ship_id"			VALUE = "{ l.customeraddress:id }">
		<MvASSIGN NAME = "l.customer:ship_descrip"		VALUE = "{ l.customeraddress:descrip }">
		<MvASSIGN NAME = "l.customer:ship_fname"		VALUE = "{ l.customeraddress:fname }">
		<MvASSIGN NAME = "l.customer:ship_lname"		VALUE = "{ l.customeraddress:lname }">
		<MvASSIGN NAME = "l.customer:ship_email"		VALUE = "{ l.customeraddress:email }">
		<MvASSIGN NAME = "l.customer:ship_comp"			VALUE = "{ l.customeraddress:comp }">
		<MvASSIGN NAME = "l.customer:ship_phone"		VALUE = "{ l.customeraddress:phone }">
		<MvASSIGN NAME = "l.customer:ship_fax"			VALUE = "{ l.customeraddress:fax }">
		<MvASSIGN NAME = "l.customer:ship_addr1"		VALUE = "{ l.customeraddress:addr1 }">
		<MvASSIGN NAME = "l.customer:ship_addr2"		VALUE = "{ l.customeraddress:addr2 }">
		<MvASSIGN NAME = "l.customer:ship_city"			VALUE = "{ l.customeraddress:city }">
		<MvASSIGN NAME = "l.customer:ship_state"		VALUE = "{ l.customeraddress:state }">
		<MvASSIGN NAME = "l.customer:ship_zip"			VALUE = "{ l.customeraddress:zip }">
		<MvASSIGN NAME = "l.customer:ship_cntry"		VALUE = "{ l.customeraddress:cntry }">
		<MvASSIGN NAME = "l.customer:ship_res"			VALUE = "{ l.customeraddress:resdntl }">
		<MvASSIGN NAME = "l.update_customer"			VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.customerbillingaddress }">
		<MvASSIGN NAME = "l.customer:bill_id"			VALUE = "{ l.customeraddress:id }">
		<MvASSIGN NAME = "l.customer:bill_descrip"		VALUE = "{ l.customeraddress:descrip }">
		<MvASSIGN NAME = "l.customer:bill_fname"		VALUE = "{ l.customeraddress:fname }">
		<MvASSIGN NAME = "l.customer:bill_lname"		VALUE = "{ l.customeraddress:lname }">
		<MvASSIGN NAME = "l.customer:bill_email"		VALUE = "{ l.customeraddress:email }">
		<MvASSIGN NAME = "l.customer:bill_comp"			VALUE = "{ l.customeraddress:comp }">
		<MvASSIGN NAME = "l.customer:bill_phone"		VALUE = "{ l.customeraddress:phone }">
		<MvASSIGN NAME = "l.customer:bill_fax"			VALUE = "{ l.customeraddress:fax }">
		<MvASSIGN NAME = "l.customer:bill_addr1"		VALUE = "{ l.customeraddress:addr1 }">
		<MvASSIGN NAME = "l.customer:bill_addr2"		VALUE = "{ l.customeraddress:addr2 }">
		<MvASSIGN NAME = "l.customer:bill_city"			VALUE = "{ l.customeraddress:city }">
		<MvASSIGN NAME = "l.customer:bill_state"		VALUE = "{ l.customeraddress:state }">
		<MvASSIGN NAME = "l.customer:bill_zip"			VALUE = "{ l.customeraddress:zip }">
		<MvASSIGN NAME = "l.customer:bill_cntry"		VALUE = "{ l.customeraddress:cntry }">
		<MvASSIGN NAME = "l.update_customer"			VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.update_customer }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Update( l.customer ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Update_LastUpdated( l.customer:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CustomerAddress_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'customer', 	l.login ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'address',	l.address_descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_Description( l.customer:id, l.address_descrip, l.customeraddress ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Load_Address( l.customer:id, l.address_descrip, l.customeraddress ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer address \'' $ l.address_descrip $ '\' not found' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].CustomerAddress_Delete( l.customeraddress:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.update_customer" 		VALUE = 0>

	<MvIF EXPR = "{ l.customeraddress:id EQ l.customer:ship_id }">
		<MvASSIGN NAME = "l.customer:ship_id" 	VALUE = 0>
		<MvASSIGN NAME = "l.update_customer" 	VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.customeraddress:id EQ l.customer:bill_id }">
		<MvASSIGN NAME = "l.customer:bill_id" 	VALUE = 0>
		<MvASSIGN NAME = "l.update_customer" 	VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.update_customer }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Update_LowLevel( l.customer ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_cust', l.modules ) }">
			<MvIF EXPR = "{ l.module:api_ver GE 9.03 }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_Customer_Update( l.module, l.customer ) }">
			</MvIF>
		</MvFOREACH>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Update_LastUpdated( l.customer:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_BusinessAccount_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.businessaccount:tax_exempt"	VALUE = 0>
	<MvASSIGN NAME = "l.businessaccount:order_cnt"	VALUE = 0>
	<MvASSIGN NAME = "l.businessaccount:order_avg"	VALUE = 0.00>
	<MvASSIGN NAME = "l.businessaccount:order_tot"	VALUE = 0.00>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'R', l.provide_xml, 'Title', 		l.businessaccount:title ) OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'TaxExempt',	l.businessaccount:tax_exempt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.businessaccount:title, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.businessaccount:title $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Insert( l.businessaccount ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_BusinessAccount_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'title', l.title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.title, l.businessaccount ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.title $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'R', l.provide_xml, 'Title', 		l.businessaccount:title ) OR 
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'TaxExempt',	l.businessaccount:tax_exempt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.businessaccount:title, l.existing ) AND l.businessaccount:id NE l.existing:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.businessaccount:title $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Update( l.businessaccount ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_BusinessAccount_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'title', l.title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.title, l.businessaccount ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.title $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Delete( l.businessaccount ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroup_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.group:name" 		VALUE = "">
	<MvASSIGN NAME = "l.group:tax_exempt" 	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name',	l.group:name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group:name, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'TaxExempt', l.group:tax_exempt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Insert( l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroup_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name', l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O', l.provide_xml,	'Name',			l.group:name ) OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'TaxExempt',	l.group:tax_exempt )  }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.group:name NE l.name }">
		<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group:name, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group:name $ '\' already exists' ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Update( l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroup_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name', l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Delete( l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupProduct_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( 	l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXProduct_Load( l.group:id, l.product:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXProduct_Insert( l.group:id, l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is already assigned to Availability Group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupProduct_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( 	l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailGroupXProduct_Load( l.group:id, l.product:id, l.availgroupxproduct ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].v10_AvailGroupXProduct_Delete( l.availgroupxproduct ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is not assigned to Availability Group \'' $ l.group_name $ '\'' ) }">		
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupCategory_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( 	l.provide_xml, 'category_code',	l.category_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXCategory_Load( l.group:id, l.category:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXCategory_Insert( l.group:id, l.category:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' is already assigned to Availability Group \'' $ l.group_name $ '\'' ) }">			
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupCategory_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( 	l.provide_xml, 'category_code',	l.category_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailGroupXCategory_Load( l.group:id, l.category:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXCategory_Delete( l.group:id, l.category:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' is not assigned to Availability Group \'' $ l.group_name $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupCustomer_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'group_name',		l.group_name ) OR 
					NOT PRV_Attribute_Text( 	l.provide_xml, 'customer_login',	l.customer_login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXCustomer_Load( l.group:id, l.customer:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXCustomer_Insert( l.group:id, l.customer:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer \'' $ l.customer_login $ '\' is already assigned to Availability Group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupCustomer_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'group_name',		l.group_name ) OR 
					NOT PRV_Attribute_Text( 	l.provide_xml, 'customer_login',	l.customer_login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailGroupXCustomer_Load( l.group:id, l.customer:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXCustomer_Delete( l.group:id, l.customer:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer \'' $ l.customer_login $ '\' is not assigned to Availability Group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupBusinessAccount_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'account_title',	l.account_title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.account_title, l.businessaccount ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.account_title $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailGroupXBusinessAccount_Load( l.group:id, l.businessaccount:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.account_title $ '\' is already assigned to Availability Group \'' $ l.group_name $ '\'' ) }">	
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXBusinessAccount_Insert( l.group:id, l.businessaccount:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupBusinessAccount_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'account_title',	l.account_title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.account_title, l.businessaccount ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.account_title $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailGroupXBusinessAccount_Load( l.group:id, l.businessaccount:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXBusinessAccount_Delete( l.group:id, l.businessaccount:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.account_title $ '\' is not assigned to Availability Group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupShippingMethod_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) 	OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'module_code',	l.module_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'method_code',	l.method_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.availabilitygroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Load_Method( l.module_code, l.method_code, l.shippingmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Default( l.module_code, l.method_code, l.shippingmethodrules ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Insert( l.shippingmethodrules ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailGroupXShippingMethod_Load( l.availabilitygroup:id, l.shippingmethodrules:mod_code, l.shippingmethodrules:meth_code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Shipping method \'' $ l.shippingmethodrules:mod_code $ '\', \'' $ l.shippingmethodrules:meth_code $ '\' is already assigned to Availability Group \'' $ l.availabilitygroup:name $ '\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXShippingMethod_Insert( l.availabilitygroup:id, l.shippingmethodrules:mod_code, l.shippingmethodrules:meth_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupShippingMethod_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) 	OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'module_code',	l.module_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'method_code',	l.method_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.availabilitygroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Load_Method( l.module_code, l.method_code, l.shippingmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Shipping method \'' $ l.module_code $ '\', \'' $ l.method_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXShippingMethod_Load( l.availabilitygroup:id, l.shippingmethodrules:mod_code, l.shippingmethodrules:meth_code, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Shipping method \'' $ l.shippingmethodrules:mod_code $ '\', \'' $ l.shippingmethodrules:meth_code $ '\' is not assigned to Availability Group \'' $ l.availabilitygroup:name $ '\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXShippingMethod_Delete( l.availabilitygroup:id, l.shippingmethodrules:mod_code, l.shippingmethodrules:meth_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupPaymentMethod_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name', l.group_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.availabilitygroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.module_code"		VALUE = "">
	<MvASSIGN NAME = "l.method_code"		VALUE = "">
	<MvASSIGN NAME = "l.paymentcardtype_id"	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.provide_xml, 'paymentcard_type' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module_code',	l.module_code ) OR
						NOT PRV_Attribute_Text( l.provide_xml, 'method_code',	l.method_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:payment }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' does not implement the payment feature' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Load_Cached( l.mivapay_settings ) OR NOT l.mivapay_settings:enabled }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment Card Types are not available when MivaPay is disabled.  Please enable MivaPay and try again.' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'paymentcard_type', l.pctype ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.pctype, l.paymentcardtype ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment Card Type \'' $ l.pctype $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.paymentcardtype_id" VALUE = "{ l.paymentcardtype:id }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Default( l.module_code, l.method_code, l.paymentcardtype_id, l.paymentmethodrules ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Insert( l.paymentmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.MvQUERY_Error ) }">
			<MvEVAL EXPR = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailGroupXPaymentMethod_Load( l.availabilitygroup:id, l.paymentmethodrules:mod_code, l.paymentmethodrules:meth_code, l.paymentmethodrules:pctype_id, l.null ) }">
		<MvIF EXPR = "{ l.paymentcardtype_id }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment card type \'' $ l.pctype $ '\' is already assigned to Availability Group \'' $ l.availabilitygroup:name $ '\'' ) }">
		<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment method \'' $ l.module_code $ '\', \'' $ l.method_code $ '\' is already assigned to Availability Group \'' $ l.availabilitygroup:name $ '\'' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXPaymentMethod_Insert( l.availabilitygroup:id, l.paymentmethodrules:mod_code, l.paymentmethodrules:meth_code, l.paymentmethodrules:pctype_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupPaymentMethod_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name', l.group_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.availabilitygroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.module_code"		VALUE = "">
	<MvASSIGN NAME = "l.method_code"		VALUE = "">
	<MvASSIGN NAME = "l.paymentcardtype_id"	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.provide_xml, 'paymentcard_type' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module_code',	l.module_code ) OR
						NOT PRV_Attribute_Text( l.provide_xml, 'method_code',	l.method_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'paymentcard_type', l.pctype ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.pctype, l.paymentcardtype ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment Card Type \'' $ l.pctype $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.paymentcardtype_id" VALUE = "{ l.paymentcardtype:id }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Load_Method( l.module_code, l.method_code, l.paymentcardtype_id, l.paymentmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ l.paymentcardtype_id }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment card type \'' $ l.pctype $ '\' does not exist' ) }">
		<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment method \'' $ l.module_code $ '\', \'' $ l.method_code $ '\' does not exist' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXPaymentMethod_Load( l.availabilitygroup:id, l.paymentmethodrules:mod_code, l.paymentmethodrules:meth_code, l.paymentmethodrules:pctype_id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ l.paymentcardtype_id }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment card type \'' $ l.pctype $ '\' is not assigned to Availability Group \'' $ l.availabilitygroup:name $ '\'' ) }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment method \'' $ l.module_code $ '\', \'' $ l.method_code $ '\' is not assigned to Availability Group \'' $ l.availabilitygroup:name $ '\'' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXPaymentMethod_Delete( l.availabilitygroup:id, l.paymentmethodrules:mod_code, l.paymentmethodrules:meth_code, l.paymentmethodrules:pctype_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_DiscountOptions_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].DiscountOptions_Load( l.discountoptions ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_List( 		'o', l.provide_xml, 'ReturnDiscountRecalculation',				l.discountoptions:repricerma,	'Never,Authorized,Received',						'never,authorized,received' )	OR
					NOT PRV_Tag_List( 		'o', l.provide_xml, 'OrderTotalHandling',						l.discountoptions:repricetot,	'AllowIncrease,AdjustmentItem,AdjustmentCharge',	'increase,item,charge' )		OR
					NOT PRV_Tag_Code( 		'O', l.provide_xml, 'AdjustmentItemCode',						l.discountoptions:adj_code )																						OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml, 'AdjustmentItemName',						l.discountoptions:adj_name )																						OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml, 'AdjustmentChargeDescription',				l.discountoptions:adj_charge )																						OR
					NOT PRV_Tag_Boolean( 	'O', l.provide_xml, 'RecalculateDiscountsForCancelledItems',	l.discountoptions:repricecan )																						OR
					NOT PRV_Tag_Boolean( 	'O', l.provide_xml, 'RecalculateShippingForCancelledItems', 	l.discountoptions:reshipcan )																						OR
					NOT PRV_Tag_Boolean( 	'O', l.provide_xml, 'RemoveShippingFromCancelledOrders', 		l.discountoptions:delshipcan )																						OR
					NOT PRV_Tag_Boolean( 	'O', l.provide_xml, 'RecalculateTaxForCancelledItems',			l.discountoptions:retaxcan )																						OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'DefaultExclusionForNewPriceGroups',		l.discountoptions:exdefault,	'Allow,ExcludeBasket,ExcludeGroup,ExcludeItem',		',B,G,I' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].DiscountOptions_Update( l.discountoptions ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroup_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.group:id"				VALUE = 0>
	<MvASSIGN NAME = "l.group:name"				VALUE = "">
	<MvASSIGN NAME = "l.group:custscope"		VALUE = "X">
	<MvASSIGN NAME = "l.group:config"			VALUE = "">
	<MvASSIGN NAME = "l.group:exclusion"		VALUE = 0>
	<MvASSIGN NAME = "l.group:descrip"			VALUE = "">
	<MvASSIGN NAME = "l.group:display"			VALUE = 1>
	<MvASSIGN NAME = "l.group:dt_start"			VALUE = 0>
	<MvASSIGN NAME = "l.group:dt_end"			VALUE = 0>
	<MvASSIGN NAME = "l.group:qmn_subtot"		VALUE = 0.00>
	<MvASSIGN NAME = "l.group:qmx_subtot"		VALUE = 0.00>
	<MvASSIGN NAME = "l.group:qmn_quan"			VALUE = 0>
	<MvASSIGN NAME = "l.group:qmx_quan"			VALUE = 0>
	<MvASSIGN NAME = "l.group:qmn_weight"		VALUE = 0.00>
	<MvASSIGN NAME = "l.group:qmx_weight"		VALUE = 0.00>
	<MvASSIGN NAME = "l.group:bmn_subtot"		VALUE = 0.00>
	<MvASSIGN NAME = "l.group:bmx_subtot"		VALUE = 0.00>
	<MvASSIGN NAME = "l.group:bmn_quan"			VALUE = 0>
	<MvASSIGN NAME = "l.group:bmx_quan"			VALUE = 0>
	<MvASSIGN NAME = "l.group:bmn_weight"		VALUE = 0.00>
	<MvASSIGN NAME = "l.group:bmx_weight"		VALUE = 0.00>
	<MvASSIGN NAME = "l.group:priority"			VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'R:100',	l.provide_xml, 'Name',				l.group:name )													OR 
					NOT PRV_Tag_List(		'O',		l.provide_xml, 'Eligibility',		l.group:custscope,	'Coupon,All,Customer,LoggedIn',	'C,A,X,L' )	OR
					NOT PRV_Tag_Date(		 			l.provide_xml, 'NotValidBefore',	l.group:dt_start )												OR
					NOT PRV_Tag_Date(		 			l.provide_xml, 'NotValidAfter',		l.group:dt_end )												OR
					NOT PRV_Tag_Integer(	'O',		l.provide_xml, 'Priority',			l.group:priority ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.group:dt_start AND l.group:dt_end AND ( l.group:dt_start GT l.group:dt_end ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'NotValidAfter must specify a date/time after NotValidBefore' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group:name, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Module' ) }">
		<MvASSIGN NAME = "l.group:rate"			VALUE = "R">
		<MvASSIGN NAME = "l.group:module_id"	VALUE = 0>

		<MvASSIGN NAME = "l.group_amount"		VALUE = "">

		<MvIF EXPR = "{ NOT PRV_Tag_List( 	'O', l.provide_xml, 'Pricing',		l.group:rate,	'Retail,Cost,Discount,Markup',	'R,C,D,M' )	OR 
						NOT PRV_Tag_Number( 'o', l.provide_xml, 'Amount',		l.group_amount,	10, 2 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ ( ( l.group:rate EQ 'D' ) OR ( l.group:rate EQ 'M' ) ) AND ( ISNULL l.group_amount ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The Amount tag must be present when Pricing is \'Discount\' or \'Markup\'' ) }">
		</MvIF>
		
		<MvIF EXPR = "{ l.group:rate EQ 'D' }">
			<MvASSIGN NAME = "l.group:discount"	VALUE = "{ l.group_amount }">
			<MvASSIGN NAME = "l.group:markup"	VALUE = "0.00">
		<MvELSEIF EXPR = "{ l.group:rate EQ 'M' }">
			<MvASSIGN NAME = "l.group:discount"	VALUE = "0.00">
			<MvASSIGN NAME = "l.group:markup"	VALUE = "{ l.group_amount }">
		<MvELSE>
			<MvASSIGN NAME = "l.group:discount"	VALUE = "0.00">
			<MvASSIGN NAME = "l.group:markup"	VALUE = "0.00">
		</MvIF>

		<MvIF EXPR = "{ l.group:custscope EQ 'C' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups cannot use Coupon Only eligibility' ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.group:rate"			VALUE = "R">
		<MvASSIGN NAME = "l.group:discount"		VALUE = 0.00>
		<MvASSIGN NAME = "l.group:markup"		VALUE = 0.00>

		<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O',		l.provide_xml, 'Module',					l.module_code )				OR
						NOT PRV_Tag_Text(		'o:254',	l.provide_xml, 'Description',				l.group:descrip )			OR
						NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'DisplayInBasket',			l.group:display )			OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'QualifyingMinimumSubtotal',	l.group:qmn_subtot,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'QualifyingMaximumSubtotal',	l.group:qmx_subtot,	10, 2 )	OR
						NOT PRV_Tag_Integer(	'o',		l.provide_xml, 'QualifyingMinimumQuantity',	l.group:qmn_quan )			OR
						NOT PRV_Tag_Integer(	'o',		l.provide_xml, 'QualifyingMaximumQuantity',	l.group:qmx_quan )			OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'QualifyingMinimumWeight',	l.group:qmn_weight,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'QualifyingMaximumWeight',	l.group:qmx_weight,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'BasketMinimumSubtotal',		l.group:bmn_subtot,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'BasketMaximumSubtotal',		l.group:bmx_subtot,	10, 2 )	OR
						NOT PRV_Tag_Integer(	'o',		l.provide_xml, 'BasketMinimumQuantity',		l.group:bmn_quan )			OR
						NOT PRV_Tag_Integer(	'o',		l.provide_xml, 'BasketMaximumQuantity',		l.group:bmx_quan )			OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'BasketMinimumWeight',		l.group:bmn_weight,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'BasketMaximumWeight',		l.group:bmx_weight,	10, 2 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module_code $ ' not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module:code $ ' is deactivated' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.module:feature_hash:discount }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'discount\'' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		<MvIF EXPR = "{ NOT l.capabilities:provision_settings }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support configuration via provisioning' ) }">
		</MvIF>

		<MvIF EXPR = "{ ( l.capabilities:items AND ( ( ISNULL l.capabilities:eligibility ) OR ( l.capabilities:eligibility EQ 'builtin' ) ) ) OR ( l.capabilities:eligibility EQ 'builtin' ) }">
			<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 'O', l.provide_xml, 'ApplyToAllProducts', l.group:exclusion ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Settings' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreModule_Load( l.module:id, 'discount', l.storemodule ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Increment_ReferenceCount( l.module:id, 'discount' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Install_NoForcedRemoval( l.module, l.message ) }">
			<MvIF EXPR = "{ l.result EQ 0 }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			<MvELSEIF EXPR = "{ l.result EQ -2 }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Insert_Feature_ReferenceCount( l.module, 'discount', 1 ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.settings_xml"		VALUE = "{ l.provide_xml:tags:Settings[ 1 ] }">
		<MvASSIGN NAME = "l.settings_xml:name"	VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].DiscountModule_Provision_Settings( l.module, l.group, l.settings_xml ) }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.module:id, 'discount' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.group:module_id"	VALUE = "{ l.module:id }">
	</MvIF>

	<MvASSIGN NAME = "l.pricegroupexclusions"		VALUE = "">
	<MvASSIGN NAME = "l.pricegroupexclusion_count"	VALUE = 0>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Exclusions' ) }">
		<MvIF EXPR = "{ NOT PRV_PriceGroup_Exclusions_Validate( l.provide_xml:tags:Exclusions[ 1 ], l.group, l.pricegroupexclusions, l.pricegroupexclusion_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Insert( l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Exclusions' ) }">
		<MvEVAL EXPR = "{ PRV_PriceGroup_Exclusions_Insert( l.group, l.pricegroupexclusions, l.pricegroupexclusion_count ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].DiscountOptions_Load( l.discountoptions ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT ISNULL l.discountoptions:exdefault }">
		<MvFOREACH ITERATOR = "l.excluded_pricegroup" ARRAY = "l.pricegroups" COUNT = "{ [ g.Module_Feature_PGR_DB ].PriceGroupList_Load_All( l.pricegroups ) }">
			<MvIF EXPR = "{ l.excluded_pricegroup:id EQ l.group:id }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.exclusion:pgrp_id1"	VALUE = "{ l.group:id }">
			<MvASSIGN NAME = "l.exclusion:pgrp_id2"	VALUE = "{ l.excluded_pricegroup:id }">
			<MvASSIGN NAME = "l.exclusion:scope"	VALUE = "{ l.discountoptions:exdefault }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupExclusion_Insert( l.exclusion ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].PriceGroupExclusionCache_Update( l.group ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroup_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name',	l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.group_name"				VALUE = "">

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O:100',	l.provide_xml, 'Name',				l.group_name )													OR 
					NOT PRV_Tag_List(		'O',		l.provide_xml, 'Eligibility',		l.group:custscope,	'Coupon,All,Customer,LoggedIn',	'C,A,X,L' )	OR
					NOT PRV_Tag_Date(					l.provide_xml, 'NotValidBefore',	l.group:dt_start )												OR
					NOT PRV_Tag_Date(					l.provide_xml, 'NotValidAfter',		l.group:dt_end )												OR
					NOT PRV_Tag_Integer(	'O',		l.provide_xml, 'Priority',			l.group:priority ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'NotValidBefore' ) OR
				    PRV_Tag_Exists( l.provide_xml, 'NotValidAfter' ) }">
		<MvIF EXPR = "{ l.group:dt_start AND l.group:dt_end AND ( l.group:dt_start GT l.group:dt_end ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'NotValidAfter must specify a date/time after NotValidBefore' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( NOT ISNULL l.group_name ) AND ( tolower( l.group_name ) NE tolower( l.group:name ) ) }">
		<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.existing_group ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.existing_group:name $ '\' already exists' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.group:name"			VALUE = "{ l.group_name }">
	</MvIF>

	<MvASSIGN NAME = "l.module_tag_exists"		VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Module' ) }">
	<MvASSIGN NAME = "l.pricing_tag_exists"		VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Pricing' ) }">

	<MvIF EXPR = "{ l.module_tag_exists AND l.pricing_tag_exists }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Only one of the Module and Pricing tags may be specified' ) }">
	<MvELSEIF EXPR = "{ l.pricing_tag_exists OR ( ( l.group:module_id EQ 0 ) AND ( NOT l.module_tag_exists ) ) }">
		<MvASSIGN NAME = "l.group_rate"			VALUE = "{ l.group:rate }">
		<MvASSIGN NAME = "l.group_amount"		VALUE = "">

		<MvIF EXPR = "{ NOT PRV_Tag_List( 	'O', l.provide_xml, 'Pricing',		l.group_rate,	'Retail,Cost,Discount,Markup',	'R,C,D,M' )	OR 
						NOT PRV_Tag_Number( 'o', l.provide_xml, 'Amount',		l.group_amount,	10, 2 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.group_amount }">
			<MvIF EXPR = "{ ( l.group_rate NE l.group:rate ) AND ( ( l.group_rate EQ 'D' ) OR ( l.group_rate EQ 'M' ) ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The Amount tag must be present when Pricing is changed to \'Discount\' or \'Markup\'' ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ l.group_rate EQ 'D' }">
				<MvASSIGN NAME = "l.group:discount"	VALUE = "{ l.group_amount }">
				<MvASSIGN NAME = "l.group:markup"	VALUE = "0.00">
			<MvELSEIF EXPR = "{ l.group_rate EQ 'M' }">
				<MvASSIGN NAME = "l.group:discount"	VALUE = "0.00">
				<MvASSIGN NAME = "l.group:markup"	VALUE = "{ l.group_amount }">
			<MvELSE>
				<MvASSIGN NAME = "l.group:discount"	VALUE = "0.00">
				<MvASSIGN NAME = "l.group:markup"	VALUE = "0.00">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.group:rate"			VALUE = "{ l.group_rate }">

		<MvIF EXPR = "{ l.group:custscope EQ 'C' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups cannot use Coupon Only eligibility' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.group:module_id }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.group:module_id, 'discount' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.group:module_id"	VALUE = 0>
		<MvASSIGN NAME = "l.group:config"		VALUE = "">
	<MvELSE>
		<MvIF EXPR = "{ NOT l.module_tag_exists }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'Module', l.module_code ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.module ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module_code $ ' not found' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Tag_Text(		'o:254',	l.provide_xml, 'Description',				l.group:descrip )			OR
						NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'DisplayInBasket',			l.group:display )			OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'QualifyingMinimumSubtotal',	l.group:qmn_subtot,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'QualifyingMaximumSubtotal',	l.group:qmx_subtot,	10, 2 )	OR
						NOT PRV_Tag_Integer( 	'o',		l.provide_xml, 'QualifyingMinimumQuantity',	l.group:qmn_quan )			OR
						NOT PRV_Tag_Integer( 	'o',		l.provide_xml, 'QualifyingMaximumQuantity',	l.group:qmx_quan )			OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'QualifyingMinimumWeight',	l.group:qmn_weight,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'QualifyingMaximumWeight',	l.group:qmx_weight,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'BasketMinimumSubtotal',		l.group:bmn_subtot,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'BasketMaximumSubtotal',		l.group:bmx_subtot,	10, 2 )	OR
						NOT PRV_Tag_Integer( 	'o',		l.provide_xml, 'BasketMinimumQuantity',		l.group:bmn_quan )			OR
						NOT PRV_Tag_Integer( 	'o',		l.provide_xml, 'BasketMaximumQuantity',		l.group:bmx_quan )			OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'BasketMinimumWeight',		l.group:bmn_weight,	10, 2 )	OR
						NOT PRV_Tag_Number(		'o',		l.provide_xml, 'BasketMaximumWeight',		l.group:bmx_weight,	10, 2 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module:code $ ' is deactivated' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.module:feature_hash:discount }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'discount\'' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		<MvIF EXPR = "{ NOT l.capabilities:provision_settings }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support configuration via provisioning' ) }">
		</MvIF>

		<MvIF EXPR = "{ ( l.capabilities:items AND ( ( ISNULL l.capabilities:eligibility ) OR ( l.capabilities:eligibility EQ 'builtin' ) ) ) OR ( l.capabilities:eligibility EQ 'builtin' ) }">
			<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 'O', l.provide_xml, 'ApplyToAllProducts', l.group:exclusion ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.settings_tag_exists"	VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">

		<MvIF EXPR = "{ l.group:module_id NE l.module:id }">
			<MvIF EXPR = "{ NOT l.settings_tag_exists }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Settings' ) }">
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreModule_Load( l.module:id, 'discount', l.storemodule ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Increment_ReferenceCount( l.module:id, 'discount' ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Install_NoForcedRemoval( l.module, l.message ) }">
				<MvIF EXPR = "{ l.result EQ 0 }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				<MvELSEIF EXPR = "{ l.result EQ -2 }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Insert_Feature_ReferenceCount( l.module, 'discount', 1 ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.group:config"		VALUE = "">
		</MvIF>

		<MvIF EXPR = "{ l.settings_tag_exists }">
			<MvASSIGN NAME = "l.settings_xml"		VALUE = "{ l.provide_xml:tags:Settings[ 1 ] }">
			<MvASSIGN NAME = "l.settings_xml:name"	VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

			<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].DiscountModule_Provision_Settings( l.module, l.group, l.settings_xml ) }">
				<MvIF EXPR = "{ l.group:module_id NE l.module:id }">
					<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.module:id, 'discount' ) }">
				</MvIF>

				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.group:module_id NE l.module:id }">
			<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.group:module_id, 'discount' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.group:module_id"		VALUE = "{ l.module:id }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Exclusions' ) }">
		<MvIF EXPR = "{ NOT PRV_PriceGroup_Exclusions_Validate( l.provide_xml:tags:Exclusions[ 1 ], l.group, l.pricegroupexclusions, l.pricegroupexclusion_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Update( l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Exclusions' ) }">
		<MvEVAL EXPR = "{ PRV_PriceGroup_Exclusions_Insert( l.group, l.pricegroupexclusions, l.pricegroupexclusion_count ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_PriceGroup_Exclusions_Validate" PARAMETERS = "provide_xml var, pricegroup var, pricegroupexclusions var, pricegroupexclusion_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pricegroupexclusions"		VALUE = "">
	<MvASSIGN NAME = "l.pricegroupexclusion_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children" COUNT = "{ miva_array_elements( l.provide_xml:children ) }">
		<MvASSIGN NAME = "l.name"					VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name NE 'exclusion' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'group_name',	l.group_name )	OR
						NOT PRV_Attribute_List(	l.child_xml, 'type',		l.pricegroupexclusion:scope, 'basket,group,item', 'B,G,I' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.excluded_pricegroup ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
		<MvELSEIF EXPR = "{ l.pricegroup:id AND l.excluded_pricegroup:id EQ l.pricegroup:id }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'A price group may not exclude itself' ) }">
		<MvELSEIF EXPR = "{ miva_array_search( l.pricegroupexclusions, 1, l.existing_exclusion, 'l.existing_exclusion:pgrp_id2 EQ l.excluded_pricegroup:id' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'An exclusion for price group \'' $ l.excluded_pricegroup:name $ '\' has already been specified' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.pricegroupexclusion:pgrp_id1"	VALUE = "{ l.pricegroup:id }"> <MvCOMMENT> This value is blank when a price group is being inserted and will be updated once the price group has been created </MvCOMMENT>
		<MvASSIGN NAME = "l.pricegroupexclusion:pgrp_id2"	VALUE = "{ l.excluded_pricegroup:id }">
		<MvASSIGN NAME = "l.pricegroupexclusion_count"		VALUE = "{ miva_array_insert_var( l.pricegroupexclusions, l.pricegroupexclusion, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_PriceGroup_Exclusions_Insert" PARAMETERS = "pricegroup var, pricegroupexclusions var, pricegroupexclusion_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.previous_exclusion_count" VALUE = "{ [ g.Module_Feature_PGR_DB ].PriceGroupExclusionList_Load_PriceGroup( l.pricegroup:id, l.previous_exclusions ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupExclusion_Delete_All_PriceGroup( l.pricegroup:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.pricegroupexclusion" ARRAY = "l.pricegroupexclusions" COUNT = "{ l.pricegroupexclusion_count }">
		<MvCOMMENT>
		|
		| Assign l.pricegroupexclusion:pgrp_id1 to the value of the base price group id
		| For new price groups, this id needs to be set here as it did not exist during validation
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.pricegroupexclusion:pgrp_id1"	VALUE = "{ l.pricegroup:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupExclusion_Insert( l.pricegroupexclusion ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].PriceGroupExclusionCache_Update_WithPreviousExclusions( l.pricegroup, l.previous_exclusions, l.previous_exclusion_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroup_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name',	l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.group:module_id, 'discount' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Delete( l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupProduct_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		
		<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific products' ) }">
		<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use product assignment' ) }">
		<MvELSEIF EXPR = "{ l.group:exclusion }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' automatically applies to all products' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXProduct_Load( l.group:id, l.product:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXProduct_Insert( l.group:id, l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is already assigned to Price Group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupProduct_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		
		<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific products' ) }">
		<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use product assignment' ) }">
		<MvELSEIF EXPR = "{ l.group:exclusion }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' automatically applies to all products' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXProduct_Load( l.group:id, l.product:id, l.pricegroupxproduct ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].v10_PriceGroupXProduct_Delete( l.pricegroupxproduct ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is not assigned to Price Group \'' $ l.group_name $ '\'' ) }">		
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupExcludedProduct_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		
		<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific products' ) }">
		<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use product assignment' ) }">
		<MvELSEIF EXPR = "{ NOT l.group:exclusion }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' does not apply to all products, and therefore does not support product exclusions' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedProduct_Load( l.group:id, l.product:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedProduct_Insert( l.group:id, l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is already excluded from Price Group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupExcludedProduct_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		
		<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific products' ) }">
		<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use product assignment' ) }">
		<MvELSEIF EXPR = "{ NOT l.group:exclusion }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' does not apply to all products, and therefore does not support product exclusions' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedProduct_Load( l.group:id, l.product:id, l.pricegroupxexcludedproduct ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].v10_PriceGroupXExcludedProduct_Delete( l.pricegroupxexcludedproduct ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is not excluded from Price Group \'' $ l.group_name $ '\'' ) }">		
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupProductSubscriptionTerm_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'term_descrip',	l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_Description( l.product:id, l.descrip, l.productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term with the description \'' $ l.descrip $ '\' does not exist for product \'' $ l.product:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		
		<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific subscriptions' ) }">
		<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use subscription assignment' ) }">
		<MvELSEIF EXPR = "{ l.group:exclusion }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' automatically applies to all subscriptions' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXProductSubscription_Load( l.group:id, l.product:id, l.productsubscriptionterm:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXProductSubscription_Insert( l.group:id, l.product:id, l.productsubscriptionterm:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.productsubscriptionterm:descrip $ '\' for Product \'' $ l.product:code $ '\' is already assigned to Price Group \'' $ l.group:name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupProductSubscriptionTerm_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'term_descrip',	l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_Description( l.product:id, l.descrip, l.productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term with the description \'' $ l.descrip $ '\' does not exist for product \'' $ l.product:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		
		<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific subscriptions' ) }">
		<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use subscription assignment' ) }">
		<MvELSEIF EXPR = "{ l.group:exclusion }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' automatically applies to all subscriptions' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXProductSubscription_Load( l.group:id, l.product:id, l.productsubscriptionterm:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXProductSubscription_Delete( l.group:id, l.product:id, l.productsubscriptionterm:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.productsubscriptionterm:descrip $ '\' for Product \'' $ l.product:code $ '\' is not assigned to Price Group \'' $ l.group:name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupExcludedProductSubscriptionTerm_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'term_descrip',	l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_Description( l.product:id, l.descrip, l.productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term with the description \'' $ l.descrip $ '\' does not exist for product \'' $ l.product:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		
		<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific subscriptions' ) }">
		<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use subscription assignment' ) }">
		<MvELSEIF EXPR = "{ NOT l.group:exclusion }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' does not apply to all products, and therefore does not support subscription exclusions' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedProductSubscription_Load( l.group:id, l.product:id, l.productsubscriptionterm:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedProductSubscription_Insert( l.group:id, l.product:id, l.productsubscriptionterm:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.productsubscriptionterm:descrip $ '\' for Product \'' $ l.product:code $ '\' is already excluded from Price Group \'' $ l.group:name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupExcludedProductSubscriptionTerm_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'term_descrip',	l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_Description( l.product:id, l.descrip, l.productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term with the description \'' $ l.descrip $ '\' does not exist for product \'' $ l.product:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
		
		<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific subscriptions' ) }">
		<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use subscription assignment' ) }">
		<MvELSEIF EXPR = "{ NOT l.group:exclusion }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' does not apply to all products, and therefore does not support subscription exclusions' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedProductSubscription_Load( l.group:id, l.product:id, l.productsubscriptionterm:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedProductSubscription_Delete( l.group:id, l.product:id, l.productsubscriptionterm:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.productsubscriptionterm:descrip $ '\' for Product \'' $ l.product:code $ '\' is not excluded from Price Group \'' $ l.group:name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupQualifyingProduct_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups do not support qualifying products' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingProduct_Load( l.group:id, l.product:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingProduct_Insert( l.group:id, l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is already a qualifying product for price group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupQualifyingProduct_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups do not support qualifying products' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingProduct_Load( l.group:id, l.product:id, l.pricegroupxqualifyingproduct ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].v10_PriceGroupXQualifyingProduct_Delete( l.pricegroupxqualifyingproduct ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is not a qualifying product for price group \'' $ l.group_name $ '\'' ) }">		
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupQualifyingProductSubscriptionTerm_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'term_descrip',	l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_Description( l.product:id, l.descrip, l.productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term with the description \'' $ l.descrip $ '\' does not exist for product \'' $ l.product:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups do not support qualifying product subscriptions' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingProductSubscription_Load( l.group:id, l.product:id, l.productsubscriptionterm:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingProductSubscription_Insert( l.group:id, l.product:id, l.productsubscriptionterm:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.productsubscriptionterm:descrip $ '\' for Product \'' $ l.product:code $ '\' is already a qualifying subscription for Price Group \'' $ l.group:name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupQualifyingProductSubscriptionTerm_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'term_descrip',	l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_Description( l.product:id, l.descrip, l.productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term with the description \'' $ l.descrip $ '\' does not exist for product \'' $ l.product:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups do not support qualifying product subscriptions' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingProductSubscription_Load( l.group:id, l.product:id, l.productsubscriptionterm:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingProductSubscription_Delete( l.group:id, l.product:id, l.productsubscriptionterm:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.productsubscriptionterm:descrip $ '\' for Product \'' $ l.product:code $ '\' is not a qualifying subscription for Price Group \'' $ l.group:name $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupCustomer_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'customer_login',	l.customer_login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:custscope NE 'X' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' is not restricted to specific customers' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXCustomer_Load( l.group:id, l.customer:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXCustomer_Insert( l.group:id, l.customer:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer \'' $ l.customer_login $ '\' is already assigned to Price Group \'' $ l.group_name $ '\'' ) }">			
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupCustomer_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'customer_login',	l.customer_login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:custscope NE 'X' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' is not restricted to specific customers' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXCustomer_Load( l.group:id, l.customer:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXCustomer_Delete( l.group:id, l.customer:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer \'' $ l.customer_login $ '\' is not assigned to Price Group \'' $ l.group_name $ '\'' ) }">				
	</MvIF>

	<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupBusinessAccount_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'account_title',	l.account_title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.account_title, l.businessaccount ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.account_title $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXBusinessAccount_Load( l.group:id, l.businessaccount:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.account_title $ '\' is already assigned to Price Group \'' $ l.group_name $ '\'' ) }">	
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXBusinessAccount_Insert( l.group:id, l.businessaccount:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupBusinessAccount_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'account_title',	l.account_title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.account_title, l.businessaccount ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.account_title $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXBusinessAccount_Load( l.group:id, l.businessaccount:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXBusinessAccount_Delete( l.group:id, l.businessaccount:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.account_title $ '\' is not assigned to Price Group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupCategory_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'category_code',	l.category_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups do not support category assignments' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
	
	<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific products' ) }">
	<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use category assignment' ) }">
	<MvELSEIF EXPR = "{ l.group:exclusion }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' automatically applies to all products' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXCategory_Load( l.group:id, l.category:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' is already assigned to Price Group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXCategory_Insert( l.group:id, l.category:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupCategory_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'category_code',	l.category_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups do not support category assignments' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
	
	<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific products' ) }">
	<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use category assignment' ) }">
	<MvELSEIF EXPR = "{ l.group:exclusion }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' automatically applies to all products' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXCategory_Load( l.group:id, l.category:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' is not assigned to Price Group \'' $ l.group_name $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXCategory_Delete( l.group:id, l.category:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupExcludedCategory_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'category_code',	l.category_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups do not support category assignments' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
	
	<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific products' ) }">
	<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use category assignment' ) }">
	<MvELSEIF EXPR = "{ NOT l.group:exclusion }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' does not apply to all products, and therefore does not support category exclusions' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedCategory_Load( l.group:id, l.category:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' is already excluded from Price Group \'' $ l.group_name $ '\'' ) }">	
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedCategory_Insert( l.group:id, l.category:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupExcludedCategory_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'category_code',	l.category_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category with the code \'' $ l.category_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.group:module_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Legacy price groups do not support category assignments' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.group:module_id, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].DiscountModule_Capabilities( l.module, l.capabilities ) }">
	
	<MvIF EXPR = "{ ( NOT l.capabilities:items ) AND ( l.capabilities:eligibility NE 'builtin' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not discount specific products' ) }">
	<MvELSEIF EXPR = "{ l.capabilities:eligibility EQ 'module' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.module:name $ '\' used by price group \'' $ l.group:name $ '\' does not use category assignment' ) }">
	<MvELSEIF EXPR = "{ NOT l.group:exclusion }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group:name $ '\' does not apply to all products, and therefore does not support category exclusions' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedCategory_Load( l.group:id, l.category:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' is not excluded from Price Group \'' $ l.group_name $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedCategory_Delete( l.group:id, l.category:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'precalcprices' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Coupon_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.coupon:custscope"	VALUE = "A">
	<MvASSIGN NAME = "l.coupon:dt_start"	VALUE = 0>
	<MvASSIGN NAME = "l.coupon:dt_end"		VALUE = 0>
	<MvASSIGN NAME = "l.coupon:max_use"		VALUE = 0>
	<MvASSIGN NAME = "l.coupon:max_per"		VALUE = 0>
	<MvASSIGN NAME = "l.coupon:active"		VALUE = 1>
	<MvASSIGN NAME = "l.coupon:use_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R', l.provide_xml, 'Code',				l.coupon:code )												OR 
					NOT PRV_Tag_List(		'O', l.provide_xml, 'Eligibility',		l.coupon:custscope,	'All,Customer,LoggedIn',	'A,X,L' )	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'Description',		l.coupon:descrip )											OR
					NOT PRV_Tag_Date(			 l.provide_xml, 'NotValidBefore',	l.coupon:dt_start )											OR
					NOT PRV_Tag_Date(			 l.provide_xml, 'NotValidAfter',	l.coupon:dt_end )											OR
					NOT PRV_Tag_Integer( 	'O', l.provide_xml, 'MaxUse',			l.coupon:max_use )											OR
					NOT PRV_Tag_Integer( 	'O', l.provide_xml, 'MaxPerShopper',	l.coupon:max_per )											OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'Active',			l.coupon:active ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.coupon:dt_start AND l.coupon:dt_end AND ( l.coupon:dt_start GT l.coupon:dt_end ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'NotValidAfter must specify a date/time after NotValidBefore' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon:code, l.existing_coupon ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon with the code \'' $ l.existing_coupon:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Insert( l.coupon ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Coupon_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'coupon_code',	l.coupon_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon with the code \'' $ l.coupon_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O', l.provide_xml, 'Code',				l.coupon:code )												OR 
					NOT PRV_Tag_List(		'O', l.provide_xml, 'Eligibility',		l.coupon:custscope,	'All,Customer,LoggedIn',	'A,X,L' )	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'Description',		l.coupon:descrip )											OR
					NOT PRV_Tag_Date(			 l.provide_xml, 'NotValidBefore',	l.coupon:dt_start )											OR
					NOT PRV_Tag_Date(			 l.provide_xml, 'NotValidAfter',	l.coupon:dt_end )											OR
					NOT PRV_Tag_Integer( 	'O', l.provide_xml, 'MaxUse',			l.coupon:max_use )											OR
					NOT PRV_Tag_Integer( 	'O', l.provide_xml, 'MaxPerShopper',	l.coupon:max_per )											OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'Active',			l.coupon:active ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'NotValidBefore' ) OR
				    PRV_Tag_Exists( l.provide_xml, 'NotValidAfter' ) }">
		<MvIF EXPR = "{ l.coupon:dt_start AND l.coupon:dt_end AND ( l.coupon:dt_start GT l.coupon:dt_end ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'NotValidAfter must specify a date/time after NotValidBefore' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon:code, l.existing_coupon )	AND
					l.existing_coupon:id NE l.coupon:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon with the code \'' $ l.existing_coupon:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Update( l.coupon ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Coupon_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'coupon_code',	l.coupon_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon with the code \'' $ l.coupon_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Delete( l.coupon ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CouponPriceGroup_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'coupon_code',	l.coupon_code )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon with the code \'' $ l.coupon_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.pricegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.pricegroup:module_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupons cannot apply legacy price groups' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].CouponXPriceGroup_Load( l.coupon:id, l.pricegroup:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.pricegroup:name $ '\' is already assigned to coupon \'' $ l.coupon:code $ '\'' ) }">			
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].CouponXPriceGroup_Insert( l.coupon:id, l.pricegroup:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CouponPriceGroup_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'coupon_code',	l.coupon_code )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'group_name',	l.group_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon with the code \'' $ l.coupon_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.pricegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].CouponXPriceGroup_Load( l.coupon:id, l.pricegroup:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].CouponXPriceGroup_Delete( l.coupon:id, l.pricegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.pricegroup:name $ '\' is not assigned to coupon \'' $ l.coupon:code $ '\'' ) }">			
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CouponCustomer_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'coupon_code',		l.coupon_code )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'customer_login',	l.customer_login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon with the code \'' $ l.coupon_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.coupon:custscope NE 'X' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon \'' $ l.coupon:code $ '\' is not restricted to specific customers' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].CouponXCustomer_Load( l.coupon:id, l.customer:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer \'' $ l.customer:login $ '\' is already assigned to coupon \'' $ l.coupon:code $ '\'' ) }">			
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].CouponXCustomer_Insert( l.coupon:id, l.customer:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CouponCustomer_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'coupon_code',		l.coupon_code )		OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'customer_login',	l.customer_login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon with the code \'' $ l.coupon_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.coupon:custscope NE 'X' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon \'' $ l.coupon:code $ '\' is not restricted to specific customers' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].CouponXCustomer_Load( l.coupon:id, l.customer:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].CouponXCustomer_Delete( l.coupon:id, l.customer:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer \'' $ l.customer:login $ '\' is not assigned to coupon \'' $ l.coupon:code $ '\'' ) }">			
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CouponBusinessAccount_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'coupon_code',	l.coupon_code )	OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'account_title',	l.account_title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon \'' $ l.coupon_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.account_title, l.account ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business Account \'' $ l.account_title $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.coupon:custscope NE 'X' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon \'' $ l.coupon:code $ '\' is not restricted to specific customers' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].CouponXBusinessAccount_Load( l.coupon:id, l.account:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business Account \'' $ l.account:title $ '\' is already assigned to coupon \'' $ l.coupon:code $ '\'' ) }">			
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].CouponXBusinessAccount_Insert( l.coupon:id, l.account:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00094', 'Business Account \'' $ l.account:title $ '\' assigned to coupon \'' $ l.coupon:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CouponBusinessAccount_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'coupon_code',	l.coupon_code )	OR 
					NOT PRV_Attribute_Text( l.provide_xml, 'account_title',	l.account_title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon \'' $ l.coupon_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.account_title, l.account ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business Account \'' $ l.account_title $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].CouponXBusinessAccount_Load( l.coupon:id, l.account:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].CouponXBusinessAccount_Delete( l.coupon:id, l.account:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business Account \'' $ l.account:title $ '\' is not assigned to coupon \'' $ l.coupon:code $ '\'' ) }">			
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00095', 'Business Account \'' $ l.account:title $ '\' removed from coupon \'' $ l.coupon:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_GiftCertificate_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.giftcertificate:order_id"			VALUE = 0>
	<MvASSIGN NAME = "l.giftcertificate:line_id"			VALUE = 0>
	<MvASSIGN NAME = "l.giftcertificate:cust_id"			VALUE = 0>
	<MvASSIGN NAME = "l.giftcertificate:redeem_dt"			VALUE = "">
	<MvASSIGN NAME = "l.giftcertificate:credit_id"			VALUE = 0>
	<MvASSIGN NAME = "l.giftcertificate:active"				VALUE = 1>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R', l.provide_xml, 'Code',				l.giftcertificate:code )		OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'Active',			l.giftcertificate:active )		OR
					NOT PRV_Tag_Number(		'R', l.provide_xml, 'Amount',			l.giftcertificate:amount,	10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.giftcertificate:code ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">			
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Currency_NonNegative_Required( l.giftcertificate:amount ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">			
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_GFT_DB ].GiftCertificate_Load_Code( l.giftcertificate:code, l.existing_giftcertificate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A gift certificate with the code \'' $ l.existing_giftcertificate:code $ '\' already exists' ) }">			
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificate_Insert( l.giftcertificate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.giftcertificates"			VALUE = "">
	<MvASSIGN NAME = "l.giftcertificates" INDEX = 1	VALUE = "{ l.giftcertificate }">

	<MvEVAL EXPR = "{ [ g.Module_Feature_GFT_UT ].Notify_GiftCertificates_Created( l.giftcertificates, 1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_GiftCertificate_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificate_Load_Code( l.code, l.giftcertificate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'GiftCertificate with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O', l.provide_xml, 'Code',				l.giftcertificate:code )		OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'Active',			l.giftcertificate:active )		OR
					NOT PRV_Tag_Number(		'O', l.provide_xml, 'Amount',			l.giftcertificate:amount,	10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Currency_NonNegative_Required( l.giftcertificate:amount ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">			
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_GFT_DB ].GiftCertificate_Load_Code( l.giftcertificate:code, l.existing_giftcertificate )	AND
					l.existing_giftcertificate:id NE l.giftcertificate:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Gift certificate with the code \'' $ l.existing_giftcertificate:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificate_Update( l.giftcertificate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_GiftCertificate_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificate_Load_Code( l.code, l.giftcertificate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Gift certificate with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificate_Delete( l.giftcertificate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_GiftCertificateSales_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificateSales_Load_ProductOrDefault( l.product:id, l.giftcertificatesales ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'Enabled',					l.giftcertificatesales:enabled )		OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'NotifyShippingEmail',		l.giftcertificatesales:email_ship )		OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'NotifyBillingEmail',		l.giftcertificatesales:email_bill ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Amount' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:Amount[ 1 ], 'type',	l.giftcertificatesales:type, 'price,fixed', 'price,fixed' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.giftcertificatesales:type EQ 'fixed' }">
			<MvIF EXPR = "{ NOT PRV_Tag_Number( 'R', l.provide_xml, 'Amount', l.giftcertificatesales:amount, 10, 2 ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.giftcertificatesales:amount" VALUE = 0.00>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'DescriptionAttribute' ) }">
		<MvASSIGN NAME = "l.value" VALUE = "{ trim( l.provide_xml:tags:DescriptionAttribute[ 1 ]:value ) }">

		<MvIF EXPR = "{ ISNULL l.value }">
			<MvASSIGN NAME = "l.giftcertificatesales:dscattcode" VALUE = "">
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Code( 'O', l.provide_xml, 'DescriptionAttribute', l.giftcertificatesales:dscattcode ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'EmailAttribute' ) }">
		<MvASSIGN NAME = "l.value" VALUE = "{ trim( l.provide_xml:tags:EmailAttribute[ 1 ]:value ) }">

		<MvIF EXPR = "{ NOT PRV_Attribute_Boolean( l.provide_xml:tags:EmailAttribute[ 1 ], 'notify',	l.giftcertificatesales:email_attr ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.value }">
			<MvASSIGN NAME = "l.giftcertificatesales:emlattcode" VALUE = "">
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Code( 'O', l.provide_xml, 'EmailAttribute', l.giftcertificatesales:emlattcode ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Currency_NonNegative_Optional( l.giftcertificatesales:amount ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">			
	</MvIF>

	<MvASSIGN NAME = "l.giftcertificatesales:product_id" VALUE = "{ l.product:id }">

	<MvIF EXPR = "{ [ g.Module_Feature_GFT_DB ].GiftCertificateSales_Equal_Default( l.giftcertificatesales ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificateSales_Delete_Product( l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificateSales_Insert( l.giftcertificatesales ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificateSales_Update( l.giftcertificatesales ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AffiliateOptions_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].AffiliateOptions_Load( l.affiliateoptions ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_List( 		'o', l.provide_xml,	'ApplicationStatus',				l.affiliateoptions:signup, 'Approved,Pending,Disabled', 'A,P,I' )	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'Active',							l.affiliateoptions:active )											OR
					NOT PRV_Tag_Number( 	'o', l.provide_xml, 'DefaultCommissionHit',				l.affiliateoptions:hits,		10, 4 ) 							OR
					NOT PRV_Tag_Number( 	'o', l.provide_xml, 'DefaultCommissionPercentOfOrder',	l.affiliateoptions:order_pct,	10, 2 ) 							OR
					NOT PRV_Tag_Number( 	'o', l.provide_xml, 'DefaultCommissionOrderFlatFee',	l.affiliateoptions:order_flat,	10, 2 ) 							OR
					NOT PRV_Tag_Number( 	'O', l.provide_xml, 'PayoutThreshold',					l.affiliateoptions:pay_thresh,	10, 2 ) 							OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'LinkImage',						l.affiliateoptions:link_image )										OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'LinkText',							l.affiliateoptions:link_text )										OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'Terms',							l.affiliateoptions:terms )											OR
					NOT PRV_Tag_Integer(  	'O', l.provide_xml, 'MinimumPasswordLength',			l.affiliateoptions:pw_min_len )										OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'PasswordComplexity',				l.affiliateoptions:pw_complex, 'none,alphanum,mixed', '0,1,2' )		OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'PasswordChangeRequiresReauth',		l.affiliateoptions:pw_chgauth )										OR
					NOT PRV_Tag_Integer( 	'O', l.provide_xml,	'ResetLinkExpiration',				l.affiliateoptions:reset_exp )										OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'ResetType',						l.affiliateoptions:resettype, 'TemporaryPassword,PasswordChange', 'temporary,change' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.affiliateoptions:pw_min_len ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for MinimumPasswordLength: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.affiliateoptions:reset_exp ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for ResetLinkExpiration: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].AffiliateOptions_Update( l.affiliateoptions ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AffiliateLostPasswordEmail_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].AffiliateEmail_Load( l.affiliate_email ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'EmailFrom',	l.affiliate_email:email_from ) 	OR 
					NOT PRV_Tag_Text( 'o', l.provide_xml, 'EmailCC',	l.affiliate_email:email_cc ) 	OR
					NOT PRV_Tag_Text( 'O', l.provide_xml, 'Subject',	l.affiliate_email:subject ) 	OR
					NOT PRV_Tag_Text( 'O', l.provide_xml, 'HeaderText',	l.affiliate_email:header ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].AffiliateEmail_Update( l.affiliate_email ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AffiliateEmailNotification_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].AffiliateManage_Load( l.affiliate_manage ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.affiliate_manage:usefrom }">
		<MvASSIGN NAME = "l.email_from" VALUE = "{ l.affiliate_manage:email_from }">
	<MvELSE>
		<MvASSIGN NAME = "l.email_from" VALUE = "affiliate">
	</MvIF>

	<MvIF EXPR = "{ l.affiliate_manage:useto }">
		<MvASSIGN NAME = "l.email_to" 	VALUE = "{ l.affiliate_manage:email_to }">
	<MvELSE>
		<MvASSIGN NAME = "l.email_to" 	VALUE = "affiliate">
	</MvIF>

	<MvIF EXPR = "{ l.affiliate_manage:usecc }">
		<MvASSIGN NAME = "l.email_cc" 	VALUE = "{ l.affiliate_manage:email_cc }">
	<MvELSE>
		<MvASSIGN NAME = "l.email_cc" 	VALUE = "affiliate">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 	'o', l.provide_xml,	'SendEmailOnAffiliateSignups',	l.affiliate_manage:active ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'EmailFrom',					l.email_from ) 					OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'EmailTo',						l.email_to ) 					OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml,	'EmailCC',						l.email_cc ) 					OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml, 'Subject',						l.affiliate_manage:header ) 	OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'HeaderText',					l.affiliate_manage:subject ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvASSIGN NAME = "l.email_from" VALUE = "{ tolower( l.email_from ) }">
	<MvASSIGN NAME = "l.email_to" 	VALUE = "{ tolower( l.email_to ) }">
	<MvASSIGN NAME = "l.email_cc" 	VALUE = "{ tolower( l.email_cc ) }">

	<MvIF EXPR = "{ l.email_from EQ 'affiliate' }">
		<MvASSIGN NAME = "l.affiliate_manage:usefrom" 		VALUE = 0>
		<MvASSIGN NAME = "l.affiliate_manage:email_from" 	VALUE = "">
	<MvELSE>
		<MvASSIGN NAME = "l.affiliate_manage:usefrom" 		VALUE = 1>
		<MvASSIGN NAME = "l.affiliate_manage:email_from" 	VALUE = "{ l.email_from }">
	</MvIF>

	<MvIF EXPR = "{ l.email_to EQ 'affiliate' }">
		<MvASSIGN NAME = "l.affiliate_manage:useto" 		VALUE = 0>
		<MvASSIGN NAME = "l.affiliate_manage:email_to" 		VALUE = "">
	<MvELSE>
		<MvASSIGN NAME = "l.affiliate_manage:useto" 		VALUE = 1>
		<MvASSIGN NAME = "l.affiliate_manage:email_to" 		VALUE = "{ l.email_to }">
	</MvIF>

	<MvIF EXPR = "{ len( l.email_cc ) }">
		<MvIF EXPR = "{ l.email_cc EQ 'affiliate' }">
			<MvASSIGN NAME = "l.affiliate_manage:usecc" 	VALUE = 0>
			<MvASSIGN NAME = "l.affiliate_manage:email_cc" 	VALUE = "">
		<MvELSE>
			<MvASSIGN NAME = "l.affiliate_manage:usecc" 	VALUE = 1>
			<MvASSIGN NAME = "l.affiliate_manage:email_cc" 	VALUE = "{ l.email_cc }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].AffiliateManage_Update( l.affiliate_manage ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Affiliate_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].AffiliateOptions_Load( l.affiliateoptions ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.affiliateoptions:signup EQ 'A' }">
		<MvASSIGN NAME = "l.affiliate:status" VALUE = "Approved">
	<MvELSE>
		<MvASSIGN NAME = "l.affiliate:status" VALUE = "Pending">
	</MvIF>

	<MvASSIGN NAME = "l.affiliate:status_by"	VALUE = 0>

	<MvASSIGN NAME = "l.affiliate:hits" 		VALUE = "{ l.affiliateoptions:hits }">
	<MvASSIGN NAME = "l.affiliate:order_pct" 	VALUE = "{ l.affiliateoptions:order_pct }">
	<MvASSIGN NAME = "l.affiliate:order_flat" 	VALUE = "{ l.affiliateoptions:order_flat }">

	<MvASSIGN NAME = "l.affiliate:cntry" 		VALUE = "{ g.Store:country }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 'R', l.provide_xml,	'Login',							l.affiliate:code ) 																OR
					NOT PRV_Tag_Text( 'R', l.provide_xml,	'LostPasswordEmail',				l.affiliate:lpasseml ) 															OR
					NOT PRV_Tag_Text( 'R', l.provide_xml, 	'Password',							l.affiliate:password ) 															OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 	'ApplicationStatus',				l.affiliate:status, 'Approved,Pending,Rejected', 'Approved,Pending,Rejected' ) 	OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'SiteName',							l.affiliate:site_name ) 														OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'SiteURL',							l.affiliate:site_url ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'ContactName',						l.affiliate:con_name ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Email',							l.affiliate:email ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Company',							l.affiliate:company ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Phone',							l.affiliate:phone ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Fax',								l.affiliate:fax ) 																OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Address',							l.affiliate:addr ) 																OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'City',								l.affiliate:city ) 																OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'State',							l.affiliate:state ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Zip',								l.affiliate:zip ) 																OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Country',							l.affiliate:cntry ) 															OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'CommissionHit',					l.affiliate:hits,		10, 4 ) 												OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'CommissionPercentOfOrder',			l.affiliate:order_pct,	10, 2 ) 												OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'CommissionOrderFlatFee',			l.affiliate:order_flat,	10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AFF_DB ].Affiliate_Load_Code( l.affiliate:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An affiliate with the login \'' $ l.affiliate:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Password( l.affiliateoptions, l.affiliate:password ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Password: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.affiliate:status_dt" 	VALUE = "{ s.time_t }">
	<MvASSIGN NAME = "l.affiliate:session_id" 	VALUE = "{ g.Session_ID }">
	<MvASSIGN NAME = "l.affiliate:lstpay_id" 	VALUE = 0>
	<MvASSIGN NAME = "l.affiliate:lstpay_dt" 	VALUE = 0>
	<MvASSIGN NAME = "l.affiliate:lstpay_amt" 	VALUE = 0>
	<MvASSIGN NAME = "l.affiliate:lstpay_by" 	VALUE = 0>
	<MvASSIGN NAME = "l.affiliate:balance" 		VALUE = 0.0000>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_FloatingPoint_Length_NonNegative_Required( l.affiliate:hits, 10, 4 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for CommissionHit: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].Affiliate_Insert( l.affiliate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Affiliate_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'login',		l.login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].AffiliateOptions_Load( l.affiliateoptions ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].Affiliate_Load_Code( l.login, l.affiliate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An affiliate with the login \'' $ l.login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 'O', l.provide_xml, 	'Login',							l.affiliate:code ) 																OR
					NOT PRV_Tag_Text( 'O', l.provide_xml, 	'LostPasswordEmail',				l.affiliate:lpasseml ) 															OR
					NOT PRV_Tag_Text( 'O', l.provide_xml, 	'Password',							l.password ) 																	OR
					NOT PRV_Tag_List( 'o', l.provide_xml, 	'ApplicationStatus',				l.affiliate:status, 'Approved,Pending,Rejected', 'Approved,Pending,Rejected' ) 	OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'SiteName',							l.affiliate:site_name ) 														OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'SiteURL',							l.affiliate:site_url ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'ContactName',						l.affiliate:con_name ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Email',							l.affiliate:email ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Company',							l.affiliate:company ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Phone',							l.affiliate:phone ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Fax',								l.affiliate:fax ) 																OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Address',							l.affiliate:addr ) 																OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'City',								l.affiliate:city ) 																OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'State',							l.affiliate:state ) 															OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Zip',								l.affiliate:zip ) 																OR
					NOT PRV_Tag_Text( 'o', l.provide_xml, 	'Country',							l.affiliate:cntry ) 															OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'CommissionHit',					l.affiliate:hits,		10, 4 ) 												OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'CommissionPercentOfOrder',			l.affiliate:order_pct,	10, 2 ) 												OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'CommissionOrderFlatFee',			l.affiliate:order_flat,	10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.affiliate:code NE l.login }">
		<MvIF EXPR = "{ [ g.Module_Feature_AFF_DB ].Affiliate_Load_Code( l.affiliate:code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An affiliate with the login \'' $ l.affiliate:code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Email( l.affiliate:lpasseml ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for LostPasswordEmail: ' $ g.Validation_Message ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_FloatingPoint_Length_NonNegative_Required( l.affiliate:hits, 10, 4 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for CommissionHit: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.password }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Password( l.affiliateoptions, l.password ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Password: ' $ g.Validation_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Library_Crypto ].Runtime_Password_Encrypted( l.password ) }">
			<MvASSIGN NAME = "l.affiliate:password" VALUE = "{ l.password }">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Library_Crypto ].Runtime_Password_Encrypt( l.password, l.affiliate:password ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].Affiliate_Update( l.affiliate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Affiliate_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'login',	l.login ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].Affiliate_Load_Code( l.login, l.affiliate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Affiliate with the login \'' $ l.login $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AFF_DB ].Affiliate_Delete( l.affiliate ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_InventorySettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load( l.settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'TrackInventory',				l.settings:active ) 	OR 
					NOT PRV_Tag_List(		'O', l.provide_xml,	'Mode',							l.settings:mode,
																'basket,checkout',				'basket,checkout' )		OR
					NOT PRV_Tag_Code(		'O', l.provide_xml,	'InventoryExceptionPage',		l.ex_page )				OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'InStockMessageShort',			l.settings:in_short ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'InStockMessageLong',			l.settings:in_long ) 	OR 
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'TrackLowStockLevel',			l.settings:low_track ) 	OR 
					NOT PRV_Tag_Integer(  	'o', l.provide_xml,	'LowStockLevel',				l.settings:low_level ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'LowStockMessageShort',			l.settings:low_short ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'LowStockMessageLong',			l.settings:low_long ) 	OR 
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'TrackOutOfStockProducts',		l.settings:out_track ) 	OR 
					NOT PRV_Tag_Integer(  	'o', l.provide_xml,	'TrackOutOfStockLevel',			l.settings:out_level ) 	OR 
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,	'HideOutOfStockProducts',		l.settings:out_hide ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'OutOfStockMessageShort',		l.settings:out_short ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'OutOfStockMessageLong',		l.settings:out_long ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'LimitedStockMessage',			l.settings:ltd_long ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.ex_page }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.ex_page, l.page ) }">
			<MvIF EXPR = "{ l.page:admin }">													<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.ex_page $ '\' is an admin page and cannot be viewed from the shopping interface' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSE>																				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.ex_page $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.settings:ex_page"	VALUE = "{ l.ex_page }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Update( l.settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_InventoryEmailNotification_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load( l.settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 	'SendEmailOnLowStock',	l.settings:eml_low ) 	OR 
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml,		'SendEmailOnNoStock',	l.settings:eml_out ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,		'EmailFrom',			l.settings:eml_from ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,		'EmailTo',				l.settings:eml_to ) 	OR 
					NOT PRV_Tag_Text( 		'o', l.provide_xml,		'EmailCC',				l.settings:eml_cc ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,		'Subject',				l.settings:eml_sub ) 	OR 
					NOT PRV_Tag_Text( 		'O', l.provide_xml,		'Message',				l.settings:eml_msg ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Update( l.settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_InventoryProductSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 		l.provide_xml, 						'product_code',					l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_INV_DB ].InventoryProductSettings_Load( l.product:id, l.product_settings ) }">
		<MvASSIGN NAME = "l.product_loaded" VALUE = 1>
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Feature_INV_DB ].InventoryDefaultProductSettings( l.product_settings ) }">
	</MvIF>

	<MvIF EXPR = "{ l.product_settings:low_lvl_d }">
		<MvASSIGN NAME = "l.low_level" VALUE = "default">
	<MvELSE>
		<MvASSIGN NAME = "l.low_level" VALUE = "{ l.product_settings:low_level }">
	</MvIF>

	<MvIF EXPR = "{ l.product_settings:out_lvl_d }">
		<MvASSIGN NAME = "l.out_level" VALUE = "default">
	<MvELSE>
		<MvASSIGN NAME = "l.out_level" VALUE = "{ l.product_settings:out_level }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_List( 		'O', l.provide_xml, 	'TrackLowStockLevel',		l.product_settings:low_track, 'Default,Yes,No', 'd,y,n' )	OR
					NOT PRV_Tag_List( 		'O', l.provide_xml, 	'TrackOutOfStockLevel',		l.product_settings:out_track, 'Default,Yes,No', 'd,y,n' )	OR
					NOT PRV_Tag_List( 		'O', l.provide_xml, 	'HideOutOfStockProducts',	l.product_settings:out_hide,  'Default,Yes,No', 'd,y,n' )	OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml,		'LowStockLevel',			l.low_level )												OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml,		'OutOfStockLevel',			l.out_level )												OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 	'TrackProduct',				l.product_settings:active  ) 								OR  
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 	'InStockMessageShort',		l.product_settings:in_short ) 								OR  
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 	'InStockMessageLong',		l.product_settings:in_long ) 								OR  
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 	'LowStockMessageShort',		l.product_settings:low_short ) 								OR  
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 	'LowStockMessageLong',		l.product_settings:low_long ) 								OR  
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 	'OutOfStockMessageShort',	l.product_settings:out_short ) 								OR  
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 	'OutOfStockMessageLong',	l.product_settings:out_long ) 								OR  
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 	'LimitedStockMessage',		l.product_settings:ltd_long ) 								OR
					NOT PRV_Tag_Integer(  	'o', l.provide_xml,		'AdjustStockBy',			l.inventory_adjust )										OR
					NOT PRV_Tag_Integer(  	'o', l.provide_xml,		'CurrentStock',				l.current_stock ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.low_level" 			VALUE = "{ tolower( l.low_level ) }">
	<MvASSIGN NAME = "l.out_level" 			VALUE = "{ tolower( l.out_level ) }">

	<MvIF EXPR = "{ l.low_level EQ 'default' }">
		<MvASSIGN NAME = "l.product_settings:low_lvl_d" VALUE = 1>
		<MvASSIGN NAME = "l.product_settings:low_level" VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.product_settings:low_lvl_d" VALUE = 0>
		<MvASSIGN NAME = "l.product_settings:low_level" VALUE = "{ l.low_level }">
	</MvIF>

	<MvIF EXPR = "{ l.out_level EQ 'default' }">
		<MvASSIGN NAME = "l.product_settings:out_lvl_d" VALUE = 1>
		<MvASSIGN NAME = "l.product_settings:out_level" VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.product_settings:out_lvl_d" VALUE = 0>
		<MvASSIGN NAME = "l.product_settings:out_level" VALUE = "{ l.out_level }">
	</MvIF>

	<MvIF EXPR = "{ len( l.current_stock ) AND l.inventory_adjust }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product:code $ '\' cannot have the Current Stock Level and Adjust Stock Level set at the same time.' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.product_loaded }">
		<MvIF EXPR = "{ NOT l.product_settings:active }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Delete( l.product:id ) OR 
							NOT [ g.Module_Feature_INV_DB ].InventoryProductCount_Delete( l.product:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Update( l.product_settings ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.current_stock }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductCount_Update( l.product:id, l.current_stock ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			<MvELSEIF EXPR = "{ NOT ISNULL l.inventory_adjust }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductCount_Adjust( l.product:id, l.inventory_adjust ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			</MvIF>
		</MvIF>
	<MvELSEIF EXPR = "{ l.product_settings:active }">
		<MvASSIGN NAME = "l.product_settings:product_id"	VALUE = "{ l.product:id }">

		<MvIF EXPR = "{ NOT ISNULL l.current_stock }">
			<MvASSIGN NAME = "l.inventory_value"			VALUE = "{ l.current_stock }">
		<MvELSEIF EXPR = "{ NOT ISNULL l.inventory_adjust }">
			<MvASSIGN NAME = "l.inventory_value"			VALUE = "{ l.inventory_adjust }">
		<MvELSE>
			<MvASSIGN NAME = "l.inventory_value"			VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Insert( l.product_settings ) OR
						NOT [ g.Module_Feature_INV_DB ].InventoryProductCount_Insert( l.product:id, l.inventory_value ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_UpsellSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].UpsellOptions_Load( l.upsell_settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'o', l.provide_xml, 'ProductsToShow',		l.upsell_settings:prod_shown ) OR
					NOT PRV_Tag_Integer( 'o', l.provide_xml, 'MaxProductsToSelect',	l.upsell_settings:prod_sell ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].UpsellOptions_Update( l.upsell_settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_UpsoldProduct_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.upsold_product:dmode" 		VALUE = "A">
	<MvASSIGN NAME = "l.upsold_product:pmode" 		VALUE = "P">
	<MvASSIGN NAME = "l.upsold_product:req_amount" 	VALUE = "0.00">
	<MvASSIGN NAME = "l.upsold_product:price" 		VALUE = "0.00">
	
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 	'R', l.provide_xml,	'ProductCode',		l.product_code ) 																							OR
					NOT PRV_Tag_List( 	'O', l.provide_xml,	'Display',			l.upsold_product:dmode, 'Always,Total,Price', 'A,T,P' )														OR
					NOT PRV_Tag_List( 	'O', l.provide_xml,	'Pricing',			l.upsold_product:pmode, 'ProductPrice,ProductCost,AbsolutePrice,PercentOfPrice,PercentOfCost','P,C,A,p,c' ) OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'Required_Amount',	l.upsold_product:req_amount, 10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_USL_DB ].Upsell_Load_Product( l.product:id , l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Upsold Product with the code \'' $ l.product_code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.upsold_product:pmode EQ 'p' OR l.upsold_product:pmode EQ 'c' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Number( 'o', l.provide_xml,	'Price', l.upsold_product:price, 10, 2 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_Price(	'o', l.provide_xml,	'Price', l.upsold_product:price ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.upsold_product"	MEMBER = "product_id"	VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.upsold_product"	MEMBER = "score"		VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].Upsell_Insert( l.upsold_product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_UpsoldProduct_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code', l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Upsold Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].Upsell_Load_Product( l.product:id , l.upsold_product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Upsold Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_List( 	'O', l.provide_xml,	'Display',			l.upsold_product:dmode, 'Always,Total,Price', 'A,T,P' )														OR
					NOT PRV_Tag_List( 	'O', l.provide_xml,	'Pricing',			l.upsold_product:pmode, 'ProductPrice,ProductCost,AbsolutePrice,PercentOfPrice,PercentOfCost','P,C,A,p,c' ) OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'Required_Amount',	l.upsold_product:req_amount, 10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.upsold_product:pmode EQ 'p' OR l.upsold_product:pmode EQ 'c' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Number( 'o', l.provide_xml,	'Price', l.upsold_product:price, 10, 2 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_Price(	'o', l.provide_xml,	'Price', l.upsold_product:price ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.upsold_product"	MEMBER = "score"		VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].Upsell_Update_Product( l.upsold_product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_UpsoldProduct_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].Upsell_Load_Product( l.product:id , l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Upsold Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].Upsell_Delete_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_UpsoldProductRequiredProduct_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'upsoldproduct_code',	l.upsold_product_code ) OR 
					NOT PRV_Attribute_Text( 	l.provide_xml, 'requiredproduct_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.upsold_product_code, l.upsold_product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.upsold_product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].UpsellXProduct_Load( l.upsold_product:id, l.product:id, l.null ) }">
		<MvASSIGN NAME = "l.upsellxprod"	MEMBER = "product_id"    VALUE = "{ l.upsold_product:id }">
		<MvASSIGN NAME = "l.upsellxprod"	MEMBER = "req_prod"      VALUE = "{ l.product:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].UpsellXProduct_Insert( l.upsellxprod ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is already assigned to Upsold Product \'' $ l.upsold_product_code $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_UpsoldProductRequiredProduct_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'upsoldproduct_code',	l.upsold_product_code ) OR 
					NOT PRV_Attribute_Text( 	l.provide_xml, 'requiredproduct_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.upsold_product_code, l.upsold_product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.upsold_product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_USL_DB ].UpsellXProduct_Load( l.upsold_product:id, l.product:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_USL_DB ].UpsellXProduct_Delete( l.upsold_product:id, l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' is not assigned to Upsold Product \'' $ l.upsold_product_code $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Encryption_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Encryption_Available() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Encryption Unavailable' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'R', l.provide_xml,		'Prompt',		l.encryption:prompt ) OR
					NOT PRV_Tag_Text( 		'R', l.provide_xml,	 	'Passphrase',	l.passphrase ) OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 	'Current',		l.encryption_current ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ l.passphrase EQ l.encryption:prompt }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The pass phrase cannot be the same as the prompt' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Passphrase( l.passphrase ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Passphrase: ' $ g.Validation_Message ) }">
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Library_DB ].Encryption_Load_Prompt( l.encryption:prompt, l.existing_encryption ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'This prompt is already associated with an existing Encryption Key' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Crypto ].Encryption_Key_Create( l.encryption, l.passphrase ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_EncryptionKeyCreated( 'MER-PRV-ADM-00070', l.encryption ) }">

	<MvIF EXPR = "{ l.encryption_current }">
		<MvASSIGN NAME = "g.Store:crypt_id"	VALUE = "{ l.encryption:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_Encryption( g.Store ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_StoreEncryptionKeyChanged( 'MER-PRV-ADM-00071', l.encryption ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Encryption_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Encryption_Available() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Encryption Unavailable' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	 l.provide_xml, 'prompt',		l.prompt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Encryption_Load_Prompt( l.prompt, l.encryption ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Encryption with the prompt \'' $ l.prompt $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'O', l.provide_xml,		'Prompt',		l.encryption:prompt ) 		OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 	'Current',		l.encryption_current ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Encryption_Load_Prompt( l.encryption:prompt, l.existing_encryption ) AND ( l.encryption:id NE l.existing_encryption:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'This prompt is already associated with an existing Encryption Key' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Encryption_Update( l.encryption ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.encryption_current }">
		<MvASSIGN NAME = "g.Store:crypt_id"	VALUE = "{ l.encryption:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_Encryption( g.Store ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_StoreEncryptionKeyChanged( 'MER-PRV-ADM-00072', l.encryption ) }">
	<MvELSEIF EXPR = "{ l.encryption:id EQ g.Store:crypt_id }">
		<MvASSIGN NAME = "g.Store:crypt_id"	VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_Encryption( g.Store ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_StoreEncryptionKeyChanged( 'MER-PRV-ADM-00073', l.encryption ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Encryption_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'prompt',	l.prompt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Encryption_Load_Prompt( l.prompt, l.encryption ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Encryption with the prompt \'' $ l.prompt $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.encryption:refcount GT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'This Encryption Key is in use by one or more orders and cannot be deleted' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Encryption_Delete_ID( l.encryption:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Store:crypt_id EQ l.encryption:id }">
		<MvASSIGN NAME = "g.Store:crypt_id"	VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_Encryption( g.Store ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_StoreEncryptionKeyChanged( 'MER-PRV-ADM-00074', l.encryption ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Skin_Select" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.skin_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_UT ].SKIN_Install( g.Store:code, l.skin_code, 1, 1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Inventory_ProductAttributeAndOptionList" PARAMETERS = "provide_xml var, product var, attributes var, attribute_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attribute_count"	VALUE = 0>

	<MvASSIGN NAME = "l.child_pos"			VALUE = 1>
	<MvASSIGN NAME = "l.child_count"		VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvIF EXPR = "{ l.name EQ 'attribute_option' }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml:children[ l.child_pos ], 'attribute_code',	l.attribute_code ) OR
							NOT PRV_Attribute_Text( l.provide_xml:children[ l.child_pos ], 'option_code',		l.option_code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute_code, l.attribute ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.attribute:inventory }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute \'' $ l.attribute:code $ '\' is not an inventory attribute' ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.attribute:type NE 'radio' ) AND ( l.attribute:type NE 'select' ) AND ( l.attribute:type NE 'swatch-select' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute \'' $ l.attribute:code $ '\' is not a multiple selection attribute' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Option_Load_Code( l.attribute:id, l.option_code, l.option ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
			</MvIF>

			<MvASSIGN NAME = "l.attribute_count"														VALUE = "{ l.attribute_count + 1 }">
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "attr_id"			VALUE = "{ l.attribute:id }">
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "attmpat_id"		VALUE = 0>
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "option_id"		VALUE = "{ l.option:id }">
		<MvELSEIF EXPR = "{ l.name EQ 'attribute_boolean' }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Text(		l.provide_xml:children[ l.child_pos ], 'attribute_code',	l.attribute_code ) OR
							NOT PRV_Attribute_Boolean(	l.provide_xml:children[ l.child_pos ], 'present',			l.present ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute_code, l.attribute ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.attribute:inventory }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute \'' $ l.attribute:code $ '\' is not an inventory attribute' ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.attribute:type NE 'checkbox' ) AND ( l.attribute:type NE 'text' ) AND ( l.attribute:type NE 'memo' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute \'' $ l.attribute:code $ '\' is not a checkbox, text, or memo attribute' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.attribute_count"														VALUE = "{ l.attribute_count + 1 }">
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "attr_id"			VALUE = "{ l.attribute:id }">
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "attmpat_id"		VALUE = 0>

			<MvIF EXPR = "{ l.present }">
				<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "option_id"	VALUE = 1>
			<MvELSE>
				<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "option_id"	VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplateattribute_option' }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml:children[ l.child_pos ], 'attribute_code',					l.attribute_code ) OR
							NOT PRV_Attribute_Text( l.provide_xml:children[ l.child_pos ], 'attributetemplateattribute_code',	l.attributetemplateattribute_code ) OR
							NOT PRV_Attribute_Text( l.provide_xml:children[ l.child_pos ], 'option_code',						l.option_code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute_code, l.attribute ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
			</MvIF>

			<MvIF EXPR = "{ l.attribute:attemp_id EQ 0 }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute \'' $ l.attribute:code $ '\' does not reference an attribute template' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Code( l.attribute:attemp_id, l.attributetemplateattribute_code, l.attributetemplateattribute ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.attributetemplateattribute:inventory }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute Template Attribute \'' $ l.attributetemplateattribute:code $ '\' is not an inventory attribute' ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.attributetemplateattribute:type NE 'radio' ) AND ( l.attributetemplateattribute:type NE 'select' ) AND ( l.attributetemplateattribute:type NE 'swatch-select' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute Template Attribute \'' $ l.attributetemplateattribute:code $ '\' is not a multiple selection attribute' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Load_Code( l.attributetemplateattribute:id, l.option_code, l.option ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
			</MvIF>

			<MvASSIGN NAME = "l.attribute_count"														VALUE = "{ l.attribute_count + 1 }">
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "attr_id"			VALUE = "{ l.attribute:id }">
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "attmpat_id"		VALUE = "{ l.attributetemplateattribute:id }">
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "option_id"		VALUE = "{ l.option:id }">
		<MvELSEIF EXPR = "{ l.name EQ 'attributetemplateattribute_boolean' }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Text(		l.provide_xml:children[ l.child_pos ], 'attribute_code',					l.attribute_code ) OR
							NOT PRV_Attribute_Text(		l.provide_xml:children[ l.child_pos ], 'attributetemplateattribute_code',	l.attributetemplateattribute_code ) OR
							NOT PRV_Attribute_Boolean(	l.provide_xml:children[ l.child_pos ], 'present',							l.present ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Attribute_Load_Code( l.product:id, l.attribute_code, l.attribute ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
			</MvIF>

			<MvIF EXPR = "{ l.attribute:attemp_id EQ 0 }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute \'' $ l.attribute:code $ '\' does not reference an attribute template' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Code( l.attribute:attemp_id, l.attributetemplateattribute_code, l.attributetemplateattribute ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.attributetemplateattribute:inventory }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute Template Attribute \'' $ l.attributetemplateattribute:code $ '\' is not an inventory attribute' ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.attributetemplateattribute:type NE 'checkbox' ) AND ( l.attributetemplateattribute:type NE 'text' ) AND ( l.attributetemplateattribute:type NE 'memo' )  }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Attribute Template Attribute \'' $ l.attributetemplateattribute:code $ '\' is not a checkbox, text, or memo attribute' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.attribute_count"														VALUE = "{ l.attribute_count + 1 }">
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "attr_id"			VALUE = "{ l.attribute:id }">
			<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "attmpat_id"		VALUE = "{ l.attributetemplateattribute:id }">

			<MvIF EXPR = "{ l.present }">
				<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "option_id"	VALUE = 1>
			<MvELSE>
				<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }" MEMBER = "option_id"	VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"		VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Inventory_PartList" PARAMETERS = "provide_xml var, parts var, part_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.part_count"			VALUE = 0>

	<MvASSIGN NAME = "l.child_pos"			VALUE = 1>
	<MvASSIGN NAME = "l.child_count"		VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvIF EXPR = "{ l.name NE 'part' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Unknown tag' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text(		l.provide_xml:children[ l.child_pos ], 'product_code',	l.product_code ) OR
						NOT PRV_Attribute_Number(	l.provide_xml:children[ l.child_pos ], 'quantity',		l.quantity, 10, 0 ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
		</MvIF>

		<MvASSIGN NAME = "l.part_count"												VALUE = "{ l.part_count + 1 }">
		<MvASSIGN NAME = "l.parts" INDEX = "{ l.part_count }" MEMBER = "part_id"	VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.parts" INDEX = "{ l.part_count }" MEMBER = "quantity"	VALUE = "{ l.quantity }">

		<MvASSIGN NAME = "l.child_pos"		VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductKit_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Inventory_ProductAttributeAndOptionList( l.provide_xml, l.product, l.attributes, l.attribute_count ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.attribute_count NE 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Exactly one of Attribute_Option, Attribute_Boolean, AttributeTemplateAttribute_Option, or AttributeTemplateAttribute_Boolean must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Parts' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Parts' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Inventory_PartList( l.provide_xml:tags:Parts[ 1 ], l.parts, l.part_count ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.part_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One or more parts must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductKit_Delete_Option( l.product:id, l.attributes[ 1 ]:attr_id, l.attributes[ 1 ]:attmpat_id, l.attributes[ 1 ]:option_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.productkit:product_id"		VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.productkit:attr_id"			VALUE = "{ l.attributes[ 1 ]:attr_id }">
	<MvASSIGN NAME = "l.productkit:attmpat_id"		VALUE = "{ l.attributes[ 1 ]:attmpat_id }">
	<MvASSIGN NAME = "l.productkit:option_id"		VALUE = "{ l.attributes[ 1 ]:option_id }">

	<MvASSIGN NAME = "l.part_pos"					VALUE = 1>
	<MvWHILE EXPR = "{ l.part_pos LE l.part_count }">
		<MvASSIGN NAME = "l.productkit:part_id"		VALUE = "{ l.parts[ l.part_pos ]:part_id }">
		<MvASSIGN NAME = "l.productkit:quantity"	VALUE = "{ l.parts[ l.part_pos ]:quantity }">
		<MvASSIGN NAME = "l.productkit:pos"			VALUE = "{ l.part_pos }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductKit_Insert( l.productkit ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.part_pos"				VALUE = "{ l.part_pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductKit_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Inventory_ProductAttributeAndOptionList( l.provide_xml, l.product, l.attributes, l.attribute_count ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.attribute_count NE 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Exactly one of Attribute_Option, Attribute_Boolean, AttributeTemplateAttribute_Option, or AttributeTemplateAttribute_Boolean must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductKit_Delete_Option( l.product:id, l.attributes[ 1 ]:attr_id, l.attributes[ 1 ]:attmpat_id, l.attributes[ 1 ]:option_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductKit_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductKit_Delete_All_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductKit_Generate_Variants" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',		l.product_code ) OR
					NOT PRV_Attribute_List( l.provide_xml, 'pricing_method',	l.pricing_method, 'master,sum', '0,2' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductKit_Generate_Variants( l.product:id, l.pricing_method ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_variant', l.modules ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_ProductVariant_Generate( l.module, l.product ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductVariant_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Options' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Options' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Inventory_ProductAttributeAndOptionList( l.provide_xml:tags:Options[ 1 ], l.product, l.attributes, l.attribute_count ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.attribute_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One or more options must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Parts' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Parts' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Inventory_PartList( l.provide_xml:tags:Parts[ 1 ], l.parts, l.part_count ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.part_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One or more parts must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'ProductVariantPricing' ) }">
		<MvASSIGN NAME = "l.have_pricing"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.pricing:price"	VALUE = 0.00>
		<MvASSIGN NAME = "l.pricing:cost"	VALUE = 0.00>
		<MvASSIGN NAME = "l.pricing:weight"	VALUE = 0.00>

		<MvIF EXPR = "{ NOT PRV_Tag_List(	'R', l.provide_xml:tags:ProductVariantPricing[ 1 ],	'Method',	l.pricing:method,	'master,specific,sum', '0,1,2' )	OR
						NOT PRV_Tag_Price(	'O', l.provide_xml:tags:ProductVariantPricing[ 1 ], 'Price',	l.pricing:price ) 										OR
						NOT PRV_Tag_Price(	'O', l.provide_xml:tags:ProductVariantPricing[ 1 ],	'Cost',		l.pricing:cost ) 										OR
						NOT PRV_Tag_Weight( 'O', l.provide_xml:tags:ProductVariantPricing[ 1 ], 'Weight',	l.pricing:weight ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.have_pricing"	VALUE = "{ l.pricing:method NE 0 }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Load_Attributes( l.product:id, l.attributes, l.attribute_count, l.existing_variant ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Delete( l.product:id, l.existing_variant:variant_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Insert_Attributes( l.product:id, 0, l.part_count, l.attributes, l.attribute_count, l.variant ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.part:product_id"	VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.part:variant_id"	VALUE = "{ l.variant:variant_id }">

	<MvASSIGN NAME = "l.part_pos"			VALUE = 1>
	<MvWHILE EXPR = "{ l.part_pos LE l.part_count }">
		<MvASSIGN NAME = "l.part:part_id"	VALUE = "{ l.parts[ l.part_pos ]:part_id }">
		<MvASSIGN NAME = "l.part:quantity"	VALUE = "{ l.parts[ l.part_pos ]:quantity }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPart_Insert( l.part ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.part_pos"		VALUE = "{ l.part_pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ l.have_pricing }">
		<MvASSIGN NAME = "l.pricing:product_id"	VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.pricing:variant_id"	VALUE = "{ l.variant:variant_id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPricing_Insert( l.pricing ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_variant', l.modules ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_ProductVariant_Insert( l.module, l.product, l.variant:variant_id ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductVariant_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Options' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Options' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Inventory_ProductAttributeAndOptionList( l.provide_xml:tags:Options[ 1 ], l.product, l.attributes, l.attribute_count ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.attribute_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One or more options must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Parts' ) }">
		<MvASSIGN NAME = "l.have_parts"		VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.have_parts"		VALUE = 1>

		<MvIF EXPR = "{ NOT PRV_Inventory_PartList( l.provide_xml:tags:Parts[ 1 ], l.parts, l.part_count ) }">
			<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ l.part_count EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'If present, one or more parts must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'ProductVariantPricing' ) }">
		<MvASSIGN NAME = "l.have_pricing"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.have_pricing"	VALUE = 1>

		<MvASSIGN NAME = "l.pricing:price"	VALUE = 0.00>
		<MvASSIGN NAME = "l.pricing:cost"	VALUE = 0.00>
		<MvASSIGN NAME = "l.pricing:weight"	VALUE = 0.00>

		<MvIF EXPR = "{ NOT PRV_Tag_List(	'R', l.provide_xml:tags:ProductVariantPricing[ 1 ],	'Method',	l.pricing:method, 'master,specific,sum', '0,1,2' )	OR
						NOT PRV_Tag_Price(	'O', l.provide_xml:tags:ProductVariantPricing[ 1 ], 'Price',	l.pricing:price )									OR
						NOT PRV_Tag_Price(	'O', l.provide_xml:tags:ProductVariantPricing[ 1 ], 'Cost',		l.pricing:cost )									OR
						NOT PRV_Tag_Weight( 'O', l.provide_xml:tags:ProductVariantPricing[ 1 ], 'Weight',	l.pricing:weight ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Load_Attributes( l.product:id, l.attributes, l.attribute_count, l.variant ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A product variant with the specified options does not exist' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.have_parts OR l.have_pricing }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].DiscountVariantPrice_Delete_All_Variant( l.product:id, l.variant:variant_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.have_parts }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPart_Delete_All_Variant( l.product:id, l.variant:variant_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.part:product_id"	VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.part:variant_id"	VALUE = "{ l.variant:variant_id }">

		<MvASSIGN NAME = "l.part_pos"			VALUE = 1>
		<MvWHILE EXPR = "{ l.part_pos LE l.part_count }">
			<MvASSIGN NAME = "l.part:part_id"	VALUE = "{ l.parts[ l.part_pos ]:part_id }">
			<MvASSIGN NAME = "l.part:quantity"	VALUE = "{ l.parts[ l.part_pos ]:quantity }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPart_Insert( l.part ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvASSIGN NAME = "l.part_pos"		VALUE = "{ l.part_pos + 1 }">
		</MvWHILE>

		<MvIF EXPR = "{ l.variant:part_count NE l.part_count }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Update_Part_Count( l.product:id, l.variant:variant_id, l.part_count ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.have_pricing }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPricing_Delete_Variant( l.product:id, l.variant:variant_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ ( l.pricing:method EQ 1 ) OR ( l.pricing:method EQ 2 ) }">
			<MvASSIGN NAME = "l.pricing:product_id"	VALUE = "{ l.product:id }">
			<MvASSIGN NAME = "l.pricing:variant_id"	VALUE = "{ l.variant:variant_id }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPricing_Insert( l.pricing ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_variant', l.modules ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_ProductVariant_Update( l.module, l.product, l.variant:variant_id ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductVariant_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Options' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Options' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Inventory_ProductAttributeAndOptionList( l.provide_xml:tags:Options[ 1 ], l.product, l.attributes, l.attribute_count ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.attribute_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One or more options must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Load_Attributes( l.product:id, l.attributes, l.attribute_count, l.existing_variant ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A product variant with the specified options does not exist' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSE>
		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_variant', l.modules ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_ProductVariant_Delete( l.module, l.product, l.existing_variant:variant_id ) }">
		</MvFOREACH>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Delete( l.product:id, l.existing_variant:variant_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductVariant_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Delete_All_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_variant', l.modules ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_ProductVariant_Delete_All_Product( l.module, l.product ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductVariant_Update_Default" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Parts' ) }">
		<MvASSIGN NAME = "l.have_parts"		VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.have_parts"		VALUE = 1>

		<MvIF EXPR = "{ NOT PRV_Inventory_PartList( l.provide_xml:tags:Parts[ 1 ], l.parts, l.part_count ) }">
			<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ l.part_count EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'If present, one or more parts must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'ProductVariantPricing' ) }">
		<MvASSIGN NAME = "l.have_pricing"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.have_pricing"	VALUE = 1>

		<MvASSIGN NAME = "l.pricing:price"	VALUE = 0.00>
		<MvASSIGN NAME = "l.pricing:cost"	VALUE = 0.00>
		<MvASSIGN NAME = "l.pricing:weight"	VALUE = 0.00>

		<MvIF EXPR = "{ NOT PRV_Tag_List(	'R', l.provide_xml:tags:ProductVariantPricing[ 1 ],	'Method',	l.pricing:method, 'master,specific,sum', '0,1,2' )	OR
						NOT PRV_Tag_Price(	'O', l.provide_xml:tags:ProductVariantPricing[ 1 ], 'Price',	l.pricing:price )									OR
						NOT PRV_Tag_Price(	'O', l.provide_xml:tags:ProductVariantPricing[ 1 ], 'Cost',		l.pricing:cost )									OR
						NOT PRV_Tag_Weight( 'O', l.provide_xml:tags:ProductVariantPricing[ 1 ], 'Weight',	l.pricing:weight ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.have_parts OR l.have_pricing }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].DiscountVariantPrice_Delete_All_Variant( l.product:id, 0 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.have_parts }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPart_Delete_All_Variant( l.product:id, 0 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.part:product_id"	VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.part:variant_id"	VALUE = 0>

		<MvASSIGN NAME = "l.part_pos"			VALUE = 1>
		<MvWHILE EXPR = "{ l.part_pos LE l.part_count }">
			<MvASSIGN NAME = "l.part:part_id"	VALUE = "{ l.parts[ l.part_pos ]:part_id }">
			<MvASSIGN NAME = "l.part:quantity"	VALUE = "{ l.parts[ l.part_pos ]:quantity }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPart_Insert( l.part ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvASSIGN NAME = "l.part_pos"		VALUE = "{ l.part_pos + 1 }">
		</MvWHILE>
	</MvIF>

	<MvIF EXPR = "{ l.have_pricing }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPricing_Delete_Variant( l.product:id, 0 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ ( l.pricing:method EQ 1 ) OR ( l.pricing:method EQ 2 ) }">
			<MvASSIGN NAME = "l.pricing:product_id"	VALUE = "{ l.product:id }">
			<MvASSIGN NAME = "l.pricing:variant_id"	VALUE = 0>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPricing_Insert( l.pricing ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_variant', l.modules ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_ProductVariant_Update( l.module, l.product, 0 ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductVariant_Delete_Default" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_variant', l.modules ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_ProductVariant_Delete( l.module, l.product, 0 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Delete( l.product:id, 0 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductVariant_Generate" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',		l.product_code ) OR
					NOT PRV_Attribute_List( l.provide_xml, 'pricing_method',	l.pricing_method, 'master,sum', '0,2' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:attribute, 'delimiter' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Generate( l.product, l.pricing_method ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT ISNULL l.provide_xml:attribute:delimiter }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.provide_xml:attribute:delimiter ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Generate_Delimiter( l.product, l.pricing_method, l.provide_xml:attribute:delimiter ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_variant', l.modules ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_ProductVariant_Generate( l.module, l.product ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_OrderItem_InsertAttributes" PARAMETERS = "orderitem var, orderoptions var, orderoption_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.orderoption_pos"		VALUE = 1>

	<MvWHILE EXPR = "{ l.orderoption_pos LE l.orderoption_count }">
		<MvASSIGN NAME = "l.orderoptions" INDEX = "{ l.orderoption_pos }" MEMBER = "order_id"	VALUE = "{ l.orderitem:order_id }">
		<MvASSIGN NAME = "l.orderoptions" INDEX = "{ l.orderoption_pos }" MEMBER = "line_id"	VALUE = "{ l.orderitem:line_id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v10_OrderOption_Insert( l.orderitem, l.orderoptions[ l.orderoption_pos ] ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.orderoption_pos"	VALUE = "{ l.orderoption_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_OrderItem_Split" PARAMETERS = "provide_xml var, order_id, line_id, quantity" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.order_id, l.order ) OR
					NOT [ g.Module_Library_DB ].OrderItem_Load_Line( l.order_id, l.line_id, l.original_orderitem ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.original_orderitem:quantity LE l.quantity }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The split quantity is greater than the quantity of this line item, minus one' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItem_Split( l.original_orderitem, l.quantity, l.split_orderitem_original, l.split_orderitem_new ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.orderoption_count" VALUE = "{ [ g.Module_Library_DB ].OrderOptionList_Load_Line( l.split_orderitem_new:line_id, l.orderoptions ) }">

	<MvIF EXPR = "{ NOT PRV_OrderItem_InsertAttributes( l.split_orderitem_new, l.orderoptions, l.orderoption_count ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.split_orderitem_new }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_OrderShipment_ProductList" PARAMETERS = "provide_xml var, products var, product_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.product_count"		VALUE = 0>

	<MvFOREACH ITERATOR = "l.child" ARRAY = "l.provide_xml:children" COUNT = "{ miva_array_elements( l.provide_xml:children ) }">
		<MvASSIGN NAME = "l.name" 			VALUE = "{ tolower( l.child:name ) }">
		<MvASSIGN NAME = "l.product_code"	VALUE = "">
		<MvASSIGN NAME = "l.line_id"		VALUE = "">
		<MvASSIGN NAME = "l.quantity" 		VALUE = 0>
		<MvASSIGN NAME = "l.duplicate" 		VALUE = 0>

		<MvIF EXPR = "{ l.name NE 'product' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child, 'Unknown tag' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT miva_member_exists( l.child:attribute, 'line_id' ) }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Text(		l.child, 'product_code',	l.product_code ) OR
							NOT PRV_Attribute_Integer(	l.child, 'quantity',		l.quantity ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Attribute_Integer( l.child, 'line_id', l.line_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ miva_member_exists( l.child:attribute, 'product_code' ) }">
				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child, 'product_code', l.product_code ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ miva_member_exists( l.child:attribute, 'quantity' ) }">
				<MvIF EXPR = "{ NOT PRV_Attribute_Integer( l.child, 'quantity', l.quantity ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" COUNT = "{ l.product_count }">
			<MvIF EXPR = "{ NOT ISNULL l.line_id }">
				<MvIF EXPR = "{ l.line_id EQ l.product:line_id }">
					<MvASSIGN NAME = "l.product:quantity"	VALUE = "{ l.product:quantity + l.quantity }">
					<MvASSIGN NAME = "l.duplicate"			VALUE = 1>
					<MvFOREACHSTOP>
				</MvIF>
			<MvELSEIF EXPR = "{ NOT ISNULL l.product_code }">
				<MvIF EXPR = "{ tolower( l.product_code ) EQ tolower( l.product:code ) }">
					<MvASSIGN NAME = "l.product:quantity"	VALUE = "{ l.product:quantity + l.quantity }">
					<MvASSIGN NAME = "l.duplicate"			VALUE = 1>
					<MvFOREACHSTOP>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.duplicate EQ 0 }">
			<MvASSIGN NAME = "l.product_count"		VALUE = "{ l.product_count + 1 }">

			<MvREFERENCEARRAY NAME = "l.product" VARIABLE = "l.products">
				<MvDIMENSION INDEX = "{ l.product_count }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.product:code"		VALUE = "{ l.product_code }">
			<MvASSIGN NAME = "l.product:quantity"	VALUE = "{ l.quantity }">
			<MvASSIGN NAME = "l.product:line_id"	VALUE = "{ l.line_id }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Backorder_ProductList" PARAMETERS = "provide_xml var, products var, product_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.product_count"			VALUE = 0>

	<MvFOREACH ITERATOR = "l.child" ARRAY = "l.provide_xml:children" COUNT = "{ miva_array_elements( l.provide_xml:children ) }">
		<MvASSIGN NAME = "l.name" 				VALUE = "{ tolower( l.child:name ) }">
		<MvASSIGN NAME = "l.product_code" 		VALUE = "">
		<MvASSIGN NAME = "l.line_id" 			VALUE = "">
		<MvASSIGN NAME = "l.quantity" 			VALUE = 0>
		<MvASSIGN NAME = "l.duplicate"			VALUE = 0>

		<MvIF EXPR = "{ l.name NE 'product' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child, 'Unknown tag' ) }">
		</MvIF>
		
		<MvIF EXPR = "{ NOT miva_member_exists( l.child:tags, 'LineID' ) }">
			<MvIF EXPR = "{ NOT PRV_Tag_Code(		'R', l.child, 'Code',		l.product_code ) OR
							NOT PRV_Tag_Integer(	'R', l.child, 'Quantity',	l.quantity ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Integer(	'R', l.child, 'LineID', 	l.line_id )			OR
							NOT PRV_Tag_Code(		'O', l.child, 'Code',		l.product_code ) 	OR
							NOT PRV_Tag_Integer(	'o', l.child, 'Quantity',	l.quantity ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.dt_instock" 		VALUE = 0>
		<MvASSIGN NAME = "l.success"			VALUE = "{ PRV_Tag_Date( l.child, 'dateinstock', l.dt_instock ) }">

		<MvFOREACH ITERATOR = "l.prod" ARRAY = "l.products" COUNT = "{ l.product_count }">
			<MvIF EXPR = "{ NOT ISNULL l.line_id }">
				<MvIF EXPR = "{ l.prod:line_id EQ l.line_id }">
					<MvASSIGN NAME = "l.prod:quantity" 	VALUE = "{ l.prod:quantity + l.quantity }">
					<MvASSIGN NAME = "l.duplicate" 		VALUE = 1>
					<MvFOREACHSTOP>
				</MvIF>
			<MvELSEIF EXPR = "{ NOT ISNULL l.product_code }">
				<MvIF EXPR = "{ tolower( l.prod:code ) EQ tolower( l.product_code ) }">
					<MvASSIGN NAME = "l.prod:quantity"	VALUE = "{ l.prod:quantity + l.quantity }">
					<MvASSIGN NAME = "l.duplicate"		VALUE = 1>
					<MvFOREACHSTOP>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ NOT l.duplicate }">
			<MvASSIGN NAME = "l.product_count"		VALUE = "{ l.product_count + 1 }">

			<MvREFERENCEARRAY NAME = "l.product" VARIABLE = "l.products"> <MvDIMENSION INDEX = "{ l.product_count }"> </MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.product:id"			VALUE = "{ l.product:id }">
			<MvASSIGN NAME = "l.product:code"		VALUE = "{ l.product_code }">
			<MvASSIGN NAME = "l.product:line_id" 	VALUE = "{ l.line_id }">
			<MvASSIGN NAME = "l.product:quantity"	VALUE = "{ l.quantity }">
			<MvASSIGN NAME = "l.product:dt_instock"	VALUE = "{ l.dt_instock }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Order_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.order:id"			VALUE = 0>
	<MvASSIGN NAME = "l.order:orderdate"	VALUE = "{ s.dyn_time_t }">

	<MvIF EXPR = "{ NOT PRV_Tag_Integer( 	'O', l.provide_xml, 'ID',			l.order:id ) OR
					NOT PRV_Tag_Date(			 l.provide_xml, 'OrderDate',	l.order:orderdate ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.order:id }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Order_Load_ID( l.order:id, l.duplicate ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order #' $ l.order:id $ ' already exists' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreKey_Load( 'Orders', l.storekey ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ l.order:id GT l.storekey:maxvalue }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreKey_Increment( 'Orders', l.order:id - l.storekey:maxvalue ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Source' ) }">
		<MvASSIGN NAME = "l.order:source"		VALUE = "user">
		<MvASSIGN NAME = "l.order:source_id"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.order:source"		VALUE = "">
		<MvASSIGN NAME = "l.order:source_id"	VALUE = 0>

		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'Source', l.order:source ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'OrderSources' ) }">
			<MvIF EXPR = "{ PRV_Attribute_Exists( l.provide_xml:tags:Source[ 1 ], 'user_name' ) }">
				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml:tags:Source[ 1 ], 'user_name', l.user_name ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvIF EXPR = "{ ISNULL l.user_name }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Source[ 1 ], 'If specified, user_name may not be blank' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.user_name, l.user ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Source[ 1 ], 'User \'' $ l.user_name $ '\' not found' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.order:source_id" VALUE = "{ l.user:id }">
			<MvELSEIF EXPR = "{ PRV_Attribute_Exists( l.provide_xml:tags:Source[ 1 ], 'customer_login' ) }">
				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml:tags:Source[ 1 ], 'customer_login', l.customer_login ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvIF EXPR = "{ ISNULL l.customer_login }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Source[ 1 ], 'If specified, customer_login may not be blank' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Source[ 1 ], 'Customer \'' $ l.customer_login $ '\' not found' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.order:source_id" VALUE = "{ l.customer:id }">
			<MvELSEIF EXPR = "{ NOT PRV_Tag_Integer( 'O', l.provide_xml, 'SourceID', l.order:source_id ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.order:pay_id"		VALUE = 0>
	<MvASSIGN NAME = "l.order:batch_id"		VALUE = 0>
	<MvASSIGN NAME = "l.order:status"		VALUE = 0>
	<MvASSIGN NAME = "l.order:pay_status"	VALUE = 0>
	<MvASSIGN NAME = "l.order:stk_status"	VALUE = 0>
	<MvASSIGN NAME = "l.order:cust_id"		VALUE = 0>
	<MvASSIGN NAME = "l.order:ship_id"		VALUE = 0>
	<MvASSIGN NAME = "l.order:total"		VALUE = 0.00>
	<MvASSIGN NAME = "l.order:total_auth"	VALUE = 0.00>
	<MvASSIGN NAME = "l.order:total_capt"	VALUE = 0.00>
	<MvASSIGN NAME = "l.order:total_rfnd"	VALUE = 0.00>
	<MvASSIGN NAME = "l.order:net_capt"		VALUE = 0.00>
	<MvASSIGN NAME = "l.order:pend_count"	VALUE = 0>
	<MvASSIGN NAME = "l.order:bord_count"	VALUE = 0>
	<MvASSIGN NAME = "l.order:note_count" 	VALUE = "{ [ g.Module_Library_DB ].NoteList_Load_Order( l.order:id, l.null ) }">

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CustomerLogin' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'CustomerLogin', l.customer_login ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
			<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.order:cust_id"		VALUE = "{ l.customer:id }">
		<MvASSIGN NAME = "l.order:ship_res"		VALUE = "{ l.customer:ship_res }">
		<MvASSIGN NAME = "l.order:ship_fname"	VALUE = "{ l.customer:ship_fname }">
		<MvASSIGN NAME = "l.order:ship_lname"	VALUE = "{ l.customer:ship_lname }">
		<MvASSIGN NAME = "l.order:ship_email"	VALUE = "{ l.customer:ship_email }">
		<MvASSIGN NAME = "l.order:ship_comp"	VALUE = "{ l.customer:ship_comp }">
		<MvASSIGN NAME = "l.order:ship_phone"	VALUE = "{ l.customer:ship_phone }">
		<MvASSIGN NAME = "l.order:ship_fax"		VALUE = "{ l.customer:ship_fax }">
		<MvASSIGN NAME = "l.order:ship_addr1"	VALUE = "{ l.customer:ship_addr1 }">
		<MvASSIGN NAME = "l.order:ship_addr2"	VALUE = "{ l.customer:ship_addr2 }">
		<MvASSIGN NAME = "l.order:ship_city"	VALUE = "{ l.customer:ship_city }">
		<MvASSIGN NAME = "l.order:ship_state"	VALUE = "{ l.customer:ship_state }">
		<MvASSIGN NAME = "l.order:ship_zip"		VALUE = "{ l.customer:ship_zip }">
		<MvASSIGN NAME = "l.order:ship_cntry"	VALUE = "{ l.customer:ship_cntry }">

		<MvASSIGN NAME = "l.order:bill_fname"	VALUE = "{ l.customer:bill_fname }">
		<MvASSIGN NAME = "l.order:bill_lname"	VALUE = "{ l.customer:bill_lname }">
		<MvASSIGN NAME = "l.order:bill_email"	VALUE = "{ l.customer:bill_email }">
		<MvASSIGN NAME = "l.order:bill_comp"	VALUE = "{ l.customer:bill_comp }">
		<MvASSIGN NAME = "l.order:bill_phone"	VALUE = "{ l.customer:bill_phone }">
		<MvASSIGN NAME = "l.order:bill_fax"		VALUE = "{ l.customer:bill_fax }">
		<MvASSIGN NAME = "l.order:bill_addr1"	VALUE = "{ l.customer:bill_addr1 }">
		<MvASSIGN NAME = "l.order:bill_addr2"	VALUE = "{ l.customer:bill_addr2 }">
		<MvASSIGN NAME = "l.order:bill_city"	VALUE = "{ l.customer:bill_city }">
		<MvASSIGN NAME = "l.order:bill_state"	VALUE = "{ l.customer:bill_state }">
		<MvASSIGN NAME = "l.order:bill_zip"		VALUE = "{ l.customer:bill_zip }">
		<MvASSIGN NAME = "l.order:bill_cntry"	VALUE = "{ l.customer:bill_cntry }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'ShipResidential',	l.order:ship_res )		OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipFirstName',	l.order:ship_fname	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipLastName',		l.order:ship_lname	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipEmail',		l.order:ship_email	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipCompany',		l.order:ship_comp	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipPhone',		l.order:ship_phone	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipFax',			l.order:ship_fax	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipAddress1',		l.order:ship_addr1	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipAddress2',		l.order:ship_addr2	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipCity',			l.order:ship_city	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipState',		l.order:ship_state	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipZip',			l.order:ship_zip	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipCountry',		l.order:ship_cntry	) 	OR

					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillFirstName',	l.order:bill_fname	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillLastName',		l.order:bill_lname	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillEmail',		l.order:bill_email	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillCompany',		l.order:bill_comp	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillPhone',		l.order:bill_phone	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillFax',			l.order:bill_fax	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillAddress1',		l.order:bill_addr1	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillAddress2',		l.order:bill_addr2	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillCity',			l.order:bill_city	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillState',		l.order:bill_state	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillZip',			l.order:bill_zip	) 	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillCountry',		l.order:bill_cntry	) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.order:id EQ 0 }">
		<MvASSIGN NAME = "l.order:id"		VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'Orders' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Insert( l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Feature_STA_DB ].Stats_Inc_Orders() }">

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'OrderSources' ) }">
		<MvFOREACH ITERATOR = "l.child" ARRAY = "l.provide_xml:tags:OrderSources[ 1 ]:children" COUNT = "{ miva_array_elements( l.provide_xml:tags:OrderSources[ 1 ]:children ) }">
			<MvASSIGN NAME = "l.name" 		VALUE = "{ tolower( l.child:name ) }">

			<MvIF EXPR = "{ l.name NE 'ordersource' }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child, 'Unknown tag' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child, 'source', l.source ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ PRV_Attribute_Exists( l.child, 'user_name' ) }">
				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child, 'user_name', l.user_name ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvIF EXPR = "{ ISNULL l.user_name }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child, 'If specified, user_name may not be blank' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.user_name, l.user ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child, 'User \'' $ l.user_name $ '\' not found' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.source_id" VALUE = "{ l.user:id }">
			<MvELSEIF EXPR = "{ PRV_Attribute_Exists( l.child, 'customer_login' ) }">
				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child, 'customer_login', l.customer_login ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvIF EXPR = "{ ISNULL l.customer_login }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child, 'If specified, customer_login may not be blank' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child, 'Customer \'' $ l.customer_login $ '\' not found' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.source_id" VALUE = "{ l.customer:id }">
			<MvELSEIF EXPR = "{ PRV_Attribute_Exists( l.child, 'source_id' ) }">
				<MvIF EXPR = "{ NOT PRV_Attribute_Integer( l.child, 'source_id', l.source_id ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.source_id" VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderSource_Load( l.order:id, l.source, l.source_id, l.null ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderSource_Insert( l.order:id, l.source, l.source_id ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order Source \'' $ l.source_id $ '\' is already assigned to Order \'' $ l.order:id $ '\'' ) }">	
			</MvIF>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Items' ) }">
		<MvEVAL EXPR = "{ PRV_Order_ItemList( l.provide_xml:tags:Items[ 1 ], l.order, l.customer, l.orderitems, l.shipments, l.shipment_count ) }">

		<MvASSIGN NAME = "l.orderitem_count" VALUE = "{ miva_array_elements( l.orderitems ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_UT ].DigitalDownload_Process_OrderItems( l.orderitems, l.orderitem_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_UT ].GiftCertificateSales_Process_OrderItems( l.orderitems, l.orderitem_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Charges' ) }">
		<MvEVAL EXPR = "{ PRV_Order_ChargeList( l.provide_xml:tags:Charges[ 1 ], l.order ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CustomFields' ) }">
		<MvEVAL EXPR = "{ PRV_Order_CustomFieldList( l.provide_xml:tags:CustomFields[ 1 ], l.order ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CalculateCharges' ) }">
		<MvEVAL EXPR = "{ PRV_Order_Calculate_Charges( l.provide_xml:tags:CalculateCharges[ 1 ], l.order ) }">
	</MvIF>

	<MvASSIGN NAME = "l.order_total"	VALUE = "{ [ g.Module_Library_DB ].Order_Total( l.order:id ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Update_Total( l.order, l.order_total ) OR
					NOT [ g.Module_Library_DB ].Order_Update_Status( l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'TriggerFulfillmentModules' ) }">
		<MvEVAL EXPR = "{ PRV_Order_TriggerFulfillmentModules( l.provide_xml:tags:TriggerFulfillmentModules[ 1 ], l.order ) }">
	</MvIF>
	
	<MvEVAL EXPR = "{ PRV_Order_Shipment_Tag_Combine( l.provide_xml, l.orderitems, l.shipments, l.shipment_count, l.order ) }">
	<MvEVAL EXPR = "{ PRV_Order_Create_Shipments( l.provide_xml, l.shipments, l.shipment_count, l.order ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Order_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Integer( l.provide_xml, 'order_id', l.order_id ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Load_ID( l.order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Failed to load order \'' $ l.order_id $ '\'' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Clear our the xxx_addr fields so the call to Order_Update_Customer_Information
	| will use any updated xxx_addr1/xxx_addr2 fields.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.order:ship_addr"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_addr"	VALUE = "">

	<MvASSIGN NAME = "l.original_order"		VALUE = "{ l.order }">

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CustomerLogin' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'CustomerLogin', l.customer_login ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.order:cust_id"		VALUE = "{ l.customer:id }">
		<MvASSIGN NAME = "l.order:ship_res"		VALUE = "{ l.customer:ship_res }">
		<MvASSIGN NAME = "l.order:ship_fname"	VALUE = "{ l.customer:ship_fname }">
		<MvASSIGN NAME = "l.order:ship_lname"	VALUE = "{ l.customer:ship_lname }">
		<MvASSIGN NAME = "l.order:ship_email"	VALUE = "{ l.customer:ship_email }">
		<MvASSIGN NAME = "l.order:ship_comp"	VALUE = "{ l.customer:ship_comp }">
		<MvASSIGN NAME = "l.order:ship_phone"	VALUE = "{ l.customer:ship_phone }">
		<MvASSIGN NAME = "l.order:ship_fax"		VALUE = "{ l.customer:ship_fax }">
		<MvASSIGN NAME = "l.order:ship_addr1"	VALUE = "{ l.customer:ship_addr1 }">
		<MvASSIGN NAME = "l.order:ship_addr2"	VALUE = "{ l.customer:ship_addr2 }">
		<MvASSIGN NAME = "l.order:ship_city"	VALUE = "{ l.customer:ship_city }">
		<MvASSIGN NAME = "l.order:ship_state"	VALUE = "{ l.customer:ship_state }">
		<MvASSIGN NAME = "l.order:ship_zip"		VALUE = "{ l.customer:ship_zip }">
		<MvASSIGN NAME = "l.order:ship_cntry"	VALUE = "{ l.customer:ship_cntry }">

		<MvASSIGN NAME = "l.order:bill_fname"	VALUE = "{ l.customer:bill_fname }">
		<MvASSIGN NAME = "l.order:bill_lname"	VALUE = "{ l.customer:bill_lname }">
		<MvASSIGN NAME = "l.order:bill_email"	VALUE = "{ l.customer:bill_email }">
		<MvASSIGN NAME = "l.order:bill_comp"	VALUE = "{ l.customer:bill_comp }">
		<MvASSIGN NAME = "l.order:bill_phone"	VALUE = "{ l.customer:bill_phone }">
		<MvASSIGN NAME = "l.order:bill_fax"		VALUE = "{ l.customer:bill_fax }">
		<MvASSIGN NAME = "l.order:bill_addr1"	VALUE = "{ l.customer:bill_addr1 }">
		<MvASSIGN NAME = "l.order:bill_addr2"	VALUE = "{ l.customer:bill_addr2 }">
		<MvASSIGN NAME = "l.order:bill_city"	VALUE = "{ l.customer:bill_city }">
		<MvASSIGN NAME = "l.order:bill_state"	VALUE = "{ l.customer:bill_state }">
		<MvASSIGN NAME = "l.order:bill_zip"		VALUE = "{ l.customer:bill_zip }">
		<MvASSIGN NAME = "l.order:bill_cntry"	VALUE = "{ l.customer:bill_cntry }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'ShipResidential',	l.order:ship_res )		OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipFirstName',	l.order:ship_fname	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipLastName',		l.order:ship_lname	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipEmail',		l.order:ship_email	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipCompany',		l.order:ship_comp	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipPhone',		l.order:ship_phone	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipFax',			l.order:ship_fax	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipAddress1',		l.order:ship_addr1	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipAddress2',		l.order:ship_addr2	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipCity',			l.order:ship_city	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipState',		l.order:ship_state	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipZip',			l.order:ship_zip	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ShipCountry',		l.order:ship_cntry	)	OR

					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillFirstName',	l.order:bill_fname	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillLastName',		l.order:bill_lname	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillEmail',		l.order:bill_email	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillCompany',		l.order:bill_comp	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillPhone',		l.order:bill_phone	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillFax',			l.order:bill_fax	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillAddress1',		l.order:bill_addr1	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillAddress2',		l.order:bill_addr2	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillCity',			l.order:bill_city	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillState',		l.order:bill_state	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillZip',			l.order:bill_zip	)	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'BillCountry',		l.order:bill_cntry	) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Items' ) }">
		<MvASSIGN NAME = "l.original_orderitem_count" VALUE = "{ [ g.Module_Library_DB ].OrderItemList_Load_Order( l.order:id, l.original_orderitems ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItemList_Delete_LookupVariants( l.original_orderitem_count, l.original_orderitems ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ PRV_Order_ItemList( l.provide_xml:tags:Items[ 1 ], l.order, l.customer, l.orderitems, l.shipments, l.shipment_count ) }">

		<MvASSIGN NAME = "l.orderitem_count" VALUE = "{ miva_array_elements( l.orderitems ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_UT ].DigitalDownload_Process_OrderItems( l.orderitems, l.orderitem_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_UT ].GiftCertificateSales_Process_OrderItems( l.orderitems, l.orderitem_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Charges' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderCharge_Delete_All_Order( l.order:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ PRV_Order_ChargeList( l.provide_xml:tags:Charges[ 1 ], l.order ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CalculateCharges' ) }">
		<MvEVAL EXPR = "{ PRV_Order_Calculate_Charges( l.provide_xml:tags:CalculateCharges[ 1 ], l.order ) }">
	</MvIF>

	<MvASSIGN NAME = "l.updated_total" VALUE = "{ [ g.Module_Library_DB ].Order_Total( l.order_id ) }">

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Total' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Number( 'O', l.provide_xml, 'total', l.total, 10, 2 )  }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Update_Total( l.original_order, l.total ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.original_order:total NE l.updated_total }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Update_Total( l.original_order, l.updated_total ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_Customer_Information( l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{	NOT [ g.Module_Library_DB ].Order_Update_Status( l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'OrderDate' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Date( l.provide_xml, 'OrderDate', l.orderdate ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.order:orderdate" VALUE = "{ l.orderdate }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_Date( l.order ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ PRV_Order_Shipment_Tag_Combine( l.provide_xml, l.orderitems, l.shipments, l.shipment_count, l.order ) }">
	<MvEVAL EXPR = "{ PRV_Order_Create_Shipments( l.provide_xml, l.shipments, l.shipment_count, l.order ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Order_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Integer( l.provide_xml, 'order_id', l.order_id ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Load_ID( l.order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Failed to load order \'' $ l.order_id $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Delete( l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00059', 'Order ' $ l.order:id $ ' deleted' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_OrderCoupon_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Integer(	l.provide_xml, 'order_id',		l.order_id ) OR
					NOT PRV_Attribute_Text(		l.provide_xml, 'coupon_code',	l.coupon_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Load_ID( l.order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order \'' $ l.order_id $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon \'' $ l.coupon_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].Order_Assign_Coupon( l.order, l.coupon ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_OrderCoupon_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Integer(	l.provide_xml, 'order_id',		l.order_id ) OR
					NOT PRV_Attribute_Text(		l.provide_xml, 'coupon_code',	l.coupon_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Load_ID( l.order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order \'' $ l.order_id $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].Coupon_Load_Code( l.coupon_code, l.coupon ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Coupon \'' $ l.coupon_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].Order_Unassign_Coupon( l.order, l.coupon ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_OrderPriceGroup_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Integer(	l.provide_xml, 'order_id',		l.order_id ) OR
					NOT PRV_Attribute_Text(		l.provide_xml, 'group_name',	l.group_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Load_ID( l.order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order \'' $ l.order_id $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.pricegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.pricegroup:module_id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.pricegroup:name $ '\' cannot be applied to orders' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.pricegroup:module_id, l.pricegroup:module ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load discount module' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.pricegroup:module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Discount module \'' $ l.pricegroup:module:name $ '\' is deactivated' ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_PGR_UT ].Order_Discount_LockFile( l.order ) }">
		<MvASSIGN NAME = "l.result"	VALUE = "{ PRV_OrderPriceGroup_Update_Assigned_LowLevel( l.order, l.pricegroup, 1 ) }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_OrderPriceGroup_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Integer(	l.provide_xml, 'order_id',		l.order_id ) OR
					NOT PRV_Attribute_Text(		l.provide_xml, 'group_name',	l.group_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Load_ID( l.order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order \'' $ l.order_id $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.pricegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.pricegroup:module_id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.pricegroup:name $ '\' cannot be applied to orders' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.pricegroup:module_id, l.pricegroup:module ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load discount module' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_PGR_UT ].Order_Discount_LockFile( l.order ) }">
		<MvASSIGN NAME = "l.result"	VALUE = "{ PRV_OrderPriceGroup_Update_Assigned_LowLevel( l.order, l.pricegroup, 0 ) }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_OrderPriceGroup_Update_Assigned_LowLevel" PARAMETERS = "order var, pricegroup var, assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.order:id, l.order ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT l.assigned }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].OrderDiscountTotal_Delete_Order_PriceGroup( l.order:id, l.pricegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.orderdiscounttotal:order_id"	VALUE = "{ l.order:id }">
		<MvASSIGN NAME = "l.orderdiscounttotal:pgrp_id"		VALUE = "{ l.pricegroup:id }">
		<MvASSIGN NAME = "l.orderdiscounttotal:coupon_id"	VALUE = 0>
		<MvASSIGN NAME = "l.orderdiscounttotal:name"		VALUE = "{ l.pricegroup:name }">
		<MvASSIGN NAME = "l.orderdiscounttotal:priority"	VALUE = "{ l.pricegroup:priority }">
		<MvASSIGN NAME = "l.orderdiscounttotal:descrip"		VALUE = "{ l.pricegroup:descrip }">
		<MvASSIGN NAME = "l.orderdiscounttotal:total"		VALUE = 0.00>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].OrderDiscountTotal_Insert( l.orderdiscounttotal ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.discount_params" VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].Discount_Order_BuildParam_RecalculateShippingIfDiscounted( l.discount_params ) }">
	<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].Discount_Order_BuildParam_RecalculateTax( l.discount_params ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].Discount_Order_WithParams( l.order, l.discount_params ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_Shipment_Tag_Combine" PARAMETERS = "provide_xml var, orderitems var, shipments var, shipment_count var, order var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.ship_unmarked_items" VALUE = 0>

	<MvFOREACH ITERATOR = "l.shipment_child" ARRAY = "l.provide_xml:tags:Shipment">
		<MvASSIGN NAME = "l.tracking" 	VALUE = "">
		<MvASSIGN NAME = "l.code" 		VALUE = "">
		<MvASSIGN NAME = "l.cost" 		VALUE = 0.00>
		<MvASSIGN NAME = "l.ship_date" 	VALUE = 0>
		<MvASSIGN NAME = "l.status" 	VALUE = 100>
		
		<MvIF EXPR = "{ NOT PRV_Tag_Text(	'O',	l.shipment_child,	'Code',				l.code ) 				OR						
						NOT PRV_Tag_Text(	'O', 	l.shipment_child,	'TrackingNumber',	l.tracking:tracknum )	OR
						NOT PRV_Tag_Text(	'o', 	l.shipment_child,	'TrackingType',		l.tracking:tracktype )	OR
						NOT PRV_Tag_Number( 'O',	l.shipment_child,	'Cost',				l.cost, 10, 2 )			OR					
						NOT PRV_Tag_Date( 			l.shipment_child,	'ShipDate', 		l.ship_date )			OR
						NOT PRV_Tag_List( 	'O', 	l.shipment_child, 	'MarkAsShipped', 	l.status, 'Shipped,shipped,Yes,yes,1', '200,200,200,200,200' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>
		
		<MvIF EXPR = "{ [ g.Module_Library_DB ].v57_OrderShipment_Load_Code( l.code, l.null ) }">		
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Shipment code \'' $ l.code $ '\' already exists.' ) }">
			
			<MvFOREACHCONTINUE>
		</MvIF>
		
		<MvIF EXPR = "{ ISNULL l.tracking:tracknum }">
			<MvIF EXPR = "{ l.ship_unmarked_items }">
				<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Only one shipment tag may be specified without a tracking number' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.ship_unmarked_items" 	VALUE = 1>
			<MvASSIGN NAME = "l.items" 					VALUE = "">
			<MvASSIGN NAME = "l.item_count" 			VALUE = 0>
			
			<MvFOREACH ITERATOR = "l.orderitem" ARRAY = "l.orderitems">
				<MvIF EXPR = "{ ISNULL l.orderitem:tracknum }">
					<MvASSIGN NAME = "l.item_count" 							VALUE = "{ l.item_count + 1 }">
					<MvASSIGN NAME = "l.items" 		INDEX = "{ l.item_count }" 	VALUE = "{ l.orderitem }">
				</MvIF>
			</MvFOREACH>
			
			<MvIF EXPR = "{ l.item_count EQ 0 }">
				<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Shipment must contain at least one item' ) }">			
			<MvELSE>
				<MvASSIGN NAME = "l.shipment_count"															VALUE = "{ l.shipment_count + 1 }">
				<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "orderitems"			VALUE = "{ l.items }">			
				<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "code"				VALUE = "{ l.code }">
				<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "orderitem_count"	VALUE = "{ l.item_count }">
				<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "cost"				VALUE = "{ l.cost }">
				<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "ship_date"			VALUE = "{ l.ship_date }">
				<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "status"				VALUE = "{ l.status }">
			</MvIF>
			
			<MvFOREACHCONTINUE>
		</MvIF>
		
		<MvASSIGN NAME = "l.shipment_found" VALUE = 0>
		
		<MvFOREACH ITERATOR = "l.shipment" ARRAY = "l.shipments">			
			<MvIF EXPR = "{ ( l.shipment:tracknum EQ l.tracking:tracknum ) AND ( l.shipment:tracktype EQ l.tracking:tracktype ) }">
				<MvIF EXPR = "{ l.shipment_found EQ 0 }">
					<MvASSIGN NAME = "l.shipment_found" 	VALUE = 1>
					<MvASSIGN NAME = "l.shipment:code" 		VALUE = "{ l.code }">
					<MvASSIGN NAME = "l.shipment:cost" 		VALUE = "{ l.cost }">
					<MvASSIGN NAME = "l.shipment:ship_date" VALUE = "{ l.ship_date }">
					<MvASSIGN NAME = "l.shipment:status" 	VALUE = "{ l.status }">
				<MvELSE>
					<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Shipment already exists' ) }">
					<MvFOREACHSTOP>
				</MvIF>
			</MvIF>
		</MvFOREACH>
		
		<MvIF EXPR = "{ l.shipment_found EQ 0 }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Shipment contains no items' ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_Create_Shipments" PARAMETERS = "provide_xml var, shipments var, shipment_count, order var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.shipment" ARRAY = "l.shipments" COUNT = "{ l.shipment_count }">
		<MvEVAL EXPR = "{ PRV_Order_Create_Shipment( l.order, l.shipment, l.shipment:orderitems, l.shipment:orderitem_count, l.provide_xml ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_Create_Shipment" PARAMETERS = "order var, shipment var, orderitems var, orderitem_count, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.ordershipment:id"					VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'OrderShipments' ) }">
	<MvASSIGN NAME = "l.ordershipment:batch_id"				VALUE = 0>	
	<MvASSIGN NAME = "l.ordershipment:order_id"				VALUE = "{ l.order:id }">		
	<MvASSIGN NAME = "l.ordershipment:status"				VALUE = "{ l.shipment:status }">
	<MvASSIGN NAME = "l.ordershipment:ship_date"			VALUE = "{ l.shipment:ship_date }">
	<MvASSIGN NAME = "l.ordershipment:tracknum"				VALUE = "{ l.shipment:tracknum }">
	<MvASSIGN NAME = "l.ordershipment:tracktype"			VALUE = "{ l.shipment:tracktype }">
	<MvASSIGN NAME = "l.ordershipment:weight"				VALUE = 0.00>
	<MvASSIGN NAME = "l.ordershipment:cost"					VALUE = "{ l.shipment:cost }">	
	
	<MvIF EXPR = "{ ISNULL l.shipment:code }">
		<MvASSIGN NAME = "l.ordershipment:code"				VALUE = "{ [ g.Module_Library_DB ].OrderShipment_Generate_Code( l.ordershipment ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.ordershipment:code"				VALUE = "{ l.shipment:code }">
	</MvIF>
	
	<MvIF EXPR = "{ ( l.ordershipment:status EQ 200 ) AND ( ISNULL l.ordershipment:ship_date ) }">
		<MvASSIGN NAME = "l.ordershipment:ship_date"	VALUE = "{ s.time_t }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItemList_CreateShipment_LowLevel( l.ordershipment, l.orderitem_count, l.orderitems ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_Status( l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_ItemList" PARAMETERS = "provide_xml var, order var, customer var, orderitems var, shipments var, shipment_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.part_count"			VALUE = 0>
	<MvASSIGN NAME = "l.orderitem_count"	VALUE = 0>
	<MvASSIGN NAME = "l.orderitems"			VALUE = "">

	<MvASSIGN NAME = "l.child_pos"			VALUE = 1>
	<MvASSIGN NAME = "l.child_count"		VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">
	
		<MvIF EXPR = "{ l.name EQ 'item' }">
			<MvEVAL EXPR = "{ PRV_Order_Item( l.provide_xml:children[ l.child_pos ], l.order, l.orderitems, l.orderitem_count ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'product' }">
			<MvEVAL EXPR = "{ PRV_Order_Product( l.provide_xml:children[ l.child_pos ], l.order, l.customer, l.orderitems, l.orderitem_count ) }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Unknown tag' ) }">
		</MvIF>
		
		<MvASSIGN NAME = "l.child_pos"		VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>

	<MvASSIGN NAME = "l.shipment_count" VALUE = 0>
	<MvASSIGN NAME = "l.shipments"		VALUE = "">
	
	<MvFOREACH ITERATOR = "l.orderitem" ARRAY = "l.orderitems" COUNT = "{ l.orderitem_count }">
		<MvASSIGN NAME = "l.exists" VALUE = 0>
	
		<MvIF EXPR = "{ NOT ISNULL l.orderitem:tracknum }">
			<MvFOREACH ITERATOR = "l.shipment" ARRAY = "l.shipments" INDEX = "l.ship_pos">
				<MvIF EXPR = "{ ( l.orderitem:tracknum EQ l.shipment:tracknum ) AND ( l.orderitem:tracktype EQ l.shipment:tracktype ) }">
					<MvASSIGN NAME = "l.exists"															VALUE = 1>
					<MvASSIGN NAME = "l.shipment:orderitem_count"										VALUE = "{ l.shipment:orderitem_count + 1 }">
					<MvASSIGN NAME = "l.shipment:orderitems" INDEX = "{ l.shipment:orderitem_count }"	VALUE = "{ l.orderitem }">
					
					<MvFOREACHSTOP>
				</MvIF>
			</MvFOREACH>

			<MvIF EXPR = "{ l.exists }">
				<MvFOREACHCONTINUE>
			</MvIF>
			
			<MvASSIGN NAME = "l.shipment_count"															VALUE = "{ l.shipment_count + 1 }">
			<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "tracknum"			VALUE = "{ l.orderitem:tracknum }">
			<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "tracktype"			VALUE = "{ l.orderitem:tracktype }">
			<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "orderitems[ 1 ]"	VALUE = "{ l.orderitem }">
			<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "orderitem_count"	VALUE = 1>
			<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "cost"				VALUE = 0.00>				
			<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "ship_date"			VALUE = 0>				
			<MvASSIGN NAME = "l.shipments" INDEX = "{ l.shipment_count }" MEMBER = "status"				VALUE = 100>				
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_Item" PARAMETERS = "provide_xml var, order var, orderitems var, orderitem_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.orderitem:order_id"			VALUE = "{ l.order:id }">
	<MvASSIGN NAME = "l.orderitem:status"			VALUE = 000>					<MvCOMMENT> Pending </MvCOMMENT>
	<MvASSIGN NAME = "l.orderitem:shpmnt_id"		VALUE = 0>
	<MvASSIGN NAME = "l.orderitem:rma_id"			VALUE = 0>
	<MvASSIGN NAME = "l.orderitem:dt_instock"		VALUE = 0>
	<MvASSIGN NAME = "l.orderitem:product_id"		VALUE = 0>
	<MvASSIGN NAME = "l.orderitem:taxable"			VALUE = 1>
	<MvASSIGN NAME = "l.orderitem:upsold"			VALUE = 0>
	<MvASSIGN NAME = "l.orderitem:tax"				VALUE = 0.00>
	
	<MvIF EXPR = "{	NOT PRV_Tag_List(		'O',	l.provide_xml, 'Status',			l.orderitem:status,
													'Pending,Picking,Shipped,Cancelled,Backordered,RMA Issued,Returned', 
													'000,100,200,300,400,500,600' )								OR
					NOT PRV_Tag_Code(		'R',	l.provide_xml, 'Code',				l.orderitem:code ) 		OR
					NOT PRV_Tag_Text(		'R',	l.provide_xml, 'Name',				l.orderitem:name ) 		OR
					NOT PRV_Tag_Text(		'o',	l.provide_xml, 'SKU',				l.orderitem:sku ) 		OR
					NOT PRV_Tag_Text(		'o:20',	l.provide_xml, 'Type',				l.orderitem:type ) 		OR
					NOT PRV_Tag_Price(		'R',	l.provide_xml, 'Price',				l.orderitem:price )		OR
					NOT PRV_Tag_Weight(		'R',	l.provide_xml, 'Weight',			l.orderitem:weight )	OR
					NOT PRV_Tag_Boolean(	'o',	l.provide_xml, 'Taxable',			l.orderitem:taxable )	OR
					NOT PRV_Tag_Boolean(	'o',	l.provide_xml, 'Upsold',			l.orderitem:upsold ) 	OR
					NOT PRV_Tag_Integer(	'R',	l.provide_xml, 'Quantity',			l.orderitem:quantity ) 	OR
					NOT PRV_Tag_Text( 		'O',	l.provide_xml, 'TrackingNumber',	l.orderitem:tracknum ) 	OR 
					NOT PRV_Tag_Text( 		'o',	l.provide_xml, 'TrackingType',		l.orderitem:tracktype )	OR 
					NOT PRV_Tag_Number( 	'O',	l.provide_xml, 'Tax',				l.orderitem:tax, 10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.orderitem:quantity LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Quantity must be a positive integer' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Product_Load_Code( l.orderitem:code, l.product ) }">
		<MvASSIGN NAME = "l.orderitem:product_id"	VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.orderitem:retail"		VALUE = "{ l.product:price }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.orderitem:product_id AND ISNULL l.orderitem:type }">
		<MvASSIGN NAME = "l.orderitem:type"			VALUE = "product">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItem_Insert( l.orderitem ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_Feature_STA_DB ].Stats_Inc_Products( l.orderitem:quantity ) }">

	<MvIF EXPR = "{ l.orderitem:product_id }">
		<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Feature_STA_DB ].ProdStats_Add_Counts( l.product:id, l.product:name, l.orderitem:quantity ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Options' ) }">
		<MvEVAL EXPR = "{ PRV_Order_Item_OptionList( l.provide_xml:tags:Options[ 1 ], l.order, l.orderitem ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.orderitem_count"							VALUE = "{ l.orderitem_count + 1 }">
	<MvASSIGN NAME = "l.orderitems" INDEX = "{ l.orderitem_count }" VALUE = "{ l.orderitem }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_Item_OptionList" PARAMETERS = "provide_xml var, order var, orderitem var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.child_pos"			VALUE = 1>
	<MvASSIGN NAME = "l.child_count"		VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name"			VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvIF EXPR = "{ l.name NE 'option' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Unknown tag' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.attribute"									VALUE = "">
		<MvASSIGN NAME = "l.orderoption"								VALUE = "">
		<MvASSIGN NAME = "l.orderoption:order_id"						VALUE = "{ l.order:id }">
		<MvASSIGN NAME = "l.orderoption:line_id"						VALUE = "{ l.orderitem:line_id }">
		<MvASSIGN NAME = "l.orderoption:attr_id"						VALUE = 0>
		<MvASSIGN NAME = "l.orderoption:attmpat_id"						VALUE = 0>
		<MvASSIGN NAME = "l.orderoption:option_id"						VALUE = -1>
		<MvASSIGN NAME = "l.orderoption:price"							VALUE = 0.00>
		<MvASSIGN NAME = "l.orderoption:weight"							VALUE = 0.00>
		<MvASSIGN NAME = "l.orderoption:attr_code"						VALUE = "">
		<MvASSIGN NAME = "l.attributetemplateattribute_code"			VALUE = "">
		<MvASSIGN NAME = "l.orderoption:opt_code"						VALUE = "">
		<MvASSIGN NAME = "l.orderoption:data"							VALUE = "">
		<MvASSIGN NAME = "l.orderoption:data_long"						VALUE = "">
		<MvASSIGN NAME = "l.data"										VALUE = "">

		<MvIF EXPR = "{ NOT PRV_Tag_Text(	'R', l.provide_xml:children[ l.child_pos ], 'AttributeCode',					l.orderoption:attr_code )			OR
						NOT PRV_Tag_Text(	'O', l.provide_xml:children[ l.child_pos ], 'AttributeTemplateAttributeCode',	l.attributetemplateattribute_code )	OR
						NOT PRV_Tag_Price(	'O', l.provide_xml:children[ l.child_pos ], 'Price',							l.orderoption:price )				OR
						NOT PRV_Tag_Weight( 'O', l.provide_xml:children[ l.child_pos ], 'Weight',							l.orderoption:weight )				OR
						NOT PRV_Tag_Text(	'O', l.provide_xml:children[ l.child_pos ],	'OptionCode',						l.orderoption:opt_code )			OR
						NOT PRV_Tag_Text(	'O', l.provide_xml:children[ l.child_pos ],	'Data',								l.data ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	
		<MvIF EXPR = "{ NOT ISNULL l.data }">
			<MvASSIGN NAME = "l.orderoption:option_id"					VALUE = 0>

			<MvIF EXPR = "{ len( l.data ) LE 254 }">
				<MvASSIGN NAME = "l.orderoption:data"					VALUE = "{ l.data }">
			<MvELSE>
				<MvASSIGN NAME = "l.orderoption:data_long"				VALUE = "{ l.data }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.orderitem:product_id NE 0 }">
			<MvASSIGN NAME = "l.attribute_loaded"						VALUE = "{ [ g.Module_Library_DB ].Attribute_Load_Code( l.orderitem:product_id, l.orderoption:attr_code, l.attribute ) }">

			<MvIF EXPR = "{ NOT l.attribute_loaded }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.attribute_loaded AND l.attribute:type NE 'template' }">
				<MvASSIGN NAME = "l.orderoption:attr_id"				VALUE = "{ l.attribute:id }">
				
				<MvIF EXPR = "{ len( l.orderoption:opt_code ) }">
					<MvIF EXPR = "{ [ g.Module_Library_DB ].Option_Load_Code( l.attribute:id, l.orderoption:opt_code, l.option ) }">
						<MvASSIGN NAME = "l.orderoption:option_id"		VALUE = "{ l.option:id }">
					<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
					</MvIF>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ ISNULL l.attributetemplateattribute_code }">
					<MvASSIGN NAME = "l.attributetemplateattribute_code" VALUE = "{ l.orderoption:attr_code }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateAttr_Load_Product_Code( l.orderitem:product_id, l.attributetemplateattribute_code, l.attribute ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
					</MvIF>
				<MvELSE>
					<MvASSIGN NAME = "l.orderoption:attr_id"			VALUE = "{ l.attribute:attr_id }">
					<MvASSIGN NAME = "l.orderoption:attr_code"			VALUE = "{ l.attribute:code }">
					<MvASSIGN NAME = "l.orderoption:attmpat_id"			VALUE = "{ l.attribute:id }">

					<MvIF EXPR = "{ len( l.orderoption:opt_code ) }">
						<MvIF EXPR = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Load_Code( l.attribute:id, l.orderoption:opt_code, l.option ) }">
							<MvASSIGN NAME = "l.orderoption:option_id"	VALUE = "{ l.option:id }">
						<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
							<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
						</MvIF>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v10_OrderOption_Insert( l.orderitem, l.orderoption ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"			VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_Product" PARAMETERS = "provide_xml var, order var, customer var, orderitems var, orderitem_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.variant_id"					VALUE = 0>
	<MvASSIGN NAME = "l.basketoption_count"			VALUE = 0>
	<MvASSIGN NAME = "l.attr_price_override"		VALUE = 0>

	<MvASSIGN NAME = "l.orderitem:order_id"			VALUE = "{ l.order:id }">
	<MvASSIGN NAME = "l.orderitem:status"			VALUE = 000>					<MvCOMMENT> Pending </MvCOMMENT>
	<MvASSIGN NAME = "l.orderitem:shpmnt_id"		VALUE = 0>
	<MvASSIGN NAME = "l.orderitem:rma_id"			VALUE = 0>
	<MvASSIGN NAME = "l.orderitem:dt_instock"		VALUE = 0>
	<MvASSIGN NAME = "l.orderitem:upsold"			VALUE = 0>
	<MvASSIGN NAME = "l.orderitem:tax"				VALUE = 0.00>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code_WithRuntimeInventory( l.product_code, l.product ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
	</MvIF>
	
	<MvIF EXPR = "{	NOT PRV_Tag_List(		'O', l.provide_xml, 'Status',			l.orderitem:status,
												 'Pending,Picking,Shipped,Cancelled,Backordered,RMA Issued,Returned', 
												 '000,100,200,300,400,500,600' )							OR
					NOT PRV_Tag_Integer(	'R', l.provide_xml, 'Quantity',			l.orderitem:quantity )	OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml, 'TrackingNumber',	l.orderitem:tracknum )	OR 
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'TrackingType',		l.orderitem:tracktype )	OR 
					NOT PRV_Tag_Number( 	'o', l.provide_xml, 'Tax',				l.orderitem:tax, 10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.orderitem:quantity LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Quantity must be a positive integer' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Options' ) }">
		<MvIF EXPR = "{ NOT PRV_Order_Product_OptionList( l.provide_xml:tags:Options[ 1 ], l.order, l.product, l.basketoptions, l.basketoption_count, l.variant_id ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.orderitem:product_id"		VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.orderitem:code"				VALUE = "{ l.product:code }">
	<MvASSIGN NAME = "l.orderitem:name"				VALUE = "{ l.product:name }">
	<MvASSIGN NAME = "l.orderitem:type"				VALUE = "product">

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'SKU' ) }">
		<MvIF EXPR = "{	NOT PRV_Tag_Text(	'o', l.provide_xml, 'SKU',				l.orderitem:sku ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.part_count"				VALUE = "{ [ g.Module_Library_DB ].ProductList_Load_Variant( l.product:id, l.variant_id, l.parts ) }">

		<MvIF EXPR = "{ l.variant_id EQ 0 AND l.part_count EQ 0 }">
			<MvASSIGN NAME = "l.orderitem:sku"		VALUE = "{ l.product:sku }">
		<MvELSEIF EXPR = "{ l.part_count NE 1 }">
			<MvASSIGN NAME = "l.orderitem:sku"		VALUE = "">
		<MvELSE>
			<MvASSIGN NAME = "l.orderitem:sku"		VALUE = "{ l.parts[ 1 ]:sku }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_RT ].Inventory_Adjust_VariantPricing( l.product, l.variant_id, l.attr_price_override ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
	
	<MvIF EXPR = "{ l.order:cust_id EQ 0 }">
		<MvASSIGN NAME = "l.orderitem:price"		VALUE = "{ l.product:price }">
	<MvELSE>
		<MvASSIGN NAME = "l.orderitem:price"		VALUE = "{ [ g.Module_Library_Utilities ].Adjusted_Price_LowLevel( l.customer, l.product, l.product:price, l.product:cost ) }">
	</MvIF>

	<MvASSIGN NAME = "l.orderitem:retail"			VALUE = "{ l.product:price }">
	<MvASSIGN NAME = "l.orderitem:weight"			VALUE = "{ l.product:weight }">
	<MvASSIGN NAME = "l.orderitem:taxable"			VALUE = "{ l.product:taxable }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItem_Insert( l.orderitem ) OR
					NOT [ g.Module_Feature_INV_RT ].Inventory_Adjust_Variant( l.product, l.variant_id, 0 - l.orderitem:quantity ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_Feature_STA_DB ].Stats_Inc_Products( l.orderitem:quantity ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_Feature_STA_DB ].ProdStats_Add_Counts( l.product:id, l.product:name, l.orderitem:quantity ) }">

	<MvASSIGN NAME = "l.basketoption_pos"			VALUE = 1>
	<MvASSIGN NAME = "l.orderoption:order_id"		VALUE = "{ l.order:id }">
	<MvASSIGN NAME = "l.orderoption:line_id"		VALUE = "{ l.orderitem:line_id }">

	<MvWHILE EXPR = "{ l.basketoption_pos LE l.basketoption_count }">
		<MvASSIGN NAME = "l.orderoption:attr_id"		VALUE = "{ l.basketoptions[ l.basketoption_pos ]:attr_id }">
		<MvASSIGN NAME = "l.orderoption:attr_code"		VALUE = "{ l.basketoptions[ l.basketoption_pos ]:attr_code }">
		<MvASSIGN NAME = "l.orderoption:attmpat_id"		VALUE = "{ l.basketoptions[ l.basketoption_pos ]:attmpat_id }">
		<MvASSIGN NAME = "l.orderoption:option_id"		VALUE = "{ l.basketoptions[ l.basketoption_pos ]:option_id }">
		<MvASSIGN NAME = "l.orderoption:opt_code"		VALUE = "{ l.basketoptions[ l.basketoption_pos ]:opt_code }">

		<MvIF EXPR = "{ l.attr_price_override }">
			<MvASSIGN NAME = "l.orderoption:retail"		VALUE = 0.00>
			<MvASSIGN NAME = "l.orderoption:base_price"	VALUE = 0.00>
			<MvASSIGN NAME = "l.orderoption:price"		VALUE = 0.00>
			<MvASSIGN NAME = "l.orderoption:weight"		VALUE = 0.00>
		<MvELSE>
			<MvASSIGN NAME = "l.orderoption:retail"		VALUE = "{ l.basketoptions[ l.basketoption_pos ]:retail }">
			<MvASSIGN NAME = "l.orderoption:base_price"	VALUE = "{ l.basketoptions[ l.basketoption_pos ]:base_price }">
			<MvASSIGN NAME = "l.orderoption:price"		VALUE = "{ l.basketoptions[ l.basketoption_pos ]:price }">
			<MvASSIGN NAME = "l.orderoption:weight"		VALUE = "{ l.basketoptions[ l.basketoption_pos ]:weight }">
		</MvIF>

		<MvASSIGN NAME = "l.orderoption:data"			VALUE = "{ l.basketoptions[ l.basketoption_pos ]:data }">
		<MvASSIGN NAME = "l.orderoption:data_long"		VALUE = "{ l.basketoptions[ l.basketoption_pos ]:data_long }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v10_OrderOption_Insert( l.orderitem, l.orderoption ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.basketoption_pos"			VALUE = "{ l.basketoption_pos + 1 }">
	</MvWHILE>
	
	<MvASSIGN NAME = "l.orderitem_count"							VALUE = "{ l.orderitem_count + 1 }">
	<MvASSIGN NAME = "l.orderitems" INDEX = "{ l.orderitem_count }" VALUE = "{ l.orderitem }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_Product_OptionList" PARAMETERS = "provide_xml var, order var, product var, basketoptions var, basketoption_count var, variant_id var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attribute_count"		VALUE = 0>

	<MvASSIGN NAME = "l.child_pos"				VALUE = 1>
	<MvASSIGN NAME = "l.child_count"			VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name"				VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvIF EXPR = "{ l.name NE 'option' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Unknown tag' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.attribute_count"	VALUE = "{ l.attribute_count + 1 }">

		<MvIF EXPR = "{ NOT PRV_Tag_Code(	'R', l.provide_xml:children[ l.child_pos ], 'AttributeCode',					l.attributes[ l.attribute_count ]:code			) OR
						NOT PRV_Tag_Code(	'O', l.provide_xml:children[ l.child_pos ], 'AttributeTemplateAttributeCode',	l.attributes[ l.attribute_count ]:template_code	) OR
						NOT PRV_Tag_Text(	'R', l.provide_xml:children[ l.child_pos ], 'Value',							l.attributes[ l.attribute_count ]:value			) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"			VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Validate_Attributes_DetermineVariant( l.product, 0, l.attributes, l.attribute_count, l.basketoptions, l.basketoption_count, l.variant_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One or more required attributes are missing, or an invalid combination of attributes was specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_ChargeList" PARAMETERS = "provide_xml var, order var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.child_pos"			VALUE = 1>
	<MvASSIGN NAME = "l.child_count"		VALUE = "{ miva_array_elements( l.provide_xml:children ) }">
	<MvWHILE EXPR = "{ l.child_pos LE l.child_count }">
		<MvASSIGN NAME = "l.name"			VALUE = "{ tolower( l.provide_xml:children[ l.child_pos ]:name ) }">

		<MvIF EXPR = "{ l.name NE 'charge' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Unknown tag' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.ordercharge:order_id"		VALUE = "{ l.order:id }">
		<MvASSIGN NAME = "l.ordercharge:module_id"		VALUE = 0>
		<MvASSIGN NAME = "l.ordercharge:type"			VALUE = "">
		<MvASSIGN NAME = "l.ordercharge:descrip"		VALUE = "">
		<MvASSIGN NAME = "l.ordercharge:amount"			VALUE = 0.000>
		<MvASSIGN NAME = "l.ordercharge:disp_amt"		VALUE = 0.000>
		<MvASSIGN NAME = "l.ordercharge:tax_exempt"		VALUE = 0>
		<MvASSIGN NAME = "l.ordercharge:tax"			VALUE = 0.00>
		<MvASSIGN NAME = "l.display_amount"				VALUE = "">
		<MvASSIGN NAME = "l.module_code"				VALUE = "">

		<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R', l.provide_xml:children[ l.child_pos ], 'Type',				l.ordercharge:type					) OR
						NOT PRV_Tag_Text(		'R', l.provide_xml:children[ l.child_pos ],	'Description',		l.ordercharge:descrip				) OR
						NOT PRV_Tag_Number(		'R', l.provide_xml:children[ l.child_pos ], 'Amount',			l.ordercharge:amount,		10,	3	) OR
						NOT PRV_Tag_Number(		'O', l.provide_xml:children[ l.child_pos ], 'DisplayAmount',	l.display_amount,			10,	3	) OR
						NOT PRV_Tag_Boolean(	'O', l.provide_xml:children[ l.child_pos ],	'TaxExempt',		l.ordercharge:tax_exempt			) OR
						NOT PRV_Tag_Code(		'O', l.provide_xml:children[ l.child_pos ], 'Module',			l.module_code						) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.ordercharge:type NE 'TAX' }">
			<MvIF EXPR = "{ NOT PRV_Tag_Number(	'O', l.provide_xml:children[ l.child_pos ], 'Tax',				l.ordercharge:tax,			10,	2	) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.display_amount }">
			<MvASSIGN NAME = "l.ordercharge:disp_amt"	VALUE = "{ l.ordercharge:amount }">
		<MvELSE>
			<MvASSIGN NAME = "l.ordercharge:disp_amt"	VALUE = "{ l.display_amount }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.module_code }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.module ) }">
				<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Module ' $ l.module_code $ ' not found' ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml:children[ l.child_pos ] ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module( l.module:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:children[ l.child_pos ], 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.ordercharge:module_id"	VALUE = "{ l.module:id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderCharge_Insert( l.ordercharge ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"		VALUE = "{ l.child_pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_CustomFieldList" PARAMETERS = "provide_xml var, order var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.customfield:name ) }">

		<MvIF EXPR = "{ l.name NE 'customfield' }">
			<MvASSIGN NAME = "l.null" VALUE = "{ PRV_LogMessage( l.customfield, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.customfield, 'module', l.module_code ) OR
		 				NOT PRV_Attribute_Text( l.customfield, 'field', l.field_code ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvEVAL EXPR = "{ PRV_Order_CustomField_Handler( l.customfield, l.module_code, l.order, l.field_code, l.customfield:value ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_CustomField_Handler" PARAMETERS = "provide_xml var, module_code, order var, field_code, value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_ordr }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'fields_ordr\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.module:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Order_Set_Field( l.module, l.order:id, l.field_code, l.value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_Calculate_Charges" PARAMETERS = "provide_xml var, order var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.shippingmodule_data"				VALUE = "">
	<MvASSIGN NAME = "l.calculate_params"					VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Order_Calculate_Charges_BuildParam_CalculateTax( l.calculate_params ) }">

	<MvCOMMENT>
	|
	| When the ShippingModule and ShippingModuleData tags are not present and the order has a valid ship_id,
	| we recalculate shipping using the existing shipping module.  If ship_id is 0, or references a module
	| that does not exist/is not active/is not installed in the store, we simply retain the existing
	| SHIPPING and HANDLING charges.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'ShippingModule' ) OR
					PRV_Tag_Exists( l.provide_xml, 'ShippingModuleData' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Code(	'R', l.provide_xml, 'ShippingModule',		l.shippingmodule_code )	OR
						NOT PRV_Tag_Text(	'O', l.provide_xml, 'ShippingModuleData',	l.shippingmodule_data ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code_Cached( l.shippingmodule_code, l.ship_module )	OR
						NOT [ g.Module_Library_DB ].StoreModule_Load_Cached( l.ship_module:id, 'shipping', l.null )	OR
						NOT l.ship_module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid shipping module' ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.shippingmodule_valid"			VALUE = 0>
		<MvASSIGN NAME = "l.shippingmodule_data"			VALUE = "{ l.order:ship_data }">

		<MvIF EXPR = "{ l.order:ship_id }">
			<MvIF EXPR = "{ [ g.Module_Library_DB ].Module_Load_ID_Cached( l.order:ship_id, l.ship_module )			AND
							[ g.Module_Library_DB ].StoreModule_Load_Cached( l.ship_module:id, 'shipping', l.null )	AND	
							l.ship_module:active }">
				<MvASSIGN NAME = "l.shippingmodule_valid"	VALUE = 1>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT l.shippingmodule_valid }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Order_Calculate_Charges( l.order, l.calculate_params ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Order_Calculate_Charges_BuildParam_CalculateShipping( l.calculate_params, l.ship_module, l.shippingmodule_data ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Order_Calculate_Charges( l.order, l.calculate_params ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Change_Shipping( l.order, l.ship_module:id, l.shippingmodule_data ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Order_TriggerFulfillmentModules" PARAMETERS = "provide_xml var, order var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( g.Store:currncy_id, g.Store_Module_Currency ) OR
					NOT [ g.Module_Library_DB ].Module_Load_ID( g.Store:tax_id, g.Store_Module_Tax ) OR
					NOT [ g.Module_Library_DB ].Module_Load_ID( g.Store:ui_id, g.Store_Module_UI ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "g.Module_Store_Module_Currency" 	VALUE = "{ g.Module_Root $ g.Store_Module_Currency:module }">
	<MvASSIGN NAME = "g.Module_Store_Module_Tax" 		VALUE = "{ g.Module_Root $ g.Store_Module_Tax:module }">
	<MvASSIGN NAME = "g.Module_Store_Module_UI"			VALUE = "{ g.Module_Root $ g.Store_Module_UI:module }">

	<MvASSIGN NAME = "l.module_pos"						VALUE = 1>
	<MvASSIGN NAME = "l.module_count"					VALUE = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Feature( 'fulfill', l.modules ) }">

	<MvWHILE EXPR = "{ l.module_pos LE l.module_count }">
		<MvDO FILE = "{ g.Module_Root $ l.modules[ l.module_pos ]:module }" NAME = "l.module_ok" VALUE = "{ FulfillmentModule_ProcessOrder( l.modules[ l.module_pos ], l.order ) }">
		<MvIF EXPR = "{ NOT l.module_ok }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.module_pos"					VALUE = "{ l.module_pos + 1 }">
	</MvWHILE>

	<MvASSIGN NAME = "g.Store_Module_Currency"			VALUE = "{ g.Store_Module_Currency:module }">
	<MvASSIGN NAME = "g.Store_Module_Tax"				VALUE = "{ g.Store_Module_Tax:module }">
	<MvASSIGN NAME = "g.Store_Module_UI"				VALUE = "{ g.Store_Module_UI:module }">

	<MvASSIGN NAME = "g.Module_Store_Module_Currency" 	VALUE = "{ g.Module_Root $ g.Store_Module_Currency }">
	<MvASSIGN NAME = "g.Module_Store_Module_Tax" 		VALUE = "{ g.Module_Root $ g.Store_Module_Tax }">
	<MvASSIGN NAME = "g.Module_Store_Module_UI"			VALUE = "{ g.Module_Root $ g.Store_Module_UI }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_OrderShipment_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Integer(	l.provide_xml,	'order_id',	l.order_id ) OR
					NOT PRV_Tag_Text( 'O',	 	 l.provide_xml,	'Code',		l.ship_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order \'' $ l.order_id $ '\' not found'  ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].v57_OrderShipment_Load_Code( l.ship_code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Shipment code \'' $ l.ship_code $ '\' already exists.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'ProductList' ) }">
		<MvASSIGN NAME = "l.orderitem_count" VALUE = "{ [ g.Module_Library_DB ].OrderItemList_Load_Status( l.order:id, 0, l.orderitems ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_OrderShipment_ProductList( l.provide_xml:tags:ProductList[ 1 ], l.products, l.product_count ) }">
			<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ l.product_count EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One or more products must be specified' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.orderitem_count"	VALUE = 0>
		<MvASSIGN NAME = "l.orderitems" 		VALUE = "">

		<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" COUNT = "{ l.product_count }">
			<MvIF EXPR = "{ NOT ISNULL l.product:line_id }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItem_Load_Line( l.order_id, l.product:line_id, l.orderitem ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Line id \'' $ l.product:line_id $ '\' does not exist on order \'' $ l.order_id $ '\'' ) }">
				</MvIF>

				<MvIF EXPR = "{ ( l.orderitem:status NE 0 )		AND
								( l.orderitem:status NE 100 )	AND
								( l.orderitem:status NE 400 ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Error processing line id \'' $ l.product:line_id $ '\' in order id \'' $ l.order_id $ '\'.  Line not available to ship.' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT ISNULL l.product:code }">
					<MvIF EXPR = "{ tolower( l.product:code ) NE tolower( l.orderitem:code ) }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product code \'' $ l.product:code $ '\' does not match with line id \'' $ l.product:line_id $ '\'' ) }">
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.product:quantity GT l.orderitem:quantity }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Quantity exceeds the quantity available with line id \'' $ l.product:line_id $ '\'' ) }">
				<MvELSEIF EXPR = "{ l.product:quantity EQ 0 OR l.product:quantity EQ l.orderitem:quantity }">
					<MvASSIGN NAME = "l.orderitem_count" 							VALUE = "{ l.orderitem_count + 1 }">
					<MvASSIGN NAME = "l.orderitems" INDEX = "{ l.orderitem_count }" VALUE = "{ l.orderitem }">
				<MvELSE>
					<MvASSIGN NAME = "l.orderitem_count" 							VALUE = "{ l.orderitem_count + 1 }">
					<MvASSIGN NAME = "l.orderitems"	INDEX = "{ l.orderitem_count }"	VALUE = "{ PRV_OrderItem_Split( l.provide_xml,
																							   l.order_id, 
																							   l.orderitem:line_id, 
																							   l.product:quantity ) }">
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.item_count" 			VALUE = "{ [ g.Module_Library_DB ].OrderItemList_Load_Order( l.order:id, l.orderitems_all ) }">
				<MvASSIGN NAME = "l.quantity_taken"			VALUE = 0>
				<MvASSIGN NAME = "l.req_quantity"			VALUE = "{ l.product:quantity }">
				<MvASSIGN NAME = "l.item_pos"				VALUE = 1>

				<MvWHILE EXPR = "{ ( l.item_pos LE l.item_count ) AND ( l.quantity_taken LT l.req_quantity ) }">
					<MvIF EXPR = "{ tolower( l.orderitems_all[ l.item_pos ]:code ) EQ tolower( l.product:code ) AND 
									(
										( l.orderitems_all[ l.item_pos ]:status EQ 0 )		OR
										( l.orderitems_all[ l.item_pos ]:status EQ 100 )	OR
										( l.orderitems_all[ l.item_pos ]:status EQ 400 )
									) }">
						<MvASSIGN NAME = "l.orderitem_count" 								VALUE = "{ l.orderitem_count + 1 }">

						<MvIF EXPR = "{ l.orderitems_all[ l.item_pos ]:quantity GT ( l.req_quantity - l.quantity_taken ) }">
							<MvASSIGN NAME = "l.orderitems"	INDEX = "{ l.orderitem_count }"	VALUE = "{ PRV_OrderItem_Split( l.provide_xml, 
																															l.order_id, 
																															l.orderitems_all[ l.item_pos ]:line_id, 
																															( l.req_quantity - l.quantity_taken ) ) }">
						<MvELSE>
							<MvASSIGN NAME = "l.orderitems" INDEX = "{ l.orderitem_count }" VALUE = "{ l.orderitems_all[ l.item_pos ] }">
						</MvIF>

						<MvASSIGN NAME = "l.quantity_taken" VALUE = "{ l.quantity_taken + l.orderitems[ l.orderitem_count ]:quantity }">
					</MvIF>

					<MvASSIGN NAME = "l.item_pos" VALUE = "{ l.item_pos + 1 }">
				</MvWHILE>

				<MvIF EXPR = "{ l.quantity_taken NE l.req_quantity }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Error processing product code \'' $ l.product:code $ '\' in order id \'' $ l.order_id $ '\'.  Product not found in order.' ) }">
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ l.orderitem_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to create shipment; No items available to ship' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cost"				VALUE = 0.00>
	<MvASSIGN NAME = "l.status"				VALUE = 100>
	<MvASSIGN NAME = "l.ship_date"			VALUE = 0>
	
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 	'O', 	l.provide_xml,	'TrackingNumber',	l.tracknum ) 	OR
					NOT PRV_Tag_Text( 	'o', 	l.provide_xml,	'TrackingType',		l.tracktype ) 	OR
					NOT PRV_Tag_Number( 'O',	l.provide_xml,	'Cost',				l.cost, 10, 2 ) OR
					NOT PRV_Tag_Date( 			l.provide_xml,	'ShipDate', 		l.ship_date )	OR
					NOT PRV_Tag_List(	'O', 	l.provide_xml, 	'MarkAsShipped', 	l.status, 'Shipped,shipped,Yes,yes,1', '200,200,200,200,200' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.shipment:code" 		VALUE = "{ l.ship_code }">
	<MvASSIGN NAME = "l.shipment:tracknum" 	VALUE = "{ l.tracknum }">
	<MvASSIGN NAME = "l.shipment:tracktype" VALUE = "{ l.tracktype }">
	<MvASSIGN NAME = "l.shipment:cost" 		VALUE = "{ l.cost }">		
	<MvASSIGN NAME = "l.shipment:status" 	VALUE = "{ l.status }">
	<MvASSIGN NAME = "l.shipment:ship_date" VALUE = "{ l.ship_date }">

	<MvEVAL EXPR = "{ PRV_Order_Create_Shipment( l.order, l.shipment, l.orderitems, l.orderitem_count, l.provide_xml ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_OrderShipment_SetStatus" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.ordershipment_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v57_OrderShipment_Load_Code( l.ordershipment_code, l.ordershipment ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Error processing shipment code \'' $ l.ordershipment_code $ '\'.  Shipment does not exist.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_ordershipment" VALUE = "{ l.ordershipment }">

	<MvIF EXPR = "{ l.ordershipment:status EQ 100 }">
		<MvIF EXPR = "{ NOT PRV_Tag_List( 'O', l.provide_xml, 'MarkAsShipped', l.ordershipment:status, 'Shipped,shipped,Yes,yes,1', '200,200,200,200,200'   ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Tag_Date( l.provide_xml, 'ShipDate', l.ordershipment:ship_date ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.ordershipment:ship_date }">
			<MvASSIGN NAME = "l.ordershipment:ship_date" VALUE = "{ s.time_t }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(	'O', l.provide_xml, 'TrackingNumber',	l.tracknum )					OR
					NOT PRV_Tag_Text(	'o', l.provide_xml, 'TrackingType',		l.tracktype )					OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'Cost',				l.ordershipment:cost,	10, 2 ) OR
					NOT PRV_Tag_Number( 'o', l.provide_xml,	'Weight',			l.ordershipment:weight,	10, 3 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.ordershipment" MEMBER = "tracknum" VALUE = "{ l.tracknum }">

	<MvIF EXPR = "{ len( trim( l.tracktype ) ) GT 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].TrackingLinkList_Load_All( l.trackinglinks ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.link_pos"	VALUE = 1>
		<MvASSIGN NAME = "l.link_count" VALUE = "{ miva_array_elements( l.trackinglinks ) }">

		<MvWHILE EXPR = "{ l.link_pos LE l.link_count }">
			<MvIF EXPR = "{ tolower( l.tracktype ) EQ tolower( l.trackinglinks[ l.link_pos ]:type ) }">
				<MvASSIGN NAME = "l.ordershipment:tracktype" VALUE = "{ l.trackinglinks[ l.link_pos ]:type }">
				<MvWHILESTOP>
			</MvIF>

			<MvASSIGN NAME = "l.link_pos" VALUE = "{ l.link_pos + 1 }">
		</MvWHILE>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderShipment_Update_Status( l.original_ordershipment, l.ordershipment ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.ordershipment:order_id, l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_Status( l.order ) OR
					NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Order_Add_Item" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.orderitem_count" VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'order_id', l.order_id ) }">
		<MvFUNCTIONRETURN>
	</MvIF>	

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.order_id, l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order \'' $ l.order_id $ '\' not found'  ) }">
	</MvIF>
	
	<MvEVAL EXPR = "{ PRV_Order_Item( l.provide_xml, l.order, l.orderitems, l.orderitem_count ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_UT ].DigitalDownload_Process_OrderItems( l.orderitems, l.orderitem_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_UT ].GiftCertificateSales_Process_OrderItems( l.orderitems, l.orderitem_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_member_exists( l.provide_xml:tags, 'Shipment' ) }">
		<MvEVAL EXPR = "{ PRV_Provision_Store_Order_Create_Shipment( l.provide_xml, l.order, l.orderitems, l.orderitem_count ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Update_Total( l.order, [ g.Module_Library_DB ].Order_Total( l.order:id ) )	OR
					NOT [ g.Module_Library_DB ].Order_Update_Status( l.order )															OR
					NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Order_Update_Item" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Integer( l.provide_xml, 'order_id',	l.order_id ) OR
					NOT PRV_Attribute_Integer( l.provide_xml, 'line_id',	l.line_id ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItem_Load_Line( l.order_id, l.line_id, l.orderitem ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Line id \'' $ l.line_id $ '\' does not exist on order \'' $ l.order_id $ '\'' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.order_id, l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_orderoptions_count" VALUE = "{ [ g.Module_Library_DB ].OrderOptionList_Load_Line( l.line_id, l.original_orderoptions ) }">

	<MvIF EXPR = "{ NOT l.original_orderoptions_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.original_order"		VALUE = "{ l.order }">
	<MvASSIGN NAME = "l.original_orderitem" VALUE = "{ l.orderitem }">

	<MvIF EXPR = "{	NOT PRV_Tag_List(		'O', l.provide_xml, 'Status',	l.orderitem:status,
											'Pending,Picking,Shipped,Cancelled,Backordered,RMA Issued,Returned', 
											'000,100,200,300,400,500,600' )							OR
					NOT PRV_Tag_Code(		'O', l.provide_xml, 'Code',		l.orderitem:code ) 		OR
					NOT PRV_Tag_Text(		'O', l.provide_xml, 'Name',		l.orderitem:name ) 		OR
					NOT PRV_Tag_Price(		'O', l.provide_xml, 'Price',	l.orderitem:price )		OR
					NOT PRV_Tag_Weight(		'O', l.provide_xml, 'Weight',	l.orderitem:weight )	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml,	'Taxable',	l.orderitem:taxable )	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml,	'Upsold',	l.orderitem:upsold ) 	OR
					NOT PRV_Tag_Integer( 	'O', l.provide_xml, 'Quantity',	l.orderitem:quantity )	OR
					NOT PRV_Tag_Number( 	'O', l.provide_xml, 'Tax',		l.orderitem:tax, 10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.orderitem:quantity LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Quantity must be a positive integer' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].OrderItem_DetermineVariant_WithOptions( l.original_orderitem, l.original_orderoptions, l.original_orderoptions_count, l.original_product, l.original_variant_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Options' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].OrderItem_DetermineVariant_WithOptions( l.orderitem, l.original_orderoptions, l.original_orderoptions_count, l.product, l.variant_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderOption_Delete_All_Line( l.orderitem:line_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Library_DB ].Product_Load_Code_WithRuntimeInventory( l.orderitem:code, l.product ) }">
			<MvASSIGN NAME = "l.orderitem:product_id" 	VALUE = "{ l.product:id }">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvASSIGN NAME = "l.variant_id" 			VALUE = 0>
			<MvASSIGN NAME = "l.product:id"				VALUE = 0>
			<MvASSIGN NAME = "l.orderitem:product_id" 	VALUE = 0>
		</MvIF>
		
		<MvEVAL EXPR = "{ PRV_Order_Item_OptionList( l.provide_xml:tags:Options[ 1 ], l.order, l.orderitem ) }">

		<MvASSIGN NAME = "l.orderoption_count" VALUE = "{ [ g.Module_Library_DB ].OrderOptionList_Load_Line( l.line_id, l.orderoptions ) }">

		<MvIF EXPR = "{ l.product:id }">
			<MvASSIGN NAME = "l.product_attribute_count" VALUE = "{ [ g.Module_Library_DB ].AttributeList_Load_Product( l.product:id, l.product_attributes ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].OrderItem_DetermineVariant_LowLevel( l.product, l.product_attributes, l.product_attribute_count, l.orderoptions, l.orderoption_count, l.variant_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.original_orderitem:quantity NE l.orderitem:quantity }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItem_Update_Child_Quantity( l.orderitem, l.original_orderitem:quantity, l.orderitem:quantity ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_OrderItem_Update( l.original_orderitem, l.original_product, l.original_variant_id, l.orderitem, l.product, l.variant_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.updated_total" VALUE = "{ [ g.Module_Library_DB ].Order_Total( l.order_id ) }">

	<MvIF EXPR = "{ l.original_order:total NE l.updated_total }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Update_Total( l.original_order, l.updated_total ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ miva_member_exists( l.provide_xml:tags, 'Shipment' ) }">
		<MvEVAL EXPR = "{ PRV_Provision_Store_Order_Create_Shipment( l.provide_xml, l.order, l.orderitems, l.orderitem_count ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_Status( l.order ) OR
					NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Order_Delete_Item" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Integer( l.provide_xml, 'order_id',	l.order_id ) OR
					NOT PRV_Attribute_Integer( l.provide_xml, 'line_id',	l.line_id ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItem_Load_Line( l.order_id, l.line_id, l.orderitem ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Line id \'' $ l.line_id $ '\' does not exist on order \'' $ l.order_id $ '\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.orderitems" INDEX = 1 VALUE = "{ l.orderitem }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItemList_Delete_LookupVariants( 1, l.orderitems ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.order:id"		VALUE = "{ l.order_id }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Update_Total( l.order, [ g.Module_Library_DB ].Order_Total( l.order:id ) )	OR
					NOT [ g.Module_Library_DB ].Order_Update_Status( l.order )															OR
					NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Order_Add_Product" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.orderitem_count" VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'order_id', l.order_id ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.order_id, l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order \'' $ l.order_id $ '\' not found'  ) }">
	</MvIF>	
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_ID( l.order:cust_id, l.customer ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
	
	<MvEVAL EXPR = "{ PRV_Order_Product( l.provide_xml, l.order, l.customer, l.orderitems, l.orderitem_count ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_UT ].DigitalDownload_Process_OrderItems( l.orderitems, l.orderitem_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_UT ].GiftCertificateSales_Process_OrderItems( l.orderitems, l.orderitem_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_member_exists( l.provide_xml:tags, 'Shipment' ) }">
		<MvEVAL EXPR = "{ PRV_Provision_Store_Order_Create_Shipment( l.provide_xml, l.order, l.orderitems, l.orderitem_count ) }">
	</MvIF>

	<MvASSIGN NAME = "l.order_total" VALUE = "{ [ g.Module_Library_DB ].Order_Total( l.order:id ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].v56_Order_Update_Total( l.order, l.order_total )	OR
					NOT [ g.Module_Library_DB ].Order_Update_Status( l.order )						OR
					NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
	  <MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Provision_Store_Order_Create_Shipment" PARAMETERS = "provide_xml var, order var, orderitems var, orderitem_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.cost"					VALUE = 0.00>
	<MvASSIGN NAME = "l.status"					VALUE = 100>
	<MvASSIGN NAME = "l.ship_date"				VALUE = 0>
	
	<MvIF EXPR = "{ NOT PRV_Tag_Text(	'O',	l.provide_xml:tags:Shipment[ 1 ],	'Code',				l.code ) 		OR						
					NOT PRV_Tag_Text(	'O', 	l.provide_xml:tags:Shipment[ 1 ],	'TrackingNumber',	l.tracknum )	OR
					NOT PRV_Tag_Text(	'o', 	l.provide_xml:tags:Shipment[ 1 ],	'TrackingType',		l.tracktype ) 	OR
					NOT PRV_Tag_Number( 'O',	l.provide_xml:tags:Shipment[ 1 ],	'Cost',				l.cost, 10, 2 )	OR
					NOT PRV_Tag_Date( 			l.provide_xml:tags:Shipment[ 1 ],	'ShipDate', 		l.ship_date )	OR
					NOT PRV_Tag_List( 	'O', 	l.provide_xml:tags:Shipment[ 1 ], 	'MarkAsShipped', 	l.status, 'Shipped,shipped,Yes,yes,1', '200,200,200,200,200' ) }">
		<MvFUNCTIONRETURN>				
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Library_DB ].v57_OrderShipment_Load_Code( l.code, l.ordershipment ) }">			
		<MvIF EXPR = "{ l.order:id EQ l.ordershipment:order_id }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItemList_AddToShipment( l.ordershipment, l.orderitem_count, l.orderitems ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
			
			<MvFUNCTIONRETURN>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Shipment does not belong to this order' ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.ship_count"			VALUE = "{ [ g.Module_Library_DB ].v57_OrderShipmentList_Load_Order( l.order:id, l.ordershipments ) }">	
		
		<MvFOREACH ITERATOR = "l.ordershipment" ARRAY = "l.ordershipments">
			<MvIF EXPR = "{ ( l.ordershipment:tracknum EQ l.tracknum ) AND ( l.ordershipment:tracktype EQ l.tracktype ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItemList_AddToShipment( l.ordershipment, l.orderitem_count, l.orderitems ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
				
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvFOREACH>
		
		<MvASSIGN NAME = "l.shipment:code" 		VALUE = "{ l.code }">
		<MvASSIGN NAME = "l.shipment:tracknum" 	VALUE = "{ l.tracknum }">
		<MvASSIGN NAME = "l.shipment:tracktype" VALUE = "{ l.tracktype }">
		<MvASSIGN NAME = "l.shipment:cost" 		VALUE = "{ l.cost }">
		<MvASSIGN NAME = "l.shipment:ship_date" VALUE = "{ l.ship_date }">
		<MvASSIGN NAME = "l.shipment:status" 	VALUE = "{ l.status }">
						
		<MvEVAL EXPR = "{ PRV_Order_Create_Shipment( l.order, l.shipment, l.orderitems, l.orderitem_count, l.provide_xml ) }">
	</MvIF>	
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Order_Backorder_Items" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text(	l.provide_xml, 'order_id', l.order_id ) OR 
					NOT PRV_Tag_Exists(		l.provide_xml, 'ProductList' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.order_id, l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order \'' $ l.order_id $ '\' not found'  ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Backorder_ProductList( l.provide_xml:tags:ProductList[ 1 ], l.products, l.product_count ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ l.product_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One or more products must be specified' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" COUNT = "{ l.product_count }">
		<MvIF EXPR = "{ NOT ISNULL l.product:line_id }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItem_Load_Line( l.order_id, l.product:line_id, l.orderitem ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Line id \'' $ l.product:line_id $ '\' does not exist on order \'' $ l.order_id $ '\'' ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.orderitem:status NE 0 ) AND ( l.orderitem:status NE 100 ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Error processing line id \'' $ l.product:line_id $ '\' in order id \'' $ l.order_id $ '\'.  Line not available to backorder.' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.product:code }">
				<MvIF EXPR = "{ tolower( l.product:code ) NE tolower( l.orderitem:code ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product code \'' $ l.product:code $ '\' does not match with line id \'' $ l.product:line_id $ '\'' ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.product:quantity GT l.orderitem:quantity }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Quantity exceeds the quantity available with line id \'' $ l.product:line_id $ '\'' ) }">
			<MvELSEIF EXPR = "{ l.product:quantity EQ 0 OR l.product:quantity EQ l.orderitem:quantity }">
				<MvASSIGN NAME = "l.affected_item" 	VALUE = "{ l.orderitem }">
			<MvELSE>
				<MvASSIGN NAME = "l.affected_item"	VALUE = "{ PRV_OrderItem_Split( l.provide_xml, 
																										 l.order_id, 
																										 l.orderitem:line_id, 
																										 l.product:quantity ) }">
			</MvIF>

			<MvASSIGN NAME = "l.affected_count" 								VALUE = "{ l.affected_count + 1 }">
			<MvASSIGN NAME = "l.affected" INDEX = "{ l.affected_count }"		VALUE = "{ l.affected_item }">
			
			<MvASSIGN NAME = "l.instock_dates" INDEX = "{ l.affected_count }"	VALUE = "{ l.product:dt_instock }">
		<MvELSE>
			<MvASSIGN NAME = "l.quantity_marked"	VALUE = 0>
			<MvASSIGN NAME = "l.item_pos"			VALUE = 1>
			<MvASSIGN NAME = "l.item_count"			VALUE = "{ [ g.Module_Library_DB ].OrderItemList_Load_Order( l.order:id, l.orderitems ) }">
			<MvASSIGN NAME = "l.req_quantity"		VALUE = "{ l.product:quantity }">

			<MvWHILE EXPR = "{ ( l.item_pos LE l.item_count ) AND ( l.quantity_marked LT l.req_quantity ) }">
				<MvREFERENCEARRAY NAME = "l.orderitem" VARIABLE = "l.orderitems"> <MvDIMENSION INDEX = "{ l.item_pos }"> </MvREFERENCEARRAY>
				
				<MvIF EXPR = "{ l.orderitem:code EQ l.product:code AND
								(
									( l.orderitem:status EQ 0 )	OR
									( l.orderitem:status EQ 100 )
								) }">
					<MvIF EXPR = "{ l.orderitem:quantity GT ( l.req_quantity - l.quantity_taken ) }">
						<MvASSIGN NAME = "l.affected_item" VALUE = "{ PRV_OrderItem_Split( l.provide_xml, 
																												l.order_id, 
																												l.orderitem:line_id, 
																												( l.req_quantity - l.quantity_marked ) ) }">
					<MvELSE>
						<MvASSIGN NAME = "l.affected_item" VALUE = "{ l.orderitem }">
					</MvIF>

					<MvASSIGN NAME = "l.affected_count"									VALUE = "{ l.affected_count + 1 }">
					<MvASSIGN NAME = "l.affected" INDEX = "{ l.affected_count }" 		VALUE = "{ l.affected_item }">

					<MvASSIGN NAME = "l.instock_dates" INDEX = "{ l.affected_count }"	VALUE = "{ l.product:dt_instock }">
					<MvASSIGN NAME = "l.quantity_marked"								VALUE = "{ l.quantity_marked + l.affected[ l.affected_count ]:quantity }">
				</MvIF>

				<MvASSIGN NAME = "l.item_pos"		VALUE = "{ l.item_pos + 1 }">
			</MvWHILE>

			<MvIF EXPR = "{ l.quantity_marked NE l.req_quantity }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Error processing product code \'' $ l.product:code $ '\'.  Insufficient quantity of items.' ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderItemList_BackOrder_Dates( l.order_id, l.affected_count, l.affected, l.instock_dates ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_Status( l.order ) OR
					NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Order_CustomField" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'order_id',	l.order_id )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'module',	l.module_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'field',		l.field_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.order_id, l.order ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order #' $ l.order_id $ ' does not exist' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ PRV_Order_CustomField_Handler( l.provide_xml, l.module_code, l.order, l.field_code, l.provide_xml:value ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.order:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Report_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.report:display"		VALUE = 0>
	<MvASSIGN NAME = "l.report:rinterval"	VALUE = 60>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module', l.module_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R', l.provide_xml,	'Description',	l.report:descrip ) OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Display',		l.report:display ) OR
					NOT PRV_Tag_Integer(	'O', l.provide_xml, 'RunInterval',	l.report:rinterval ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module_code $ ' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module:code $ ' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:report }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'report\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Root $ l.module:module ].ReportModule_Capabilities( l.module, l.capabilities ) }">
	<MvIF EXPR = "{ NOT l.capabilities:provision_settings }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support report creation via provisioning' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.capabilities:date_range }">
		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Date_Range' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support specification of a date range' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.report:date_start"	VALUE = "ALL">
		<MvASSIGN NAME = "l.report:date_end"	VALUE = "ALL">
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Date_Range' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Date_Range' ) }">
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:Date_Range[ 1 ], 'All' ) }">
			<MvASSIGN NAME = "l.report:date_start"	VALUE = "ALL">
			<MvASSIGN NAME = "l.report:date_end"	VALUE = "ALL">
		<MvELSEIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:Date_Range[ 1 ], 'Last' ) }">
			<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:Date_Range[ 1 ]:tags:Last[ 1 ], 'days', l.report:date_start, '1,3,7,14,30,90,180,365', '0,-2,-6,-13,-29,-89,-179,-364' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.report:date_end"	VALUE = "NOW">
		<MvELSEIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:Date_Range[ 1 ], 'Start' ) AND
							PRV_Tag_Exists( l.provide_xml:tags:Date_Range[ 1 ], 'End' ) }">
			<MvIF EXPR = "{ NOT PRV_Tag_Date( l.provide_xml:tags:Date_Range[ 1 ], 'Start',	l.report:date_start )	OR
							NOT PRV_Tag_Date( l.provide_xml:tags:Date_Range[ 1 ], 'End',	l.report:date_end ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Date_Range[ 1 ], 'One of All, Last, or Start and End must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.capabilities:date_interval }">
		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Date_Group' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support date grouping' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_List( 'R', l.provide_xml, 'Date_Group', l.report:date_group, 'hour,day,week,month,year', 'H,D,W,M,Y' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( NOT l.capabilities:display ) AND l.report:display }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support main screen display' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreModule_Load( l.module:id, 'report', l.storemodule ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Increment_ReferenceCount( l.module:id, 'report' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Install_NoForcedRemoval( l.module, l.message ) }">
		<MvIF EXPR = "{ l.result EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ l.result EQ -2 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Insert_Feature_ReferenceCount( l.module, 'report', 1 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.report:id"			VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'Reports' ) }">

	<MvASSIGN NAME = "l.settings_xml"		VALUE = "{ l.provide_xml:tags:Settings[ 1 ] }">
	<MvASSIGN NAME = "l.settings_xml:name"	VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

	<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].ReportModule_Provision_Settings( l.module, l.report, l.settings_xml ) }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.module:id, 'report' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.report:module_id"	VALUE = "{ l.module:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_RPT_DB ].Report_Insert_LowLevel( l.report ) }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.module:id, 'report' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.report:display }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Trigger( 'dashboardreports' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Import_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module', l.module_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R', l.provide_xml,	'Description',	l.import:descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module_code $ ' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module:code $ ' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:import }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'import\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.module:api_ver LT 5.70 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support configuration via provisioning' ) }">
	</MvIF>
	
	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].ImportModule_Capabilities( l.module, l.capabilities ) }">

	<MvIF EXPR = "{ NOT l.capabilities:persistent_provision }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support configuration via provisioning' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.import:module_id"		VALUE = "{ l.module:id }">

	<MvIF EXPR = "{ l.capabilities:format NE 'delimited' }">
		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Delimiter' )		OR
						PRV_Tag_Exists( l.provide_xml, 'Delimiter_Other' )	OR
						PRV_Tag_Exists( l.provide_xml, 'Header' )			OR
						PRV_Tag_Exists( l.provide_xml, 'AutoMap' )			OR
						PRV_Tag_Exists( l.provide_xml, 'Map' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support delimited import' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.import:delim"		VALUE = "{ asciichar( 9 ) }">
		<MvASSIGN NAME = "l.import:header"		VALUE = 1>
		<MvASSIGN NAME = "l.import:automap"		VALUE = 1>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_List( 'R', l.provide_xml, 'Delimiter', l.import:delim, 'tab,comma,semicolon,space,other', 'tab,comma,;,space,other' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.import:delim EQ 'tab' }">				<MvASSIGN NAME = "l.import:delim" VALUE = "{ asciichar( 9 ) }">
		<MvELSEIF EXPR = "{ l.import:delim EQ 'comma' }">		<MvASSIGN NAME = "l.import:delim" VALUE = ",">
		<MvELSEIF EXPR = "{ l.import:delim EQ 'space' }">		<MvASSIGN NAME = "l.import:delim" VALUE = " ">
		<MvELSEIF EXPR = "{ l.import:delim EQ 'other' }">
			<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Delimiter_Other', l.import:delim ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.import:map"			VALUE = "">

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'AutoMap' ) }">
			<MvASSIGN NAME = "l.import:header"	VALUE = 1>
			<MvASSIGN NAME = "l.import:automap"	VALUE = 1>

			<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Map' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'AutoMap and Map may not be specified at the same time' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Map' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One of AutoMap or Map must be specified' ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.import:header"								VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Header' ) }">
			<MvASSIGN NAME = "l.import:automap"								VALUE = 0>
			<MvASSIGN NAME = "l.map_count"									VALUE = 0>
			<MvASSIGN NAME = "l.column_count"								VALUE = "{ [ g.Module_Root $ l.module:module ].ImportModule_Delimited_Columns( l.module, l.import, l.known_columns ) }">

			<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Map[ 1 ]:children">
				<MvIF EXPR = "{ tolower( l.child_xml:name ) NE 'field' }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unexpected tag ' $ l.child_xml:name ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'id', l.field_id ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvFOREACH ITERATOR = "l.mapped_field" ARRAY = "l.import:map" COUNT = "{ l.map_count }">
					<MvIF EXPR = "{ l.mapped_field EQ l.field_id }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Field \'' $ l.field_id $ '\' is mapped more than once' ) }">
					</MvIF>
				</MvFOREACH>

				<MvFOREACH ITERATOR = "l.column" ARRAY = "l.known_columns" COUNT = "{ l.column_count }">
					<MvIF EXPR = "{ l.column:field EQ l.field_id }">
						<MvFOREACHSTOP>
					</MvIF>
				</MvFOREACH>

				<MvIF EXPR = "{ l.column:field NE l.field_id }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Unknown field \'' $ l.field_id $ '\'' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.map_count"								VALUE = "{ l.map_count + 1 }">
				<MvASSIGN NAME = "l.import:map" INDEX = "{ l.map_count }"	VALUE = "{ l.field_id }">
			</MvFOREACH>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreModule_Load( l.module:id, 'import', l.storemodule ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Increment_ReferenceCount( l.module:id, 'import' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Install_NoForcedRemoval( l.module, l.message ) }">
		<MvIF EXPR = "{ l.result EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ l.result EQ -2 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Insert_Feature_ReferenceCount( l.module, 'import', 1 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.settings_xml"		VALUE = "{ l.provide_xml:tags:Settings[ 1 ] }">
	<MvASSIGN NAME = "l.settings_xml:name"	VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

	<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].ImportModule_Persistent_Provision( l.module, l.import, l.settings_xml ) }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.module:id, 'import' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].Import_Insert( l.import ) }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.module:id, 'import' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResource_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.is_global"	VALUE = 1>
	<MvASSIGN NAME = "l.active"		VALUE = 1>

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'R', l.provide_xml, 'Code',		l.code )																							OR
					NOT PRV_Tag_List(		'R', l.provide_xml, 'Type', 	l.type, 'CombinedResource,LocalFile,ExternalFile,InlineScript,Module,InlineModule', 'C,L,E,I,M,Y' )	OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Global', 	l.is_global )																						OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Active', 	l.active ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.existing_scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.existing_scriptresource:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Attributes' ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( l.type, l.attributes ) }">
	<MvELSEIF EXPR = "{ NOT PRV_Action_Provision_Store_JavaScriptResource_Attributes( l.provide_xml:tags:Attributes[ 1 ], l.attributes ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.type EQ 'L' OR l.type EQ 'E' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'File_Path', l.file ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'I' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'Template',	l.template ) OR
						NOT PRV_Tag_Text( 'O', l.provide_xml, 'Notes',		l.notes ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'M' OR l.type EQ 'Y' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module_Code', l.module_code ) OR
						NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module_Data', l.module_data ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:jsresource }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' does not implement the jsresource feature' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.type EQ 'C' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_Combined( l.code, l.attributes, l.is_global, l.active, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'I' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_InlineScript( l.code, l.attributes, l.is_global, l.active, l.template, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'L' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_LocalFile( l.code, l.attributes, l.is_global, l.active, l.file, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'E' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_ExternalFile( l.code, l.attributes, l.is_global, l.active, l.file, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'M' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_Module( l.code, l.attributes, l.is_global, l.active, l.module:code, l.module_data, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'Y' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_ModuleInline( l.code, l.attributes, l.is_global, l.active, l.module:code, l.module_data, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00011', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' inserted on branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResource_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_scriptresource" VALUE = "{ l.scriptresource }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'O', l.provide_xml, 'Code',		l.scriptresource:code )			OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Global', 	l.scriptresource:is_global )	OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Active', 	l.scriptresource:active ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.scriptresource:code, l.existing_scriptresource ) AND
					l.existing_scriptresource:id NE l.scriptresource:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource Code \'' $ l.existing_scriptresource:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Attributes' ) }">
		<MvIF EXPR = "{ NOT PRV_Action_Provision_Store_JavaScriptResource_Attributes( l.provide_xml:tags:Attributes[ 1 ], l.scriptresource:attributes ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( l.scriptresource:type EQ 'L' OR l.scriptresource:type EQ 'E' ) AND PRV_Tag_Exists( l.provide_xml, 'File_Path' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'File_Path', l.scriptresource:file ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'I' AND PRV_Tag_Exists( l.provide_xml, 'Template' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'Template',	l.template ) OR
						NOT PRV_Tag_Text( 'O', l.provide_xml, 'Notes',		l.notes ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_ID( l.scriptresource:templ_id, l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load template' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_ID( l.managedtemplate:current_id, l.managedtemplateversion ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Cannot load managed template id ' $ l.managedtemplate:current_id ) }">
		</MvIF>

		<MvIF EXPR = "{ crypto_md5( l.template ) NE crypto_md5( l.managedtemplateversion:source ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplateVersion( l.managedtemplate, l.notes, l.template, l.null_settings, l.compile_error ) }">
				<MvIF EXPR = "{ len_var( l.compile_error ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template compilation error: ' $ l.compile_error ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( l.scriptresource:type EQ 'M' OR l.scriptresource:type EQ 'Y' ) AND
					( PRV_Tag_Exists( l.provide_xml, 'Module_Code' ) OR PRV_Tag_Exists( l.provide_xml, 'Module_Data' ) ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module_Code', l.module_code ) OR
						NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module_Data', l.module_data ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:jsresource }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' does not implement the jsresource feature' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.scriptresource:mod_code" VALUE = "{ l.module:code }">
		<MvASSIGN NAME = "l.scriptresource:mod_data" VALUE = "{ l.module_data }">
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'L' AND l.original_scriptresource:file NE l.scriptresource:file }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Set_ResourceManagedContent_FromFile( l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Update( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00012', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' updated' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResource_Attributes" PARAMETERS = "provide_xml var, attributes var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attributes" VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'attribute' }">
			<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.child_xml, 'Name',		l.attribute:name ) OR
							NOT PRV_Tag_Text( 'o', l.child_xml, 'Value',	l.attribute:value ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.attribute_count" VALUE = "{ miva_array_insert( l.attributes, l.attribute, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResource_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource of type "Module (Managed)" cannot be deleted' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_JavaScriptResource( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00013', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResource_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_All_JavaScriptResource() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00014', 'All JavaScript Resources deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResourceXPage_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',		l.code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'page_code',	l.page_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.page_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page:admin }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An admin page cannot be assigned to a JavaScript resource' ) }">
	<MvELSEIF EXPR = "{ l.page:fragment }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A fragment page cannot be assigned to a JavaScript resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXPage_Load( l.scriptresource:id, l.page:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXPage_Insert( l.scriptresource:id, l.page:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00015', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' assigned to page \'' $ l.page:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResourceXPage_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',		l.code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'page_code',	l.page_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.page_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXPage_Load( l.scriptresource:id, l.page:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXPage_Delete( l.scriptresource:id, l.page:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00016', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' unassigned from page \'' $ l.page:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResourceXPage_Unassign_All_Resource" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResourceXPageList_Load_Resource( l.scriptresource:id, l.xrefs ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXPage_Delete( l.scriptresource:id, l.xref:page_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00017', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' unassigned from all pages' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResourceXGroup_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',			l.code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'group_code',	l.group_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.group_code, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group \'' $ l.group_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Load( l.scriptresource:id, l.resourcegroup:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Insert( l.scriptresource:id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00018', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' assigned to Resource Group \'' $ l.resourcegroup:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResourceXGroup_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',			l.code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'group_code',	l.group_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.group_code, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group \'' $ l.group_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Load( l.scriptresource:id, l.resourcegroup:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Delete( l.scriptresource:id, l.resourcegroup:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00019', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' unassigned from Resource Group \'' $ l.resourcegroup:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptResourceXGroup_Unassign_All_Group" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_code', l.group_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.group_code, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group \'' $ l.group_code $ '\' not found' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroupList_Load_Group( l.resourcegroup:id, l.xrefs ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Delete( l.xref:script_id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00020', 'Resource Group \'' $ l.resourcegroup:code $ '\' unassigned from all scripts' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptCombinedResourceXResource_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'combined_code',	l.combined_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'resource_code',	l.resource_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.combined_code, l.combinedresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Combined Resource \'' $ l.combined_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.combinedresource:type NE 'C' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.combinedresource:code $ '\' is not a combined resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.resource_code, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.resource_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Value_In_List( l.scriptresource:type, 'L,M,Z' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource must be of type "LocalFile", "Module", or "Module (Managed)" to be assigned to a combined resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptCombinedResourceXResource_Load( l.combinedresource:id, l.scriptresource:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptCombinedResourceXResource_Insert( l.combinedresource:id, l.scriptresource:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00061', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' assigned to Resource Group \'' $ l.combinedresource:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptCombinedResourceXResource_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'combined_code',	l.combined_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'resource_code',	l.resource_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.combined_code, l.combinedresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Combined Resource \'' $ l.combined_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.resource_code, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Resource \'' $ l.resource_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptCombinedResourceXResource_Load( l.combinedresource:id, l.scriptresource:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptCombinedResourceXResource_Delete( l.combinedresource:id, l.scriptresource:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00062', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' unassigned from Resource Group \'' $ l.combinedresource:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_JavaScriptCombinedResourceXResource_Unassign_All_CombinedResource" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'combined_code',	l.combined_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.combined_code, l.combinedresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'JavaScript Combined Resource \'' $ l.combined_code $ '\' not found' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].JavaScriptCombinedResourceXResourceList_Load_CombinedResource( l.combinedresource:id, l.xrefs ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptCombinedResourceXResource_Delete( l.combinedresource:id, l.xref:res_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00063', 'All JavaScript Resources unassigned from Combined Resource \'' $ l.combinedresource:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResource_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.is_global"	VALUE = 1>
	<MvASSIGN NAME = "l.active"		VALUE = 1>

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'R', l.provide_xml, 'Code',		l.code )																							OR
					NOT PRV_Tag_List(		'R', l.provide_xml, 'Type', 	l.type, 'CombinedResource,LocalFile,ExternalFile,InlineCSS,Module,InlineModule', 'C,L,E,I,M,Y' )	OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Global', 	l.is_global )																						OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Active', 	l.active ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.code, l.existing_cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.existing_cssresource:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Attributes' ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( l.type, l.attributes ) }">
	<MvELSEIF EXPR = "{ NOT PRV_Action_Provision_Store_CSSResource_Attributes( l.provide_xml:tags:Attributes[ 1 ], l.attributes ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.type EQ 'L' OR l.type EQ 'E' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'File_Path', l.file ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'I' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'Template',	l.template ) OR
						NOT PRV_Tag_Text( 'O', l.provide_xml, 'Notes',		l.notes ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'M' OR l.type EQ 'Y' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module_Code', l.module_code ) OR
						NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module_Data', l.module_data ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cssresource }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' does not implement the cssresource feature' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.type EQ 'C' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_Combined( l.code, l.attributes, l.is_global, l.active, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'I' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_InlineCSS( l.code, l.attributes, l.is_global, l.active, l.template, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'L' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_LocalFile( l.code, l.attributes, l.is_global, l.active, l.file, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'E' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_ExternalFile( l.code, l.attributes, l.is_global, l.active, l.file, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'M' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_Module( l.code, l.attributes, l.is_global, l.active, l.module:code, l.module_data, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'Y' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_ModuleInline( l.code, l.attributes, l.is_global, l.active, l.module:code, l.module_data, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00021', 'CSS Resource \'' $ l.cssresource:code $ '\' inserted on branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResource_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.code, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_cssresource" VALUE = "{ l.cssresource }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'O', l.provide_xml, 'Code',		l.cssresource:code )		OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Global', 	l.cssresource:is_global )	OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Active', 	l.cssresource:active ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.cssresource:code, l.existing_cssresource ) AND
					l.existing_cssresource:id NE l.cssresource:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource Code \'' $ l.existing_cssresource:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Attributes' ) }">
		<MvIF EXPR = "{ NOT PRV_Action_Provision_Store_CSSResource_Attributes( l.provide_xml:tags:Attributes[ 1 ], l.cssresource:attributes ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( l.cssresource:type EQ 'L' OR l.cssresource:type EQ 'E' ) AND PRV_Tag_Exists( l.provide_xml, 'File_Path' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'File_Path', l.cssresource:file ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'I' AND PRV_Tag_Exists( l.provide_xml, 'Template' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'Template',	l.template ) OR
						NOT PRV_Tag_Text( 'O', l.provide_xml, 'Notes',		l.notes ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_ID( l.cssresource:templ_id, l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to load template' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_ID( l.managedtemplate:current_id, l.managedtemplateversion ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Cannot load managed template id ' $ l.managedtemplate:current_id ) }">
		</MvIF>

		<MvIF EXPR = "{ crypto_md5( l.template ) NE crypto_md5( l.managedtemplateversion:source ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplateVersion( l.managedtemplate, l.notes, l.template, l.null_settings, l.compile_error ) }">
				<MvIF EXPR = "{ len_var( l.compile_error ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Template compilation error: ' $ l.compile_error ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( l.cssresource:type EQ 'M' OR l.cssresource:type EQ 'Y' ) AND
					( PRV_Tag_Exists( l.provide_xml, 'Module_Code' ) OR PRV_Tag_Exists( l.provide_xml, 'Module_Data' ) ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module_Code', l.module_code ) OR
						NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module_Data', l.module_data ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cssresource }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' does not implement the cssresource feature' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.cssresource:mod_code" VALUE = "{ l.module:code }">
		<MvASSIGN NAME = "l.cssresource:mod_data" VALUE = "{ l.module_data }">
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'L' AND l.original_cssresource:file NE l.cssresource:file }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Set_ResourceManagedContent_FromFile( l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Update( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00022', 'CSS Resource \'' $ l.cssresource:code $ '\' updated' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResource_Attributes" PARAMETERS = "provide_xml var, attributes var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attributes" VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'attribute' }">
			<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.child_xml, 'Name',		l.attribute:name ) OR
							NOT PRV_Tag_Text( 'o', l.child_xml, 'Value',	l.attribute:value ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.attribute_count" VALUE = "{ miva_array_insert( l.attributes, l.attribute, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResource_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.code, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'Z' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource of type "Module (Managed)" cannot be deleted' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_CSSResource( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00023', 'CSS Resource \'' $ l.cssresource:code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResource_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_All_CSSResource() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00024', 'All CSS Resources deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResourceXPage_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',		l.code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'page_code',	l.page_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.code, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.page_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page:admin }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An admin page cannot be assigned to a CSS resource' ) }">
	<MvELSEIF EXPR = "{ l.page:fragment }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A fragment page cannot be assigned to a CSS resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXPage_Load( l.cssresource:id, l.page:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXPage_Insert( l.cssresource:id, l.page:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00025', 'CSS Resource \'' $ l.cssresource:code $ '\' assigned to page \'' $ l.page:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResourceXPage_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',		l.code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'page_code',	l.page_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.code, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.page_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXPage_Load( l.cssresource:id, l.page:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXPage_Delete( l.cssresource:id, l.page:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00026', 'CSS Resource \'' $ l.cssresource:code $ '\' unassigned from page \'' $ l.page:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResourceXPage_Unassign_All_Resource" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.code, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].CSSResourceXPageList_Load_Resource( l.cssresource:id, l.xrefs ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXPage_Delete( l.cssresource:id, l.xref:page_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00027', 'CSS Resource \'' $ l.cssresource:code $ '\' unassigned from all pages' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResourceXGroup_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',			l.code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'group_code',	l.group_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.code, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.group_code, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group \'' $ l.group_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Load( l.cssresource:id, l.resourcegroup:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Insert( l.cssresource:id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00028', 'CSS Resource \'' $ l.cssresource:code $ '\' assigned to Resource Group \'' $ l.resourcegroup:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResourceXGroup_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',			l.code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'group_code',	l.group_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.code, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.group_code, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group \'' $ l.group_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Load( l.cssresource:id, l.resourcegroup:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Delete( l.cssresource:id, l.resourcegroup:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00029', 'CSS Resource \'' $ l.cssresource:code $ '\' unassigned from Resource Group \'' $ l.resourcegroup:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSResourceXGroup_Unassign_All_Group" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_code', l.group_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.group_code, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group \'' $ l.group_code $ '\' not found' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].CSSResourceXGroupList_Load_Group( l.resourcegroup:id, l.xrefs ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Delete( l.xref:css_id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00030', 'Resource Group \'' $ l.resourcegroup:code $ '\' unassigned from all styles' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSCombinedResourceXResource_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'combined_code',	l.combined_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'resource_code',	l.resource_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.combined_code, l.combinedresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Combined Resource \'' $ l.combined_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.combinedresource:type NE 'C' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.combinedresource:code $ '\' is not a combined resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.resource_code, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.resource_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Value_In_List( l.cssresource:type, 'L,M,Z' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource must be of type "LocalFile", "Module", or "Module (Managed)" to be assigned to a combined resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSCombinedResourceXResource_Load( l.combinedresource:id, l.cssresource:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSCombinedResourceXResource_Insert( l.combinedresource:id, l.cssresource:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00064', 'CSS Resource \'' $ l.cssresource:code $ '\' assigned to Resource Group \'' $ l.combinedresource:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSCombinedResourceXResource_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'combined_code',	l.combined_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'resource_code',	l.resource_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.combined_code, l.combinedresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Combined Resource \'' $ l.combined_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.resource_code, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Resource \'' $ l.resource_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSCombinedResourceXResource_Load( l.combinedresource:id, l.cssresource:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSCombinedResourceXResource_Delete( l.combinedresource:id, l.cssresource:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00065', 'CSS Resource \'' $ l.cssresource:code $ '\' unassigned from Resource Group \'' $ l.combinedresource:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CSSCombinedResourceXResource_Unassign_All_CombinedResource" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'combined_code',	l.combined_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.combined_code, l.combinedresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CSS Combined Resource \'' $ l.combined_code $ '\' not found' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].CSSCombinedResourceXResourceList_Load_CombinedResource( l.combinedresource:id, l.xrefs ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSCombinedResourceXResource_Delete( l.combinedresource:id, l.xref:res_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00066', 'All CSS Resources unassigned from Combined Resource \'' $ l.combinedresource:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ResourceGroup_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Code( 'R', l.provide_xml, 'Code', l.resourcegroup:code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.resourcegroup:code, l.null_existing ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group \'' $ l.resourcegroup:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Insert( l.resourcegroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00031', 'Resource Group \'' $ l.resourcegroup:code $ '\' inserted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ResourceGroup_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.code, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'Code', l.resourcegroup:code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.resourcegroup:code ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
	<MvELSEIF EXPR = "{ tolower( l.code ) NE tolower( l.resourcegroup:code ) }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.resourcegroup:code, l.null_existing ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group Code \'' $ l.resourcegroup:code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Update( l.resourcegroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00032', 'Resource Group \'' $ l.resourcegroup:code $ '\' updated' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ResourceGroup_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.code, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Resource Group \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| If the store has only one branch, delete the resoure group.  Otherwise, unassign all JavaScript and CSS resources
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Branch_Count( l.branch_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ l.branch_count LE 1 }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Delete( l.resourcegroup ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00033', 'Resource Group \'' $ l.resourcegroup:code $ '\' deleted' ) }">
	<MvELSE>
		<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].CSSResourceXGroupList_Load_Group( l.resourcegroup:id, l.xrefs ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Delete( l.xref:css_id, l.resourcegroup:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroupList_Load_Group( l.resourcegroup:id, l.xrefs ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Delete( l.xref:script_id, l.resourcegroup:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvFOREACH>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00082', 'All resources unassigned from resource group \'' $ l.resourcegroup:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ResourceGroup_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| If the store has only one branch, we delete all resource groups.  Otherwise, existing resource groups
	| are not deleted.  Instead, all assigned resources are removed (for this branch)
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Branch_Count( l.branch_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ l.branch_count LE 1 }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Delete_All() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00034', 'All Resource Groups deleted' ) }">
	<MvELSE>
		<MvFOREACH ITERATOR = "l.resourcegroup" ARRAY = "l.resourcegroups" COUNT = "{ [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_All( l.resourcegroups ) }">
			<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].CSSResourceXGroupList_Load_Group( l.resourcegroup:id, l.xrefs ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Delete( l.xref:css_id, l.resourcegroup:id ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.xref" ARRAY = "l.xrefs" COUNT = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroupList_Load_Group( l.resourcegroup:id, l.xrefs ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Delete( l.xref:script_id, l.resourcegroup:id ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			</MvFOREACH>
		</MvFOREACH>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00079', 'All Resource Groups deactivated for branch \'' $ g.Store:branch:name $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Font_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.font"				VALUE = "">
	<MvASSIGN NAME = "l.font:active"		VALUE = 1>
	<MvASSIGN NAME = "l.font:type"			VALUE = "standard">
	<MvASSIGN NAME = "l.font:weights"		VALUE = "">
	<MvASSIGN NAME = "l.font:weights:400"	VALUE = 1>
	<MvASSIGN NAME = "l.font:styles"		VALUE = "">
	<MvASSIGN NAME = "l.font:styles:normal"	VALUE = 1>

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'R',		l.provide_xml, 'Code',		l.font:code )										OR
					NOT PRV_Tag_Text(		'R:100',	l.provide_xml, 'Name',		l.font:name )										OR
					NOT PRV_Tag_Text(		'R',		l.provide_xml, 'Family',	l.font:family )										OR
					NOT PRV_Tag_List(		'O',		l.provide_xml, 'Type',		l.font:type, 'Standard,Google', 'standard,google' )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Active',	l.font:active ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Font_Load_Code( l.font:code, l.existing_font ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Font \'' $ l.existing_font:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.font:type EQ 'google' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'GoogleFontName', l.font:google_font_name ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'Embed', l.font:embed ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Weights' ) }">
		<MvASSIGN NAME = "l.font:weights" VALUE = "">

		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Weights[ 1 ]:children">
			<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

			<MvIF EXPR = "{ l.name NE 'weight' }">
				<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Attribute_List( l.child_xml, 'value', l.font_weight, '100,200,300,400,500,600,700,800,900', '100,200,300,400,500,600,700,800,900' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGNARRAY NAME = "l.font:weights" VALUE = 1>
				<MvMEMBER NAME = "{ l.font_weight }">
			</MvASSIGNARRAY>
		</MvFOREACH>

		<MvIF EXPR = "{ NOT l.font:weights:100 AND
						NOT l.font:weights:200 AND
						NOT l.font:weights:300 AND
						NOT l.font:weights:400 AND
						NOT l.font:weights:500 AND
						NOT l.font:weights:600 AND
						NOT l.font:weights:700 AND
						NOT l.font:weights:800 AND
						NOT l.font:weights:900 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'At least one font weight must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Styles' ) }">
		<MvASSIGN NAME = "l.font:styles" VALUE = "">

		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Styles[ 1 ]:children">
			<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

			<MvIF EXPR = "{ l.name NE 'style' }">
				<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Attribute_List( l.child_xml, 'value', l.font_style, 'normal,italic', 'normal,italic' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGNARRAY NAME = "l.font:styles" VALUE = 1>
				<MvMEMBER NAME = "{ l.font_style }">
			</MvASSIGNARRAY>
		</MvFOREACH>

		<MvIF EXPR = "{ NOT l.font:styles:normal AND
						NOT l.font:styles:italic }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'At least one font style must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Font_Insert( l.font ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00142', 'Font \'' $ l.font:code $ '\' inserted on branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Font_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Font_Load_Code( l.code, l.font ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Font \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Font_Delete( l.font ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00143', 'Font \'' $ l.font:code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Font_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.font" ARRAY = "l.fonts" COUNT = "{ [ g.Module_Feature_TUI_DB ].FontList_Load_All( l.fonts ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Font_Delete( l.font ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00144', 'All fonts deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Image_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'filepath', l.filepath ) }"> 
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.filepath }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'File path cannot be blank' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.provide_xml, 'encoding' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_FindOrInsert_ExistingFile( l.filepath, l.image ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Attribute_List(	l.provide_xml, 'encoding', l.null, 'base64', 'base64' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.file_content" VALUE = "{ crypto_base64_decode( trim( l.provide_xml:value ) ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_FindOrInsert_CreateFile( l.filepath, l.file_content, l.image ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Image_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'filepath', l.filepath ) }"> 
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_File( l.filepath, l.image ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Image record for \'' $ l.filepath $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Delete( l.image:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ImageType_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Code( 'R', l.provide_xml, 'Code',			l.imagetype:code )		OR
					NOT PRV_Tag_Text( 'R', l.provide_xml, 'Description',	l.imagetype:descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].ImageType_Load_Code( l.imagetype:code, l.imagetype ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An image type with the code \'' $ l.imagetype:code $ '\' already exists' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Insert( l.imagetype ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ImageType_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text(	l.provide_xml, 'code',			l.orig_code )	OR
					NOT PRV_Tag_Code( 'O',	l.provide_xml, 'Code',			l.new_code )	OR
					NOT PRV_Tag_Text( 'O',	l.provide_xml, 'Description',	l.new_descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Load_Code( l.orig_code, l.imagetype ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Image type \'' $ l.orig_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.new_code }">
		<MvIF EXPR = "{ l.new_code NE l.orig_code }">
			<MvIF EXPR = "{ [ g.Module_Library_DB ].ImageType_Load_Code( l.new_code, l.existing_imagetype ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'An image type with the code \'' $ l.new_code $ '\' already exists' ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.imagetype:code"		VALUE = "{ l.new_code }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.new_descrip }">
		<MvASSIGN NAME = "l.imagetype:descrip"	VALUE = "{ l.new_descrip }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Update( l.imagetype ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ImageType_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Load_Code( l.code, l.imagetype ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Image type record for \'' $ l.code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Delete( l.imagetype:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductImage_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',		l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'filepath',			l.filepath )		OR
					NOT PRV_Attribute_Text( l.provide_xml, 'imagetype_code',	l.imagetype_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.imagetype_code }">
		<MvASSIGN NAME = "l.imagetype:id"	VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Load_Code( l.imagetype_code, l.imagetype ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Image Type \'' $ l.imagetype_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductImage_Insert_ExistingFile( l.product:id, l.filepath, l.imagetype:id, l.productimage ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductImage_Delete_File" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'filepath',		l.filepath ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.productimage" ARRAY = "l.productimages" COUNT = "{ [ g.Module_Library_DB ].ProductImageList_Load_File( l.product:id, l.filepath, l.productimages ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductImage_Delete( l.productimage ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductImage_Delete_Type" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',		l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'imagetype_code',	l.imagetype_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Load_Code( l.imagetype_code, l.imagetype ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Image Type \'' $ l.imagetype_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductImage_Load_Type( l.product:id, l.imagetype:id, l.productimage ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product image for product \'' $ l.product_code $ '\' of type \'' $ l.imagetype_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductImage_Delete( l.productimage ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductImage_Delete_All_Product" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code', l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductImage_Delete_All_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to delete product image for \'' $ l.product_code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductImage_Replace_Type" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',		l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'filepath',			l.filepath )		OR
					NOT PRV_Attribute_Text( l.provide_xml, 'imagetype_code',	l.imagetype_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Load_Code( l.imagetype_code, l.imagetype ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Image Type \'' $ l.imagetype_code $ '\' not found' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductImage_Replace_Type_ExistingFile( l.product:id, l.filepath, l.imagetype:id, l.productimage ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ShippingRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingRules_Load( l.shippingrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'O', l.provide_xml,	'RequiredShippingRedirectPageCode',			l.req_page )					OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'ValidateCheckoutAddresses',				l.shippingrules:aval_ordr )		OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'ValidateCustomerAddresses',				l.shippingrules:aval_cust )		OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'SubscriptionIgnoreRestrictions',			l.shippingrules:subignruls )	OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'SubscriptionUpdateWithReplacementMethod',	l.shippingrules:subfbupd ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'AddressValidation' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ShippingRules_AddressValidation( l.provide_xml:tags:AddressValidation[ 1 ] ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'SubscriptionInvalidMethodHandling' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_List( 'O', l.provide_xml, 'SubscriptionInvalidMethodHandling', l.shippingrules:subfb,
															  'Error,Priority,Price,Specific,Fallback',
															  'error,priority,price,specific,fallback' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.shippingrules:subfb EQ 'specific' }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml:tags:SubscriptionInvalidMethodHandling[ 1 ], 'module_code', l.shippingrules:subfbmod ) OR
							NOT PRV_Attribute_Text( l.provide_xml:tags:SubscriptionInvalidMethodHandling[ 1 ], 'method_code', l.shippingrules:subfbmeth ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.shippingrules:subfbmod, l.module ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module not found' ) }">
			<MvELSEIF EXPR = "{ NOT l.module:active }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
			<MvELSEIF EXPR = "{ NOT l.module:feature_hash:shipping }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not implement the \'shipping\' feature' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.req_page }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.req_page, l.page ) }">
			<MvIF EXPR = "{ l.page:admin }">													<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.req_page $ '\' is an admin page and cannot be viewed from the shopping interface' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSE>																				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.req_page $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.shippingrules:req_page"	VALUE = "{ l.req_page }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'FallbackShippingMethod' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'o', l.provide_xml:tags:FallbackShippingMethod[ 1 ],	'ExcludePOBoxes',	l.shippingrules:fb_excldpo )	OR
						NOT PRV_Tag_Text(		'O', l.provide_xml:tags:FallbackShippingMethod[ 1 ],	'Description',		l.shippingrules:fb_descrip )	OR
						NOT PRV_Tag_List(		'O', l.provide_xml:tags:FallbackShippingMethod[ 1 ],	'Type',				l.shippingrules:fb_type,
																										'Fixed,PercentOfSubtotal',
																										'fixed,percent' )									OR
						NOT PRV_Tag_Number(		'o', l.provide_xml:tags:FallbackShippingMethod[ 1 ],	'Amount',			l.shippingrules:fb_amount, 10, 2 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingRules_Update( l.shippingrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ShippingRules_AddressValidation" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml, 'type', l.addrval_type,	'none,module',	'none,module' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.addrval_type EQ 'none' }">
		<MvASSIGN NAME = "g.Store:addrval_id" VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_ShippingRules( g.Store ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.addrval_type EQ 'module' }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module_code', l.module_code ) }">
			<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.addrval_module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.addrval_module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.addrval_module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ NOT l.addrval_module:feature_hash:addrval }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' does not implement the addrval feature' ) }">
		</MvIF>

		<MvASSIGN NAME = "g.Store:addrval_id" VALUE ="{ l.addrval_module:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_ShippingRules( g.Store ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_HandlingCharge_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].HandlingCharge_Load( l.handlingcharge ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_List(		'O', l.provide_xml,	'TriggerType',								l.handlingcharge:type,
																'Disabled,Always,SubTotal,Quantity,Weight',
																'disabled,always,subtotal,quantity,weight' )												OR
					NOT PRV_Tag_Number(		'o', l.provide_xml,	'TriggerMinimumValue',						l.handlingcharge:min_value,	10, 2 )				OR
					NOT PRV_Tag_Number(		'o', l.provide_xml,	'TriggerMaximumValue',						l.handlingcharge:max_value, 10, 2 )				OR
					NOT PRV_Tag_List(		'O', l.provide_xml,	'AmountType',								l.handlingcharge:amt_type,
																'Fixed,PercentOfShipping,PercentOfSubTotal',
																'fixed,pctship,pctsubtotal' )																OR
					NOT PRV_Tag_Number(		'o', l.provide_xml,	'Amount',									l.handlingcharge:amount,	10, 2 )				OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml,	'SeparateLineItem',							l.handlingcharge:separate )						OR
					NOT PRV_Tag_Text(		'O', l.provide_xml,	'Description',								l.handlingcharge:descrip )						OR	
					NOT PRV_Tag_Boolean(	'O', l.provide_xml,	'TaxExempt',								l.handlingcharge:tax_exempt ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ( l.handlingcharge:max_value NE 0 ) AND ( l.handlingcharge:max_value LT l.handlingcharge:min_value ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a TriggerMaximumValue that is higher than TriggerMinimumValue, or 0' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].HandlingCharge_Update( l.handlingcharge ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PaymentRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentRules_Load( l.paymentrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'O', l.provide_xml, 'RequiredPaymentRedirectPageCode',	l.req_page )				OR
					NOT PRV_Tag_Integer( 	'o', l.provide_xml,	'FailedAuthorizationDelay',			l.paymentrules:auth_delay )	OR
					NOT PRV_Tag_Integer( 	'o', l.provide_xml, 'MaxFailedAuthorizations',			l.paymentrules:max_fails )	OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'UseAuthorizationToken',			l.paymentrules:use_token ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.req_page }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.req_page, l.page ) }">
			<MvIF EXPR = "{ l.page:admin }">													<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.req_page $ '\' is an admin page and cannot be viewed from the shopping interface' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSE>																				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Page \'' $ l.req_page $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.paymentrules:req_page"	VALUE = "{ l.req_page }">
	</MvIF>

	<MvIF EXPR = "{ l.paymentrules:auth_delay LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Failed authorization delay may not be a negative value' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.paymentrules:max_fails LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Maximum failed authorization attempts may not be a negative value' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists(	l.provide_xml, 'AuthorizationBlacklist' ) }">
		<MvREFERENCE NAME = "l.authorizationblacklist_tag" VARIABLE = "l.provide_xml:tags:AuthorizationBlacklist[ 1 ]">

		<MvIF EXPR = "{ NOT PRV_Tag_List(		'O', l.authorizationblacklist_tag, 'Mode',				l.paymentrules:bl_auto,	'automatic,manual', '1,0' ) OR
						NOT PRV_Tag_Integer(	'O', l.authorizationblacklist_tag, 'ThresholdFailures',	l.failures )										OR
						NOT PRV_Tag_Integer(	'O', l.authorizationblacklist_tag, 'ThresholdMinutes',	l.threshold )										OR
						NOT PRV_Tag_Integer(	'O', l.authorizationblacklist_tag, 'Duration',			l.duration ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.failures }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.failures ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.authorizationblacklist_tag, 'Invalid value for ThresholdFailures: ' $ g.Validation_Message ) }">
			<MvELSEIF EXPR = "{ l.failures LE 1 }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.authorizationblacklist_tag, 'Invalid value for ThresholdFailures: Value must be greater than 1' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.paymentrules:bl_fails" VALUE = "{ l.failures }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.threshold }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.threshold ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.authorizationblacklist_tag, 'Invalid value for ThresholdMinutes: ' $ g.Validation_Message ) }">
			</MvIF>
			
			<MvASSIGN NAME = "l.paymentrules:bl_time" VALUE = "{ [ g.Module_Feature_PAY_UT ].Payment_BuildSeconds( l.threshold, 'm' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.duration }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.duration ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.authorizationblacklist_tag, 'Invalid value for Duration: ' $ g.Validation_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Attribute_List( l.authorizationblacklist_tag:tags:Duration[ 1 ], 'units', l.unit, 'minutes,hours,days', 'm,h,d' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.paymentrules:bl_dur" VALUE = "{ [ g.Module_Feature_PAY_UT ].Payment_BuildSeconds( l.duration, l.unit ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'reCAPTCHA' ) }">
		<MvREFERENCE NAME = "l.recaptcha_tag" VARIABLE = "l.provide_xml:tags:reCAPTCHA[ 1 ]">

		<MvIF EXPR = "{ NOT PRV_Tag_List(		'O', l.recaptcha_tag, 'Mode',				l.paymentrules:rc_mode,		'off,on,velocity',	'off,on,auto' )		OR
						NOT PRV_Tag_List(		'O', l.recaptcha_tag, 'Theme',				l.paymentrules:rc_theme,	'light,dark', 		'light,dark' )		OR
						NOT PRV_Tag_List(		'O', l.recaptcha_tag, 'Type',				l.paymentrules:rc_type,		'audio,image',		'audio,image' )		OR
						NOT PRV_Tag_List(		'O', l.recaptcha_tag, 'Size',				l.paymentrules:rc_size,		'compact,normal',	'compact,normal' )	OR
						NOT PRV_Tag_Text(		'O', l.recaptcha_tag, 'Language',			l.language )														OR
						NOT PRV_Tag_Text(		'O', l.recaptcha_tag, 'PublicKey',			l.paymentrules:rc_pub_key )											OR
						NOT PRV_Tag_Text(		'O', l.recaptcha_tag, 'PrivateKey', 		l.private_key )														OR
						NOT PRV_Tag_Integer(	'O', l.recaptcha_tag, 'FailedAttempts', 	l.failed_attempts )													OR
						NOT PRV_Tag_Integer(	'O', l.recaptcha_tag, 'Threshold',			l.threshold )														OR
						NOT PRV_Tag_Boolean(	'O', l.recaptcha_tag, 'IgnoreFreeOrders',	l.paymentrules:rc_ignzero )	 }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.language }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_PAY_UT ].Payment_reCAPTCHA_Languages( l.languages ) }">
			
			<MvIF EXPR = "{ NOT miva_array_search( l.languages, 1, l.element, 'l.element:name EQ l.language' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.recaptcha_tag, 'Invalid value for Language' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.paymentrules:rc_lang" VALUE = "{ l.element:code }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.private_key }">
			<MvASSIGN NAME = "l.paymentrules:rc_prv_key" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.private_key ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.failed_attempts }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.failed_attempts ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.recaptcha_tag, 'Invalid value for FailedAttempts: ' $ g.Validation_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.paymentrules:rc_qty" VALUE = "{ l.failed_attempts }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.threshold }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.threshold, 1, 24 ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.recaptcha_tag, 'Invalid value for Threshold: ' $ g.Validation_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.paymentrules:rc_thresh" VALUE = "{ 60 * 60 * l.threshold }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentRules_Update( l.paymentrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PaymentMethodRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module_code"	VALUE = "">
	<MvASSIGN NAME = "l.method_code"	VALUE = "">
	<MvASSIGN NAME = "l.pctype_id" 		VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.provide_xml, 'paymentcard_type' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module_code',		l.module_code ) OR
						NOT PRV_Attribute_Text( l.provide_xml, 'method_code',		l.method_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:payment }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' does not implement the payment feature' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Load_Cached( l.mivapay_settings ) OR NOT l.mivapay_settings:enabled }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment Card Types are not available when MivaPay is disabled.  Please enable MivaPay and try again.' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'paymentcard_type',	l.pctype ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.pctype, l.paymentcardtype ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment Card Type not found' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.pctype_id" VALUE = "{ l.paymentcardtype:id }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Load_MethodOrDefault_Cached( l.module_code, l.method_code, l.pctype_id, l.paymentmethodrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Integer( 	'o', l.provide_xml,	'Priority',			l.paymentmethodrules:priority )			OR
					NOT PRV_Tag_Text(		'O', l.provide_xml, 'Description',		l.paymentmethodrules:descrip )			OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'MinimumTotal',		l.paymentmethodrules:min_total,	10, 2 )	OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'MaximumTotal',		l.paymentmethodrules:max_total,	10, 2 )	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'DisablereCAPTCHA', l.paymentmethodrules:disable_rc )		OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ZipCodes',			l.paymentmethodrules:zips )				OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'ExcludeByDefault', l.paymentmethodrules:exclude_df ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ( l.paymentmethodrules:max_total NE 0 ) AND ( l.paymentmethodrules:max_total LT l.paymentmethodrules:min_total ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a MaximumTotal that is higher than MinimumTotal, or 0' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'States' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PaymentMethodRules_States( l.provide_xml:tags:States[ 1 ], l.paymentmethodrules ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Countries' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PaymentMethodRules_Countries( l.provide_xml:tags:Countries[ 1 ], l.paymentmethodrules ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Insert( l.paymentmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Update( l.paymentmethodrules ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Exclusions' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PaymentMethodRules_Exclusions( l.provide_xml:tags:Exclusions[ 1 ], l.module_code, l.method_code, l.pctype_id ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PaymentMethodRules_States" PARAMETERS = "provide_xml var, paymentmethodrules var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.paymentmethodrules:states" VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'state' }">
			<MvIF EXPR = "{ PRV_Attribute_Text( l.child_xml, 'code', l.state ) }">
				<MvASSIGN NAME = "l.paymentmethodrules:states" MEMBER = "{ l.state }" VALUE = 1>
			</MvIF>
		<MvELSE>
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PaymentMethodRules_Countries" PARAMETERS = "provide_xml var, paymentmethodrules var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.paymentmethodrules:countries" VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'country' }">
			<MvIF EXPR = "{ PRV_Attribute_Text( l.child_xml, 'code', l.country ) }">
				<MvASSIGN NAME = "l.paymentmethodrules:countries" MEMBER = "{ l.country }" VALUE = 1>
			</MvIF>
		<MvELSE>
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PaymentMethodRules_Exclusions" PARAMETERS = "provide_xml var, module_code, method_code, pctype_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Delete_Method( l.module_code, l.method_code, l.pctype_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name"	VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'excludedby' }">
			<MvASSIGN NAME = "l.paymentmethodexclusion:excludedmo"		VALUE = "{ l.module_code }">
			<MvASSIGN NAME = "l.paymentmethodexclusion:excludedme"		VALUE = "{ l.method_code }">
			<MvASSIGN NAME = "l.paymentmethodexclusion:excludedti"		VALUE = "{ l.pctype_id }">

			<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.child_xml, 'paymentcard_type' ) }">
				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'module_code',	l.paymentmethodexclusion:excludermo ) OR
								NOT PRV_Attribute_Text( l.child_xml, 'method_code',	l.paymentmethodexclusion:excluderme ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.paymentmethodexclusion:excluderti"	VALUE = 0>
			<MvELSE>
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Load_Cached( l.mivapay_settings ) OR NOT l.mivapay_settings:enabled }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Payment Card Types are not available when MivaPay is disabled.  Please enable MivaPay and try again.' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'paymentcard_type', l.pctype ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.pctype, l.paymentcardtype ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Payment Card Type not found' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.paymentmethodexclusion:excludermo"	VALUE = "">
				<MvASSIGN NAME = "l.paymentmethodexclusion:excluderme"	VALUE = "">
				<MvASSIGN NAME = "l.paymentmethodexclusion:excluderti"	VALUE = "{ l.paymentcardtype:id }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.name EQ 'excludes' }">
			<MvASSIGN NAME = "l.paymentmethodexclusion:excludermo"		VALUE = "{ l.module_code }">
			<MvASSIGN NAME = "l.paymentmethodexclusion:excluderme"		VALUE = "{ l.method_code }">
			<MvASSIGN NAME = "l.paymentmethodexclusion:excluderti"		VALUE = "{ l.pctype_id }">

			<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.child_xml, 'paymentcard_type' ) }">
				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'module_code',	l.paymentmethodexclusion:excludedmo ) OR
								NOT PRV_Attribute_Text( l.child_xml, 'method_code',	l.paymentmethodexclusion:excludedme ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.paymentmethodexclusion:excludedti"	VALUE = 0>
			<MvELSE>
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Load_Cached( l.mivapay_settings ) OR NOT l.mivapay_settings:enabled }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Payment Card Types are not available when MivaPay is disabled.  Please enable MivaPay and try again.' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'paymentcard_type', l.pctype ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.pctype, l.paymentcardtype ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Payment Card Type not found' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.paymentmethodexclusion:excludedmo"	VALUE = "">
				<MvASSIGN NAME = "l.paymentmethodexclusion:excludedme"	VALUE = "">
				<MvASSIGN NAME = "l.paymentmethodexclusion:excludedti"	VALUE = "{ l.paymentcardtype:id }">
			</MvIF>
		<MvELSE>
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ ( l.paymentmethodexclusion:excludermo EQ l.paymentmethodexclusion:excludedmo ) AND
						( l.paymentmethodexclusion:excluderme EQ l.paymentmethodexclusion:excludedme ) AND
						( l.paymentmethodexclusion:excluderti EQ l.paymentmethodexclusion:excludedti ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'A payment method may not exclude or be excluded by itself' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Insert( l.paymentmethodexclusion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductPaymentRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].ProductPaymentRules_Load_ProductOrDefault( l.product:id, l.productpaymentrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'LimitPaymentMethods', l.productpaymentrules:limitmeths ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PAY_DB ].ProductPaymentRules_Equal_Default( l.productpaymentrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].ProductPaymentRules_Delete_Product( l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].ProductPaymentRules_Insert( l.productpaymentrules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].ProductPaymentRules_Update( l.productpaymentrules ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'PaymentMethods' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductPaymentRules_PaymentMethods( l.provide_xml:tags:PaymentMethods[ 1 ], l.product ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductPaymentRules_PaymentMethods" PARAMETERS = "provide_xml var, product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].ProductPaymentMethod_Delete_All_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.productpaymentmethod:product_id"			VALUE = "{ l.product:id }">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvIF EXPR = "{ tolower( l.child_xml:name ) NE 'paymentmethod' }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.child_xml, 'paymentcard_type' ) }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'module_code',	l.productpaymentmethod:mod_code ) OR
							NOT PRV_Attribute_Text( l.child_xml, 'method_code',	l.productpaymentmethod:meth_code ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.productpaymentmethod:pctype_id"		VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Load_Cached( l.mivapay_settings ) OR NOT l.mivapay_settings:enabled }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment Card Types are not available when MivaPay is disabled.  Please enable MivaPay and try again.' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'paymentcard_type', l.pctype ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.pctype, l.paymentcardtype ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Payment Card Type not found' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.productpaymentmethod:mod_code"		VALUE = "">
			<MvASSIGN NAME = "l.productpaymentmethod:meth_code"		VALUE = "">
			<MvASSIGN NAME = "l.productpaymentmethod:pctype_id"		VALUE = "{ l.paymentcardtype:id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].ProductPaymentMethod_Insert( l.productpaymentmethod ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ShippingMethodRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module_code',	l.module_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'method_code',	l.method_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is inactive' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:shipping }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' does not implement the shipping feature' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Load_Method( l.module_code, l.method_code, l.shippingmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Default( l.module_code, l.method_code, l.shippingmethodrules ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Integer(	'o', l.provide_xml,	'Priority',			l.shippingmethodrules:priority )			OR
					NOT PRV_Tag_Text(		'O', l.provide_xml, 'Description',		l.shippingmethodrules:descrip )				OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'MinimumSubTotal',	l.shippingmethodrules:min_subtot, 10, 2 )	OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'MaximumSubTotal',	l.shippingmethodrules:max_subtot, 10, 2 )	OR
					NOT PRV_Tag_Integer(	'o', l.provide_xml, 'MinimumQuantity',	l.shippingmethodrules:min_quan )			OR
					NOT PRV_Tag_Integer(	'o', l.provide_xml, 'MaximumQuantity',	l.shippingmethodrules:max_quan )			OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'MinimumWeight',	l.shippingmethodrules:min_weight, 10, 2 )	OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'MaximumWeight',	l.shippingmethodrules:max_weight, 10, 2 )	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ZipCodes',			l.shippingmethodrules:zips )				OR
					NOT PRV_Tag_Boolean( 	'o', l.provide_xml, 'ExcludePOBoxes',	l.shippingmethodrules:exclude_po )			OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'ExcludeByDefault', l.shippingmethodrules:exclude_df ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'RateAdjustment' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:RateAdjustment[ 1 ], 'type', l.shippingmethodrules:adjusttype, 'none,fixed,percent', ',fixed,percent' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.provide_xml:tags:RateAdjustment[ 1 ]:value }">
			<MvIF EXPR = "{ NOT PRV_Tag_Number( 'o', l.provide_xml, 'RateAdjustment', l.shippingmethodrules:adjustamnt, 10, 2 ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.shippingmethodrules:adjusttype }">
			<MvASSIGN NAME = "l.shippingmethodrules:adjustamnt"	VALUE = 0.00>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( l.shippingmethodrules:max_subtot NE 0 ) AND ( l.shippingmethodrules:max_subtot LT l.shippingmethodrules:min_subtot ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a MaximumSubTotal that is higher than MinimumSubTotal, or 0' ) }">
	<MvELSEIF EXPR = "{ ( l.shippingmethodrules:max_quan NE 0 ) AND ( l.shippingmethodrules:max_quan LT l.shippingmethodrules:min_quan ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a MaximumQuantity that is higher than MinimumQuantity, or 0' ) }">
	<MvELSEIF EXPR = "{ ( l.shippingmethodrules:max_weight NE 0 ) AND ( l.shippingmethodrules:max_weight LT l.shippingmethodrules:min_weight ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a MaximumWeight that is higher than MinimumWeight, or 0' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'States' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ShippingMethodRules_States( l.provide_xml:tags:States[ 1 ], l.shippingmethodrules ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Countries' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ShippingMethodRules_Countries( l.provide_xml:tags:Countries[ 1 ], l.shippingmethodrules ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Insert( l.shippingmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Update( l.shippingmethodrules ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Exclusions' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ShippingMethodRules_Exclusions( l.provide_xml:tags:Exclusions[ 1 ], l.module_code, l.method_code ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ShippingMethodRules_States" PARAMETERS = "provide_xml var, shippingmethodrules var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.shippingmethodrules:states"										VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name"	VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'state' }">
			<MvIF EXPR = "{ PRV_Attribute_Text( l.child_xml, 'code', l.state ) }">
				<MvASSIGN NAME = "l.shippingmethodrules:states" MEMBER = "{ l.state }"	VALUE = 1>
			</MvIF>
		<MvELSE>
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ShippingMethodRules_Countries" PARAMETERS = "provide_xml var, shippingmethodrules var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.shippingmethodrules:countries"										VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name"	VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'country' }">
			<MvIF EXPR = "{ PRV_Attribute_Text( l.child_xml, 'code', l.country ) }">
				<MvASSIGN NAME = "l.shippingmethodrules:countries" MEMBER = "{ l.country }"	VALUE = 1>
			</MvIF>
		<MvELSE>
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ShippingMethodRules_Exclusions" PARAMETERS = "provide_xml var, module_code, method_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Delete_NonImmutable_Method( l.module_code, l.method_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.shippingmethodexclusion:immutable"			VALUE = 0>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name"	VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'excludedby' }">
			<MvASSIGN NAME = "l.shippingmethodexclusion:excludedmo"	VALUE = "{ l.module_code }">
			<MvASSIGN NAME = "l.shippingmethodexclusion:excludedme"	VALUE = "{ l.method_code }">

			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'module_code',	l.shippingmethodexclusion:excludermo ) OR
							NOT PRV_Attribute_Text( l.child_xml, 'method_code',	l.shippingmethodexclusion:excluderme ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.name EQ 'excludes' }">
			<MvASSIGN NAME = "l.shippingmethodexclusion:excludermo"	VALUE = "{ l.module_code }">
			<MvASSIGN NAME = "l.shippingmethodexclusion:excluderme"	VALUE = "{ l.method_code }">

			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'module_code',	l.shippingmethodexclusion:excludedmo ) OR
							NOT PRV_Attribute_Text( l.child_xml, 'method_code',	l.shippingmethodexclusion:excludedme ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSE>
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ ( l.shippingmethodexclusion:excludermo EQ l.shippingmethodexclusion:excludedmo ) AND
						( l.shippingmethodexclusion:excluderme EQ l.shippingmethodexclusion:excludedme ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'A shipping method may not exclude or be excluded by itself' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Insert( l.shippingmethodexclusion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PackagingRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].PackagingRules_Load( l.packagingrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_List(		'o', l.provide_xml, 'VariantPackingMode',						l.packagingrules:vp_mode,
																'Master,Parts,PartsEven,PartsProportional',	'master,parts,parts_even,parts_proportional' )	OR
					NOT PRV_Tag_Integer( 	'O', l.provide_xml, 'MaximumPackableItemQuantity',				l.packagingrules:pack_max )						OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'PartAdjustmentUp',							l.packagingrules:vp_part_up )					OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'PartAdjustmentDown',						l.packagingrules:vp_part_dn )					OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'PartAdjustmentNegative',					l.packagingrules:vp_part_ng ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'FallbackPackage' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Number(	'o', l.provide_xml:tags:FallbackPackage[ 1 ],	'Width',	l.packagingrules:fb_width,	10, 2 )	OR
						NOT PRV_Tag_Number( 'o', l.provide_xml:tags:FallbackPackage[ 1 ],	'Length',	l.packagingrules:fb_length,	10, 2 )	OR
						NOT PRV_Tag_Number( 'o', l.provide_xml:tags:FallbackPackage[ 1 ],	'Height',	l.packagingrules:fb_height,	10, 2 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].PackagingRules_Update( l.packagingrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'BoxPacking' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_PackagingRules_BoxPacking( l.provide_xml:tags:BoxPacking[ 1 ] ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PackagingRules_BoxPacking" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml, 'type', l.boxpacking_type,	'fallback,module',	'fallback,module' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.install_modules"	VALUE = "">
	<MvASSIGN NAME = "l.remove_modules"		VALUE = "">

	<MvIF EXPR = "{ l.boxpacking_type EQ 'fallback' }">
		<MvIF EXPR = "{ g.Store:boxpack_mod:id }">
			<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Validate_Module_Add( g.Store:boxpack_mod, l.remove_modules ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.boxpacking_type EQ 'module' }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module_code', l.boxpacking_module_code ) }">
			<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.boxpacking_module_code, l.boxpacking_module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.boxpacking_module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.boxpacking_module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.boxpacking_module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.boxpacking_module ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ NOT l.boxpacking_module:feature_hash:boxpacking }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.boxpacking_module_code $ '\' does not implement the boxpacking feature' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.boxpacking_module:id NE g.Store:boxpack_mod:id }">
			<MvIF EXPR = "{ g.Store:boxpack_mod:id }">
				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Validate_Module_Add( g.Store:boxpack_mod, l.remove_modules ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Validate_Module_Add( l.boxpacking_module, l.install_modules ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( miva_array_elements( l.install_modules ) + miva_array_elements( l.remove_modules ) ) EQ 0 }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.result"	VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_AddRemove( l.install_modules, l.remove_modules, l.message ) }">
	<MvIF EXPR = "{ l.result EQ -2 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
	<MvELSEIF EXPR = "{ l.result EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Install_Multiple( l.install_modules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Uninstall_Multiple( l.remove_modules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductShippingRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ProductShippingRules_Load_ProductOrDefault( l.product:id, l.productshippingrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'o', l.provide_xml,	'ShipsInOwnPackaging',	l.productshippingrules:ownpackage )		OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'Width',				l.productshippingrules:width,	10, 2 )	OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'Length',				l.productshippingrules:length,	10, 2 )	OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'Height',				l.productshippingrules:height,	10, 2 )	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'LimitShippingMethods',	l.productshippingrules:limitmeths ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_SHP_DB ].ProductShippingRules_Equal_Default( l.productshippingrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ProductShippingRules_Delete_Product( l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ProductShippingRules_Insert( l.productshippingrules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ProductShippingRules_Update( l.productshippingrules ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'ShippingMethods' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_ProductShippingRules_ShippingMethods( l.provide_xml:tags:ShippingMethods[ 1 ], l.product ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductShippingRules_ShippingMethods" PARAMETERS = "provide_xml var, product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ProductShippingMethod_Delete_All_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.productshippingmethod:product_id"	VALUE = "{ l.product:id }">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvIF EXPR = "{ tolower( l.child_xml:name ) NE 'shippingmethod' }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'module_code',	l.productshippingmethod:mod_code ) OR
						NOT PRV_Attribute_Text( l.child_xml, 'method_code',	l.productshippingmethod:meth_code ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ProductShippingMethod_Insert( l.productshippingmethod ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Box_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.box:enabled"	VALUE = 1>
	<MvASSIGN NAME = "l.box:weight"		VALUE = 0.00>
	<MvASSIGN NAME = "l.box:width"		VALUE = 0.00>
	<MvASSIGN NAME = "l.box:length"		VALUE = 0.00>
	<MvASSIGN NAME = "l.box:height"		VALUE = 0.00>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R', l.provide_xml,	'Description',	l.box:descrip )			OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml,	'Enabled',		l.box:enabled )			OR
					NOT PRV_Tag_Number( 	'o', l.provide_xml, 'Weight',		l.box:weight,	10, 2 ) OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'Width',		l.box:width,	10, 2 )	OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'Length',		l.box:length,	10, 2 )	OR
					NOT PRV_Tag_Number(		'o', l.provide_xml, 'Height',		l.box:height,	10, 2 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_SHP_DB ].Box_Load_Description( l.box:descrip, l.existing_box ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A box with the description \'' $ l.existing_box:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].Box_Insert( l.box ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Store:boxpack_mod:id AND PRV_Tag_Exists( l.provide_xml, 'BoxPackingSettings' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Provision( g.Store:boxpack_mod, l.box, l.provide_xml:tags:BoxPackingSettings[ 1 ] ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Skin_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.input_filepath" VALUE = "">
	<MvASSIGN NAME = "l.location" 		VALUE = "script">
	<MvASSIGN NAME = "l.overwrite" 		VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'filepath', l.input_filepath ) }"> 
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ miva_member_exists( l.provide_xml:attribute, 'location' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml, 'location', l.location, 'data,script', 'data,script' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ miva_member_exists( l.provide_xml:attribute, 'overwrite' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Boolean( l.provide_xml, 'overwrite', l.overwrite ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.last_slash_pos" 	VALUE = "{ [ g.Module_Library_Utilities ].LastIndexOf( '/', l.input_filepath, len_var( l.input_filepath ) ) }">	
	<MvASSIGN NAME = "l.filename" 			VALUE = "{ substring_var( l.input_filepath, l.last_slash_pos + 1, len_var( l.input_filepath ) - l.last_slash_pos ) }">
	<MvASSIGN NAME = "l.last_period_pos"	VALUE = "{ [ g.Module_Library_Utilities ].LastIndexOf( '.', l.filename, len_var( l.filename ) ) }">
	<MvASSIGN NAME = "l.skin_code" 			VALUE = "{ substring_var( l.filename, 1, l.last_period_pos - 1 ) }">
	<MvASSIGN NAME = "l.skins_directory"	VALUE = "{ g.imageroot $ 'frameworks/' $ padl( g.Store:id, 8, '0' ) $ '/' }">
	<MvASSIGN NAME = "l.output_filepath"	VALUE = "{ l.skins_directory $ l.filename }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.skins_directory ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.location EQ 'data' }">
		<MvCOMMENT>
		|
		| Framework is in a mivadata folder
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT fexists( l.input_filepath ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to locate framework \'' $ l.input_filepath $ '\'' ) }">
		</MvIF>

		<MvIF EXPR = "{ sexists( l.output_filepath ) }">
			<MvIF EXPR = "{ NOT l.overwrite }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Framework file \'' $ l.output_filepath $ '\' already exists, not overwritten' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT sdelete( l.output_filepath ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to delete framework file \'' $ l.output_filepath $ '\': ' $ file_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT fsrename( l.input_filepath, l.output_filepath ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to rename framework file \'' $ l.input_filepath $ '\' to \'' $ l.output_filepath $ '\': ' $ file_last_error() ) }">
		</MvIF>
	<MvELSE>
		<MvCOMMENT>
		|
		| Framework is in a script folder
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT sexists( l.input_filepath ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to locate framework \'' $ l.input_filepath $ '\'' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.input_filepath NE l.output_filepath }">
			<MvIF EXPR = "{ sexists( l.output_filepath ) }">
				<MvIF EXPR = "{ NOT l.overwrite }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Framework file \'' $ l.output_filepath $ '\' already exists, not overwritten' ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT sdelete( l.output_filepath ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to delete framework file \'' $ l.output_filepath $ '\': ' $ file_last_error() ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT srename( l.input_filepath, l.output_filepath ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Unable to rename framework file \'' $ l.input_filepath $ '\' to \'' $ l.output_filepath $ '\': ' $ file_last_error() ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_UT ].Skin_Register( l.skin_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Box_CustomField" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module',	l.module_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'box',		l.box_descrip ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'field',		l.field_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module_code $ ' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module ' $ l.module:code $ ' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_box }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'fields_box\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module( l.module:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].Box_Load_Description( l.box_descrip, l.box ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Box with the description \'' $ l.box_descrip $ '\' does not exist' ) }">
	</MvIF>

	<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.null" VALUE = "{ Module_Box_Set_Field( l.module, l.box:id, l.field_code, l.provide_xml:value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Skin_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code',	l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].SKIN_Load_Code( l.code, l.skin ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Failed to load skin \'' $ l.code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_UT ].SKIN_Directory_Verify( l.skin:code, l.null, l.skin_file ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT sdelete( l.skin_file ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].SKIN_Delete_ID( l.skin:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Note_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customer_login" 	VALUE = "{ trim( l.provide_xml:attribute:customer ) }">
	<MvASSIGN NAME = "l.business_title" 	VALUE = "{ trim( l.provide_xml:attribute:business ) }">
	<MvASSIGN NAME = "l.order_id" 			VALUE = "{ trim( l.provide_xml:attribute:order ) }">
	<MvASSIGN NAME = "l.notetext" 			VALUE = "{ trim( l.provide_xml:value ) }">

	<MvIF EXPR = "{ ISNULL l.customer_login AND ISNULL l.business_title AND ISNULL l.order_id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'At least one attribute of customer, business, or order must be specified' ) }">
	<MvELSEIF EXPR = "{ ISNULL l.notetext }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Note cannot be blank' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.note:notetext"		VALUE = "{ l.notetext }">

	<MvIF EXPR = "{ NOT ISNULL l.customer_login }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_Login( l.customer_login, l.customer ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A customer with the login \'' $ l.customer_login $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.note:cust_id" VALUE = "{ l.customer:id }">

		<MvIF EXPR = "{ ISNULL l.business_title AND l.customer:account_id }">
			<MvASSIGN NAME = "l.note:account_id" VALUE = "{ l.customer:account_id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.business_title }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].BusinessAccount_Load_Title( l.business_title, l.businessaccount ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Business account \'' $ l.business_title $ '\' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.note:account_id" VALUE = "{ l.businessaccount:id }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.order_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.order_id, l.order ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Order #' $ l.order_id $ ' does not exist' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.note:order_id" VALUE = "{ l.order:id }">

		<MvIF EXPR = "{ ISNULL l.customer_login AND l.order:cust_id }">
			<MvASSIGN NAME = "l.note:cust_id" VALUE = "{ l.order:cust_id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Note_Insert( l.note ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_URI_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'uri', l.uri ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Load_URI( l.uri, l.existing_uri ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'URI \'' $ l.uri $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Delete( l.existing_uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_URI_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.page_exists" 		VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'page_code' ) }">
	<MvASSIGN NAME = "l.category_exists" 	VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'category_code' ) }">
	<MvASSIGN NAME = "l.product_exists" 	VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'product_code' ) }">
	<MvASSIGN NAME = "l.feed_exists" 		VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'feed_code' ) }">
	<MvASSIGN NAME = "l.sum" 				VALUE = "{ l.page_exists + l.category_exists + l.product_exists + l.feed_exists }">

	<MvIF EXPR = "{ l.sum EQ 0 }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One of page_code, category_code, product_code, or feed_code is required' ) }">
	<MvELSEIF EXPR = "{ l.sum GT 1 }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Only one of page_code, category_code, product_code, or feed_code may exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page_exists }">
		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Attribute_Text( l.provide_xml, 'page_code', l.page_code ) }">

		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Delete_All_Page( l.page:code ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Delete_All_Screen( l.page_code ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.category_exists }">
		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Attribute_Text( l.provide_xml, 'category_code', l.category_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' does not exist' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Delete_All_Category( l.category:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.product_exists }">
		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Attribute_Text( l.provide_xml, 'product_code', l.product_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' does not exist' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Delete_All_Product( l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.feed_exists }">
		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Attribute_Text( l.provide_xml, 'feed_code', l.feed_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_DB ].Feed_Load_Code( l.feed_code, l.feed ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Feed \'' $ l.feed_code $ '\' does not exist' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Delete_All_Feed( l.feed:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_URI_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.page_exists" 		VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'page_code' ) }">
	<MvASSIGN NAME = "l.category_exists" 	VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'category_code' ) }">
	<MvASSIGN NAME = "l.product_exists" 	VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'product_code' ) }">
	<MvASSIGN NAME = "l.feed_exists"		VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'feed_code' ) }">
	<MvASSIGN NAME = "l.canonical_exists"	VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'canonical' ) }">
	<MvASSIGN NAME = "l.status_exists" 		VALUE = "{ PRV_Attribute_Exists( l.provide_xml, 'status' ) }">
	<MvASSIGN NAME = "l.sum" 				VALUE = "{ l.page_exists + l.category_exists + l.product_exists + l.feed_exists }">
	<MvASSIGN NAME = "l.cs_sum" 			VALUE = "{ l.canonical_exists + l.status_exists }">

	<MvIF EXPR = "{ l.sum EQ 0 }">			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One of page_code, category_code, product_code, or feed_code is required' ) }">
	<MvELSEIF EXPR = "{ l.sum GT 1 }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Only one of page_code, category_code, product_code, or feed_code may exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.cs_sum EQ 0 }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One of canonical or status is required' ) }">
	<MvELSEIF EXPR = "{ l.cs_sum GT 1 }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Only one of canonical or status may exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'uri', l.uri_text ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.canonical_exists }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Boolean( l.provide_xml, 'canonical', l.canonical ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.status"		VALUE = 200>
	<MvELSE>
		<MvASSIGN NAME = "l.canonical"	VALUE = 0>

		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml, 'status', l.status, '200,301,302,303,307', '200,301,302,303,307' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri_text ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page_exists }">
		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Attribute_Text( l.provide_xml, 'page_code', l.page_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvASSIGN NAME = "l.screen" VALUE = "{ l.page_code }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.category_exists }">
		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Attribute_Text( l.provide_xml, 'category_code', l.category_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' does not exist' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.product_exists }">
		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Attribute_Text( l.provide_xml, 'product_code', l.product_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' does not exist' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.feed_exists }">
		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Attribute_Text( l.provide_xml, 'feed_code', l.feed_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_DB ].Feed_Load_Code( l.feed_code, l.feed ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Feed \'' $ l.feed_code $ '\' does not exist' ) }">
		<MvELSEIF EXPR = "{ NOT l.feed:uri_enbld }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Feed \'' $ l.feed_code $ '\' does not support URI access' ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.uri:uri" 		VALUE = "{ l.uri_text }">
	<MvASSIGN NAME = "l.uri:store_id" 	VALUE = "{ g.Store:id }">
	<MvASSIGN NAME = "l.uri:canonical" 	VALUE = "{ l.canonical }">
	<MvASSIGN NAME = "l.uri:status" 	VALUE = "{ l.status }">
	<MvASSIGN NAME = "l.uri:screen" 	VALUE = "{ l.screen }">
	<MvASSIGN NAME = "l.uri:page_code" 	VALUE = "{ l.page:code }">
	<MvASSIGN NAME = "l.uri:cat_id"		VALUE = "{ l.category:id }">
	<MvASSIGN NAME = "l.uri:product_id"	VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.uri:feed_id"	VALUE = "{ l.feed:id }">

	<MvIF EXPR = "{ l.uri:canonical }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Insert( l.uri ) }">
		<MvIF EXPR = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_DigitalDownloadSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadSettings_Load_Cached( l.dl_settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'O', l.provide_xml, 'Expiration',		l.dl_settings:expiration ) OR
					NOT PRV_Tag_Integer( 'O', l.provide_xml, 'MaxDownloads',	l.dl_settings:max_dl ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.dl_settings:expiration ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Expiration: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.dl_settings:max_dl ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'MaxDownloads: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadSettings_Update( l.dl_settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_DigitalDownloadProductSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadProductSettings_Load_ProductOrDefault( l.product:id, l.dl_productsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'O', l.provide_xml, 'Expiration', 	l.expiration ) 		OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml, 'MaxDownloads', l.max_downloads )	OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Enabled', 		l.dl_productsettings:enabled ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.expiration }">
		<MvIF EXPR = "{ tolower( l.expiration ) EQ 'global' }">													<MvASSIGN NAME = "l.dl_productsettings:expiration" VALUE = -1>
		<MvELSEIF EXPR = "{ [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Optional( l.expiration ) }">	<MvASSIGN NAME = "l.dl_productsettings:expiration" VALUE = "{ l.expiration }">
		<MvELSE>																								<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Expiration: ' $ g.Validation_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.max_downloads }">
		<MvIF EXPR = "{ tolower( l.max_downloads ) EQ 'global' }">												<MvASSIGN NAME = "l.dl_productsettings:max_dl" VALUE = -1>
		<MvELSEIF EXPR = "{ [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Optional( l.max_downloads ) }">	<MvASSIGN NAME = "l.dl_productsettings:max_dl" VALUE = "{ l.max_downloads }">
		<MvELSE>																								<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'MaxDownloads: ' $ g.Validation_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.localpath_exists" 	VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'LocalFilePath' ) }">
	<MvASSIGN NAME = "l.cdn_exists" 		VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'CDN' ) }">
	<MvASSIGN NAME = "l.combined" 			VALUE = "{ l.localpath_exists + l.cdn_exists }">

	<MvIF EXPR = "{ l.combined EQ 0 AND ISNULL l.dl_productsettings:miva_path AND ISNULL l.dl_productsettings:data }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'One of LocalFilePath or CDN must exist' ) }">
	<MvELSEIF EXPR = "{ l.combined GT 1 }">																				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Only one of LocalFilePath or CDN may exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.localpath_exists }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'LocalFilePath', l.miva_path ) }">
			<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_DDL_UT ].DigitalDownload_LocalFile_IsValid( l.miva_path ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'File \'' $ l.miva_path $ '\' does not exist in your Miva script directory' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.miva_name" 						VALUE = "{ trim( l.provide_xml:tags:LocalFilePath[ 1 ]:attribute:downloaded_file_name ) }">

		<MvIF EXPR = "{ ISNULL l.miva_name }">
			<MvASSIGN NAME = "l.miva_name"					VALUE = "{ [ g.Module_Library_Utilities ].BaseName( l.miva_path ) }">
		</MvIF>

		<MvASSIGN NAME = "l.dl_productsettings:cdn_id"		VALUE = 0>
		<MvASSIGN NAME = "l.dl_productsettings:miva_name" 	VALUE = "{ l.miva_name }">
		<MvASSIGN NAME = "l.dl_productsettings:miva_path" 	VALUE = "{ l.miva_path }">
		<MvASSIGN NAME = "l.dl_productsettings:data"		VALUE = "">
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml:tags:CDN[ 1 ], 'name', l.cdn ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadCDN_Load_Name( l.cdn, l.dl_cdn ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CDN \'' $ l.cdn $ '\' does not exist' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.dl_cdn:cdn EQ 'A' }">
			<MvIF EXPR = "{ NOT PRV_Action_Provision_Store_DigitalDownloadProductSettings_Validate_Amazon( l.provide_xml:tags:CDN[ 1 ], l.dl_productsettings:data ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.dl_productsettings:cdn_id"		VALUE = "{ l.dl_cdn:id }">
		<MvASSIGN NAME = "l.dl_productsettings:miva_name"	VALUE = "">
		<MvASSIGN NAME = "l.dl_productsettings:miva_path"	VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadProductSetting_InsertOrUpdate( l.dl_productsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_DigitalDownloadProductSettings_Validate_Amazon" PARAMETERS = "provide_xml var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'BucketName', l.data:bucket )	OR
					NOT PRV_Tag_Text( 'R', l.provide_xml, 'FilePath',	l.data:file )	OR
					NOT PRV_Tag_Text( 'R', l.provide_xml, 'Region',		l.region_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_UT ].DigitalDownload_Amazon_Region_Lookup( l.region_name, l.region ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid region' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.data:region" VALUE = "{ l.region:region }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_DigitalDownloadCDN_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Name',	l.dl_cdn:name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_DDL_DB ].DigitalDownloadCDN_Load_Name( l.dl_cdn:name, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CDN \'' $ l.dl_cdn:name $ '\' is already in use' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'CDN' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CDN tag is required' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:CDN[ 1 ], 'provider', l.dl_cdn:cdn, 'amazon', 'A' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.dl_cdn:cdn EQ 'A' }">
		<MvIF EXPR = "{ NOT PRV_Action_Provision_Store_DigitalDownloadCDN_Validate_Amazon( l.provide_xml:tags:CDN[ 1 ], l.dl_cdn:data ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadCDN_Insert( l.dl_cdn ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_DigitalDownloadCDN_Update" PARAMETERS = "provide_xml" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name', l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadCDN_Load_Name( l.name, l.original_dl_cdn ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CDN \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.dl_cdn" VALUE = "{ l.original_dl_cdn }">

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'Name',	l.dl_cdn:name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ tolower( l.dl_cdn:name ) NE tolower( l.original_dl_cdn:name ) }">
		<MvIF EXPR = "{ [ g.Module_Feature_DDL_DB ].DigitalDownloadCDN_Load_Name( l.dl_cdn:name, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CDN \'' $ l.dl_cdn:name $ '\' already exist' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CDN' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:CDN[ 1 ], 'provider', l.dl_cdn:cdn, 'amazon', 'A' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.dl_cdn:data" VALUE = ""> <MvCOMMENT> Clear out any previous settings </MvCOMMENT>

		<MvIF EXPR = "{ l.dl_cdn:cdn EQ 'A' }">
			<MvIF EXPR = "{ NOT PRV_Action_Provision_Store_DigitalDownloadCDN_Validate_Amazon( l.provide_xml:tags:CDN[ 1 ], l.dl_cdn:data ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadCDN_Update( l.dl_cdn ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_DigitalDownloadCDN_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name', l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadCDN_Load_Name( l.name, l.dl_cdn ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'CDN \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_DB ].DigitalDownloadCDN_Delete( l.dl_cdn ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_DigitalDownloadCDN_Validate_Amazon" PARAMETERS = "provide_xml var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'AccessKey', l.data:access_key ) OR
					NOT PRV_Tag_Text( 'R', l.provide_xml, 'SecretKey', l.data:secret_key ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.data:secret_key" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.data:secret_key ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Feed_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Feature_FDS_DB ].Feed_Defaults( l.feed ) }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 'R', l.provide_xml, 'Code', 	l.feed:code ) OR
					NOT PRV_Tag_Text( 'R', l.provide_xml, 'Name', 	l.feed:name ) OR
					NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module', l.module_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_FDS_DB ].Feed_Load_Code( l.feed:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Feed with the code \'' $ l.feed:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:feed }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'feed\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].FeedModule_Capabilities( l.module, l.capabilities ) }">

	<MvASSIGN NAME = "l.settings_tag_exists"	VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
	<MvASSIGN NAME = "l.uri_tag_exists"			VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'URI' ) }">
	<MvASSIGN NAME = "l.file_tag_exists"		VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'File' ) }">
	<MvASSIGN NAME = "l.email_tag_exists"		VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Email' ) }">

	<MvIF EXPR = "{ NOT l.capabilities:provision_settings }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support configuration via provisioning' ) }">
	<MvELSEIF EXPR = "{ NOT l.settings_tag_exists }">			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.capabilities:output_custom AND ( l.uri_tag_exists OR l.file_tag_exists OR l.email_tag_exists ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'URI, File, and Email tags may not exist when the module uses a custom output type' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.uri_tag_exists }">
		<MvREFERENCE NAME = "l.uri" VARIABLE = "l.provide_xml:tags:URI[ 1 ]">

		<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'R', l.uri, 'Enabled',		l.feed:uri_enbld ) OR
						NOT PRV_Tag_Text(		'o', l.uri, 'AccessKey',	l.uri_access_key ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.feed:uri_acckey"	VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.uri_access_key ) }">
	</MvIF>

	<MvIF EXPR = "{ l.file_tag_exists }">
		<MvREFERENCE NAME = "l.file" VARIABLE = "l.provide_xml:tags:File[ 1 ]">

		<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'R', l.file, 'Enabled',		l.feed:file_enbld )								OR
						NOT PRV_Tag_List(		'R', l.file, 'Location',	l.feed:file_loc, 'script,data', 'script,data' ) OR
						NOT PRV_Tag_Text(		'R', l.file, 'Name',		l.feed:file_name ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_UT ].Feed_Validate_FileName( l.feed:file_name ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.file, 'Invalid value for Name: ' $ g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.email_tag_exists }">
		<MvREFERENCE NAME = "l.email" VARIABLE = "l.provide_xml:tags:Email[ 1 ]">

		<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'R', l.email, 'Enabled',		l.feed:eml_enbld )	OR
						NOT PRV_Tag_Text( 		'R', l.email, 'From', 			l.feed:eml_from ) 	OR
						NOT PRV_Tag_Text( 		'o', l.email, 'ReplyTo', 		l.feed:eml_rp_to )	OR
						NOT PRV_Tag_Text( 		'R', l.email, 'To', 			l.feed:eml_to ) 	OR
						NOT PRV_Tag_Text( 		'o', l.email, 'CC',				l.feed:eml_cc )		OR
						NOT PRV_Tag_Text( 		'o', l.email, 'BCC',			l.feed:eml_bcc )	OR
						NOT PRV_Tag_Text( 		'R', l.email, 'Subject',		l.feed:eml_subj )	OR
						NOT PRV_Tag_List( 		'R', l.email, 'Type',			l.feed:eml_type, 'Attachment,Inline', 'A,I' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.feed:eml_type EQ 'A' }">
			<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.email, 'AttachmentName',	l.feed:eml_attach ) OR
							NOT PRV_Tag_Text( 'o', l.email, 'Body',				l.feed:eml_body ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.feed:eml_base64"	VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 'o', l.email, 'Base64Encode',  l.feed:eml_base64 )	}">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.feed:eml_attach"	VALUE = "">
			<MvASSIGN NAME = "l.feed:eml_body"		VALUE = "">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreModule_Load( l.module:id, 'feed', l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Increment_ReferenceCount( l.module:id, 'feed' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Install_NoForcedRemoval( l.module, l.message ) }">

		<MvIF EXPR = "{ l.result EQ 0 }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ l.result EQ -2 }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Insert_Feature_ReferenceCount( l.module, 'feed', 1 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.feed:id"				VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'Feeds' ) }">

	<MvIF EXPR = "{ l.settings_tag_exists }">
		<MvASSIGN NAME = "l.settings_xml"		VALUE = "{ l.provide_xml:tags:Settings[ 1 ] }">
		<MvASSIGN NAME = "l.settings_xml:name"	VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].FeedModule_Provision_Settings( l.module, l.feed, l.provide_xml:tags:Settings[ 1 ] ) }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.feed:module_id, 'feed' ) }">

			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.feed:module_id"			VALUE = "{ l.module:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_DB ].Feed_Insert_LowLevel( l.feed ) }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.feed:module_id, 'feed' ) }">

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Feed_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_DB ].Feed_Load_Code( l.code, l.feed ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Feed \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 'O', l.provide_xml, 'Code', 	l.feed_code ) OR
					NOT PRV_Tag_Text( 'O', l.provide_xml, 'Name', 	l.feed:name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.feed_code AND ( tolower( l.feed_code ) NE tolower( l.feed:code ) ) }">
		<MvIF EXPR = "{ [ g.Module_Feature_FDS_DB ].Feed_Load_Code( l.feed_code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Feed \'' $ l.feed_code $ '\' already exists' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.feed:code" VALUE = "{ l.feed_code }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Module' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.feed:module_id, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module not found' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module', l.module_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:feed }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'feed\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].FeedModule_Capabilities( l.module, l.capabilities ) }">

	<MvASSIGN NAME = "l.settings_tag_exists"	VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
	<MvASSIGN NAME = "l.uri_tag_exists"			VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'URI' ) }">
	<MvASSIGN NAME = "l.file_tag_exists"		VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'File' ) }">
	<MvASSIGN NAME = "l.email_tag_exists"		VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Email' ) }">

	<MvIF EXPR = "{ l.settings_tag_exists AND NOT l.capabilities:provision_settings }">			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support configuration via provisioning' ) }">
	<MvELSEIF EXPR = "{ NOT l.settings_tag_exists AND ( l.feed:module_id NE l.module:id ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.capabilities:output_custom AND ( l.uri_tag_exists OR l.file_tag_exists OR l.email_tag_exists ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'URI, File, and Email tags may not exist when the module uses a custom output type' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.uri_tag_exists }">
		<MvREFERENCE NAME = "l.uri" VARIABLE = "l.provide_xml:tags:URI[ 1 ]">

		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Tag_Boolean( 'O', l.uri, 'Enabled', l.feed:uri_enbld ) }">

		<MvIF EXPR = "{ PRV_Tag_Exists( l.uri, 'AccessKey') }">
			<MvASSIGN NAME = "l.feed:uri_acckey" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( trim( l.uri:tags:AccessKey[ 1 ]:value ) ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.file_tag_exists }">
		<MvREFERENCE NAME = "l.file" VARIABLE = "l.provide_xml:tags:File[ 1 ]">

		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Tag_Boolean( 'O', l.file, 'Enabled', l.feed:file_enbld ) }">

		<MvIF EXPR = "{ l.feed:file_enbld }">	<MvASSIGN NAME = "l.required" VALUE = "R">
		<MvELSE>								<MvASSIGN NAME = "l.required" VALUE = "O">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Tag_List( l.required, l.file, 'Location',	l.feed:file_loc, 'script,data', 'script,data' ) OR
						NOT PRV_Tag_Text( l.required, l.file, 'Name',		l.feed:file_name ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.file, 'Name' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_UT ].Feed_Validate_FileName( l.feed:file_name ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.file, 'Invalid value for Name: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.email_tag_exists }">
		<MvREFERENCE NAME = "l.email" VARIABLE = "l.provide_xml:tags:Email[ 1 ]">

		<MvASSIGN NAME = "l.null" VALUE = "{ PRV_Tag_Boolean( 'O', l.email, 'Enabled', l.feed:eml_enbld ) }">

		<MvIF EXPR = "{ l.feed:eml_enbld }">	<MvASSIGN NAME = "l.required" VALUE = "R">
		<MvELSE>								<MvASSIGN NAME = "l.required" VALUE = "O">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Tag_Text( 		l.required, l.email, 'From', 			l.feed:eml_from ) 								OR
						NOT PRV_Tag_Text( 		'o', 		l.email, 'ReplyTo', 		l.feed:eml_rp_to )								OR
						NOT PRV_Tag_Text( 		l.required, l.email, 'To', 				l.feed:eml_to ) 								OR
						NOT PRV_Tag_Text( 		'o', 		l.email, 'CC',				l.feed:eml_cc )									OR
						NOT PRV_Tag_Text( 		'o', 		l.email, 'BCC',				l.feed:eml_bcc )								OR
						NOT PRV_Tag_Text( 		l.required, l.email, 'Subject',			l.feed:eml_subj )								OR
						NOT PRV_Tag_List( 		l.required, l.email, 'Type',			l.feed:eml_type, 'Attachment,Inline', 'A,I' )	OR
						NOT PRV_Tag_Boolean(	'o', 		l.email, 'Base64Encode', 	l.feed:eml_base64 )								OR
						NOT PRV_Tag_Text(		'o', 		l.email, 'AttachmentName',	l.feed:eml_attach )								OR
						NOT PRV_Tag_Text(		'o', 		l.email, 'Body',			l.feed:eml_body ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.feed:eml_type EQ 'A' }">
			<MvIF EXPR = "{ NOT ISNULL l.feed:eml_attach }">	<MvASSIGN NAME = "l.required" VALUE = "O">
			<MvELSE>											<MvASSIGN NAME = "l.required" VALUE = "R">
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Tag_Text( l.required,	l.email, 'AttachmentName',	l.feed:eml_attach ) OR
							NOT PRV_Tag_Text( 'o',			l.email, 'Body',			l.feed:eml_body ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.feed:eml_base64"	VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 'o', l.email, 'Base64Encode',  l.feed:eml_base64 )	}">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.feed:eml_attach"	VALUE = "">
			<MvASSIGN NAME = "l.feed:eml_body"		VALUE = "">			
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.feed:module_id NE l.module:id }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreModule_Load( l.module:id, 'feed', l.null ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Increment_ReferenceCount( l.module:id, 'feed' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Install_NoForcedRemoval( l.module, l.message ) }">

			<MvIF EXPR = "{ l.result EQ 0 }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			<MvELSEIF EXPR = "{ l.result EQ -2 }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Insert_Feature_ReferenceCount( l.module, 'feed', 1 ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.feed:config" VALUE = "">			
	</MvIF>

	<MvIF EXPR = "{ l.settings_tag_exists }">
		<MvASSIGN NAME = "l.settings_xml"		VALUE = "{ l.provide_xml:tags:Settings[ 1 ] }">
		<MvASSIGN NAME = "l.settings_xml:name"	VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].FeedModule_Provision_Settings( l.module, l.feed, l.settings_xml ) }">
			<MvIF EXPR = "{ l.feed:module_id NE l.module:id }">
				<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.module:id, 'feed' ) }">
			</MvIF>

			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.feed:module_id NE l.module:id }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.feed:module_id, 'feed' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.feed:module_id"			VALUE = "{ l.module:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_DB ].Feed_Update( l.feed ) }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.feed:module_id, 'feed' ) }">

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Feed_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_DB ].Feed_Load_Code( l.code, l.feed ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Feed \'' $ l.code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_DB ].Feed_Delete( l.feed ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.feed:module_id }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.feed:module_id, 'feed' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ScheduledTask_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.task:enabled"		VALUE = 1>
	<MvASSIGN NAME = "l.task:queue_id"		VALUE = 1>
	<MvASSIGN NAME = "l.task:trig_delay"	VALUE = 0>
	<MvASSIGN NAME = "l.task:runonce"	 	VALUE = 0>
	<MvASSIGN NAME = "l.task:mnt_mode"		VALUE = 0>
	<MvASSIGN NAME = "l.task:mnt_advnce"	VALUE = 1800>
	<MvASSIGN NAME = "l.task:lastrun"		VALUE = 0>
	<MvASSIGN NAME = "l.task:nextrun"		VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.task:config"		VALUE = "">
	<MvASSIGN NAME = "l.task:state"			VALUE = "">
	<MvASSIGN NAME = "l.task:loglevel"		VALUE = "">

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R',	l.provide_xml, 'Description',		l.task:descrip )	OR
					NOT PRV_Tag_Boolean(	'O',	l.provide_xml, 'Enabled',			l.task:enabled )	OR
					NOT PRV_Tag_Integer(	'O',	l.provide_xml, 'Queue',				l.task:queue_id )	OR
					NOT PRV_Tag_Text(		'o:50',	l.provide_xml, 'Trigger',			l.task:trig )		OR
					NOT PRV_Tag_Boolean(	'O',	l.provide_xml, 'MaintenanceMode',	l.task:mnt_mode )	OR
					NOT PRV_Tag_Date(				l.provide_xml, 'NextRun',			l.task:nextrun )	OR
					NOT PRV_Tag_Code(		'R',	l.provide_xml, 'Module',			l.module_code )		OR
					NOT PRV_Tag_Code(		'R',	l.provide_xml, 'Operation',			l.operation_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.task:queue_id, 1, g.Store:schtsk_que ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Task_Queue: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.task:mnt_mode AND ( l.task:queue_id GT 1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Scheduled tasks that put a store into maintenance mode can only be assigned to queue 1' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'LogLevel' ) }">
		<MvASSIGN NAME = "l.task:loglevel" VALUE = "">

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:LogLevel[ 1 ], 'Information' ) }">
			<MvASSIGN NAME = "l.task:loglevel" VALUE = "{ l.task:loglevel $ 'I' }">
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:LogLevel[ 1 ], 'Warning' ) }">
			<MvASSIGN NAME = "l.task:loglevel" VALUE = "{ l.task:loglevel $ 'W' }">
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:LogLevel[ 1 ], 'Error' ) }">
			<MvASSIGN NAME = "l.task:loglevel" VALUE = "{ l.task:loglevel $ 'E' }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'RunInterval' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag RunInterval' ) }">
	<MvELSEIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:RunInterval[ 1 ], 'units', l.runint_multiple, 'once,minutes,hours,days', '0,60,3600,86400' ) }">
		<MvFUNCTIONRETURN>
	<MvELSE>
		<MvIF EXPR = "{ l.runint_multiple EQ 0 }">
			<MvASSIGN NAME = "l.task:runint"		VALUE = 0>
			<MvASSIGN NAME = "l.task:runonce" 		VALUE = 1>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'R', l.provide_xml, 'RunInterval',	l.runint ) OR
							NOT PRV_Tag_Boolean( 'O', l.provide_xml, 'RunOnce',		l.task:runonce ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.task:runint"		VALUE = "{ l.runint * l.runint_multiple }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'MaintenanceMode' ) AND
					PRV_Attribute_Exists( l.provide_xml:tags:MaintenanceMode[ 1 ], 'warning' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Number( l.provide_xml:tags:MaintenanceMode[ 1 ], 'warning', l.warning, 10, 0 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.warning ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'MaintenanceMode warning must be a whole number greater than or equal to 0' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.task:mnt_advnce"	VALUE = "{ l.warning * 60 }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_SCH_DB ].ScheduledTask_Load_Description( l.task:descrip, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Scheduled Task with the description \'' $ l.task:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Trigger' ) AND
					PRV_Attribute_Exists( l.provide_xml:tags:Trigger[ 1 ], 'delay' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Number( l.provide_xml:tags:Trigger[ 1 ], 'delay', l.delay, 10, 0 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.delay ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Trigger delay must be a whole number greater than or equal to 0' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.task:trig_delay"	VALUE = "{ l.delay }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">							<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:scheduledtask }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'scheduledtask\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Root $ l.module:module ].ScheduledTaskModule_Capabilities( l.module, l.capabilities ) }">
	<MvASSIGN NAME = "l.operation_count"		VALUE = "{ [ g.Module_Root $ l.module:module ].ScheduledTaskModule_Operations( l.module, l.operations ) }">

	<MvIF EXPR = "{ NOT miva_array_search( l.operations, 1, l.operation, 'l.operation:code EQ l.operation_code' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid operation \'' $ l.operation_code $ '\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.settings_tag_exists"	VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">

	<MvIF EXPR = "{ NOT l.capabilities:provision AND NOT l.capabilities:provision_settings }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support creation of Scheduled Tasks through provisioning' ) }">
	<MvELSEIF EXPR = "{ NOT l.capabilities:provision_settings AND l.settings_tag_exists }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support Settings' ) }">
	<MvELSEIF EXPR = "{ l.capabilities:provision_settings AND NOT l.settings_tag_exists }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreModule_Load( l.module:id, 'scheduledtask', l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Increment_ReferenceCount( l.module:id, 'scheduledtask' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Install_NoForcedRemoval( l.module, l.message ) }">

		<MvIF EXPR = "{ l.result EQ 0 }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ l.result EQ -2 }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Insert_Feature_ReferenceCount( l.module, 'scheduledtask', 1 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.task:operation"			VALUE = "{ l.operation_code }">

	<MvIF EXPR = "{ l.settings_tag_exists }">
		<MvASSIGN NAME = "l.settings_xml"		VALUE = "{ l.provide_xml:tags:Settings[ 1 ] }">
		<MvASSIGN NAME = "l.settings_xml:name"	VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].ScheduledTaskModule_Provision_Settings( l.module, l.task, l.provide_xml:tags:Settings[ 1 ] ) }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.task:module_id, 'scheduledtask' ) }">

			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.task:module_id"			VALUE = "{ l.module:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SCH_DB ].ScheduledTask_Insert( l.task ) }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.task:module_id, 'scheduledtask' ) }">

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ScheduledTask_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'task', l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SCH_DB ].ScheduledTask_Load_Description( l.descrip, l.task ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Scheduled Task \'' $ l.descrip $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_module_id"		VALUE = "{ l.task:module_id }">
	<MvASSIGN NAME = "l.original_operation"		VALUE = "{ l.task:operation }">

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O',	l.provide_xml, 'Description',		l.task_descrip )	OR
					NOT PRV_Tag_Boolean(	'O',	l.provide_xml, 'Enabled',			l.task:enabled )	OR
					NOT PRV_Tag_Integer(	'O',	l.provide_xml, 'Queue',				l.task:queue_id )	OR
					NOT PRV_Tag_Text(		'o:50',	l.provide_xml, 'Trigger',			l.task:trig )		OR
					NOT PRV_Tag_Boolean(	'O',	l.provide_xml, 'MaintenanceMode',	l.task:mnt_mode )	OR
					NOT PRV_Tag_Date(				l.provide_xml, 'NextRun',			l.task:nextrun )	OR
					NOT PRV_Tag_Code(		'O',	l.provide_xml, 'Operation',			l.task:operation ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.task:queue_id, 1, g.Store:schtsk_que ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Task_Queue: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.task:mnt_mode AND ( l.task:queue_id GT 1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Scheduled tasks that put a store into maintenance mode can only be assigned to queue 1' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'LogLevel' ) }">
		<MvASSIGN NAME = "l.task:loglevel" VALUE = "">

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:LogLevel[ 1 ], 'Information' ) }">
			<MvASSIGN NAME = "l.task:loglevel" VALUE = "{ l.task:loglevel $ 'I' }">
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:LogLevel[ 1 ], 'Warning' ) }">
			<MvASSIGN NAME = "l.task:loglevel" VALUE = "{ l.task:loglevel $ 'W' }">
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:LogLevel[ 1 ], 'Error' ) }">
			<MvASSIGN NAME = "l.task:loglevel" VALUE = "{ l.task:loglevel $ 'E' }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'RunInterval' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:RunInterval[ 1 ], 'units', l.runint_multiple, 'once,minutes,hours,days', '0,60,3600,86400' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.runint_multiple EQ 0 }">
			<MvASSIGN NAME = "l.task:runint"		VALUE = 0>
			<MvASSIGN NAME = "l.task:runonce" 		VALUE = 1>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'R', l.provide_xml, 'RunInterval',	l.runint ) OR
							NOT PRV_Tag_Boolean( 'O', l.provide_xml, 'RunOnce',		l.task:runonce ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.task:runint"		VALUE = "{ l.runint * l.runint_multiple }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'MaintenanceMode' ) AND
					PRV_Attribute_Exists( l.provide_xml:tags:MaintenanceMode[ 1 ], 'warning' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Number( l.provide_xml:tags:MaintenanceMode[ 1 ], 'warning', l.warning, 10, 0 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.warning ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'MaintenanceMode warning must be a whole number greater than or equal to 0' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.task:mnt_advnce"	VALUE = "{ l.warning * 60 }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.task_descrip AND ( tolower( l.task_descrip ) NE tolower( l.task:descrip ) ) }">
		<MvIF EXPR = "{ [ g.Module_Feature_SCH_DB ].ScheduledTask_Load_Description( l.task_descrip, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Scheduled Task \'' $ l.task_descrip $ '\' already exists' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.task:descrip"		VALUE = "{ l.task_descrip }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Trigger' ) AND
					PRV_Attribute_Exists( l.provide_xml:tags:Trigger[ 1 ], 'delay' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Number( l.provide_xml:tags:Trigger[ 1 ], 'delay', l.delay, 10, 0 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.delay ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Trigger delay must be a whole number greater than or equal to 0' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.task:trig_delay"	VALUE = "{ l.delay }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Module' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.task:module_id, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module not found' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Module', l.module_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">							<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:scheduledtask }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not provide feature \'scheduledtask\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.task:module_id"			VALUE = "{ l.module:id }">

	<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Root $ l.module:module ].ScheduledTaskModule_Capabilities( l.module, l.capabilities ) }">
	<MvASSIGN NAME = "l.operation_count"		VALUE = "{ [ g.Module_Root $ l.module:module ].ScheduledTaskModule_Operations( l.module, l.operations ) }">

	<MvIF EXPR = "{ NOT miva_array_search( l.operations, 1, l.operation, 'l.operation:code EQ l.task:operation' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid operation \'' $ l.task:operation $ '\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.settings_tag_exists"	VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">

	<MvIF EXPR = "{ ( l.module:id NE l.original_module_id ) OR ( l.task:operation NE l.original_operation ) }">
		<MvIF EXPR = "{ NOT l.capabilities:provision AND NOT l.capabilities:provision_settings }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support creation of Scheduled Tasks through provisioning' ) }">
		<MvELSEIF EXPR = "{ NOT l.capabilities:provision_settings AND l.settings_tag_exists }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support Settings' ) }">
		<MvELSEIF EXPR = "{ l.capabilities:provision_settings AND NOT l.settings_tag_exists }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Settings' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.task:config"		VALUE = "">
		<MvASSIGN NAME = "l.task:state"			VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ l.original_module_id NE l.module:id }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreModule_Load( l.module:id, 'scheduledtask', l.null ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Increment_ReferenceCount( l.module:id, 'scheduledtask' ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Install_NoForcedRemoval( l.module, l.message ) }">

			<MvIF EXPR = "{ l.result EQ 0 }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			<MvELSEIF EXPR = "{ l.result EQ -2 }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Insert_Feature_ReferenceCount( l.module, 'scheduledtask', 1 ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.settings_tag_exists }">
		<MvASSIGN NAME = "l.settings_xml"		VALUE = "{ l.provide_xml:tags:Settings[ 1 ] }">
		<MvASSIGN NAME = "l.settings_xml:name"	VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].ScheduledTaskModule_Provision_Settings( l.module, l.task, l.settings_xml ) }">
			<MvIF EXPR = "{ l.original_module_id NE l.module:id }">
				<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.module:id, 'scheduledtask' ) }">
			</MvIF>

			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SCH_DB ].ScheduledTask_Update( l.task ) }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.task:module_id, 'scheduledtask' ) }">

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.original_module_id NE l.module:id }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.original_module_id, 'scheduledtask' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ScheduledTask_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'task', l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SCH_DB ].ScheduledTask_Load_Description( l.descrip, l.task ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Scheduled Task \'' $ l.descrip $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SCH_DB ].ScheduledTask_Delete( l.task ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.task:module_id }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.task:module_id, 'scheduledtask' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_SubscriptionSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].SubscriptionSettings_Load( l.subscriptionsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Integer(	'O:nonneg', l.provide_xml, 'MaximumAuthorizationFailures',	l.subscriptionsettings:maxafails )	OR
					NOT PRV_Tag_Integer(	'O:nonneg', l.provide_xml, 'AuthorizationFailureDelay',		l.subscriptionsettings:afaildelay )	OR
					NOT PRV_Tag_List(		'O',		l.provide_xml, 'OutOfStockHandling',			l.subscriptionsettings:out_skip,
																	   'Process,SkipToNextOrderDate',	'process,skip' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].SubscriptionSettings_Update( l.subscriptionsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductSubscriptionSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code', l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionSettings_Load_ProductOrDefault( l.product:id, l.productsubscriptionsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'Enabled',									l.productsubscriptionsettings:enabled ) 	OR
					NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'Mandatory',								l.productsubscriptionsettings:mandatory ) 	OR
					NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'CanCancel',								l.productsubscriptionsettings:can_cancel ) 	OR
					NOT PRV_Tag_Integer( 'o', l.provide_xml, 'CancelMinimumRequiredOrders',				l.productsubscriptionsettings:cncl_min ) 	OR
					NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'CanChangeQuantities',						l.productsubscriptionsettings:can_qty ) 	OR
					NOT PRV_Tag_Integer( 'o', l.provide_xml, 'QuantitiesMinimumRequiredOrders',			l.productsubscriptionsettings:qty_min ) 	OR
					NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'CanChangeTerm',							l.productsubscriptionsettings:can_term ) 	OR
					NOT PRV_Tag_Integer( 'o', l.provide_xml, 'TermMinimumRequiredOrders',				l.productsubscriptionsettings:term_min ) 	OR
					NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'CanChangeNextDeliveryDate',				l.productsubscriptionsettings:can_date )	OR
					NOT PRV_Tag_Integer( 'o', l.provide_xml, 'NextDeliveryDateMinimumRequiredOrders',	l.productsubscriptionsettings:date_min ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Feature_SUB_DB ].ProductSubscriptionSettings_Equal_Default( l.productsubscriptionsettings ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionSettings_Delete_Product( l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionSettings_Insert( l.productsubscriptionsettings ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionSettings_Update( l.productsubscriptionsettings ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductSubscriptionTerm_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code', l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.productsubscriptionterm:product_id"	VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.productsubscriptionterm:term"		VALUE = 0>
	<MvASSIGN NAME = "l.productsubscriptionterm:n"			VALUE = 0>
	<MvASSIGN NAME = "l.productsubscriptionterm:fixed_dow"	VALUE = 0>
	<MvASSIGN NAME = "l.productsubscriptionterm:fixed_dom"	VALUE = 0>
	<MvASSIGN NAME = "l.productsubscriptionterm:sub_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O:254',	l.provide_xml, 'Description',	l.productsubscriptionterm:descrip )	OR
					NOT PRV_Tag_Integer(	'O',		l.provide_xml, 'Term',			l.productsubscriptionterm:term ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.productsubscriptionterm:term ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Term: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Frequency' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag Frequency' ) }">
	<MvELSEIF EXPR = "{ NOT PRV_Action_Provision_Store_ProductSubscriptionTerm_Frequency( l.provide_xml:tags:Frequency[ 1 ], l.productsubscriptionterm, l.productsubscriptiontermdates, l.productsubscriptiontermdate_count ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.productsubscriptionterm:descrip }">
		<MvASSIGN NAME = "l.productsubscriptionterm:descrip"	VALUE = "{ [ g.Module_Feature_SUB_UT ].ProductSubscriptionTerm_Generate_Description( l.productsubscriptionterm, l.productsubscriptiontermdates, l.productsubscriptiontermdate_count ) }">

		<MvIF EXPR = "{ len_var( l.productsubscriptionterm:descrip ) GT 254 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The generated value for Description exceeds the available 254 character limit.  Please specify a custom description of 254 characters or less' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_Description( l.product:id, l.productsubscriptionterm:descrip, l.existing_productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A product subscription term already exists with Description \'' $ l.productsubscriptionterm:descrip $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Insert( l.productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.productsubscriptiontermdate" ARRAY = "l.productsubscriptiontermdates" COUNT = "{ l.productsubscriptiontermdate_count }">
		<MvASSIGN NAME = "l.productsubscriptiontermdate:subterm_id"	VALUE = "{ l.productsubscriptionterm:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTermDate_Insert( l.productsubscriptiontermdate ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductSubscriptionTerm_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'descrip',		l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_Description( l.product:id, l.descrip, l.productsubscriptionterm ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.descrip $ '\' not found for product \'' $ l.product:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O:254',	l.provide_xml, 'Description',	l.productsubscriptionterm:descrip )	OR
					NOT PRV_Tag_Integer( 	'O:nonneg',	l.provide_xml, 'Term',			l.productsubscriptionterm:term ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.frequency_tag_exists" VALUE = "{ PRV_Tag_Exists( l.provide_xml, 'Frequency' ) }">

	<MvIF EXPR = "{ l.frequency_tag_exists }">
		<MvIF EXPR = "{ NOT PRV_Action_Provision_Store_ProductSubscriptionTerm_Frequency( l.provide_xml:tags:Frequency[ 1 ], l.productsubscriptionterm, l.productsubscriptiontermdates, l.productsubscriptiontermdate_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Update( l.productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.frequency_tag_exists }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTermDate_Delete_All_ProductSubscriptionTerm( l.productsubscriptionterm:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.productsubscriptiontermdate" ARRAY = "l.productsubscriptiontermdates" COUNT = "{ l.productsubscriptiontermdate_count }">
			<MvASSIGN NAME = "l.productsubscriptiontermdate:subterm_id"	VALUE = "{ l.productsubscriptionterm:id }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTermDate_Insert( l.productsubscriptiontermdate ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvFOREACH>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductSubscriptionTerm_Frequency" PARAMETERS = "provide_xml var, productsubscriptionterm var, productsubscriptiontermdates var, productsubscriptiontermdate_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml, 'code', l.productsubscriptionterm:frequency,
											'n,n_months,daily,weekly,biweekly,monthly,quarterly,semiannually,annually,fixedweekly,fixedmonthly,dates',
											'n,n_months,daily,weekly,biweekly,monthly,quarterly,semiannually,annually,fixedweekly,fixedmonthly,dates' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.productsubscriptiontermdates"			VALUE = "">
	<MvASSIGN NAME = "l.productsubscriptiontermdate_count"		VALUE = 0>

	<MvIF EXPR = "{ l.productsubscriptionterm:frequency EQ 'n' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Integer(	'R', l.provide_xml, 'Days', l.productsubscriptionterm:n ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.productsubscriptionterm:n ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Days: ' $ g.Validation_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.productsubscriptionterm:frequency EQ 'n_months' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Integer(	'R', l.provide_xml, 'Months', l.productsubscriptionterm:n ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.productsubscriptionterm:n ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for Months: ' $ g.Validation_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.productsubscriptionterm:frequency EQ 'fixedweekly' }">
		<MvIF EXPR = "{ NOT PRV_Tag_List(		'R', l.provide_xml, 'DayOfWeek', l.productsubscriptionterm:fixed_dow, 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday', '1,2,3,4,5,6,7' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.productsubscriptionterm:frequency EQ 'fixedmonthly' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Integer(	'R', l.provide_xml, 'DayOfMonth', l.productsubscriptionterm:fixed_dom ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.productsubscriptionterm:fixed_dom, 1, 31 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for DayOfMonth: ' $ g.Validation_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.productsubscriptionterm:frequency EQ 'dates' }">
		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
			<MvIF EXPR = "{ tolower( l.child_xml:name ) NE 'date' }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT PRV_Attribute_Integer( l.child_xml, 'month',		l.productsubscriptiontermdate:term_mon ) OR
							NOT PRV_Attribute_Integer( l.child_xml, 'dayofmonth',	l.productsubscriptiontermdate:term_dom ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.productsubscriptiontermdate:term_mon, 1, 12 ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Invalid value for month: ' $ g.Validation_Message ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.productsubscriptiontermdate:term_dom, 1, 31 ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Invalid value for dayofmonth: ' $ g.Validation_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ miva_array_search( l.productsubscriptiontermdates, 1, l.search_productsubscriptiontermdate, 'l.search_productsubscriptiontermdate:term_dom EQ l.productsubscriptiontermdate:term_dom AND l.search_productsubscriptiontermdate:term_mon EQ productsubscriptiontermdate:term_mon' ) }">
				<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Duplicate date found.  Ignoring duplicated date.' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.productsubscriptiontermdate_count"	VALUE = "{ miva_array_insert( l.productsubscriptiontermdates, l.productsubscriptiontermdate, -1 ) }">
		</MvFOREACH>

		<MvIF EXPR = "{ l.productsubscriptiontermdate_count EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'At least one Date must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductSubscriptionTerm_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'descrip',		l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_Description( l.product:id, l.descrip, l.productsubscriptionterm ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.descrip $ '\' not found for product \'' $ l.product:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.productsubscriptionterm:sub_count }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.productsubscriptionterm:descrip $ '\' is in use by one or more subscriptions and cannot be deleted' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Delete( l.productsubscriptionterm ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_ProductSubscriptionTerm_Delete_All" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'product_code', l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product with the code \'' $ l.product_code $ '\' does not exist' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.productsubscriptionterm" ARRAY = "l.productsubscriptionterms" COUNT = "{ [ g.Module_Feature_SUB_DB ].ProductSubscriptionTermList_Load_Product( l.product:id, l.productsubscriptionterms ) }">
		<MvIF EXPR = "{ l.productsubscriptionterm:sub_count }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Product Subscription Term \'' $ l.productsubscriptionterm:descrip $ '\' is in use by one or more subscriptions and cannot be deleted' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Delete( l.productsubscriptionterm ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_MivaPaySettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Load( l.settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'Enabled',								l.settings:enabled )			OR
					NOT PRV_Tag_Text(		'o', l.provide_xml,	'BaseURL',								l.settings:base_url )			OR 
					NOT PRV_Tag_Text(		'o', l.provide_xml,	'MerchantID',							l.settings:merchant )			OR
					NOT PRV_Tag_Text(		'o', l.provide_xml,	'SecretKey',							l.secret )						OR
					NOT PRV_Tag_Text(		'o', l.provide_xml,	'SigningKey',							l.signkey )						OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'GroupPaymentCardTypes',				l.settings:pct_group )			OR
					NOT PRV_Tag_Text(		'O', l.provide_xml, 'GroupedPaymentCardTypeDescription',	l.settings:pct_desc )			OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'CVVCheckoutPaymentCardType',			l.settings:cvv_co_pct,
																'Hidden,Optional,Required',				'hidden,optional,required' )	OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'CVVCheckoutPaymentCard',				l.settings:cvv_co_pc,
																'Hidden,Optional,Required',				'hidden,optional,required' )	OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'CVVAdminPaymentCardType',				l.settings:cvv_ad_pct,
																'Hidden,Optional,Required',				'hidden,optional,required' ) 	OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'OrderPaymentCards',					l.settings:ordr_cards )			OR
					NOT PRV_Tag_Integer(  	'O', l.provide_xml,	'OrderPaymentCardExpiration',			l.settings:ordr_days ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.settings:base_url }">																				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Base URL is required when MivaPay is enabled' ) }">
	<MvELSEIF EXPR = "{ ( substring_var( l.settings:base_url, len_var( l.settings:base_url ), 1 ) EQ '/' ) }">					<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Base URL must not end with \'/\'' ) }">
	<MvELSEIF EXPR = "{ ISNULL l.settings:merchant }">																			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Merchant is required when MivaPay is enabled' ) }">
	<MvELSEIF EXPR = "{ ( ISNULL l.settings:secret OR PRV_Tag_Exists( l.provide_xml, 'SecretKey' ) ) AND ISNULL l.secret }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Secret is required when MivaPay is enabled' ) }">
	<MvELSEIF EXPR = "{ ( ISNULL l.settings:signkey OR PRV_Tag_Exists( l.provide_xml, 'SigningKey' ) ) AND ISNULL l.signkey }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Sign Key is required when MivaPay is enabled' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.settings:ordr_days ) }">				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.secret }">
		<MvASSIGN NAME = "l.settings:secret"	VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.secret ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.signkey }">
		<MvASSIGN NAME = "l.settings:signkey"	VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.signkey ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Update( l.settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_SearchSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_DB ].SearchSettings_Load( l.original_searchsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_searchablecustomfield_count"	VALUE = "{ [ g.Module_Feature_SEA_DB ].SearchableCustomFieldList_Load( l.original_searchablecustomfields ) }">
	<MvASSIGN NAME = "l.searchsettings"							VALUE = "{ l.original_searchsettings }">

	<MvIF EXPR = "{ NOT PRV_Tag_Integer(	'O',		l.provide_xml, 'MaximumSearchTerms',			l.searchsettings:max_terms )	OR
					NOT PRV_Tag_Integer(	'O:nonneg', l.provide_xml, 'MaximumSearchResults',			l.searchsettings:max_res )		OR
					NOT PRV_Tag_Integer(	'O:nonneg', l.provide_xml, 'AnonymousSearchLogRetention',	l.searchsettings:logrtanon )	OR
					NOT PRV_Tag_Integer(	'O:nonneg', l.provide_xml, 'CustomerSearchLogRetention',	l.searchsettings:logrtcust )	OR
					NOT PRV_Tag_Integer(	'O:nonneg', l.provide_xml, 'OrderSearchLogRetention',		l.searchsettings:logrtorder )	OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml, 'SearchLogExcludedUserAgents',	l.searchsettings:logexua ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'AIProductSearchIndex' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Code( 'o', l.provide_xml, 'AIProductSearchIndex', l.index_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.index_code }">
			<MvASSIGN NAME = "l.searchsettings:index_id"	VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_DB ].AISearchIndex_Load_Code( l.index_code, l.index ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'AI Search Index with the code \'' $ l.index_code $ '\' does not exist' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.searchsettings:index_id"	VALUE = "{ l.index:id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'SearchableFields' ) }">
		<MvEVAL EXPR = "{ PRV_Action_Provision_Store_SearchSettings_Update_SearchableFields( l.provide_xml:tags:SearchableFields[ 1 ], l.searchsettings ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_searchablecustomfield_count"	VALUE = "{ [ g.Module_Feature_SEA_DB ].SearchableCustomFieldList_Load( l.original_searchablecustomfields ) }">

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'SearchableCustomFields' ) }">
		<MvASSIGN NAME = "l.update_searchablecustomfields"		VALUE = 0>
		<MvASSIGN NAME = "l.searchablecustomfield_count"		VALUE = "{ l.original_searchablecustomfield_count }">
		<MvASSIGN NAME = "l.searchablecustomfields"				VALUE = "{ l.original_searchablecustomfields }">
	<MvELSE>
		<MvASSIGN NAME = "l.update_searchablecustomfields"		VALUE = 1>
		<MvASSIGN NAME = "l.searchablecustomfield_count"		VALUE = "{ PRV_Action_Provision_Store_SearchSettings_Update_SearchableCustomFields( l.provide_xml:tags:SearchableCustomFields[ 1 ], l.original_searchablecustomfields, l.original_searchablecustomfield_count, l.searchablecustomfields ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_DB ].SearchSettings_Update( l.searchsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.update_searchablecustomfields }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_DB ].SearchableCustomField_Disable_All() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.searchablecustomfield" ARRAY = "l.searchablecustomfields" COUNT = "{ l.searchablecustomfield_count }">
			<MvIF EXPR = "{ [ g.Module_Feature_SEA_DB ].SearchableCustomFields_Equal_Default( l.searchablecustomfield ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_DB ].SearchableCustomField_Delete_Field( l.searchablecustomfield:module_id, l.searchablecustomfield:field_code ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_DB ].SearchableCustomField_Insert( l.searchablecustomfield ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_SEA_DB ].SearchableCustomField_Update( l.searchablecustomfield ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| The list of searchable fields is reloaded to pick up any records that were disabled by SearchableCustomField_Disable_All
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.searchablecustomfield_count"		VALUE = "{ [ g.Module_Feature_SEA_DB ].SearchableCustomFieldList_Load( l.searchablecustomfields ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_UT ].SearchSettings_Notify_Modules( l.original_searchsettings, l.original_searchablecustomfields, l.original_searchablecustomfield_count, l.searchsettings, l.searchablecustomfields, l.searchablecustomfield_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AISettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_DB ].AISettings_Load( l.aisettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.openai_token" VALUE = "">

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'O',			l.provide_xml, 'GenerativeAIEnabled',	l.aisettings:enabled )		OR
					NOT PRV_Tag_Text(		'O:50', 		l.provide_xml, 'OpenAIEngine',			l.aisettings:engine )		OR
					NOT PRV_Tag_Text(		'O',			l.provide_xml, 'OpenAIToken',			l.openai_token )			OR
					NOT PRV_Tag_Text(		'O:254',		l.provide_xml, 'MARSURL',				l.aisettings:mars_url )		OR
					NOT PRV_Tag_Text(		'O:254',		l.provide_xml, 'RedisHost',				l.aisettings:redishost )	OR
					NOT PRV_Tag_Integer(	'O:positive',	l.provide_xml, 'RedisPort',				l.aisettings:redisport )	OR
					NOT PRV_Tag_Integer(	'O:positive',	l.provide_xml, 'RedisTimeout',			l.aisettings:redisto )		OR
					NOT PRV_Tag_Code(		'o',			l.provide_xml, 'RedisKeyPrefix',		l.aisettings:redis_pfx )	OR
					NOT PRV_Tag_List( 		'O',			l.provide_xml, 	'VectorDatabase',		l.aisettings:vector_db,
																			'StoreRedis,SeparateRedis', 'store_redis,redis' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ( substring_var( l.aisettings:mars_url, len_var( l.aisettings:mars_url ), 1 ) EQ '/' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'MARSURL must not end with \'/\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.openai_token }">
		<MvASSIGN NAME = "l.aisettings:token" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.openai_token ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.aisettings:redisport, 1, 65535 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for RedisPort:' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'RedisPassword' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'RedisPassword', l.redispwd ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.redispwd }">
			<MvASSIGN NAME = "l.aisettings:redispwd" VALUE = "">
		<MvELSE>
			<MvASSIGN NAME = "l.aisettings:redispwd" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.redispwd ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_DB ].AISettings_Update( l.aisettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00155', 'AI Settings updated' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AISearchIndex_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Feature_AI_DB ].AISearchIndex_Defaults( l.index ) }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code(	 'R', 	 l.provide_xml, 'Code',			l.index:code )		OR
					NOT PRV_Tag_Text(	 'R:50', l.provide_xml, 'Source',		l.index:source ) 	OR
					NOT PRV_Tag_Text(	 'O',	 l.provide_xml, 'Template',		l.index:idx_templ ) OR
					NOT PRV_Tag_Boolean( 'O',	 l.provide_xml, 'Active',		l.index:active )	OR
					NOT PRV_Tag_Number(	 'O',	 l.provide_xml, 'SearchRange',	l.index:srch_range, 4, 3 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AI_DB ].AISearchIndex_Load_Code( l.index:code, l.existing_index ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'AI Search Index with the code \'' $ l.existing_index:code $ '\' already exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Range( l.index:srch_range, 0, 1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for SearchRange: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.index:idx_templ ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_UT ].MARS_Call_Embeddings( l.embeddings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT miva_array_search( l.embeddings, 1, l.embedding, 'strcasecmp( l.embedding:code, l.index:source ) EQ 0' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid Source' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_UT ].AISearchIndex_Template_Compile( l.index ) }">					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_AI_DB ].AISearchIndex_Insert( l.index ) }">							<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_AI_UT ].AISearchIndex_Redis_Create_Index( l.index, l.embedding ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00152', 'AI Search Index \'' $ l.index:code $ '\' created' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AISearchIndex_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.index_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_DB ].AISearchIndex_Load_Code( l.index_code, l.index ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'AI Search Index with the code \'' $ l.index_code $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_index" VALUE = "{ l.index }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code(	 'O',	 l.provide_xml, 'Code',			l.index:code )		OR
					NOT PRV_Tag_Text(	 'O:50', l.provide_xml, 'Source',		l.index:source )	OR
					NOT PRV_Tag_Text(	 'O', 	 l.provide_xml, 'Template',		l.index:idx_templ ) OR
					NOT PRV_Tag_Boolean( 'O', 	 l.provide_xml, 'Active',		l.index:active )	OR
					NOT PRV_Tag_Number(	 'O',	 l.provide_xml, 'SearchRange',	l.index:srch_range, 4, 3 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AI_DB ].AISearchIndex_Load_Code( l.index:code, l.existing_index ) AND l.existing_index:id NE l.index:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'AI Search Index with the code \'' $ l.existing_index:code $ '\' already exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Range( l.index:srch_range, 0, 1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for SearchRange: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.index:idx_templ ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_UT ].MARS_Call_Embeddings( l.embeddings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT miva_array_search( l.embeddings, 1, l.embedding, 'strcasecmp( l.embedding:code, l.index:source ) EQ 0' ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid Source' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_UT ].AISearchIndex_Template_Compile( l.index ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_AI_DB ].AISearchIndex_Update( l.index ) }">			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.original_index:source, l.index:source ) NE 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_UT ].AISearchIndex_Redis_Index_Recreate( l.index, l.embedding ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.original_index:code, l.index:code ) NE 0  }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_UT ].AISearchIndex_Template_Delete( l.original_index )  }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00153', 'AI Search Index \'' $ l.index:code $ '\' updated' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AISearchIndex_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_DB ].SearchSettings_Load( l.searchsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.index_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_DB ].AISearchIndex_Load_Code( l.index_code, l.index ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'AI Search Index with the code \'' $ l.index_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AI_UT ].AISearchIndex_Template_Delete( l.index ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_AI_DB ].AISearchIndex_Delete( l.index ) }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_AI_UT ].AISearchIndex_Redis_Delete_Index( l.index ) }">

	<MvIF EXPR = "{ l.index:id EQ l.searchsettings:index_id }">
		<MvASSIGN NAME = "l.searchsettings:index_id" VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SEA_DB ].SearchSettings_Update( l.searchsettings ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00154', 'AI Search Index \'' $ l.index:code $ '\' deleted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_SearchSettings_Update_SearchableFields" PARAMETERS = "provide_xml var, searchsettings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.searchsettings:code"		VALUE = 0>
	<MvASSIGN NAME = "l.searchsettings:name"		VALUE = 0>
	<MvASSIGN NAME = "l.searchsettings:sku"			VALUE = 0>
	<MvASSIGN NAME = "l.searchsettings:descrip"		VALUE = 0>
	<MvASSIGN NAME = "l.searchsettings:atr_code"	VALUE = 0>
	<MvASSIGN NAME = "l.searchsettings:atr_prompt"	VALUE = 0>
	<MvASSIGN NAME = "l.searchsettings:opt_code"	VALUE = 0>
	<MvASSIGN NAME = "l.searchsettings:opt_prompt"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'code' }">				<MvREFERENCE NAME = "l.enabled" VARIABLE = "l.searchsettings:code">			<MvREFERENCE NAME = "l.searchtype" VARIABLE = "l.searchsettings:code_st">	<MvREFERENCE NAME = "l.relevance" VARIABLE = "l.searchsettings:code_rel">	<MvREFERENCE NAME = "l.weight" VARIABLE = "l.searchsettings:code_wt">
		<MvELSEIF EXPR = "{ l.name EQ 'name' }">			<MvREFERENCE NAME = "l.enabled" VARIABLE = "l.searchsettings:name">			<MvREFERENCE NAME = "l.searchtype" VARIABLE = "l.searchsettings:name_st">	<MvREFERENCE NAME = "l.relevance" VARIABLE = "l.searchsettings:name_rel">	<MvREFERENCE NAME = "l.weight" VARIABLE = "l.searchsettings:name_wt">
		<MvELSEIF EXPR = "{ l.name EQ 'sku' }">				<MvREFERENCE NAME = "l.enabled" VARIABLE = "l.searchsettings:sku">			<MvREFERENCE NAME = "l.searchtype" VARIABLE = "l.searchsettings:sku_st">	<MvREFERENCE NAME = "l.relevance" VARIABLE = "l.searchsettings:sku_rel">	<MvREFERENCE NAME = "l.weight" VARIABLE = "l.searchsettings:sku_wt">
		<MvELSEIF EXPR = "{ l.name EQ 'description' }">		<MvREFERENCE NAME = "l.enabled" VARIABLE = "l.searchsettings:descrip">		<MvREFERENCE NAME = "l.searchtype" VARIABLE = "l.searchsettings:desc_st">	<MvREFERENCE NAME = "l.relevance" VARIABLE = "l.searchsettings:desc_rel">	<MvREFERENCE NAME = "l.weight" VARIABLE = "l.searchsettings:desc_wt">
		<MvELSEIF EXPR = "{ l.name EQ 'attributecode' }">	<MvREFERENCE NAME = "l.enabled" VARIABLE = "l.searchsettings:atr_code">		<MvREFERENCE NAME = "l.searchtype" VARIABLE = "l.searchsettings:acode_st">	<MvREFERENCE NAME = "l.relevance" VARIABLE = "l.searchsettings:acode_rel">	<MvREFERENCE NAME = "l.weight" VARIABLE = "l.searchsettings:acode_wt">
		<MvELSEIF EXPR = "{ l.name EQ 'attributeprompt' }">	<MvREFERENCE NAME = "l.enabled" VARIABLE = "l.searchsettings:atr_prompt">	<MvREFERENCE NAME = "l.searchtype" VARIABLE = "l.searchsettings:aprom_st">	<MvREFERENCE NAME = "l.relevance" VARIABLE = "l.searchsettings:aprom_rel">	<MvREFERENCE NAME = "l.weight" VARIABLE = "l.searchsettings:aprom_wt">
		<MvELSEIF EXPR = "{ l.name EQ 'optioncode' }">		<MvREFERENCE NAME = "l.enabled" VARIABLE = "l.searchsettings:opt_code">		<MvREFERENCE NAME = "l.searchtype" VARIABLE = "l.searchsettings:ocode_st">	<MvREFERENCE NAME = "l.relevance" VARIABLE = "l.searchsettings:ocode_rel">	<MvREFERENCE NAME = "l.weight" VARIABLE = "l.searchsettings:ocode_wt">
		<MvELSEIF EXPR = "{ l.name EQ 'optionprompt' }">	<MvREFERENCE NAME = "l.enabled" VARIABLE = "l.searchsettings:opt_prompt">	<MvREFERENCE NAME = "l.searchtype" VARIABLE = "l.searchsettings:oprom_st">	<MvREFERENCE NAME = "l.relevance" VARIABLE = "l.searchsettings:oprom_rel">	<MvREFERENCE NAME = "l.weight" VARIABLE = "l.searchsettings:oprom_wt">
		<MvELSE>
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.child_xml, 'enabled' ) }">
			<MvASSIGN NAME = "l.enabled" VALUE = 1>
		<MvELSEIF EXPR = "{ NOT PRV_Attribute_Boolean( l.child_xml, 'enabled', l.enabled ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ PRV_Attribute_Exists( l.child_xml, 'searchtype' ) }">
			<MvIF EXPR = "{ NOT PRV_Attribute_List( l.child_xml, 'searchtype', l.searchtype,
													'exact,contains,contains_term,fulltext',
													'exact,contains,contains_term,fulltext' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ ( l.searchtype EQ 'fulltext' ) AND ( NOT [ g.Module_Library_Native_DBAPI ].DB_FULLTEXT_Supported() ) }">
				<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'The current database does not support full text searching' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ PRV_Attribute_Exists( l.child_xml, 'relevance' ) }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Boolean( l.child_xml, 'relevance', l.relevance ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.relevance AND ( NOT [ g.Module_Library_Native_DBAPI ].DB_FULLTEXT_Supported() ) }">
				<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'The current database does not support relevance sorting' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ PRV_Attribute_Exists( l.child_xml, 'weight' ) }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Number( l.child_xml, 'weight', l.weight, 10, 2 ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_SearchSettings_Update_SearchableCustomFields" PARAMETERS = "provide_xml var, original_searchablecustomfields var, original_searchablecustomfield_count, searchablecustomfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.searchablecustomfield_count"				VALUE = 0>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.capabilities"							VALUE = "">

		<MvIF EXPR = "{ tolower( l.child_xml:name ) NE 'searchablecustomfield' }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'module_code', l.module_code ) OR
						NOT PRV_Attribute_Text( l.child_xml, 'field',		l.field_code ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
			</MvIF>

			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' could not be found' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT l.module:active }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' is deactivated' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.module:id ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.module:api_ver LT 9.07 }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Module API version must be 9.07 or higher' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT l.module:feature_hash:fields_prod }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' does not provide feature \'fields_prod\'' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Product_Field_Capabilities( l.module, l.field_code, l.capabilities ) }">

		<MvIF EXPR = "{ NOT l.capabilities:search }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Field \'' $ l.field_code $ '\' does not support searching' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ miva_array_search( l.original_searchablecustomfields, 1, l.existing_searchablecustomfield, '( l.existing_searchablecustomfield:module_id EQ l.module:id ) AND ( NOT strcasecmp( l.existing_searchablecustomfield:field_code, l.field_code ) )' ) }">
			<MvASSIGN NAME = "l.searchablecustomfield"				VALUE = "{ l.existing_searchablecustomfield }">
		<MvELSE>
			<MvASSIGN NAME = "l.searchablecustomfield"				VALUE = "">
			<MvASSIGN NAME = "l.searchablecustomfield:module_id"	VALUE = "{ l.module:id }">
			<MvASSIGN NAME = "l.searchablecustomfield:field_code"	VALUE = "{ l.field_code }">
			<MvASSIGN NAME = "l.searchablecustomfield:enabled"		VALUE = 1>
			<MvASSIGN NAME = "l.searchablecustomfield:searchtype"	VALUE = "contains_term">
			<MvASSIGN NAME = "l.searchablecustomfield:relevance"	VALUE = 0>
			<MvASSIGN NAME = "l.searchablecustomfield:weight"		VALUE = 1.00>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.child_xml, 'enabled' ) }">
			<MvASSIGN NAME = "l.searchablecustomfield:enabled"		VALUE = 1>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Attribute_Boolean( l.child_xml, 'enabled', l.searchablecustomfield:enabled ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ PRV_Attribute_Exists( l.child_xml, 'searchtype' ) }">
			<MvIF EXPR = "{ NOT PRV_Attribute_List( l.child_xml, 'searchtype', l.searchablecustomfield:searchtype,
													'exact,contains,contains_term,fulltext',
													'exact,contains,contains_term,fulltext' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.searchablecustomfield:searchtype EQ 'fulltext' }">
				<MvIF EXPR = "{ NOT l.capabilities:search_fulltext }">
					<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Field \'' $ l.field_code $ '\' does not support full text searching' ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_FULLTEXT_Supported() }">
					<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'The current database does not support full text searching' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ PRV_Attribute_Exists( l.child_xml, 'relevance' ) }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Boolean( l.child_xml, 'relevance', l.searchablecustomfield:relevance ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.searchablecustomfield:relevance }">
				<MvIF EXPR = "{ NOT l.capabilities:orderby_relevance }">
					<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Field \'' $ l.field_code $ '\' does not support relevance sorting' ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_FULLTEXT_Supported() }">
					<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'The current database does not support relevance sorting' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ PRV_Attribute_Exists( l.child_xml, 'weight' ) }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Number( l.child_xml, 'weight', l.searchablecustomfield:weight, 10, 2 ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.searchablecustomfield_count"			VALUE = "{ miva_array_insert_var( l.searchablecustomfields, l.searchablecustomfield, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.searchablecustomfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_FacetRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'module',		l.module_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'facet_code',	l.facet_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:prod_facet }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' does not implement the prod_facet feature.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FCT_DB ].FacetRules_Load_FacetOrDefault( l.module_code, l.facet_code, l.facetrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Integer(  	'o', l.provide_xml, 'Priority',					l.facetrules:priority )		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'DisplayName',				l.facetrules:disp_name ) 	OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'GlobalHandling',			l.facetrules:handle,
																'Show,Hide,Disable',
																'show,hide,disable' )									OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'DefaultCategoryHandling',	l.facetrules:cathandle,
																'Show,Hide,Disable',
																'show,hide,disable' )									OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'Type',						l.facetrules:type,
																'radio,checkbox,select,nested,rangeslider',
																'radio,checkbox,select,nested,rangeslider' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FCT_DB ].FacetRules_Insert( l.facetrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_FCT_DB ].FacetRules_Update( l.facetrules ) }">				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CategoryFacetRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'category_code',	l.category_code )	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'module',		l.module_code )		OR
					NOT PRV_Attribute_Text( l.provide_xml, 'facet_code',	l.facet_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:prod_facet }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' does not implement the prod_facet feature.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FCT_DB ].CategoryFacetRules_Load_FacetOrDefault( l.category:id, l.module_code, l.facet_code, l.categoryfacetrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Integer(  	'o', l.provide_xml, 'Priority',		l.categoryfacetrules:priority )		OR
					NOT PRV_Tag_Text( 		'o', l.provide_xml, 'DisplayName',	l.categoryfacetrules:disp_name ) 	OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'Handling',		l.categoryfacetrules:handle,			
																'Show,Hide,Disable',
																'show,hide,disable' )								OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'Type',			l.categoryfacetrules:type,
																'radio,checkbox,select,nested,rangeslider',
																'radio,checkbox,select,nested,rangeslider' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FCT_DB ].CategoryFacetRules_Insert( l.categoryfacetrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_FCT_DB ].CategoryFacetRules_Update( l.categoryfacetrules ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PaymentCardType_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R', l.provide_xml, 'Type',				l.paymentcardtype:type )		OR
					NOT PRV_Tag_Text(		'o', l.provide_xml,	'Prefixes',			l.paymentcardtype:prefixes )	OR
					NOT PRV_Tag_Text(		'o', l.provide_xml,	'Lengths',			l.paymentcardtype:lengths )		OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'CVV',				l.paymentcardtype:cvv ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.paymentcardtype:type, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Type \'' $ l.paymentcardtype:type $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.paymentcardtype:prefixes }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].PaymentCardType_Validate_Prefixes( l.paymentcardtype:prefixes ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.paymentcardtype:lengths }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].PaymentCardType_Validate_Lengths( l.paymentcardtype:lengths ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Lengths must be numeric.  Multiple values must be separated by commas.' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'LinkedPaymentMethod' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml:tags:LinkedPaymentMethod[ 1 ], 'module_code', l.mod_code ) OR 
						NOT PRV_Attribute_Text( l.provide_xml:tags:LinkedPaymentMethod[ 1 ], 'method_code', l.meth_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.mod_code OR NOT ISNULL l.meth_code }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code_Cached( l.mod_code, l.module ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The specified payment module \'' $ l.mod_code $ '\' does not exist' ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Load_Cached( l.module:id, 'payment', l.storemodule ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The specified payment module \'' $ l.module:name $ '\' is not installed in the store' ) }">
			<MvELSEIF EXPR = "{ NOT l.module:active }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' has been deactivated' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.method_capabilities" VALUE = "">

			<MvIF EXPR = "{ l.module:api_ver GE 9.06 }">
				<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].PaymentModule_Method_Capabilities( l.module, l.meth_code, l.method_capabilities ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.method_capabilities:mivapay }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'MivaPay is not supported for the selected payment card type. Please ensure that the linked payment method supports MivaPay.' ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.paymentcardtype:mod_code"	VALUE = "{ l.mod_code }">
		<MvASSIGN NAME = "l.paymentcardtype:meth_code"	VALUE = "{ l.meth_code }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Insert( l.paymentcardtype ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PaymentCardType_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'type', l.type ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.type, l.paymentcardtype ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment Card Type with type \'' $ l.type $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O', l.provide_xml, 'Type',	l.paymentcardtype:type ) OR
					NOT PRV_Tag_Boolean(	'O', l.provide_xml, 'CVV',	l.paymentcardtype:cvv ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.type NE l.paymentcardtype:type }">
		<MvIF EXPR = "{ [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.paymentcardtype:type, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Type \'' $ l.paymentcardtype:type $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Prefixes' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml,	'Prefixes', l.paymentcardtype:prefixes ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.paymentcardtype:prefixes }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].PaymentCardType_Validate_Prefixes( l.paymentcardtype:prefixes ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Lengths' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml,	'Lengths', l.paymentcardtype:lengths ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.paymentcardtype:lengths }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].PaymentCardType_Validate_Lengths( l.paymentcardtype:lengths ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Lengths must be numeric.  Multiple values must be separated by commas.' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'LinkedPaymentMethod' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml:tags:LinkedPaymentMethod[ 1 ], 'module_code', l.mod_code ) OR 
						NOT PRV_Attribute_Text( l.provide_xml:tags:LinkedPaymentMethod[ 1 ], 'method_code', l.meth_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.mod_code OR NOT ISNULL l.meth_code }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code_Cached( l.mod_code, l.module ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The specified payment module \'' $ l.mod_code $ '\' does not exist' ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Load_Cached( l.module:id, 'payment', l.storemodule ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The specified payment module \'' $ l.module:name $ '\' is not installed in the store' ) }">
			<MvELSEIF EXPR = "{ NOT l.module:active }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' has been deactivated' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.method_capabilities" VALUE = "">

			<MvIF EXPR = "{ l.module:api_ver GE 9.06 }">
				<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].PaymentModule_Method_Capabilities( l.module, l.meth_code, l.method_capabilities ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.method_capabilities:mivapay }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'MivaPay is not supported for the selected payment card type. Please ensure that the linked payment method supports MivaPay.' ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.paymentcardtype:mod_code"	VALUE = "{ l.mod_code }">
		<MvASSIGN NAME = "l.paymentcardtype:meth_code"	VALUE = "{ l.meth_code }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Update( l.paymentcardtype ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PaymentCardType_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'type', l.type ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( l.type, l.paymentcardtype ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Payment Card Type with type \'' $ l.type $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Delete( l.paymentcardtype:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CopyProductRules_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.copyproductrules"				VALUE = "">
	<MvASSIGN NAME = "l.copyproductrules:product"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:attributes"	VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:categories"	VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:invset"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:invlevel"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:images"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:relprod"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:upsale"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:availgroup"	VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:pricegroup"	VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:ddownload"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:giftcert"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:subscrip"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:payment"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:shipping"		VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:kit"			VALUE = 0>
	<MvASSIGN NAME = "l.copyproductrules:variants"		VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R:100',	l.provide_xml, 'Name',							l.copyproductrules:name )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'CoreProductData',				l.copyproductrules:product ) 	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Attributes',					l.copyproductrules:attributes )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'CategoryAssignments',			l.copyproductrules:categories )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'InventorySettings',				l.copyproductrules:invset )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'InventoryLevel',				l.copyproductrules:invlevel )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Images',						l.copyproductrules:images )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'RelatedProducts',				l.copyproductrules:relprod )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Upsale',						l.copyproductrules:upsale )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'AvailabilityGroupAssignments',	l.copyproductrules:availgroup )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'PriceGroupAssignments',			l.copyproductrules:pricegroup )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'DigitalDownloadSettings',		l.copyproductrules:ddownload )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'GiftCertificateSales',			l.copyproductrules:giftcert )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'SubscriptionSettings',			l.copyproductrules:subscrip )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'PaymentRules',					l.copyproductrules:payment )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'ShippingRules',					l.copyproductrules:shipping )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'ProductKits',					l.copyproductrules:kit )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'ProductVariants',				l.copyproductrules:variants ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_UT ].CopyProductRules_Validate( l.copyproductrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_CPD_DB ].CopyProductRules_Load_Name( l.copyproductrules:name, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A rule with the name \'' $ l.copyproductrules:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Modules' ) }">
		<MvIF EXPR = "{ NOT PRV_CopyProductRules_Modules( l.provide_xml:tags:Modules[ 1 ], l.modules, l.module_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CustomFields' ) }">
		<MvIF EXPR = "{ NOT PRV_CopyProductRules_CustomFields( l.provide_xml:tags:CustomFields[ 1 ], l.customfields, l.customfield_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRule_Insert( l.copyproductrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00087', 'Copy product rules for \'' $ l.copyproductrules:name $ '\' created' ) }">

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Modules' ) }">
		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ l.module_count }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRulesXModule_Insert( l.copyproductrules:id, l.module:code ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CustomFields' ) }">
		<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.customfields" COUNT = "{ l.customfield_count }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRulesXCustomField_Insert( l.copyproductrules:id, l.customfield:module:code, l.customfield:field_code ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvFOREACH>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CopyProductRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name', l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRules_Load_Name( l.name, l.copyproductrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Copy product rule \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O:100',	l.provide_xml, 'Name',							l.copyproductrules:name )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'CoreProductData',				l.copyproductrules:product ) 	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Attributes',					l.copyproductrules:attributes )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'CategoryAssignments',			l.copyproductrules:categories )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'InventorySettings',				l.copyproductrules:invset )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'InventoryLevel',				l.copyproductrules:invlevel )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Images',						l.copyproductrules:images )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'RelatedProducts',				l.copyproductrules:relprod )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Upsale',						l.copyproductrules:upsale )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'AvailabilityGroupAssignments',	l.copyproductrules:availgroup )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'PriceGroupAssignments',			l.copyproductrules:pricegroup )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'DigitalDownloadSettings',		l.copyproductrules:ddownload )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'GiftCertificateSales',			l.copyproductrules:giftcert )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'SubscriptionSettings',			l.copyproductrules:subscrip )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'PaymentRules',					l.copyproductrules:payment )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'ShippingRules',					l.copyproductrules:shipping )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'ProductKits',					l.copyproductrules:kit )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'ProductVariants',				l.copyproductrules:variants ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_UT ].CopyProductRules_Validate( l.copyproductrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_CPD_DB ].CopyProductRules_Load_Name( l.copyproductrules:name, l.existing_copyproductrules ) AND l.copyproductrules:id NE l.existing_copyproductrules:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A rule with the name \'' $ l.copyproductrules:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Modules' ) }">
		<MvIF EXPR = "{ NOT PRV_CopyProductRules_Modules( l.provide_xml:tags:Modules[ 1 ], l.modules, l.module_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CustomFields' ) }">
		<MvIF EXPR = "{ NOT PRV_CopyProductRules_CustomFields( l.provide_xml:tags:CustomFields[ 1 ], l.customfields, l.customfield_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRule_Update( l.copyproductrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00088', 'Copy product rules for \'' $ l.copyproductrules:name $ '\' updated' ) }">

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Modules' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRulesXModule_Delete_All_RulesID( l.copyproductrules:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ l.module_count }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRulesXModule_Insert( l.copyproductrules:id, l.module:code ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CustomFields' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRulesXCustomField_Delete_All_RulesID( l.copyproductrules:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.customfields" COUNT = "{ l.customfield_count }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRulesXCustomField_Insert( l.copyproductrules:id, l.customfield:module:code, l.customfield:field_code ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvFOREACH>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CopyProductRules_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name', l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRules_Load_Name( l.name, l.copyproductrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Copy product rule \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CPD_DB ].CopyProductRules_Delete( l.copyproductrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00089', 'Copy product rules for \'' $ l.copyproductrules:name $ '\' deleted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_CopyProductRules_Modules" PARAMETERS = "provide_xml var, modules var, module_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.modules"		VALUE = "">
	<MvASSIGN NAME = "l.module_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'module' }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'module_code', l.module_code ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' does not exist' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.module:active }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' is deactivated' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.module:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.module:feature_hash:copy_prod }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' does not provide feature \'copy_prod\'' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT miva_array_search( l.modules, 1, l.element, 'strcasecmp( l.element:code, l.module_code ) EQ 0' ) }">
				<MvASSIGN NAME = "l.module_count" VALUE = "{ miva_array_insert_var( l.modules, l.module, -1 ) }">
			</MvIF>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_CopyProductRules_CustomFields" PARAMETERS = "provide_xml var, customfields var, customfield_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customfields"		VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'customfield' }">
			<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'module_code', l.module_code ) OR
							NOT PRV_Attribute_Text( l.child_xml, 'field_code', l.field_code ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' does not exist' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.module:active }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' is deactivated' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.module:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.module:feature_hash:fields_prod }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Module \'' $ l.module_code $ '\' does not provide feature \'fields_prod\'' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT miva_array_search( l.modules, 1, l.element, 'strcasecmp( l.element:module:code, l.module_code ) EQ 0 AND strcasecmp( l.element:field_code, l.field_code ) EQ 0' ) }">
				<MvASSIGN NAME = "l.customfield"				VALUE = "">
				<MvASSIGN NAME = "l.customfield:module"			VALUE = "{ l.module }">
				<MvASSIGN NAME = "l.customfield:field_code"		VALUE = "{ l.field_code }">
				<MvASSIGN NAME = "l.customfield_count"			VALUE = "{ miva_array_insert_var( l.customfields, l.customfield, -1 ) }">
			</MvIF>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CopyPageRules_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.copypagerules"				VALUE = "">
	<MvASSIGN NAME = "l.copypagerules:secure"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:title"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:template"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:items"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:settings"		VALUE = "none">
	<MvASSIGN NAME = "l.copypagerules:jsres"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:cssres"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:cacheset"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:public"		VALUE = 0>

	<MvASSIGN NAME = "l.items"						VALUE = "">
	<MvASSIGN NAME = "l.item_count"					VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R:100',	l.provide_xml, 'Name',							l.copypagerules:name )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Secure',						l.copypagerules:secure ) 	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Title',							l.copypagerules:title )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Template',						l.copypagerules:template )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Items',							l.copypagerules:items )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'JavaScriptResourceAssignments',	l.copypagerules:jsres )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'CSSResourceAssignments',		l.copypagerules:cssres )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'CacheSettings',					l.copypagerules:cacheset )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Public',						l.copypagerules:public ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CopyPageRules_Load_Name( l.copypagerules:name, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A rule with the name \'' $ l.copypagerules:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:Settings[ 1 ], 'items', l.copypagerules:settings, 'all,none,specific', 'all,none,specific' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.copypagerules:settings EQ 'specific' }">
			<MvIF EXPR = "{ NOT PRV_CopyPageRules_Settings( l.provide_xml:tags:Settings[ 1 ], l.items, l.item_count ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CopyPageRule_Insert( l.copypagerules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00091', 'Copy page rules for \'' $ l.copypagerules:name $ '\' created' ) }">

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items" COUNT = "{ l.item_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CopyPageRulesXSettings_Insert( l.copypagerules:id, l.item:code ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CopyPageRules_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name', l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CopyPageRules_Load_Name( l.name, l.copypagerules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Copy page rule \'' $ l.name $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.items"		VALUE = "">
	<MvASSIGN NAME = "l.item_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Text(		'O:100',	l.provide_xml, 'Name',							l.copypagerules:name )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Secure',						l.copypagerules:secure ) 	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Title',							l.copypagerules:title )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Template',						l.copypagerules:template )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Items',							l.copypagerules:items )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'JavaScriptResourceAssignments',	l.copypagerules:jsres )		OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'CSSResourceAssignments',		l.copypagerules:cssres )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'CacheSettings',					l.copypagerules:cacheset )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Public',						l.copypagerules:public ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CopyPageRules_Load_Name( l.copypagerules:name, l.existing_copypagerules ) AND l.copypagerules:id NE l.existing_copypagerules:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A rule with the name \'' $ l.copypagerules:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:Settings[ 1 ], 'items', l.copypagerules:settings, 'all,none,specific', 'all,none,specific' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.copypagerules:settings EQ 'specific' }">
			<MvIF EXPR = "{ NOT PRV_CopyPageRules_Settings( l.provide_xml:tags:Settings[ 1 ], l.items, l.item_count ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CopyPageRule_Update( l.copypagerules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00092', 'Copy page rules for \'' $ l.copypagerules:name $ '\' updated' ) }">

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CopyPageRulesXSettings_Delete_All_RulesID( l.copypagerules:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ l.copypagerules:settings EQ 'specific' }">
			<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items" COUNT = "{ l.item_count }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CopyPageRulesXSettings_Insert( l.copypagerules:id, l.item:code ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>
			</MvFOREACH>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CopyPageRules_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name', l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CopyPageRules_Load_Name( l.name, l.copypagerules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Copy page rule \'' $ l.name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CopyPageRules_Delete( l.copypagerules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00093', 'Copy page rules for \'' $ l.copypagerules:name $ '\' deleted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_CopyPageRules_Settings" PARAMETERS = "provide_xml var, items var, item_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name NE 'item' }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'code', l.item_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.item_code, l.item ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.child_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Item \'' $ l.item_code $ '\' not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT miva_array_search( l.items, 1, l.element, 'strcasecmp( l.element:code, l.item:code ) EQ 0' ) }">
			<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_insert_var( l.items, l.item, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
|	Domain Provisioning Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "PRV_User_Icon" PARAMETERS = "provide_xml var, user var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Icon' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Icon', l.icon ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.provide_xml:tags:Icon[ 1 ], 'type' ) }">
		<MvIF EXPR = "{ ( ':' IN l.icon ) OR ( ( '/' IN l.icon ) EQ 1 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Icon[ 1 ], 'Image filepaths must be local and relative to the Base Directory for Graphics' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.user:icon"				VALUE = "{ l.icon }">
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Attribute_List(	l.provide_xml:tags:Icon[ 1 ], 'type', l.icon_type, 'base64', 'base64' )  }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.binary_file_data"		VALUE = "{ crypto_base64_decode( l.icon ) }">
		<MvASSIGN NAME = "l.new_filename"			VALUE = "{ MakeSessionID() }">
		<MvASSIGN NAME = "l.imagedir"				VALUE = "{ [ g.Module_Admin ].User_Icon_Directory() }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Image_Type_From_Header_Memory( l.binary_file_data, l.type ) }">
			<MvASSIGN NAME = "l.null"				VALUE = "{ sdelete( g.imageroot $ l.destfile_path ) }">

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Value_In_List( l.type, 'jpg,png,webp,avif' ) }">
			<MvASSIGN NAME = "l.null"				VALUE = "{ sdelete( g.imageroot $ l.destfile_path ) }">

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Icon[ 1 ], 'Invalid or unsupported image type' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', g.imageroot $ l.imagedir ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFOR INDEX = "l.attempt" COUNT = "{ 100 }">
			<MvIF EXPR = "{ l.attempt GT 1 }">
				<MvASSIGN NAME = "l.new_filename"	VALUE = "{ MakeSessionID() }">
			</MvIF>

			<MvASSIGN NAME = "l.destfile_path"		VALUE = "{ l.imagedir $ l.new_filename $ '.' $ l.type }">

			<MvIF EXPR = "{ file_create( g.imageroot $ l.destfile_path, 'script', l.binary_file_data ) GE 0 }">
				<MvFORSTOP>
			</MvIF>
		</MvFOR>

		<MvIF EXPR = "{ l.attempt GT 100 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Icon[ 1 ], 'Unable to generate a unique image filename after 100 attempts' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.user:icon"				VALUE = "{ l.destfile_path }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Update_Icon( l.user ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_User_Expiration" PARAMETERS = "provide_xml var, user var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'ExpirationDate' ) }">
		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'ExpiresIn' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Only one of ExpirationDate and ExpiresIn may be specified' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Tag_Date( l.provide_xml, 'ExpirationDate', l.user_exp_date ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.user:exp_date" VALUE = "{ l.user_exp_date }">
	<MvELSEIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'ExpiresIn' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'o', l.provide_xml, 'ExpiresIn', l.interval ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:ExpiresIn[ 1 ], 'units', l.multiple, 'minutes,hours,days', '60,3600,86400' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.interval ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'ExpiresIn must be a whole number greater than 0' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.user:exp_date"	VALUE = "{ s.dyn_time_t + ( l.interval * l.multiple ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_User_License" PARAMETERS = "provide_xml var, user var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'License' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:License[ 1 ], 'type', l.lictype, 'concurrent,reserved,developer', 'concurrent,reserved,developer' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.lictype EQ 'concurrent' }">
		<MvASSIGN NAME = "l.user:license"		VALUE = "">
		<MvASSIGN NAME = "l.user:lic_dt"		VALUE = 0>
	<MvELSEIF EXPR = "{ l.lictype EQ 'developer' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'License', l.license ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.license }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].LicenseManager_Register_User( l.user, l.lictype, l.license ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvASSIGN NAME = "l.user:license"	VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.license ) }">
			<MvASSIGN NAME = "l.user:lic_dt"	VALUE = "{ s.dyn_time_t }">
		<MvELSEIF EXPR = "{ l.user:lictype NE 'developer' }">
			<MvASSIGN NAME = "l.user:license"	VALUE = "">
			<MvASSIGN NAME = "l.user:lic_dt"	VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.lictype EQ 'reserved' }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'License', l.license ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].LicenseManager_Register_User( l.user, l.lictype, l.license ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.user:license"		VALUE = "{ l.license }">
		<MvASSIGN NAME = "l.user:lic_dt"		VALUE = "{ s.dyn_time_t }">
	</MvIF>

	<MvASSIGN NAME = "l.user:lictype"			VALUE = "{ l.lictype }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_UserAdd" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o:254', l.provide_xml, 'Email', l.user:email ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.is_mivaemployee"		VALUE = "{ [ g.Module_Library_DB ].User_Is_MivaEmployee( l.user:email ) }">
	<MvASSIGN NAME = "l.force_twofactor_change"	VALUE = 0>

	<MvASSIGN NAME = "l.user:page_len"			VALUE = 10>
	<MvASSIGN NAME = "l.user:mmbl_count"		VALUE = 0>
	<MvASSIGN NAME = "l.user:mmbl_sort"			VALUE = 0>
	<MvASSIGN NAME = "l.user:admin"				VALUE = 0>
	<MvASSIGN NAME = "l.user:smod"				VALUE = 0>
	<MvASSIGN NAME = "l.user:forcepwchg"		VALUE = 0>
	<MvASSIGN NAME = "l.user:vfybrowser" 		VALUE = 1>
	<MvASSIGN NAME = "l.user:forcetf"			VALUE = 1>
	<MvASSIGN NAME = "l.user:exp_date"			VALUE = 0>
	<MvASSIGN NAME = "l.user:hover_on"			VALUE = 0>
	<MvASSIGN NAME = "l.user:wwdescrip" 		VALUE = 0>
	<MvASSIGN NAME = "l.user:lictype"			VALUE = "concurrent">
	<MvASSIGN NAME = "l.user:license"			VALUE = "">
	<MvASSIGN NAME = "l.user:lic_dt"			VALUE = 0>
	<MvASSIGN NAME = "l.user:cellphone"			VALUE = "">
	<MvASSIGN NAME = "l.user:ip_range"			VALUE = "">
	<MvASSIGN NAME = "l.user:icon"				VALUE = "graphics/en-US/admin/user_icon_1.png">
	<MvASSIGN NAME = "l.user:descrip"			VALUE = "">
	<MvASSIGN NAME = "l.user:tf_type"			VALUE = "{ ternary( l.is_mivaemployee, 'mivaemployee', '' ) }">
	<MvASSIGN NAME = "l.user:ssh_pubkey"		VALUE = "">
	<MvASSIGN NAME = "l.user:license_ok"		VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'R:40',		l.provide_xml, 'Name',								l.user:name )		OR
					NOT PRV_Tag_Text(		'R',		l.provide_xml, 'Password',							l.user_password )	OR
					NOT PRV_Tag_Text(		'o:50',		l.provide_xml, 'CellPhone',							l.user:cellphone )	OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml, 'IPRange',							l.user:ip_range )	OR
					NOT PRV_Tag_Text(		'o:254',	l.provide_xml, 'Description',						l.user:descrip )	OR
					NOT PRV_Tag_Integer(  	'o:nonneg',	l.provide_xml, 'DefaultPagination',					l.user:page_len )	OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'Administrator',						l.user:admin )		OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'HoverOn',							l.user:hover_on )	OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'BatchListSaveSortWhenSearching',	l.user:mmbl_sort )	OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'StartInSimpleMode',					l.user:smod )		OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'ForcePasswordChange',				l.user:forcepwchg )	OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'ForceTwoFactor',					l.user:forcetf )	OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'WordWrapProductDescription',		l.user:wwdescrip )	OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml, 'SSHAuthentication',					l.user:ssh_pubkey )	OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'EULAAccepted',						l.user:license_ok ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.is_mivaemployee }">
		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'VerifyBrowser' ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Miva employee account Verify Browser setting may not be changed' ) }">
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'ForceTwoFactorChange' ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Two Factor settings for Miva Employee accounts cannot be changed' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'VerifyBrowser',			l.user:vfybrowser ) OR
						NOT PRV_Tag_Boolean( 'o', l.provide_xml, 'ForceTwoFactorChange',	l.force_twofactor_change ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.force_twofactor_change }">
			<MvASSIGN NAME = "l.user:tf_type" VALUE = "setup">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'DefaultBatchListLoadCount' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List(	l.provide_xml:tags:DefaultBatchListLoadCount[ 1 ], 'type',	l.type, 'auto,custom', 'auto,custom' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.type EQ 'auto' }">
			<MvASSIGN NAME = "l.user:mmbl_count" VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'R:nonneg', l.provide_xml, 'DefaultBatchListLoadCount', l.user:mmbl_count ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_User_Expiration( l.provide_xml, l.user ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].User_Load_Name( l.user:name, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User with the name \'' $ l.user:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.user:cellphone }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Phone( l.user:cellphone, g.Domain:country ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please enter a valid cell phone number' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.user:ip_range }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_CIDR_List( l.user:ip_range ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.user:ip_range" VALUE = "{ [ g.Module_Library_Utilities ].Normalize_CIDR_List( l.user:ip_range ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_Utilities ].AdminPasswordEncrypted( l.user_password ) }">
		<MvASSIGN NAME = "l.user:password"	VALUE = "{ l.user_password }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].ValidateAdminPassword( l.null, l.user_password ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.user:password"	VALUE = "{ [ g.Module_Library_Utilities ].EncryptAdminPassword( l.user_password ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.user:ssh_pubkey }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Crypto ].SSH_PublicKey_Parse( l.user:ssh_pubkey, l.key_type, l.key_id, l.key_data ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'SSHAuthentication: ' $ g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_User_License( l.provide_xml, l.user ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'TwoFactorAuthentication' ) }">
		<MvIF EXPR = "{ l.is_mivaemployee }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Miva employee account Two-factor Authentication setting may not be changed' ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'type', l.user:tf_type, 'none,totp,yubicloud,webauthn', ',totp,yubicloud,webauthn' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ l.user:tf_type EQ 'totp' }">
				<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'TOTPKey', l.totp_key ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvASSIGN NAME = "l.usertotptoken:totp_key"			VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( [ g.Module_Library_Utilities ].Base32_Decode( l.totp_key ) ) }">
			<MvELSEIF EXPR = "{ l.user:tf_type EQ 'yubicloud' }">
				<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'YubiKeyID', l.useryubicloudtoken:public_id ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			<MvELSEIF EXPR = "{ l.user:tf_type EQ 'webauthn' }">
				<MvASSIGN NAME = "l.userwebauthntoken:signcount"	VALUE = 0>

				<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'WebAuthn_KeyID',		l.userwebauthntoken:id )		OR
								NOT PRV_Tag_Text(		'R', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'WebAuthn_PublicKey',	l.userwebauthntoken:pubkey )	OR
								NOT PRV_Tag_Integer( 	'O', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'WebAuthn_SignCount',	l.userwebauthntoken:signcount ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.user:pw_created"	VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.user:prior_pw1"		VALUE = "">
	<MvASSIGN NAME = "l.user:prior_pw2"		VALUE = "">
	<MvASSIGN NAME = "l.user:prior_pw3"		VALUE = "">
	<MvASSIGN NAME = "l.user:prior_pw4"		VALUE = "">
	<MvASSIGN NAME = "l.user:parent_id" 	VALUE = 0>
	<MvASSIGN NAME = "l.user:t_fails"		VALUE = 0>
	<MvASSIGN NAME = "l.user:c_fails"		VALUE = 0>
	<MvASSIGN NAME = "l.user:lo_date"		VALUE = 0>
	<MvASSIGN NAME = "l.user:mail_ok"		VALUE = 1>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Insert( l.user ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00039', 'User \'' $ l.user:name $ '\' created with admin=' $ l.user:admin $ ', vfybrowser=' $ l.user:vfybrowser $ ', forcepwchg=' $ l.user:forcepwchg $ ', forcetf=' $ l.user:forcetf $ ', tf_type=' $ l.user:tf_type $ ', exp_date=' $ l.user:exp_date ) }">

	<MvIF EXPR = "{ l.user:tf_type EQ 'totp' }">
		<MvASSIGN NAME = "l.usertotptoken:user_id"		VALUE = "{ l.user:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserTOTPToken_Insert( l.usertotptoken ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.user:tf_type EQ 'yubicloud' }">
		<MvASSIGN NAME = "l.useryubicloudtoken:user_id"	VALUE = "{ l.user:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserYubiCloudToken_Insert( l.useryubicloudtoken ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.user:tf_type EQ 'webauthn' }">
		<MvASSIGN NAME = "l.userwebauthntoken:user_id"	VALUE = "{ l.user:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserWebAuthnToken_Insert( l.userwebauthntoken ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_User_Icon( l.provide_xml, l.user ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_UserUpdate" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'name',	l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.name, l.user ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User \'' $ l.name $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_user"			VALUE = "{ l.user }">
	<MvASSIGN NAME = "l.is_mivaemployee"		VALUE = "{ [ g.Module_Library_DB ].User_Is_MivaEmployee( l.original_user:email ) }">
	<MvASSIGN NAME = "l.username_changed"		VALUE = 0>
	<MvASSIGN NAME = "l.password_changed"		VALUE = 0>
	<MvASSIGN NAME = "l.ip_range_changed"		VALUE = 0>
	<MvASSIGN NAME = "l.force_twofactor_change"	VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'O:40',		l.provide_xml, 'Name',								l.user:name )		OR
					NOT PRV_Tag_Text(		'O',		l.provide_xml, 'Password',							l.user_password )	OR
					NOT PRV_Tag_Text(		'o:50',		l.provide_xml, 'CellPhone',							l.user:cellphone )	OR
					NOT PRV_Tag_Text(		'o:254',	l.provide_xml, 'Description',						l.user:descrip )	OR
					NOT PRV_Tag_Integer(  	'o:nonneg',	l.provide_xml, 'DefaultPagination',					l.user:page_len )	OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'Administrator',						l.user:admin )		OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'HoverOn',							l.user:hover_on )	OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'BatchListSaveSortWhenSearching',	l.user:mmbl_sort )	OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 'StartInSimpleMode',					l.user:smod )		OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'ForcePasswordChange',				l.user:forcepwchg )	OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'ForceTwoFactor',					l.user:forcetf )	OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'WordWrapProductDescription',		l.user:wwdescrip )	OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'EULAAccepted',						l.user:license_ok ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.is_mivaemployee }">
		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Email' ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Miva employee account Email Address may not be changed' ) }">
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'VerifyBrowser' ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Miva employee account Verify Browser setting may not be changed' ) }">
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'ForceTwoFactorChange' ) }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Two Factor settings for Miva Employee accounts cannot be changed' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT PRV_Tag_Text(		'o:254',	l.provide_xml, 'Email',					l.user:email )		OR
						NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'VerifyBrowser',			l.user:vfybrowser )	OR
						NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'ForceTwoFactorChange',	l.force_twofactor_change ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Library_DB ].User_Is_MivaEmployee( l.user:email ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Email address may not be changed to a Miva employee account address' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.force_twofactor_change }">
			<MvASSIGN NAME = "l.user:tf_type" VALUE = "setup">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'DefaultBatchListLoadCount' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List(	l.provide_xml:tags:DefaultBatchListLoadCount[ 1 ], 'type',	l.type, 'auto,custom', 'auto,custom' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.type EQ 'auto' }">
			<MvASSIGN NAME = "l.user:mmbl_count" VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'R:nonneg', l.provide_xml, 'DefaultBatchListLoadCount', l.user:mmbl_count ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_User_Expiration( l.provide_xml, l.user ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.user:cellphone }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Phone( l.user:cellphone, g.Domain:country ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please enter a valid cell phone number' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'IPRange' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'IPRange', l.user:ip_range ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.user:ip_range }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_CIDR_List( l.user:ip_range ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.user:ip_range"	VALUE = "{ [ g.Module_Library_Utilities ].Normalize_CIDR_List( l.user:ip_range ) }">
		</MvIF>

		<MvASSIGN NAME = "l.ip_range_changed"	VALUE = "{ strcasecmp( l.original_user:ip_range, l.user:ip_range ) NE 0 }">
	</MvIF>

	<MvIF EXPR = "{ tolower( l.user:name ) NE tolower( l.original_user:name ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].User_Load_Name( l.user:name, l.existing_user ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User with the name \'' $ l.existing_user:name $ '\' already exists' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.username_changed" VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.original_user:admin AND ( NOT l.original_user:exp_date ) }">
		<MvIF EXPR = "{ ( NOT l.user:admin ) OR l.user:exp_date }">
			<MvIF EXPR = "{ [ g.Module_Library_DB ].User_Count_Admin_NoExpire() LE 1 }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'At least one administrator must not be configured to expire' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.password_changed"		VALUE = 0>
	<MvASSIGN NAME = "l.ssh_changed"			VALUE = 0>
	<MvASSIGN NAME = "l.twofactor_changed"		VALUE = 0>

	<MvIF EXPR = "{ NOT ISNULL l.user_password }">
		<MvASSIGN NAME = "l.user:prior_pw4"		VALUE = "{ l.user:prior_pw3 }">
		<MvASSIGN NAME = "l.user:prior_pw3"		VALUE = "{ l.user:prior_pw2 }">
		<MvASSIGN NAME = "l.user:prior_pw2"		VALUE = "{ l.user:prior_pw1 }">
		<MvASSIGN NAME = "l.user:prior_pw1"		VALUE = "{ l.user:password }">
		<MvASSIGN NAME = "l.user:pw_created"	VALUE = "{ s.dyn_time_t }">

		<MvIF EXPR = "{ [ g.Module_Library_Utilities ].AdminPasswordEncrypted( l.user_password ) }">
			<MvASSIGN NAME = "l.user:password"	VALUE = "{ l.user_password }">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].ValidateAdminPassword( l.user, l.user_password ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.user:password"	VALUE = "{ [ g.Module_Library_Utilities ].EncryptAdminPassword( l.user_password ) }">
		</MvIF>

		<MvIF EXPR = "{ l.user:lictype EQ 'developer' }">
			<MvASSIGN NAME = "l.user:license"	VALUE = "">
			<MvASSIGN NAME = "l.user:lic_dt"	VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.password_changed"	VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_User_License( l.provide_xml, l.user ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'SSHAuthentication' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'SSHAuthentication', l.user:ssh_pubkey ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.user:ssh_pubkey }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Crypto ].SSH_PublicKey_Parse( l.user:ssh_pubkey, l.key_type, l.key_id, l.key_data ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'SSHAuthentication: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.ssh_changed"		VALUE = 1>

		<MvIF EXPR = "{ ISNULL l.user:ssh_pubkey }">
			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00083', 'SSH authentication disabled for user \'' $ l.original_user:name $ '\'' ) }">
		<MvELSE>
			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00084', 'SSH authentication updated for user \'' $ l.original_user:name $ '\'' ) }">

			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Library_Utilities ].User_SSH_Changed_SendEmail( l.original_user ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'TwoFactorAuthentication' ) }">
		<MvIF EXPR = "{ l.is_mivaemployee }">
			<MvEVAL EXPR = "{ PRV_LogMessage( l.provide_xml, 'Miva employee account Two-factor Authentication setting may not be changed' ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'type', l.user:tf_type, 'none,totp,yubicloud,webauthn', ',totp,yubicloud,webauthn' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ l.user:tf_type EQ 'totp' }">
				<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'TOTPKey', l.totp_key ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvASSIGN NAME = "l.usertotptoken:user_id"			VALUE = "{ l.user:id }">
				<MvASSIGN NAME = "l.usertotptoken:totp_key"			VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( [ g.Module_Library_Utilities ].Base32_Decode( l.totp_key ) ) }">
			<MvELSEIF EXPR = "{ l.user:tf_type EQ 'yubicloud' }">
				<MvASSIGN NAME = "l.useryubicloudtoken:user_id"		VALUE = "{ l.user:id }">

				<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'YubiKeyID', l.useryubicloudtoken:public_id ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			<MvELSEIF EXPR = "{ l.user:tf_type EQ 'webauthn' }">
				<MvASSIGN NAME = "l.userwebauthntoken:user_id"		VALUE = "{ l.user:id }">
				<MvASSIGN NAME = "l.userwebauthntoken:signcount"	VALUE = 0>

				<MvIF EXPR = "{ NOT PRV_Tag_Text(		'R', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'WebAuthn_KeyID',		l.userwebauthntoken:id )		OR
								NOT PRV_Tag_Text(		'R', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'WebAuthn_PublicKey',	l.userwebauthntoken:pubkey )	OR
								NOT PRV_Tag_Integer( 	'O', l.provide_xml:tags:TwoFactorAuthentication[ 1 ], 'WebAuthn_SignCount',	l.userwebauthntoken:signcount ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.twofactor_changed"					VALUE = 1>

			<MvIF EXPR = "{ ISNULL l.user:tf_type }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserTwoFactorToken_Delete_All( l.user:id ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00054', 'Two-factor authentication for user \'' $ l.original_user:name $ '\' disabled' ) }">

				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].User_TwoFactor_Disabled_SendEmail( l.original_user ) }">
			<MvELSE>
				<MvCOMMENT>
				|
				| We do not use UserTwoFactorToken_Delete_All here because we want to preserve any existing backup tokens
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserTOTPToken_Delete( l.user:id )		OR
								NOT [ g.Module_Library_DB ].UserYubiCloudToken_Delete( l.user:id )	OR
								NOT [ g.Module_Library_DB ].UserWebAuthnToken_Delete( l.user:id ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvIF EXPR = "{ l.user:tf_type EQ 'totp' }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserTOTPToken_Insert( l.usertotptoken ) }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>
				<MvELSEIF EXPR = "{ l.user:tf_type EQ 'yubicloud' }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserYubiCloudToken_Insert( l.useryubicloudtoken ) }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>
				<MvELSEIF EXPR = "{ l.user:tf_type EQ 'webauthn' }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserWebAuthnToken_Insert( l.userwebauthntoken ) }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00055', 'Two-factor authentication updated for user \'' $ l.original_user:name $ '\'' ) }">

				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].User_TwoFactor_Changed_SendEmail( l.original_user ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Update( l.user ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.force_twofactor_change }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserTwoFactorToken_Delete_All( l.user:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvASSIGN NAME = "l.twofactor_changed" VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_User_Change( 'MER-PRV-ADM-00040', 'User updated', l.original_user, l.user ) }">

	<MvIF EXPR = "{ strcmp( l.original_user:email, l.user:email ) NE 0 }">
		<MvASSIGN NAME = "l.email_changed" VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.password_changed OR l.twofactor_changed OR l.username_changed OR l.email_changed }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].AdminSession_Delete_All_User( l.user:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ l.username_changed OR l.email_changed }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserXBrowser_Delete_All_User( l.user:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.password_changed }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserPasswordReset_Delete_User_ID( l.user:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.ip_range_changed }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].User_IPRange_Changed_SendEmail( l.original_user ) }">

		<MvIF EXPR = "{ ISNULL l.user:ip_range }">
			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00085', 'IP range disabled for user \'' $ l.original_user:name $ '\'' ) }">
		<MvELSE>
			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00086', 'IP range updated for user \'' $ l.original_user:name $ '\'' ) }">

			<MvFOREACH ITERATOR = "l.adminsession" ARRAY = "l.adminsessions" COUNT = "{ [ g.Module_Library_DB ].AdminSessionList_Load_User( l.user:id, l.adminsessions ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].IP_In_CIDR_IP_List( l.adminsession:remoteaddr, l.user:ip_range ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].AdminSession_Delete_Session( l.adminsession:session_id ) }">
						<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
					</MvIF>
				</MvIF>
			</MvFOREACH>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_User_Icon( l.provide_xml, l.user ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.original_user:icon NE l.user:icon }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Admin ].User_Delete_Icon( l.original_user:icon ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_UserDelete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 'name',	l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.name, l.user ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User \'' $ l.name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.user:admin AND ( NOT l.user:exp_date ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].User_Count_Admin_NoExpire() LE 1 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'At least one administrator must not be configured to expire' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].User_Is_Manager( l.user:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User \'' $ l.user:name $ '\' is the manager of one or more stores, and cannot be deleted' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Delete( l.user:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Admin ].User_Delete_Icon( l.user:icon ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00041', 'User \'' $ l.user:name $ '\' deleted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_Country_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'R', l.provide_xml,	'Name',		l.country:name )	OR
					NOT PRV_Tag_Text( 		'R', l.provide_xml,	'Code',		l.country:alpha )	OR
					NOT PRV_Tag_Integer(	'R', l.provide_xml,	'ISO_Code',	l.country:iso_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Country_Load_Name( l.country:name, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Country with the name \'' $ l.country:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ 'x' $ l.country:alpha EQ 'x0' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A country code cannot be \'0\'' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Country_Insert( l.country ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_Country_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'name',		l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Country_Load_Name( l.name, l.country ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Country with the name \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'O', l.provide_xml,	'Name',		l.country:name )	OR
					NOT PRV_Tag_Text( 		'O', l.provide_xml,	'Code',		l.country:alpha )	OR
					NOT PRV_Tag_Integer(	'O', l.provide_xml,	'ISO_Code',	l.country:iso_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.name NE l.country:name }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Country_Load_Name( l.country:name, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Country with the name \'' $ l.country:name $ '\' already exists' ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ 'x' $ l.country:alpha EQ 'x0' }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A country code cannot be \'0\'' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Country_Update( l.country:id, l.country:alpha, l.country:iso_code,  l.country:name ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_Country_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name',	l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Country_Load_Name( l.name, l.country ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Country with the name \'' $ l.name $ '\' does not exist' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Country_Delete( l.country:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_Settings" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_domain"						VALUE = "{ g.Domain }">

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'Name',								l.working_domain:name )			OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'Owner',							l.working_domain:owner )		OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'Email',							l.working_domain:email )		OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'Company',							l.working_domain:company )		OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'Address',							l.working_domain:address )		OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'City',								l.working_domain:city )			OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'State',							l.working_domain:state )		OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'Zip',								l.working_domain:zip )			OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'Country',							l.working_domain:country )		OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'Phone',							l.working_domain:phone )		OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'Fax',								l.working_domain:fax )			OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'MerchantURL',						l.working_domain:mm_url )		OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'MerchantCookieDomain',				l.working_domain:mmc_domn )		OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'MerchantCookiePath',				l.working_domain:mmc_path )		OR 
					NOT PRV_Tag_List( 		'O',		l.provide_xml, 	'MerchantCookieSameSite',			l.working_domain:mmc_site,
																		'Default,None,Lax,Strict',			',None,Lax,Strict' )			OR 
					NOT PRV_Tag_List( 		'o',		l.provide_xml, 	'MerchantCookieOutput',				l.working_domain:mmc_output,
																		'http,http_https,https',			'http,http_https,https' )		OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'MerchantSecureURL',				l.working_domain:mm_surl )		OR 
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 	'MerchantForceSecure',				l.working_domain:mm_secure )	OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'MerchantSecureCookieDomain',		l.working_domain:mmc_sdomn )	OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'MerchantSecureCookiePath',			l.working_domain:mmc_spath )	OR 
					NOT PRV_Tag_List( 		'O',		l.provide_xml, 	'MerchantSecureCookieSameSite',		l.working_domain:mmc_ssite,
																		'Default,None,Lax,Strict',			',None,Lax,Strict' )			OR 
					NOT PRV_Tag_List( 		'O',		l.provide_xml, 	'MerchantURLParameters',			l.working_domain:mm_params,
																		'never,switch,always',				'never,switch,always' )			OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'AdminSecureURL',					l.working_domain:admin_surl )	OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'AdminSecureBaseURL',				l.working_domain:admin_burl )	OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'BaseURL',							l.working_domain:base_url )		OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'BaseSecureURL',					l.working_domain:base_surl )	OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'ImageRoot',						l.working_domain:image_root )	OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'ModuleRoot',						l.working_domain:mod_root )		OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'ModuleRootSecure',					l.working_domain:mod_sroot )	OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'ImageRootSecure',					l.working_domain:img_sroot )	OR 
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 	'MailServer',						l.working_domain:mailhost )		OR 
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'MailMethod',						l.working_domain:mailmeth )		OR 
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 	'MailAddAngleBrackets',				l.working_domain:mail_angl )	OR 
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 	'StrictCodeValidation',				l.working_domain:strictcode )	OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 	'MerchantCookieExpiration',			l.working_domain:mmcexp ) 		OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 	'MerchantSecureCookieExpiration',	l.working_domain:mmcsexp ) 		OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 	'AdminSession',						l.working_domain:admexp ) 		OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 	'FailedLoginLockoutTime',			l.working_domain:lo_time )	 	OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 	'FailedLoginMaxAttempts',			l.working_domain:li_trys ) 		OR
					NOT PRV_Tag_Integer( 	'o',		l.provide_xml,	'FailedLoginDelay',					l.working_domain:logindelay )	OR
					NOT PRV_Tag_Boolean( 	'o',		l.provide_xml, 	'VerifyIP',							l.working_domain:verify_ip ) 	OR
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 	'ImageExtensions',					l.working_domain:img_ext )		OR
					NOT PRV_Tag_Integer( 	'o',		l.provide_xml, 	'ImageJPEGQuality',					l.working_domain:img_qual )		OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 	'ForcePasswordAfterDays',			l.working_domain:pw_max_age )	OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 	'PasswordReuse',					l.working_domain:pw_reuse )		OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 	'MinimumPasswordLength',			l.working_domain:pw_min_len )	OR 
					NOT PRV_Tag_List( 		'o',		l.provide_xml, 	'PasswordComplexity',				l.working_domain:pw_complex,
																		'none,alphanum,mixed',				'0,1,2' )						OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml,	'PreferredCiphers',					l.working_domain:ciphers )		OR
					NOT PRV_Tag_Integer( 	'O',		l.provide_xml,	'MailPort',							l.working_domain:mailport )		OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml,	'MailUser',							l.working_domain:mailuser )		OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml,	'MailPassword',						l.mailpass )					OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml,	'MailFlags',						l.working_domain:mailflags )	OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml,	'AdminLogLocal',					l.working_domain:log_local )	OR
					NOT PRV_Tag_Text(		'o:254',	l.provide_xml,	'AdminLogMask',						l.working_domain:log_mask )		OR
					NOT PRV_Tag_List( 		'o',		l.provide_xml, 	'JavaScript',						l.working_domain:javascript,
																		'separate,combined,minified',		'separate,combined,minified' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.working_domain:admin_surl AND ( 'https://' IN l.working_domain:admin_surl NE 1 ) AND ( 'http://' IN l.working_domain:admin_surl NE 1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The secure URL to administration must begin with \'http://\' or \'https://\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.working_domain:admin_burl AND NOT ISNULL l.working_domain:admin_surl }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify the secure base URL for administration graphics' ) }">
	<MvELSEIF EXPR = "{ NOT ISNULL l.working_domain:admin_burl }">
		<MvIF EXPR = "{ ISNULL l.working_domain:admin_surl }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify the secure URL to administration' ) }">
		<MvELSEIF EXPR = "{ ( ( 'https://' IN l.working_domain:admin_surl EQ 1 ) AND ( 'https://' IN l.working_domain:admin_burl NE 1 ) ) OR
							( ( 'http://' IN l.working_domain:admin_surl EQ 1 ) AND ( 'http://' IN l.working_domain:admin_burl NE 1 ) ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'URL protocol must match Secure URL to Administration' ) }">
		<MvELSEIF EXPR = "{ gettoken( l.working_domain:admin_surl, '/', 3 ) NE gettoken( l.working_domain:admin_burl, '/', 3 ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'URL hostname must match Secure URL to Administration' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.working_domain:img_qual ) OR l.working_domain:img_qual GT 100 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please choose an image quality percentage number between 1 and 100' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.working_domain:pw_max_age ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Password max age value must be a non-negative whole number' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.working_domain:pw_reuse LT 0 OR l.working_domain:pw_reuse GT 5 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Password reuse value must be between 0 and 5' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.working_domain:logindelay LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Failed login delay may not be a negative value' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Optional( l.working_domain:pw_min_len ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Password minimum length value must be a non-negative whole number' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.working_domain:mailport ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Email port must be a non-negative whole number' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.working_domain:mailuser AND ISNULL l.mailpass AND ISNULL l.working_domain:mailpass }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'MailPassword must be specified when MailUser is set' ) }">
	<MvELSEIF EXPR = "{ ISNULL l.working_domain:mailuser AND NOT ISNULL l.mailpass }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'MailUser must be specified when MailPassword is set' ) }">
	<MvELSEIF EXPR = "{ ISNULL l.working_domain:mailuser }">
		<MvASSIGN NAME = "l.working_domain:mailpass"		VALUE = "">
	<MvELSEIF EXPR = "{ NOT ISNULL l.mailpass }">
		<MvASSIGN NAME = "l.working_domain:mailpass"		VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.mailpass ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_member_exists( l.provide_xml, 'StoreSelectionLayout' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.provide_xml:tags:StoreSelectionLayout[1]:UserInterface[1], l.uimodule ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid Code value, ignored' ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.working_domain:stsl_id"		VALUE = "{ l.uimodule:id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.working_domain:maxadmsess ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Concurrent administrative sessions must be a non-negative whole number' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Domain_Update( l.working_domain ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Domain_Change( 'MER-PRV-ADM-00141', 'Domain settings updated', g.Domain, l.working_domain ) }">

	<MvASSIGN NAME = "g.Domain"								VALUE = "{ l.working_domain }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_TwoFactorSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].TwoFactorSettings_Load( l.twofactorsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'TOTP' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'O', l.provide_xml:tags:TOTP[ 1 ], 'TimeStep',	l.twofactorsettings:totp_step )		OR
						NOT PRV_Tag_Integer( 'O', l.provide_xml:tags:TOTP[ 1 ], 'Start',	l.twofactorsettings:totp_start )	OR
						NOT PRV_Tag_Integer( 'O', l.provide_xml:tags:TOTP[ 1 ], 'Window',	l.twofactorsettings:totp_wndw )		OR
						NOT PRV_Tag_Integer( 'O', l.provide_xml:tags:TOTP[ 1 ], 'Digits',	l.twofactorsettings:totp_dig ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'YubiCloud' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Integer( 	'O', l.provide_xml:tags:YubiCloud[ 1 ], 'ID',				l.twofactorsettings:ycld_id )	OR
						NOT PRV_Tag_Text(		'O', l.provide_xml:tags:YubiCloud[ 1 ], 'URL',				l.twofactorsettings:ycld_url )	OR
						NOT PRV_Tag_Integer( 	'O', l.provide_xml:tags:YubiCloud[ 1 ], 'Timeout',			l.twofactorsettings:ycld_tout )	OR
						NOT PRV_Tag_Text(		'O', l.provide_xml:tags:YubiCloud[ 1 ], 'SecurityLevel',	l.twofactorsettings:ycld_sl ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml:tags:YubiCloud[ 1 ], 'Key' ) }">
			<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml:tags:YubiCloud[ 1 ], 'Key', l.key ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ ( 'PBES2:' IN l.key ) EQ 1 }">	<MvASSIGN NAME = "l.twofactorsettings:ycld_key" VALUE = "{ l.key }">
			<MvELSE>										<MvASSIGN NAME = "l.twofactorsettings:ycld_key" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( crypto_base64_decode( l.key ) ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].TwoFactorSettings_Update( l.twofactorsettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_StoreCreate" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.store:owner" 			VALUE = "{ g.Domain:owner }">
	<MvASSIGN NAME = "l.store:email" 			VALUE = "{ g.Domain:email }">
	<MvASSIGN NAME = "l.store:company" 			VALUE = "{ g.Domain:company }">
	<MvASSIGN NAME = "l.store:address" 			VALUE = "{ g.Domain:address }">
	<MvASSIGN NAME = "l.store:city" 			VALUE = "{ g.Domain:city }">
	<MvASSIGN NAME = "l.store:state" 			VALUE = "{ g.Domain:state }">
	<MvASSIGN NAME = "l.store:zip" 				VALUE = "{ g.Domain:zip }">
	<MvASSIGN NAME = "l.store:country" 			VALUE = "{ g.Domain:country }">
	<MvASSIGN NAME = "l.store:phone" 			VALUE = "{ g.Domain:phone }">
	<MvASSIGN NAME = "l.store:fax" 				VALUE = "{ g.Domain:fax }">

	<MvASSIGN NAME = "l.store_order_start" 		VALUE = 1000>

	<MvIF EXPR = "{ l.store:country EQ 'US' }">
		<MvASSIGN NAME = "l.store:wtunits"		VALUE = "lb">
		<MvASSIGN NAME = "l.store:wtunitcode"	VALUE = "LB">
		<MvASSIGN NAME = "l.store:dmunitcode"	VALUE = "IN">
	<MvELSE>
		<MvASSIGN NAME = "l.store:wtunits"		VALUE = "kg">
		<MvASSIGN NAME = "l.store:wtunitcode"	VALUE = "KG">
		<MvASSIGN NAME = "l.store:dmunitcode"	VALUE = "CM">
	</MvIF>

	<MvASSIGN NAME = "l.store:baskexp"			VALUE = 60>
	<MvASSIGN NAME = "l.store:deferbask"		VALUE = 1>
	<MvASSIGN NAME = "l.store:trackhits"		VALUE = 0>
	<MvASSIGN NAME = "l.store:pgrp_ovlp"		VALUE = "HIGHEST">
	<MvASSIGN NAME = "l.store:charset"			VALUE = "utf-8">
	<MvASSIGN NAME = "l.store:schtsk_adv"		VALUE = 0>
	<MvASSIGN NAME = "l.store:schtsk_min"		VALUE = 0>
	<MvASSIGN NAME = "l.store:schtsk_que"		VALUE = 2>
	<MvASSIGN NAME = "l.store:cache_exp"		VALUE = 240>
	<MvASSIGN NAME = "l.store:cache_ver"		VALUE = 0>
	<MvASSIGN NAME = "l.store:req_ship" 		VALUE = 1>
	<MvASSIGN NAME = "l.store:req_tax" 			VALUE = 1>
	<MvASSIGN NAME = "l.store:req_frship" 		VALUE = 0>
	<MvASSIGN NAME = "l.store:branch_id" 		VALUE = 1>
	<MvASSIGN NAME = "l.store:cache_type"		VALUE = "none">
	<MvASSIGN NAME = "l.store:redishost"		VALUE = "127.0.0.1">
	<MvASSIGN NAME = "l.store:redisport"		VALUE = 6379>
	<MvASSIGN NAME = "l.store:redisto"			VALUE = 1000>
	<MvASSIGN NAME = "l.store:redispwd"			VALUE = "">
	<MvASSIGN NAME = "l.store:wtdispmix"		VALUE = 0>
	<MvASSIGN NAME = "l.store:wtdisplow"		VALUE = 0>
	<MvASSIGN NAME = "l.store:wtdispdig"		VALUE = 2>
	<MvASSIGN NAME = "l.store:cacheset"			VALUE = "">
	
	<MvIF EXPR = "{ NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 'ID',								l.store_id ) 					OR
					NOT PRV_Tag_Code( 		'R',		l.provide_xml, 'Code',								l.store:code ) 					OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'LicenseNumber',						l.license_number )				OR
					NOT PRV_Tag_Text( 		'R',		l.provide_xml, 'Manager',							l.manager )						OR
					NOT PRV_Tag_Text( 		'R',		l.provide_xml, 'Name',								l.store:name )					OR				
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'Icon',								l.store:icon )					OR				
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'Owner',								l.store:owner ) 				OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'Email',								l.store:email ) 				OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'Address',							l.store:address ) 				OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'City',								l.store:city ) 					OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'State',								l.store:state ) 				OR
					NOT PRV_Tag_Text( 		'O:2',		l.provide_xml, 'Country',							l.store:country )				OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'Zip',								l.store:zip ) 					OR
					NOT PRV_Tag_Text( 		'O',		l.provide_xml, 'Phone',								l.store:phone )					OR
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 'Fax',								l.store:fax )					OR
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 'Company',							l.store:company ) 				OR
					NOT PRV_Tag_Text( 		'o',		l.provide_xml, 'WeightUnits',						l.store:wtunits ) 				OR
					NOT PRV_Tag_List(		'O',		l.provide_xml, 'WeightUnitCode',					l.store:wtunitcode,
																	   'OZ,LB,G,KG',						'OZ,LB,G,KG' )					OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'WeightUnitDisplayMixed',			l.store:wtdispmix )				OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'WeightUnitDisplaySmaller',			l.store:wtdisplow )				OR
					NOT PRV_Tag_Text(		'O',		l.provide_xml, 'WeightUnitDisplayMinimumDigits',	l.store:wtdispdig )				OR
					NOT PRV_Tag_List(		'O',		l.provide_xml, 'DimensionUnitCode',					l.store:dmunitcode,
																	   'IN,CM',								'IN,CM' )						OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 'BasketTimeout',						l.store:baskexp ) 				OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'DeferBasketCreation',				l.store:deferbask )				OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'TrackHitsAndVisits',				l.store:trackhits )				OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 'CacheTimeout',						l.store:cache_exp )				OR
					NOT PRV_Tag_List( 		'O',		l.provide_xml, 'PriceGroupOverlap',					l.store:pgrp_ovlp,
																	   'Highest,Lowest,Priority',			'HIGHEST,LOWEST,PRIORITY' )	 	OR
					NOT PRV_Tag_Integer(  	'o',		l.provide_xml, 'FirstOrderNumber',					l.store_order_start ) 			OR
					NOT PRV_Tag_Text( 		'R',		l.provide_xml, 'SalesTaxModule',					l.store_tax_module ) 			OR
					NOT PRV_Tag_Text( 		'R',		l.provide_xml, 'CurrencyModule',					l.store_currency_module ) 		OR
					NOT PRV_Tag_Text( 		'R',		l.provide_xml, 'UserInterface',						l.store_ui_module ) 			OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml, 'CharacterSet',						l.store:charset )				OR
					NOT PRV_Tag_Integer( 	'o',		l.provide_xml, 'ScheduledTaskAdvance',				l.store:schtsk_adv )			OR
					NOT PRV_Tag_Integer( 	'o',		l.provide_xml, 'ScheduledTaskMinRemaining',			l.store:schtsk_min )			OR
					NOT PRV_Tag_Integer( 	'O:nonneg',	l.provide_xml, 'ScheduledTaskQueueCount',			l.store:schtsk_que )			OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'RequireShipping',					l.store:req_ship ) 				OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'RequireTax',						l.store:req_tax ) 				OR
					NOT PRV_Tag_Boolean(	'o',		l.provide_xml, 'RequireShippingForFreeOrders',		l.store:req_frship ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "g.Store"			VALUE = "">

	<MvCOMMENT>
	|
	| Used by the license management functions in util.mv
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "g.Store_Owner"	VALUE = "{ l.store:owner }">
	<MvASSIGN NAME = "g.Store_Company"	VALUE = "{ l.store:company }">
	<MvASSIGN NAME = "g.Store_Address"	VALUE = "{ l.store:address }">
	<MvASSIGN NAME = "g.Store_City"		VALUE = "{ l.store:city }">
	<MvASSIGN NAME = "g.Store_State"	VALUE = "{ l.store:state }">
	<MvASSIGN NAME = "g.Store_Zip"		VALUE = "{ l.store:zip }">
	<MvASSIGN NAME = "g.Store_Country"	VALUE = "{ l.store:country }">
	<MvASSIGN NAME = "g.Store_Phone"	VALUE = "{ l.store:phone }">
	<MvASSIGN NAME = "g.Store_Fax"		VALUE = "{ l.store:fax }">
	<MvASSIGN NAME = "g.Store_Email"	VALUE = "{ l.store:email }">

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Store_Load_Code( l.store:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A Store with the code \'' $ l.store:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.manager, l.user ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User \'' $ l.manager $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ len( l.license_number ) }">
		<MvIF EXPR = "{ l.license_number EQ g.Domain:license }">
			<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.inuse" VALUE = "{ Store_Count_License( g.Domain:license ) }">
			<MvIF EXPR = "{ NOT l.inuse }">
				<MvASSIGN NAME = "l.store_license" 		VALUE = "{ g.Domain:license }">
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The license you have specified is already being used' ) }">	
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.store_license" 		VALUE = "{ [ g.Module_Library_Utilities ].LicenseManager_Validate_Store( l.license_number, l.error_message ) }">
			<MvIF EXPR = "{ NOT l.store_license }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.error_message ) }">
			</MvIF>
		</MvIF>
	<MvELSE>
		<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.inuse" VALUE = "{ Store_Count_License( g.Domain:license ) }">
		<MvIF EXPR = "{ NOT l.inuse }">
			<MvASSIGN NAME = "l.store_license" 		VALUE = "{ g.Domain:license }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a store license number' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.store:icon }">
		<MvASSIGN NAME = "l.store:icon" VALUE = "graphics/en-US/admin/store_icon_1.png">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Zip( l.store:zip, l.store:country ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please enter a valid zip/postal code' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Phone( l.store:phone, l.store:country ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please enter a valid phone/fax number' ) }">
	</MvIF>

	<MvIF EXPR = "{ len( l.store:fax ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Phone( l.store:fax, l.store:country ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please enter a valid phone/fax number' ) }">
		</MvIF>	
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.store:wtdispdig, 0, 8 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value of WeightUnitDisplayMinimumDigits: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.store:baskexp LT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a basket expiration value of 1 or higher' ) }">
	</MvIF>

	<MvIF EXPR = "{ len( l.store:charset ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_HTMLToken( l.store:charset ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a valid character set or an empty string' ) }">	
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( l.store:schtsk_adv LT 0 ) OR ( s.miva_config:timeout_async_sleep AND ( l.store:schtsk_adv GT s.miva_config:timeout_async_sleep ) ) }">
		<MvIF EXPR = "{ s.miva_config:timeout_async_sleep }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'ScheduledTaskAdvance must be between 0 and ' $ s.miva_config:timeout_async_sleep ) }">	
		<MvELSE>												<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'ScheduledTaskAdvance must be 0 or higher' ) }">
		</MvIF>
	</MvIF>	

	<MvIF EXPR = "{ ( l.store:schtsk_min LT 0 ) OR ( s.miva_config:timeout_async AND ( l.store:schtsk_min GE s.miva_config:timeout_async ) ) }">
		<MvIF EXPR = "{ s.miva_config:timeout_async }">			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'ScheduledTaskMinRemaining must be between 0 and ' $ ( s.miva_config:timeout_async - 1 ) ) }">	
		<MvELSE>												<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'ScheduledTaskMinRemaining must be 0 or higher' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.store_order_start, 1, 999999999 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for FirstOrderNumber: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.store_tax_module, l.tax_module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.store_tax_module $ '\' not found' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT l.tax_module:feature_hash:tax }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.tax_module:name $ '\' does not implement the tax feature.' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.store_currency_module, l.currency_module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.store_currency_module $ '\' not found' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT l.currency_module:feature_hash:currency }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.currency_module:name $ '\' does not implement the currency feature.' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.store_ui_module, l.ui_module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, '' $ 'Module \'' $ l.store_ui_module $ '\' not found' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT l.ui_module:feature_hash:storeui }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.ui_module:name $ '\' does not implement the storeui feature.' ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Validate Modules
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Validate_Module_Add( l.tax_module,			l.install_modules ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Validate_Module_Add( l.currency_module,	l.install_modules ) }">

	<MvASSIGN NAME = "l.existing" VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_Add_Reference( l.ui_module, l.install_modules ) }">
	<MvIF EXPR = "{ l.existing }">
		<MvREFERENCEARRAY NAME = "l.ui_module" VARIABLE = "l.install_modules">
			<MvDIMENSION INDEX = "{ l.existing }">
		</MvREFERENCEARRAY>
	</MvIF>

	<MvASSIGN NAME = "l.result"	VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_AddRemove( l.install_modules, l.remove_modules, l.message ) }">
	<MvIF EXPR = "{ l.result EQ -2 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
	<MvELSEIF EXPR = "{ l.result EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
	
	<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.inuse" VALUE = "{ Store_Count_License( g.Domain:license ) }">
	<MvIF EXPR = "{ NOT l.inuse }">
		<MvASSIGN NAME = "l.store_license" VALUE = "{ g.Domain:license }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].LicenseManager_Register_Store( l.license_number, l.error_message ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.error_message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.store_license" VALUE = "{ l.license_number }">
	</MvIF>

	<MvASSIGN NAME = "l.store:manager_id"	VALUE = "{ l.user:id }">
	<MvASSIGN NAME = "l.store:license"		VALUE = "{ l.store_license }">
	<MvASSIGN NAME = "l.store:ui_id"		VALUE = 0>
	<MvASSIGN NAME = "l.store:tax_id"		VALUE = 0>
	<MvASSIGN NAME = "l.store:currncy_id"	VALUE = 0>
	<MvASSIGN NAME = "l.store:boxpack_id"	VALUE = 0>
	<MvASSIGN NAME = "l.store:addrval_id"	VALUE = 0>
	<MvASSIGN NAME = "l.store:mnt_warn"		VALUE = "%store_name% will be closing in %maint_countdown% minutes for maintenance.  Please complete your selection and proceed to the checkout.  All abandoned baskets will be emptied.">
	<MvASSIGN NAME = "l.store:mnt_close"	VALUE = "Sorry, %store_name% is closed for maintenance.  We will re-open soon. Thanks">
	<MvASSIGN NAME = "l.store:mnt_time"		VALUE = 0>
	<MvASSIGN NAME = "l.store:mnt_no_new"	VALUE = 0>
	<MvASSIGN NAME = "l.store:mnt_ips"		VALUE = 0>
	<MvASSIGN NAME = "l.store:omin_quant" 	VALUE = 0>
	<MvASSIGN NAME = "l.store:omin_price" 	VALUE = 0>
	<MvASSIGN NAME = "l.store:omin_all" 	VALUE = 0>
	<MvASSIGN NAME = "l.store:crypt_id" 	VALUE = 0>
	<MvASSIGN NAME = "l.store:cache_ridx" 	VALUE = 1>

	<MvIF EXPR = "{ len( l.store_id ) }">
		<MvIF EXPR = "{ l.store_id LE 0 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please enter a Store id greater than zero' ) }">
		<MvELSE>
			<MvIF EXPR = "{ [ g.Module_Library_DB ].Store_Load_ID( l.store_id, l.null ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A Store with the id \'' $ l.store_id $ '\' already exists' ) }">
			<MvELSE>
				<MvIF EXPR = "{ [ g.Module_Library_DB ].DomainKey_Load_Type( 'Stores', l.store_key ) }">
					<MvIF EXPR = "{ l.store_key:maxvalue GT l.store_id }">
						<MvASSIGN NAME = "l.saved_storekey" VALUE = "{ l.store_key:maxvalue }">
					</MvIF>

					<MvASSIGN NAME = "l.new_key" 		VALUE = "{ l.store_id - 1 }">

					<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.null" VALUE = "{ DomainKey_Update( 'Stores', l.new_key ) }">
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.ui_module:api_ver LT 5.60 }">
		<MvASSIGN NAME = "l.store:framework"	VALUE = "">
	<MvELSE>
		<MvASSIGN NAME = "l.store:framework"	VALUE = "{ [ g.Module_Root $ l.ui_module:module ].StoreUIModule_Default_Framework( l.ui_module ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Create( l.store, l.store_order_start ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.saved_storekey }">
		<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.null" VALUE = "{ DomainKey_Update( 'Stores', l.saved_storekey ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| This code now calls into admin to use the store creation code there.  This way we only have to have a single location
	| where we register specialized admin pages or items.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "g.Store" 	VALUE = "{ l.store }">

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Action_Store_Create_LowLevel( l.ui_module, l.install_modules ) }">
		<MvASSIGN NAME = "l.error_code"		VALUE = "{ g.Error_Code }">
		<MvASSIGN NAME = "l.error_message"	VALUE = "{ g.Error_Message }">

		<MvCOMMENT>
		|
		| Delete the partially created store
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.module_pos"		VALUE = 1>
		<MvASSIGN NAME = "l.module_count"	VALUE = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Active( l.modules ) }">

		<MvWHILE EXPR = "{ l.module_pos LE l.module_count }">
			<MvIF EXPR = "{ [ g.Module_Library_DB ].Module_Load_Features( l.modules[ l.module_pos ] ) AND
							l.modules[ l.module_pos ]:feature_hash:data_store }">
				<MvDO FILE = "{ g.Module_Root $ l.modules[ l.module_pos ]:module }" NAME = "l.null" VALUE = "{ Module_Uninstall_Store( l.modules[ l.module_pos ] ) }">
			</MvIF>

			<MvASSIGN NAME = "l.module_pos"	VALUE = "{ l.module_pos + 1 }">
		</MvWHILE>

		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_DB ].Store_Delete( g.Store ) }">

		<MvASSIGN NAME = "g.Error_Code"		VALUE = "{ l.error_code }">
		<MvASSIGN NAME = "g.Error_Message"	VALUE = "{ l.error_message }">

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CacheSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.cacheset"	VALUE = "{ g.Store:cacheset }">

	<MvASSIGN NAME = "l.cache_type"	VALUE = "{ g.Store:cache_type }">
	<MvASSIGN NAME = "l.cache_comp"	VALUE = "{ g.Store:cache_comp }">
	<MvASSIGN NAME = "l.cache_ridx"	VALUE = "{ g.Store:cache_ridx }">
	<MvASSIGN NAME = "l.redisex" 	VALUE = "{ g.Store:redisex }">

	<MvIF EXPR = "{ NOT PRV_Tag_List( 	 'O', 			l.provide_xml, 'CacheType',			l.cache_type, 'none,redis', 'none,redis' )	OR
					NOT PRV_Tag_Boolean( 'o', 			l.provide_xml, 'CacheCompress', 	l.cache_comp )								OR
					NOT PRV_Tag_Integer( 'O:nonneg',	l.provide_xml, 'RedisIndex',		l.cache_ridx )								OR
					NOT PRV_Tag_Integer( 'O:positive',	l.provide_xml, 'RedisExpiration',	l.redisex ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
		<MvIF EXPR = "{ NOT PRV_CacheSettings( l.provide_xml:tags:Settings[ 1 ], l.cacheset ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "g.Store:cacheset"		VALUE = "{ l.cacheset }">

	<MvASSIGN NAME = "g.Store:cache_type"	VALUE = "{ l.cache_type }">
	<MvASSIGN NAME = "g.Store:cache_comp"	VALUE = "{ l.cache_comp }">
	<MvASSIGN NAME = "g.Store:cache_ridx"	VALUE = "{ l.cache_ridx }">
	<MvASSIGN NAME = "g.Store:redisex"		VALUE = "{ l.redisex }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_CacheSettings( g.Store ) OR
					NOT [ g.Module_Library_DB ].Store_Update( g.Store ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_RedisSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.redishost" 	VALUE = "{ g.Store:redishost }">
	<MvASSIGN NAME = "l.redisport" 	VALUE = "{ g.Store:redisport }">
	<MvASSIGN NAME = "l.redisto"	VALUE = "{ g.Store:redisto }">
	<MvASSIGN NAME = "l.redispwd" 	VALUE = "{ g.Store:redispwd }">

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 		'O:254',		l.provide_xml, 'Host',			l.redishost ) 	OR
					NOT PRV_Tag_Integer( 	'O',			l.provide_xml, 'Port',			l.redisport ) 	OR
					NOT PRV_Tag_Integer(	'O:positive',	l.provide_xml, 'Timeout',		l.redisto )		OR
					NOT PRV_Tag_Text( 		'o',			l.provide_xml, 'Password',		l.redispwd )  }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.redisport, 1, 65535 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Redis[ 1 ], 'Invalid value for Port: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Password' ) }">
		<MvIF EXPR = "{ NOT ISNULL l.redispwd }">
			<MvASSIGN NAME = "l.redispwd"	VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.redispwd ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "g.Store:redishost"	VALUE = "{ l.redishost }">
	<MvASSIGN NAME = "g.Store:redisport"	VALUE = "{ l.redisport }">
	<MvASSIGN NAME = "g.Store:redisto"		VALUE = "{ l.redisto }">
	<MvASSIGN NAME = "g.Store:redispwd"		VALUE = "{ l.redispwd }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update( g.Store ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_CacheSettings" PARAMETERS = "provide_xml var, cacheset var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.cacheset" VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children" COUNT = "{ miva_array_elements( l.provide_xml:children ) }">
		<MvASSIGN NAME = "l.type" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Value_In_List( l.type, 'header,parameter,cookie' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'name', l.name ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.cacheset">
			<MvMEMBER NAME = "{ l.type }">
			<MvMEMBER NAME = "{ l.name }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.type EQ 'parameter' }">
			<MvIF EXPR = "{ NOT PRV_Attribute_List(	l.child_xml, 'mode', l.settings:mode, 'ignore,disable,disable_substring,disable_equal', 'ignore,disable,disable_substring,disable_equal' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Attribute_List(	l.child_xml, 'mode', l.settings:mode, 'key,disable,disable_substring,disable_equal', 'key,disable,disable_substring,disable_equal' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.settings:mode EQ 'disable_substring' OR l.settings:mode EQ 'disable_equal' }">
			<MvASSIGN NAME = "l.settings:value" VALUE = "{ trim( l.child_xml:value ) }">	

			<MvIF EXPR = "{ ISNULL l.settings:value }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'A value is required when using disable_substring or disable_equal modes' ) }">
			</MvIF>
		</MvIF>	
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_PageCacheSettings" PARAMETERS = "provide_xml var, cacheset var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.cacheset" VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children" COUNT = "{ miva_array_elements( l.provide_xml:children ) }">
		<MvASSIGN NAME = "l.type" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Value_In_List( l.type, 'header,parameter,cookie' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.child_xml, 'name', l.name ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.cacheset">
			<MvMEMBER NAME = "{ l.type }">
			<MvMEMBER NAME = "{ l.name }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT PRV_Attribute_List(	l.child_xml, 'mode', l.settings:mode, 'ignore,key,disable,disable_substring,disable_equal', 'ignore,key,disable,disable_substring,disable_equal' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.settings:mode EQ 'disable_substring' OR l.settings:mode EQ 'disable_equal' }">
			<MvASSIGN NAME = "l.settings:value" VALUE = "{ trim( l.child_xml:value ) }">	

			<MvIF EXPR = "{ ISNULL l.settings:value }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.child_xml, 'A value is required when using disable_substring or disable_equal modes' ) }">
			</MvIF>
		</MvIF>	
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_StoreUpdate" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Admin_Open_Store( l.code, g.Store ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Store \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.store"	VALUE = "{ g.Store }">

	<MvIF EXPR = "{ l.store:mnt_time }">
		<MvASSIGN NAME = "l.store_offline_time" VALUE = "{ padl( time_t_hour( l.store:mnt_time, g.Merchant_Local_Timezone ), 2, '0' ) $ ':' $ padl( time_t_min( l.store:mnt_time, g.Merchant_Local_Timezone ), 2, '0' ) }">
		<MvASSIGN NAME = "l.store_offline_date" VALUE = "{ padl( time_t_month( l.store:mnt_time, g.Merchant_Local_Timezone ), 2, '0' ) $ '/' $ padl( time_t_dayofmonth( l.store:mnt_time, g.Merchant_Local_Timezone ), 2, '0' ) $ '/' $ padl( time_t_year( l.store:mnt_time, g.Merchant_Local_Timezone ), 2, '0' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Code( 		'O',			l.provide_xml, 'Code',								l.store:code ) 					OR
					NOT PRV_Tag_Text( 		'O',			l.provide_xml, 'Manager',							l.manager )						OR
					NOT PRV_Tag_Text( 		'O:100',		l.provide_xml, 'Name',								l.store:name )					OR				
					NOT PRV_Tag_Text( 		'O:254',		l.provide_xml, 'Icon',								l.store:icon )					OR				
					NOT PRV_Tag_Text( 		'O:100',		l.provide_xml, 'Owner',								l.store:owner ) 				OR
					NOT PRV_Tag_Text( 		'O:254',		l.provide_xml, 'Email',								l.store:email ) 				OR
					NOT PRV_Tag_Text( 		'O:100',		l.provide_xml, 'Address',							l.store:address ) 				OR
					NOT PRV_Tag_Text( 		'O:50',			l.provide_xml, 'City',								l.store:city ) 					OR
					NOT PRV_Tag_Text( 		'O:50',			l.provide_xml, 'State',								l.store:state ) 				OR
					NOT PRV_Tag_Text( 		'O:50',			l.provide_xml, 'Country',							l.store:country )				OR
					NOT PRV_Tag_Text( 		'O:50',			l.provide_xml, 'Zip',								l.store:zip ) 					OR
					NOT PRV_Tag_Text( 		'O:50',			l.provide_xml, 'Phone',								l.store:phone )					OR
					NOT PRV_Tag_Text( 		'o:50',			l.provide_xml, 'Fax',								l.store:fax )					OR
					NOT PRV_Tag_Text( 		'o:100',		l.provide_xml, 'Company',							l.store:company ) 				OR
					NOT PRV_Tag_Text( 		'o:50',			l.provide_xml, 'WeightUnits',						l.store:wtunits ) 				OR
					NOT PRV_Tag_List(		'O', 			l.provide_xml, 'WeightUnitCode',					l.store:wtunitcode,
																		   'OZ,LB,G,KG',						'OZ,LB,G,KG' )					OR
					NOT PRV_Tag_Boolean(	'O',			l.provide_xml, 'WeightUnitDisplayMixed',			l.store:wtdispmix )				OR
					NOT PRV_Tag_Boolean(	'O',			l.provide_xml, 'WeightUnitDisplaySmaller',			l.store:wtdisplow )				OR
					NOT PRV_Tag_Integer(	'O',			l.provide_xml, 'WeightUnitDisplayMinimumDigits',	l.store:wtdispdig )				OR 
					NOT PRV_Tag_List(		'O', 			l.provide_xml, 'DimensionUnitCode',					l.store:dmunitcode,
																		   'IN,CM',								'IN,CM' )						OR
					NOT PRV_Tag_Integer(  	'o:positive',	l.provide_xml, 'BasketTimeout',						l.store:baskexp )				OR
					NOT PRV_Tag_Boolean(	'o', 			l.provide_xml, 'DeferBasketCreation',				l.store:deferbask )				OR
					NOT PRV_Tag_Boolean(	'o', 			l.provide_xml, 'TrackHitsAndVisits',				l.store:trackhits )				OR
					NOT PRV_Tag_Integer(  	'o:positive',	l.provide_xml, 'CacheTimeout',						l.store:cache_exp )				OR
					NOT PRV_Tag_List( 		'O', 			l.provide_xml, 'PriceGroupOverlap',					l.store:pgrp_ovlp,
																		   'Highest,Lowest,Priority',			'HIGHEST,LOWEST,PRIORITY' ) 	OR
					NOT PRV_Tag_Text( 		'O',			l.provide_xml, 'SalesTaxModule',					l.store_tax_module ) 			OR
					NOT PRV_Tag_Text( 		'O',			l.provide_xml, 'CurrencyModule',					l.store_currency_module ) 		OR
					NOT PRV_Tag_Text(		'o:25',			l.provide_xml, 'CharacterSet',						l.store:charset )				OR
					NOT PRV_Tag_Integer( 	'o:nonneg',		l.provide_xml, 'ScheduledTaskAdvance',				l.store:schtsk_adv )			OR
					NOT PRV_Tag_Integer( 	'o:nonneg',		l.provide_xml, 'ScheduledTaskMinRemaining',			l.store:schtsk_min )			OR
					NOT PRV_Tag_Integer( 	'O:nonneg',		l.provide_xml, 'ScheduledTaskQueueCount',			l.store:schtsk_que )			OR
					NOT PRV_Tag_Boolean( 	'o',			l.provide_xml, 'RequireShipping', 					l.store:req_ship ) 				OR
					NOT PRV_Tag_Boolean( 	'o',			l.provide_xml, 'RequireTax', 						l.store:req_tax ) 				OR
					NOT PRV_Tag_Boolean( 	'o',			l.provide_xml, 'RequireShippingForFreeOrders', 		l.store:req_frship ) 			OR
					NOT PRV_Tag_Integer(  	'o:nonneg',		l.provide_xml, 'OrderMinimumQuantity',				l.store:omin_quant ) 			OR
					NOT PRV_Tag_Number( 	'o:nonneg',		l.provide_xml, 'OrderMinimumPrice',					l.store:omin_price, 10, 2 ) 	OR
					NOT PRV_Tag_Text( 		'o',			l.provide_xml, 'OrderMinimumMessage',				l.store:omin_msg ) 				OR
					NOT PRV_Tag_Boolean( 	'o',			l.provide_xml, 'OrderMinimumMustMeetBothMinimums',	l.store:omin_all ) 				OR
					NOT PRV_Tag_Text( 		'o',			l.provide_xml, 'MaintenanceSet_OfflineOn',			l.store_offline_date ) 			OR
					NOT PRV_Tag_Text( 		'o',			l.provide_xml, 'MaintenanceSet_OfflineAt',			l.store_offline_time ) 			OR
					NOT PRV_Tag_Integer(  	'o:nonneg',		l.provide_xml, 'MaintenanceNoNewCustomer',			l.store:mnt_no_new )			OR
					NOT PRV_Tag_Text( 		'O',			l.provide_xml, 'MaintenanceIPAddresses',			l.store:mnt_ips )				OR
					NOT PRV_Tag_Text( 		'O',			l.provide_xml, 'MaintenanceWarningMessage',			l.store:mnt_warn ) 				OR
					NOT PRV_Tag_Text( 		'O',			l.provide_xml, 'MaintenanceMaintenanceMessage',		l.store:mnt_close ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ len( l.manager ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.manager, l.user ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User \'' $ l.manager $ '\' not found' ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.store:manager_id" 	VALUE = "{ l.user:id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Store_Load_Code( l.store:code, l.existing_store ) AND ( l.existing_store:id NE l.store:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Store with the code \'' $ l.existing_store:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.store:zip }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Zip( l.store:zip, l.store:country ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please enter a valid zip/postal code' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.store:phone }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Phone( l.store:phone, l.store:country ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please enter a valid phone/fax number' ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT ISNULL l.store:fax }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Phone( l.store:fax, l.store:country ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please enter a valid phone/fax number' ) }">
		</MvIF>	
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Range_Required( l.store:wtdispdig, 0, 8 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value of WeightUnitDisplayMinimumDigits: ' $ g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.store:charset }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_HTMLToken( l.store:charset ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Please specify a valid character set or an empty string' ) }">	
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ s.miva_config:timeout_async_sleep AND ( l.store:schtsk_adv GT s.miva_config:timeout_async_sleep ) }">
		<MvIF EXPR = "{ s.miva_config:timeout_async_sleep }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'ScheduledTaskAdvance must be between 0 and ' $ s.miva_config:timeout_async_sleep ) }">	
		</MvIF>
	</MvIF>	

	<MvIF EXPR = "{ s.miva_config:timeout_async AND ( l.store:schtsk_min GE s.miva_config:timeout_async ) }">
		<MvIF EXPR = "{ s.miva_config:timeout_async }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'ScheduledTaskMinRemaining must be between 0 and ' $ ( s.miva_config:timeout_async - 1 ) ) }">	
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.store_tax_module }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.store_tax_module, l.tax_module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.store_tax_module $ '\' not found' ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT l.tax_module:feature_hash:tax }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.tax_module:name $ '\' does not implement the tax feature.' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.tax_module:id NE l.store:tax_id }">
			<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Validate_Module_Add( l.tax_module, l.install_modules ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ len( l.store_currency_module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.store_currency_module, l.currency_module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.store_currency_module $ '\' not found' ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT l.currency_module:feature_hash:currency }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.currency_module:name $ '\' does not implement the currency feature.' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.currency_module:id NE l.store:currncy_id }">
			<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Validate_Module_Add( l.currency_module, l.install_modules ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ l.store_offline_date OR 
					l.store_offline_time }">
		<MvIF EXPR = "{ l.store_offline_time }">
			<MvASSIGN NAME = "l.time_hour" 	VALUE = "{ gettoken( l.store_offline_time, ':', 1 ) }">
			<MvASSIGN NAME = "l.time_min" 	VALUE = "{ gettoken( l.store_offline_time, ':', 2 ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.time_hour" 	VALUE = "12">
			<MvASSIGN NAME = "l.time_min" 	VALUE = "00">
		</MvIF>

		<MvIF EXPR = "{ l.store_offline_date }">
			<MvASSIGN NAME = "l.date_month" VALUE = "{ gettoken( l.store_offline_date, '/', 1 ) }">
			<MvASSIGN NAME = "l.date_day" 	VALUE = "{ gettoken( l.store_offline_date, '/', 2 ) }">
			<MvASSIGN NAME = "l.date_year" 	VALUE = "{ gettoken( l.store_offline_date, '/', 3 ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.date_month" VALUE = "{ padl( time_t_month( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
			<MvASSIGN NAME = "l.date_day" 	VALUE = "{ padl( time_t_dayofmonth( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
			<MvASSIGN NAME = "l.date_year" 	VALUE = "{ padl( time_t_year( s.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
		</MvIF>		
		
		<MvASSIGN NAME = "l.store:mnt_time" VALUE = "{ mktime_t( l.date_year, l.date_month, l.date_day, l.time_hour, l.time_min, '00', g.Merchant_Local_Timezone ) }">
		<MvIF EXPR = "{ l.store:mnt_time LE 0 }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid Maintenance Mode Date/Time' ) }">				
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml,	'MaintenanceSet_Online'	) }">
		<MvASSIGN NAME = "l.store:mnt_time" VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Validate and install new modules
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.result"	VALUE = "{ [ g.Module_Library_Utilities ].Validate_Module_AddRemove( l.install_modules, l.remove_modules, l.message ) }">
	<MvIF EXPR = "{ l.result EQ -2 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.message ) }">
	<MvELSEIF EXPR = "{ l.result EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ l.result EQ 1 OR l.result EQ -1 }">
		<MvIF EXPR = "{ NOT ISNULL l.store_tax_module }">
			<MvASSIGN NAME = "l.store:tax_id"		VALUE = "{ l.tax_module:id }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.store_currency_module }">
			<MvASSIGN NAME = "l.store:currncy_id"	VALUE = "{ l.currency_module:id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Install_Multiple( l.install_modules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Uninstall_Multiple( l.remove_modules ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Update the rest of the store settings
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update( l.store ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "g.Store"	VALUE = "{ l.store }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_StoreDelete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( 	l.provide_xml, 	'code',		l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Admin_Open_Store( l.code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Store \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.module_pos"		VALUE = 1>
	<MvASSIGN NAME = "l.module_count"	VALUE = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Active( l.modules ) }">

	<MvWHILE EXPR = "{ l.module_pos LE l.module_count }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Module_Load_Features( l.modules[ l.module_pos ] ) AND
						l.modules[ l.module_pos ]:feature_hash:data_store }">
			<MvDO FILE = "{ g.Module_Root $ l.modules[ l.module_pos ]:module }" NAME = "l.null" VALUE = "{ Module_Uninstall_Store( l.modules[ l.module_pos ] ) }">
		</MvIF>

		<MvASSIGN NAME = "l.module_pos"	VALUE = "{ l.module_pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Delete( g.Store ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_TrackingLink_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'type',	l.tracklink:type ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.tracklink:url"	VALUE = "{ l.provide_xml:value }">

	<MvIF EXPR = "{ [ g.Module_Library_DB ].TrackingLink_Load_Type( l.tracklink:type, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A tracking link with the type \'' $ l.tracklink:type $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].TrackingLink_Insert( l.tracklink ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_TrackingLink_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'type',		l.type ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].TrackingLink_Load_Type( l.type, l.tracklink ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A tracking link with the type \'' $ l.type $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.tracklink:url"	VALUE = "{ l.provide_xml:value }">
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].TrackingLink_Update( l.tracklink ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_TrackingLink_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'type',	l.type ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].TrackingLink_Load_Type( l.type , l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A tracking link with the type \'' $ l.type $ '\' does not exist' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].TrackingLink_Delete( l.type ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_SEOSettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SEOSettings_Load( l.seo_settings ) OR
					NOT [ g.Module_Feature_URI_DB ].URISettings_Load( l.uri_settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_seo_settings"	VALUE = "{ l.seo_settings }">
	<MvASSIGN NAME = "l.original_uri_settings"	VALUE = "{ l.uri_settings }">

	<MvIF EXPR = "{ NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'SEOFriendlyStoreFront',				l.seo_settings:sf_active								) OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'ShortLinksEnabled',					l.seo_settings:sl_active								) OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'UseProductIdentifierInBreadcrumbs',	l.seo_settings:plit_in_bc								) OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'AlwaysUseStoreCodeInURL',				l.seo_settings:sc_always								) OR
					NOT PRV_Tag_List(		'O', l.provide_xml, 'URLDelimiter',							l.seo_settings:url_delim,	'/,.,-,_,~', '/,.,-,_,~'	) OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'ProductPageIdentifier',				l.seo_settings:prod_lit									) OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'CategoryIdentifier',					l.seo_settings:cat_lit									) OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'URLPrefix',							l.seo_settings:prefix									) OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'URLSuffix',							l.seo_settings:suffix									) OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'URLPrefixOverride',					l.uri_settings:urlprefix								) OR
					NOT PRV_Tag_Text(		'o', l.provide_xml, 'SecureURLPrefixOverride',				l.uri_settings:surlprefix								) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ l.original_uri_settings:urlprefix NE l.uri_settings:urlprefix }">
		<MvIF EXPR = "{ ( NOT ISNULL l.uri_settings:urlprefix ) AND
						(
							(
								( 'http://' IN l.uri_settings:urlprefix NE 1 ) AND
								( 'https://' IN l.uri_settings:urlprefix NE 1 )
							) OR
							( substring( l.uri_settings:urlprefix, len( l.uri_settings:urlprefix ), 1 ) NE '/' )
						) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'URL Prefix Override setting must begin with \'http://\' OR \'https://\' and end with \'/\'' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.original_uri_settings:surlprefix NE l.uri_settings:surlprefix }">
		<MvIF EXPR = "{ NOT ISNULL l.uri_settings:surlprefix				AND
						( 'https://' IN l.uri_settings:surlprefix NE 1 		OR 
						  substring( l.uri_settings:surlprefix, len( l.uri_settings:surlprefix ), 1 ) NE '/' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Secure URL Prefix Override setting must begin with \'https://\' and end with \'/\'' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( l.original_uri_settings:urlprefix NE l.uri_settings:urlprefix ) OR
					( l.original_uri_settings:surlprefix NE l.uri_settings:surlprefix ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URISettings_Update( l.uri_settings ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_DB ].SEOSettings_Normalize( l.seo_settings ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].SEOSettings_Needs_Update( l.original_seo_settings, l.seo_settings ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SEOSettings_Update( l.seo_settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Admin].SEOSettings_UpdateHtaccess_from( l.seo_settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.pos"			VALUE = 1>
	<MvASSIGN NAME = "l.store_count"	VALUE = "{ [ g.Module_Library_DB ].StoreList_Load_All( l.store ) }">

	<MvWHILE EXPR = "{ l.pos LE l.store_count }">
		<MvIF EXPR = "{ [ g.Module_Admin ].Admin_Open_Store( l.store[ l.pos ]:code, l.null ) }">
			<MvASSIGN NAME = "l.module_pos"		VALUE = 1>
			<MvASSIGN NAME = "l.module_count"	VALUE = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_seo', l.modules ) }">

			<MvWHILE EXPR = "{ l.module_pos LE l.module_count }">
				<MvDO FILE = "{ g.Module_Root $ l.modules[ l.module_pos ]:module }" NAME = "l.ok" VALUE = "{ Module_Notify_SEOSettings( l.modules[ l.module_pos ], l.seo_settings ) }">
				<MvIF EXPR = "{ NOT l.ok }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvASSIGN NAME = "l.module_pos"	VALUE = "{ l.module_pos + 1 }">
			</MvWHILE>
		</MvIF>
		
		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_URISettings_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URISettings_Load( l.urisettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_urisettings" VALUE = "{ l.urisettings }">

	<MvIF EXPR = "{ NOT PRV_Tag_List( 		'o',	l.provide_xml, 'LinkSource', 					l.urisettings:source,
																   'long,uri,legacy,module',		'long,uri,legacy_seo,module' )	OR
					NOT PRV_Tag_Text( 		'O',	l.provide_xml, 'PageTemplate', 					l.urisettings:pg_templ )		OR
					NOT PRV_Tag_Text( 		'O',	l.provide_xml, 'CategoryTemplate', 				l.urisettings:ct_templ )		OR
					NOT PRV_Tag_Text( 		'O',	l.provide_xml, 'ProductTemplate', 				l.urisettings:pr_templ )		OR
					NOT PRV_Tag_Boolean(	'o',	l.provide_xml, 'AutoGeneratePageURIs', 			l.urisettings:pg_gen )			OR
					NOT PRV_Tag_Boolean(	'o',	l.provide_xml, 'AutoGenerateCategoryURIs', 		l.urisettings:ct_gen )			OR
					NOT PRV_Tag_Boolean(	'o',	l.provide_xml, 'AutoGenerateProductURIs', 		l.urisettings:pr_gen )			OR
					NOT PRV_Tag_Boolean(	'o',	l.provide_xml, 'AutoDeletePageURIs',			l.urisettings:pg_delete )		OR
					NOT PRV_Tag_Boolean(	'o',	l.provide_xml, 'AutoDeleteCategoryURIs',		l.urisettings:ct_delete )		OR
					NOT PRV_Tag_Boolean(	'o',	l.provide_xml, 'AutoDeleteProductURIs',			l.urisettings:pr_delete )		OR
					NOT PRV_Tag_Text(		'o:50', l.provide_xml, 'InvalidURIDestinationStore',	l.urisettings:def_store )		OR
					NOT PRV_Tag_Text(		'O:50', l.provide_xml, 'InvalidURIDestinationScreen',	l.urisettings:def_screen ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'LinkSource' ) }">
		<MvIF EXPR = "{ l.urisettings:source NE 'module' }">
			<MvASSIGN NAME = "l.urisettings:module_id" VALUE = 0>
		<MvELSEIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, 'Module' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module must be specified when LinkSource is "module"' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.urisettings:source EQ 'module' AND PRV_Tag_Exists( l.provide_xml, 'Module' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'Module', l.module_code ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Module[ 1 ], 'Module not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Module[ 1 ], 'Module not active' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:uri }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:Module[ 1 ], 'Module does not implement the uri feature' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.urisettings:module_id" VALUE = "{ l.module:id }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'URLPrefix' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 	'O', l.provide_xml, 'URLPrefix', 				l.urisettings:urlprefix ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ ( ( 'http://' IN l.urisettings:urlprefix NE 1 ) AND ( 'https://' IN l.urisettings:urlprefix NE 1 ) ) OR ( substring_var( l.urisettings:urlprefix, len_var( l.urisettings:urlprefix ), 1 ) NE '/' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'URLPrefix must begin with \'http://\' or \'https://\' and end with \'/\'.' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'SecureURLPrefix' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 	'o', l.provide_xml, 'SecureURLPrefix', 			l.urisettings:surlprefix ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ ( NOT ISNULL l.urisettings:surlprefix ) AND 
						( ( 'https://' IN l.urisettings:surlprefix NE 1 ) OR ( substring_var( l.urisettings:surlprefix, len_var( l.urisettings:surlprefix ), 1 ) NE '/' ) ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'SecureURLPrefix must begin with \'https://\' and end with \'/\'' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_URISettings_Regenerate_Handler( l.provide_xml, 'CanonicalPageURIHandling', 		l.urisettings:pg_regen ) OR
					NOT PRV_URISettings_Regenerate_Handler( l.provide_xml, 'CanonicalCategoryURIHandling',	l.urisettings:ct_regen ) OR
					NOT PRV_URISettings_Regenerate_Handler( l.provide_xml, 'CanonicalProductURIHandling',	l.urisettings:pr_regen ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.page_template_updated"				VALUE = 0>
	<MvASSIGN NAME = "l.category_template_updated"			VALUE = 0>
	<MvASSIGN NAME = "l.product_template_updated"			VALUE = 0>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'PageTemplate' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'PageTemplate', l.urisettings:pg_templ ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ miva_template_compile( g.Domain:license, l.urisettings:pg_templ, l.null, g.Module_Root $ 'templates/uri/page.tmp', l.compile_error ) }">
			<MvASSIGN NAME = "l.page_template_updated"		VALUE = 1>
		<MvELSE>
			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/page.tmp' ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/category.tmp' ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/product.tmp' ) }">

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:PageTemplate[ 1 ], 'Error compiling template: ' $ l.compile_error ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'CategoryTemplate' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'CategoryTemplate', l.urisettings:ct_templ ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ miva_template_compile( g.Domain:license, l.urisettings:ct_templ, l.null, g.Module_Root $ 'templates/uri/category.tmp', l.compile_error ) }">
			<MvASSIGN NAME = "l.category_template_updated"	VALUE = 1>
		<MvELSE>
			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/page.tmp' ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/category.tmp' ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/product.tmp' ) }">

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:CategoryTemplate[ 1 ], 'Error compiling template: ' $ l.compile_error ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'ProductTemplate' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'ProductTemplate', l.urisettings:pr_templ ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ miva_template_compile( g.Domain:license, l.urisettings:pr_templ, l.null, g.Module_Root $ 'templates/uri/product.tmp', l.compile_error ) }">
			<MvASSIGN NAME = "l.product_template_updated"	VALUE = 1>
		<MvELSE>
			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/page.tmp' ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/category.tmp' ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/product.tmp' ) }">

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml:tags:ProductTemplate[ 1 ], 'Error compiling template: ' $ l.compile_error ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URISettings_Update( l.urisettings ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/page.tmp' ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/category.tmp' ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/uri/product.tmp' ) }">

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00090', 'URI settings updated' ) }">

	<MvIF EXPR = "{ l.original_urisettings:module_id NE l.urisettings:module_id }">
		<MvIF EXPR = "{ l.original_urisettings:module_id GT 0 }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Decrement_ReferenceCount( l.original_urisettings:module_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.urisettings:module_id GT 0 }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Increment_ReferenceCount( l.urisettings:module_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.page_template_updated }">		<MvASSIGN NAME = "l.null" VALUE = "{ srename( g.Module_Root $ 'templates/uri/page.tmp',		g.Module_Root $ 'templates/uri/page.mvc' ) }">		</MvIF>
	<MvIF EXPR = "{ l.category_template_updated }">	<MvASSIGN NAME = "l.null" VALUE = "{ srename( g.Module_Root $ 'templates/uri/category.tmp',	g.Module_Root $ 'templates/uri/category.mvc' ) }">	</MvIF>
	<MvIF EXPR = "{ l.product_template_updated }">	<MvASSIGN NAME = "l.null" VALUE = "{ srename( g.Module_Root $ 'templates/uri/product.tmp',	g.Module_Root $ 'templates/uri/product.mvc' ) }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_Group_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml, 'Name',			l.group:name ) OR
					NOT PRV_Tag_Text( 'R', l.provide_xml, 'Description',	l.group:descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Group_Name( l.group:name ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, g.Validation_Message ) }">
	<MvELSEIF EXPR = "{ [ g.Module_Library_DB ].Group_Load_Name( l.group:name, l.existing_group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Insert( l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00042', 'Group \'' $ l.group:name $ '\' inserted' ) }">

	<MvFOREACH ITERATOR = "l.privilege_xml" ARRAY = "l.provide_xml:tags:Privilege">
		<MvIF EXPR = "{ NOT PRV_Attribute_Boolean( 	l.privilege_xml,	'view',		l.group_privilege:viewpriv ) 	OR
						NOT PRV_Attribute_Boolean( 	l.privilege_xml,	'add',		l.group_privilege:addpriv ) 	OR
						NOT PRV_Attribute_Boolean( 	l.privilege_xml,	'modify',	l.group_privilege:modifypriv )	OR
						NOT PRV_Attribute_Boolean( 	l.privilege_xml,	'delete',	l.group_privilege:deletepriv ) 	OR
						NOT PRV_Attribute_Text( 	l.privilege_xml,	'code',		l.group_privilege:privilege ) }">
			<MvFOREACHCONTINUE>
		</MvIF>
		
		<MvIF EXPR = "{ l.group_privilege:viewpriv		OR
						l.group_privilege:addpriv		OR
						l.group_privilege:modifypriv	OR
						l.group_privilege:deletepriv }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].DomainPrivilege_Load_Privilege( l.group_privilege:privilege, l.null ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group privilege with the code \'' $ l.group_privilege:privilege $ '\' does not exist, ignored' ) }">
				<MvFOREACHCONTINUE>
			<MvELSE>
				<MvASSIGN NAME = "l.group_privilege:group_id"	VALUE = "{ l.group:id }">		

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GroupPrivilege_Insert( l.group_privilege ) }">
					<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00043', 'Privilege \'' $ l.group_privilege:privilege $ '\' assigned to group \'' $ l.group:name $ '\'view=' $ l.group_privilege:addpriv $ 'add=' $ l.group_privilege:modifypriv $ 'modify=' $ l.group_privilege:deletepriv $ 'delete=' $ l.group_privilege:privilege ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_Group_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml,	'name',		l.group_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O', l.provide_xml, 'Name',			l.group:name ) OR
					NOT PRV_Tag_Text( 'O', l.provide_xml, 'Description',	l.group:descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ l.group_name NE l.group:name }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Group_Load_Name( l.group:name, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group:name $ '\' already exist' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Update( l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00044', 'Group \'' $ l.group:name $ '\' updated' ) }">

	<MvFOREACH ITERATOR = "l.privilege_xml" ARRAY = "l.provide_xml:tags:Privilege">
		<MvIF EXPR = "{ NOT PRV_Attribute_Boolean( 	l.privilege_xml,	'view',		l.group_privilege:viewpriv ) 	OR
						NOT PRV_Attribute_Boolean( 	l.privilege_xml,	'add',		l.group_privilege:addpriv ) 	OR
						NOT PRV_Attribute_Boolean( 	l.privilege_xml,	'modify',	l.group_privilege:modifypriv )	OR
						NOT PRV_Attribute_Boolean( 	l.privilege_xml,	'delete',	l.group_privilege:deletepriv ) 	OR
						NOT PRV_Attribute_Text( 	l.privilege_xml,	'code',		l.group_privilege:privilege ) }">
			<MvFOREACHCONTINUE>
		</MvIF>
		
		<MvASSIGN NAME = "l.group_privilege:group_id" 	VALUE = "{ l.group:id }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].DomainPrivilege_Load_Privilege( l.group_privilege:privilege, l.null ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group privilege with the code \'' $ l.group_privilege:privilege $ '\' does not exist, ignored' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>
		
		<MvIF EXPR = "{ [ g.Module_Library_DB ].GroupPrivilege_Load_Group_Privilege( l.group:id, l.group_privilege:privilege, l.groupxpriv ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GroupPrivilege_Update( l.group_privilege ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00045', 'Privilege \'' $ l.group_privilege:privilege $ '\' updated on group \'' $ l.group:name $ '\'view=' $ l.group_privilege:addpriv $ 'add=' $ l.group_privilege:modifypriv $ 'modify=' $ l.group_privilege:deletepriv $ 'delete=' $ l.group_privilege:privilege ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GroupPrivilege_Insert( l.group_privilege ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00046', 'Privilege \'' $ l.group_privilege:privilege $ '\' assigned to group \'' $ l.group:name $ '\'view=' $ l.group_privilege:addpriv $ 'add=' $ l.group_privilege:modifypriv $ 'modify=' $ l.group_privilege:deletepriv $ 'delete=' $ l.group_privilege:privilege ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_Group_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'name',	l.group_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">		
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Delete( l.group ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00047', 'Group \'' $ l.group:name $ '\' deleted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_GroupUser_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',	l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'store',	l.store_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'user',	l.user_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_Code( l.store_code, l.store ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A store with the code \'' $ l.store_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.user_name, l.user ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User with the name \'' $ l.user_name $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserXGroup_Load( l.user:id, l.store:id, l.group:id, l.userxgroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserXGroup_Insert( l.user:id, l.store:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00048', 'User \'' $ l.user:name $ '\' assigned to group \'' $ l.group:name $ '\' in store \'' $ l.store:code $ '\'' ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A user with the name \'' $ l.user:name $ '\' is already assigned to group \'' $ l.group:name $ '\' in store \'' $ l.store:code $ '\'' ) }">		
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_GroupUser_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',	l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'store',	l.store_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'user',	l.user_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_Code( l.store_code, l.store ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A store with the code \'' $ l.store_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_Name( l.user_name, l.user ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'User with the name \'' $ l.user_name $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].UserXGroup_Load( l.user:id, l.store:id, l.group:id, l.userxgroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserXGroup_Delete( l.user:id, l.store:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00049', 'User \'' $ l.user:name $ '\' unassigned from group \'' $ l.group:name $ '\' in store \'' $ l.store:code $ '\'' ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A user with the name \'' $ l.user:name $ '\' is not assigned to group \'' $ l.group:name $ '\' in store \'' $ l.store:code $ '\'' ) }">	
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_GroupImportModule_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',			l.group_name ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'store',			l.store_code ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'module_code',	l.module_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_Code( l.store_code, l.store ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A store with the code \'' $ l.store_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A module with the code \'' $ l.module_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' is not active' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:import }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' does not implement the import feature' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Feature_IMP_DB ].ImportModuleXGroup_Load( l.store:id, l.module:id, l.group:id, l.importmodulexgroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A module with the code \'' $ l.module:code $ '\' is already assigned to group \'' $ l.group_name $ '\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].ImportModuleXGroup_Insert( l.store:id, l.module:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00050', 'Import module \'' $ l.module:code $ '\' assigned to group \'' $ l.group:name $ '\' in store \'' $ l.store:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_GroupImportModule_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',			l.group_name ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'store',			l.store_code ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'module_code',	l.module_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_Code( l.store_code, l.store ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A store with the code \'' $ l.store_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A module with the code \'' $ l.module_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' is not active' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:import }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' does not implement the import feature' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].ImportModuleXGroup_Load( l.store:id, l.module:id, l.group:id, l.importmodulexgroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A module with the code \'' $ l.module:code $ '\' is not assigned to group \'' $ l.group_name $ '\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].ImportModuleXGroup_Delete( l.store:id, l.module:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00051', 'Import module \'' $ l.module:code $ '\' unassigned from group \'' $ l.group:name $ '\' in store \'' $ l.store:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_GroupExportModule_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',			l.group_name ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'store',			l.store_code ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'module_code',	l.module_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_Code( l.store_code, l.store ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A store with the code \'' $ l.store_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A module with the code \'' $ l.module_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' is not active' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:export }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' does not implement the export feature' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ [ g.Module_Feature_IMP_DB ].ExportModuleXGroup_Load( l.store:id, l.module:id, l.group:id, l.exportmodulexgroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A module with the code \'' $ l.module:code $ '\' is already assigned to group \'' $ l.group_name $ '\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].ExportModuleXGroup_Insert( l.store:id, l.module:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00052', 'Export module \'' $ l.module:code $ '\' assigned to group \'' $ l.group:name $ '\' in store \'' $ l.store:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_GroupExportModule_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group',			l.group_name ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'store',			l.store_code ) 	OR
					NOT PRV_Attribute_Text( l.provide_xml, 'module_code',	l.module_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Group_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A group with the name \'' $ l.group_name $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_Code( l.store_code, l.store ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A store with the code \'' $ l.store_code $ '\' does not exist' ) }">		
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A module with the code \'' $ l.module_code $ '\' does not exist' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' is not active' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:export }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:name $ '\' does not implement the export feature' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].ExportModuleXGroup_Load( l.store:id, l.module:id, l.group:id, l.exportmodulexgroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A module with the code \'' $ l.module:code $ '\' is not assigned to group \'' $ l.group_name $ '\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_IMP_DB ].ExportModuleXGroup_Delete( l.store:id, l.module:id, l.group:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00053', 'Import module \'' $ l.module:code $ '\' unassigned from group \'' $ l.group:name $ '\' in store \'' $ l.store:code $ '\'' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_PrintQueue_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R:254', l.provide_xml, 'Description', l.printqueue:descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].PrintQueue_Load_Description( l.printqueue:descrip, l.existing_printqueue ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A print queue with the description \'' $ l.existing_printqueue:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].PrintQueue_Insert( l.printqueue ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00067', 'Print queue \'' $ l.printqueue:descrip $ '\' inserted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_PrintQueue_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'descrip', l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].PrintQueue_Load_Description( l.descrip, l.printqueue ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Print Queue \'' $ l.descrip $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'O:254', l.provide_xml, 'Description', l.printqueue:descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ tolower( l.descrip ) NE tolower( l.printqueue:descrip ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].PrintQueue_Load_Description( l.printqueue:descrip, l.existing_printqueue ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'A print queue with the description \'' $ l.existing_printqueue:descrip $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].PrintQueue_Update( l.printqueue ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00068', 'Print queue \'' $ l.printqueue:descrip $ '\' updated' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_PrintQueue_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'descrip', l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].PrintQueue_Load_Description( l.descrip, l.printqueue ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Print Queue \'' $ l.descrip $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].PrintQueue_Delete( l.printqueue ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00069', 'Print queue \'' $ l.printqueue:descrip $ '\' deleted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Domain_Module" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.code $ '\' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_array_elements( l.provide_xml:children ) }">
		<MvASSIGN NAME = "l.provide_xml:name" VALUE = "{ l.provide_xml:name $ '(' $ l.module:code $ ')' }">

		<MvIF EXPR = "{ NOT l.module:feature_hash:provision_domain }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Module \'' $ l.module:code $ '\' does not support domain-level provisioning' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Provision_Domain( l.module, l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_URISettings_Regenerate_Handler" PARAMETERS = "provide_xml var, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.provide_xml, l.tag_name ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.new_values" 		VALUE = "<space>,301,302,303,307">
	<MvASSIGN NAME = "l.new_results"		VALUE = ",301,302,303,307">
	<MvASSIGN NAME = "l.replace_values" 	VALUE = "<space>,200,301,302,303,307">
	<MvASSIGN NAME = "l.replace_results" 	VALUE = ",200,301,302,303,307">

	<MvREFERENCEARRAY NAME = "l.xml" VARIABLE = "l.provide_xml">
		<MvMEMBER NAME = "tags">
		<MvMEMBER NAME = "{ l.tag_name }">
		<MvDIMENSION INDEX = 1>
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT PRV_Attribute_List( l.xml, 'action', l.action, 'none,new,replace', 'none,new,replace' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.action EQ 'new' }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.xml, 'status', l.status, l.new_values, l.new_results ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.status }">	<MvASSIGN NAME = "l.output" VALUE = "{ 'new:' $ l.status }">
		<MvELSE>								<MvASSIGN NAME = "l.output" VALUE = "new">
		</MvIF>
	<MvELSEIF EXPR = "{ l.action EQ 'replace' }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.xml, 'status', l.status, l.replace_values, l.replace_results ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.status }">	<MvASSIGN NAME = "l.output" VALUE = "{ 'replace:' $ l.status }">
		<MvELSE>								<MvASSIGN NAME = "l.output" VALUE = "replace">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.output" VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Collection_Add" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.collection"				VALUE = "">
	<MvASSIGN NAME = "l.collection:immediate"	VALUE = 0>
	<MvASSIGN NAME = "l.filter"					VALUE = "">

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'R',		l.provide_xml, 'Code',			l.collection:code )			OR 
					NOT PRV_Tag_Text(		'R:100',	l.provide_xml, 'Name',			l.collection:name )			OR
					NOT PRV_Tag_Text(		'o:50',		l.provide_xml, 'RebuildKey',	l.collection:rebuildkey )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Immediate',		l.collection:immediate )	OR
					NOT PRV_Tag_Text(		'o',		l.provide_xml, 'Filter',		l.filter ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection with code \'' $ l.collection:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.filter }">
		<MvIF EXPR = "{ NOT miva_json_decode( l.filter, l.collection:filter ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid filter: ' $ miva_json_decode_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.collection:immediate AND ISNULL l.collection:filter }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Immediate flag can only be set if a filter is present' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Insert( l.collection ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.collection:filter }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].Collection_Rebuild_Products( l.collection ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00125', 'Collection \'' $ l.collection:code $ '\' added' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Collection_Update" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.filter"						VALUE = "">
	<MvASSIGN NAME = "l.rebuild_collection"			VALUE = 0>

	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_collection"		VALUE = "{ l.collection }">

	<MvIF EXPR = "{ NOT PRV_Tag_Code(		'O',		l.provide_xml, 'Code',			l.collection:code )			OR 
					NOT PRV_Tag_Text(		'O:100',	l.provide_xml, 'Name',			l.collection:name )			OR
					NOT PRV_Tag_Text(		'o:50',		l.provide_xml, 'RebuildKey',	l.collection:rebuildkey )	OR
					NOT PRV_Tag_Boolean(	'O',		l.provide_xml, 'Immediate',		l.collection:immediate ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection:code, l.existing_collection ) AND l.existing_collection:id NE l.collection:id }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection with code \'' $ l.collection:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'Filter' ) }">
		<MvIF EXPR = "{ NOT PRV_Tag_Text( 'o', l.provide_xml, 'Filter', l.filter ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.filter }">
			<MvASSIGN NAME = "l.collection:filter"	VALUE = "">
		<MvELSEIF EXPR = "{ NOT miva_json_decode( l.filter, l.collection:filter ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid filter: ' $ miva_json_decode_last_error() ) }">
		</MvIF>

		<MvCOMMENT>
		|
		| Determine if the filter changed. If so, we issue a rebuild to either generate
		| the new list of products, or (in the case of removing the filter) remove all
		| automatically assigned products from the collection and propagate downstream.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.existing_filter"		VALUE = "{ miva_json_encode( l.original_collection:filter, '' ) }">
		<MvASSIGN NAME = "l.normalized_filter"		VALUE = "{ miva_json_encode( l.collection:filter, '' ) }">
		<MvASSIGN NAME = "l.rebuild_collection"		VALUE = "{ strcmp( l.existing_filter, l.normalized_filter ) NE 0 }">
	</MvIF>

	<MvIF EXPR = "{ l.collection:immediate AND ISNULL l.collection:filter }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Immediate flag can only be set if a filter is present' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Update( l.collection ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.rebuild_collection }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].Collection_Rebuild_Products( l.collection ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00126', 'Collection \'' $ l.collection:code $ '\' updated' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_Collection_Delete" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'code', l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Delete( l.collection ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00127', 'Collection \'' $ l.collection:code $ '\' deleted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CategoryCollection_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'category_code',		l.category_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].CategoryXCollection_Load( l.category:id, l.collection:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection:code $ '\' is already assigned to Category \'' $ l.category:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.categoryxcollection"		VALUE = "">
	<MvASSIGN NAME = "l.categoryxcollection:cat_id" VALUE = "{ l.category:id }">
	<MvASSIGN NAME = "l.categoryxcollection:col_id" VALUE = "{ l.collection:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].CategoryXCollection_Insert( l.categoryxcollection ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].Category_Add_Collection_Products( l.category:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00124', 'Collection \'' $ l.collection:code $ '\' assigned to Category \'' $ l.category:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CategoryCollection_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'category_code',		l.category_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Category \'' $ l.category_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].CategoryXCollection_Load( l.category:id, l.collection:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection:code $ '\' is not assigned to Category \'' $ l.category:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].CategoryXCollection_Delete( l.category:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].Category_Remove_Collection_Products( l.category:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00111', 'Collection \'' $ l.collection:code $ '\' unassigned from Category \'' $ l.category:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CollectionProduct_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',		l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_COL_DB ].CollectionXProduct_Load( l.collection:id, l.product:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product:code $ '\' is already assigned to Collection \'' $ l.collection:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.collectionxproduct"				VALUE = "">
	<MvASSIGN NAME = "l.collectionxproduct:col_id"		VALUE = "{ l.collection:id }">
	<MvASSIGN NAME = "l.collectionxproduct:product_id"	VALUE = "{ l.product:id }">
	<MvASSIGN NAME = "l.collectionxproduct:type"		VALUE = "M">
	<MvASSIGN NAME = "l.collectionxproduct:status"		VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].CollectionXProduct_Insert( l.collectionxproduct ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].CollectionCategories_Add_Product( l.collection:id, l.product:id )				OR
					NOT [ g.Module_Feature_COL_UT ].CollectionPriceGroups_Add_Product( l.collection:id, l.product:id )				OR
					NOT [ g.Module_Feature_COL_UT ].CollectionPriceGroups_Add_ExcludedProduct( l.collection:id, l.product:id )		OR
					NOT [ g.Module_Feature_COL_UT ].CollectionPriceGroups_Add_QualifyingProduct( l.collection:id, l.product:id )	OR
					NOT [ g.Module_Feature_COL_UT ].CollectionAvailGroups_Add_Product( l.collection:id, l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features( 'colprod', l.modules ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Collection_Product_Add( l.module, l.collection:id, l.product:id ) }">
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00112', 'Collection \'' $ l.collection:code $ '\' assigned to Product \'' $ l.product:code $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_CollectionProduct_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'product_code',		l.product_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.type" VALUE = "automatic">

	<MvIF EXPR = "{ PRV_Attribute_Exists( l.provide_xml, 'type' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.provide_xml, 'type', l.type, 'exclude,automatic', 'exclude,automatic' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.type EQ 'automatic' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].CollectionXProduct_Load( l.collection:id, l.product:id, l.null ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product:code $ '\' is not assigned to Collection \'' $ l.collection:code $ '\'' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].CollectionXProduct_Delete( l.collection:id, l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
		
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00113', 'Product \'' $ l.product:code $ '\' unassigned from Collection \'' $ l.collection:code $ '\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ [ g.Module_Feature_COL_DB ].CollectionXProduct_Load( l.collection:id, l.product:id, l.collectionxproduct ) }">
			<MvASSIGN NAME = "l.collectionxproduct:type"		VALUE = "X">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].CollectionXProduct_Update( l.collectionxproduct ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00129', 'Product \'' $ l.product:code $ '\' in Collection \'' $ l.collection:code $'\' manually excluded' ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.collectionxproduct"				VALUE = "">
			<MvASSIGN NAME = "l.collectionxproduct:col_id"		VALUE = "{ l.collection:id }">
			<MvASSIGN NAME = "l.collectionxproduct:product_id"	VALUE = "{ l.product:id }">
			<MvASSIGN NAME = "l.collectionxproduct:type"		VALUE = "X">
			<MvASSIGN NAME = "l.collectionxproduct:status"		VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].CollectionXProduct_Insert( l.collectionxproduct ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00128', 'Product \'' $ l.product:code $ '\' manually excluded from Collection \'' $ l.collection:code $'\'' ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.module_count" VALUE = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features( 'colprod', l.modules ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].CollectionCategories_Remove_Product( l.collection:id, l.product:id )			OR
					NOT [ g.Module_Feature_COL_UT ].CollectionPriceGroups_Remove_Product( l.collection:id, l.product:id )			OR
					NOT [ g.Module_Feature_COL_UT ].CollectionPriceGroups_Remove_ExcludedProduct( l.collection:id, l.product:id )	OR
					NOT [ g.Module_Feature_COL_UT ].CollectionPriceGroups_Remove_QualifyingProduct( l.collection:id, l.product:id )	OR
					NOT [ g.Module_Feature_COL_UT ].CollectionAvailGroups_Remove_Product( l.collection:id, l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ l.module_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Collection_Product_Remove( l.module, l.collection:id, l.product:id ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].Category_Remove_Unused_Collection_Product( l.product:id )				OR
					NOT [ g.Module_Feature_COL_UT ].PriceGroup_Remove_Unused_Collection_Product( l.product:id )				OR
					NOT [ g.Module_Feature_COL_UT ].PriceGroup_Remove_Unused_Collection_ExcludedProduct( l.product:id )		OR
					NOT [ g.Module_Feature_COL_UT ].PriceGroup_Remove_Unused_Collection_QualifyingProduct( l.product:id )	OR
					NOT [ g.Module_Feature_COL_UT ].AvailGroup_Remove_Unused_Collection_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ l.module_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Collection_Product_Remove_Unreferenced( l.module, l.product:id ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupCollection_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXCollection_Load( l.group:id, l.collection:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection:code $ '\' is already assigned to Price Group \'' $ l.group:name $ '\'' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.pricegroupxcollection"			VALUE = "">
	<MvASSIGN NAME = "l.pricegroupxcollection:pgrp_id"	VALUE = "{ l.group:id }">
	<MvASSIGN NAME = "l.pricegroupxcollection:col_id"	VALUE = "{ l.collection:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXCollection_Insert( l.pricegroupxcollection ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].PriceGroup_Add_Collection_Products( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00114', 'Collection \'' $ l.collection:code $ '\' assigned to Price Group \'' $ l.group:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupCollection_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXCollection_Load( l.group:id, l.collection:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection:code $ '\' is not assigned to Price Group \'' $ l.group:name $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXCollection_Delete( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].PriceGroup_Remove_Collection_Products( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00115', 'Collection \'' $ l.collection:code $ '\' unassigned from Price Group \'' $ l.group:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupExcludedCollection_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedCollection_Load( l.group:id, l.collection:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection:code $ '\' is already excluded from Price Group \'' $ l.group:name $ '\'' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.pricegroupxexcludedcollection"			VALUE = "">
	<MvASSIGN NAME = "l.pricegroupxexcludedcollection:pgrp_id"	VALUE = "{ l.group:id }">
	<MvASSIGN NAME = "l.pricegroupxexcludedcollection:col_id"	VALUE = "{ l.collection:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedCollection_Insert( l.pricegroupxexcludedcollection ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].PriceGroup_Add_Collection_ExcludedProducts( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00116', 'Collection Exclusion \'' $ l.collection:code $ '\' assigned to Price Group \'' $ l.group:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupExcludedCollection_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedCollection_Load( l.group:id, l.collection:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection:code $ '\' does not exclude Price Group \'' $ l.group:name $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedCollection_Delete( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].PriceGroup_Remove_Collection_ExcludedProducts( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00117', 'Collection Exclusion \'' $ l.collection:code $ '\' unassigned from Price Group \'' $ l.group:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupQualifyingCollection_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingCollection_Load( l.group:id, l.collection:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Qualifying Collection \'' $ l.collection:code $ '\' is already assigned to Price Group \'' $ l.group:name $ '\'' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.pricegroupxqualifyingcollection"			VALUE = "">
	<MvASSIGN NAME = "l.pricegroupxqualifyingcollection:pgrp_id"	VALUE = "{ l.group:id }">
	<MvASSIGN NAME = "l.pricegroupxqualifyingcollection:col_id"		VALUE = "{ l.collection:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingCollection_Insert( l.pricegroupxqualifyingcollection ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].PriceGroup_Add_Collection_QualifyingProducts( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00118', 'Qualifying Collection \'' $ l.collection:code $ '\' assigned to Price Group \'' $ l.group:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_PriceGroupQualifyingCollection_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Price Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingCollection_Load( l.group:id, l.collection:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Qualifying Collection \'' $ l.collection:code $ '\' is not assigned to Price Group \'' $ l.group:name $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXQualifyingCollection_Delete( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].PriceGroup_Remove_Collection_QualifyingProducts( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00119', 'Qualifying Collection \'' $ l.collection:code $ '\' unassigned from Price Group \'' $ l.group:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupCollection_Assign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailGroupXCollection_Load( l.group:id, l.collection:id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection:code $ '\' is already assigned to Availability Group \'' $ l.group:name $ '\'' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.availgroupxcollection"			VALUE = "">
	<MvASSIGN NAME = "l.availgroupxcollection:agrp_id"	VALUE = "{ l.group:id }">
	<MvASSIGN NAME = "l.availgroupxcollection:col_id"	VALUE = "{ l.collection:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXCollection_Insert( l.availgroupxcollection ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].AvailGroup_Add_Collection_Products( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00120', 'Collection \'' $ l.collection:code $ '\' assigned to Availability Group \'' $ l.group:name $ '\'' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_Store_AvailabilityGroupCollection_Unassign" PARAMETERS = "provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'group_name',		l.group_name ) OR
					NOT PRV_Attribute_Text( l.provide_xml, 'collection_code',	l.collection_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Load_Name( l.group_name, l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Availability Group \'' $ l.group_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_DB ].Collection_Load_Code( l.collection_code, l.collection ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXCollection_Load( l.group:id, l.collection:id, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Collection \'' $ l.collection:code $ '\' is not assigned to Availability Group \'' $ l.group:name $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_AGR_DB ].AvailGroupXCollection_Delete( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_COL_UT ].AvailGroup_Remove_Collection_Products( l.group:id, l.collection:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PRV-ADM-00121', 'Collection \'' $ l.collection:code $ '\' unassigned from Availability Group \'' $ l.group:name $ '\'' ) }">
</MvFUNCTION>

<MvCOMMENT>
|
|	User Provisioning Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "PRV_Action_Provision_User_BookmarkAdd" PARAMETERS = "user var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'store_code', l.store_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.store_code }">
		<MvASSIGN NAME = "l.bookmark:store_id" VALUE = 0>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_Code( l.store_code, l.store ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Store \'' $ l.store_code $ '\' not found' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.bookmark:store_id" VALUE = "{ l.store:id }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml,	'Title',	l.bookmark:title ) OR
					NOT PRV_Tag_Text( 'R', l.provide_xml,	'action',	l.bookmark:action ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.bookmark:user_id" VALUE = "{ l.user:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Bookmark_Insert( l.bookmark ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_User_BookmarksDeleteAll" PARAMETERS = "user var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Bookmark_Delete_All_User_ID( l.user:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_User_SettingsUpdate" PARAMETERS = "user var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Integer(	'o', l.provide_xml,	'DefaultPagination',				l.user:page_len ) 	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml,	'HoverOn',							l.user:hover_on )	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml,	'BatchListSaveSortWhenSearching',	l.user:mmbl_sort )	OR
					NOT PRV_Tag_Boolean(	'o', l.provide_xml, 'WordWrapProductDescription',		l.user:wwdescrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, 'DefaultBatchListLoadCount' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List(	l.provide_xml:tags:DefaultBatchListLoadCount[ 1 ], 'type',	l.type, 'auto,custom', 'auto,custom' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.type EQ 'auto' }">
			<MvASSIGN NAME = "l.user:mmbl_count" VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'R', l.provide_xml, 'DefaultBatchListLoadCount', l.user:mmbl_count ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.user:mmbl_count ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'DefaultBatchListLoadCount must be a whole number greater than or equal to 0 when type equals "custom"' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.user:page_len ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'DefaultPagination must be a whole number greater than or equal to 0' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Update( l.user ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_User_UserPreferenceAdd" PARAMETERS = "user var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Attribute_Text( l.provide_xml, 'store_code', l.store_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.store_code }">
		<MvASSIGN NAME = "l.userpreference:store_id" VALUE = 0>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Load_Code( l.store_code, l.store ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Store \'' $ l.store_code $ '\' not found' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.userpreference:store_id" VALUE = "{ l.store:id }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Text( 'R', l.provide_xml,	'Key',		l.userpreference:key ) OR
					NOT PRV_Tag_Text( 'o', l.provide_xml,	'Value',	l.userpreference:value ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.userpreference:user_id" VALUE = "{ l.user:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserPreference_Insert( l.userpreference ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">	<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].UserPreference_Update( l.userpreference ) }">			<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Action_Provision_User_UserPreferencesDeleteAll" PARAMETERS = "user var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].UserPreference_Delete_All_User_ID( l.user:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
|	Module utility functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "PRV_LogMessage" PARAMETERS = "tag var, message" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.PRV_log_file_name }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.time_t" VALUE = "{ s.dyn_time_t }">

	<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.formatted_date" VALUE = "{ Format_Date( l.time_t, s.miva_language ) }">
	<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.formatted_time" VALUE = "{ Format_Time_Short( l.time_t, s.miva_language ) }">

	<MvEXPORT FILE = "{ g.PRV_log_file_name }" FIELDS = "l.formatted_date, l.formatted_time, l.tag:lineno, l.tag:name, l.message" DELIMITER = "	">
</MvFUNCTION> 

<MvFUNCTION NAME = "PRV_LogParseError" PARAMETERS = "" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.PRV_log_file_name }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.time_t" VALUE = "{ s.dyn_time_t }">

	<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.formatted_date" VALUE = "{ Format_Date( l.time_t, s.miva_language ) }">
	<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.formatted_time" VALUE = "{ Format_Time_Short( l.time_t, s.miva_language ) }">

	<MvEVAL EXPR = "{ xml_parse_error( l.error_lineno, l.error_text ) }">

	<MvEXPORT FILE = "{ g.PRV_log_file_name }" FIELDS = "l.formatted_date, l.formatted_time, l.error_lineno, l.null, l.error_text" DELIMITER = "	">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_LogError" PARAMETERS = "tag var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.PRV_log_file_name }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.time_t" VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.message" VALUE = "{ 'Fatal Error: ' $ g.Error_Code $ ': ' $ g.Error_Message }">

	<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.formatted_date" VALUE = "{ Format_Date( l.time_t, s.miva_language ) }">
	<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.formatted_time" VALUE = "{ Format_Time_Short( l.time_t, s.miva_language ) }">

	<MvEXPORT FILE = "{ g.PRV_log_file_name }" FIELDS = "l.formatted_date, l.formatted_time, l.tag:lineno, l.tag:name, l.message" DELIMITER = "	">
</MvFUNCTION> 

<MvFUNCTION NAME = "PRV_Attribute_Text" PARAMETERS = "provide_xml var, attribute_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:attribute, l.attribute_name ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required attribute ' $ l.attribute_name ) }">
	</MvIF>

	<MvASSIGN NAME = "l.output"	VALUE = "{ trim( miva_variable_value( 'l.provide_xml:attribute:' $ l.attribute_name ) ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Attribute_Number" PARAMETERS = "provide_xml var, attribute_name, output var, precision, scale" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:attribute, l.attribute_name ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required attribute ' $ l.attribute_name ) }">
	</MvIF>

	<MvASSIGN NAME = "l.output"	VALUE = "{ trim( miva_variable_value( 'l.provide_xml:attribute:' $ l.attribute_name ) ) }">

	<MvIF EXPR = "{ l.precision EQ -1 }">
		<MvASSIGN NAME = "l.valid"		VALUE = "{ [ g.Module_Admin ].Validate_WholeNumber_Required( l.output ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.valid"		VALUE = "{ [ g.Module_Admin ].Validate_Decimal( l.output, l.precision, l.scale ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.valid }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for ' $ l.attribute_name $ ': ' $ g.Validation_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Attribute_Integer" PARAMETERS = "provide_xml var, attribute_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ PRV_Attribute_Number( l.provide_xml, l.attribute_name, l.output, -1, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Attribute_Boolean" PARAMETERS = "provide_xml var, attribute_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:attribute, l.attribute_name ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required attribute ' $ l.attribute_name ) }">
	</MvIF>

	<MvASSIGN NAME = "l.value"	VALUE = "{ tolower( trim( miva_variable_value( 'l.provide_xml:attribute:' $ l.attribute_name ) ) ) }">

	<MvIF EXPR = "{ ( l.value EQ 'yes' ) OR ( l.value EQ 'true' ) OR ( l.value EQ '1' ) }">
		<MvASSIGN NAME = "l.output"	VALUE = 1>
	<MvELSEIF EXPR = "{ ( l.value EQ 'no' ) OR ( l.value EQ 'false' ) OR ( l.value EQ '0' ) }">
		<MvASSIGN NAME = "l.output"	VALUE = 0>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for ' $ l.attribute_name $ ': Boolean values must be Yes/No, True/False, or 0/1' ) }">
	</MvIF>	

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Attribute_List" PARAMETERS = "provide_xml var, attribute_name, output var, attribute_values, result_values" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:attribute, l.attribute_name ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required attribute ' $ l.attribute_name ) }">
	</MvIF>

	<MvASSIGN NAME = "l.value"			VALUE = "{ tolower( trim( miva_variable_value( 'l.provide_xml:attribute:' $ l.attribute_name ) ) ) }">

	<MvASSIGN NAME = "l.pos"			VALUE = 1>
	<MvASSIGN NAME = "l.pos_value"		VALUE = "{ tolower( trim( gettoken( l.attribute_values, ',', l.pos ) ) ) }">
	
	<MvWHILE EXPR = "{ len( l.pos_value ) }">
		<MvIF EXPR = "{ l.value EQ l.pos_value }">
			<MvASSIGN NAME = "l.output"	VALUE = "{ trim( gettoken( l.result_values, ',', l.pos ) ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + 1 }">
		<MvASSIGN NAME = "l.pos_value"	VALUE = "{ tolower( trim( gettoken( l.attribute_values, ',', l.pos ) ) ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.attribute_name $ ' must be one of: ' $ l.attribute_values ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Attribute_Exists" PARAMETERS = "provide_xml var, attribute_name" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:attribute, l.attribute_name ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvREFERENCE NAME = "l.attribute" VARIABLE = "{ 'l.provide_xml:attribute:' $ l.attribute_name }">

	<MvIF EXPR = "{ miva_array_elements( l.attribute ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Multiple values for ' $ l.attribute_name $ ' specified, ignored' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_Text" PARAMETERS = "required, provide_xml var, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.colon_pos"	VALUE = "{ ':' IN l.required }">
	<MvASSIGN NAME = "l.max_length"	VALUE = -1>

	<MvIF EXPR = "{ l.colon_pos }">
		<MvASSIGN NAME = "l.max_length" VALUE = "{ substring_var( l.required, l.colon_pos + 1, len_var( l.required ) - l.colon_pos ) }">
		<MvASSIGN NAME = "l.required"	VALUE = "{ substring_var( l.required, 1, l.colon_pos - 1 ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:tags, l.tag_name ) }">
		<MvIF EXPR = "{ ( l.required EQ 'R' ) OR ( l.required EQ 'r' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag ' $ l.tag_name ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvREFERENCE NAME = "l.tag"	VARIABLE = "{ 'l.provide_xml:tags:' $ l.tag_name }">

	<MvIF EXPR = "{ miva_array_elements( l.tag ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Multiple values for ' $ l.tag_name $ ' specified' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.output"	VALUE = "{ trim( l.tag[ 1 ]:value ) }">

	<MvIF EXPR = "{ ISNULL l.output }">
		<MvIF EXPR = "{ ( l.required EQ 'R' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The value of ' $ l.tag_name $ ' may not be blank' ) }">
		<MvELSEIF EXPR = "{ l.required EQ 'O' }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'If specified, the value of ' $ l.tag_name $ ' may not be blank' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ PRV_Attribute_Exists( l.tag[ 1 ], 'encoding' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_List( l.tag[ 1 ], 'encoding', l.encoding, 'base64', 'base64' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ strcasecmp( l.encoding, 'base64' ) EQ 0 }">
			<MvASSIGN NAME = "l.output" VALUE = "{ crypto_base64_decode( l.output ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.max_length NE -1 }">
		<MvIF EXPR = "{ len_var( l.output ) GT l.max_length }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Value for ' $ l.tag_name $ ' must be ' $ l.max_length $ ' characters or less' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_Code" PARAMETERS = "required, provide_xml var, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Text( l.required, l.provide_xml, l.tag_name, l.output ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ PRV_Tag_Exists( l.provide_xml, l.tag_name ) AND ( NOT ISNULL l.output ) }"> 
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.output ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for ' $ l.tag_name $ ': ' $ g.Validation_Message ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_Number" PARAMETERS = "required, provide_xml var, tag_name, output var, precision, scale" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.colon_pos"	VALUE = "{ ':' IN l.required }">
	<MvASSIGN NAME = "l.flag"		VALUE = "">

	<MvIF EXPR = "{ l.colon_pos }">
		<MvASSIGN NAME = "l.flag"		VALUE = "{ substring_var( l.required, l.colon_pos + 1, len_var( l.required ) - l.colon_pos ) }">
		<MvASSIGN NAME = "l.required"	VALUE = "{ substring_var( l.required, 1, l.colon_pos - 1 ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:tags, l.tag_name ) }">
		<MvIF EXPR = "{ ( l.required EQ 'R' ) OR ( l.required EQ 'r' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag ' $ l.tag_name ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvREFERENCE NAME = "l.tag"	VARIABLE = "{ 'l.provide_xml:tags:' $ l.tag_name }">

	<MvIF EXPR = "{ miva_array_elements( l.tag ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Multiple values for ' $ l.tag_name $ ' specified' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.output"	VALUE = "{ trim( l.tag[ 1 ]:value ) }">

	<MvIF EXPR = "{ ISNULL l.output }">
		<MvIF EXPR = "{ ( l.required EQ 'R' ) OR ( l.required EQ 'r' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The value of ' $ l.tag_name $ ' may not be blank' ) }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'If specified, the value of ' $ l.tag_name $ ' may not be blank' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.precision EQ -1 }">
		<MvIF EXPR = "{ l.flag EQ 'nonneg' }">			<MvASSIGN NAME = "l.valid" VALUE = "{ [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.output ) }">
		<MvELSEIF EXPR = "{ l.flag EQ 'positive' }">	<MvASSIGN NAME = "l.valid" VALUE = "{ [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.output ) }">
		<MvELSE>										<MvASSIGN NAME = "l.valid" VALUE = "{ [ g.Module_Admin ].Validate_WholeNumber( l.output ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.flag EQ 'nonneg' }">			<MvASSIGN NAME = "l.valid" VALUE = "{ [ g.Module_Admin ].Validate_FloatingPoint_Length_NonNegative_Required( l.output, l.precision, l.scale ) }">
		<MvELSEIF EXPR = "{ l.flag EQ 'positive' }">	<MvASSIGN NAME = "l.valid" VALUE = "{ [ g.Module_Admin ].Validate_FloatingPoint_Length_Positive_Required( l.output, l.precision, l.scale ) }">
		<MvELSE>										<MvASSIGN NAME = "l.valid" VALUE = "{ [ g.Module_Admin ].Validate_Decimal( l.output, l.precision, l.scale ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.valid }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for ' $ l.tag_name $ ': ' $ g.Validation_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_Integer" PARAMETERS = "required, provide_xml var, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ PRV_Tag_Number( l.required, l.provide_xml, l.tag_name, l.output, -1, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_Price" PARAMETERS = "required, provide_xml var, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ PRV_Tag_Number( l.required, l.provide_xml, l.tag_name, l.output, 16, 8 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_Boolean" PARAMETERS = "required, provide_xml var, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:tags, l.tag_name ) }">
		<MvIF EXPR = "{ ( l.required EQ 'R' ) OR ( l.required EQ 'r' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag ' $ l.tag_name ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvREFERENCE NAME = "l.tag"	VARIABLE = "{ 'l.provide_xml:tags:' $ l.tag_name }">

	<MvIF EXPR = "{ miva_array_elements( l.tag ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Multiple values for ' $ l.tag_name $ ' specified' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.value"	VALUE = "{ tolower( trim( l.tag[ 1 ]:value ) ) }">

	<MvIF EXPR = "{ ( l.value EQ 'yes' ) OR ( l.value EQ 'true' ) OR ( ( 'x' $ l.value ) EQ 'x1' ) }">
		<MvASSIGN NAME = "l.output"	VALUE = 1>
	<MvELSEIF EXPR = "{ ( l.value EQ 'no' ) OR ( l.value EQ 'false' ) OR ( ( 'x' $ l.value ) EQ 'x0' ) }">
		<MvASSIGN NAME = "l.output"	VALUE = 0>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid value for ' $ l.tag_name $ ': Boolean values must be Yes/No, True/False, or 0/1' ) }">
	</MvIF>	

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_List" PARAMETERS = "required, provide_xml var, tag_name, output var, tag_values, result_values" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:tags, l.tag_name ) }">
		<MvIF EXPR = "{ ( l.required EQ 'R' ) OR ( l.required EQ 'r' ) }">
			<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Missing required tag ' $ l.tag_name ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvREFERENCE NAME = "l.tag"			VARIABLE = "{ 'l.provide_xml:tags:' $ l.tag_name }">

	<MvIF EXPR = "{ miva_array_elements( l.tag ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Multiple values for ' $ l.tag_name $ ' specified' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.value"			VALUE = "{ tolower( trim( l.tag[ 1 ]:value ) ) }">

	<MvASSIGN NAME = "l.pos"			VALUE = 1>
	<MvASSIGN NAME = "l.pos_value"		VALUE = "{ tolower( trim( gettoken( l.tag_values, ',', l.pos ) ) ) }">
	
	<MvWHILE EXPR = "{ len( l.pos_value ) }">
		<MvIF EXPR = "{ l.value EQ l.pos_value }">
			<MvASSIGN NAME = "l.output"	VALUE = "{ trim( gettoken( l.result_values, ',', l.pos ) ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + 1 }">
		<MvASSIGN NAME = "l.pos_value"	VALUE = "{ tolower( trim( gettoken( l.tag_values, ',', l.pos ) ) ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, l.tag_name $ ' must be one of: ' $ l.tag_values ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_Exists" PARAMETERS = "provide_xml var, tag_name" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:tags, l.tag_name ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvREFERENCE NAME = "l.tag"			VARIABLE = "{ 'l.provide_xml:tags:' $ l.tag_name }">

	<MvIF EXPR = "{ miva_array_elements( l.tag ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Multiple values for ' $ l.tag_name $ ' specified, ignored' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_Date" PARAMETERS = "provide_xml var, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:tags, l.tag_name ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvREFERENCE NAME = "l.tag"	VARIABLE = "{ 'l.provide_xml:tags:' $ l.tag_name }">

	<MvIF EXPR = "{ miva_array_elements( l.tag ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Multiple values for ' $ l.tag_name $ ' specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Exists( l.tag[ 1 ], 'Day' )		AND
					NOT PRV_Tag_Exists( l.tag[ 1 ], 'Month' )	AND
					NOT PRV_Tag_Exists( l.tag[ 1 ], 'Year' )	AND
					NOT PRV_Tag_Exists( l.tag[ 1 ], 'Hour' )	AND
					NOT PRV_Tag_Exists( l.tag[ 1 ], 'Minute' )	AND
					NOT PRV_Tag_Exists( l.tag[ 1 ], 'Second' )	AND
					NOT PRV_Attribute_Exists( l.tag[ 1 ], 'relative' ) }">
		<MvASSIGN NAME = "l.value"			VALUE = "{ trim( l.tag[ 1 ]:value ) }">

		<MvIF EXPR = "{ NOT ISNULL l.value }">
			<MvIF EXPR = "{ isdigit( l.value ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_Tag_Integer( 'R', l.provide_xml, l.tag_name, l.output ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Timestamp_RFC3339_To_Time( l.value, l.output ) }">
				<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.tag[ 1 ], g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.relative"		VALUE = 0>

	<MvIF EXPR = "{ PRV_Attribute_Exists( l.tag[ 1 ], 'relative' ) }">
		<MvIF EXPR = "{ NOT PRV_Attribute_Boolean( l.tag[ 1 ], 'relative', l.relative ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.relative }">
		<MvASSIGN NAME = "l.required"	VALUE = "R">
		<MvASSIGN NAME = "l.hour"		VALUE = 12>
		<MvASSIGN NAME = "l.minute"		VALUE = 0>
		<MvASSIGN NAME = "l.second"		VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.required"	VALUE = "O">
		<MvASSIGN NAME = "l.day"		VALUE = 0>
		<MvASSIGN NAME = "l.month"		VALUE = 0>
		<MvASSIGN NAME = "l.year"		VALUE = 0>
		<MvASSIGN NAME = "l.hour"		VALUE = 0>
		<MvASSIGN NAME = "l.minute"		VALUE = 0>
		<MvASSIGN NAME = "l.second"		VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Integer( l.required,	l.tag[ 1 ], 'Day',		l.day )		OR
					NOT PRV_Tag_Integer( l.required,	l.tag[ 1 ], 'Month',	l.month )	OR
					NOT PRV_Tag_Integer( l.required,	l.tag[ 1 ], 'Year',		l.year ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Tag_Integer( 'O',			l.tag[ 1 ], 'Hour',		l.hour )	OR
					NOT PRV_Tag_Integer( 'O',			l.tag[ 1 ], 'Minute',	l.minute )	OR
					NOT PRV_Tag_Integer( 'O',			l.tag[ 1 ], 'Second',	l.second ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT l.relative }">	<MvASSIGN NAME = "l.output" VALUE = "{ mktime_t( l.year, l.month, l.day, l.hour, l.minute, l.second, g.Merchant_Local_Timezone ) }">
	<MvELSE>							<MvASSIGN NAME = "l.output" VALUE = "{ mktime_t( s.tm_year + l.year, s.tm_mon + l.month, s.tm_mday + l.day, s.tm_hour + l.hour, s.tm_min + l.minute, s.tm_sec + l.second, g.Merchant_Local_Timezone ) }">
	</MvIF>

	<MvIF EXPR = "{ l.output EQ -1 }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'Invalid Date/Time' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Tag_Weight" PARAMETERS = "required, provide_xml, tag_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT PRV_Tag_Number( l.required, l.provide_xml, l.tag_name, l.value, 16, 8 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT miva_member_exists( l.provide_xml:tags, l.tag_name ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.tag" VARIABLE = "l.provide_xml:tags">
		<MvMEMBER NAME = "{ l.tag_name }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT PRV_Attribute_Exists( l.tag[ 1 ], 'unit' ) }">
		<MvASSIGN NAME = "l.output" VALUE = "{ l.value }">

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT PRV_Attribute_List( l.tag[ 1 ], 'unit', l.unit, 'oz,lb,g,kg', 'oz,lb,g,kg' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.output" VALUE = "{ [ g.Module_Library_Utilities ].Convert_Weight( l.value, l.unit, g.Store:wtunitcode ) }">

	<MvCOMMENT>
	|
	| The converted weight needs to be validated that it is still within the high precision weight
	| range as converting from one unit to another, such as kg to oz, can cause converted weight
	| to be much larger than the input weight.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Decimal( l.output, 16, 8 ) }">
		<MvFUNCTIONRETURN VALUE = "{ PRV_LogMessage( l.provide_xml, 'The converted weight is outside the range of supported precision' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PRV_Boolean_Encode" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.value }">
		<MvFUNCTIONRETURN VALUE = "Yes">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "No">
</MvFUNCTION>
