<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2023 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-INV-RNT-
| Next Error Code: 1    
|
</MvCOMMENT>

<MvFUNCTION NAME = "Runtime_Product_InventoryFields_Read" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.product:inv_active"		VALUE = "{ Products.d.ips_active AND Products.d.iset_active }">

	<MvIF EXPR = "{ NOT l.product:inv_active }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ( Products.d.ips_out_track EQ 'y' ) OR ( ( Products.d.ips_out_track EQ 'd' ) AND ( Products.d.iset_out_track ) ) }">
		<MvASSIGN NAME = "l.product:inv_out_track"		VALUE = 1>

		<MvIF EXPR = "{ Products.d.ips_out_lvl_d }">
			<MvASSIGN NAME = "l.product:inv_out_level"	VALUE = "{ Products.d.iset_out_level }">
			<MvASSIGN NAME = "l.product:inv_available"	VALUE = "{ Products.d.ipc_inventory - Products.d.iset_out_level }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_out_level"	VALUE = "{ Products.d.ips_out_level }">
			<MvASSIGN NAME = "l.product:inv_available"	VALUE = "{ Products.d.ipc_inventory - Products.d.ips_out_level }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_out_track"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_out_level"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_available"		VALUE = "{ Products.d.ipc_inventory }">
	</MvIF>

	<MvIF EXPR = "{ ( Products.d.ips_low_track EQ 'y' ) OR ( ( Products.d.ips_low_track EQ 'd' ) AND ( Products.d.iset_low_track ) ) }">
		<MvASSIGN NAME = "l.product:inv_low_track"		VALUE = 1>

		<MvIF EXPR = "{ Products.d.ips_low_lvl_d }">
			<MvASSIGN NAME = "l.product:inv_low_level"	VALUE = "{ Products.d.iset_low_level }">
			<MvASSIGN NAME = "l.product:inv_instock"	VALUE = "{ Products.d.ipc_inventory - Products.d.iset_low_level }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_low_level"	VALUE = "{ Products.d.ips_low_level }">
			<MvASSIGN NAME = "l.product:inv_instock"	VALUE = "{ Products.d.ipc_inventory - Products.d.ips_low_level }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_low_track"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_low_level"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_instock"		VALUE = "{ Products.d.ipc_inventory }">
	</MvIF>

	<MvIF EXPR = "{ ( l.product:inv_available LE 0 ) AND l.product:inv_out_track }">
		<MvASSIGN NAME = "l.product:inv_level"		VALUE = "out">

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_out_short }">
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_out_short ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.iset_out_short ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_out_long }">
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_out_long ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.iset_out_long ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ ( l.product:inv_instock LE 0 ) AND l.product:inv_low_track }">
		<MvASSIGN NAME = "l.product:inv_level"		VALUE = "low">

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_low_short }">
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_low_short ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.iset_low_short ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_low_long }">
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_low_long ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.iset_low_long ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_level"		VALUE = "in">

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_in_short }">
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_in_short ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.iset_in_short ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_in_long }">
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_in_long ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.iset_in_long ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Runtime_Product_InventoryFields_Read_WithInventorySettings" PARAMETERS = "inventorysettings var, product var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.product:inv_active"		VALUE = "{ Products.d.ips_active AND l.inventorysettings:active }">

	<MvIF EXPR = "{ NOT l.product:inv_active }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ( Products.d.ips_out_track EQ 'y' ) OR ( ( Products.d.ips_out_track EQ 'd' ) AND ( l.inventorysettings:out_track ) ) }">
		<MvASSIGN NAME = "l.product:inv_out_track"		VALUE = 1>

		<MvIF EXPR = "{ Products.d.ips_out_lvl_d }">
			<MvASSIGN NAME = "l.product:inv_out_level"	VALUE = "{ l.inventorysettings:out_level }">
			<MvASSIGN NAME = "l.product:inv_available"	VALUE = "{ Products.d.ipc_inventory - l.inventorysettings:out_level }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_out_level"	VALUE = "{ Products.d.ips_out_level }">
			<MvASSIGN NAME = "l.product:inv_available"	VALUE = "{ Products.d.ipc_inventory - Products.d.ips_out_level }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_out_track"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_out_level"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_available"		VALUE = "{ Products.d.ipc_inventory }">
	</MvIF>

	<MvIF EXPR = "{ ( Products.d.ips_low_track EQ 'y' ) OR ( ( Products.d.ips_low_track EQ 'd' ) AND ( l.inventorysettings:low_track ) ) }">
		<MvASSIGN NAME = "l.product:inv_low_track"		VALUE = 1>

		<MvIF EXPR = "{ Products.d.ips_low_lvl_d }">
			<MvASSIGN NAME = "l.product:inv_low_level"	VALUE = "{ l.inventorysettings:low_level }">
			<MvASSIGN NAME = "l.product:inv_instock"	VALUE = "{ Products.d.ipc_inventory - l.inventorysettings:low_level }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_low_level"	VALUE = "{ Products.d.ips_low_level }">
			<MvASSIGN NAME = "l.product:inv_instock"	VALUE = "{ Products.d.ipc_inventory - Products.d.ips_low_level }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_low_track"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_low_level"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_instock"		VALUE = "{ Products.d.ipc_inventory }">
	</MvIF>

	<MvIF EXPR = "{ ( l.product:inv_available LE 0 ) AND l.product:inv_out_track }">
		<MvASSIGN NAME = "l.product:inv_level"		VALUE = "out">

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_out_short }">
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_out_short ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.inventorysettings:out_short ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_out_long }">
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_out_long ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.inventorysettings:out_long ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ ( l.product:inv_instock LE 0 ) AND l.product:inv_low_track }">
		<MvASSIGN NAME = "l.product:inv_level"		VALUE = "low">

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_low_short }">
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_low_short ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.inventorysettings:low_short ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_low_long }">
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_low_long ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.inventorysettings:low_long ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_level"		VALUE = "in">

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_in_short }">
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_in_short ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.inventorysettings:in_short ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL Products.d.ips_in_long }">
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, Products.d.ips_in_long ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.inventorysettings:in_long ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Adjust" PARAMETERS = "product var, adjustment" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ Inventory_Adjust_LowLevel( l.product, l.adjustment ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Adjust_Variant" PARAMETERS = "product var, variant_id, adjustment" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.invprod_count"			VALUE = "{ [ g.Module_Library_DB ].ProductList_Load_Variant( l.product:id, l.variant_id, l.invprods ) }">
	<MvIF EXPR = "{ l.invprod_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ Inventory_Adjust_LowLevel( l.product, l.adjustment ) }">
	</MvIF>

	<MvASSIGN NAME = "l.invprod_pos"			VALUE = 1>
	<MvWHILE EXPR = "{ l.invprod_pos LE L.invprod_count }">
		<MvIF EXPR = "{ NOT Inventory_Adjust_LowLevel( l.invprods[ l.invprod_pos ], l.adjustment * l.invprods[ l.invprod_pos ]:quantity ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
		
		<MvASSIGN NAME = "l.invprod_pos"		VALUE = "{ l.invprod_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Adjust_LowLevel" PARAMETERS = "product var, adjustment" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.product:inv_active }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductCount_Adjust( l.product:id, l.adjustment ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.adjustment LT 0 }">
		<MvASSIGN NAME = "l.current_inventory" VALUE = "{ [ g.Module_Feature_INV_DB ].InventoryProductCount( l.product:id ) }">

		<MvCOMMENT>
		|
		| The weird code that subtracts l.adjustment from the out or low levels is there to verify
		| that *this* adjustment caused the product to go out of stock, and not a previous adjustment.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.product:inv_out_track AND
						( l.current_inventory LE l.product:inv_out_level ) AND
						( ( l.current_inventory - l.adjustment ) GT l.product:inv_out_level ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code_WithRuntimeInventory( l.product:code, l.product ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load_Cached( l.settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.settings:eml_out }">
				<MvASSIGN NAME = "l.subject"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.settings:eml_sub ) }">
				<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.settings:eml_msg ) }">

				<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.null" VALUE = "{ SendEmail( l.settings:eml_to,
																									l.settings:eml_from,
																									l.settings:eml_cc,
																									l.subject,
																									'',
																									l.message ) }">
			</MvIF>

			<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_prod', l.modules ) }">
				<MvIF EXPR = "{ l.module:api_ver GE 10.00 }">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_Product_OutOfStock( l.module, l.product ) }">
				</MvIF>
			</MvFOREACH>
		<MvELSEIF EXPR = "{ l.product:inv_low_track AND
							( l.current_inventory LE l.product:inv_low_level ) AND
							( ( l.current_inventory - l.adjustment ) GT l.product:inv_low_level ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code_WithRuntimeInventory( l.product:code, l.product ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load_Cached( l.settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.settings:eml_low }">
				<MvASSIGN NAME = "l.subject"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.settings:eml_sub ) }">
				<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.settings:eml_msg ) }">

				<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.null" VALUE = "{ SendEmail( l.settings:eml_to,
																									l.settings:eml_from,
																									l.settings:eml_cc,
																									l.subject,
																									'',
																									l.message ) }">
			</MvIF>

			<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_prod', l.modules ) }">
				<MvIF EXPR = "{ l.module:api_ver GE 10.00 }">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_Product_LowStock( l.module, l.product ) }">
				</MvIF>
			</MvFOREACH>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Check_Available" PARAMETERS = "product var, quantity" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ Inventory_Check_Available_LowLevel( l.product, l.quantity ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Check_Available_Variant" PARAMETERS = "product var, variant_id, quantity" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.invprod_count"			VALUE = "{ [ g.Module_Library_DB ].ProductList_Load_Variant( l.product:id, l.variant_id, l.invprods ) }">
	<MvIF EXPR = "{ l.invprod_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.result"	VALUE = "{ Inventory_Check_Available_LowLevel( l.product, l.quantity ) }">
		<MvIF EXPR = "{ l.result LT 0 }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.result EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.invprod_pos"			VALUE = 1>
	<MvWHILE EXPR = "{ l.invprod_pos LE L.invprod_count }">
		<MvASSIGN NAME = "l.result" VALUE = "{ Inventory_Check_Available_LowLevel( l.invprods[ l.invprod_pos ], l.quantity * l.invprods[ l.invprod_pos ]:quantity ) }">
		<MvIF EXPR = "{ l.result LT 0 }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.result EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
		
		<MvASSIGN NAME = "l.invprod_pos"		VALUE = "{ l.invprod_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Check_Available_LowLevel" PARAMETERS = "product var, quantity" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.product:inv_active OR
					NOT l.product:inv_out_track }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ ( l.product:inv_available LE 0 ) AND ( l.quantity GT 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ Inventory_Check_Available_Throw_Inventory_Out( l.product ) }">
	<MvELSEIF EXPR = "{ l.product:inv_available LT l.quantity }">					<MvFUNCTIONRETURN VALUE = "{ Inventory_Check_Available_Throw_Inventory_Limited( l.product ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Check_Available_Throw_Inventory_Out" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Load( l.product:id, l.ips ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvIF EXPR = "{ len( l.ips:out_long ) }">
		<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.ips:out_long ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load_Cached( l.settings ) }">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.settings:out_long ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Message_Error( l.message ) }">
	<MvIF EXPR = "{ NOT [ g.Module_Merchant ].UIException( 'inventory_out' ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Check_Available_Throw_Inventory_Limited" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Load( l.product:id, l.ips ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvIF EXPR = "{ len( l.ips:ltd_long ) }">
		<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.ips:ltd_long ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load_Cached( l.settings ) }">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.settings:ltd_long ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Message_Error( l.message ) }">
	<MvIF EXPR = "{ NOT [ g.Module_Merchant ].UIException( 'inventory_limited' ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Is_Available_Variant" PARAMETERS = "product var, variant_id, quantity" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.invprod_count"			VALUE = "{ [ g.Module_Library_DB ].ProductList_Load_Variant( l.product:id, l.variant_id, l.invprods ) }">
	<MvIF EXPR = "{ l.invprod_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.result"	VALUE = "{ Inventory_Is_Available_LowLevel( l.product, l.quantity ) }">
		<MvIF EXPR = "{ l.result LT 0 }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.result EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.invprod_pos"			VALUE = 1>
	<MvWHILE EXPR = "{ l.invprod_pos LE L.invprod_count }">
		<MvASSIGN NAME = "l.result" VALUE = "{ Inventory_Is_Available_LowLevel( l.invprods[ l.invprod_pos ], l.quantity * l.invprods[ l.invprod_pos ]:quantity ) }">
		<MvIF EXPR = "{ l.result LT 0 }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.result EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
		
		<MvASSIGN NAME = "l.invprod_pos"		VALUE = "{ l.invprod_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Is_Available_LowLevel" PARAMETERS = "product var, quantity" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.product:inv_active OR
					NOT l.product:inv_out_track }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ ( l.product:inv_available LE 0 ) AND ( l.quantity GT 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ Inventory_Is_Available_Report_Inventory_Out( l.product ) }">
	<MvELSEIF EXPR = "{ l.product:inv_available LT l.quantity }">					<MvFUNCTIONRETURN VALUE = "{ Inventory_Is_Available_Report_Inventory_Limited( l.product ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Is_Available_Report_Inventory_Out" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Load( l.product:id, l.ips ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvIF EXPR = "{ len( l.ips:out_long ) }">
		<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.ips:out_long ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load_Cached( l.settings ) }">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.settings:out_long ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Message_Error( l.message ) }">

	<MvFUNCTIONRETURN VALUE = -1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Is_Available_Report_Inventory_Limited" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Load( l.product:id, l.ips ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvIF EXPR = "{ len( l.ips:ltd_long ) }">
		<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.ips:ltd_long ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load_Cached( l.settings ) }">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.settings:ltd_long ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Message_Error( l.message ) }">

	<MvFUNCTIONRETURN VALUE = -1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Load_Variant" PARAMETERS = "product var, variant_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.invprod_count"					VALUE = "{ [ g.Module_Library_DB ].ProductList_Load_Variant( l.product:id, l.variant_id, l.invprods ) }">
	<MvIF EXPR = "{ l.invprod_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| Just return with the previous settings from Runtime_Product_Load_xxx still in place
		|
		</MvCOMMENT>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Reload the raw settings for the master product so we can reformat the messages
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load_Cached( l.global_settings ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Load( l.product:id, l.product_settings ) }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_INV_DB ].InventoryDefaultProductSettings( l.product_settings ) }">

		<MvIF EXPR = "{ ( l.product_settings:out_track EQ 'y' ) OR ( ( l.product_settings:out_track EQ 'd' ) AND ( l.global_settings:out_track ) ) }">
			<MvASSIGN NAME = "l.product:inv_out_track"		VALUE = 1>

			<MvIF EXPR = "{ l.product_settings:out_lvl_d }">
				<MvASSIGN NAME = "l.product:inv_out_level"	VALUE = "{ l.global_settings:out_level }">
			<MvELSE>
				<MvASSIGN NAME = "l.product:inv_out_level"	VALUE = "{ l.product_settings:out_level }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_out_track"		VALUE = 0>
			<MvASSIGN NAME = "l.product:inv_out_level"		VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ( l.product_settings:low_track EQ 'y' ) OR ( ( l.product_settings:low_track EQ 'd' ) AND ( l.global_settings:low_track ) ) }">
			<MvASSIGN NAME = "l.product:inv_low_track"		VALUE = 1>

			<MvIF EXPR = "{ l.product_settings:low_lvl_d }">
				<MvASSIGN NAME = "l.product:inv_low_level"	VALUE = "{ l.global_settings:low_level }">
			<MvELSE>
				<MvASSIGN NAME = "l.product:inv_low_level"	VALUE = "{ l.product_settings:low_level }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_low_track"		VALUE = 0>
			<MvASSIGN NAME = "l.product:inv_low_level"		VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Find the lowest quantity (including the variant part multiplier) of all the constituent parts
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.have_active"							VALUE = 0>

	<MvFOREACH ITERATOR = "l.invprod" ARRAY = "l.invprods" COUNT = "{ l.invprod_count }">
		<MvIF EXPR = "{ l.invprod:inv_active }">
			<MvASSIGN NAME = "l.invprod_available_partlimits"	VALUE = "{ int( l.invprod:inv_available / l.invprod:quantity ) }">
			<MvASSIGN NAME = "l.invprod_available_masterlimits"	VALUE = "{ int( ( l.invprod:inv_available + l.invprod:inv_out_level - l.product:inv_out_level ) / l.invprod:quantity ) }">

			<MvASSIGN NAME = "l.invprod_instock_partlimits"		VALUE = "{ int( l.invprod:inv_instock / l.invprod:quantity ) }">
			<MvASSIGN NAME = "l.invprod_instock_masterlimits"	VALUE = "{ int( ( l.invprod:inv_instock + l.invprod:inv_low_level - l.product:inv_low_level ) / l.invprod:quantity ) }">

			<MvASSIGN NAME = "l.invprod_available"				VALUE = "{ min( l.invprod_available_partlimits, l.invprod_available_masterlimits ) }">
			<MvASSIGN NAME = "l.invprod_instock"				VALUE = "{ min( l.invprod_instock_partlimits, l.invprod_instock_masterlimits ) }">

			<MvIF EXPR = "{ l.have_active }">
				<MvASSIGN NAME = "l.min_available"				VALUE = "{ min( l.min_available, l.invprod_available ) }">
				<MvASSIGN NAME = "l.min_instock"				VALUE = "{ min( l.min_available, l.invprod_instock ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.have_active"				VALUE = 1>

				<MvASSIGN NAME = "l.min_available"				VALUE = "{ int( l.invprod_available ) }">
				<MvASSIGN NAME = "l.min_instock"				VALUE = "{ int( l.invprod_instock ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT l.have_active }">
		<MvASSIGN NAME = "l.product:inv_active"			VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_available"		VALUE = 0>
		<MvASSIGN NAME = "l.product:inv_instock"		VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.product:inv_active"			VALUE = 1>
		<MvASSIGN NAME = "l.product:inv_available"		VALUE = "{ l.min_available }">
		<MvASSIGN NAME = "l.product:inv_instock"		VALUE = "{ l.min_instock }">

		<MvIF EXPR = "{ l.invprod_count EQ 1 }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Load( l.invprods[ 1 ]:id, l.invprod_product_settings ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Feature_INV_DB ].InventoryDefaultProductSettings( l.invprod_product_settings ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( l.product:inv_available LE 0 ) AND l.product:inv_out_track }">
			<MvASSIGN NAME = "l.product:inv_level"		VALUE = "out">

			<MvIF EXPR = "{ ( l.invprod_count EQ 1 ) AND ( NOT ISNULL l.invprod_product_settings:out_short ) }">
				<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.invprod_product_settings:out_short ) }">
			<MvELSEIF EXPR = "{ NOT ISNULL l.product_settings:out_short }">
				<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.product_settings:out_short ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.global_settings:out_short ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.invprod_count EQ 1 ) AND ( NOT ISNULL l.invprod_product_settings:out_long ) }">
				<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.invprod_product_settings:out_long ) }">
			<MvELSEIF EXPR = "{ NOT ISNULL l.product_settings:out_long }">
				<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.product_settings:out_long ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.global_settings:out_long ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ ( l.product:inv_instock LE 0 ) AND l.product:inv_low_track }">
			<MvASSIGN NAME = "l.product:inv_level"		VALUE = "low">

			<MvIF EXPR = "{ ( l.invprod_count EQ 1 ) AND ( NOT ISNULL l.invprod_product_settings:low_short ) }">
				<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.invprod_product_settings:low_short ) }">
			<MvELSEIF EXPR = "{ NOT ISNULL l.product_settings:low_short }">
				<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.product_settings:low_short ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.global_settings:low_short ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.invprod_count EQ 1 ) AND ( NOT ISNULL l.invprod_product_settings:low_long ) }">
				<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.invprod_product_settings:low_long ) }">
			<MvELSEIF EXPR = "{ NOT ISNULL l.product_settings:low_long }">
				<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.product_settings:low_long ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.global_settings:low_long ) }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.product:inv_level"		VALUE = "in">

			<MvIF EXPR = "{ ( l.invprod_count EQ 1 ) AND ( NOT ISNULL l.invprod_product_settings:in_short ) }">
				<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.invprod_product_settings:in_short ) }">
			<MvELSEIF EXPR = "{ NOT ISNULL l.product_settings:in_short }">
				<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.product_settings:in_short ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.product:inv_short"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.global_settings:in_short ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.invprod_count EQ 1 ) AND ( NOT ISNULL l.invprod_product_settings:in_long ) }">
				<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.invprod_product_settings:in_long ) }">
			<MvELSEIF EXPR = "{ NOT ISNULL l.product_settings:in_long }">
				<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.product_settings:in_long ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.product:inv_long"	VALUE = "{ Inventory_Tokenize_Message( l.product, l.global_settings:in_long ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Tokenize_Message" PARAMETERS = "product var, text" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.text" VALUE = "{ glosub( l.text, '%product_name%',	l.product:name ) }">
	<MvASSIGN NAME = "l.text" VALUE = "{ glosub( l.text, '%product_code%',	l.product:code ) }">
	<MvASSIGN NAME = "l.text" VALUE = "{ glosub( l.text, '%inv_instock%',	l.product:inv_instock ) }">
	<MvASSIGN NAME = "l.text" VALUE = "{ glosub( l.text, '%inv_available%',	l.product:inv_available ) }">
	<MvASSIGN NAME = "l.text" VALUE = "{ glosub( l.text, '%inv_level%',		l.product:inv_level ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.text }">
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Adjust_VariantPricing" PARAMETERS = "product var, variant_id, attr_price_override var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attr_price_override"		VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariantPricing_Load_Variant( l.product:id, l.variant_id, l.pricing ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">	<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Use master pricing </MvCOMMENT>
		<MvELSE>													<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.pricing:method EQ 0 }">														<MvCOMMENT> Use master pricing </MvCOMMENT>
		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.pricing:method EQ 1 }">													<MvCOMMENT> Use pricing specified here </MvCOMMENT>
		<MvASSIGN NAME = "l.attr_price_override"	VALUE = 1>

		<MvASSIGN NAME = "l.product:price"			VALUE = "{ l.pricing:price }">
		<MvASSIGN NAME = "l.product:cost"			VALUE = "{ l.pricing:cost }">
		<MvASSIGN NAME = "l.product:weight"			VALUE = "{ l.pricing:weight }">
	<MvELSEIF EXPR = "{ l.pricing:method EQ 2 }">													<MvCOMMENT> Sum of variant part price, cost, weight </MvCOMMENT>
		<MvASSIGN NAME = "l.attr_price_override"	VALUE = 1>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ProductVariant_Sum_Pricing( l.product:id, l.variant_id,
																				l.product:price, l.product:cost, l.product:weight ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Adjust_AtCheckout" PARAMETERS = "basket var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_INV_DB ].InventorySettings_Load_Cached( l.inventorysettings ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.inventorysettings:mode NE 'checkout' }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" COUNT = "{ [ g.Module_Library_DB ].ProductAndBasketItemList_Load_Basket_WithRuntimeInventory( l.basket:basket_id, l.products ) }">
		<MvIF EXPR = "{ NOT Inventory_Adjust_Variant( l.product, l.product:basketitem:variant_id, l.product:basketitem:quantity * -1 ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Runtime_Inventory_Adjust_AtCheckout" PARAMETERS = "basket var, inventory_available var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.inventory_available" VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_INV_DB ].InventorySettings_Load_Cached( l.inventorysettings ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.inventorysettings:mode NE 'checkout' }">
		<MvASSIGN NAME = "l.inventory_available" VALUE = 1>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvLOCKFILE FILE = "{ g.MerchantPath $ crypto_md5( 'runtime_inventory_adjust_atcheckout_' $ g.Store:id ) }">
		<MvASSIGN NAME = "l.result"		VALUE = "{ [ g.Module_Library_DB ].Basket_Load_Session( l.basket:session_id, l.basket ) }">

		<MvIF EXPR = "{ l.result }">
			<MvASSIGN NAME = "l.result"	VALUE = "{ Runtime_Inventory_Adjust_AtCheckout_LowLevel( l.basket, l.inventory_available ) }">
		</MvIF>
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "Runtime_Inventory_Adjust_AtCheckout_LowLevel" PARAMETERS = "basket var, inventory_available var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Inventory_Check_Available_AtCheckout( l.basket, l.inventory_available ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT l.inventory_available }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" COUNT = "{ [ g.Module_Library_DB ].ProductAndBasketItemList_Load_Basket_WithRuntimeInventory( l.basket:basket_id, l.products ) }">
		<MvIF EXPR = "{ NOT Inventory_Adjust_Variant( l.product, l.product:basketitem:variant_id, l.product:basketitem:quantity * -1 ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Runtime_Inventory_Restore_AtCheckout" PARAMETERS = "basket var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_INV_DB ].InventorySettings_Load_Cached( l.inventorysettings ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.inventorysettings:mode NE 'checkout' }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" COUNT = "{ [ g.Module_Library_DB ].ProductAndBasketItemList_Load_Basket_WithRuntimeInventory( l.basket:basket_id, l.products ) }">
		<MvIF EXPR = "{ NOT Inventory_Adjust_Variant( l.product, l.product:basketitem:variant_id, l.product:basketitem:quantity ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Check_Available_AtCheckout" PARAMETERS = "basket var, available var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.available"	VALUE = 1>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventorySettings_Load_Cached( l.inventorysettings ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.inventorysettings:mode NE 'checkout' }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_INV_DB ].InventoryItemLookup_Load_Basket( l.basket:basket_id, l.inventory_items ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.inventory_item" ARRAY = "l.inventory_items">
		<MvIF EXPR = "{ l.inventory_item:quantity LE l.inventory_item:available }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.available"	VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Load( l.inventory_item:product:id, l.ips ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.inventory_item:available EQ 0 }">
			<MvIF EXPR = "{ len( l.ips:out_long ) }">	<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.inventory_item:product, l.ips:out_long ) }">
			<MvELSE>									<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.inventory_item:product, l.inventorysettings:out_long ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ len( l.ips:ltd_long ) }">	<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.inventory_item:product, l.ips:ltd_long ) }">
			<MvELSE>									<MvASSIGN NAME = "l.message"	VALUE = "{ Inventory_Tokenize_Message( l.inventory_item:product, l.inventorysettings:ltd_long ) }">
			</MvIF>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Message_Error( l.message ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Check_Available_AtCheckout_Inventory_Out" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Inventory_Check_Available_AtCheckout_Inventory_Limited" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_DB ].InventoryProductSettings_Load( l.product:id, l.ips ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Message_Error( l.message ) }">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>
