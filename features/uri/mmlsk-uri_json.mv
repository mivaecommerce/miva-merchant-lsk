<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-URI-JSN-
| Next Error Code: 98
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_URI" PARAMETERS = "uri var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.uri:id ) }">,
	"uri":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.uri:uri ) }">",
	"store_id":		<MvEVAL EXPR = "{ int( l.uri:store_id ) }">,
	"screen":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.uri:screen ) }">",
	"page_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.uri:page_code ) }">",
	"cat_id":		<MvEVAL EXPR = "{ int( l.uri:cat_id ) }">,
	"product_id":	<MvEVAL EXPR = "{ int( l.uri:product_id ) }">,
	"feed_id":		<MvEVAL EXPR = "{ int( l.uri:feed_id ) }">,
	"canonical":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.uri:canonical ) }">,
	"status":		<MvEVAL EXPR = "{ int( l.uri:status ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Load" PARAMETERS = "uri var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'URI_ID', l.uri_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Load_ID( l.uri_id, l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-URI-JSN-00032', 'URI not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_URI', l.edit_uri ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Load_URI( l.edit_uri, l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-URI-JSN-00033', 'URI not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'URI', l.edit_uri ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Load_URI( l.edit_uri, l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-URI-JSN-00034', 'URI not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-URI-JSN-00035', 'Unable to load uri: One of URI_ID, Edit_URI, or URI must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URIList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type EQ 'api' AND NOT g.Session:api_privilege_override }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ g.Session_Type EQ 'admin' AND NOT g.Admin_User_Administrator }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.filter"						VALUE = "">
	<MvASSIGN NAME = "l.sort"						VALUE = "">
	<MvASSIGN NAME = "l.offset"						VALUE = 0>
	<MvASSIGN NAME = "l.count"						VALUE = 0>
	<MvASSIGN NAME = "l.search_query"				VALUE = "">
	<MvASSIGN NAME = "l.query_domain"				VALUE = "">
	<MvASSIGN NAME = "l.query_store"				VALUE = "">
	<MvASSIGN NAME = "l.available_filters_store"	VALUE = "">
	<MvASSIGN NAME = "l.available_filters_domain"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters_store,		'u.id',				'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_store,		'u.uri',			'uri' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_store,		'u.screen',			'screen' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters_store,		'u.status',			'status' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters_store,		'u.canonical',		'canonical' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters_store,		'store.name',		'store_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_store,		'u.page_code',		'page_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters_store,		'cat.code',			'category_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters_store,		'cat.name',			'category_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters_store,		'product.code',		'product_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters_store,		'product.sku',		'product_sku' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters_store,		'product.name',		'product_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters_store,		'feed.code',		'feed_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters_store,		'feed.name',		'feed_name' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters_domain,		'u.id',				'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'u.uri',			'uri' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'u.screen',			'screen' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters_domain,		'u.status',			'status' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters_domain,		'u.canonical',		'canonical' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'null',				'store_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'null',				'page_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'null',				'category_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'null',				'category_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'null',				'product_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'null',				'product_sku' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'null',				'product_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'null',				'feed_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters_domain,		'null',				'feed_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query_domain,	'u.id			AS id,
																				 u.uri			AS uri,
																				 u.screen		AS screen,
																				 u.canonical	AS canonical,
																				 u.status		AS status,
																				 u.store_id		AS store_id,
																				 \'\'			AS page_code,
																				 \'\'			AS store_code,
																				 \'\'			AS store_name,
																				 0				AS cat_id,
																				 \'\'			AS category_code,
																				 \'\'			AS category_name,
																				 0				AS product_id,
																				 \'\'			AS product_code,
																				 \'\'			AS product_sku,
																				 \'\'			AS product_name,
																				 0				AS feed_id,
																				 \'\'			AS feed_code,
																				 \'\'			AS feed_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query_domain, 'URIs', 'u' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query_domain, 'u.store_id = 0', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.query_domain, l.filter, l.available_filters_domain ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.query_domain ) }">
	<MvASSIGN NAME = "l.domain_query_count"					VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.query_domain, l.null ) }">

	<MvIF EXPR = "{ NOT ISNULL l.query_count }">
		<MvASSIGN NAME = "l.query_count"					VALUE = "{ l.query_count $ ' UNION ALL ' }">
	</MvIF>

	<MvASSIGN NAME = "l.query_count"						VALUE = "{ l.query_count $ l.domain_query_count }">

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.store" ARRAY = "l.stores" COUNT = "{ [ g.Module_Library_DB ].StoreList_Load_All( l.stores ) }">
		<MvASSIGN NAME = "g.store_ids" INDEX = "{ l.pos }"	VALUE = "{ l.store:id }">
		<MvASSIGN NAME = "l.store:prefix"					VALUE = "{ 's' $ padl( l.store:id, 2, '0' ) $ '_' }">
		<MvASSIGN NAME = "l.query_store" 					VALUE = "">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query_store,	'u.id			AS id,
																					 u.uri			AS uri,
																					 u.screen		AS screen,
																					 u.canonical	AS canonical,
																					 u.status		AS status,
																					 u.store_id		AS store_id,
																					 u.page_code	AS page_code' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.query_store, 'store.code',	'store_code' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.query_store, 'store.name',	'store_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.query_store, 'cat.id',		'cat_id' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.query_store, 'cat.code',		'category_code' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.query_store, 'cat.name',		'category_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.query_store, 'product.id',	'product_id' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.query_store, 'product.code',	'product_code' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.query_store, 'product.sku',	'product_sku' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.query_store, 'product.name',	'product_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.query_store, 'feed.id',		'feed_id' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.query_store, 'feed.code',		'feed_code' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.query_store, 'feed.name',		'feed_name' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query_store, 'URIs', 'u' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query_store, 'u', 'Stores', 'store', 'store.id = u.store_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query_store, 'u', l.store:prefix $ 'Categories', 'cat', 'u.cat_id <> 0 AND cat.id = u.cat_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query_store, 'u', l.store:prefix $ 'Products', 'product', 'u.product_id <> 0 AND product.id = u.product_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query_store, 'u', l.store:prefix $ 'Feeds', 'feed', 'u.feed_id <> 0 AND feed.id = u.feed_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query_store, 'u.store_id = ?', 'g.store_ids[' $ l.pos $ ']' ) }">
		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.query_store, l.filter, l.available_filters_store ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.query_store ) }">
		<MvASSIGN NAME = "l.store_query_count"				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.query_store, l.null ) }">

		<MvIF EXPR = "{ NOT ISNULL l.query_count }">
			<MvASSIGN NAME = "l.query_count"				VALUE = "{ l.query_count $ ' UNION ALL ' }">
		</MvIF>

		<MvASSIGN NAME = "l.query_count"					VALUE = "{ l.query_count $ l.store_query_count }">
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort,
													  'uri,store_name:store_name:null_char,screen,status,canonical,page_code,category_code:category_code:null_char,category_name:category_name:null_char,product_code:product_code:null_char,product_sku:product_sku:null_char,product_name:product_name:null_char,feed_code:feed_code:null_char,feed_name:feed_name:null_char',
													  'id' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Count( l.query_count, l.search_fields, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'URIs', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00001', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":		<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":		<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT URIs.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.uri_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.uri_count ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_URI_DB ].URI_Read( l.uri ) }">

			<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">

			<MvIF EXPR = "{ URIs.d.store_id }">
				, "store":
				{
					"code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( URIs.d.store_code ) }">",
					"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( URIs.d.store_name ) }">"
				}

				<MvASSIGN NAME = "l.store_prefix"	VALUE = "{ 's' $ padl( URIs.d.store_id, 2, '0' ) $ '_' }">

				<MvIF EXPR = "{ URIs.d.cat_id }">
					, "category":
					{
						"code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( URIs.d.category_code ) }">",
						"name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( URIs.d.category_name ) }">"
					}
				</MvIF>

				<MvIF EXPR = "{ URIs.d.product_id }">
					, "product":
					{
						"code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( URIs.d.product_code ) }">",
						"sku":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( URIs.d.product_sku ) }">",
						"name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( URIs.d.product_name ) }">"
					}
				</MvIF>

				<MvIF EXPR = "{ URIs.d.feed_id }">
					, "feed":
					{
						"code": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( URIs.d.feed_code ) }">",
						"name": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( URIs.d.feed_name ) }">"
					}
				</MvIF>
			</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "URIs" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "URIs">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Validate_Destination" PARAMETERS = "uri var, destination, destination_type" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.destination_type EQ 'screen' }">
		<MvIF EXPR = "{ ISNULL l.destination }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination', 'Please specify a destination screen code' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.uri:screen"		VALUE = "{ l.destination }">
		<MvASSIGN NAME = "l.uri:page_code"	VALUE = "">
		<MvASSIGN NAME = "l.uri:cat_id"		VALUE = 0>
		<MvASSIGN NAME = "l.uri:product_id"	VALUE = 0>
		<MvASSIGN NAME = "l.uri:feed_id"	VALUE = 0>
	<MvELSEIF EXPR = "{ l.destination_type EQ 'page' }">
		<MvIF EXPR = "{ l.uri:store_id EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Store_Code', 'Invalid destination store' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.destination, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination', 'Page \'' $ l.destination $ '\' not found' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.uri:screen"		VALUE = "">
		<MvASSIGN NAME = "l.uri:page_code"	VALUE = "{ l.page:code }">
		<MvASSIGN NAME = "l.uri:cat_id"		VALUE = 0>
		<MvASSIGN NAME = "l.uri:product_id"	VALUE = 0>
		<MvASSIGN NAME = "l.uri:feed_id"	VALUE = 0>
	<MvELSEIF EXPR = "{ l.destination_type EQ 'category' }">
		<MvIF EXPR = "{ l.uri:store_id EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Store_Code', 'Invalid destination store' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.destination, l.category ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination', 'Category \'' $ l.destination $ '\' not found' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.uri:screen"		VALUE = "">
		<MvASSIGN NAME = "l.uri:page_code"	VALUE = "">
		<MvASSIGN NAME = "l.uri:cat_id"		VALUE = "{ l.category:id }">
		<MvASSIGN NAME = "l.uri:product_id"	VALUE = 0>
		<MvASSIGN NAME = "l.uri:feed_id"	VALUE = 0>
	<MvELSEIF EXPR = "{ l.destination_type EQ 'product' }">
		<MvIF EXPR = "{ l.uri:store_id EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Store_Code', 'Invalid destination store' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.destination, l.product ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination', 'Product \'' $ l.destination $ '\' not found' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.uri:screen"		VALUE = "">
		<MvASSIGN NAME = "l.uri:page_code"	VALUE = "">
		<MvASSIGN NAME = "l.uri:cat_id"		VALUE = 0>
		<MvASSIGN NAME = "l.uri:product_id"	VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.uri:feed_id"	VALUE = 0>
	<MvELSEIF EXPR = "{ l.destination_type EQ 'feed' }">
		<MvIF EXPR = "{ l.uri:store_id EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Store_Code', 'Invalid destination store' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_FDS_DB ].Feed_Load_Code( l.destination, l.feed ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination', 'Feed \'' $ l.destination $ '\' not found' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.uri:screen"		VALUE = "">
		<MvASSIGN NAME = "l.uri:page_code"	VALUE = "">
		<MvASSIGN NAME = "l.uri:cat_id"		VALUE = 0>
		<MvASSIGN NAME = "l.uri:product_id"	VALUE = 0>
		<MvASSIGN NAME = "l.uri:feed_id" 	VALUE = "{ l.feed:id }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination_Type', 'Invalid URI destination type' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type EQ 'api' AND NOT g.Session:api_privilege_override }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ g.Session_Type EQ 'admin' AND NOT g.Admin_User_Administrator }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.uri"				VALUE = "">
	<MvASSIGN NAME = "l.uri:screen"			VALUE = "">
	<MvASSIGN NAME = "l.uri:page_code"		VALUE = "">
	<MvASSIGN NAME = "l.uri:cat_id"			VALUE = 0>
	<MvASSIGN NAME = "l.uri:product_id"		VALUE = 0>
	<MvASSIGN NAME = "l.uri:feed_id"		VALUE = 0>
	<MvASSIGN NAME = "l.uri:status"			VALUE = 0>
	<MvASSIGN NAME = "l.uri:canonical"		VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'URI',					l.uri:uri )				OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',				l.uri:status )			OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',			l.uri:canonical )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'Destination',			l.destination )			OR
					NOT [ g.Module_JSON ].JSON_Input_List(		'R', 'Destination_Type',	l.destination_type, 'page,product,category,feed,screen', 'page,product,category,feed,screen' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Is_Store_Open() }">	<MvASSIGN NAME = "l.uri:store_id"	VALUE = "{ g.Store:id }">
	<MvELSE>													<MvASSIGN NAME = "l.uri:store_id"	VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_URI_Validate_Destination( l.uri, l.destination, l.destination_type ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.uri:canonical }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Insert( l.uri ) }">
		<MvIF EXPR = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type EQ 'api' AND NOT g.Session:api_privilege_override }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ g.Session_Type EQ 'admin' AND NOT g.Admin_User_Administrator }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_URI_Load( l.uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_uri"	VALUE = "{ l.uri }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'URI',			l.uri:uri )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',		l.uri:status )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',	l.uri:canonical ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Is_Store_Open() }">	<MvASSIGN NAME = "l.uri:store_id"	VALUE = "{ g.Store:id }">
	<MvELSE>													<MvASSIGN NAME = "l.uri:store_id"	VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Destination' )	OR
					[ g.Module_JSON ].JSON_Input_Exists( 'Destination_Type' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(	'R', 'Destination',			l.destination ) OR
						NOT [ g.Module_JSON ].JSON_Input_List(	'R', 'Destination_Type',	l.destination_type, 'page,product,category,feed,screen', 'page,product,category,feed,screen' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT JSON_URI_Validate_Destination( l.uri, l.destination, l.destination_type ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.uri:canonical AND
					(
						( NOT l.original_uri:canonical )					OR
						( l.uri:screen		NE l.original_uri:screen )		OR
						( l.uri:page_code	NE l.original_uri:page_code )	OR
						( l.uri:cat_id		NE l.original_uri:cat_id )		OR
						( l.uri:product_id	NE l.original_uri:product_id )	OR
						( l.uri:feed_id		NE l.original_uri:feed_id )
					) }">
		<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Update( l.uri ) }">
		<MvIF EXPR = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.existing_canonical_uri:id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type EQ 'api' AND NOT g.Session:api_privilege_override }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ g.Session_Type EQ 'admin' AND NOT g.Admin_User_Administrator }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_URI_Load( l.uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.store_count" VALUE = "{ [ g.Module_Library_DB ].StoreList_Load_All( l.stores ) }">

	<MvIF EXPR = "{ l.uri:store_id AND l.uri:store_id NE g.Store:id }">
		<MvIF EXPR = "{ miva_array_search( l.stores, 1, l.store, 'l.store:id EQ l.uri:store_id' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Open( l.store:code, g.Store ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Delete( l.uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-URI-JSN-00003', 'URI \'' $ l.uri:uri $ '\' deleted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URIList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type EQ 'api' AND NOT g.Session:api_privilege_override }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ g.Session_Type EQ 'admin' AND NOT g.Admin_User_Administrator }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'URI_IDs', l.uri_ids, l.uri_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.processed"								VALUE = 0>
	<MvASSIGN NAME = "l.error_count"							VALUE = 0>
	<MvASSIGN NAME = "l.errors"									VALUE = "">
	<MvASSIGN NAME = "l.start_time"				 				VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.store_count"							VALUE = "{ [ g.Module_Library_DB ].StoreList_Load_All( l.stores ) }">

	<MvFOREACH ITERATOR = "l.uri_id" ARRAY = "l.uri_ids" COUNT = "{ l.uri_id_count }">
		<MvASSIGN NAME = "l.processed"			 				VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Load_ID( l.uri_id, l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ l.uri:store_id AND l.uri:store_id NE g.Store:id }">
				<MvIF EXPR = "{ miva_array_search( l.stores, 1, l.store, 'l.store:id EQ l.uri:store_id' ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Open( l.store:code, g.Store ) }">
						<MvASSIGN NAME = "l.error_count"		VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, g.Error_Code, g.Error_Message, l.errors ) }">
					</MvIF>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Delete( l.uri ) }">
				<MvASSIGN NAME = "l.error_count"				VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-URI-JSN-00004', 'URI \'' $ l.uri:uri $ '\' deleted' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	<MvELSE>							<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Redirect" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT g.Admin_User_Administrator }"> <MvFUNCTIONRETURN> </MvIF>

	<MvFUNCTIONRETURN VALUE = "{ URI_Redirect() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Generate_Screens" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">		<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT g.Admin_User_Administrator }">				<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Regenerate"			VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Regenerate ) }">
	<MvASSIGN NAME = "g.Offset"				VALUE = "{ int( g.Offset ) }">

	<MvIF EXPR = "{ g.Store:ui_mod:api_ver GE 9.04 }">
		<MvIF EXPR = "{ NOT [ g.Module_Root $ g.Store:ui_mod:module ].StoreUIModule_Create_URIs( g.Store:ui_mod, g.Regenerate ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"complete":	true
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Generate_Pages" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">		<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT g.Admin_User_Administrator }">				<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Regenerate"			VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Regenerate ) }">
	<MvASSIGN NAME = "g.Offset"				VALUE = "{ int( g.Offset ) }">

	<MvCOMMENT>
	|
	| For ease of testing, we process 1,000 pages in chunks of 200, with an early
	| recycle if there are less than 3 seconds of globaltimeout remaining or we have
	| processed for 30 seconds.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.recycle_time_t"		VALUE = "{ s.dyn_time_t + 30 }">
	<MvASSIGN NAME = "l.branch_id"			VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Primary_Branch_ID() }">
	<MvASSIGN NAME = "l.fields"				VALUE = "{ 'g.Store:id,' $ [ g.Module_Library_DB ].SQL_Query_Field( l.branch_id ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.branch_id ) }">

	<MvFOR COUNT = "{ 5 }">
		<MvCOMMENT>
		|
		| Load pages 200 at a time to avoid overloading the database or consuming too much memory
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Pages',
																				 'SELECT
																					pv.id			AS version_id,
																					pv.xref_id		AS version_xref_id,
																					pv.user_id		AS version_user_id,
																					pv.admin		AS version_admin,
																					pv.layout		AS version_layout,
																					pv.secure		AS version_secure,
																					pv.public		AS version_public,
																					pv.code			AS version_code,
																					pv.name			AS version_name,
																					pv.title		AS version_title,
																					pv.ui_id		AS version_ui_id,
																					pv.cache		AS version_cache,
																					pv.cacheset		AS version_cacheset,
																					mtv.settings	AS template_settings
																				  FROM
																					Stores store,
																					' $ g.Store_Table_Prefix $ 'PageBranchVersions pbv,
																					' $ g.Store_Table_Prefix $ 'Pages p,
																					' $ g.Store_Table_Prefix $ 'PageVersions pv,
																					' $ g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions bv,
																					' $ g.Store_Table_Prefix $ 'ManagedTemplateVersions mtv
																				  WHERE
																					store.id		= ?					AND
																					pbv.branch_id	= ?					AND
																					pbv.head		= 1					AND
																					p.id			= pbv.page_id		AND
																					pv.id			= pbv.version_id	AND
																					pv.admin		= 0					AND
																					pv.layout		= 0					AND
																					pv.fragment		= 0					AND
																					bv.branch_id	= ?					AND
																					bv.templ_id		= p.templ_id		AND
																					bv.head			= 1					AND
																					mtv.id			= bv.version_id
																				  ORDER BY
																					p.id',
																				 l.fields, g.Offset, 200 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00005', g.MvOPENVIEW_Error ) }">
		</MvIF>

		<MvASSIGN NAME = "l.page_count"		VALUE = 0>

		<MvWHILE EXPR = "{ ( l.page_count LT 200 ) AND ( NOT Pages.d.EOF ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Read( l.pages[ ++l.page_count ] ) }">
			<MvSKIP NAME = "Merchant" VIEW = "Pages" ROWS = 1>
		</MvWHILE>

		<MvCLOSEVIEW NAME = "Merchant" VIEW = "Pages">

		<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ l.page_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Generate_Page_Update_WithPageRegenerate( g.Regenerate, l.page ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00006', 'Error ' $ g.Error_Code $ ' processing page \'' $ l.page:code $ '\': ' $ g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "g.Offset"		VALUE = "{ g.Offset + 1 }">

			<MvIF EXPR = "{ ( s.dyn_time_t GE l.recycle_time_t ) OR ( ( s.dyn_time_remaining NE -1 ) AND ( s.dyn_time_remaining LE 3 ) ) }">
				<MvFORSTOP>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.page_count LT 200 }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
			{
				"complete":	true
			}
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
		</MvIF>
	</MvFOR>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"complete":	false,
		"offset":	<MvEVAL EXPR = "{ int( g.Offset ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Generate_Categories" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">		<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT g.Admin_User_Administrator }">				<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Regenerate"			VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Regenerate ) }">
	<MvASSIGN NAME = "g.Offset"				VALUE = "{ int( g.Offset ) }">

	<MvCOMMENT>
	|
	| For ease of testing, we process 1,000 categories in chunks of 200, with an early
	| recycle if there are less than 3 seconds of globaltimeout remaining or we have
	| processed for 30 seconds.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.recycle_time_t"		VALUE = "{ s.dyn_time_t + 30 }">
	
	<MvFOR COUNT = "{ 5 }">
		<MvCOMMENT>
		|
		| Load categories 200 at a time to avoid overloading the database or consuming too much memory
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Categories',
																				 'SELECT
																				 	*
																				  FROM ' $
																				  	g.Store_Table_Prefix $ 'Categories
																				  WHERE
																				  	active = 1
																				  ORDER BY id',
																				 '', g.Offset, 200 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00007', g.MvOPENVIEW_Error ) }">
		</MvIF>

		<MvASSIGN NAME = "l.category_count"	VALUE = 0>

		<MvWHILE EXPR = "{ ( l.category_count LT 200 ) AND ( NOT Categories.d.EOF ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].Category_Read( l.categories[ ++l.category_count ] ) }">
			<MvSKIP NAME = "Merchant" VIEW = "Categories" ROWS = 1>
		</MvWHILE>

		<MvCLOSEVIEW NAME = "Merchant" VIEW = "Categories">

		<MvFOREACH ITERATOR = "l.category" ARRAY = "l.categories" COUNT = "{ l.category_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Generate_Category_Update_WithCategoryRegenerate( g.Regenerate, l.category ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00008', 'Error ' $ g.Error_Code $ ' processing category \'' $ l.category:code $ '\': ' $ g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "g.Offset"		VALUE = "{ g.Offset + 1 }">

			<MvIF EXPR = "{ ( s.dyn_time_t GE l.recycle_time_t ) OR ( ( s.dyn_time_remaining NE -1 ) AND ( s.dyn_time_remaining LE 3 ) ) }">
				<MvFORSTOP>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.category_count LT 200 }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
			{
				"complete":	true
			}
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
		</MvIF>
	</MvFOR>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"complete":	false,
		"offset":	<MvEVAL EXPR = "{ int( g.Offset ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_URI_Generate_Products" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">		<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT g.Admin_User_Administrator }">				<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Regenerate"			VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Regenerate ) }">
	<MvASSIGN NAME = "g.Offset"				VALUE = "{ int( g.Offset ) }">

	<MvCOMMENT>
	|
	| For ease of testing, we process 1,000 products in chunks of 200, with an early
	| recycle if there are less than 3 seconds of globaltimeout remaining or we have
	| processed for 30 seconds.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.recycle_time_t"		VALUE = "{ s.dyn_time_t + 30 }">
	
	<MvFOR COUNT = "{ 5 }">
		<MvCOMMENT>
		|
		| Load products 200 at a time to avoid overloading the database or consuming too much memory
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Products',
																				 'SELECT
																				 	*
																				  FROM ' $
																				  	g.Store_Table_Prefix $ 'Products
																				  WHERE
																				  	active = 1
																				  ORDER BY id',
																				 '', g.Offset, 200 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00009', g.MvOPENVIEW_Error ) }">
		</MvIF>

		<MvASSIGN NAME = "l.product_count"	VALUE = 0>

		<MvWHILE EXPR = "{ ( l.product_count LT 200 ) AND ( NOT Products.d.EOF ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].Product_Read( l.products[ ++l.product_count ] ) }">
			<MvSKIP NAME = "Merchant" VIEW = "Products" ROWS = 1>
		</MvWHILE>

		<MvCLOSEVIEW NAME = "Merchant" VIEW = "Products">

		<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" COUNT = "{ l.product_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Generate_Product_Update_WithProductRegenerate( g.Regenerate, l.product ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00010', 'Error ' $ g.Error_Code $ ' processing product \'' $ l.product:code $ '\': ' $ g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "g.Offset"		VALUE = "{ g.Offset + 1 }">

			<MvIF EXPR = "{ ( s.dyn_time_t GE l.recycle_time_t ) OR ( ( s.dyn_time_remaining NE -1 ) AND ( s.dyn_time_remaining LE 3 ) ) }">
				<MvFORSTOP>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.product_count LT 200 }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
			{
				"complete":	true
			}
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
		</MvIF>
	</MvFOR>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"complete":	false,
		"offset":	<MvEVAL EXPR = "{ int( g.Offset ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ProductURIList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PROD', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters,	'id',			'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'uri',			'uri' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'screen',		'screen' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters,	'status',		'status' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters,	'canonical',	'canonical' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Product_Load( l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, 'URIs', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'store_id = ? AND screen = \'\' AND page_code = \'\' AND cat_id = 0 AND product_id = ? AND feed_id = 0',  'g.Store:id, ' $ [ g.Module_Library_DB ].SQL_Query_Field( l.product:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id,canonical,status,uri', 'id' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'URIs', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00011', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT URIs.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.uri_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.uri_count ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_URI_DB ].URI_Read( l.uri ) }">

			<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			<MvSKIP NAME = "Merchant" VIEW = "URIs" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "URIs">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ProductURI_Regenerate" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PROD', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Product_ID" VALUE = "{ int( g.Product_ID ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_ID( g.product_id, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00012', 'Failed to load product' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Generate_Product_Update( l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ProductURI_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PROD', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Product_Load( l.product ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri"			VALUE = "">
	<MvASSIGN NAME = "l.uri:uri" 		VALUE = "">
	<MvASSIGN NAME = "l.uri:store_id" 	VALUE = "{ g.Store:id }">
	<MvASSIGN NAME = "l.uri:canonical" 	VALUE = 0>
	<MvASSIGN NAME = "l.uri:status" 	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'URI',			l.uri:uri )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',		l.uri:status )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',	l.uri:canonical  ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri:product_id" VALUE = "{ l.product:id }">

	<MvIF EXPR = "{ l.uri:canonical }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Insert( l.uri ) }">
		<MvIF EXPR = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ProductURI_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PROD', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_URI_Load( l.uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.uri:store_id NE g.Store:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00043', 'URI not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_uri"	VALUE = "{ l.uri }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'URI',			l.uri:uri )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',		l.uri:status )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',	l.uri:canonical  ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.uri:canonical AND ( NOT l.original_uri:canonical ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Update( l.uri ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ProductURIList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PROD', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'URI_IDs', l.uri_ids, l.uri_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.uri_id" ARRAY = "l.uri_ids" COUNT = "{ l.uri_id_count }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Load_ID( l.uri_id, l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.uri:store_id NE g.Store:id }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, 'MER-URI-JSN-00037', 'URI not found', l.errors ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Delete( l.uri ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-URI-JSN-00015', 'Deleted URI \'' $ l.uri:uri $ '\'' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ProductURI_Redirect" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PROD', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ URI_Redirect() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CategoryURIList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CTGY', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters,	'id',			'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'uri',			'uri' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'screen',		'screen' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters,	'status',		'status' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters,	'canonical',	'canonical' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Category_Load( l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, 'URIs', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'store_id = ? AND screen = \'\' AND page_code = \'\' AND cat_id = ? AND product_id = 0 AND feed_id = 0', 'g.Store:id, ' $ [ g.Module_Library_DB ].SQL_Query_Field( l.category:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id,canonical,status,uri', 'id' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'URIs', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00016', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT URIs.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.uri_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.uri_count ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_URI_DB ].URI_Read( l.uri ) }">

			<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			<MvSKIP NAME = "Merchant" VIEW = "URIs" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "URIs">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CategoryURI_Regenerate" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CTGY', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Category_ID" VALUE = "{ int( g.Category_ID ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_ID( g.category_id, l.category ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00017', 'Failed to load category' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Generate_Category_Update( l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CategoryURI_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CTGY', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Category_Load( l.category ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri"			VALUE = "">
	<MvASSIGN NAME = "l.uri:uri" 		VALUE = "">
	<MvASSIGN NAME = "l.uri:store_id" 	VALUE = "{ g.Store:id }">
	<MvASSIGN NAME = "l.uri:canonical" 	VALUE = 0>
	<MvASSIGN NAME = "l.uri:status" 	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'URI',			l.uri:uri )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',		l.uri:status )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',	l.uri:canonical  ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri:cat_id" VALUE = "{ l.category:id }">

	<MvIF EXPR = "{ l.uri:canonical }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Insert( l.uri ) }">
		<MvIF EXPR = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CategoryURI_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CTGY', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_URI_Load( l.uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.uri:store_id NE g.Store:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00044', 'URI not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_uri"	VALUE = "{ l.uri }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'URI',			l.uri:uri )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',		l.uri:status )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',	l.uri:canonical  ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.uri:canonical AND ( NOT l.original_uri:canonical ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Update( l.uri ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CategoryURIList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CTGY', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'URI_IDs', l.uri_ids, l.uri_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.uri_id" ARRAY = "l.uri_ids" COUNT = "{ l.uri_id_count }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Load_ID( l.uri_id, l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.uri:store_id NE g.Store:id }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, 'MER-URI-JSN-00038', 'URI not found', l.errors ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Delete( l.uri ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-URI-JSN-00020', 'Deleted URI \'' $ l.uri:uri $ '\'' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CategoryURI_Redirect" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CTGY', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ URI_Redirect() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageURIList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters,	'id',			'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'uri',			'uri' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'screen',		'screen' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters,	'status',		'status' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters,	'canonical',	'canonical' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, 'URIs', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'store_id = ? AND screen = \'\' AND ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_Upper( 'page_code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_Upper( '?' ) $ ' AND cat_id = 0 AND product_id = 0 AND feed_id = 0', 'g.Store:id, ' $ [ g.Module_Library_DB ].SQL_Query_Field( l.page:code ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id,canonical,status,uri', 'id' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'URIs', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00021', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT URIs.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.uri_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.uri_count ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_URI_DB ].URI_Read( l.uri ) }">

			<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			<MvSKIP NAME = "Merchant" VIEW = "URIs" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "URIs">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageURI_Regenerate" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| URI_Generate_Page_Update_WithPageRegenerate is used in this location to bypass the primary branch
	| requirement as we intentionally allow regeneration of page URIs here regardless of the
	| current working branch.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URISettings_Load_Cached( l.urisettings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Generate_Page_Update_WithPageRegenerate( l.urisettings:pg_regen, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageURI_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri"			VALUE = "">
	<MvASSIGN NAME = "l.uri:uri" 		VALUE = "">
	<MvASSIGN NAME = "l.uri:store_id" 	VALUE = "{ g.Store:id }">
	<MvASSIGN NAME = "l.uri:canonical" 	VALUE = 0>
	<MvASSIGN NAME = "l.uri:status" 	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'URI',			l.uri:uri )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',		l.uri:status )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',	l.uri:canonical  ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri:page_code" VALUE = "{ l.page:code }">

	<MvIF EXPR = "{ l.uri:canonical }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Insert( l.uri ) }">
		<MvIF EXPR = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageURI_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_URI_Load( l.uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.uri:store_id NE g.Store:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00045', 'URI not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_uri"	VALUE = "{ l.uri }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'URI',			l.uri:uri )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',		l.uri:status )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',	l.uri:canonical  ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.uri:canonical AND ( NOT l.original_uri:canonical ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Update( l.uri ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageURIList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'URI_IDs', l.uri_ids, l.uri_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.uri_id" ARRAY = "l.uri_ids" COUNT = "{ l.uri_id_count }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Load_ID( l.uri_id, l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.uri:store_id NE g.Store:id }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, 'MER-URI-JSN-00039', 'URI not found', l.errors ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Delete( l.uri ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-URI-JSN-00025', 'Deleted URI \'' $ l.uri:uri $ '\'' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageURI_Redirect" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ URI_Redirect() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FeedURIList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'FEED', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters,	'id',			'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'uri',			'uri' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'screen',		'screen' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters,	'status',		'status' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters,	'canonical',	'canonical' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_JSON ].JSON_Feed_Load( l.feed ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, 'URIs', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'store_id = ? AND screen = \'\' AND page_code = \'\' AND cat_id = 0 AND product_id = 0 AND feed_id = ?', 'g.Store:id, ' $ [ g.Module_Library_DB ].SQL_Query_Field( l.feed:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id,canonical,status,uri', 'id' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'URIs', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00026', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT URIs.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.uri_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.uri_count ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_URI_DB ].URI_Read( l.uri ) }">

			<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			<MvSKIP NAME = "Merchant" VIEW = "URIs" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "URIs">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FeedURI_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> 																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'FEED', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_FDS_JSON ].JSON_Feed_Load( l.feed ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri"			VALUE = "">
	<MvASSIGN NAME = "l.uri:uri" 		VALUE = "">
	<MvASSIGN NAME = "l.uri:store_id" 	VALUE = "{ g.Store:id }">
	<MvASSIGN NAME = "l.uri:canonical" 	VALUE = 0>
	<MvASSIGN NAME = "l.uri:status" 	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'URI',			l.uri:uri )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',		l.uri:status )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',	l.uri:canonical  ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.uri:feed_id" VALUE = "{ l.feed:id }">

	<MvIF EXPR = "{ l.uri:canonical }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Insert( l.uri ) }">
		<MvIF EXPR = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-URI-JSN-00030', 'URI \'' $ l.uri:uri $ '\' added' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_URI( l.uri ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FeedURI_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'FEED', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_URI_Load( l.uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.uri:store_id NE g.Store:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-URI-JSN-00046', 'URI not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_uri"	VALUE = "{ l.uri }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'URI',			l.uri:uri )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Status',		l.uri:status )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Canonical',	l.uri:canonical  ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.uri:canonical AND ( NOT l.original_uri:canonical ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_URI_DB ].URI_Load_Item_Canonical( l.uri, l.existing_canonical_uri ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Update( l.uri ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.existing_canonical_uri }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_UT ].URI_Manage_Existing_Canonical( l.uri, l.existing_canonical_uri ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-URI-JSN-00031', 'URI \'' $ l.uri:uri $ '\' updated' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FeedURIList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'FEED', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'URI_IDs', l.uri_ids, l.uri_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.uri_id" ARRAY = "l.uri_ids" COUNT = "{ l.uri_id_count }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Load_ID( l.uri_id, l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, g.Error_Code, g.Error_Message, l.errors ) }">
		<MvELSEIF EXPR = "{ l.uri:store_id NE g.Store:id }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, 'MER-URI-JSN-00040', 'URI not found', l.errors ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Delete( l.uri ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.uri_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-URI-JSN-00029', 'Deleted URI \'' $ l.uri:uri $ '\'' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "URI_Redirect" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.destination" 			VALUE = "">
	<MvASSIGN NAME = "l.destination_type" 		VALUE = "">
	<MvASSIGN NAME = "l.destination_store_code" VALUE = "">
	<MvASSIGN NAME = "l.status" 				VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'URI_IDs', 				l.uri_ids, l.uri_id_count )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(		'o', 'Status', 					l.status )					OR
					NOT [ g.Module_JSON ].JSON_Input_Text(			'o', 'Destination', 			l.destination ) 			OR
					NOT [ g.Module_JSON ].JSON_Input_Code(			'O', 'Destination_Store_Code', 	l.destination_store_code ) 	OR
					NOT [ g.Module_JSON ].JSON_Input_List(			'R', 'Destination_Type',		l.destination_type, 'page,product,category,feed,screen', 'page,product,category,feed,screen' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.destination_store_code }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Open( l.destination_store_code, g.Store ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.uri_id" ARRAY = "l.uri_ids" COUNT = "{ l.uri_id_count }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Load_ID( l.uri_id, l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.destination_store_code }">
			<MvASSIGN NAME = "l.uri:store_id"	VALUE = "{ g.Store:id }">
		</MvIF>

		<MvASSIGN NAME = "l.uri:cat_id" 		VALUE = 0>
		<MvASSIGN NAME = "l.uri:page_code" 		VALUE = "">
		<MvASSIGN NAME = "l.uri:product_id" 	VALUE = 0>
		<MvASSIGN NAME = "l.uri:screen" 		VALUE = "">
		<MvASSIGN NAME = "l.uri:canonical" 		VALUE = 0>
		<MvASSIGN NAME = "l.uri:status" 		VALUE = "{ l.status }">

		<MvIF EXPR = "{ l.destination_type EQ 'screen' }">
			<MvIF EXPR = "{ ISNULL l.destination }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination', 'Please specify a destination screen code' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.uri:screen"		VALUE = "{ l.destination }">
		<MvELSEIF EXPR = "{ l.destination_type EQ 'page' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.destination, l.page ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination', 'Page \'' $ l.destination $ '\' not found' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.uri:page_code"	VALUE = "{ l.page:code }">
		<MvELSEIF EXPR = "{ l.destination_type EQ 'category' }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.destination, l.category ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination', 'Category \'' $ l.destination $ '\' not found' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.uri:cat_id"		VALUE = "{ l.category:id }">
		<MvELSEIF EXPR = "{ l.destination_type EQ 'product' }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.destination, l.product ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination', 'Product \'' $ l.destination $ '\' not found' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.uri:product_id"	VALUE = "{ l.product:id }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination_Type', 'Invalid URI destination type' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_URI_DB ].URI_Update( l.uri ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>
