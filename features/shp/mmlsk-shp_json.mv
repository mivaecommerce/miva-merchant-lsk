<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-SHP-JSN-
| Next Error Code: 39   
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_ProductShippingRules" PARAMETERS = "productshippingrules var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"product_id":	<MvEVAL EXPR = "{ int( l.productshippingrules:product_id ) }">,
	"ownpackage":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.productshippingrules:ownpackage ) }">,
	"width":		<MvEVAL EXPR = "{ l.productshippingrules:width ROUND 2 }">,
	"length":		<MvEVAL EXPR = "{ l.productshippingrules:length ROUND 2 }">,
	"height":		<MvEVAL EXPR = "{ l.productshippingrules:height ROUND 2 }">,
	"limitmeths":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.productshippingrules:limitmeths ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ProductShippingMethod" PARAMETERS = "productshippingmethod var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.productshippingmethod:mod_code ) }">",
	"meth_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.productshippingmethod:meth_code ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ShippingMethodRulesList_Sort_Callback" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.data EQ 'method_name' }">			<MvASSIGN NAME = "l.left_data"	VALUE = "{ 'x' $ toupper( l.left:method_name ) }">	<MvASSIGN NAME = "l.right_data" VALUE = "{ 'x' $ toupper( l.right:method_name ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-method_name' }">	<MvASSIGN NAME = "l.left_data"	VALUE = "{ 'x' $ toupper( l.right:method_name ) }">	<MvASSIGN NAME = "l.right_data" VALUE = "{ 'x' $ toupper( l.left:method_name ) }">
	<MvELSEIF EXPR = "{ l.data EQ 'descrip' }">			<MvASSIGN NAME = "l.left_data"	VALUE = "{ 'x' $ toupper( l.left:descrip ) }">		<MvASSIGN NAME = "l.right_data"	VALUE = "{ 'x' $ toupper( l.right:descrip ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-descrip' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ 'x' $ toupper( l.right:descrip ) }">		<MvASSIGN NAME = "l.right_data"	VALUE = "{ 'x' $ toupper( l.left:descrip ) }">
	<MvELSEIF EXPR = "{ l.data EQ 'subtotal' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.left:min_subtot }">					<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.right:min_subtot }">
	<MvELSEIF EXPR = "{ l.data EQ '-subtotal' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.right:min_subtot }">					<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.left:min_subtot }">
	<MvELSEIF EXPR = "{ l.data EQ 'quantity' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.left:min_quan }">						<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.right:min_quan }">
	<MvELSEIF EXPR = "{ l.data EQ '-quantity' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.right:min_quan }">						<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.left:min_quan }">
	<MvELSEIF EXPR = "{ l.data EQ 'weight' }">			<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.left:min_weight }">					<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.right:min_weight }">
	<MvELSEIF EXPR = "{ l.data EQ '-weight' }">			<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.right:min_weight }">					<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.left:min_weight }">
	<MvELSEIF EXPR = "{ l.data EQ 'agrpcount' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.left:agrpcount }">						<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.right:agrpcount }">
	<MvELSEIF EXPR = "{ l.data EQ '-agrpcount' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.right:agrpcount }">					<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.left:agrpcount }">
	<MvELSEIF EXPR = "{ l.data EQ 'priority' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.left:priority }">						<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.right:priority }">
	<MvELSEIF EXPR = "{ l.data EQ '-priority' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.right:priority }">						<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.left:priority }">
	<MvELSEIF EXPR = "{ l.data EQ 'exclude_po' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.left:exclude_po }">					<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.right:exclude_po }">
	<MvELSEIF EXPR = "{ l.data EQ '-exclude_po' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.right:exclude_po }">					<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.left:exclude_po }">
	<MvELSEIF EXPR = "{ l.data EQ 'exclude_df' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.left:exclude_df }">					<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.right:exclude_df }">
	<MvELSEIF EXPR = "{ l.data EQ '-exclude_df' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.right:exclude_df }">					<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.left:exclude_df }">
	<MvELSEIF EXPR = "{ l.data EQ 'adjustment' }">
		<MvIF EXPR = "{ 'x' $ toupper( l.left:adjusttype ) LT 'x' $ toupper( l.right:adjusttype ) }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ 'x' $ toupper( l.left:adjusttype ) GT 'x' $ toupper( l.right:adjusttype ) }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.left:adjustamnt }">
		<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.right:adjustamnt }">
	<MvELSEIF EXPR = "{ l.data EQ '-adjustment' }">
		<MvIF EXPR = "{ 'x' $ toupper( l.left:adjusttype ) LT 'x' $ toupper( l.right:adjusttype ) }">		<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ 'x' $ toupper( l.left:adjusttype ) GT 'x' $ toupper( l.right:adjusttype ) }">	<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvASSIGN NAME = "l.left_data"	VALUE = "{ l.right:adjustamnt }">
		<MvASSIGN NAME = "l.right_data"	VALUE = "{ l.left:adjustamnt }">
	</MvIF>

	<MvIF EXPR = "{ l.left_data LT l.right_data }">															<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left_data GT l.right_data }">														<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Break ties using module code then method code.  priority tiebreaking is reversed, to match the
	| runtime logic.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( l.data EQ 'priority' ) OR ( ( l.data NE '-priority' ) AND ( substring_var( l.data, 1, 1 ) EQ '-' ) ) }">
		<MvIF EXPR = "{ 'x' $ toupper( l.left:mod_code ) LT 'x' $ toupper( l.right:mod_code ) }">			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ 'x' $ toupper( l.left:mod_code ) GT 'x' $ toupper( l.right:mod_code ) }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ 'x' $ toupper( l.left:meth_code ) LT 'x' $ toupper( l.right:meth_code ) }">		<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ 'x' $ toupper( l.left:meth_code ) GT 'x' $ toupper( l.right:meth_code ) }">		<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ 'x' $ toupper( l.left:mod_code ) LT 'x' $ toupper( l.right:mod_code ) }">			<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ 'x' $ toupper( l.left:mod_code ) GT 'x' $ toupper( l.right:mod_code ) }">		<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ 'x' $ toupper( l.left:meth_code ) LT 'x' $ toupper( l.right:meth_code ) }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ 'x' $ toupper( l.left:meth_code ) GT 'x' $ toupper( l.right:meth_code ) }">		<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ShippingMethodRulesList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.available_filters"		VALUE = "">
	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = 0>
	<MvASSIGN NAME = "l.count"					VALUE = 0>
	<MvASSIGN NAME = "l.shipping_modules"		VALUE = "">
	<MvASSIGN NAME = "l.shipping_module_count"	VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR(		l.available_filters, 'method_name',	'l.rules:method_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR(		l.available_filters, 'descrip',		'l.rules:descrip' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_NUMBER(		l.available_filters, 'min_subtot',	'l.rules:min_subtot' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_NUMBER(		l.available_filters, 'max_subtot',	'l.rules:max_subtot' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_INTEGER(	l.available_filters, 'min_quan',	'l.rules:min_quan' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_INTEGER(	l.available_filters, 'max_quan',	'l.rules:max_quan' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_NUMBER(		l.available_filters, 'min_weight',	'l.rules:min_weight' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_NUMBER(		l.available_filters, 'max_weight',	'l.rules:max_weight' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_INTEGER(	l.available_filters, 'agrpcount',	'l.rules:agrpcount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_INTEGER(	l.available_filters, 'priority',	'l.rules:priority' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR(		l.available_filters, 'adjusttype',	'l.rules:adjusttype' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_NUMBER(		l.available_filters, 'adjustamnt',	'l.rules:adjustamnt' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_BOOL(		l.available_filters, 'exclude_po',	'l.rules:exclude_po' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_BOOL(		l.available_filters, 'exclude_df',	'l.rules:exclude_df' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(		'o', 'Filter',				l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(			'o', 'Sort',				l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(		'o', 'Offset',				l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(		'o', 'Count',				l.count )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text_Array(	'o', 'ShippingModule_List',	l.shipping_modules, l.shipping_module_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.rules_count"	VALUE = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodRulesList_Load_All( l.ruleslist ) }">

	<MvIF EXPR = "{ l.rules_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.method_count"	VALUE = "{ [ g.Module_Feature_SHP_UT ].ShippingMethodList_Load_Enabled( l.methods ) }">

	<MvIF EXPR = "{ l.method_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Merge the two lists together, applying "default" settings to methods that do not have configured rules, and excluding
	| rules that apply to methods which are not present from the output.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.output_rules_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
		<MvFOREACH ITERATOR = "l.rules" ARRAY = "l.ruleslist" COUNT = "{ l.rules_count }">
			<MvIF EXPR = "{ ( l.rules:mod_code EQ l.method:module:code ) AND ( l.rules:meth_code EQ l.method:code ) }">
				<MvASSIGN NAME = "l.output_rules"									VALUE = "{ l.rules }">
				<MvFOREACHSTOP>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ ( l.rules:mod_code NE l.method:module:code ) OR ( l.rules:meth_code NE l.method:code ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Default( l.method:module:code, l.method:code, l.output_rules ) }">
		</MvIF>

		<MvASSIGN NAME = "l.output_rules:module"									VALUE = "{ l.method:module }">
		<MvASSIGN NAME = "l.output_rules:method_name"								VALUE = "{ l.method:name }">

		<MvCOMMENT>
		|
		| Round decimal columns to their final length so that LIKE/NOTLIKE operations in JSON_Filter_MivaScript operate on the
		| same data the user sees.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.output_rules:adjustamnt"								VALUE = "{ l.output_rules:adjustamnt ROUND 2 }">
		<MvASSIGN NAME = "l.output_rules:min_subtot"								VALUE = "{ l.output_rules:min_subtot ROUND 2 }">
		<MvASSIGN NAME = "l.output_rules:max_subtot"								VALUE = "{ l.output_rules:max_subtot ROUND 2 }">
		<MvASSIGN NAME = "l.output_rules:min_weight"								VALUE = "{ l.output_rules:min_weight ROUND 2 }">
		<MvASSIGN NAME = "l.output_rules:max_weight"								VALUE = "{ l.output_rules:max_weight ROUND 2 }">

		<MvASSIGN NAME = "l.output_rules_count"										VALUE = "{ l.output_rules_count + 1 }">
		<MvASSIGN NAME = "l.output_ruleslist" INDEX = "{ l.output_rules_count }"	VALUE = "{ l.output_rules }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_sort( l.output_ruleslist, 'ShippingMethodRulesList_Sort_Callback', l.sort ) }">
	<MvASSIGN NAME = "l.total_count" 	VALUE = 0>

	<MvASSIGN NAME = "l.search_expression"				VALUE = "1 EQ 1">

	<MvIF EXPR = "{ l.shipping_module_count }">
		<MvASSIGN NAME = "l.search_expression"			VALUE = "{ l.search_expression $ ' AND ( ' }">
		<MvASSIGN NAME = "l.search_module_pos"			VALUE = 0>

		<MvFOREACH ITERATOR = "l.shipping_module" ARRAY = "l.shipping_modules" INDEX = "l.pos" COUNT = "{ l.shipping_module_count }">
			<MvIF EXPR = "{ l.pos GT 1 }">
				<MvASSIGN NAME = "l.search_expression"	VALUE = "{ l.search_expression $ ' OR ' }">
			</MvIF>

			<MvASSIGNARRAY NAME = "l.search_modules"	VALUE = "{ l.shipping_module }">
				<MvDIMENSION INDEX = "{ ++l.search_module_pos }">
			</MvASSIGNARRAY>

			<MvASSIGN NAME = "l.search_expression"		VALUE = "{ l.search_expression $ 'l.rules:mod_code EQ l.search_modules[' $ l.search_module_pos $ ']' }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.search_expression"			VALUE = "{ l.search_expression $ ' )' }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_MivaScript( l.search_expression, l.filter, l.available_filters ) }">

	<MvASSIGN NAME = "l.total_count"					VALUE = 0>
	<MvASSIGN NAME = "l.output_count"					VALUE = 0>
	<MvASSIGN NAME = "l.skip"							VALUE = "{ l.offset }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.rules" ARRAY = "l.filtered_array" COUNT = "{ miva_array_filter_ref( l.output_ruleslist, 1, l.rules, l.search_expression, l.filtered_array ) }">
				<MvASSIGN NAME = "l.total_count"		VALUE = "{ l.total_count + 1 }">

				<MvIF EXPR = "{ l.skip }">
					<MvASSIGN NAME = "l.skip"			VALUE = "{ l.skip - 1 }">
				<MvELSEIF EXPR = "{ ( l.output_count LT l.count ) OR ( l.count EQ 0 ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
					"module":
					{
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.rules:module ) }">
					},
					"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:mod_code ) }">",
					"meth_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:meth_code ) }">",
					"method_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:method_name ) }">",
					"agrpcount":	<MvEVAL EXPR = "{ int( l.rules:agrpcount ) }">,
					"priority":		<MvEVAL EXPR = "{ int( l.rules:priority ) }">,
					"descrip":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:descrip ) }">",
					"adjusttype":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:adjusttype ) }">",
					"adjustamnt":	<MvEVAL EXPR = "{ l.rules:adjustamnt ROUND 2 }">,
					"min_subtot":	<MvEVAL EXPR = "{ l.rules:min_subtot ROUND 2 }">,
					"max_subtot":	<MvEVAL EXPR = "{ l.rules:max_subtot ROUND 2 }">,
					"min_quan":		<MvEVAL EXPR = "{ int( l.rules:min_quan ) }">,
					"max_quan":		<MvEVAL EXPR = "{ int( l.rules:max_quan ) }">,
					"min_weight":	<MvEVAL EXPR = "{ l.rules:min_weight ROUND 2 }">,
					"max_weight":	<MvEVAL EXPR = "{ l.rules:max_weight ROUND 2 }">,
					"states":
					[
						<MvFOREACH INDEX = "l.state_pos" ITERATOR = "l.state" ARRAY = "l.states" COUNT = "{ miva_struct_members( l.rules:states, l.states ) }">
							<MvIF EXPR = "{ l.state_pos GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.state ) }">"
						</MvFOREACH>
					],
					"zips":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:zips ) }">",
					"countries":
					[
						<MvFOREACH INDEX = "l.country_pos" ITERATOR = "l.country" ARRAY = "l.countries" COUNT = "{ miva_struct_members( l.rules:countries, l.countries ) }">
							<MvIF EXPR = "{ l.country_pos GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.country ) }">"
						</MvFOREACH>
					],
					"exclude_po":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.rules:exclude_po ) }">,
					"exclude_df":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.rules:exclude_df ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvIF>
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ShippingMethodRules_Update_Method" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Module_Code"					VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Module_Code ) }">
	<MvASSIGN NAME = "g.Method_Code"					VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Method_Code ) }">
	<MvASSIGN NAME = "g.Priority" 						VALUE = "{ int( g.Priority ) }">
	<MvASSIGN NAME = "g.Description" 					VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Description ) }">
	<MvASSIGN NAME = "g.Adjust_Type" 					VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Adjust_Type ) }">
	<MvASSIGN NAME = "g.Adjust_Amount" 					VALUE = "{ g.Adjust_Amount ROUND 2 }">
	<MvASSIGN NAME = "g.Min_SubTotal"					VALUE = "{ g.Min_SubTotal ROUND 2 }">
	<MvASSIGN NAME = "g.Max_SubTotal"					VALUE = "{ g.Max_SubTotal ROUND 2 }">
	<MvASSIGN NAME = "g.Min_Quantity"					VALUE = "{ int( g.Min_Quantity ) }">
	<MvASSIGN NAME = "g.Max_Quantity"					VALUE = "{ int( g.Max_Quantity ) }">
	<MvASSIGN NAME = "g.Min_Weight"						VALUE = "{ g.Min_Weight ROUND 2 }">
	<MvASSIGN NAME = "g.Max_Weight"						VALUE = "{ g.Max_Weight ROUND 2 }">
	<MvASSIGN NAME = "g.Zips" 							VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Zips ) }">
	<MvASSIGN NAME = "g.Exclude_PO" 					VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Exclude_PO ) }">
	<MvASSIGN NAME = "g.Exclude_By_Default"				VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Exclude_By_Default ) }">

	<MvIF EXPR = "{ ( NOT ISNULL g.Adjust_Type ) AND
					( g.Adjust_Type NE 'fixed' ) AND
					( g.Adjust_type NE 'percent' ) }">								<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00020', 'Please select a valid rate adjustment type' ) }">
	<MvELSEIF EXPR = "{ g.Min_SubTotal LT 0 }">										<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00008', 'Please specify a positive subtotal lower limit' ) }">
	<MvELSEIF EXPR = "{ g.Max_SubTotal LT 0 }">										<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00009', 'Please specify a positive subtotal upper limit' ) }">
	<MvELSEIF EXPR = "{ g.Max_SubTotal AND ( g.Min_SubTotal GT g.Max_SubTotal ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00010', 'Please specify a subtotal upper limit that is higher than the lower limit, or 0' ) }">
	<MvELSEIF EXPR = "{ g.Min_Quantity LT 0 }">										<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00011', 'Please specify a positive quantity lower limit' ) }">
	<MvELSEIF EXPR = "{ g.Max_Quantity LT 0 }">										<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00012', 'Please specify a positive quantity upper limit' ) }">
	<MvELSEIF EXPR = "{ g.Max_Quantity AND ( g.Min_Quantity GT g.Max_Quantity ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00013', 'Please specify a quantity upper limit that is higher than the lower limit, or 0' ) }">
	<MvELSEIF EXPR = "{ g.Min_Weight LT 0 }">										<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00014', 'Please specify a positive weight lower limit' ) }">
	<MvELSEIF EXPR = "{ g.Max_Weight LT 0 }">										<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00015', 'Please specify a positive weight upper limit' ) }">
	<MvELSEIF EXPR = "{ g.Max_Weight AND ( g.Min_Weight GT g.Max_Weight ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00016', 'Please specify a weight upper limit that is higher than the lower limit, or 0' ) }">
	<MvELSEIF EXPR = "{ len_var( g.Description ) GT 100 }">							<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00038', 'Description name must be 100 characters or less' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Load_Method( g.Module_Code, g.Method_Code, l.shippingmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Default( g.Module_Code, g.Method_Code, l.shippingmethodrules ) }">
	</MvIF>

	<MvASSIGN NAME = "l.shippingmethodrules:priority"	VALUE = "{ g.Priority }">
	<MvASSIGN NAME = "l.shippingmethodrules:descrip"	VALUE = "{ g.Description }">
	<MvASSIGN NAME = "l.shippingmethodrules:adjusttype" VALUE = "{ g.Adjust_Type }">
	<MvASSIGN NAME = "l.shippingmethodrules:adjustamnt" VALUE = "{ g.Adjust_Amount }">
	<MvASSIGN NAME = "l.shippingmethodrules:min_subtot"	VALUE = "{ g.Min_SubTotal }">
	<MvASSIGN NAME = "l.shippingmethodrules:max_subtot"	VALUE = "{ g.Max_SubTotal }">
	<MvASSIGN NAME = "l.shippingmethodrules:min_quan"	VALUE = "{ g.Min_Quantity }">
	<MvASSIGN NAME = "l.shippingmethodrules:max_quan"	VALUE = "{ g.Max_Quantity }">
	<MvASSIGN NAME = "l.shippingmethodrules:min_weight"	VALUE = "{ g.Min_Weight }">
	<MvASSIGN NAME = "l.shippingmethodrules:max_weight"	VALUE = "{ g.Max_Weight }">
	<MvASSIGN NAME = "l.shippingmethodrules:states"		VALUE = "">
	<MvASSIGN NAME = "l.shippingmethodrules:zips"		VALUE = "{ g.Zips }">
	<MvASSIGN NAME = "l.shippingmethodrules:countries"	VALUE = "">
	<MvASSIGN NAME = "l.shippingmethodrules:exclude_po" VALUE = "{ g.Exclude_PO }">
	<MvASSIGN NAME = "l.shippingmethodrules:exclude_df" VALUE = "{ g.Exclude_By_Default }">

	<MvFOREACH ITERATOR = "l.state" ARRAY = "l.states" COUNT = "{ [ g.Module_JSON ].JSON_Array_String( g.States, l.states ) }">
		<MvASSIGN NAME = "l.shippingmethodrules:states"		MEMBER = "{ l.state }"		VALUE = 1>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.country" ARRAY = "l.countries" COUNT = "{ [ g.Module_JSON ].JSON_Array_String( g.Countries, l.countries ) }">
		<MvASSIGN NAME = "l.shippingmethodrules:countries"	MEMBER = "{ l.country }"	VALUE = 1>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Insert( l.shippingmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Update( l.shippingmethodrules ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00027', 'Shipping method rules for module \'' $ g.Module_Code $ '\' method \'' $ g.Method_Code $ '\' updated' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ShippingMethodList_Load_Enabled" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ [ g.Module_Feature_SHP_UT ].ShippingMethodList_Load_Enabled( l.methods ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
			"module":
			{
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.method:module ) }">
			},
			"code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:code ) }">",
			"name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:name ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ShippingMethodList_Load_Exclusions" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Module_Code"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Module_Code ) }">
	<MvASSIGN NAME = "g.Method_Code"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Method_Code ) }">

	<MvASSIGN NAME = "l.method_count"				VALUE = "{ [ g.Module_Feature_SHP_UT ].ShippingMethodList_Load_Enabled( l.methods ) }">
	<MvIF EXPR = "{ l.method_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.exclusion_count"			VALUE = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodExclusionList_Load_Method( g.Module_Code, g.Method_Code, l.exclusions ) }">
	<MvIF EXPR = "{ l.exclusion_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
			<MvIF EXPR = "{ ( l.method:module:code EQ g.Module_Code ) AND ( l.method:code EQ g.Method_Code ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.type"				VALUE = "none">
			<MvASSIGN NAME = "l.immutable"			VALUE = 0>

			<MvFOREACH ITERATOR = "l.exclusion" ARRAY = "l.exclusions" COUNT = "{ l.exclusion_count }">
				<MvIF EXPR = "{ ( l.exclusion:excludermo EQ l.method:module:code ) AND ( l.exclusion:excluderme EQ l.method:code ) }">
					<MvASSIGN NAME = "l.type"		VALUE = "excluder">
					<MvASSIGN NAME = "l.immutable"	VALUE = "{ l.exclusion:immutable }">

					<MvFOREACHSTOP>
				<MvELSEIF EXPR = "{ ( l.exclusion:excludedmo EQ l.method:module:code ) AND ( l.exclusion:excludedme EQ l.method:code ) }">
					<MvASSIGN NAME = "l.type"		VALUE = "excluded">
					<MvASSIGN NAME = "l.immutable"	VALUE = "{ l.exclusion:immutable }">

					<MvFOREACHSTOP>
				</MvIF>
			</MvFOREACH>

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
			"module":
			{
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.method:module ) }">
			},
			"code":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:code ) }">",
			"name":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:name ) }">",
			"exclusion_type":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.type ) }">",
			"exclusion_immutable":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.immutable ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ShippingMethodExclusionList_Update_Method" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Module_Code"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Module_Code ) }">
	<MvASSIGN NAME = "g.Method_Code"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Method_Code ) }">
	<MvASSIGN NAME = "l.exclusion_count"			VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Exclusion_Module_Codes, l.module_codes ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Exclusion_Method_Codes, l.method_codes ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Exclusion_Types, l.types ) }">

	<MvFOR INDEX = "l.pos" FIRST = 1 LAST = "{ l.exclusion_count }">
		<MvASSIGN NAME = "l.have_existing"			VALUE = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Load( g.Module_Code, g.Method_Code, l.module_codes[ l.pos ], l.method_codes[ l.pos ], l.existing_exclusion ) }">
		<MvIF EXPR = "{ NOT l.have_existing }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.have_reverse"			VALUE = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Load( l.module_codes[ l.pos ], l.method_codes[ l.pos ], g.Module_Code, g.Method_Code, l.reverse_exclusion ) }">
		<MvIF EXPR = "{ NOT l.have_existing }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.types[ l.pos ] EQ 'none' }">
			<MvIF EXPR = "{ ( l.have_existing AND l.existing_exclusion:immutable ) OR
							( l.have_reverse AND l.reverse_exclusion:immutable ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00001', 'The exclusion between methods ' $ g.Module_Code $ ':' $ g.Method_Code $ ' and ' $ l.module_codes[ l.pos ] $ ':' $ l.method_codes[ l.pos ] $ ' is immutable and cannot be removed or changed' ) }">
			</MvIF>
			
			<MvIF EXPR = "{ l.have_existing }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Delete( l.existing_exclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00028', 'Shipping method exclusion between module \'' $ l.existing_exclusion:excludermo $ '\' method \'' $ l.existing_exclusion:excluderme $ '\' and module \'' $ l.existing_exclusion:excludedmo $ '\' method \'' $ l.existing_exclusion:excludedme $ '\' deleted' ) }">
			</MvIF>

			<MvIF EXPR = "{ l.have_reverse }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Delete( l.reverse_exclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00029', 'Shipping method exclusion between module \'' $ l.reverse_exclusion:excludermo $ '\' method \'' $ l.reverse_exclusion:excluderme $ '\' and module \'' $ l.reverse_exclusion:excludedmo $ '\' method \'' $ l.reverse_exclusion:excludedme $ '\' deleted' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.types[ l.pos ] EQ 'excluded' }">
			<MvIF EXPR = "{ l.have_reverse AND l.reverse_exclusion:immutable }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00002', 'The exclusion between methods ' $ g.Module_Code $ ':' $ g.Method_Code $ ' and ' $ l.module_codes[ l.pos ] $ ':' $ l.method_codes[ l.pos ] $ ' is immutable and cannot be removed or changed' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.have_existing }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:excludermo"	VALUE = "{ g.Module_Code }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:excluderme"	VALUE = "{ g.Method_Code }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:excludedmo"	VALUE = "{ l.module_codes[ l.pos ] }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:excludedme"	VALUE = "{ l.method_codes[ l.pos ] }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:immutable"	VALUE = 0>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Insert( l.shippingmethodexclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00030', 'Shipping method exclusion between module \'' $ l.shippingmethodexclusion:excludermo $ '\' method \'' $ l.shippingmethodexclusion:excluderme $ '\' and module \'' $ l.shippingmethodexclusion:excludedmo $ '\' method \'' $ l.shippingmethodexclusion:excludedme $ '\' created' ) }">
			</MvIF>

			<MvIF EXPR = "{ l.have_reverse }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Delete( l.reverse_exclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00031', 'Shipping method exclusion between module \'' $ l.reverse_exclusion:excludermo $ '\' method \'' $ l.reverse_exclusion:excluderme $ '\' and module \'' $ l.reverse_exclusion:excludedmo $ '\' method \'' $ l.reverse_exclusion:excludedme $ '\' deleted' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.types[ l.pos ] EQ 'excluder' }">
			<MvIF EXPR = "{ l.have_existing AND l.existing_exclusion:immutable }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00003', 'The exclusion between methods ' $ g.Module_Code $ ':' $ g.Method_Code $ ' and ' $ l.module_codes[ l.pos ] $ ':' $ l.method_codes[ l.pos ] $ ' is immutable and cannot be removed or changed' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.have_reverse }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:excludermo"	VALUE = "{ l.module_codes[ l.pos ] }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:excluderme"	VALUE = "{ l.method_codes[ l.pos ] }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:excludedmo"	VALUE = "{ g.Module_Code }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:excludedme"	VALUE = "{ g.Method_Code }">
				<MvASSIGN NAME = "l.shippingmethodexclusion:immutable"	VALUE = 0>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Insert( l.shippingmethodexclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00032', 'Shipping method exclusion between module \'' $ l.shippingmethodexclusion:excludermo $ '\' method \'' $ l.shippingmethodexclusion:excluderme $ '\' and module \'' $ l.shippingmethodexclusion:excludedmo $ '\' method \'' $ l.shippingmethodexclusion:excludedme $ '\' created' ) }">
			</MvIF>

			<MvIF EXPR = "{ l.have_existing }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodExclusion_Delete( l.existing_exclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00033', 'Shipping method exclusion between module \'' $ l.existing_exclusion:excludermo $ '\' method \'' $ l.existing_exclusion:excluderme $ '\' and module \'' $ l.existing_exclusion:excludedmo $ '\' method \'' $ l.existing_exclusion:excludedme $ '\' deleted' ) }">
			</MvIF>
		</MvIF>
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ShippingMethodList_Load_Priority" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.method_count"			VALUE = "{ [ g.Module_Feature_SHP_UT ].ShippingMethodList_Load_Enabled( l.methods ) }">
	<MvIF EXPR = "{ l.method_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Load_Method( l.method:module:code, l.method:code, l.shippingmethodrules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Default( l.method:module:code, l.method:code, l.shippingmethodrules ) }">
		</MvIF>

		<MvASSIGN NAME = "l.method:priority"	VALUE = "{ l.shippingmethodrules:priority }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Feature_SHP_UT ].ShippingMethodList_Runtime_Sort( l.methods ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
			"module":
			{
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.method:module ) }">
			},
			"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:code ) }">",
			"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:name ) }">",
			"priority":		<MvEVAL EXPR = "{ l.method:priority }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ShippingMethodList_Update_Priority" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.priority_count"	VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Module_Codes, l.module_codes ) }">
	<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Method_Codes, l.method_codes ) }">
	<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Priorities, l.priorities ) }">

	<MvFOR INDEX = "l.pos" FIRST = 1 LAST = "{ l.priority_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Load_Method( l.module_codes[ l.pos ], l.method_codes[ l.pos ], l.shippingmethodrules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Default( l.module_codes[ l.pos ], l.method_codes[ l.pos ], l.shippingmethodrules ) }">
		</MvIF>

		<MvASSIGN NAME = "l.shippingmethodrules:priority"	VALUE = "{ int( l.priorities[ l.pos ] ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Insert( l.shippingmethodrules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].ShippingMethodRules_Update( l.shippingmethodrules ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00034', 'Shipping method priority for module \'' $ l.module_codes[ l.pos ] $ '\' method \'' $ l.method_codes[ l.pos ] $ '\' updated' ) }">
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ShippingMethodAvailabilityGroupList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'AGRP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Module_Code"	VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Module_Code ) }">
	<MvASSIGN NAME = "g.Method_Code" 	VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Method_Code ) }">
	<MvASSIGN NAME = "g.Filter" 		VALUE = "{ trim( g.Filter ) }">
	<MvASSIGN NAME = "g.Sort"			VALUE = "{ trim( g.Sort ) }">
	<MvASSIGN NAME = "g.Offset"			VALUE = "{ int( g.Offset ) }">
	<MvASSIGN NAME = "g.Count"			VALUE = "{ int( g.Count ) }">
	<MvASSIGN NAME = "g.Assigned"		VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Assigned ) }">
	<MvASSIGN NAME = "g.Unassigned"		VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Unassigned ) }">
	<MvASSIGN NAME = "l.search_query"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,	'ag.*,
																				 agxsm.mod_code AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'AvailabilityGroups', 'ag' ) }">

	<MvIF EXPR = "{ g.Assigned AND g.Unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'ag', g.Store_Table_Prefix $ 'AvailGroupXShippingMethod', 'agxsm', 'agxsm.mod_code = ? AND agxsm.meth_code = ? AND agxsm.agrp_id = ag.id', 'g.Module_Code, g.Method_Code' ) }">
	<MvELSEIF EXPR = "{ g.Unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'ag', g.Store_Table_Prefix $ 'AvailGroupXShippingMethod', 'agxsm', 'agxsm.mod_code = ? AND agxsm.meth_code = ? AND agxsm.agrp_id = ag.id', 'g.Module_Code, g.Method_Code' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'agxsm.mod_code IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ g.Assigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'AvailGroupXShippingMethod', 'agxsm' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'agxsm.mod_code = ? AND agxsm.meth_code = ? AND agxsm.agrp_id = ag.id', 'g.Module_Code, g.Method_Code' ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvASSIGN NAME = "l.filter_columns" 	VALUE = "{ [ g.Module_Feature_AGR_JSON ].JSON_BaseAvailabilityGroupList_Filters() }">
	<MvASSIGN NAME = "l.orderby_columns" 	VALUE = "{ [ g.Module_Feature_AGR_JSON ].JSON_BaseAvailabilityGroupList_OrderBy() }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, g.Filter, l.filter_columns ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, g.Sort, l.orderby_columns, 'ag.name' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'AvailabilityGroups', l.search_sql, l.search_fields, g.Offset, g.Count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00022', g.MvOPENVIEW_Error ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.availabilitygroup_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( g.Offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT AvailabilityGroups.d.EOF ) AND ( ( g.Count EQ 0 ) OR ( l.availabilitygroup_count LT g.Count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Read( l.availabilitygroup ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.availabilitygroup_count ) }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_AGR_JSON ].JSON_AvailabilityGroup( l.availabilitygroup ) }">
				,"assigned": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( NOT ISNULL AvailabilityGroups.d.assigned ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "AvailabilityGroups" ROWS = 1>
		</MvWHILE>
		]
	}

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "AvailabilityGroups">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box" PARAMETERS = "box var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":		<MvEVAL EXPR = "{ int( l.box:id ) }">,
	"descrip":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.box:descrip ) }">",
	"enabled":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.box:enabled ) }">,
	"width":	<MvEVAL EXPR = "{ l.box:width ROUND 2 }">,
	"length":	<MvEVAL EXPR = "{ l.box:length ROUND 2 }">,
	"height":	<MvEVAL EXPR = "{ l.box:height ROUND 2 }">,
	"weight":	<MvEVAL EXPR = "{ l.box:weight ROUND 2 }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_CustomFields_Initialize" PARAMETERS = "filterlist var, customfield_state var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Structify( l.filterlist ) }">

	<MvASSIGN NAME = "l.customfield_state"				VALUE = "">

	<MvCOMMENT>
	|
	| Build Custom Field Displayable data from MMBatchList "ondemandcolumns"
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.filter" ARRAY = "l.filterlist">
		<MvIF EXPR = "{ l.filter:name EQ 'ondemandcolumns' }">
			<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter:value">
				<MvIF EXPR = "{ ( 'CustomField_Values:' IN l.column_code ) NE 1 }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.module_code"		VALUE = "{ gettoken( l.column_code, ':', 2 ) }">
				<MvASSIGN NAME = "l.customfield_code"	VALUE = "{ gettoken( l.column_code, ':', 3 ) }">

				<MvREFERENCEARRAY NAME = "l.displayable" VARIABLE = "l.displayable_custom_fields">
					<MvMEMBER NAME = "{ l.module_code }">
					<MvMEMBER NAME = "{ l.customfield_code }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.displayable"		VALUE = 1>
			</MvFOREACH>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Load the custom field modules and their associated fields
	|
	| :fields[n]
	|	:module				- reference to cached modules
	|	:code				- custom field code
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.field_count"					VALUE = 0>

	<MvFOREACH INDEX = "l.module_pos" ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'fields_box', l.modules ) }">
		<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_Library_DB ].Module_Load_Features( l.module ) }">
		<MvASSIGN NAME = "l.module_fields"				VALUE = "">

		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Box_Fields( l.module, l.module_fields ) }">
			<MvASSIGN NAME = "l.field_count"			VALUE = "{ l.field_count + 1 }">
			<MvREFERENCEARRAY NAME = "l.field" VARIABLE = "l.fields">
				<MvDIMENSION INDEX = "{ l.field_count }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.field:module" VARIABLE = "l.modules">
				<MvDIMENSION INDEX = "{ l.module_pos }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.field:code"				VALUE = "{ l.module_field:code }">
			<MvASSIGN NAME = "l.field:type"				VALUE = "{ l.module_field:type }">

			<MvREFERENCEARRAY NAME = "l.displayable" VARIABLE = "l.displayable_custom_fields">
				<MvMEMBER NAME = "{ l.field:module:code }">
				<MvMEMBER NAME = "{ l.field:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT l.displayable }">
				<MvIF EXPR = "{ miva_member_exists( l.displayable_custom_fields, '*' ) }">
					<MvASSIGN NAME = "l.displayable"		VALUE = 1>
				<MvELSE>
					<MvREFERENCEARRAY NAME = "l.module_displayable" VARIABLE = "l.displayable_custom_fields">
						<MvMEMBER NAME = "{ l.field:module:code }">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ miva_member_exists( l.module_displayable, '*' ) }">
						<MvASSIGN NAME = "l.displayable"	VALUE = 1>
					</MvIF>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.displayable AND l.field:module:api_ver GE 9.07 }">
				<MvEVAL EXPR = "{ [ g.Module_Root $ l.field:module:module ].Module_Box_Field_Capabilities( l.field:module, l.field:code, l.field:capabilities ) }">
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_CustomFields_Initialize( l.fields, l.field_count, l.displayable_custom_fields, '', l.customfield_state ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_CustomFields" PARAMETERS = "customfield_state var, box_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Box_CustomFields_With_View( l.customfield_state, l.box_id, '' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_CustomFields_With_View" PARAMETERS = "customfield_state var, box_id, view" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ JSON_Box_CustomFields_With_Query( l.null, l.customfield_state, l.box_id, l.view ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_CustomFields_With_Query" PARAMETERS = "query var, customfield_state var, box_id, view" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.customfield_state:plan_count EQ 0 }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Data_Reference( l.query, 'Box_CustomFields', l.ref ) }">

	<MvASSIGN NAME = "l.last_module_id"			VALUE = "">

	,"CustomField_Values":
	{

	<MvFOREACH ITERATOR = "l.plan" ARRAY = "l.customfield_state:plan" COUNT = "{ l.customfield_state:plan_count }">
		<MvIF EXPR = "{ l.plan:module:id NE l.last_module_id }">
			<MvIF EXPR = "{ NOT ISNULL l.last_module_id }">
				},
			</MvIF>

			"<MvEVAL EXPR = "{ l.plan:module:encoded_code }">":
			{

			<MvASSIGN NAME = "l.last_module_id"		VALUE = "{ l.plan:module:id }">
			<MvASSIGN NAME = "l.output_field_count"	VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.plan:field_single }">
			<MvREFERENCEARRAY NAME = "l.queried" VARIABLE = "l.ref:data:queried">
				<MvMEMBER NAME = "{ l.plan:module:code }">
				<MvMEMBER NAME = "{ l.plan:field_code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.view AND l.queried AND l.plan:capabilities:query }">	<MvASSIGN NAME = "l.value" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Box_Field_Query_Value( l.plan:module, l.view, l.plan:field_code ) }">
			<MvELSE>																			<MvASSIGN NAME = "l.value" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Box_Field_Value( l.plan:module, l.box_id, l.plan:field_code ) }">
			</MvIF>

			<MvIF EXPR = "{ l.output_field_count++ GT 0 }">
				,
			</MvIF>

			"<MvEVAL EXPR = "{ l.plan:encoded_field_code }">": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output_CustomField_Value( l.plan:base_type, l.plan:type_data, l.value ) }">
		<MvELSEIF EXPR = "{ l.plan:field_array }">
			<MvASSIGN NAME = "l.values" VALUE = "">

			<MvIF EXPR = "{ l.output_field_count++ GT 0 }">
				,
			</MvIF>

			<MvIF EXPR = "{ l.plan:module:api_ver LT 9.08 }">
				<MvASSIGN NAME = "l.value" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Box_Field_Value( l.plan:module, l.box_id, l.plan:field_code ) }">

				"<MvEVAL EXPR = "{ l.plan:encoded_field_code }">": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output_CustomField_Value( l.plan:base_type, l.plan:type_data, l.value ) }">
			<MvELSE>
				"<MvEVAL EXPR = "{ l.plan:encoded_field_code }">":
				[
				<MvFOREACH ITERATOR = "l.value" ARRAY = "l.values" INDEX = "l.pos" COUNT = "{ [ g.Module_Root $ l.plan:module:module ].Module_Box_Field_Value_Array( l.plan:module, l.box_id, l.plan:field_code, l.values ) }">
					<MvIF EXPR = "{ l.pos GT 1 }">
						,	
					</MvIF>

					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output_CustomField_Value( l.plan:base_type, l.plan:type_data, l.value ) }">
				</MvFOREACH>
				]
			</MvIF>
		<MvELSEIF EXPR = "{ NOT ISNULL l.plan:field_map }">
			<MvASSIGN NAME = "l.mapped"			VALUE = 0>

			<MvFOREACH ITERATOR = "l.field" ARRAY = "l.plan:fields" COUNT = "{ l.plan:field_count }">
				<MvASSIGN NAME = "l.loaded"		VALUE = 0>

				<MvREFERENCEARRAY NAME = "l.queried" VARIABLE = "l.ref:data:queried">
					<MvMEMBER NAME = "{ l.plan:module:code }">
					<MvMEMBER NAME = "{ l.field:code }">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ NOT ISNULL l.view AND l.queried AND l.field:capabilities:query }">
					<MvASSIGN NAME = "l.loaded" VALUE = 1>
					<MvASSIGN NAME = "l.value"	VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Box_Field_Query_Value( l.plan:module, l.view, l.field:code ) }">
				<MvELSEIF EXPR = "{ NOT l.mapped }">
					<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Box_Fields_Mapped( l.plan:module, l.box_id, l.plan:field_map, l.module_output ) }">
					<MvASSIGN NAME = "l.mapped" VALUE = 1>
				</MvIF>

				<MvIF EXPR = "{ NOT l.loaded }">
					<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.module_output">
						<MvMEMBER NAME = "{ l.field:code }">
					</MvREFERENCEARRAY>
				</MvIF>

				<MvIF EXPR = "{ l.output_field_count++ GT 0 }">
					,
				</MvIF>

				"<MvEVAL EXPR = "{ l.field:encoded_code }">": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output_CustomField_Value( l.field:base_type, l.field:type_data, l.value ) }">
			</MvFOREACH>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.last_module_id }">
		}
	</MvIF>

	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_CustomFields_Query" PARAMETERS = "query var, module var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.module EQ '*' }">
		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'fields_box', l.modules ) }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Library_DB ].Module_Load_Features( l.module ) }">

			<MvIF EXPR = "{ NOT JSON_Box_CustomFields_Query( l.query, l.module, '*' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ ( l.module:api_ver LT 9.07 ) OR ( NOT l.module:feature_hash:fields_box ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.code EQ '*' }">
		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Box_Fields( l.module, l.module_fields ) }">
			<MvIF EXPR = "{ NOT JSON_Box_CustomFields_Query( l.query, l.module, l.module_field:code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Data_Reference( l.query, 'Box_CustomFields', l.ref ) }">

	<MvIF EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Total_Join_Count( l.query ) GE 50 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Box_Field_Capabilities( l.module, l.code, l.capabilities ) }">

	<MvIF EXPR = "{ NOT l.capabilities:query }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGNARRAY NAME = "l.ref:data:queried"	VALUE = 1>
		<MvMEMBER NAME = "{ l.module:code }">
		<MvMEMBER NAME = "{ l.code }">
	</MvASSIGNARRAY>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Box_Field_Query( l.module, l.query, l.code ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_CustomFields_Query_Filter" PARAMETERS = "query var, field_count var, module var, filter_name, filter_operator, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( l.module:api_ver LT 9.07 ) OR ( NOT l.module:feature_hash:fields_box ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Box_Field_Capabilities( l.module, l.filter_name, l.capabilities ) }">

	<MvIF EXPR = "{ NOT l.capabilities:search }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Box_Field_Query_Search( l.module, l.query, l.filter_name, l.filter_operator, l.filter_value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_CustomFields_Query_OrderBy" PARAMETERS = "query var, direction, module var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( l.module:api_ver LT 9.07 ) OR ( NOT l.module:feature_hash:fields_box ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Box_Field_Capabilities( l.module, l.code, l.capabilities ) }">

	<MvIF EXPR = "{ NOT l.capabilities:orderby }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Box_Field_Query_OrderBy( l.module, l.query, l.code, l.direction ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_CustomFields_Query_Index" PARAMETERS = "loaded_record var, module var, box_id, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( l.module:api_ver LT 9.07 ) OR ( NOT l.module:feature_hash:fields_box ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Box_Field_Query_OrderBy_LoadIndexRecord( l.module, l.loaded_record, l.box_id, l.code ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BoxCustomFieldList_Load" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.customfields" COUNT = "{ [ g.Module_Library_Utilities ].BoxCustomFieldList_Load( l.customfields ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.count ) }">
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.customfield:code ) }">",
				"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.customfield:name ) }">",
				"type":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.customfield:type ) }">",
				"readonly":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.customfield:readonly ) }">,
				"searchable":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.customfield:capabilities:search ) }">,
				"sortable":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.customfield:capabilities:orderby ) }">,
				"module":
				{
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.customfield:module ) }">
				}
				<MvIF EXPR = "{ l.customfield:type EQ 'choice' }">
					,
					"choices":
					[
						<MvFOREACH ITERATOR = "l.choice" ARRAY = "l.customfield:choices" INDEX = "l.choice_pos">
							<MvIF EXPR = "{ l.choice_pos GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.choice ) }">"
						</MvFOREACH>
					]
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BoxList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'box.descrip',	'descrip' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters, 'box.enabled',	'enabled' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NUMBER(	l.available_filters, 'box.width',	'width' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NUMBER(	l.available_filters, 'box.length',	'length' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NUMBER(	l.available_filters, 'box.height',	'height' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NUMBER(	l.available_filters, 'box.weight',	'weight' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.search_query"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'box.*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Boxes', 'box' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback_With_CustomFields( l.search_query, l.filter, l.available_filters,
																				g.Module_Feature_SHP_JSON, '', '', 'JSON_Box_CustomFields_Query_Filter', l.null ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Query_Callback_With_CustomFields( l.search_query, l.filter, g.Module_Feature_SHP_JSON, 'JSON_Box_CustomFields_Query' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy_Callback_With_CustomFields( l.search_query, l.sort,
																				 'descrip:box.descrip,enabled:box.enabled,width:box.width,length:box.length,height:box.height,weight:box.weight',
																				 'descrip',
																				 g.Module_Feature_SHP_JSON, 'JSON_Box_CustomFields_Query_OrderBy' ) }">

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Boxes', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00021', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.box_count"		VALUE = 0>

	<MvEVAL EXPR = "{ JSON_Box_CustomFields_Initialize( l.filter, l.customfield_state ) }">	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( ( l.count EQ 0 ) OR ( l.box_count LT l.count ) ) AND ( NOT Boxes.d.EOF ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.box_count ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_SHP_DB ].Box_Read( l.box ) }">
			<MvEVAL EXPR = "{ JSON_Box( l.box ) }">
			<MvEVAL EXPR = "{ JSON_Box_CustomFields_With_Query( l.search_query, l.customfield_state, Boxes.d.id, 'Boxes' ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Boxes" ROWS = 1>
		</MvWHILE>
		]
	}

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Boxes">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BoxList_Load_Enabled" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 1, 0, 0, 0 ) AND
					NOT [ g.Module_Admin ].CanI( 'ORDR', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.box_count"	VALUE = "{ [ g.Module_Feature_SHP_DB ].BoxList_Load_Enabled( l.boxes ) }">
	<MvIF EXPR = "{ l.box_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
	<MvFOREACH ITERATOR = "l.box" ARRAY = "l.boxes" COUNT = "{ l.box_count }">
		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
		<MvEVAL EXPR = "{ JSON_Box( l.box ) }">
		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
	</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_Validate_Module" PARAMETERS = "box var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Store:boxpack_id EQ 0 }">				<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT g.Store:boxpack_mod:active }">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].FieldError_Clear() }">

	<MvIF EXPR = "{ [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Validate( g.Store:boxpack_mod, l.box ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"valid":				false,
		"error_field":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( g.Error_Field ) }">",
		"error_field_message":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( g.Error_Field_Message ) }">",
		"invalid_fields":
		[
			<MvASSIGN NAME = "l.fields"			VALUE = "{ [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Fields( g.Store:boxpack_mod, l.box ) }">
			<MvASSIGN NAME = "l.invalid_count"	VALUE = 0>
			<MvASSIGN NAME = "l.field_pos"		VALUE = 1>
			<MvASSIGN NAME = "l.field"			VALUE = "{ trim( gettoken( l.fields, ',', l.field_pos ) ) }">

			<MvWHILE EXPR = "{ NOT ISNULL l.field }">
				<MvIF EXPR = "{ [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Invalid( g.Store:boxpack_mod, l.field ) }">
					<MvIF EXPR = "{ l.invalid_count }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.field ) }">"

					<MvASSIGN NAME = "l.invalid_count" VALUE = "{ l.invalid_count + 1 }">
				</MvIF>

				<MvASSIGN NAME = "l.field_pos"	VALUE = "{ l.field_pos + 1 }">
				<MvASSIGN NAME = "l.field"		VALUE = "{ trim( gettoken( l.fields, ',', l.field_pos ) ) }">
			</MvWHILE>
		]
	}
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.box:enabled"	VALUE = 1>
	<MvASSIGN NAME = "l.box:width"		VALUE = 0.00>
	<MvASSIGN NAME = "l.box:length"		VALUE = 0.00>
	<MvASSIGN NAME = "l.box:height"		VALUE = 0.00>
	<MvASSIGN NAME = "l.box:weight"		VALUE = 0.00>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'R:100',	'Description',	l.box:descrip )			OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Enabled',		l.box:enabled )			OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'O',		'Width',		l.box:width,	10, 2 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'O',		'Length',		l.box:length,	10, 2 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'O',		'Height',		l.box:height,	10, 2 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'O',		'Weight',		l.box:weight,	10, 2 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_SHP_DB ].Box_Load_Description( l.box:descrip, l.existing_box ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Description', 'A box with the description \'' $ l.existing_box:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Box_Validate_Module( l.box ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].Box_Insert( l.box ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Store:boxpack_id AND g.Store:boxpack_mod:active }">
		<MvIF EXPR = "{ NOT [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Insert( g.Store:boxpack_mod, l.box ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00035', 'Box \'' $ g.Description $ '\' created' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"valid":	true,
		"box_id":	<MvEVAL EXPR = "{ l.box:id }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_Update" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'Box_ID', l.box_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].Box_Load_ID( l.box_id, l.box ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00006', 'Box not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'O:100',	'Description',	l.box:descrip )			OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Enabled',		l.box:enabled )			OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'O',		'Width',		l.box:width,	10, 2 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'O',		'Length',		l.box:length,	10, 2 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'O',		'Height',		l.box:height,	10, 2 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'O',		'Weight',		l.box:weight,	10, 2 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_SHP_DB ].Box_Load_Description( l.box:descrip, l.existing_box ) AND ( l.existing_box:id NE l.box:id )  }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Description', 'A box with the description \'' $ l.existing_box:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Box_Validate_Module( l.box ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].Box_Update( l.box ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Store:boxpack_id AND g.Store:boxpack_mod:active }">
		<MvIF EXPR = "{ NOT [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Update( g.Store:boxpack_mod, l.box ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00036', 'Box \'' $ g.Description $ '\' updated' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"valid": true
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Box_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Box_ID"			VALUE = "{ int( g.Box_ID ) }">

	<MvIF EXPR = "{ g.Store:boxpack_id AND g.Store:boxpack_mod:active }">
		<MvIF EXPR = "{ NOT [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Delete( g.Store:boxpack_mod, g.Box_ID ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].Box_Delete_ID( g.Box_ID ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-SHP-JSN-00037', 'Box ID ' $ g.Box_ID $ ' deleted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BoxPackingModule_BoxFieldList_Load" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'SHIP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Box_ID"			VALUE = "{ int( g.Box_ID ) }">

	<MvIF EXPR = "{ g.Box_ID EQ 0 }">
		<MvASSIGN NAME = "l.box:id"		VALUE = 0>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_DB ].Box_Load_ID( g.Box_ID, l.box ) }">
			<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-SHP-JSN-00007', 'Box ' $ g.Box_ID $ ' not found' ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( g.Store:boxpack_id EQ 0 ) OR
					( NOT g.Store:boxpack_mod:active ) }">	<MvASSIGN NAME = "l.fields"	VALUE = "">
	<MvELSE>												<MvASSIGN NAME = "l.fields" VALUE = "{ [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Fields( g.Store:boxpack_mod, l.box ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvASSIGN NAME = "l.field_pos"		VALUE = 1>
		<MvASSIGN NAME = "l.field_code"		VALUE = "{ trim( gettoken( l.fields, ',', l.field_pos ) ) }">

		<MvWHILE EXPR = "{ NOT ISNULL l.field_code }">
			<MvASSIGN NAME = "l.prompt"		VALUE = "{ [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Prompt( g.Store:boxpack_mod, l.field_code ) }">
			<MvCAPTURE VARIABLE = "l.field"><MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ g.Store:boxpack_mod:module ].BoxPackingModule_Box_Field( g.Store:boxpack_mod, l.field_code ) }"></MvCAPTURE>

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.field_count ) }">
			"code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.field_code ) }">",
			"prompt":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.prompt ) }">",
			"field":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.field ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvASSIGN NAME = "l.field_pos"	VALUE = "{ l.field_pos + 1 }">
			<MvASSIGN NAME = "l.field_code"	VALUE = "{ trim( gettoken( l.fields, ',', l.field_pos ) ) }">
		</MvWHILE>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PackingSolution_Load_OrderShipment" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'ORDR', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Shipment_ID"	VALUE = "{ int( g.Shipment_ID ) }">
	<MvASSIGN NAME = "l.package_count"	VALUE = "{ [ g.Module_Feature_SHP_UT ].Pack_OrderShipment( g.Shipment_ID, l.packages ) }">

	<MvIF EXPR = "{ l.package_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.package" ARRAY = "l.packages" COUNT = "{ l.package_count }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_package_count ) }">
			"box":
			<MvIF EXPR = "{ ISNULL l.package:box }">
				null,
			<MvELSE>
				{
					<MvEVAL EXPR = "{ JSON_Box( l.package:box ) }">
				},
			</MvIF>
			"width":	<MvEVAL EXPR = "{ l.package:width ROUND 2 }">,
			"length":	<MvEVAL EXPR = "{ l.package:length ROUND 2 }">,
			"height":	<MvEVAL EXPR = "{ l.package:height ROUND 2 }">,
			"weight":	<MvEVAL EXPR = "{ l.package:weight ROUND 2 }">,
			"items":
			[
				<MvASSIGN NAME = "l.output_item_count"	VALUE = 0>

				<MvFOREACH ITERATOR = "l.item" ARRAY = "l.package:items" COUNT = "{ l.package:item_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_start( l.output_item_count ) }">
					"product":
					{
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Product( l.item:product ) }">
					},
					"orderitem":
					{
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderItem( l.item:orderitem ) }">
					},
					"width":	<MvEVAL EXPR = "{ l.item:width ROUND 2 }">,
					"length":	<MvEVAL EXPR = "{ l.item:length ROUND 2 }">,
					"height":	<MvEVAL EXPR = "{ l.item:height ROUND 2 }">,
					"weight":	<MvEVAL EXPR = "{ l.item:weight ROUND 2 }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvFOREACH>
			]
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvINCLUDE FILE = "json/mivascript.mv">
