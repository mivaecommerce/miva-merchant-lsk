<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-PAY-JSN-
| Next Error Code: 68
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_PaymentModule_Capabilities" PARAMETERS = "capabilities var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"split":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.capabilities:split ) }">,
	"balance":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.capabilities:balance ) }">,
	"mivapay":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.capabilities:mivapay ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "PaymentMethodRulesList_Sort_Callback" PARAMETERS = "left var, right var, sort var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.sort EQ 'method_name' }">							<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:method_name, l.right:method_name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-method_name' }">					<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:method_name, l.left:method_name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'module_name' }">						<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:module:name, l.right:module:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-module_name' }">					<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:module:name, l.left:module:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'descrip' }">							<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:descrip, l.right:descrip ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-descrip' }">						<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:descrip, l.left:descrip ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'disable_rc' }">						<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:disable_rc, l.right:disable_rc ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-disable_rc' }">						<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:disable_rc, l.left:disable_rc ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'exclude_df' }">						<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:exclude_df, l.right:exclude_df ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-exclude_df' }">						<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:exclude_df, l.left:exclude_df ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'total' }">
		<MvIF EXPR = "{ l.left:min_total LT l.right:min_total }">		<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSEIF EXPR = "{ l.left:min_total GT l.right:min_total }">	<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSEIF EXPR = "{ l.left:max_total LT l.right:max_total }">	<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSEIF EXPR = "{ l.left:max_total GT l.right:max_total }">	<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSE>														<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.sort EQ '-total' }">
		<MvIF EXPR = "{ l.left:min_total LT l.right:min_total }">		<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSEIF EXPR = "{ l.left:min_total GT l.right:min_total }">	<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSEIF EXPR = "{ l.left:max_total LT l.right:max_total }">	<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSEIF EXPR = "{ l.left:max_total GT l.right:max_total }">	<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSE>														<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.sort EQ 'agrpcount' }">
		<MvIF EXPR = "{ l.left:agrpcount LT l.right:agrpcount }">		<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSEIF EXPR = "{ l.left:agrpcount GT l.right:agrpcount }">	<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSE>														<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.sort EQ '-agrpcount' }">
		<MvIF EXPR = "{ l.left:agrpcount LT l.right:agrpcount }">		<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSEIF EXPR = "{ l.left:agrpcount GT l.right:agrpcount }">	<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSE>														<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.sort EQ 'priority' }">
		<MvIF EXPR = "{ l.left:priority LT l.right:priority }">			<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSEIF EXPR = "{ l.left:priority GT l.right:priority }">		<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSE>														<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.sort EQ '-priority' }">
		<MvIF EXPR = "{ l.left:priority LT l.right:priority }">			<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSEIF EXPR = "{ l.left:priority GT l.right:priority }">		<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSE>														<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.result NE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.result }">
	</MvIF>

	<MvCOMMENT>
	|
	| Break ties using module code then method code.  priority tiebreaking is reversed, to match the
	| runtime logic.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( l.sort EQ 'priority' ) OR ( ( l.sort NE '-priority' ) AND ( substring_var( l.sort, 1, 1 ) EQ '-' ) ) }">
		<MvIF EXPR = "{ strcasecmp( l.left:mod_code, l.right:mod_code ) LT 0 }">		<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:mod_code, l.right:mod_code ) GT 0 }">	<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:meth_code, l.right:meth_code ) LT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:meth_code, l.right:meth_code ) GT 0 }">	<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ strcasecmp( l.left:mod_code, l.right:mod_code ) LT 0 }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:mod_code, l.right:mod_code ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:meth_code, l.right:meth_code ) LT 0 }">	<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:meth_code, l.right:meth_code ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentMethodRulesList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.payment_modules"		VALUE = "">
	<MvASSIGN NAME = "l.payment_module_count"	VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"		VALUE = "">
	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = 0>
	<MvASSIGN NAME = "l.count"					VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR(		l.available_filters, 'method_name',	'l.rules:method_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR(		l.available_filters, 'module_name',	'l.rules:module:name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR(		l.available_filters, 'descrip',		'l.rules:descrip' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_NUMBER(		l.available_filters, 'min_total',	'l.rules:min_total' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_NUMBER(		l.available_filters, 'max_total',	'l.rules:max_total' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_BOOL(		l.available_filters, 'disable_rc',	'l.rules:disable_rc' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_INTEGER(	l.available_filters, 'agrpcount',	'l.rules:agrpcount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_INTEGER(	l.available_filters, 'priority',	'l.rules:priority' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_BOOL(		l.available_filters, 'exclude_df',	'l.rules:exclude_df' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text_Array(	'o', 'PaymentModule_List',	l.payment_modules, l.payment_module_count )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(		'o', 'Filter',				l.filter )									OR
					NOT [ g.Module_JSON ].JSON_Input_Text(			'o', 'Sort',				l.sort )									OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(		'o', 'Offset',				l.offset )									OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(		'o', 'Count',				l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.rules_count"	VALUE = "{ [ g.Module_Feature_PAY_DB ].PaymentMethodRulesList_Load_All( l.ruleslist ) }">

	<MvIF EXPR = "{ l.rules_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.method_count"	VALUE = "{ [ g.Module_Feature_PAY_UT ].PaymentMethodAndPaymentCardTypeList_Load_Enabled( l.methods ) }">

	<MvIF EXPR = "{ l.method_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Merge the two lists together, applying "default" settings to methods that do not have configured rules, and excluding
	| rules that apply to methods which are not present from the output.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.output_rules_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
		<MvIF EXPR = "{ l.method:paymentcardtype:id }">
			<MvASSIGN NAME = "l.module_code"	VALUE = "">
			<MvASSIGN NAME = "l.method_code"	VALUE = "">
			<MvASSIGN NAME = "l.pctype_id"		VALUE = "{ l.method:paymentcardtype:id }">
		<MvELSE>
			<MvASSIGN NAME = "l.module_code"	VALUE = "{ l.method:module:code }">
			<MvASSIGN NAME = "l.method_code"	VALUE = "{ l.method:code }">
			<MvASSIGN NAME = "l.pctype_id"		VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ miva_array_search( l.ruleslist, 1, l.rules, '( l.rules:pctype_id EQ l.pctype_id ) AND
																	 ( l.rules:mod_code EQ l.module_code ) AND
																	 ( l.rules:meth_code EQ l.method_code )' ) }">
			<MvASSIGN NAME = "l.output_rules"	VALUE = "{ l.rules }">
		<MvELSE>
			<MvASSIGN NAME = "l.output_rules"	VALUE = "">
		</MvIF>

		<MvIF EXPR = "{ ( l.output_rules:pctype_id NE l.pctype_id ) OR
						( l.output_rules:mod_code NE l.module_code ) OR
						( l.output_rules:meth_code NE l.method_code ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Default( l.module_code, l.method_code, l.pctype_id, l.output_rules ) }">
		</MvIF>

		<MvASSIGN NAME = "l.output_rules:module"									VALUE = "{ l.method:module }">
		<MvASSIGN NAME = "l.output_rules:method_name"								VALUE = "{ l.method:name }">
		<MvASSIGN NAME = "l.output_rules:paymentcardtype"							VALUE = "{ l.method:paymentcardtype }">

		<MvCOMMENT>
		|
		| Round decimal columns to their final length so that LIKE/NOTLIKE operations in JSON_Filter_MivaScript operate on the
		| same data the user sees.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.output_rules:min_total"									VALUE = "{ l.output_rules:min_total ROUND 2 }">
		<MvASSIGN NAME = "l.output_rules:max_total"									VALUE = "{ l.output_rules:max_total ROUND 2 }">

		<MvASSIGN NAME = "l.output_rules_count"										VALUE = "{ l.output_rules_count + 1 }">
		<MvASSIGN NAME = "l.output_ruleslist" INDEX = "{ l.output_rules_count }"	VALUE = "{ l.output_rules }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_sort( l.output_ruleslist, 'PaymentMethodRulesList_Sort_Callback', l.sort ) }">
	<MvASSIGN NAME = "l.total_count" 	VALUE = 0>

	<MvASSIGN NAME = "l.search_expression"					VALUE = "1 EQ 1">

	<MvIF EXPR = "{ l.payment_module_count }">
		<MvASSIGN NAME = "l.search_expression"				VALUE = "{ l.search_expression $ ' AND ( ' }">
		<MvASSIGN NAME = "l.search_module_pos"				VALUE = 0>

		<MvFOREACH ITERATOR = "l.payment_module" ARRAY = "l.payment_modules" INDEX = "l.pos" COUNT = "{ l.payment_module_count }">
			<MvIF EXPR = "{ l.pos GT 1 }">
				<MvASSIGN NAME = "l.search_expression"		VALUE = "{ l.search_expression $ ' OR ' }">
			</MvIF>

			<MvASSIGNARRAY NAME = "l.search_modules"		VALUE = "{ l.payment_module }">
				<MvDIMENSION INDEX = "{ ++l.search_module_pos }">
			</MvASSIGNARRAY>

			<MvASSIGN NAME = "l.search_expression"			VALUE = "{ l.search_expression $ '( \'x\' $ toupper( l.rules:mod_code ) ) EQ ( \'x\' $ toupper( l.search_modules[' $ l.search_module_pos $ '] ) )' }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.search_expression"				VALUE = "{ l.search_expression $ ' )' }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_MivaScript( l.search_expression, l.filter, l.available_filters ) }">

	<MvASSIGN NAME = "l.total_count"	VALUE = 0>
	<MvASSIGN NAME = "l.output_count"	VALUE = 0>
	<MvASSIGN NAME = "l.skip"			VALUE = "{ l.offset }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.rules" ARRAY = "l.filtered_array" COUNT = "{ miva_array_filter_ref( l.output_ruleslist, 1, l.rules, l.search_expression, l.filtered_array ) }">
				<MvASSIGN NAME = "l.total_count" VALUE = "{ l.total_count + 1 }">

				<MvIF EXPR = "{ l.skip }">
					<MvASSIGN NAME = "l.skip" VALUE = "{ l.skip - 1 }">
				<MvELSEIF EXPR = "{ ( l.output_count LT l.count ) OR ( l.count EQ 0 ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
					"module":
					{
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.rules:module ) }">
					},

					"capabilities":
					{
						<MvASSIGN NAME = "l.capabilities" 	VALUE = "">

						<MvIF EXPR = "{ l.rules:module:api_ver GE 9.03 }">
							<MvASSIGN NAME = "l.null" 		VALUE = "{ [ g.Module_Root $ l.rules:module:module ].PaymentModule_Capabilities( l.rules:module, l.capabilities ) }">
						</MvIF>

						<MvEVAL EXPR = "{ JSON_PaymentModule_Capabilities( l.capabilities ) }">
					},

					"paymentcardtype":
					{
						<MvEVAL EXPR = "{ JSON_PaymentCardType( l.rules:paymentcardtype ) }">
					},

					"mod_code":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:mod_code ) }">",
					"meth_code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:meth_code ) }">",
					"pctype_id":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:pctype_id ) }">",
					"module_name":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:module:name ) }">",
					"method_name":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:method_name ) }">",
					"agrpcount":				<MvEVAL EXPR = "{ int( l.rules:agrpcount ) }">,
					"priority":					<MvEVAL EXPR = "{ int( l.rules:priority ) }">,
					"descrip":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:descrip ) }">",
					"min_total":				<MvEVAL EXPR = "{ l.rules:min_total ROUND 2 }">,
					"max_total":				<MvEVAL EXPR = "{ l.rules:max_total ROUND 2 }">,
					"disable_rc":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.rules:disable_rc ) }">,
					"states":
					[
						<MvFOREACH INDEX = "l.state_pos" ITERATOR = "l.state" ARRAY = "l.states" COUNT = "{ miva_struct_members( l.rules:states, l.states ) }">
							<MvIF EXPR = "{ l.state_pos GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.state ) }">"
						</MvFOREACH>
					],
					"zips":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.rules:zips ) }">",
					"countries":
					[
						<MvFOREACH INDEX = "l.country_pos" ITERATOR = "l.country" ARRAY = "l.countries" COUNT = "{ miva_struct_members( l.rules:countries, l.countries ) }">
							<MvIF EXPR = "{ l.country_pos GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.country ) }">"
						</MvFOREACH>
					],
					"exclude_df":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.rules:exclude_df ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvIF>
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentMethodRules_Update_Method" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.module_code"		VALUE = "">
	<MvASSIGN NAME = "l.method_code"		VALUE = "">
	<MvASSIGN NAME = "l.paymentcardtype_id"	VALUE = 0>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'PaymentCardType_ID' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'PaymentCardType_ID', l.paymentcardtype_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">		
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_DB ].MivaPaySettings_Load_Cached( l.mivapay_settings ) OR NOT l.mivapay_settings:enabled }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00067', 'Payment Card Types are not available when MivaPay is disabled.  Please enable MivaPay and try again.' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_DB ].PaymentCardType_Load_ID( l.paymentcardtype_id, l.null ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'PaymentCardType_ID', 'Payment Card Type not found' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R',		'Module_Code', l.module_code ) OR
						NOT [ g.Module_JSON ].JSON_Input_Text( 'r:100',	'Method_Code', l.method_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Module_Code', 'Module \'' $ l.module_code $ '\' not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.module:active }">						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Module_Code', 'Module \'' $ l.module:code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:payment }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Module_Code', 'Module \'' $ l.module:code $ '\' does not implement the payment feature' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_DB ].PaymentMethodRules_Load_MethodOrDefault_Cached( l.module_code, l.method_code, l.paymentcardtype_id, l.paymentmethodrules ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(		'O', 		'Priority',				l.paymentmethodrules:priority )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(			'o:100', 	'Description',			l.paymentmethodrules:descrip )			OR
					NOT [ g.Module_JSON ].JSON_Input_Number(		'O:nonneg', 'Min_Total',			l.paymentmethodrules:min_total, 10, 2 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Number(		'O:nonneg', 'Max_Total',			l.paymentmethodrules:max_total, 10, 2 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(		'O', 		'Disable_reCAPTCHA',	l.paymentmethodrules:disable_rc ) 		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(			'o', 		'Zips',					l.paymentmethodrules:zips )				OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(		'O', 		'Exclude_DF',			l.paymentmethodrules:exclude_df ) 		OR
					NOT [ g.Module_JSON ].JSON_Input_Text_Array(	'o', 		'States',				l.states, 	 l.state_count )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text_Array(	'o', 		'Countries',			l.countries, l.country_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.paymentmethodrules:max_total AND ( l.paymentmethodrules:min_total GT l.paymentmethodrules:max_total ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Max_Total', 'Please specify a total upper limit that is higher than the lower limit, or 0' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.paymentmethodrules:states"		VALUE = "">
	<MvASSIGN NAME = "l.paymentmethodrules:countries"	VALUE = "">

	<MvFOREACH ITERATOR = "l.state" ARRAY = "l.states" COUNT = "{ l.state_count }">
		<MvASSIGN NAME = "l.paymentmethodrules:states"		MEMBER = "{ l.state }"		VALUE = 1>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.country" ARRAY = "l.countries" COUNT = "{ l.country_count }">
		<MvASSIGN NAME = "l.paymentmethodrules:countries"	MEMBER = "{ l.country }"	VALUE = 1>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Insert( l.paymentmethodrules ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Update( l.paymentmethodrules ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.paymentcardtype_id }">	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00053', 'Payment method rules for payment card type \'' $ l.paymentcardtype_id $ '\' updated' ) }">
	<MvELSE>									<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00015', 'Payment method rules for module \'' $ l.module_code $ '\' method \'' $ l.method_code $ '\' updated' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentMethodList_Load_Enabled" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ [ g.Module_Feature_PAY_UT ].PaymentMethodList_Load_Enabled( l.methods ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
			"module":
			{
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.method:module ) }">
			},
			"code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:code ) }">",
			"name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:name ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentMethodList_Load_Exclusions" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Module_Code"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Module_Code ) }">
	<MvASSIGN NAME = "g.Method_Code"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Method_Code ) }">
	<MvASSIGN NAME = "g.PaymentCardType_ID"			VALUE = "{ int( g.PaymentCardType_ID ) }">

	<MvASSIGN NAME = "l.method_count"				VALUE = "{ [ g.Module_Feature_PAY_UT ].PaymentMethodAndPaymentCardTypeList_Load_Enabled( l.methods ) }">
	<MvIF EXPR = "{ l.method_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.exclusion_count"			VALUE = "{ [ g.Module_Feature_PAY_DB ].PaymentMethodExclusionList_Load_Method( g.Module_Code, g.Method_Code, g.PaymentCardType_ID, l.exclusions ) }">
	<MvIF EXPR = "{ l.exclusion_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
			<MvIF EXPR = "{ l.method:paymentcardtype:id }">
				<MvASSIGN NAME = "l.module_code"	VALUE = "">
				<MvASSIGN NAME = "l.method_code"	VALUE = "">
				<MvASSIGN NAME = "l.pctype_id"		VALUE = "{ l.method:paymentcardtype:id }">
			<MvELSE>
				<MvASSIGN NAME = "l.module_code"	VALUE = "{ l.method:module:code }">
				<MvASSIGN NAME = "l.method_code"	VALUE = "{ l.method:code }">
				<MvASSIGN NAME = "l.pctype_id"		VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ ( g.PaymentCardType_ID EQ l.pctype_id ) AND
							( g.Module_Code EQ l.module_code ) 		AND
							( g.Method_Code EQ l.method_code ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.type"				VALUE = "none">

			<MvFOREACH ITERATOR = "l.exclusion" ARRAY = "l.exclusions" COUNT = "{ l.exclusion_count }">
				<MvIF EXPR = "{ ( l.exclusion:excluderti EQ l.pctype_id ) 		AND
								( l.exclusion:excludermo EQ l.module_code ) 	AND
								( l.exclusion:excluderme EQ l.method_code ) }">
					<MvASSIGN NAME = "l.type"		VALUE = "excluder">

					<MvFOREACHSTOP>
				<MvELSEIF EXPR = "{ ( l.exclusion:excludedti EQ l.pctype_id ) 	AND
									( l.exclusion:excludedmo EQ l.module_code ) AND
									( l.exclusion:excludedme EQ l.method_code ) }">
					<MvASSIGN NAME = "l.type"		VALUE = "excluded">

					<MvFOREACHSTOP>
				</MvIF>
			</MvFOREACH>

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
			"module":
			{
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.method:module ) }">
			},
			"code":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:code ) }">",
			"name":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:name ) }">",
			"pctype_id":			<MvEVAL EXPR = "{ int( l.method:paymentcardtype:id ) }">,
			"exclusion_type":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.type ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentMethodExclusionList_Update_Method" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Module_Code"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Module_Code ) }">
	<MvASSIGN NAME = "g.Method_Code"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Method_Code ) }">
	<MvASSIGN NAME = "g.PaymentCardType_ID"			VALUE = "{ int( g.PaymentCardType_ID ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Exclusion_Module_Codes, l.module_codes ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Exclusion_Method_Codes, l.method_codes ) }">
	<MvASSIGN NAME = "l.exclusion_count"			VALUE = "{ [ g.Module_JSON ].JSON_Array_Integer( g.Exclusion_PaymentCardType_IDs, l.paymentcardtype_ids ) }">
	<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Exclusion_Types, l.types ) }">

	<MvFOR INDEX = "l.pos" FIRST = 1 LAST = "{ l.exclusion_count }">
		<MvASSIGN NAME = "l.have_existing"			VALUE = "{ [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Load( g.Module_Code, g.Method_Code, g.PaymentCardType_ID, l.module_codes[ l.pos ], l.method_codes[ l.pos ], l.paymentcardtype_ids[ l.pos ], l.existing_exclusion ) }">
		<MvIF EXPR = "{ NOT l.have_existing }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.have_reverse"			VALUE = "{ [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Load( l.module_codes[ l.pos ], l.method_codes[ l.pos ], l.paymentcardtype_ids[ l.pos ], g.Module_Code, g.Method_Code, g.PaymentCardType_ID, l.reverse_exclusion ) }">
		<MvIF EXPR = "{ NOT l.have_existing }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.types[ l.pos ] EQ 'none' }">
			<MvIF EXPR = "{ l.have_existing }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Delete( l.existing_exclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00016', 'Payment method exclusion between module \'' $ l.existing_exclusion:excludermo $ '\' method \'' $ l.existing_exclusion:excluderme $ '\' payment card type id \'' $ l.existing_exclusion:excluderti $ '\' and module \'' $ l.existing_exclusion:excludedmo $ '\' method \'' $ l.existing_exclusion:excludedme $ '\' payment card type id \'' $ l.existing_exclusion:excludedti $ '\' deleted' ) }">
			</MvIF>

			<MvIF EXPR = "{ l.have_reverse }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Delete( l.reverse_exclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00017', 'Payment method exclusion between module \'' $ l.reverse_exclusion:excludermo $ '\' method \'' $ l.reverse_exclusion:excluderme $ '\' payment card type id \'' $ l.reverse_exclusion:excluderti $ '\' and module \'' $ l.reverse_exclusion:excludedmo $ '\' method \'' $ l.reverse_exclusion:excludedme $ '\' payment card type id \'' $ l.reverse_exclusion:excludedti $ '\' deleted' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.types[ l.pos ] EQ 'excluded' }">
			<MvIF EXPR = "{ NOT l.have_existing }">
				<MvIF EXPR = "{ g.PaymentCardType_ID }">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludermo"	VALUE = "">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excluderme"	VALUE = "">
				<MvELSE>
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludermo"	VALUE = "{ g.Module_Code }">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excluderme"	VALUE = "{ g.Method_Code }">
				</MvIF>

				<MvASSIGN NAME = "l.paymentmethodexclusion:excluderti"		VALUE = "{ g.PaymentCardType_ID }">

				<MvIF EXPR = "{ l.paymentcardtype_ids[ l.pos ] }">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludedmo"	VALUE = "">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludedme"	VALUE = "">
				<MvELSE>
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludedmo"	VALUE = "{ l.module_codes[ l.pos ] }">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludedme"	VALUE = "{ l.method_codes[ l.pos ] }">
				</MvIF>

				<MvASSIGN NAME = "l.paymentmethodexclusion:excludedti"		VALUE = "{ l.paymentcardtype_ids[ l.pos ] }">

				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Insert( l.paymentmethodexclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00018', 'Payment method exclusion between module \'' $ l.paymentmethodexclusion:excludermo $ '\' method \'' $ l.paymentmethodexclusion:excluderme $ '\' payment card type id \'' $ l.paymentmethodexclusion:excluderti $ '\' and module \'' $ l.paymentmethodexclusion:excludedmo $ '\' method \'' $ l.paymentmethodexclusion:excludedme $ '\' payment card type id \'' $ l.paymentmethodexclusion:excludedti $ '\' created' ) }">
			</MvIF>

			<MvIF EXPR = "{ l.have_reverse }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Delete( l.reverse_exclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00019', 'Payment method exclusion between module \'' $ l.reverse_exclusion:excludermo $ '\' method \'' $ l.reverse_exclusion:excluderme $ '\' payment card type id \'' $ l.reverse_exclusion:excluderti $ '\' and module \'' $ l.reverse_exclusion:excludedmo $ '\' method \'' $ l.reverse_exclusion:excludedme $ '\' payment card type id \'' $ l.reverse_exclusion:excludedti $ '\' deleted' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.types[ l.pos ] EQ 'excluder' }">
			<MvIF EXPR = "{ NOT l.have_reverse }">
				<MvIF EXPR = "{ l.paymentcardtype_ids[ l.pos ] }">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludermo"	VALUE = "">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excluderme"	VALUE = "">
				<MvELSE>
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludermo"	VALUE = "{ l.module_codes[ l.pos ] }">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excluderme"	VALUE = "{ l.method_codes[ l.pos ] }">
				</MvIF>

				<MvASSIGN NAME = "l.paymentmethodexclusion:excluderti"		VALUE = "{ l.paymentcardtype_ids[ l.pos ] }">

				<MvIF EXPR = "{ g.PaymentCardType_ID }">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludedmo"	VALUE = "">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludedme"	VALUE = "">
				<MvELSE>
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludedmo"	VALUE = "{ g.Module_Code }">
					<MvASSIGN NAME = "l.paymentmethodexclusion:excludedme"	VALUE = "{ g.Method_Code }">
				</MvIF>

				<MvASSIGN NAME = "l.paymentmethodexclusion:excludedti"		VALUE = "{ g.PaymentCardType_ID }">

				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Insert( l.paymentmethodexclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00020', 'Payment method exclusion between module \'' $ l.paymentmethodexclusion:excludermo $ '\' method \'' $ l.paymentmethodexclusion:excluderme $ '\' payment card type id \'' $ l.paymentmethodexclusion:excluderti $ '\' and module \'' $ l.paymentmethodexclusion:excludedmo $ '\' method \'' $ l.paymentmethodexclusion:excludedme $ '\' payment card type id \'' $ l.paymentmethodexclusion:excludedti $ '\' created' ) }">
			</MvIF>

			<MvIF EXPR = "{ l.have_existing }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodExclusion_Delete( l.existing_exclusion ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00021', 'Payment method exclusion between module \'' $ l.existing_exclusion:excludermo $ '\' method \'' $ l.existing_exclusion:excluderme $ '\' payment card type id \'' $ l.existing_exclusion:excluderti $ '\' and module \'' $ l.existing_exclusion:excludedmo $ '\' method \'' $ l.existing_exclusion:excludedme $ '\' payment card type id \'' $ l.existing_exclusion:excludedti $ '\' deleted' ) }">
			</MvIF>
		</MvIF>
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentMethodList_Load_Priority" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.method_count"			VALUE = "{ [ g.Module_Feature_PAY_UT ].PaymentMethodAndPaymentCardTypeList_Load_Enabled( l.methods ) }">
	<MvIF EXPR = "{ l.method_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
		<MvIF EXPR = "{ l.method:paymentcardtype:id }">
			<MvASSIGN NAME = "l.module_code"	VALUE = "">
			<MvASSIGN NAME = "l.method_code"	VALUE = "">
			<MvASSIGN NAME = "l.pctype_id"		VALUE = "{ l.method:paymentcardtype:id }">
		<MvELSE>
			<MvASSIGN NAME = "l.module_code"	VALUE = "{ l.method:module:code }">
			<MvASSIGN NAME = "l.method_code"	VALUE = "{ l.method:code }">
			<MvASSIGN NAME = "l.pctype_id"		VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Load_MethodOrDefault_Cached( l.module_code, l.method_code, l.pctype_id, l.paymentmethodrules ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.method:priority"	VALUE = "{ l.paymentmethodrules:priority }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Feature_PAY_UT ].PaymentMethodList_Runtime_Sort( l.methods ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.method" ARRAY = "l.methods" COUNT = "{ l.method_count }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
			"module":
			{
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.method:module ) }">
			},
			"paymentcardtype":
			{
				<MvEVAL EXPR = "{ JSON_PaymentCardType( l.method:paymentcardtype ) }">
			},
			"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:code ) }">",
			"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.method:name ) }">",
			"priority":		<MvEVAL EXPR = "{ l.method:priority }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentMethodList_Update_Priority" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Module_Codes, l.module_codes ) }">
	<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_JSON ].JSON_Array_String( g.Method_Codes, l.method_codes ) }">
	<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_JSON ].JSON_Array_Integer( g.PaymentCardType_IDs, l.pctype_ids ) }">
	<MvASSIGN NAME = "l.priority_count"	VALUE = "{ [ g.Module_JSON ].JSON_Array_integer( g.Priorities, l.priorities ) }">

	<MvFOR INDEX = "l.pos" FIRST = 1 LAST = "{ l.priority_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Load_MethodOrDefault_Cached( l.module_codes[ l.pos ], l.method_codes[ l.pos ], l.pctype_ids[ l.pos ], l.paymentmethodrules ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.paymentmethodrules:priority"	VALUE = "{ l.priorities[ l.pos ] }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Insert( l.paymentmethodrules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentMethodRules_Update( l.paymentmethodrules ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.pctype_ids[ l.pos ] }">	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00055', 'Payment method priority for payment card type \'' $ l.pctype_ids[ l.pos ] $ '\' updated' ) }">
		<MvELSE>									<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00022', 'Payment method priority for module \'' $ l.module_codes[ l.pos ] $ '\' method \'' $ l.method_codes[ l.pos ] $ '\' updated' ) }">
		</MvIF>
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentMethodAvailabilityGroupList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'AGRP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Module_Code"			VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Module_Code ) }">
	<MvASSIGN NAME = "g.Method_Code" 			VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Method_Code ) }">
	<MvASSIGN NAME = "g.PaymentCardType_ID" 	VALUE = "{ int( g.PaymentCardType_ID ) }">
	<MvASSIGN NAME = "g.Filter" 				VALUE = "{ trim( g.Filter ) }">
	<MvASSIGN NAME = "g.Sort"					VALUE = "{ trim( g.Sort ) }">
	<MvASSIGN NAME = "g.Offset"					VALUE = "{ int( g.Offset ) }">
	<MvASSIGN NAME = "g.Count"					VALUE = "{ int( g.Count ) }">
	<MvASSIGN NAME = "g.Assigned"				VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Assigned ) }">
	<MvASSIGN NAME = "g.Unassigned"				VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Unassigned ) }">
	<MvASSIGN NAME = "l.search_query"			VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,	'ag.*,
																				 agxpm.agrp_id AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'AvailabilityGroups', 'ag' ) }">

	<MvIF EXPR = "{ g.Assigned AND g.Unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'ag', g.Store_Table_Prefix $ 'AvailGroupXPaymentMethod', 'agxpm', 'agxpm.mod_code = ? AND agxpm.meth_code = ? AND agxpm.pctype_id = ? AND agxpm.agrp_id = ag.id', 'g.Module_Code, g.Method_Code, g.PaymentCardType_ID' ) }">
	<MvELSEIF EXPR = "{ g.Unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'ag', g.Store_Table_Prefix $ 'AvailGroupXPaymentMethod', 'agxpm', 'agxpm.mod_code = ? AND agxpm.meth_code = ? AND agxpm.pctype_id = ? AND agxpm.agrp_id = ag.id', 'g.Module_Code, g.Method_Code, g.PaymentCardType_ID' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'agxpm.mod_code IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ g.Assigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'AvailGroupXPaymentMethod', 'agxpm' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'agxpm.mod_code = ? AND agxpm.meth_code = ? AND agxpm.pctype_id = ? AND agxpm.agrp_id = ag.id', 'g.Module_Code, g.Method_Code, g.PaymentCardType_ID' ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvASSIGN NAME = "l.filter_columns" 	VALUE = "{ [ g.Module_Feature_AGR_JSON ].JSON_BaseAvailabilityGroupList_Filters() }">
	<MvASSIGN NAME = "l.orderby_columns" 	VALUE = "{ [ g.Module_Feature_AGR_JSON ].JSON_BaseAvailabilityGroupList_OrderBy() }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, g.Filter, l.filter_columns ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, g.Sort, l.orderby_columns, 'ag.name' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'AvailabilityGroups', l.search_sql, l.search_fields, g.Offset, g.Count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00004', g.MvOPENVIEW_Error ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.availabilitygroup_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( g.Offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT AvailabilityGroups.d.EOF ) AND ( ( g.Count EQ 0 ) OR ( l.availabilitygroup_count LT g.Count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_AGR_DB ].AvailabilityGroup_Read( l.availabilitygroup ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.availabilitygroup_count ) }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_AGR_JSON ].JSON_AvailabilityGroup( l.availabilitygroup ) }">
				,"assigned": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( NOT ISNULL AvailabilityGroups.d.assigned ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "AvailabilityGroups" ROWS = 1>
		</MvWHILE>
		]
	}

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "AvailabilityGroups">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvCOMMENT>
|
| PaymentCardTypes
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_PaymentCardType" PARAMETERS = "paymentcardtype var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":		<MvEVAL EXPR = "{ int( l.paymentcardtype:id ) }">,
	"type":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcardtype:type ) }">",
	"prefixes":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcardtype:prefixes ) }">",
	"lengths":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcardtype:lengths ) }">",
	"cvv":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.paymentcardtype:cvv ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentCardType_Load" PARAMETERS = "paymentcardtype var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.PaymentCardType_ID"		VALUE = "{ int( g.PaymentCardType_ID ) }">
	<MvASSIGN NAME = "g.PaymentCardType_Type"	VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.PaymentCardType_Type ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_ID( g.PaymentCardType_ID, l.paymentcardtype ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
		
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( g.PaymentCardType_Type, l.paymentcardtype ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-PAY-JSN-00023', 'Unable to load payment card type' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentCardTypeList_Load_Query" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.search_query"	VALUE = "">
	<MvASSIGN NAME = "l.filter"			VALUE = "">
	<MvASSIGN NAME = "l.sort"			VALUE = "">
	<MvASSIGN NAME = "l.offset"			VALUE = "">
	<MvASSIGN NAME = "l.count"			VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(	l.available_filters, 'type',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(	l.available_filters, 'prefixes',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(	l.available_filters, 'lengths',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(	l.available_filters, 'cvv',			'' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.method_count"				VALUE = "{ [ g.Module_Feature_PAY_UT ].PaymentMethodList_Load_Enabled( l.methods ) }">
	
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PaymentCardTypes', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id,type,prefixes,lengths,cvv', 'type' ) }">

	<MvASSIGN NAME = "l.search_sql" 				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'PaymentCardTypes', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00024', g.MvOPENVIEW_Error ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.paymentcardtype_count" VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT PaymentCardTypes.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.paymentcardtype_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PAY_DB ].PaymentCardType_Read( l.paymentcardtype ) }">

			<MvIF EXPR = "{ ISNULL l.paymentcardtype:mod_code OR ISNULL l.paymentcardtype:meth_code }">		<MvASSIGN NAME = "l.method_pos" VALUE = 0>
			<MvELSE>																						<MvASSIGN NAME = "l.method_pos" VALUE = "{ miva_array_search( l.methods, 1, l.search_method, 'l.paymentcardtype:mod_code EQ l.search_method:module:code AND l.paymentcardtype:meth_code EQ l.search_method:code' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.method_pos }">
				<MvASSIGN NAME = "l.method" 						VALUE = "">
			<MvELSE>
				<MvREFERENCEARRAY NAME = "l.method" 				VARIABLE = "l.methods">
					<MvDIMENSION INDEX = "{ l.method_pos }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.method:capabilities"			VALUE = "">

				<MvIF EXPR = "{ l.method:module:api_ver GE 9.06 }">
					<MvEVAL EXPR = "{ [ g.Module_Root $ l.method:module:module ].PaymentModule_Method_Capabilities( l.method:module, l.method:code, l.method:capabilities ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.method:capabilities:mivapay }">
				<MvASSIGN NAME = "l.paymentcardtype:method_name"	VALUE = "{ l.methods[ l.method_pos ]:name }">
				<MvASSIGN NAME = "l.paymentcardtype:module_name"	VALUE = "{ l.methods[ l.method_pos ]:module:name }">
			<MvELSE>
				<MvASSIGN NAME = "l.paymentcardtype:method_code"	VALUE = "">
				<MvASSIGN NAME = "l.paymentcardtype:method_name"	VALUE = "">
				<MvASSIGN NAME = "l.paymentcardtype:module_code"	VALUE = "">
				<MvASSIGN NAME = "l.paymentcardtype:module_name"	VALUE = "">
			</MvIF>
			
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.paymentcardtype_count ) }">
				<MvEVAL EXPR = "{ JSON_PaymentCardType( l.paymentcardtype ) }">,
				"mod_code": 	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcardtype:mod_code ) }">",
				"meth_code": 	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcardtype:meth_code ) }">",
				"module_name": 	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcardtype:module_name ) }">",
				"method_name": 	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcardtype:method_name ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "PaymentCardTypes" ROWS = 1>
		</MvWHILE>
		],
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "PaymentCardTypes">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentCardType_Insert" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.PaymentCardType_Type"			VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.PaymentCardType_Type ) }">
	<MvASSIGN NAME = "g.PaymentCardType_Prefixes"		VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.PaymentCardType_Prefixes ) }">
	<MvASSIGN NAME = "g.PaymentCardType_Lengths"		VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.PaymentCardType_Lengths ) }">
	<MvASSIGN NAME = "g.PaymentCardType_CVV"			VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.PaymentCardType_CVV ) }">
	<MvASSIGN NAME = "g.PaymentMethod"					VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.PaymentMethod ) }">

	<MvIF EXPR = "{ ISNULL g.PaymentCardType_Type }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'PaymentCardType_Type', 'Type name cannot be empty' ) }">
	<MvELSEIF EXPR = "{ [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( g.PaymentCardType_Type, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'PaymentCardType_Type', 'Type \'' $ g.PaymentCardType_Type $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL g.PaymentCardType_Prefixes }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_UT ].PaymentCardType_Validate_Prefixes( g.PaymentCardType_Prefixes ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'PaymentCardType_Prefixes', g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL g.PaymentCardType_Lengths }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_UT ].PaymentCardType_Validate_Lengths( g.PaymentCardType_Lengths ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'PaymentCardType_Lengths', 'Lengths must be numeric.  Multiple values must be separated by commas.' ) }">
		</MvIF>
	</MvIF>
	
	<MvASSIGN NAME = "l.paymentcardtype:type" 			VALUE = "{ g.PaymentCardType_Type }">
	<MvASSIGN NAME = "l.paymentcardtype:prefixes"		VALUE = "{ g.PaymentCardType_Prefixes }">
	<MvASSIGN NAME = "l.paymentcardtype:lengths"		VALUE = "{ g.PaymentCardType_Lengths }">
	<MvASSIGN NAME = "l.paymentcardtype:cvv"			VALUE = "{ g.PaymentCardType_CVV }">

	<MvASSIGN NAME = "l.module_code" 					VALUE = "{ substring( g.PaymentMethod, 1, ( ':' IN g.PaymentMethod ) - 1 ) }">
	<MvASSIGN NAME = "l.module_data" 					VALUE = "{ substring( g.PaymentMethod, ( ':' IN g.PaymentMethod ) + 1, len( g.PaymentMethod ) ) }">

	<MvIF EXPR = "{ NOT ISNULL l.module_code AND NOT ISNULL l.module_data }">
		<MvASSIGN NAME = "l.paymentcardtype:mod_code"	VALUE = "{ l.module_code }">
		<MvASSIGN NAME = "l.paymentcardtype:meth_code"	VALUE = "{ l.module_data }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Insert( l.paymentcardtype ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>
	
	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00025', 'Inserted payment card type \'' $ l.paymentcardtype:type $ '\'' ) }">

	<MvIF EXPR = "{ NOT ISNULL l.module_code AND NOT ISNULL l.module_data }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00026', 'Assigned payment method \'' $ l.module_code $ '\', \'' $ l.module_data $ '\' to payment card type \'' $ l.paymentcardtype:type $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentCardType_Update" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.PaymentCardType_Type"		VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.PaymentCardType_Type ) }">
	<MvASSIGN NAME = "g.PaymentCardType_Prefixes"	VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.PaymentCardType_Prefixes ) }">
	<MvASSIGN NAME = "g.PaymentCardType_Lengths"	VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.PaymentCardType_Lengths ) }">
	<MvASSIGN NAME = "g.PaymentCardType_CVV"		VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.PaymentCardType_CVV ) }">
	<MvASSIGN NAME = "g.PaymentMethod"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.PaymentMethod ) }">
	
	<MvIF EXPR = "{ NOT JSON_PaymentCardType_Load( l.paymentcardtype ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL g.PaymentCardType_Type }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'PaymentCardType_Type', 'Type name cannot be empty' ) }">
	<MvELSE>
		<MvIF EXPR = "{ toupper( l.paymentcardtype:type ) NE toupper( g.PaymentCardType_Type ) }">
			<MvIF EXPR = "{ [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type( g.PaymentCardType_Type, l.null ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'PaymentCardType_Type', 'Type \'' $ g.PaymentCardType_Type $ '\' already exists' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL g.PaymentCardType_Prefixes }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_UT ].PaymentCardType_Validate_Prefixes( g.PaymentCardType_Prefixes ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'PaymentCardType_Prefixes', g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL g.PaymentCardType_Lengths }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_UT ].PaymentCardType_Validate_Lengths( g.PaymentCardType_Lengths ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'PaymentCardType_Lengths', 'Lengths must be numeric.  Multiple values must be separated by commas.' ) }">
		</MvIF>
	</MvIF>
	
	<MvASSIGN NAME = "l.paymentcardtype:type" 		VALUE = "{ g.PaymentCardType_Type }">
	<MvASSIGN NAME = "l.paymentcardtype:prefixes"	VALUE = "{ g.PaymentCardType_Prefixes }">
	<MvASSIGN NAME = "l.paymentcardtype:lengths"	VALUE = "{ g.PaymentCardType_Lengths }">
	<MvASSIGN NAME = "l.paymentcardtype:cvv"		VALUE = "{ g.PaymentCardType_CVV }">
	<MvASSIGN NAME = "l.paymentcardtype:mod_code"	VALUE = "{ substring( g.PaymentMethod, 1, ( ':' IN g.PaymentMethod ) - 1 ) }">
	<MvASSIGN NAME = "l.paymentcardtype:meth_code"	VALUE = "{ substring( g.PaymentMethod, ( ':' IN g.PaymentMethod ) + 1, len( g.PaymentMethod ) ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Update( l.paymentcardtype ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00027', 'Updated payment card type \'' $ l.paymentcardtype:type $ '\'' ) }">

	<MvIF EXPR = "{ ISNULL l.paymentcardtype:mod_code OR ISNULL l.paymentcardtype:meth_code }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00028', 'Unassigned payment method from payment card type \'' $ l.paymentcardtype:type $ '\'' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00029', 'Assigned payment method \'' $ l.paymentcardtype:mod_code $ '\', \'' $ l.paymentcardtype:meth_code $ '\' to payment card type \'' $ l.paymentcardtype:type $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PaymentCardType_Delete" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ JSON_PaymentCardType_Load( l.paymentcardtype ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Delete( l.paymentcardtype:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">	
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00030', 'Deleted payment card type \'' $ l.paymentcardtype:type $ '\'' ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvCOMMENT>
|
| CustomerPaymentCards
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_CustomerPaymentCard" PARAMETERS = "paymentcard var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.paymentcard:id ) }">,
	"cust_id":		<MvEVAL EXPR = "{ int( l.paymentcard:cust_id ) }">,
	"fname":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:fname ) }">",
	"lname":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:lname ) }">",
	"exp_month":	<MvEVAL EXPR = "{ int( l.paymentcard:exp_month ) }">,
	"exp_year":		<MvEVAL EXPR = "{ int( l.paymentcard:exp_year ) }">,
	"lastfour":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:lastfour ) }">",
	"addr1":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:addr1 ) }">",
	"addr2":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:addr2 ) }">",
	"city":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:city ) }">",
	"state":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:state ) }">",
	"zip":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:zip ) }">",
	"cntry":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:cntry ) }">",
	"lastused":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:lastused ) }">",
	"token":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:token ) }">",
	"type_id":		<MvEVAL EXPR = "{ int( l.paymentcard:type_id ) }">,
	"refcount":		<MvEVAL EXPR = "{ int( l.paymentcard:refcount ) }">,
	"type":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:type ) }">",
	"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:mod_code ) }">",
	"meth_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:meth_code ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CustomerPaymentCard_Load" PARAMETERS = "paymentcard var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Customer_ID" 	VALUE = "{ int( g.Customer_ID ) }">
	<MvASSIGN NAME = "g.PaymentCard_ID"	VALUE = "{ int( g.PaymentCard_ID ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].CustomerPaymentCard_Load_ID_Cached( g.PaymentCard_ID, g.Customer_ID, l.paymentcard ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-PAY-JSN-00037', 'Unable to load payment card' ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CustomerAndPaymentCard_Loaders_Present" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Feature_CUS_JSON ].JSON_Customer_Loaders_Present() }">
		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'PaymentCard_ID' ) }">				<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'CustomerPaymentCard_ID' ) }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CustomerAndPaymentCard_Load" PARAMETERS = "customer var, paymentcard var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_JSON ].JSON_Customer_Load( l.customer ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'PaymentCard_ID', l.paymentcard_id ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].CustomerPaymentCard_Load_ID( l.paymentcard_id, l.customer:id, l.paymentcard ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-PAY-JSN-00064', 'Payment Card not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'CustomerPaymentCard_ID', l.paymentcard_id ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].CustomerPaymentCard_Load_ID( l.paymentcard_id, l.customer:id, l.paymentcard ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-PAY-JSN-00065', 'Payment Card not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-PAY-JSN-00066', 'Unable to load payment card: One of PaymentCard_ID or CustomerPaymentCard_ID must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CustomerPaymentCardList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CUST', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }"> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CPCD', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }"> </MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.customer"			VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cpc.fname',		'fname' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cpc.lname',		'lname' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NUMBER(	l.available_filters, 'cpc.exp_month',	'exp_month' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NUMBER(	l.available_filters, 'cpc.exp_year',	'exp_year' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cpc.lastfour',	'lastfour' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'cpc.lastused',	'lastused' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'pct.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cpc.addr1',		'addr1' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cpc.addr2',		'addr2' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cpc.city',		'city' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cpc.state',		'state' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cpc.zip',			'zip' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cpc.cntry',		'cntry' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'cpc.refcount',	'refcount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'pct.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'pct.meth_code',	'meth_code' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count )	OR
					NOT [ g.Module_Feature_CUS_JSON ].JSON_Customer_Load( l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'cpc.*,
																				 pct.type,
																				 pct.mod_code,
																				 pct.meth_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CustomerPaymentCards', 'cpc' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PaymentCardTypes', 'pct' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cpc.cust_id = ? AND pct.id = cpc.type_id', [ g.Module_Library_DB ].SQL_Query_Field( l.customer:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, l.sort,
																		'fname:cpc.fname, lname:cpc.lname, expires:cpc.exp_year;cpc.exp_month, lastfour:cpc.lastfour, lastused:cpc.lastused, type:pct.type, cpc.addr1, cpc.addr2, cpc.city, cpc.state, cpc.zip, cpc.cntry, cpc.refcount, mod_code:pct.mod_code, meth_code:pct.meth_code',
																		'cpc.id' ) }"> 

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'CustomerPaymentCards', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00038', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.customerpaymentcard_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT CustomerPaymentCards.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.customerpaymentcard_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_PAY_DB ].CustomerPaymentCard_Read( l.paymentcard ) }">
			<MvASSIGN NAME = "l.paymentcard:type" 		VALUE = "{ CustomerPaymentCards.d.type }">
			<MvASSIGN NAME = "l.paymentcard:mod_code" 	VALUE = "{ CustomerPaymentCards.d.mod_code }">
			<MvASSIGN NAME = "l.paymentcard:meth_code" 	VALUE = "{ CustomerPaymentCards.d.meth_code }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.customerpaymentcard_count ) }">
			<MvEVAL EXPR = "{ JSON_CustomerPaymentCard( l.paymentcard ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "CustomerPaymentCards" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "CustomerPaymentCards">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CustomerPaymentCard_Insert" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CUST', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CPCD', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Customer_ID" 				VALUE = "{ int( g.Customer_ID ) }">
	<MvASSIGN NAME = "g.ResponseXML" 				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.ResponseXML ) }">
	<MvASSIGN NAME = "g.ResponseSignature" 			VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.ResponseSignature ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].MivaPay_PaymentResponse_ValidateParseAndFlatten( g.ResponseXML, g.ResponseSignature, l.response_xml ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].MivaPay_Validate_Response( l.response_xml, 'paymentcard_add:' $ g.Customer_ID, g.Session_ID ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.paymentcard:cust_id"		VALUE = "{ g.Customer_ID }">
	<MvASSIGN NAME = "l.paymentcard:lastused"		VALUE = 0>
	<MvASSIGN NAME = "l.paymentcard:refcount"		VALUE = 0>

	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'FirstName' ) }">		<MvASSIGN NAME = "l.paymentcard:fname"		VALUE = "{ l.response_xml:FirstName }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'LastName' ) }">		<MvASSIGN NAME = "l.paymentcard:lname"		VALUE = "{ l.response_xml:LastName }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'ExpirationMonth' ) }">	<MvASSIGN NAME = "l.paymentcard:exp_month"	VALUE = "{ int( l.response_xml:ExpirationMonth ) }">	</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'ExpirationYear' ) }">	<MvASSIGN NAME = "l.paymentcard:exp_year"	VALUE = "{ int( l.response_xml:ExpirationYear ) }">		</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'CardLastFour' ) }">	<MvASSIGN NAME = "l.paymentcard:lastfour"	VALUE = "{ l.response_xml:CardLastFour }">				</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Address1' ) }">		<MvASSIGN NAME = "l.paymentcard:addr1"		VALUE = "{ l.response_xml:Address1 }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Address2' ) }">		<MvASSIGN NAME = "l.paymentcard:addr2"		VALUE = "{ l.response_xml:Address2 }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'City' ) }">			<MvASSIGN NAME = "l.paymentcard:city"		VALUE = "{ l.response_xml:City }">						</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'State' ) }">			<MvASSIGN NAME = "l.paymentcard:state"		VALUE = "{ l.response_xml:State }">						</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Zip' ) }">				<MvASSIGN NAME = "l.paymentcard:zip"		VALUE = "{ l.response_xml:Zip }">						</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Country' ) }">			<MvASSIGN NAME = "l.paymentcard:cntry"		VALUE = "{ l.response_xml:Country }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Token' ) }">			<MvASSIGN NAME = "l.paymentcard:token"		VALUE = "{ l.response_xml:Token }">						</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'CardType' ) }">
		<MvASSIGN NAME = "l.paymentcard:type"		VALUE = "{ l.response_xml:CardType }">

		<MvIF EXPR = "{ [ g.Feature_Filename_PAY_DB ].PaymentCardType_Load_Type( l.paymentcard:type, l.type ) }">
			<MvASSIGN NAME = "l.paymentcard:type_id"	VALUE = "{ l.type:id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_DB ].CustomerPaymentCard_Insert( l.paymentcard ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00039', 'Added customer payment card \'' $ l.paymentcard:id $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CustomerPaymentCard_Register" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CUST', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CPCD', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_JSON ].JSON_Customer_Load( l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.card_type"		VALUE = "">
	<MvASSIGN NAME = "l.card_number"	VALUE = "">
	<MvASSIGN NAME = "l.exp_month"		VALUE = "">
	<MvASSIGN NAME = "l.exp_year"		VALUE = "">

	<MvASSIGN NAME = "l.first_name"		VALUE = "{ l.customer:bill_fname }">
	<MvASSIGN NAME = "l.last_name"		VALUE = "{ l.customer:bill_lname }">
	<MvASSIGN NAME = "l.address1"		VALUE = "{ l.customer:bill_addr1 }">
	<MvASSIGN NAME = "l.address2"		VALUE = "{ l.customer:bill_addr2 }">
	<MvASSIGN NAME = "l.city"			VALUE = "{ l.customer:bill_city }">
	<MvASSIGN NAME = "l.state"			VALUE = "{ l.customer:bill_state }">
	<MvASSIGN NAME = "l.zip"			VALUE = "{ l.customer:bill_zip }">
	<MvASSIGN NAME = "l.country"		VALUE = "{ l.customer:bill_cntry }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'FirstName',		l.first_name )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'LastName',		l.last_name )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'CardType',		l.card_type )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'CardNumber',		l.card_number )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'ExpirationMonth',	l.exp_month )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'ExpirationYear',	l.exp_year )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'Address1',		l.address1 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'Address2',		l.address2 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'City',			l.city )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'State',			l.state )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'Zip',				l.zip )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'Country',			l.country ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].PaymentCardType_Load_Type_Cached( l.card_type, l.paymentcardtype ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00062', 'Invalid payment card type' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].CustomerPaymentCard_Register( l.customer:id, l.card_type, l.first_name, l.last_name, l.card_number, l.exp_month, l.exp_year, l.address1, l.address2, l.city, l.state, l.zip, l.country, l.paymentcard ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00063', 'Registered/added customer payment card \'' $ l.paymentcard:id $ '\' for customer id \'' $ l.customer:id $ '\'' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvASSIGN NAME = "l.paymentcard:type" 		VALUE = "{ l.paymentcardtype:type }">
		<MvASSIGN NAME = "l.paymentcard:mod_code" 	VALUE = "{ l.paymentcardtype:mod_code }">
		<MvASSIGN NAME = "l.paymentcard:meth_code" 	VALUE = "{ l.paymentcardtype:meth_code }">

		<MvEVAL EXPR = "{ JSON_CustomerPaymentCard( l.paymentcard ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CustomerPaymentCard_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CUST', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CPCD', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Customer_ID" 		VALUE = "{ int( g.Customer_ID ) }">
	<MvASSIGN NAME = "g.PaymentCard_ID" 	VALUE = "{ int( g.PaymentCard_ID ) }">
	<MvASSIGN NAME = "g.ResponseXML" 		VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.ResponseXML ) }">
	<MvASSIGN NAME = "g.ResponseSignature" 	VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.ResponseSignature ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_DB ].CustomerPaymentCard_Load_ID_Cached( g.PaymentCard_ID, g.Customer_ID, l.paymentcard ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].MivaPay_PaymentResponse_ValidateParseAndFlatten( g.ResponseXML, g.ResponseSignature, l.response_xml ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].MivaPay_Validate_Response( l.response_xml, 'paymentcard_edit:' $ l.paymentcard:id, g.Session_ID ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'FirstName' ) }">		<MvASSIGN NAME = "l.paymentcard:fname"		VALUE = "{ l.response_xml:FirstName }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'LastName' ) }">		<MvASSIGN NAME = "l.paymentcard:lname"		VALUE = "{ l.response_xml:LastName }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'ExpirationMonth' ) }">	<MvASSIGN NAME = "l.paymentcard:exp_month"	VALUE = "{ int( l.response_xml:ExpirationMonth ) }">	</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'ExpirationYear' ) }">	<MvASSIGN NAME = "l.paymentcard:exp_year"	VALUE = "{ int( l.response_xml:ExpirationYear ) }">		</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'CardLastFour' ) }">	<MvASSIGN NAME = "l.paymentcard:lastfour"	VALUE = "{ l.response_xml:CardLastFour }">				</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Address1' ) }">		<MvASSIGN NAME = "l.paymentcard:addr1"		VALUE = "{ l.response_xml:Address1 }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Address2' ) }">		<MvASSIGN NAME = "l.paymentcard:addr2"		VALUE = "{ l.response_xml:Address2 }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'City' ) }">			<MvASSIGN NAME = "l.paymentcard:city"		VALUE = "{ l.response_xml:City }">						</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'State' ) }">			<MvASSIGN NAME = "l.paymentcard:state"		VALUE = "{ l.response_xml:State }">						</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Zip' ) }">				<MvASSIGN NAME = "l.paymentcard:zip"		VALUE = "{ l.response_xml:Zip }">						</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Country' ) }">			<MvASSIGN NAME = "l.paymentcard:cntry"		VALUE = "{ l.response_xml:Country }">					</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'Token' ) }">			<MvASSIGN NAME = "l.paymentcard:token"		VALUE = "{ l.response_xml:Token }">						</MvIF>
	<MvIF EXPR = "{ miva_member_exists( l.response_xml, 'CardType' ) }">
		<MvASSIGN NAME = "l.paymentcard:type"			VALUE = "{ l.response_xml:CardType }">

		<MvIF EXPR = "{ [ g.Feature_Filename_PAY_DB ].PaymentCardType_Load_Type( l.paymentcard:type, l.type ) }">
			<MvASSIGN NAME = "l.paymentcard:type_id"	VALUE = "{ l.type:id }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_PAY_DB ].CustomerPaymentCard_Update( l.paymentcard ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00040', 'Customer payment card updated \'' $ l.paymentcard:id $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CustomerPaymentCardList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CUST', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CPCD', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Load_Cached( l.mivapay_settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_JSON ].JSON_Customer_Load( l.customer ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'PaymentCard_IDs', l.paymentcard_ids, l.paymentcard_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.paymentcard_id" ARRAY = "l.paymentcard_ids" COUNT = "{ l.paymentcard_id_count }">
		<MvASSIGN NAME = "l.processed"	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].CustomerPaymentCard_Load_ID( l.paymentcard_id, l.customer:id, l.paymentcard ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ l.paymentcard:refcount }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].Subscription_Active_CustomerPaymentCard_Count( l.customer:id, l.paymentcard:id, l.count ) }">
					<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.paymentcard:id, g.Error_Code, g.Error_Message, l.errors ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.count GT 0 }">
					<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.paymentcard:id, 'MER-PAY-JSN-00060', 'Payment card is associated with a subscription and cannot be removed.', l.errors ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].Subscription_Update_All_CustomerPaymentCard( l.customer:id, l.paymentcard:id, 0 ) }">
					<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.paymentcard:id, g.Error_Code, g.Error_Message, l.errors ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].CustomerPaymentCard_Delete( l.paymentcard:id ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.paymentcard:id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].MivaPay_PaymentCard_Delete_Token( l.paymentcard:token ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00043', 'Customer payment card ' $ l.paymentcard:id $ ' deleted' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CustomerPaymentCard_GenerateMivaPayRequest" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CUST', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'CPCD', 0, 1, 0, 0 ) AND
					NOT [ g.Module_Admin ].CanI( 'CPCD', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.PaymentCard_ID"		VALUE = "{ int( g.PaymentCard_ID ) }">
	<MvASSIGN NAME = "g.Customer_ID" 		VALUE = "{ int( g.Customer_ID ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_DB ].Customer_Load_ID( g.Customer_ID, l.customer ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00052', 'Customer not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Load_Cached( l.mivapay_settings ) OR
					NOT [ g.Module_Feature_URI_DB ].URISettings_Load( l.uri_settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.mivapay_settings:enabled" VALUE = "{ [ g.Module_Feature_PAY_UT ].MivaPay_Verify_Enabled_WithCardTypes_Cached( l.mivapay_settings, l.cardtypes, l.cardtype_count ) }">

	<MvIF EXPR = "{ NOT l.mivapay_settings:enabled }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00044', 'MivaPay has not been enabled/configured. Please enable MivaPay in settings and link at least one Payment Card Type to a payment method supporting MivaPay.' ) }">
	</MvIF>

	<MvIF EXPR = "{ g.PaymentCard_ID }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].CustomerPaymentCard_Load_ID_Cached( g.PaymentCard_ID, l.customer:id, l.paymentcard ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.module_code" VALUE = "{ l.paymentcard:mod_code }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code_Cached( l.module_code, l.module ) OR
						NOT [ g.Module_Library_DB ].StoreModule_Load_Cached( l.module:id, 'payment', l.storemodule ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00054', 'Module \'' $ l.module:name $ '\' has been deactivated' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.method_capabilities" VALUE = "">

		<MvIF EXPR = "{ l.module:api_ver GE 9.06 }">
			<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].PaymentModule_Method_Capabilities( l.module, l.paymentcard:meth_code, l.method_capabilities ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.method_capabilities:mivapay }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00045', 'MivaPay is not supported for the selected payment card. Please ensure that the linked payment method supports MivaPay.' ) }">
		</MvIF>
	</MvIF>

	<MvCAPTURE VARIABLE = "l.xml">
		<MIVA STANDARDOUTPUTLEVEL = "text, html, compresswhitespace"><PaymentFormRequest>
			<Merchant><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.mivapay_settings:merchant ) }"></Merchant>
			<Origin><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Module_Library_Utilities ].RequestOrigin() ) }"></Origin>

			<MvIF EXPR = "{ g.PaymentCard_ID }">
				<SessionData><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Module_Feature_PAY_UT ].MivaPay_SessionData( 'paymentcard_edit:' $ l.paymentcard:id, g.Session_ID ) ) }"></SessionData>
			<MvELSE>
				<SessionData><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Module_Feature_PAY_UT ].MivaPay_SessionData( 'paymentcard_add:' $ l.customer:id, g.Session_ID ) ) }"></SessionData>
			</MvIF>

			<MvCAPTURE VARIABLE = "l.css">
				[
					<MvEVAL EXPR = "{ [ g.Module_Feature_PAY_UT ].MivaPay_Default_CSS() }">,
					{
						"selector": ".form_row label",
						"properties":
						{
							"vertical-align": "top",
							"padding": "7px 5px 0 2px",
							"font-size": "11px",
							"width": "128px"
						}
					},
					{
						"selector": ".form_row select, .form_row input[type=\"text\"]",
						"properties":
						{
							"border-color": "#ccc"
						}
					}
				]
			</MvCAPTURE>

			<StyleSheet>
				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.css ) }">
			</StyleSheet>

			<Prompts>
		 		<CardType />
				<FirstName />
				<LastName />
				<CardNumber />
				<ExpirationDate />
				<Addresses />
				<Address1 />
				<Address2 />
				<City />
				<StateSelect />
				<State />
				<Zip />
				<Country default="{ encodeattribute( g.Store:country ) }" />
				<StoreToken default="yes" hidden="yes" />
			</Prompts>

			<PermittedCardTypes>
				<MvFOREACH ITERATOR = "l.cardtype" ARRAY = "l.cardtypes" COUNT = "{ l.cardtype_count }">
					<PermittedCardType><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.cardtype:type ) }"></PermittedCardType>
				</MvFOREACH>
			</PermittedCardTypes>

			<PermittedStates>
				<MvFOREACH ITERATOR = "l.state" ARRAY = "l.states" COUNT = "{ [ g.Module_Library_DB ].StateList_Load_All( l.states ) }">
					<PermittedState code="{ encodeattribute( l.state:code ) }"><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.state:name ) }"></PermittedState>
				</MvFOREACH>
			</PermittedStates>

			<PermittedCountries>
				<MvFOREACH ITERATOR = "l.country" ARRAY = "l.countries" COUNT = "{ [ g.Module_Library_DB ].StoreCountryList_Load_All( l.countries ) }">
					<PermittedCountry alpha="{ encodeattribute( l.country:alpha ) }"><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.country:name ) }"></PermittedCountry>
				</MvFOREACH>
			</PermittedCountries>

			<SavedAddresses>
				<MvFOREACH ITERATOR = "l.address" ARRAY = "l.addresses" COUNT = "{ [ g.Module_Feature_CUS_DB ].CustomerAddressList_Load_Customer( l.customer:id, l.addresses ) }">
					<MvIF EXPR = "{ len_var( l.address:state ) }">
						<MvIF EXPR = "{ [ g.Module_Library_DB ].State_Load_Code( l.address:state, l.state ) }">
							<MvASSIGN NAME = "l.state_code"			VALUE = "">
							<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "{ l.state:code }">
						<MvELSE>
							<MvASSIGN NAME = "l.state_code"			VALUE = "{ l.address:state }">
							<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "">
						</MvIF>
					</MvIF>

					<Address>
						<ID><MvEVAL EXPR = "{ int( l.address:id ) }"></ID>
						<Description><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.address:descrip ) }"></Description>
						<Address1><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.address:addr1 ) }"></Address1>
						<Address2><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.address:addr2 ) }"></Address2>
						<City><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.address:city ) }"></City>
						<State><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.state_code ) }"></State>
						<StateSelect><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.stateselect_code ) }"></StateSelect>
						<Zip><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.address:zip ) }"></Zip>
						<Country><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.address:cntry ) }"></Country>
						<Default><MvEVAL EXPR = "{ l.customer:bill_id EQ l.address:id }"></Default>
					</Address>
				</MvFOREACH>
			</SavedAddresses>

			<MvIF EXPR = "{ l.paymentcard:id }">
				<ExistingCard>
					<MvIF EXPR = "{ len_var( l.paymentcard:state ) }">
						<MvIF EXPR = "{ [ g.Module_Library_DB ].State_Load_Code( l.paymentcard:state, l.state ) }">
							<MvASSIGN NAME = "l.state_code"			VALUE = "">
							<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "{ l.state:code }">
						<MvELSE>
							<MvASSIGN NAME = "l.state_code"			VALUE = "{ l.paymentcard:state }">
							<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "">
						</MvIF>
					</MvIF>

					<CardType><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:type ) }"></CardType>
					<FirstName><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:fname ) }"></FirstName>
					<LastName><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:lname ) }"></LastName>
					<CardPlaceholder>Ending in <MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:lastfour ) }"></CardPlaceholder>
					<Token><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:token ) }"></Token>
					<ExpirationMonth><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:exp_month ) }"></ExpirationMonth>
					<ExpirationYear><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:exp_year ) }"></ExpirationYear>
					<Address1><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:addr1 ) }"></Address1>
					<Address2><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:addr2 ) }"></Address2>
					<City><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:city ) }"></City>
					<State><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.state_code ) }"></State>
					<StateSelect><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.stateselect_code ) }"></StateSelect>
					<Zip><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:zip ) }"></Zip>
					<Country><MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].CDATA_Encode( l.paymentcard:cntry ) }"></Country>
				</ExistingCard>
			</MvIF>
		</PaymentFormRequest><MIVA STANDARDOUTPUTLEVEL = "">
	</MvCAPTURE>

	<MvASSIGN NAME = "l.null" 				VALUE = "{ crypto_hmac_sha256( l.xml, crypto_base64_decode( [ g.Module_Library_Crypto ].Decrypt_Payment_Password( l.mivapay_settings:signkey ) ), 'binary', l.signature ) }">
	<MvASSIGN NAME = "l.request_xml" 		VALUE = "{ crypto_base64_encode( l.xml ) }">
	<MvASSIGN NAME = "l.request_signature"	VALUE = "{ crypto_base64_encode( l.signature ) }">

	<MIVA STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"request_xml":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.request_xml ) }">",
		"request_signature":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.request_signature ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OrderPaymentCard" PARAMETERS = "paymentcard var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.paymentcard:id ) }">,
	"fname":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:fname ) }">",
	"lname":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:lname ) }">",
	"exp_month":	<MvEVAL EXPR = "{ int( l.paymentcard:exp_month ) }">,
	"exp_year":		<MvEVAL EXPR = "{ int( l.paymentcard:exp_year ) }">,
	"lastfour":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:lastfour ) }">",
	"addr1":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:addr1 ) }">",
	"addr2":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:addr2 ) }">",
	"city":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:city ) }">",
	"state":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:state ) }">",
	"zip":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:zip ) }">",
	"cntry":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:cntry ) }">",
	"token":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:token ) }">",
	"type_id":		<MvEVAL EXPR = "{ int( l.paymentcard:type_id ) }">,
	"expires":		<MvEVAL EXPR = "{ int( l.paymentcard:expires ) }">,
	"refcount":		<MvEVAL EXPR = "{ int( l.paymentcard:refcount ) }">,
	"type":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:type ) }">",
	"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:mod_code ) }">",
	"meth_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.paymentcard:meth_code ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_AuthorizationBlacklistList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'ip',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'expires',	'' ) }">

	<MvIF EXPR = "{	NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,	'*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'AuthorizationBlacklists', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Feature_PAY_JSON, '', 'JSON_AuthorizationBlacklistList_Load_Query_Filter', l.null ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'ip,expires:expires;id', 'expires;id' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].AuthorizationBlacklist_Delete_All_Expired() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'AuthorizationBlacklists', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00056', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.authorizationblacklist_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT AuthorizationBlacklists.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.authorizationblacklist_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].AuthorizationBlacklist_Read( l.authorizationblacklist ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.authorizationblacklist_count ) }">
			"id":			<MvEVAL EXPR = "{ int( l.authorizationblacklist:id ) }">,
			"ip":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.authorizationblacklist:ip ) }">",
			"expires":		<MvEVAL EXPR = "{ int( l.authorizationblacklist:expires ) }">,
			"start_ip":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.authorizationblacklist:start_ip ) }">",
			"end_ip":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.authorizationblacklist:end_ip ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "AuthorizationBlacklists" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "AuthorizationBlacklists">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_AuthorizationBlacklistList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_operator, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ip' }">
		<MvEVAL EXPR = "{ [ g.Feature_Filename_PAY_UT ].AuthorizationBlacklist_Normalize_CIDR( l.filter_value, l.normalized_start_ip, l.normalized_end_ip ) }">
		
		<MvIF EXPR = "{ l.filter_operator EQ 'CO' }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '( start_ip >= ? AND start_ip <= ? ) OR ( end_ip >= ? AND end_ip <= ? )', 
																	   [ g.Module_Library_DB ].SQL_Query_Field( l.normalized_start_ip ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.normalized_end_ip ) $ ',' $ 
																	   [ g.Module_Library_DB ].SQL_Query_Field( l.normalized_start_ip ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.normalized_end_ip ) ) }">
		<MvELSEIF EXPR = "{ l.filter_operator EQ 'NC' }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'start_ip > ? OR end_ip < ?', [ g.Module_Library_DB ].SQL_Query_Field( l.normalized_end_ip ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.normalized_start_ip ) ) }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_AuthorizationBlacklist_Insert" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_AuthorizationBlacklist_Validate( l.authorizationblacklist ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].AuthorizationBlacklist_Insert( l.authorizationblacklist ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00057', 'Blacklisted IP \'' $ l.authorizationblacklist:ip $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_AuthorizationBlacklist_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.AuthorizationBlacklist_ID" VALUE = "{ int( g.AuthorizationBlacklist_ID ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].AuthorizationBlacklist_Load_ID( g.AuthorizationBlacklist_ID, l.authorizationblacklist ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-PAY-JSN-00058', 'Failed to load blacklisted IP' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_AuthorizationBlacklist_Validate( l.authorizationblacklist ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].AuthorizationBlacklist_Update( l.authorizationblacklist ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_AuthorizationBlacklistList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PMNT', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.authorizationblacklist_id" ARRAY = "l.authorizationblacklist_ids" COUNT = "{ [ g.Module_JSON ].JSON_Array_Integer( g.AuthorizationBlacklist_IDs, l.authorizationblacklist_ids ) }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].AuthorizationBlacklist_Delete_ID( l.authorizationblacklist_id ) }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.authorizationblacklist_id, g.Error_Code, g.Error_Message, l.errors ) }">
		<MvELSE>
			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-PAY-JSN-00059', 'Authorization blacklist ID \'' $ l.authorizationblacklist_id $ '\' deleted' ) }">
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_AuthorizationBlacklist_Validate" PARAMETERS = "authorizationblacklist var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{	NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'AuthorizationBlacklist_IP',			l.ip ) OR
					NOT [ g.Module_JSON ].JSON_Input_List( 'R', 'AuthorizationBlacklist_Expires_Mode',	l.expires_mode, 'never,in,on', 'never,in,on' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_CIDR( l.ip ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'AuthorizationBlacklist_IP', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.expires_mode EQ 'never' }">
		<MvASSIGN NAME = "l.expires" VALUE = 0>
	<MvELSEIF EXPR = "{ l.expires_mode EQ 'on' }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'AuthorizationBlacklist_Expires_On', l.expires_on ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ l.expires_on LT s.dyn_time_t }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( '', 'Please select a future expiration' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.expires" VALUE = "{ l.expires_on }">
	<MvELSEIF EXPR = "{ l.expires_mode EQ 'in' }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'AuthorizationBlacklist_Expires_In',		l.expires_in ) OR
						NOT [ g.Module_JSON ].JSON_Input_List(		'R', 'AuthorizationBlacklist_Expires_In_Unit',	l.expires_in_unit,	'm,h,d', 'm,h,d' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.expires_in ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'AuthorizationBlacklist_Expires_In', g.Validation_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Value_In_List( l.expires_in_unit, 'm,h,d' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( '', 'Please select a valid expiration unit' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.expires" VALUE = "{ s.dyn_time_t + [ g.Module_Feature_PAY_UT ].Payment_BuildSeconds( l.expires_in, l.expires_in_unit ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Feature_PAY_UT ].AuthorizationBlacklist_Normalize_CIDR( l.ip, l.start_ip, l.end_ip ) }">

	<MvASSIGN NAME = "l.authorizationblacklist:ip"			VALUE = "{ l.ip }">
	<MvASSIGN NAME = "l.authorizationblacklist:expires" 	VALUE = "{ l.expires }">
	<MvASSIGN NAME = "l.authorizationblacklist:start_ip"	VALUE = "{ l.start_ip }">
	<MvASSIGN NAME = "l.authorizationblacklist:end_ip" 		VALUE = "{ l.end_ip }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvINCLUDE FILE = "json/mivascript.mv">
