<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2023 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-GFT-JSN-
| Next Error Code: 9    
|
</MvCOMMENT>

<MvCOMMENT>
|
|	Gift Certificates
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_GiftCertificate" PARAMETERS = "giftcertificate var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.giftcertificate:id ) }">,
	"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.giftcertificate:code ) }">",
	"order_id":		<MvEVAL EXPR = "{ int( l.giftcertificate:order_id ) }">,
	"line_id":		<MvEVAL EXPR = "{ int( l.giftcertificate:line_id ) }">,
	"cust_id":		<MvEVAL EXPR = "{ int( l.giftcertificate:cust_id ) }">,
	"create_dt":	<MvEVAL EXPR = "{ int( l.giftcertificate:create_dt ) }">,
	"redeem_dt":	<MvEVAL EXPR = "{ int( l.giftcertificate:redeem_dt ) }">,
	"credit_id":	<MvEVAL EXPR = "{ int( l.giftcertificate:credit_id ) }">,
	"active":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.giftcertificate:active ) }">,
	"amount":		<MvEVAL EXPR = "{ l.giftcertificate:amount ROUND 2 }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GiftCertificateList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'GFTC', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'gc.code',			'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'gc.order_id',		'order_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'gc.create_dt',	'create_dt' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'gc.redeem_dt',	'redeem_dt' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters, 'gc.active',		'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NUMBER(	l.available_filters, 'gc.amount',		'amount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters, 'oi.code',			'product_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters, 'cust.login',		'cust_login' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters, 'cust.pw_email',	'cust_pw_email' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.search_query"	VALUE = "">
	
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'gc.*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'oi.code',		'product_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'cust.login',		'cust_login' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'cust.pw_email',	'cust_pw_email' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'GiftCertificates', 'gc' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'gc', g.Store_Table_Prefix $ 'Customers', 'cust', 'gc.cust_id = cust.id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'gc', g.Store_Table_Prefix $ 'OrderItems', 'oi', 'gc.order_id = oi.order_id AND gc.line_id = oi.line_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, l.sort, 'code:gc.code,order_id:gc.order_id,product_code:oi.code:null_char,cust_login:cust.login:null_char,cust_pw_email:cust.pw_email:null_char,
																								 create_dt:gc.create_dt,redeem_dt:gc.redeem_dt,active:gc.active,amount:gc.amount', 'gc.id' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'GiftCertificates', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-GFT-JSN-00001', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.giftcertificate_count" VALUE = 0>
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT GiftCertificates.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.giftcertificate_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.giftcertificate_count ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_GFT_DB ].GiftCertificate_Read( l.giftcertificate ) }">

			<MvEVAL EXPR = "{ JSON_GiftCertificate( l.giftcertificate ) }">

			, "product_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( GiftCertificates.d.product_code ) }">",
			"cust_pw_email":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( GiftCertificates.d.cust_pw_email ) }">",
			"cust_login":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( GiftCertificates.d.cust_login ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "GiftCertificates" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "GiftCertificates">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GiftCertificate_Load" PARAMETERS = "giftcertificate var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.GiftCertificate_ID"			VALUE = "{ int( g.GiftCertificate_ID ) }">
	<MvASSIGN NAME = "g.Code"						VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Code ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_GFT_DB ].GiftCertificate_Load_ID( g.GiftCertificate_ID, l.giftcertificate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_GFT_DB ].GiftCertificate_Load_Code( g.Code, l.giftcertificate ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-GFT-JSN-00002', 'Gift certificate not found' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GiftCertificate_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'GFTC', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.giftcertificate"		VALUE = "">
	<MvASSIGN NAME = "l.giftcertificate:active"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'R',			'Code',		l.giftcertificate:code )	OR
					NOT [ g.Module_JSON ].JSON_Input_Currency(	'R:positive',	'Amount',	l.giftcertificate:amount )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',			'Active',	l.giftcertificate:active ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_GFT_DB ].GiftCertificate_Load_Code( l.giftcertificate:code, l.existing_giftcertificate ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Code', 'A gift certificate with the code \'' $ l.existing_giftcertificate:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_GFT_DB ].GiftCertificate_Insert( l.giftcertificate ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.giftcertificates"			VALUE = "">
	<MvASSIGN NAME = "l.giftcertificates" INDEX = 1	VALUE = "{ l.giftcertificate }">

	<MvEVAL EXPR = "{ [ g.Module_Feature_GFT_UT ].Notify_GiftCertificates_Created( l.giftcertificates, 1 ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-GFT-JSN-00003', 'Gift certificate \'' $ l.giftcertificate:code $ '\' created' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"id":	<MvEVAL EXPR = "{ l.giftcertificate:id }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GiftCertificate_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'GFTC', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Amount"		VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Amount ) }">
	<MvASSIGN NAME = "g.Active"		VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Active ) }">

	<MvIF EXPR = "{ NOT JSON_GiftCertificate_Load( l.giftcertificate ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( g.Code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Code', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_GFT_DB ].GiftCertificate_Load_Code( g.Code, l.existing_giftcertificate ) AND l.giftcertificate:id NE l.existing_giftcertificate:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Code', 'A gift certificate with the code \'' $ l.existing_giftcertificate:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_FloatingPoint_Length_Positive_Required( g.Amount, 10, 2 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Amount', g.Validation_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.giftcertificate:code"	VALUE = "{ g.Code }">
	<MvASSIGN NAME = "l.giftcertificate:amount"	VALUE = "{ g.Amount }">
	<MvASSIGN NAME = "l.giftcertificate:active"	VALUE = "{ g.Active }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_GFT_DB ].GiftCertificate_Update( l.giftcertificate ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-GFT-JSN-00004', 'Gift certificate \'' $ l.giftcertificate:code $ '\' updated' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GiftCertificate_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'GFTC', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ JSON_GiftCertificate_Load( l.giftcertificate ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_GFT_DB ].GiftCertificate_Delete( l.giftcertificate ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-GFT-JSN-00005', 'Gift certificate \'' $ l.giftcertificate:code $ '\' deleted' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GiftCertificateList_Delete" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'GFTC', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.giftcert_id" ARRAY = "l.giftcert_ids" COUNT = "{ [ g.Module_JSON ].JSON_Array_Integer( g.GiftCertificate_IDs, l.giftcert_ids ) }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_GFT_DB ].GiftCertificate_Load_ID( l.giftcert_id, l.giftcert ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_GFT_DB ].GiftCertificate_Delete( l.giftcert ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.giftcert_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-GFT-JSN-00008', 'Gift certificate \'' $ l.giftcert:code $ '\' deleted' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GiftCertificate_Generate" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'GFTC', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.giftcertificate"		VALUE = "">
	<MvASSIGN NAME = "l.giftcertificate:active"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R:positive',	'Max_Quantity',	l.max_quantity )			OR
					NOT [ g.Module_JSON ].JSON_Input_Currency(	'R:positive',	'Amount',		l.giftcertificate:amount )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',			'Active',		l.giftcertificate:active ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.recycle_time_t"			VALUE = "{ s.dyn_time_t + 5 }">
	<MvASSIGN NAME = "l.giftcertificates"		VALUE = "">
	<MvASSIGN NAME = "l.giftcertificate_count"	VALUE = 0>

	<MvWHILE EXPR = "{ l.giftcertificate_count LT l.max_quantity }">
		<MvFOR INDEX = "l.attempt" COUNT = "{ 100 }">
			<MvASSIGN NAME = "l.giftcertificate:code" VALUE = "{ [ g.Module_Feature_GFT_UT ].GiftCertificate_Generate_Code() }">

			<MvIF EXPR = "{ [ g.Feature_Filename_GFT_DB ].GiftCertificate_Insert( l.giftcertificate ) }">
				<MvFORSTOP>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOR>

		<MvIF EXPR = "{ l.attempt GT 100 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-GFT-JSN-00006', 'Unable to generate unique gift certificate code after 100 attempts') }">
		</MvIF>

		<MvASSIGN NAME = "l.giftcertificate_count" VALUE = "{ miva_array_insert_var( l.giftcertificates, l.giftcertificate, -1 ) }">

		<MvIF EXPR = "{ ( s.dyn_time_t GE l.recycle_time_t ) OR ( ( s.dyn_time_remaining NE -1 ) AND ( s.dyn_time_remaining LE 3 ) ) }">
			<MvWHILESTOP>
		</MvIF>
	</MvWHILE>

	<MvEVAL EXPR = "{ [ g.Module_Feature_GFT_UT ].Notify_GiftCertificates_Created( l.giftcertificates, l.giftcertificate_count ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"quantity":	<MvEVAL EXPR = "{ int( l.giftcertificate_count ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GiftCertificate_GenerateUniqueCode" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'GFTC', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvFOR INDEX = "l.attempt" COUNT = "{ 100 }">
		<MvASSIGN NAME = "l.code" VALUE = "{ [ g.Module_Feature_GFT_UT ].GiftCertificate_Generate_Code() }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_GFT_DB ].GiftCertificate_Load_Code( l.code, l.null ) }">
			<MvFORSTOP>
		</MvIF>
	</MvFOR>

	<MvIF EXPR = "{ l.attempt GT 100 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-GFT-JSN-00007', 'Unable to generate unique gift certificate code after 100 attempts') }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.code ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GiftCertificate_Load_Code" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'GFTC', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_GiftCertificate_Load( l.giftcertificate ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_GiftCertificate( l.giftcertificate ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>
