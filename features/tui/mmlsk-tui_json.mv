<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2025 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-TUI-JSN-
| Next Error Code: 361
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Page_Load" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'Page_ID', l.page_id ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_ID( l.page_id, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00001', 'Page not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_Page', l.edit_page ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.edit_page, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00002', 'Page not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Page_Code', l.page_code ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00251', 'Page not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00252', 'Unable to load page: One of Page_ID, Edit_Page, or Page_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ JSON_Page_OnDemandColumns( l.page, l.null ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_OnDemandColumns" PARAMETERS = "page var, ondemandcolumns var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":				<MvEVAL EXPR = "{ int( l.page:id ) }">,
	"version_id":		<MvEVAL EXPR = "{ int( l.page:version_id ) }">,
	"admin":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.page:admin ) }">,
	"layout":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.page:layout ) }">,
	"fragment":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.page:fragment ) }">,
	"secure":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.page:secure ) }">,
	"public":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.page:public ) }">,
	"code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.page:code ) }">",
	"name":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.page:name ) }">",
	"title":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.page:title ) }">",
	"ui_id":			<MvEVAL EXPR = "{ int( l.page:ui_id ) }">,
	"templ_id":			<MvEVAL EXPR = "{ int( l.page:templ_id ) }">,
	"cache":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.page:cache ) }">"

	<MvIF EXPR = "{ l.ondemandcolumns:notes }">
		, "notes":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.page:notes ) }">"
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:source }">
		, "source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.page:source ) }">"
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		, "settings":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.page:settings ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:url }">
		<MvASSIGN NAME = "l.flags"		VALUE = "{ [ g.Module_Feature_URI_UT ].URL_Build_Flags( 'nosession' ) }">
		<MvASSIGN NAME = "l.page_url"	VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Page_URL( l.page, l.flags ) }">

		, "url":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.page_url ) }">"
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:uris }">
		<MvASSIGN NAME = "l.uri_count" VALUE = 0>

		, "uris":
		[
		<MvFOREACH ITERATOR = "l.uri" ARRAY = "l.uris" COUNT = "{ [ g.Module_Feature_URI_DB ].URIList_Load_Page_Code( l.page:code, l.uris ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.uri_count ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_URI_JSON ].JSON_URI( l.uri ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
		]
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageIndex_Load_ID" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Loaders_Present() }">
		<MvASSIGN NAME = "l.branch"	VALUE = "{ g.Store:branch }">
	<MvELSEIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.filter"		VALUE = "">
	<MvASSIGN NAME = "l.sort"		VALUE = "">
	<MvASSIGN NAME = "l.query"		VALUE = "">
	<MvASSIGN NAME = "l.record"		VALUE = "">

	<MvREFERENCE NAME = "l.page"	VARIABLE = "l.record:page">
	<MvREFERENCE NAME = "l.pv"		VARIABLE = "l.record:pv">

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].PageVersion_Copy_Page( l.page, l.pv ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'Pages', 'page' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'PageVersions', 'pv' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'pbv.branch_id	= ?					AND
																		 pbv.head		= 1					AND
																		 page.id		= pbv.page_id		AND
																		 pv.id			= pbv.version_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback_With_CustomFields( l.query, l.filter, 'pv.code,pv.name,pv.secure,pv.public,pv.title,pv.cache,pv.admin,pv.layout,pv.fragment', g.Module_Feature_TUI_JSON, 'JSON_PageList_Load_Query_Filter', '', 'JSON_Page_CustomFields_Query_Filter', l.null ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy_Callback_With_CustomFields( l.query, l.sort, 'pv.secure,pv.public,pv.code,pv.name,pv.title,pv.cache,pv.admin,pv.layout,pv.fragment', 'pv.name;page.id', g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query_OrderBy' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_SQL_Query_Index_With_CustomFields( l.query, l.record, l.index, l.page, g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query_Index' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"index": <MvEVAL EXPR = "{ int( l.index ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Loaders_Present() }">
		<MvASSIGN NAME = "l.branch"			VALUE = "{ g.Store:branch }">
	<MvELSEIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.code',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.name',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.secure',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.public',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.title',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.cache',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.admin',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.layout',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.fragment',	'' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'page.*,
																				 pv.id			AS version_id,
																				 pv.xref_id		AS version_xref_id,
																				 pv.user_id		AS version_user_id,
																				 pv.admin		AS version_admin,
																				 pv.layout		AS version_layout,
																				 pv.fragment	AS version_fragment,
																				 pv.secure		AS version_secure,
																				 pv.public		AS version_public,
																				 pv.code		AS version_code,
																				 pv.name		AS version_name,
																				 pv.title		AS version_title,
																				 pv.ui_id		AS version_ui_id,
																				 pv.cache		AS version_cache' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Pages', 'page' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageVersions', 'pv' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'pbv.branch_id	= ?					AND
																				pbv.head		= 1					AND
																				page.id			= pbv.page_id		AND
																				pv.id			= pbv.version_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Query_Callback_With_CustomFields( l.search_query, l.filter, g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback_With_CustomFields( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_PageList_Load_Query_Filter', '', 'JSON_Page_CustomFields_Query_Filter', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy_Callback_With_CustomFields( l.search_query, l.sort, 'pv.secure,pv.public,pv.code,pv.name,pv.title,pv.cache,pv.admin,pv.layout,pv.fragment', 'pv.name;page.id', g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query_OrderBy' ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:notes OR l.ondemandcolumns:source OR l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions',	'mtbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateVersions',			'mtv' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtbv.branch_id	= ?				AND
																					mtbv.templ_id	= page.templ_id	AND
																					mtbv.head		= 1				AND
																					mtv.id			= mtbv.version_id',
																					[ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:notes }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes		AS template_notes' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:source }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source		AS template_source' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.settings	AS template_settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Pages', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00021', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.page_count" VALUE = 0>
	
	<MvEVAL EXPR = "{ JSON_Page_CustomFields_Initialize( l.filter, l.customfield_state ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Pages.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.page_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Read( l.page ) }">

			<MvIF EXPR = "{ l.ondemandcolumns:notes }">		<MvASSIGN NAME = "l.page:notes"		VALUE = "{ Pages.d.template_notes }">								</MvIF>
			<MvIF EXPR = "{ l.ondemandcolumns:source }">	<MvASSIGN NAME = "l.page:source"	VALUE = "{ Pages.d.template_source }">								</MvIF>
			<MvIF EXPR = "{ l.ondemandcolumns:settings }">	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ miva_array_deserialize( Pages.d.template_settings ) }">	</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.page_count ) }">
				<MvEVAL EXPR = "{ JSON_Page_OnDemandColumns( l.page, l.ondemandcolumns ) }">
				<MvEVAL EXPR = "{ JSON_Page_CustomFields_With_Query( l.search_query, l.customfield_state, l.page, 'Pages' ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Pages" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Pages">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_CustomFields_With_Query" PARAMETERS = "query var, customfield_state var, page var, view" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.customfield_state:plan_count EQ 0 }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Data_Reference( l.query, 'Page_CustomFields', l.ref ) }">

	<MvASSIGN NAME = "l.last_module_id"			VALUE = "">

	,"CustomField_Values":
	{

	<MvFOREACH ITERATOR = "l.plan" ARRAY = "l.customfield_state:plan" COUNT = "{ l.customfield_state:plan_count }">
		<MvIF EXPR = "{ l.plan:module:id NE l.last_module_id }">
			<MvIF EXPR = "{ NOT ISNULL l.last_module_id }">
				},
			</MvIF>

			"<MvEVAL EXPR = "{ l.plan:module:encoded_code }">":
			{

			<MvASSIGN NAME = "l.last_module_id"		VALUE = "{ l.plan:module:id }">
			<MvASSIGN NAME = "l.output_field_count"	VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.plan:field_single }">
			<MvREFERENCEARRAY NAME = "l.queried" VARIABLE = "l.ref:data:queried">
				<MvMEMBER NAME = "{ l.plan:module:code }">
				<MvMEMBER NAME = "{ l.plan:field_code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.view AND l.queried AND l.plan:capabilities:query }">
				<MvASSIGN NAME = "l.value" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Page_Field_Query_Value( l.plan:module, l.view, l.plan:field_code ) }">
			<MvELSE>
				<MvIF EXPR = "{ l.plan:module:api_ver LT 10.08 }">	<MvASSIGN NAME = "l.value" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Page_Field_Value( l.plan:module, l.page:id, l.plan:field_code ) }">
				<MvELSE>											<MvASSIGN NAME = "l.value" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Page_Field_Value( l.plan:module, l.page:id, l.page:version_id, l.plan:field_code ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.output_field_count++ GT 0 }">
				,
			</MvIF>

			"<MvEVAL EXPR = "{ l.plan:encoded_field_code }">": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output_CustomField_Value( l.plan:base_type, l.plan:type_data, l.value ) }">
		<MvELSEIF EXPR = "{ l.plan:field_array }">
			<MvASSIGN NAME = "l.values" VALUE = "">

			<MvIF EXPR = "{ l.output_field_count++ GT 0 }">
				,
			</MvIF>

			"<MvEVAL EXPR = "{ l.plan:encoded_field_code }">":
			[

			<MvIF EXPR = "{ l.plan:module:api_ver LT 10.08 }">	<MvASSIGN NAME = "l.value_count" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Page_Field_Value_Array( l.plan:module, l.page:id, l.plan:field_code, l.values ) }">
			<MvELSE>											<MvASSIGN NAME = "l.value_count" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Page_Field_Value_Array( l.plan:module, l.page:id, l.page:version_id, l.plan:field_code, l.values ) }">	
			</MvIF>

			<MvFOREACH ITERATOR = "l.value" ARRAY = "l.values" INDEX = "l.pos" COUNT = "{ l.value_count }">
				<MvIF EXPR = "{ l.pos GT 1 }">
					,	
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output_CustomField_Value( l.plan:base_type, l.plan:type_data, l.value ) }">
			</MvFOREACH>
			]
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.last_module_id }">
		}
	</MvIF>

	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.filter_name EQ 'Page_Show' }">
		<MvIF EXPR = "{ l.filter_value EQ 'All' }">
		<MvELSEIF EXPR = "{ l.filter_value EQ 'PageBuilder' }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_DISTINCT( l.query ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_DISTINCT_With_COUNT_SELECT( l.query, 'page.id' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'PageXItem',			'pgb_pxi' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ItemBranchVersions',	'pgb_ibv' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'Items',				'pgb_i' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ItemVersions',		'pgb_iv' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, 'Modules',									'pgb_m' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, 'ModuleXFeature',							'pgb_mxf' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'pgb_pxi.page_id	= pv.page_id			AND
																				 pgb_pxi.xref_id	= pv.xref_id			AND
																				 pgb_ibv.branch_id	= pbv.branch_id			AND
																				 pgb_ibv.item_id	= pgb_pxi.item_id		AND
																				 pgb_ibv.head		= 1						AND
																				 pgb_i.id			= pgb_ibv.item_id		AND
																				 pgb_iv.id			= pgb_ibv.version_id	AND
																				 ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'pgb_m.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'pgb_iv.mod_code' ) $ ' AND
																				 pgb_mxf.module_id	= pgb_m.id				AND
																				 pgb_mxf.feature	= \'pagebuilder_seq\'', '' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_CustomFields_Query" PARAMETERS = "query var, module var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.module EQ '*' }">
		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'fields_page', l.modules ) }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Library_DB ].Module_Load_Features( l.module ) }">

			<MvIF EXPR = "{ NOT JSON_Page_CustomFields_Query( l.query, l.module, '*' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_page }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.code EQ '*' }">
		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Page_Fields( l.module, l.module_fields ) }">
			<MvIF EXPR = "{ NOT JSON_Page_CustomFields_Query( l.query, l.module, l.module_field:code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Data_Reference( l.query, 'Page_CustomFields', l.ref ) }">

	<MvIF EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Total_Join_Count( l.query ) GE 50 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Capabilities( l.module, l.code, l.capabilities ) }">

	<MvIF EXPR = "{ NOT l.capabilities:query }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGNARRAY NAME = "l.ref:data:queried"	VALUE = 1>
		<MvMEMBER NAME = "{ l.module:code }">
		<MvMEMBER NAME = "{ l.code }">
	</MvASSIGNARRAY>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Query( l.module, l.query, l.code ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_CustomFields_Query_Filter" PARAMETERS = "query var, field_count var, module var, filter_name, filter_operator, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_page }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Capabilities( l.module, l.filter_name, l.capabilities ) }">

	<MvIF EXPR = "{ NOT l.capabilities:search }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Query_Search( l.module, l.query, l.filter_name, l.filter_operator, l.filter_value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_CustomFields_Query_OrderBy" PARAMETERS = "query var, direction, module var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_page }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Capabilities( l.module, l.code, l.capabilities ) }">

	<MvIF EXPR = "{ NOT l.capabilities:orderby }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Query_OrderBy( l.module, l.query, l.code, l.direction ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_CustomFields_Query_Index" PARAMETERS = "loaded_record var, module var, page var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.module:feature_hash:fields_page }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.module:api_ver LT 10.08 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Query_OrderBy_LoadIndexRecord( l.module, l.loaded_record, l.page:id, l.code ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Query_OrderBy_LoadIndexRecord( l.module, l.loaded_record, l.page:id, l.page:version_id, l.code ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageVersionList_Joins" PARAMETERS = "filter var, sort var, ondemandcolumns var, joins var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sort_field"	VALUE = "{ [ g.Module_Library_DB ].SQL_Sort_Field( l.sort, l.null ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:source }">																			<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.ondemandcolumns:notes }">																			<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.ondemandcolumns:settings }">																		<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'source_user_id' }">																<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'source_user_name' }">																<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( g.Filter, 'source_user_id',	l.null ) }">	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( g.Filter, 'source_user_name',	l.null ) }">	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSE>																												<MvASSIGN NAME = "l.joins:source" VALUE = 0>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageVersionList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data:ondemandcolumns" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchPageVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.changeset"			VALUE = "">

	<MvASSIGN NAME = "l.changeset_id"		VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'pv.id',			'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'pv.page_id',		'page_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'pv.user_id',		'user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'pvu.name',		'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'pv.code',			'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'pv.name',			'name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'pv.secure',		'secure' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'pv.public',		'public' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'pv.title',		'title' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'pv.cache',		'cache' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'pv.admin',		'admin' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'pv.layout',		'layout' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'pv.fragment',		'fragment' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'page.templ_id',	'templ_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'mtv.user_id',		'source_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mtvu.name',		'source_user_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.changeset_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00306', 'Changeset not found' ) }">
		<MvELSEIF EXPR = "{ l.changeset:branch_id NE l.branch:id }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00307', 'Changeset does not exist on the specified branch' ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'pv.id			AS id,
																				 pv.page_id		AS page_id,
																				 page.templ_id	AS templ_id,
																				 pv.xref_id		AS xref_id,
																				 pv.user_id		AS user_id,
																				 pv.admin		AS admin,
																				 pv.layout		AS layout,
																				 pv.fragment	AS fragment,
																				 pv.secure		AS secure,
																				 pv.public		AS public,
																				 pv.code		AS code,
																				 pv.name		AS name,
																				 pv.title		AS title,
																				 pv.ui_id		AS ui_id,
																				 pv.cache		AS cache' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Pages', 'page' ) }">

	<MvIF EXPR = "{ ISNULL l.changeset }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageBranchVersions',	'pbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageVersions',		'pv' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'pbv.branch_id	= ?					AND
																					pbv.head		= 1					AND
																					pv.id			= pbv.version_id	AND
																					page.id			= pbv.page_id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions',	'mtbv',	'mtbv.branch_id = ? AND mtbv.templ_id = page.templ_id AND mtbv.head = 1',	[ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'ManagedTemplateVersions',			'mtv',	'mtv.id = mtbv.version_id',													'' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageVersions',	'pv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageChanges',		'pc' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'pc.branch_id	= ?			AND
																					pc.page_id		= page.id	AND
																					pc.set_id		=
																					(
																						SELECT
																							MAX( pc2.set_id )
																						FROM
																						' $ g.Store_Table_Prefix $ 'PageChanges pc2
																						WHERE
																							pc2.branch_id	= ?			AND
																							pc2.page_id		= page.id	AND
																							pc2.set_id		<= ?
																					)',
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'pv.id = pc.new_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'ManagedTemplates', 'mt', 'mt.id = page.templ_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'ManagedTemplateChanges', 'mtc', 'mtc.branch_id	= ?				AND
																																						   mtc.templ_id		= page.templ_id	AND
																																						   mtc.set_id		=
																																						   (
																																								SELECT
																																									MAX( mtc2.set_id )
																																								FROM
																																									' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc2
																																								WHERE
																																									mtc2.branch_id	= ?				AND
																																									mtc2.templ_id	= page.templ_id	AND
																																									mtc2.set_id		<= ?
																																							)',
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mtc.new_id', 0 ), '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'pv', 'Users', 'pvu', 'pvu.id = pv.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'pvu.name', 'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'pvu.icon', 'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Query_Callback_With_CustomFields( l.search_query, l.filter, g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback_With_CustomFields( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_PageVersionList_Load_Query_Filter', '', 'JSON_Page_CustomFields_Query_Filter', l.data ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy_Callback_With_CustomFields( l.search_query, l.sort, 'pv.id,pv.page_id,pv.user_id,user_name:pvu.name:null_char,pv.admin,pv.layout,pv.fragment,pv.secure,pv.public,pv.code,pv.name,pv.title,pv.cache,page.templ_id,source_user_id:mtv.user_id:null_integer,source_user_name:mtvu.name:null_char', 'pv.code', g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query_OrderBy' ) }">

	<MvEVAL EXPR = "{ JSON_PageVersionList_Joins( l.filter, l.sort, l.data:ondemandcolumns, l.joins ) }">

	<MvIF EXPR = "{ l.joins:source }">
		<MvIF EXPR = "{ l.data:ondemandcolumns:source }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source AS template_source' ) }">

			<MvIF EXPR = "{ NOT ISNULL l.changeset }">
				<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'pv', g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv', 'pbv.branch_id = ? AND pbv.page_id = pv.page_id AND pbv.version_id = pv.id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.data:ondemandcolumns:notes }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes AS template_notes' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.data:ondemandcolumns:settings }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.settings AS template_settings' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query, 'mtv.user_id', 'source_user_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', 'Users', 'mtvu', 'mtvu.id = mtv.user_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.name', 'source_user_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.icon', 'source_user_icon' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'PageVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00308', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count" VALUE = 0>

	<MvEVAL EXPR = "{ JSON_Page_CustomFields_Initialize( l.filter, l.customfield_state ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT PageVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvASSIGN NAME = "l.page"				VALUE = "">
			<MvASSIGN NAME = "l.page:id"			VALUE = "{ PageVersions.d.page_id }">
			<MvASSIGN NAME = "l.page:version_id"	VALUE = "{ PageVersions.d.id }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":				<MvEVAL EXPR = "{ int( PageVersions.d.id ) }">,
				"page_id":			<MvEVAL EXPR = "{ int( PageVersions.d.page_id ) }">,
				"user_id":			<MvEVAL EXPR = "{ int( PageVersions.d.user_id ) }">,
				"user_name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.user_name ) }">",
				"user_icon":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.user_icon ) }">",
				"admin":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( PageVersions.d.admin ) }">,
				"layout":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( PageVersions.d.layout ) }">,
				"fragment":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( PageVersions.d.fragment ) }">,
				"secure":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( PageVersions.d.secure ) }">,
				"public":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( PageVersions.d.public ) }">,
				"code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.code ) }">",
				"name":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.name ) }">",
				"title":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.title ) }">",
				"ui_id":			<MvEVAL EXPR = "{ int( PageVersions.d.ui_id ) }">,
				"templ_id":			<MvEVAL EXPR = "{ int( PageVersions.d.templ_id ) }">,
				"cache":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.cache ) }">"

				<MvIF EXPR = "{ l.data:ondemandcolumns:notes }">
					, "notes": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.template_notes ) }">"
				</MvIF>

				<MvIF EXPR = "{ l.data:ondemandcolumns:source }">
					, "source":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( PageVersions.d.template_source ) }">",
					"source_user_id":	<MvEVAL EXPR = "{ int( PageVersions.d.source_user_id ) }">,
					"source_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.source_user_name ) }">",
					"source_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.source_user_icon ) }">"
				</MvIF>

				<MvIF EXPR = "{ l.data:ondemandcolumns:settings }">
					, "settings": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( PageVersions.d.template_settings ) }">"
				</MvIF>

				<MvEVAL EXPR = "{ JSON_Page_CustomFields_With_Query( l.search_query, l.customfield_state, l.page, 'PageVersions' ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "PageVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "PageVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_Delete" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ JSON_Branch_Loaders_Present() }">
		<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Set_Working_Branch( l.branch ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>
	
	<MvIF EXPR = "{ l.page:ui_id NE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00005', 'Page \'' $ l.page:code $ '\' is required by the User Interface and cannot be removed' ) }">									
	<MvELSE>
		<MvASSIGN NAME = "l.deleted" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Delete_Page( l.page ) }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00006', 'Page \'' $ l.page:code $ '\' deleted' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_Insert" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ JSON_Branch_Loaders_Present() }">
		<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Set_Working_Branch( l.branch ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.page"			VALUE = "">
	<MvASSIGN NAME = "l.page:admin"		VALUE = 0>
	<MvASSIGN NAME = "l.page:layout"	VALUE = 0>
	<MvASSIGN NAME = "l.page:fragment"	VALUE = 0>
	<MvASSIGN NAME = "l.page:ui_id"		VALUE = 0>
	<MvASSIGN NAME = "l.page:secure"	VALUE = 0>
	<MvASSIGN NAME = "l.page:public"	VALUE = 0>
	<MvASSIGN NAME = "l.page:cache"		VALUE = "anonempty">
	<MvASSIGN NAME = "l.uri"			VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'R',		'Page_Code',		l.page:code )													OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'R:100',	'Page_Name',		l.page:name )													OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o:254',	'Page_Title',		l.page:title )													OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o',		'Page_Template',	l.template )													OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Page_Layout',		l.page:layout )													OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Page_Fragment',	l.page:fragment )												OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Page_Secure',		l.page:secure )													OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Page_Public',		l.page:public )													OR
					NOT [ g.Module_JSON ].JSON_Input_List(		'O',		'Page_Cache',		l.page:cache, 'never,provisional,anonempty,allempty,always',
																											  'never,provisional,anonempty,allempty,always' )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O',		'Changeset_Notes',	l.changeset_notes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.page:code, l.existing_page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Page_Code', 'A page with the code \'' $ l.existing_page:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.page:layout + l.page:fragment ) GT 1 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00343', 'The page must be only one of layout or fragment' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Page_URI' ) }">
		<MvIF EXPR = "{ l.page:admin OR l.page:layout OR l.page:fragment }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00300', 'Cannot set custom URI for admin, layout, or fragment pages' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.uri"			VALUE = "">
		<MvASSIGN NAME = "l.uri:uri"		VALUE = "">
		<MvASSIGN NAME = "l.uri:store_id"	VALUE = "{ g.Store:id }">
		<MvASSIGN NAME = "l.uri:canonical"	VALUE = 1>
		<MvASSIGN NAME = "l.uri:status"		VALUE = 200>

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Page_URI', l.uri:uri ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Page_URI', g.Validation_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Page_Template', g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Validate custom fields
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.customfields"		VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"	VALUE = 0>
	<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Raw( 'CustomField_Values', l.customfield_values ) }">

	<MvFOREACH ITERATOR = "l.module_code" ARRAY = "l.module_codelist" COUNT = "{ miva_struct_members( l.customfield_values, l.module_codelist ) }">
		<MvASSIGN NAME = "l.module_code"	VALUE = "{ [ g.Module_JSON ].JSON_Decode( l.module_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00289', 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00290', 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:fields_page }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00291', 'Module \'' $ l.module:code $ '\' does not provide feature \'fields_page\'' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.module:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00292', 'Module \'' $ l.module:code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.fields"	VALUE = "">
		<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Fields( l.module, l.fields ) }">

		<MvREFERENCEARRAY NAME = "l.customfield_members" VARIABLE = "l.customfield_values">
			<MvMEMBER NAME = "{ l.module:code }">
		</MvREFERENCEARRAY>

		<MvFOREACH ITERATOR = "l.customfield_code" ARRAY = "l.customfield_codelist" COUNT = "{ miva_struct_members( l.customfield_members, l.customfield_codelist ) }">
			<MvASSIGN NAME = "l.customfield_code"		VALUE = "{ [ g.Module_JSON ].JSON_Decode( l.customfield_code ) }">

			<MvIF EXPR = "{ NOT miva_array_search( l.fields, 1, l.field, 'l.field:code EQ l.customfield_code' ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CustomField_Values:' $ l.module:code $ ':' $ l.customfield_code, 'Failed to load custom field \'' $ l.customfield_code $ '\'' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.customfield"			VALUE = "">
			<MvASSIGN NAME = "l.customfield:module"		VALUE = "{ l.module }">
			<MvASSIGN NAME = "l.customfield:code"		VALUE = "{ l.customfield_code }">
			<MvASSIGN NAME = "l.customfield:type"		VALUE = "{ l.field:type }">

			<MvREFERENCEARRAY NAME = "l.customfield_value" VARIABLE = "l.customfield_values">
				<MvMEMBER NAME = "{ l.module:code }">
				<MvMEMBER NAME = "{ l.customfield_code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ l.customfield:type NE 'multitext' }">	<MvASSIGN NAME = "l.customfield:value"			VALUE = "{ [ g.Module_JSON ].JSON_Decode( l.customfield_value ) }">
			<MvELSE>												<MvASSIGN NAME = "l.customfield:value_count"	VALUE = "{ [ g.Module_JSON ].JSON_Array_String( l.customfield_value, l.customfield:values ) }">
			</MvIF>

			<MvASSIGN NAME = "l.customfield_count"		VALUE = "{ miva_array_insert_var( l.customfields, l.customfield, -1 ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvASSIGN NAME = "l.page_type" VALUE = "{ JSON_Page_Type( l.page ) }">

	<MvIF EXPR = "{ ISNULL l.changeset_notes }">
		<MvASSIGN NAME = "l.changeset_notes" VALUE = "{ l.page_type $ ' ' $ l.page:code $ ' created' }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( l.changeset_notes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_Page_LowLevel( l.page, l.template ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.page:admin AND NOT l.page:layout AND NOT l.page:fragment }">
		<MvIF EXPR = "{ NOT ISNULL l.uri }">
			<MvASSIGN NAME = "l.uri:page_code" VALUE = "{ l.page:code }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Insert( l.uri ) }">
				<MvIF EXPR = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Page_URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00297', 'Canonical URI \'' $ l.uri:uri $ '\' inserted for page \'' $ l.page:code $ '\'' ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Page_New( l.page ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00273', l.page_type $ ' \'' $ l.page:code $ '\' created' ) }">

	<MvCOMMENT>
	|
	| Insert Custom Fields
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.customfields" COUNT = "{ l.customfield_count }">
		<MvIF EXPR = "{ l.customfield:type NE 'multitext' }">
			<MvIF EXPR = "{ l.customfield:module:api_ver LT 10.08 }">	<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Root $ l.customfield:module:module ].Module_Page_Set_Field( l.customfield:module, l.page:id, l.customfield:code, l.customfield:value ) }">
			<MvELSE>													<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Root $ l.customfield:module:module ].Module_Page_Set_Field( l.customfield:module, l.page:id, l.page:version_id, l.customfield:code, l.customfield:value ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ l.customfield:module:api_ver LT 10.08 }">	<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Root $ l.customfield:module:module ].Module_Page_Set_Field_Array( l.customfield:module, l.page:id, l.customfield:code, l.customfield:values, l.customfield:value_count ) }">
			<MvELSE>													<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Root $ l.customfield:module:module ].Module_Page_Set_Field_Array( l.customfield:module, l.page:id, l.page:version_id, l.customfield:code, l.customfield:values, l.customfield:value_count ) }">		
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT l.result }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CustomField_Values:' $ l.customfield:module:code $ ':' $ l.customfield:code, g.Error_Code $ ': ' $ g.Error_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_Page( l.page ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_Update" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ JSON_Branch_Loaders_Present() }">
		<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Set_Working_Branch( l.branch ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_page"	VALUE = "{ l.page }">
	<MvASSIGN NAME = "l.uri_action"		VALUE = "{ ternary( NOT l.page:admin AND NOT l.page:layout AND NOT l.page:fragment, 'generate', '' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'O',		'Page_Code',	l.page:code )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O:100',	'Page_Name',	l.page:name )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o:254',	'Page_Title',	l.page:title )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Page_Secure',	l.page:secure )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Page_Public',	l.page:public )	OR
					NOT [ g.Module_JSON ].JSON_Input_List(		'O',		'Page_Cache',	l.page:cache, 'never,provisional,anonempty,allempty,always',
																										  'never,provisional,anonempty,allempty,always' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.page:ui_id AND ( l.original_page:code NE l.page:code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Page_Code', 'Page \'' $ l.page:code $ '\' is required by the User Interface and the code cannot be updated' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.page:code, l.existing_page ) AND
					l.existing_page:id NE l.page:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Page_Code', 'A page with the code \'' $ l.existing_page:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Page_URI' ) }">
		<MvIF EXPR = "{ l.page:admin OR l.page:layout OR l.page:fragment }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00301', 'Cannot set custom URI for admin, layout, or fragment pages' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_URI_DB ].URI_Load_Page_Canonical( l.page:code, l.uri ) }">
			<MvASSIGN NAME = "l.uri_action"		VALUE = "update">
		<MvELSE>
			<MvASSIGN NAME = "l.uri_action"		VALUE = "insert">

			<MvASSIGN NAME = "l.uri"			VALUE = "">
			<MvASSIGN NAME = "l.uri:uri" 		VALUE = "">
			<MvASSIGN NAME = "l.uri:store_id" 	VALUE = "{ g.Store:id }">
			<MvASSIGN NAME = "l.uri:page_code"	VALUE = "{ l.page:code }">
			<MvASSIGN NAME = "l.uri:canonical" 	VALUE = 1>
			<MvASSIGN NAME = "l.uri:status" 	VALUE = 200>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Page_URI', l.uri:uri ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_URI( l.uri:uri ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Page_URI', g.Validation_Message ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Validate custom fields
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.customfields"		VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"	VALUE = 0>
	<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Raw( 'CustomField_Values', l.customfield_values ) }">

	<MvFOREACH ITERATOR = "l.module_code" ARRAY = "l.module_codelist" COUNT = "{ miva_struct_members( l.customfield_values, l.module_codelist ) }">
		<MvASSIGN NAME = "l.module_code"	VALUE = "{ [ g.Module_JSON ].JSON_Decode( l.module_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00293', 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00294', 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:fields_page }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00295', 'Module \'' $ l.module:code $ '\' does not provide feature \'fields_page\'' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.module:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00296', 'Module \'' $ l.module:code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.fields"	VALUE = "">
		<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Fields( l.module, l.fields ) }">

		<MvREFERENCEARRAY NAME = "l.customfield_members" VARIABLE = "l.customfield_values">
			<MvMEMBER NAME = "{ l.module:code }">
		</MvREFERENCEARRAY>

		<MvFOREACH ITERATOR = "l.customfield_code" ARRAY = "l.customfield_codelist" COUNT = "{ miva_struct_members( l.customfield_members, l.customfield_codelist ) }">
			<MvASSIGN NAME = "l.customfield_code"		VALUE = "{ [ g.Module_JSON ].JSON_Decode( l.customfield_code ) }">

			<MvIF EXPR = "{ NOT miva_array_search( l.fields, 1, l.field, 'l.field:code EQ l.customfield_code' ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CustomField_Values:' $ l.module:code $ ':' $ l.customfield_code, 'Failed to load custom field \'' $ l.customfield_code $ '\'' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.customfield"			VALUE = "">
			<MvASSIGN NAME = "l.customfield:module"		VALUE = "{ l.module }">
			<MvASSIGN NAME = "l.customfield:code"		VALUE = "{ l.customfield_code }">
			<MvASSIGN NAME = "l.customfield:type"		VALUE = "{ l.field:type }">

			<MvREFERENCEARRAY NAME = "l.customfield_value" VARIABLE = "l.customfield_values">
				<MvMEMBER NAME = "{ l.module:code }">
				<MvMEMBER NAME = "{ l.customfield_code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ l.customfield:type NE 'multitext' }">	<MvASSIGN NAME = "l.customfield:value"			VALUE = "{ [ g.Module_JSON ].JSON_Decode( l.customfield_value ) }">
			<MvELSE>												<MvASSIGN NAME = "l.customfield:value_count"	VALUE = "{ [ g.Module_JSON ].JSON_Array_String( l.customfield_value, l.customfield:values ) }">
			</MvIF>

			<MvASSIGN NAME = "l.customfield_count"		VALUE = "{ miva_array_insert_var( l.customfields, l.customfield, -1 ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Update( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Handle_Page_Code_Change( l.original_page, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.uri_action EQ 'insert' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Insert( l.uri ) }">
			<MvIF EXPR = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Page_URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00298', 'Canonical URI \'' $ l.uri:uri $ '\' inserted for page \'' $ l.page:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ l.uri_action EQ 'update' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URI_Update( l.uri ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Page_URI', 'URI \'' $ l.uri:uri $ '\' is already in use' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00299', 'Canonical URI \'' $ l.uri:uri $ '\' updated for page \'' $ l.page:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ l.uri_action EQ 'generate' }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Page_Update( l.page ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Update Custom Fields
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.customfields" COUNT = "{ l.customfield_count }">
		<MvIF EXPR = "{ l.customfield:type NE 'multitext' }">
			<MvIF EXPR = "{ l.customfield:module:api_ver LT 10.08 }">	<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Root $ l.customfield:module:module ].Module_Page_Set_Field( l.customfield:module, l.page:id, l.customfield:code, l.customfield:value ) }">
			<MvELSE>													<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Root $ l.customfield:module:module ].Module_Page_Set_Field( l.customfield:module, l.page:id, l.page:version_id, l.customfield:code, l.customfield:value ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ l.customfield:module:api_ver LT 10.08 }">	<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Root $ l.customfield:module:module ].Module_Page_Set_Field_Array( l.customfield:module, l.page:id, l.customfield:code, l.customfield:values, l.customfield:value_count ) }">
			<MvELSE>													<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Root $ l.customfield:module:module ].Module_Page_Set_Field_Array( l.customfield:module, l.page:id, l.page:version_id, l.customfield:code, l.customfield:values, l.customfield:value_count ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT l.result }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CustomField_Values:' $ l.customfield:module:code $ ':' $ l.customfield:code, g.Error_Code $ ': ' $ g.Error_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageCustomFieldList_Load" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.customfields" COUNT = "{ [ g.Module_Library_Utilities ].PageCustomFieldList_Load( l.customfields ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.count ) }">
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.customfield:code ) }">",
				"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.customfield:name ) }">",
				"type":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.customfield:type ) }">",
				"public":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.customfield:public ) }">,
				"readonly":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.customfield:readonly ) }">,
				"searchable":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.customfield:capabilities:search ) }">,
				"sortable":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.customfield:capabilities:orderby ) }">,
				"module":
				{
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.customfield:module ) }">
				}
				<MvIF EXPR = "{ l.customfield:type EQ 'choice' }">
					,
					"choices":
					[
						<MvFOREACH ITERATOR = "l.choice" ARRAY = "l.customfield:choices" INDEX = "l.choice_pos">
							<MvIF EXPR = "{ l.choice_pos GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.choice ) }">"
						</MvFOREACH>
					]
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_CustomFields_Initialize" PARAMETERS = "filterlist var, customfield_state var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Structify( l.filterlist ) }">

	<MvASSIGN NAME = "l.customfield_state"				VALUE = "">

	<MvCOMMENT>
	|
	|	Build Custom Field Displayable data from MMBatchList "ondemandcolumns"
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.filter" ARRAY = "l.filterlist">
		<MvIF EXPR = "{ l.filter:name EQ 'ondemandcolumns' }">
			<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter:value">
				<MvIF EXPR = "{ ( 'CustomField_Values:' IN l.column_code ) NE 1 }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.module_code"		VALUE = "{ gettoken( l.column_code, ':', 2 ) }">
				<MvASSIGN NAME = "l.customfield_code"	VALUE = "{ gettoken( l.column_code, ':', 3 ) }">

				<MvREFERENCEARRAY NAME = "l.displayable" VARIABLE = "l.displayable_custom_fields">
					<MvMEMBER NAME = "{ l.module_code }">
					<MvMEMBER NAME = "{ l.customfield_code }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.displayable" VALUE = 1>
			</MvFOREACH>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Load the custom field modules and their associated fields
	|
	| :fields[n]
	|	:code	- custom field code
	|	:type	- custom field type
	|	:module	- reference to cached modules
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.fields"			VALUE = "">
	<MvASSIGN NAME = "l.field_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" INDEX = "l.pos"  COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'fields_page', l.modules ) }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Library_DB ].Module_Load_Features( l.module ) }">
		<MvASSIGN NAME = "l.module_fields"	VALUE = "">

		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Page_Fields( l.module, l.module_fields ) }">
			<MvREFERENCEARRAY NAME = "l.field" VARIABLE = "l.fields">
				<MvDIMENSION INDEX = "{ ++l.field_count }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.field:code"				VALUE = "{ l.module_field:code }">
			<MvASSIGN NAME = "l.field:type"				VALUE = "{ l.module_field:type }">
			<MvREFERENCEARRAY NAME = "l.field:module"	VARIABLE = "l.modules">
				<MvDIMENSION INDEX = "{ l.pos }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.displayable" VARIABLE = "l.displayable_custom_fields">
				<MvMEMBER NAME = "{ l.field:module:code }">
				<MvMEMBER NAME = "{ l.field:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT l.displayable }">
				<MvIF EXPR = "{ miva_member_exists( l.displayable_custom_fields, '*' ) }">
					<MvASSIGN NAME = "l.displayable"		VALUE = 1>
				<MvELSE>
					<MvREFERENCEARRAY NAME = "l.module_displayable" VARIABLE = "l.displayable_custom_fields">
						<MvMEMBER NAME = "{ l.field:module:code }">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ miva_member_exists( l.module_displayable, '*' ) }">
						<MvASSIGN NAME = "l.displayable"	VALUE = 1>
					</MvIF>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.displayable }">
				<MvEVAL EXPR = "{ [ g.Module_Root $ l.field:module:module ].Module_Page_Field_Capabilities( l.field:module, l.field:code, l.field:capabilities ) }">
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_CustomFields_Initialize( l.fields, l.field_count, l.displayable_custom_fields, '', l.customfield_state ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SourcePage_Load" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'Source_Page_ID', l.page_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_ID( l.page_id, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00274', 'Source page not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Source_Edit_Page', l.edit_page ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.edit_page, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00275', 'Source page not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Source_Page_Code', l.page_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00276', 'Source page not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00277', 'Unable to load source page: One of Source_Page_ID, Source_Edit_Page, or Source_Page_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_DestinationPage_Load" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'Dest_Page_ID', l.page_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_ID( l.page_id, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00278', 'Destination page not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Dest_Edit_Page', l.edit_page ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.edit_page, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00279', 'Destination page not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Dest_Page_Code', l.page_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.page_code, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00280', 'Destination page not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00281', 'Unable to load destination page: One of Dest_Page_ID, Dest_Edit_Page, or Dest_Page_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_DestinationBranch_Load" PARAMETERS = "branch var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'Dest_Branch_ID', l.branch_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.branch_id, l.branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00321', 'Destination branch not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Dest_Edit_Branch', l.branch_name ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_Name( l.branch_name, l.branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00322', 'Destination branch not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Dest_Branch_Name', l.branch_name ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_Name( l.branch_name, l.branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00323', 'Destination branch not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00324', 'Unable to load destination branch: One of Dest_Branch_ID, Dest_Edit_Branch, or Dest_Branch_Name must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_Copy" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.create"		VALUE = 0>
	<MvASSIGN NAME = "l.can_add"	VALUE = "{ [ g.Module_Admin ].CanI( 'PAGE', 0, 1, 0, 0 ) }">
	<MvASSIGN NAME = "l.can_modify"	VALUE = "{ [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'O', 'Dest_Page_Create', l.create ) }">
		<MvIF EXPR = "{ NOT l.can_add AND NOT l.can_modify }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.create }">
		<MvIF EXPR = "{ NOT l.can_add }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT l.can_modify }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CopyPageRules_Loaders_Present() }">
		<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].CopyPageRules_Default( l.copypagerules ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT JSON_CopyPageRules_Load( l.copypagerules ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_SourcePage_Load( l.source_page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'O', 'Changeset_Notes', l.changeset_notes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.create }">
		<MvIF EXPR = "{ NOT JSON_DestinationPage_Load( l.dest_page ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.dest_page"			VALUE = "">
		<MvASSIGN NAME = "l.dest_page:admin"	VALUE = 0>
		<MvASSIGN NAME = "l.dest_page:layout"	VALUE = 0>
		<MvASSIGN NAME = "l.dest_page:fragment"	VALUE = 0>
		<MvASSIGN NAME = "l.dest_page:ui_id"	VALUE = 0>
		<MvASSIGN NAME = "l.dest_page:secure"	VALUE = 0>
		<MvASSIGN NAME = "l.dest_page:public"	VALUE = 0>
		<MvASSIGN NAME = "l.dest_page:cache"	VALUE = "anonempty">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'R',		'Dest_Page_Code',		l.dest_page:code )		OR
						NOT [ g.Module_JSON ].JSON_Input_Text(		'R:100',	'Dest_Page_Name',		l.dest_page:name )		OR
						NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Dest_Page_Layout',		l.dest_page:layout )	OR
						NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Dest_Page_Fragment',	l.dest_page:fragment ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.dest_page:code, l.existing_page ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Dest_Page_Code', 'Page with the code \'' $ l.existing_page:code $ '\' already exists' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.source_page:fragment AND l.dest_page:fragment  }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00345', 'Copying a page / layout to a fragment is not supported' ) }">
		<MvELSEIF EXPR = "{ l.source_page:fragment AND NOT l.dest_page:fragment }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00346', 'Copying a fragment to a page / layout is not supported' ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.page_type" VALUE = "{ JSON_Page_Type( l.dest_page ) }">

	<MvIF EXPR = "{ ISNULL l.changeset_notes }">
		<MvASSIGN NAME = "l.changeset_notes" VALUE = "{ l.page_type $ ' \'' $ l.dest_page:code $ '\' ' $ ternary( l.create, 'created', 'copied' ) $ ' from ' $ l.page_type $ ' \'' $ l.source_page:code $ '\'' }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( l.changeset_notes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.create }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_Page_LowLevel( l.dest_page, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00288', 'Page \'' $ l.dest_page:code $ '\' created' ) }">
	<MvELSE>
		<MvCOMMENT>
		|
		| Create a new version to serve as the "destination" version for all copied data.
		| This is necessary to ensure that data copied (rather than linked) from source
		| to destination is added to the new destination page version, rather than
		| overwriting the existing page version data.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.branch_id"					VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID() }">
		<MvASSIGN NAME = "l.dest_pageversion"			VALUE = "">
		<MvASSIGN NAME = "l.previous_version_id"		VALUE = "{ l.dest_page:version_id }">

		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_DB ].PageVersion_Copy_Page( l.dest_page, l.dest_pageversion ) }">

		<MvASSIGN NAME = "l.dest_pageversion:user_id"	VALUE = "{ int( g.User:id ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].PageVersion_Insert( l.dest_pageversion ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Copy_PageVersion( l.dest_pageversion, l.dest_page ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].PageBranchVersion_Insert( l.branch_id, l.dest_page:id, l.dest_pageversion:id ) OR
						NOT [ g.Module_Feature_TUI_DB ].PageBranchVersion_Update_Head( l.branch_id, l.dest_page:id, l.dest_pageversion:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Fields_Propagate( l.dest_page:id, l.previous_version_id, l.dest_pageversion:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Record_PageVersion( l.dest_page:id, l.previous_version_id, l.dest_pageversion:id, l.dest_pageversion:xref_id, l.changeset_notes ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_UT ].CopyPage_Copy( l.copypagerules, g.Store:branch, l.source_page, g.Store:branch, l.dest_page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.dest_page:layout AND NOT l.dest_page:fragment }">
		<MvIF EXPR = "{ l.create }">	<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Feature_URI_UT ].URI_Generate_Page_New( l.dest_page ) }">
		<MvELSE>						<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Feature_URI_UT ].URI_Generate_Page_Update( l.dest_page ) }">
		</MvIF>
		
		<MvIF EXPR = "{ NOT l.result }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00285', l.page_type $ ' \'' $ l.dest_page:code $ '\' ' $ ternary( l.create, 'created', 'copied' ) $ ' from ' $ l.page_type $ ' \'' $ l.source_page:code $ '\' using page copy rule \'' $ l.copypagerules:name $ '\'' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_Page( l.dest_page ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_Copy_Branch" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.source_branch" VALUE = "{ g.Store:branch }">

	<MvIF EXPR = "{ NOT JSON_DestinationBranch_Load( l.dest_branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.dest_branch:id EQ l.source_branch:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00325', 'Destination branch cannot be the same as the source branch' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CopyPageRules_Loaders_Present() }">
		<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].CopyPageRules_Default( l.copypagerules ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT JSON_CopyPageRules_Load( l.copypagerules ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_SourcePage_Load( l.source_page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'O', 'Changeset_Notes', l.changeset_notes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvCOMMENT>
	|
	| Switch "working" branch to destination branch for the remainder of this function
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Set_Working_Branch( l.dest_branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.create"					VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.source_page:code, l.dest_page ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.create"				VALUE = 1>

		<MvASSIGN NAME = "l.dest_page"			VALUE = "">
		<MvASSIGN NAME = "l.dest_page:code"		VALUE = "{ l.source_page:code }">
		<MvASSIGN NAME = "l.dest_page:name"		VALUE = "{ l.source_page:name }">
		<MvASSIGN NAME = "l.dest_page:admin"	VALUE = "{ l.source_page:admin }">
		<MvASSIGN NAME = "l.dest_page:layout"	VALUE = "{ l.source_page:layout }">
		<MvASSIGN NAME = "l.dest_page:fragment"	VALUE = "{ l.source_page:fragment }">
		<MvASSIGN NAME = "l.dest_page:ui_id"	VALUE = "{ l.source_page:ui_id }">
		<MvASSIGN NAME = "l.dest_page:secure"	VALUE = 0>
		<MvASSIGN NAME = "l.dest_page:public"	VALUE = 0>
		<MvASSIGN NAME = "l.dest_page:cache"	VALUE = "anonempty">
	</MvIF>

	<MvASSIGN NAME = "l.source_page_type"		VALUE = "{ JSON_Page_Type( l.source_page ) }">
	<MvASSIGN NAME = "l.dest_page_type"			VALUE = "{ JSON_Page_Type( l.dest_page ) }">

	<MvIF EXPR = "{ ISNULL l.changeset_notes }">
		<MvASSIGN NAME = "l.changeset_notes"	VALUE = "{ l.dest_page_type $ ' \'' $ l.dest_page:code $ '\' ' $ ternary( l.create, 'created', 'copied' ) $ ' from ' $ l.source_page_type $ ' \'' $ l.source_page:code $ '\'' }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( l.changeset_notes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.create }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_Page_LowLevel( l.dest_page, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00326', 'Page \'' $ l.dest_page:code $ '\' created on branch \'' $ l.dest_branch:name $ '\'' ) }">
	<MvELSE>
		<MvCOMMENT>
		|
		| Create a new version to serve as the "destination" version for all copied data.
		| This is necessary to ensure that data copied (rather than linked) from source
		| to destination is added to the new destination page version, rather than
		| overwriting the existing page version data.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.dest_pageversion"			VALUE = "">
		<MvASSIGN NAME = "l.previous_version_id"		VALUE = "{ l.dest_page:version_id }">

		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_DB ].PageVersion_Copy_Page( l.dest_page, l.dest_pageversion ) }">

		<MvASSIGN NAME = "l.dest_pageversion:user_id"	VALUE = "{ int( g.User:id ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].PageVersion_Insert( l.dest_pageversion ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Copy_PageVersion( l.dest_pageversion, l.dest_page ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].PageBranchVersion_Insert( l.dest_branch:id, l.dest_page:id, l.dest_pageversion:id ) OR
						NOT [ g.Module_Feature_TUI_DB ].PageBranchVersion_Update_Head( l.dest_branch:id, l.dest_page:id, l.dest_pageversion:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Fields_Propagate( l.dest_page:id, l.previous_version_id, l.dest_pageversion:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Record_PageVersion( l.dest_page:id, l.previous_version_id, l.dest_pageversion:id, l.dest_pageversion:xref_id, l.changeset_notes ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_UT ].CopyPage_Copy( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.dest_page:layout AND NOT l.dest_page:fragment }">
		<MvIF EXPR = "{ l.create }">	<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Feature_URI_UT ].URI_Generate_Page_New( l.dest_page ) }">
		<MvELSE>						<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_Feature_URI_UT ].URI_Generate_Page_Update( l.dest_page ) }">
		</MvIF>
		
		<MvIF EXPR = "{ NOT l.result }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00327', l.dest_page_type $ ' \'' $ l.dest_page:code $ '\' ' $ ternary( l.create, 'created', 'copied' ) $ ' from ' $ l.source_page_type $ ' \'' $ l.source_page:code $ '\' using page copy rule \'' $ l.copypagerules:name $ '\' from branch \'' $ l.source_branch:name $ '\' to branch \'' $ l.dest_branch:name $ '\'' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_Page( l.dest_page ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ItemPageList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Loaders_Present() }">
		<MvASSIGN NAME = "l.branch"			VALUE = "{ g.Store:branch }">
	<MvELSEIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Item_Load( l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"			VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"			VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.name',		'name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.secure',	'secure' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.public',	'public' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.title',		'title' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.cache',		'cache' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.admin',		'admin' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.layout',	'layout' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.fragment',	'fragment' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'page.*,
																				 pv.id			AS version_id,
																				 pv.xref_id		AS version_xref_id,
																				 pv.user_id		AS version_user_id,
																				 pv.admin		AS version_admin,
																				 pv.layout		AS version_layout,
																				 pv.fragment	AS version_fragment,
																				 pv.secure		AS version_secure,
																				 pv.public		AS version_public,
																				 pv.code		AS version_code,
																				 pv.name		AS version_name,
																				 pv.title		AS version_title,
																				 pv.ui_id		AS version_ui_id,
																				 pv.cache		AS version_cache,
																				 pxi.page_id	AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Pages', 'page' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageVersions', 'pv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'pv', g.Store_Table_Prefix $ 'PageXItem', 'pxi', 'pxi.page_id = pv.page_id AND pxi.xref_id = pv.xref_id AND pxi.item_id = ?', [ g.Module_Library_DB ].SQL_Query_Field( l.item:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'pbv.branch_id	= ?				AND
																				pbv.head		= 1				AND
																				page.id			= pbv.page_id	AND
																				pv.id			= pbv.version_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
	
	<MvIF EXPR = "{ l.unassigned AND ( NOT l.assigned ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'pxi.page_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned AND ( NOT l.unassigned ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'pxi.page_id IS NOT NULL', '' ) }">
	<MvELSEIF EXPR = "{ ( NOT l.assigned ) AND l.unassigned }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Query_Callback_With_CustomFields( l.search_query, l.filter, g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback_With_CustomFields( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_PageList_Load_Query_Filter', '', 'JSON_Page_CustomFields_Query_Filter', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy_Callback_With_CustomFields( l.search_query, l.sort, 'code:pv.code,name:pv.name,secure:pv.secure,public:pv.public,title:pv.title,cache:pv.cache,admin:pv.admin,layout:pv.layout,fragment:pv.fragment', 'pv.code', g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query_OrderBy' ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:notes OR l.ondemandcolumns:source OR l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions',	'mtbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateVersions',			'mtv' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtbv.branch_id	= ?				AND
																					mtbv.templ_id	= page.templ_id	AND
																					mtbv.head		= 1				AND
																					mtv.id			= mtbv.version_id',
																					[ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:notes }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes		AS template_notes' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:source }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source		AS template_source' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.settings	AS template_settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Pages', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00022', g.MvOPENVIEW_Error ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.page_count" VALUE = 0>
	
	<MvEVAL EXPR = "{ JSON_Page_CustomFields_Initialize( l.filter, l.customfield_state ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data": 
		[
		<MvWHILE EXPR = "{ ( NOT Pages.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.page_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Read( l.page ) }">

			<MvIF EXPR = "{ l.ondemandcolumns:notes }">		<MvASSIGN NAME = "l.page:notes"		VALUE = "{ Pages.d.template_notes }">								</MvIF>
			<MvIF EXPR = "{ l.ondemandcolumns:source }">	<MvASSIGN NAME = "l.page:source"	VALUE = "{ Pages.d.template_source }">								</MvIF>
			<MvIF EXPR = "{ l.ondemandcolumns:settings }">	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ miva_array_deserialize( Pages.d.template_settings ) }">	</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.page_count ) }">
				"assigned": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( Pages.d.assigned ) }">,
				<MvEVAL EXPR = "{ JSON_Page_OnDemandColumns( l.page, l.ondemandcolumns ) }">
				<MvEVAL EXPR = "{ JSON_Page_CustomFields_With_Query( l.search_query, l.customfield_state, l.page, 'Pages' ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Pages" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Pages">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageItemList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'Item_Show' }">
		<MvIF EXPR = "{ l.filter_value EQ 'All' }">
		<MvELSEIF EXPR = "{ l.filter_value EQ 'Fragments' }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, 'ModuleXFeature', 'mxf' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mxf.module_id	= m.id AND
																				 mxf.feature	= \'component_frag\'', '' ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageItemList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Loaders_Present() }">
		<MvASSIGN NAME = "l.branch"		VALUE = "{ g.Store:branch }">
	<MvELSEIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.filter"			VALUE = "">
	<MvASSIGN NAME = "l.sort"			VALUE = "">
	<MvASSIGN NAME = "l.offset"			VALUE = 0>
	<MvASSIGN NAME = "l.count"			VALUE = 0>
	<MvASSIGN NAME = "l.assigned"		VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"		VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'iv.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'm.id',		'module_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'iv.mod_code',	'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'm.name',		'module_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT(					l.search_query, 'i.*,
																								 iv.code		AS code,
																								 iv.mod_code	AS mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.id',			'module_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.name',		'module_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.code',		'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.provider',	'module_provider' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.api_ver',	'module_api_ver' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.version',	'module_version' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.module',		'module_module' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.refcount',	'module_refcount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_BOOL(		l.search_query, 'm.active',		'module_active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.priority',	'module_priority' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT(					l.search_query, 'pxi.page_id AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemBranchVersions',	'ibv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Items',				'i' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemVersions',		'iv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'ibv.branch_id	= ?				AND
																				ibv.head		= 1				AND
																				i.id			= ibv.item_id	AND
																				iv.id			= ibv.version_id', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv',
																			 'pbv.branch_id	= ?	AND
																			  pbv.page_id	= ? AND
																			  pbv.head		= 1',
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.page:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', g.Store_Table_Prefix $ 'PageVersions',	'pv',	'pv.id = pbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', g.Store_Table_Prefix $ 'PageXItem',		'pxi',	'pxi.page_id = pv.page_id AND pxi.xref_id = pv.xref_id AND pxi.item_id = iv.item_id', '' ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv',
																			 'pbv.branch_id	= ?	AND
																			  pbv.page_id	= ? AND
																			  pbv.head		= 1',
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.page:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', g.Store_Table_Prefix $ 'PageVersions',	'pv',	'pv.id = pbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', g.Store_Table_Prefix $ 'PageXItem',		'pxi',	'pxi.page_id = pv.page_id AND pxi.xref_id = pv.xref_id AND pxi.item_id = iv.item_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'pxi.page_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageBranchVersions',	'pbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageVersions',		'pv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageXItem',			'pxi' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'pbv.branch_id	= ? AND
																					pbv.page_id		= ? AND
																					pbv.head		= 1 AND
																					pv.id			= pbv.version_id	AND
																					pxi.page_id		= pv.page_id		AND
																					pxi.xref_id		= pv.xref_id		AND
																					i.id			= pxi.item_id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $
																   [ g.Module_Library_DB ].SQL_Query_Field( l.page:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', 'Modules', 'm', [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'm.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'iv.mod_code' ), '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback_With_CustomFields( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_PageItemList_Load_Query_Filter', '', '', l.null ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'code:iv.code,module_id:m.id:null_integer,module_code:iv.mod_code,module_name:m.name:null_char', 'iv.code' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Items', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00023', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.item_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Items.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.item_count LT l.count ) ) }">
			<MvASSIGN NAME = "l.module:id"			VALUE = "{ Items.d.module_id }">
			<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-{ Items.d.module_code }">
			<MvASSIGN NAME = "l.module:name"		VALUE = "{ Items.d.module_name }">
			<MvASSIGN NAME = "l.module:provider"	VALUE = "{ Items.d.module_provider }">
			<MvASSIGN NAME = "l.module:api_ver"		VALUE = "{ Items.d.module_api_ver }">
			<MvASSIGN NAME = "l.module:version"		VALUE = "{ Items.d.module_version }">
			<MvASSIGN NAME = "l.module:module"		VALUE = "{ Items.d.module_module }">
			<MvASSIGN NAME = "l.module:refcount"	VALUE = "{ Items.d.module_refcount }">
			<MvASSIGN NAME = "l.module:active"		VALUE = "{ Items.d.module_active }">
			<MvASSIGN NAME = "l.module:priority"	VALUE = "{ Items.d.module_priority }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.item_count ) }">
				"id":			<MvEVAL EXPR = "{ int( Items.d.id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Items.d.code ) }">",
				"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Items.d.mod_code ) }">",
				"assigned":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( Items.d.assigned ) }">,
				"module":
				{
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.module ) }">
				}
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Items" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Items">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageItem_Update_Assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Item_Load( l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'R', 'Assigned', l.assigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_LockFile( l.page ) }">
		<MvASSIGN NAME = "l.result"	VALUE = "{ JSON_PageItem_Update_Assigned_LowLevel( l.page, l.item, l.assigned ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageItem_Update_Assigned_LowLevel" PARAMETERS = "page var, item var, assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_ID( l.page:id, l.original_page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.page"				VALUE = "{ l.original_page }">
	<MvASSIGN NAME = "l.currently_assigned"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageXItem_Load_CrossReference( l.page:id, l.page:xref_id, l.item:id, l.pagexitem ) }">

	<MvIF EXPR = "{ l.currently_assigned EQ l.assigned }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.item:mod_code, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00198', 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) OR
					NOT l.module:feature_hash:component }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00199', 'Module \'' $ l.module:code $ '\' does not implement the component feature' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page:fragment AND NOT l.module:feature_hash:component_frag }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00344', 'Module \'' $ l.module:code $ '\' does not implement the component_frag feature' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ l.assigned AND ( NOT l.currently_assigned ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Assign_Item_LowLevel( l.page, l.item ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00025', 'Assignment for Item \'' $ l.item:code $ '\' created for Page \'' $ l.page:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ ( NOT l.assigned ) AND l.currently_assigned }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Unassign_Item_LowLevel( l.page, l.item ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00027', 'Assignment for Item \'' $ l.item:code $ '\' deleted for Page \'' $ l.page:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Update_Settings( l.page, 'Item Assignment/Unassignment' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Update_IfModified( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Item_Load" PARAMETERS = "item var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'Item_ID', l.item_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_ID( l.item_id, l.item ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00258', 'Item not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_Item', l.edit_item ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_Code( l.edit_item, l.item ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00259', 'Item not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Item_Code', l.item_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_Code( l.item_code, l.item ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00260', 'Item not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00261', 'Unable to load item: One of Item_ID, Edit_Item, or Item_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ItemList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.branch_id"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'iv.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'm.id',		'module_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'iv.mod_code',	'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'm.name',		'module_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT(					l.search_query, 'i.*,
																								 iv.code		AS code,
																								 iv.mod_code	AS mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.id',			'module_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.name',		'module_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.code',		'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.provider',	'module_provider' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.api_ver',	'module_api_ver' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.version',	'module_version' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.module',		'module_module' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.refcount',	'module_refcount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_BOOL(		l.search_query, 'm.active',		'module_active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.priority',	'module_priority' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemBranchVersions',	'ibv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Items',				'i' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemVersions',		'iv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', 'Modules', 'm', [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'm.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'iv.mod_code' ), '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'ibv.branch_id	= ?				AND
																				ibv.head		= 1				AND
																				i.id			= ibv.item_id	AND
																				iv.id			= ibv.version_id', [ g.Module_Library_DB ].SQL_Query_Field( l.branch_id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, l.sort, 'code:iv.code,module_id:m.id:null_integer,module_code:iv.mod_code,module_name:m.name:null_char', 'iv.code' ) }">

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Items', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00050', g.MvOPENVIEW_Error ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.item_count"		VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Items.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.item_count LT l.count ) ) }">
			<MvASSIGN NAME = "l.module:id"			VALUE = "{ Items.d.module_id }">
			<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-{ Items.d.module_code }">
			<MvASSIGN NAME = "l.module:name"		VALUE = "{ Items.d.module_name }">
			<MvASSIGN NAME = "l.module:provider"	VALUE = "{ Items.d.module_provider }">
			<MvASSIGN NAME = "l.module:api_ver"		VALUE = "{ Items.d.module_api_ver }">
			<MvASSIGN NAME = "l.module:version"		VALUE = "{ Items.d.module_version }">
			<MvASSIGN NAME = "l.module:module"		VALUE = "{ Items.d.module_module }">
			<MvASSIGN NAME = "l.module:refcount"	VALUE = "{ Items.d.module_refcount }">
			<MvASSIGN NAME = "l.module:active"		VALUE = "{ Items.d.module_active }">
			<MvASSIGN NAME = "l.module:priority"	VALUE = "{ Items.d.module_priority }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.item_count ) }">
				"id":			<MvEVAL EXPR = "{ int( Items.d.id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Items.d.code ) }">",
				"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Items.d.mod_code ) }">",
				"module":
				{
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.module ) }">
				}
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Items" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Items">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchItemVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.changeset"			VALUE = "">

	<MvASSIGN NAME = "l.changeset_id"		VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'iv.id',			'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'iv.item_id',		'item_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'iv.user_id',		'user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'u.name',			'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'iv.code',			'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'iv.mod_code',		'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'm.name',			'module_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.changeset_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00309', 'Changeset not found' ) }">
		<MvELSEIF EXPR = "{ l.changeset:branch_id NE l.branch:id }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00310', 'Changeset does not exist on the specified branch' ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT(					l.search_query, 'iv.id			AS id,
																								 iv.item_id		AS item_id,
																								 iv.user_id		AS user_id,
																								 iv.code		AS code,
																								 iv.mod_code	AS mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.id',			'module_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.name',		'module_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.code',		'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.provider',	'module_provider' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.api_ver',	'module_api_ver' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.version',	'module_version' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.module',		'module_module' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.refcount',	'module_refcount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_BOOL(		l.search_query, 'm.active',		'module_active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.priority',	'module_priority' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Items', 'i' ) }">

	<MvIF EXPR = "{ ISNULL l.changeset }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemBranchVersions',	'ibv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemVersions',		'iv' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'ibv.branch_id	= ?					AND
																					ibv.head		= 1					AND
																					iv.id			= ibv.version_id	AND
																					i.id			= ibv.item_id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemVersions',	'iv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemChanges',		'ic' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'ic.branch_id	= ?		AND
																					ic.item_id		= i.id	AND
																					ic.set_id		=
																					(
																						SELECT
																							MAX( ic2.set_id )
																						FROM
																						' $ g.Store_Table_Prefix $ 'ItemChanges ic2
																						WHERE
																							ic2.branch_id	= ?		AND
																							ic2.item_id		= i.id	AND
																							ic2.set_id		<= ?
																					)',
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'iv.id = ic.new_id', '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', 'Modules',	'm',	[ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'm.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'iv.mod_code' ), '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', 'Users',		'u',	'u.id = iv.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.name', 'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.icon', 'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'iv.id,iv.item_id,iv.user_id,user_name:u.name:null_char,code:iv.code,module_id:m.id:null_integer,module_code:iv.mod_code,module_name:m.name:null_char', 'iv.code' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ItemVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00311', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ItemVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvASSIGN NAME = "l.module:id"			VALUE = "{ ItemVersions.d.module_id }">
			<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-{ ItemVersions.d.module_code }">
			<MvASSIGN NAME = "l.module:name"		VALUE = "{ ItemVersions.d.module_name }">
			<MvASSIGN NAME = "l.module:provider"	VALUE = "{ ItemVersions.d.module_provider }">
			<MvASSIGN NAME = "l.module:api_ver"		VALUE = "{ ItemVersions.d.module_api_ver }">
			<MvASSIGN NAME = "l.module:version"		VALUE = "{ ItemVersions.d.module_version }">
			<MvASSIGN NAME = "l.module:module"		VALUE = "{ ItemVersions.d.module_module }">
			<MvASSIGN NAME = "l.module:refcount"	VALUE = "{ ItemVersions.d.module_refcount }">
			<MvASSIGN NAME = "l.module:active"		VALUE = "{ ItemVersions.d.module_active }">
			<MvASSIGN NAME = "l.module:priority"	VALUE = "{ ItemVersions.d.module_priority }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":				<MvEVAL EXPR = "{ int( ItemVersions.d.id ) }">,
				"item_id":			<MvEVAL EXPR = "{ int( ItemVersions.d.item_id ) }">,
				"user_id":			<MvEVAL EXPR = "{ int( ItemVersions.d.user_id ) }">,
				"user_name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ItemVersions.d.user_name ) }">",
				"user_icon":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ItemVersions.d.user_icon ) }">",
				"code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ItemVersions.d.code ) }">",
				"mod_code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ItemVersions.d.mod_code ) }">",
				"module":
				{
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.module ) }">
				}
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ItemVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ItemVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Item_Insert" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code( 'R', 'Item_Code', l.item_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Module_Load( l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Item_Load_Code( l.item_code, l.existing_item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Item_Code', 'Item with the code \'' $ l.existing_item:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00312', 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) OR
					NOT l.module:feature_hash:component }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00313', 'Module \'' $ l.module:code $ '\' does not implement the component feature' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_Item_Module( l.item_code, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00314', 'Item \'' $ l.item_code $ '\' created' ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Item_Delete" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Item_Load( l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Delete_Item( l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00017', 'Item \'' $ l.item:code $ '\' deleted' ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ItemExtensionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Item_Load( l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.branch_id"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'm.id',		'module_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'ie.mod_code',	'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'm.name',		'module_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT(					l.search_query, 'ie.*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.id',			'module_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.name',		'module_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.code',		'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.provider',	'module_provider' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.api_ver',	'module_api_ver' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.version',	'module_version' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.module',		'module_module' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.refcount',	'module_refcount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_BOOL(		l.search_query, 'm.active',		'module_active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.priority',	'module_priority' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemBranchVersions',	'ibv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemExtensions',		'ie' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'ie', 'Modules', 'm', [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'm.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'ie.mod_code' ), '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'ibv.branch_id	= ?				AND
																				ibv.item_id		= ?				AND
																				ibv.head		= 1				AND
																				ie.item_id		= ibv.item_id	AND
																				ie.version_id	= ibv.version_id', [ g.Module_Library_DB ].SQL_Query_Field( l.branch_id ) $ ',' $
																												   [ g.Module_Library_DB ].SQL_Query_Field( l.item:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'module_id:m.id:null_integer,module_code:ie.mod_code,module_name:m.name:null_char,initord:ie.initord', 'ie.initord' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ItemExtensions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00029', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.itemextension_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ItemExtensions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.itemextension_count LT l.count ) ) }">
			<MvASSIGN NAME = "l.module"				VALUE = "">
			<MvASSIGN NAME = "l.module:id"			VALUE = "{ ItemExtensions.d.module_id }">
			<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-{ ItemExtensions.d.module_code }">
			<MvASSIGN NAME = "l.module:name"		VALUE = "{ ItemExtensions.d.module_name }">
			<MvASSIGN NAME = "l.module:provider"	VALUE = "{ ItemExtensions.d.module_provider }">
			<MvASSIGN NAME = "l.module:api_ver"		VALUE = "{ ItemExtensions.d.module_api_ver }">
			<MvASSIGN NAME = "l.module:version"		VALUE = "{ ItemExtensions.d.module_version }">
			<MvASSIGN NAME = "l.module:module"		VALUE = "{ ItemExtensions.d.module_module }">
			<MvASSIGN NAME = "l.module:refcount"	VALUE = "{ ItemExtensions.d.module_refcount }">
			<MvASSIGN NAME = "l.module:active"		VALUE = "{ ItemExtensions.d.module_active }">
			<MvASSIGN NAME = "l.module:priority"	VALUE = "{ ItemExtensions.d.module_priority }">

			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].ItemExtension_Read( l.itemextension ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.itemextension_count ) }">
				"item_id":	<MvEVAL EXPR = "{ int( l.itemextension:item_id ) }">,
				"mod_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.itemextension:mod_code ) }">",
				"initord":	<MvEVAL EXPR = "{ int( l.itemextension:initord ) }">,
				"module":
				{
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.module ) }">
				}
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ItemExtensions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ItemExtensions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ItemExtension_Insert" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Item_Load( l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Module_Load( l.extension_module ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.extension_module:active }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00200', 'Module \'' $ l.extension_module:code $ '\' is deactivated' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.extension_module ) OR
					NOT l.extension_module:feature_hash:component }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00201', 'Module \'' $ l.extension_module:code $ '\' does not implement the component feature' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Load( l.extension_module:id, 'component', l.storemodule ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00208', 'Module \'' $ l.extension_module:code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ItemExtension_Load_ItemModuleCode( l.item:id, l.extension_module:code, l.existing_itemextension ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00315', 'An Item Extension with module code \'' $ l.existing_itemextension:mod_code $ '\' already exists for item \'' $ l.item:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_ItemExtension_LowLevel( l.item, l.extension_module ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00033', 'Module \'' $ l.extension_module:code $ '\' registered as an extension of item \'' $ l.item:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ItemExtension_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Item_Load( l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Module_Code', l.module_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemExtension_Load_ItemModuleCode( l.item:id, l.module_code, l.itemextension ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00316', 'Item Extension not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Delete_ItemExtension( l.itemextension ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00034', 'Module \'' $ l.module_code $ '\' removed as an extension of item \'' $ l.item:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ItemExtension_InitializeOrder_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.change_count"		VALUE = 0>
	<MvASSIGN NAME = "l.changes" 			VALUE = "">

	<MvIF EXPR = "{ NOT JSON_Item_Load( l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.itemextension_order_input" ARRAY = "l.itemextension_order_inputs" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'ItemExtension_Order', l.itemextension_order_inputs ) }">
		<MvASSIGN NAME = "l.change"			VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.itemextension_order_input, 'R', 'id',					l.change:mod_code )	OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Integer(	l.itemextension_order_input, 'R', 'offset',				l.change:offset )	OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Integer(	l.itemextension_order_input, 'R', 'original_offset',	l.change:original_offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.change:offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Element_FieldError( l.itemextension_order_input, '', g.Validation_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.change_count" 	VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.change_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'Item Extension display order for Item \'' $ l.item:code $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemExtensionList_Update_Offsets( l.item, l.changes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00037', 'Item Extension sort order updated for item \'' $ l.item:code $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FrameworkList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.filter"	VALUE = "">
	<MvASSIGN NAME = "l.sort"	VALUE = "">
	<MvASSIGN NAME = "l.offset"	VALUE = 0>
	<MvASSIGN NAME = "l.count"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters,		'code',			'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters,		'version',		'version' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters,		'title',		'title' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters,		'descrip',		'descrip' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters,		'signature',	'signature' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters,		'previewimg',	'previewimg' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters,		'provider',		'provider' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER( l.available_filters,	'created_dt',	'created_dt' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER( l.available_filters,	'applied_dt',	'applied_dt' ) }">

	<MvASSIGN NAME = "l.search_query"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'SKIN', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort,
													  'code,version,title,descrip,signature,previewimg,provider,created_dt,applied_dt',
													  'code' ) }">

	<MvASSIGN NAME = "l.search_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'SKIN', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00038', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.framework_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT SKIN.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.framework_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].SKIN_Read( l.framework ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.framework_count ) }">
				"id":			<MvEVAL EXPR = "{ int( l.framework:id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.framework:code ) }">",
				"version":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.framework:version ) }">",
				"title":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.framework:title ) }">",
				"descrip":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.framework:descrip ) }">",
				"signature":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.framework:signature ) }">",
				"previewimg":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.framework:previewimg ) }">",
				"provider":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.framework:provider ) }">",
				"created_dt":	<MvEVAL EXPR = "{ int( l.framework:created_dt ) }">,
				"applied_dt":	<MvEVAL EXPR = "{ int( l.framework:applied_dt ) }">,
				"active":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.framework:code EQ g.Store:framework ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "SKIN" ROWS = 1>
		</MvWHILE>
		]
	}

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "SKIN">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Framework_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">		<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'Framework_ID', l.framework_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].SKIN_Load_ID( l.framework_id, l.skin ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00040', 'Framework not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_UT ].SKIN_Directory_Verify( l.skin:code, l.skin_dir, l.skin_file ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( l.skin_file ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].SKIN_Delete_ID( l.skin:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00039', 'Framework ' $ l.skin:title $ ' deleted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Framework_Upload_ValidateFileUpload" PARAMETERS = "field, filename, content_type" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvCOMMENT>
	|
	| If more than one uploaded file is present in a single call, just ignore it.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( NOT ISNULL g.Filename ) OR ( NOT ISNULL g.File_MD5 ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Framework_Upload_ProcessFileUpload" PARAMETERS = "field, filename, status, tempfile, content_type, size" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_ProcessFileUpload( 'Framework', l.field, l.filename, l.status, l.tempfile, l.content_type, l.size ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Framework_Upload" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_ValidateUploadedFile( l.uploaded_tempfile ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.result"	VALUE = "{ JSON_Framework_Upload_LowLevel( l.uploaded_tempfile ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ fdelete( l.uploaded_tempfile ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Framework_Upload_LowLevel" PARAMETERS = "uploaded_tempfile" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Extension_ToLowerCase( g.Filename, 'pkg', l.extension ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00142', 'Framework uploaded with an invalid extension for file \'' $ g.Filename $ '\' at path \'' $ l.uploaded_tempfile $ '\'' ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00047', '\'' $ l.extension $ '\' is not a valid framework package extension' ) }">
	</MvIF>

	<MvASSIGN NAME = "g.FileUpload_Overwrite"	VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.FileUpload_Overwrite ) }">
	<MvASSIGN NAME = "l.filename"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Filename ) }">
	<MvASSIGN NAME = "l.skinsdir"				VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( g.Module_Root_Versionless, 'frameworks/' $ padl( g.Store:id, 8, '0' ) $ '/' ) }">
	<MvASSIGN NAME = "l.last_period_pos"		VALUE = "{ [ g.Module_Library_Utilities ].LastIndexOf( '.', l.filename, len_var( l.filename ) ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.skinsdir ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ sexists( l.skinsdir $ l.filename ) }">
		<MvIF EXPR = "{ NOT g.FileUpload_Overwrite }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00048', 'Framework file \'' $ l.filename $ '\' already exists, not overwritten' ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT sdelete( l.skinsdir $ l.filename ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00051', 'Unable to delete framework file \'' $ l.filename $ '\': ' $ file_last_error() ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT fsrename( l.uploaded_tempfile, l.skinsdir $ l.filename ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00049', 'Unable to rename framework file \'' $ l.uploaded_tempfile $ '\' to \'' $ l.filename $ '\': ' $ file_last_error() ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00143', 'Framework file \'' $ l.skinsdir $ l.filename $ '\' uploaded' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_UT ].Skin_Register( substring_var( l.filename, 1, l.last_period_pos - 1 ) ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_File_Load_LowLevel" PARAMETERS = "purpose, file_path" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.full_file_path" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.file_path ) }">

	<MvIF EXPR = "{ file_read( l.full_file_path, 'script', l.source ) EQ -1 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00055', 'File not found' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00066', l.purpose $ ': File \'' $ l.file_path $ '\' loaded' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"file": 	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.file_path ) }">",
		"source":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.source ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_TemplateVersion_Update_LowLevel" PARAMETERS = "template_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'TemplateVersion_ID',	l.templateversion_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Binary(	'o', 'Template_Source',		l.source )				OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Template_Notes',		l.notes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.template_id, l.managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00056', 'Failed to load template' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_ID( l.templateversion_id, l.managedtemplateversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00057', 'Failed to load template' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.managedtemplateversion:templ_id NE l.managedtemplate:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00245', 'Specified version is not associated with the specified template' ) }">
	</MvIF>

	<MvIF EXPR = "{ crypto_md5( l.source ) EQ crypto_md5( l.managedtemplateversion:source ) }">
		<MvIF EXPR = "{ l.managedtemplateversion:id NE l.managedtemplate:current_id }">
			<MvASSIGN NAME = "l.managedtemplate:current_id"	VALUE = "{ l.managedtemplateversion:id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Revert_ManagedTemplateVersion( l.managedtemplate, l.managedtemplateversion, l.compile_error ) }">
				<MvIF EXPR = "{ len_var( l.compile_error ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00058', l.compile_error ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00059', 'Template \'' $ l.managedtemplate:filename $ '\' reverted' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_ManagedTemplateVersion( l.managedtemplate, l.notes, l.source, l.null, l.compile_error ) }">
			<MvIF EXPR = "{ len_var( l.compile_error ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00060', l.compile_error ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00061', 'Template \'' $ l.managedtemplate:filename $ '\' updated' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_TemplateVersion_Load" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'Template_ID',			l.template_id ) OR
					NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'TemplateVersion_ID',	l.templateversion_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_TemplateVersion_Load_LowLevel( l.template_id, l.templateversion_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_TemplateVersion_Load_LowLevel" PARAMETERS = "template_id, templateversion_id" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_ID( l.templateversion_id, l.managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00062', 'Failed to load template' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.template_id NE l.managedtemplate:templ_id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00063', 'Failed to load template' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].User_Load_ID( l.managedtemplate:user_id, l.user ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.user" VALUE = "">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"id": 			<MvEVAL EXPR = "{ int( l.managedtemplate:id ) }">,
		"templ_id": 	<MvEVAL EXPR = "{ int( l.managedtemplate:templ_id ) }">,
		"user_id":	 	<MvEVAL EXPR = "{ int( l.managedtemplate:user_id ) }">,
		"user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.user:name ) }">",
		"user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.user:icon ) }">",
		"immutable": 	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.managedtemplate:immutable ) }">,
		"dtstamp": 		<MvEVAL EXPR = "{ int( l.managedtemplate:dtstamp ) }">,
		"notes":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedtemplate:notes ) }">",
		"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.managedtemplate:source ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_TemplateVersionList_Load_Template" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'Template_ID', l.template_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_TemplateVersionList_Load_Template_LowLevel( l.template_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_TemplateVersionList_Load_Template_LowLevel" PARAMETERS = "template_id" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.template_id, l.current_template ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00064', 'Failed to load current template' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.branch_id" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'mtv.id		AS id,
																		  mtv.notes		AS notes,
																		  mtv.dtstamp	AS dtstamp,
																		  u.id			AS user_id,
																		  u.name		AS user_name,
																		  u.icon		AS user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions',	'mtbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ManagedTemplateVersions',		'mtv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mtv', 'Users', 'u', 'u.id = mtv.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mtbv.branch_id	= ?	AND
																		 mtbv.templ_id	= ?	AND
																		 mtv.id			= mtbv.version_id',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.branch_id ) $ ',' $
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.template_id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_ORDER_BY( l.query, 'mtv.id', 'DESC' ) }">

	<MvASSIGN NAME = "l.sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.fields ) }">

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "ManagedTemplateVersions"
				QUERY	= "{ l.sql }"
				FIELDS	= "{ l.fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00246', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.template_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"current_template_id": <MvEVAL EXPR = "{ int( l.current_template:id ) }">,
		"versions":
		[
		<MvWHILE EXPR = "{ NOT ManagedTemplateVersions.d.EOF }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.template_count ) }">
				"id": 				<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.id ) }">,
				"user_id": 			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.user_id ) }">,
				"user_name": 		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.user_name ) }">",
				"user_icon": 		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.user_icon ) }">",
				"notes":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.notes ) }">",
				"formatted_time":	"<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Format_Date( ManagedTemplateVersions.d.dtstamp, s.miva_language ) $ ' ' $ [ g.Module_Library_Utilities ].Format_Time( ManagedTemplateVersions.d.dtstamp, s.miva_language ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ManagedTemplateVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplateVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_TemplateVersionList_Load_Query" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Loaders_Present() }">
		<MvASSIGN NAME = "l.branch"			VALUE = "{ g.Store:branch }">
	<MvELSEIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mtv.id',		'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'mtv.notes',	'notes' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mtv.dtstamp',	'dtstamp' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'mtbv.head',	'head' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'u.id',		'user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'u.name',		'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'u.icon',		'user_icon' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'Template_ID',		l.template_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.id			AS id,
																				 mtv.dtstamp	AS dtstamp,
																				 mtbv.head		AS head' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query,	'u.id',		'user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query,		'u.name',	'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query,		'u.icon',	'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions',	'mtbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateVersions',			'mtv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mtv', 'Users', 'u', 'u.id = mtv.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtbv.branch_id	= ?	AND
																				mtbv.templ_id	= ?	AND
																				mtv.id			= mtbv.version_id',
																				[ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $
																				[ g.Module_Library_DB ].SQL_Query_Field( l.template_id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_TemplateVersionList_Load_Query_Filter', '', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'mtv.id,mtv.dtstamp,mtbv.head,user_id:u.id:null_integer,user_name:u.name:null_char', '-mtv.id' ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:notes }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes		AS notes' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:source }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source		AS source' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.settings	AS settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ManagedTemplateVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00257', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"	VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ManagedTemplateVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":				<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.id ) }">,
				"user_id":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.user_id ) }">,
				"user_name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.user_name ) }">",
				"user_icon":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.user_icon ) }">",
				"dtstamp":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.dtstamp ) }">,
				"head":				<MvEVAL EXPR = "{ encodejavascriptboolean( ManagedTemplateVersions.d.head ) }">

				<MvIF EXPR = "{ l.ondemandcolumns:notes }">
					, "notes":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.notes ) }">"
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source }">
					, "source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( ManagedTemplateVersions.d.source ) }">"
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:settings }">
					, "settings":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( miva_array_deserialize( ManagedTemplateVersions.d.settings ) ) }">
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ManagedTemplateVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplateVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_TemplateVersionList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_TemplateVersion_Clear_History_LowLevel" PARAMETERS = "template_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Delete_History( l.template_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00067', 'Template version history cleared for template \'' $ l.template_id $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvCOMMENT>
|
| JavaScript Resources
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_JavaScriptResource" PARAMETERS = "scriptresource var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.scriptresource:id ) }">,
	"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:code ) }">",
	"type":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:type ) }">",
	"is_global":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.scriptresource:is_global ) }">,
	"active":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.scriptresource:active ) }">,
	"file":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:file ) }">",
	"content_id":	<MvEVAL EXPR = "{ int( l.scriptresource:content_id ) }">,
	"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:mod_code ) }">",
	"mod_data":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:mod_data ) }">",
	"templ_id":		<MvEVAL EXPR = "{ int( l.scriptresource:templ_id ) }">,
	"attributes":
	[
		<MvASSIGN NAME = "l.attribute_count" VALUE = 0>

		<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.scriptresource:attributes">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
				"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
				"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Load" PARAMETERS = "scriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'JavaScriptResource_ID', l.scriptresource_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_ID( l.scriptresource_id, l.scriptresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00144', 'JavaScript Resource not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_JavaScriptResource', l.scriptresource_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Code( l.scriptresource_code, l.scriptresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00145', 'JavaScript Resource not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'JavaScriptResource_Code', l.scriptresource_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Code( l.scriptresource_code, l.scriptresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00146', 'JavaScript Resource not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00147', 'Unable to load JavaScript Resource: One of JavaScriptResource_ID, Edit_JavaScriptResource or JavaScriptResource_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptCombinedResource_Loaders_Present" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'JavaScriptCombinedResource_ID' ) }">			<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Edit_JavaScriptCombinedResource' ) }">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'JavaScriptCombinedResource_Code' ) }">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptCombinedResource_Load" PARAMETERS = "combinedresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'JavaScriptCombinedResource_ID', l.combinedresource_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_ID( l.combinedresource_id, l.combinedresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00148', 'JavaScript Combined Resource not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_JavaScriptCombinedResource', l.combinedresource_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Code( l.combinedresource_code, l.combinedresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00149', 'JavaScript Combined Resource not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'JavaScriptCombinedResource_Code', l.combinedresource_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Code( l.combinedresource_code, l.combinedresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00150', 'JavaScript Combined Resource not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00151', 'Unable to load JavaScript Combined Resource: One of JavaScriptCombinedResource_ID, Edit_JavaScriptCombinedResource or JavaScriptCombinedResource_Code must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.combinedresource:type NE 'C' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00152', 'Loaded JavaScript Combined Resource is not of type \'Combined Resource\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResourceList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.active',		'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_data',	'mod_data' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.working_branch_id"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,
																'r.id			AS id,
																 v.code			AS code,
																 r.templ_id		AS templ_id,
																 v.type			AS type,
																 v.is_global	AS is_global,
																 v.active		AS active,
																 v.file			AS file,
																 v.content_id	AS content_id,
																 v.mod_code		AS mod_code,
																 v.mod_data		AS mod_data,
																 v.attributes	AS attributes' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions', 'rbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResources', 'r' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
															   'rbv.branch_id	= ?				AND
																rbv.res_id		= r.id			AND
																rbv.head		= 1				AND
																v.id			= rbv.version_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'code:v.code,type:v.type,is_global:v.is_global,active:v.active,file:v.file,mod_code:v.mod_code,mod_data:v.mod_data', 'id' ) }">

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'JavaScriptResources', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00068', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.resource_count"	VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT JavaScriptResources.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.resource_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Read( l.scriptresource ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.resource_count ) }">
				<MvEVAL EXPR = "{ JSON_JavaScriptResource( l.scriptresource ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "JavaScriptResources" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.resource_global"		VALUE = 0>
	<MvASSIGN NAME = "l.resource_active"		VALUE = 0>
	<MvASSIGN NAME = "l.resource_file"			VALUE = "">
	<MvASSIGN NAME = "l.resource_attributes"	VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'R',		'JavaScriptResource_Code',			l.resource_code )									OR
					NOT [ g.Module_JSON ].JSON_Input_List(		'R',		'JavaScriptResource_Type',			l.resource_type,	'C,L,E,I,M,Y', 'C,L,E,I,M,Y' )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',		'JavaScriptResource_Global',		l.resource_global )									OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',		'JavaScriptResource_Active',		l.resource_active )									OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o:254',	'JavaScriptResource_File_Path',		l.resource_file ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.resource_type EQ 'M' OR l.resource_type EQ 'Y' }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R',		'JavaScriptResource_Module_Code', l.module_code ) OR
						NOT [ g.Module_JSON ].JSON_Input_Text( 'R:100',	'JavaScriptResource_Module_Data', l.module_data ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Module_Code', 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Module_Code', 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:jsresource }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Module_Code', 'Module \'' $ l.module_code $ '\' does not implement the jsresource feature' ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'JavaScriptResource_Attributes', l.attributes ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'R', 'name',	l.resource_attribute:name ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'o', 'value',	l.resource_attribute:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.resource_attribute_count" VALUE = "{ miva_array_insert( l.resource_attributes, l.resource_attribute, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Code( l.resource_code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Code', 'Code \'' $ l.resource_code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.resource_type EQ 'L' OR l.resource_type EQ 'E' ) AND ISNULL l.resource_file }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_File_Path', 'Please specify a file path' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource \'' $ l.resource_code $ '\' created' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.resource_type EQ 'C' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Create_Type_Combined( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'I' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Create_Type_InlineScript( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.empty_template, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'L' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Create_Type_LocalFile( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.resource_file, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'E' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Create_Type_ExternalFile( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.resource_file, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'M' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Create_Type_Module( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.module:code, l.module_data, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'Y' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Create_Type_ModuleInline( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.module:code, l.module_data, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00070', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' inserted on branch \'' $ g.Store:branch:name $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_JavaScriptResource( l.scriptresource ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_scriptresource" VALUE = "{ l.scriptresource }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'O',		'JavaScriptResource_Code',			l.scriptresource:code )			OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',		'JavaScriptResource_Global',		l.scriptresource:is_global )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',		'JavaScriptResource_Active',		l.scriptresource:active )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o:254',	'JavaScriptResource_File_Path',		l.scriptresource:file ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ ( l.scriptresource:type EQ 'M' OR l.scriptresource:type EQ 'Y' ) AND
					( [ g.Module_JSON ].JSON_Input_Exists( 'JavaScriptResource_Module_Code' ) OR [ g.Module_JSON ].JSON_Input_Exists( 'JavaScriptResource_Module_Data' ) ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R',		'JavaScriptResource_Module_Code', l.module_code ) OR
						NOT [ g.Module_JSON ].JSON_Input_Text( 'R:100',	'JavaScriptResource_Module_Data', l.module_data ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Module_Code', 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Module_Code', 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:jsresource }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Module_Code', 'Module \'' $ l.module_code $ '\' does not implement the jsresource feature' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.scriptresource:mod_code" VALUE = "{ l.module:code }">
		<MvASSIGN NAME = "l.scriptresource:mod_data" VALUE = "{ l.module_data }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'JavaScriptResource_Attributes' ) }">
		<MvASSIGN NAME = "l.scriptresource:attributes" VALUE = "">

		<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'JavaScriptResource_Attributes', l.attributes ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'R', 'name',	l.resource_attribute:name ) OR
							NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'o', 'value',	l.resource_attribute:value ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
			</MvIF>

			<MvASSIGN NAME = "l.scriptresource:attribute_count" VALUE = "{ miva_array_insert( l.scriptresource:attributes, l.resource_attribute, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Code( l.scriptresource:code, l.existing_scriptresource ) AND
					l.scriptresource:id NE l.existing_scriptresource:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Code', 'Code \'' $ l.existing_scriptresource:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.scriptresource:type EQ 'L' OR l.scriptresource:type EQ 'E' ) AND ISNULL l.scriptresource:file }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_File_Path', 'Please specify a file path' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'L' AND l.original_scriptresource:file NE l.scriptresource:file }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Capture_External_Modification_JavaScriptResource( l.original_scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Set_ResourceManagedContent_FromFile( l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource \'' $ l.scriptresource:code $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Update( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00071', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' updated' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Update_Global" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Global" VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Global ) }">

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.scriptresource:is_global" VALUE = "{ g.Global }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource \'' $ l.scriptresource:code $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Update( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00072', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' global state set to \'' $ l.scriptresource:is_global $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Update_Active" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Active" VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Active ) }">

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.scriptresource:active" VALUE = "{ g.Active }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource \'' $ l.scriptresource:code $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Update( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00073', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' active state set to \'' $ l.scriptresource:active $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Update_Attributes" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.scriptresource:attributes" VALUE = "">

	<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'JavaScriptResource_Attributes', l.attributes ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'R', 'name',	l.resource_attribute:name ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'o', 'value',	l.resource_attribute:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.scriptresource:attribute_count" VALUE = "{ miva_array_insert( l.scriptresource:attributes, l.resource_attribute, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource \'' $ l.scriptresource:code $ '\' attributes updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Update( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00074', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' attributes updated' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Generate_SRI" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_List(	'R', 'Integrity_Type',	l.integrity_type, 'ALL,SHA256,SHA384,SHA512', 'ALL,SHA256,SHA384,SHA512' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type NE 'C' AND l.scriptresource:type NE 'L' AND l.scriptresource:type NE 'E' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00153', 'Script resource must be one of type \'Combined Resource\', \'Local File\', or \'External File\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'C' }">
		<MvCAPTURE VARIABLE = "l.resource_data" STANDARDOUTPUTLEVEL = "">
			<MvFOREACH INDEX = "l.linked_scriptresource_pos" ITERATOR = "l.linked_scriptresource" ARRAY = "l.linked_scriptresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].Runtime_JavaScriptResourceList_Load_CombinedResource( l.scriptresource:id, l.linked_scriptresources ) }">
				<MvIF EXPR = "{ l.linked_scriptresource:type EQ 'L' }">
					<MvASSIGN NAME = "l.local_file_path" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.linked_scriptresource:file ) }">

					<MvIF EXPR = "{ file_read( l.local_file_path, 'script', l.loaded_file_data ) NE -1 }">
						<MvIF EXPR = "{ l.linked_scriptresource_pos GT 1 }">
							<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
						</MvIF>

						<MvEVAL EXPR = "{ l.loaded_file_data }">
					</MvIF>
				<MvELSEIF EXPR = "{ l.linked_scriptresource:type EQ 'M' }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.linked_scriptresource:mod_code, l.module ) }">	<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ NOT l.module:active }">																							<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ NOT l.module:feature_hash:jsresource }">																		<MvFOREACHCONTINUE>
					</MvIF>

					<MvIF EXPR = "{ l.linked_scriptresource_pos GT 1 }">
						<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
					</MvIF>

					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].JavaScriptResourceModule_Resource_Render( l.module, l.linked_scriptresource ) }">
				</MvIF>
			</MvFOREACH>
		</MvCAPTURE>
	<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'L' }">
		<MvASSIGN NAME = "l.local_file_path" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.scriptresource:file ) }">

		<MvIF EXPR = "{ file_read( l.local_file_path, 'script', l.resource_data ) EQ -1 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00154', 'Script resource file not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'E' }">
		<MvIF EXPR = "{ ( '//' IN l.scriptresource:file ) EQ 1 }">	<MvASSIGN NAME = "l.url" VALUE = "{ 'https:' $ l.scriptresource:file }">
		<MvELSE>													<MvASSIGN NAME = "l.url" VALUE = "{ l.scriptresource:file }">
		</MvIF>

		<MIVA MvCALL_ERROR = "nonfatal, nodisplay">

		<MvCAPTURE VARIABLE = "l.resource_data" STANDARDOUTPUTLEVEL = "">
			<MvCALL METHOD	= "GET"
					ACTION	= "{ l.url }"
					FLAGS	= "noparse">
				<MvEVAL EXPR = "{ s.callvalue }">
			</MvCALL>
		</MvCAPTURE>

		<MIVA MvCALL_ERROR = "fatal, display">

		<MvIF EXPR = "{ g.MvCALL_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00155', g.MvCALL_Error ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.integrity_type EQ 'SHA256' OR l.integrity_type EQ 'ALL' }">
		<MvIF EXPR = "{ NOT crypto_evp_digest( 'sha256', l.resource_data, l.resource_data_sha256 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00156', crypto_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.base64_resource_data_sha256"	VALUE = "{ crypto_base64_encode( l.resource_data_sha256 ) }">
	</MvIF>

	<MvIF EXPR = "{ l.integrity_type EQ 'SHA384' OR l.integrity_type EQ 'ALL' }">
		<MvIF EXPR = "{ NOT crypto_evp_digest( 'sha384', l.resource_data, l.resource_data_sha384 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00157', crypto_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.base64_resource_data_sha384"	VALUE = "{ crypto_base64_encode( l.resource_data_sha384 ) }">
	</MvIF>

	<MvIF EXPR = "{ l.integrity_type EQ 'SHA512' OR l.integrity_type EQ 'ALL' }">
		<MvIF EXPR = "{ NOT crypto_evp_digest( 'sha512', l.resource_data, l.resource_data_sha512 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00158', crypto_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.base64_resource_data_sha512"	VALUE = "{ crypto_base64_encode( l.resource_data_sha512 ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_array_search( l.scriptresource:attributes, 1, l.attribute, 'tolower( l.attribute:name ) EQ \'crossorigin\'' ) }">
		<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "{ l.attribute }">
	<MvELSE>
		<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "">
		<MvASSIGN NAME = "l.crossorigin_attribute:name"		VALUE = "crossorigin">
		<MvASSIGN NAME = "l.crossorigin_attribute:value"	VALUE = "anonymous">
	</MvIF>

	<MvASSIGN NAME = "l.integrity_attribute"				VALUE = "">
	<MvASSIGN NAME = "l.integrity_attribute:name"			VALUE = "integrity">

	<MvIF EXPR = "{ l.integrity_type EQ 'SHA256' }">		<MvASSIGN NAME = "l.integrity_attribute:value" VALUE = "{ 'sha256-' $ l.base64_resource_data_sha256 }">
	<MvELSEIF EXPR = "{ l.integrity_type EQ 'SHA384' }">	<MvASSIGN NAME = "l.integrity_attribute:value" VALUE = "{ 'sha384-' $ l.base64_resource_data_sha384 }">
	<MvELSEIF EXPR = "{ l.integrity_type EQ 'SHA512' }">	<MvASSIGN NAME = "l.integrity_attribute:value" VALUE = "{ 'sha512-' $ l.base64_resource_data_sha512 }">
	<MvELSE>												<MvASSIGN NAME = "l.integrity_attribute:value" VALUE = "{ 'sha256-' $ l.base64_resource_data_sha256 $ ' sha384-' $ l.base64_resource_data_sha384 $ ' sha512-' $ l.base64_resource_data_sha512 }">
	</MvIF>

	<MvASSIGN NAME = "l.attribute_count"					VALUE = "{ miva_array_filter( l.scriptresource:attributes, 1, l.attribute, '( tolower( l.attribute:name ) NE \'integrity\' ) AND ( tolower( l.attribute:name ) NE \'crossorigin\' )', l.attributes ) }">
	<MvASSIGN NAME = "l.attribute_count"					VALUE = "{ miva_array_insert( l.attributes, l.integrity_attribute, -1 ) }">
	<MvASSIGN NAME = "l.attribute_count"					VALUE = "{ miva_array_insert( l.attributes, l.crossorigin_attribute, -1 ) }">
	<MvASSIGN NAME = "l.scriptresource:attributes"			VALUE = "{ l.attributes }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource \'' $ l.scriptresource:code $ '\' SRI attributes generated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Update( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00159', 'JavaScript Resource \'' $ l.scriptresource:code $ '\': Generated SRI integrity attributes with type \'' $ l.integrity_type $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_JavaScriptResource( l.scriptresource ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Clear_SRI" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.attribute_count" VALUE = "{ miva_array_filter( l.scriptresource:attributes, 1, l.attribute, '( tolower( l.attribute:name ) NE \'crossorigin\' ) AND ( tolower( l.attribute:name ) NE \'integrity\' )', l.scriptresource:attributes ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource \'' $ l.scriptresource:code $ '\' SRI attributes cleared' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Update( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00160', 'JavaScript Resource \'' $ l.scriptresource:code $ '\': Cleared SRI integrity attributes' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_JavaScriptResource( l.scriptresource ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00302', 'Resource of type "Module (Managed)" cannot be deleted' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Delete_JavaScriptResource( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00075', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResourceList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.script_id" ARRAY = "l.script_ids" COUNT = "{ [ g.Module_JSON ].JSON_Array_Integer( g.JavaScriptResource_IDs, l.script_ids ) }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_ID( l.script_id, l.scriptresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.script_id, 'MER-TUI-JSN-00303', 'Resource of type "Module (Managed)" cannot be deleted', l.errors ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Delete_JavaScriptResource( l.scriptresource ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.script_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00076', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Upload_ValidateFileUpload" PARAMETERS = "field, filename, content_type" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN VALUE = -1>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = -1>	</MvIF>

	<MvCOMMENT>
	|
	| If more than one uploaded file is present in a single call, just ignore it.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( NOT ISNULL g.Filename ) OR ( NOT ISNULL g.File_MD5 ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Upload_ProcessFileUpload" PARAMETERS = "field, filename, status, tempfile, content_type, size" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_ProcessFileUpload( 'JavaScript Resource', l.field, l.filename, l.status, l.tempfile, l.content_type, l.size ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Upload" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_ValidateUploadedFile( l.uploaded_tempfile ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.result"		VALUE = "{ JSON_JavaScriptResource_Upload_LowLevel( l.uploaded_tempfile ) }">
	<MvASSIGN NAME = "l.null"		VALUE = "{ fdelete( l.uploaded_tempfile ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Upload_LowLevel" PARAMETERS = "uploaded_tempfile" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Extension_ToLowerCase( g.Filename, 'js', l.extension ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00210', 'JavaScript Resource uploaded with an invalid extension for file \'' $ g.Filename $ '\' at path \'' $ l.uploaded_tempfile $ '\'' ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00084', '\'' $ l.extension $ '\' is not a valid javascript extension' ) }">
	</MvIF>

	<MvASSIGN NAME = "g.FileUpload_Overwrite"	VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.FileUpload_Overwrite ) }">
	<MvASSIGN NAME = "l.filename"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Filename ) }">
	<MvASSIGN NAME = "l.scripts_dir"			VALUE = "{ 'scripts/' $ padl( g.Store:id, 8, '0' ) $ '/' }">

	<MvASSIGN NAME = "l.working_branch_id"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.working_branch_id, l.working_branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.working_branch:tmpldir }">
		<MvASSIGN NAME = "l.scripts_dir"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.scripts_dir, l.working_branch:tmpldir ) }">
	</MvIF>

	<MvASSIGN NAME = "l.root_scripts_dir"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.scripts_dir ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.root_scripts_dir ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.root_scripts_dir, '0755' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ sexists( l.root_scripts_dir $ l.filename ) }">
		<MvIF EXPR = "{ NOT g.FileUpload_Overwrite }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00085', 'JavaScript file \'' $ l.filename $ '\' already exists, not overwritten' ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT sdelete( l.root_scripts_dir $ l.filename ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00086', 'Unable to delete JavaScript file \'' $ l.filename $ '\': ' $ file_last_error() ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT fsrename( l.uploaded_tempfile, l.root_scripts_dir $ l.filename ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00087', 'Unable to rename JavaScript file \'' $ l.uploaded_tempfile $ '\' to \'' $ l.filename $ '\': ' $ file_last_error() ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ schmod( l.root_scripts_dir $ l.filename, '0644' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00083', 'JavaScript Resource file \'' $ l.scripts_dir $ l.filename $ '\' uploaded.' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"file_path": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scripts_dir $ l.filename ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_File_Update" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_scriptresource" VALUE = "{ l.scriptresource }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Binary( 'R', 'File_Source', l.source ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Capture_External_Modification_JavaScriptResource( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.full_file_path" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.scriptresource:file ) }">

	<MvIF EXPR = "{ NOT sexists( l.full_file_path ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00212', 'File not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ file_overwrite( l.full_file_path, 'script', l.source ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00213', 'Failed to write to file: ' $ file_last_error() ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00214', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' file \'' $ l.scriptresource:file $ '\' updated' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_FindOrInsert( l.source, l.managedcontent ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.scriptresource:content_id" VALUE = "{ l.managedcontent:id }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource \'' $ l.scriptresource:code $ '\' file \'' $ l.scriptresource:file $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Update( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_File_Load" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_File_Load_LowLevel( 'JavaScript Resource File Load', l.scriptresource:file ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_TemplateVersion_Update" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_TemplateVersion_Update_LowLevel( l.scriptresource:templ_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_TemplateVersion_Load" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.TemplateVersion_ID" VALUE = "{ int( g.TemplateVersion_ID ) }">

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_TemplateVersion_Load_LowLevel( l.scriptresource:templ_id, g.TemplateVersion_ID ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_TemplateVersionList_Load_Template" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_TemplateVersionList_Load_Template_LowLevel( l.scriptresource:templ_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_LinkedPageList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Loaders_Present() }">
		<MvASSIGN NAME = "l.branch"			VALUE = "{ g.Store:branch }">
	<MvELSEIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.resource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"			VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"			VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.name',		'name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.secure',	'secure' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.public',	'public' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.title',		'title' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.cache',		'cache' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.admin',		'admin' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.layout',	'layout' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.fragment',	'fragment' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>
	
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,
																'page.*,
																 pv.id			AS version_id,
																 pv.xref_id		AS version_xref_id,
																 pv.user_id		AS version_user_id,
																 pv.admin		AS version_admin,
																 pv.layout		AS version_layout,
																 pv.fragment	AS version_fragment,
																 pv.secure		AS version_secure,
																 pv.public		AS version_public,
																 pv.code		AS version_code,
																 pv.name		AS version_name,
																 pv.title		AS version_title,
																 pv.ui_id		AS version_ui_id,
																 pv.cache		AS version_cache,
																 pv.cacheset	AS version_cacheset,
																 jsxp.page_id AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Pages', 'page' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageVersions', 'pv' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
															   'pbv.branch_id	= ?					AND
															    pbv.head		= 1					AND
																page.id			= pbv.page_id		AND
																pv.id			= pbv.version_id	AND
																pv.admin		= 0					AND
																pv.fragment		= 0',
															    [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions', 'rbv', 'rbv.branch_id = ? AND rbv.res_id = ? AND rbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.resource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v', 'v.id = rbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'JavaScriptResourceXPage', 'jsxp', 'jsxp.script_id = v.res_id AND jsxp.xref_id = v.xref_id AND jsxp.page_id = page.id', '' ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions', 'rbv', 'rbv.branch_id = ? AND rbv.res_id = ? AND rbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.resource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v', 'v.id = rbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'JavaScriptResourceXPage', 'jsxp', 'jsxp.script_id = v.res_id AND jsxp.xref_id = v.xref_id AND jsxp.page_id = page.id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'jsxp.page_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions', 'rbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceXPage', 'jsxp' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
																   'rbv.branch_id	= ?					AND
																	rbv.res_id		= ?					AND
																	rbv.head		= 1					AND
																	v.id			= rbv.version_id	AND
																	jsxp.script_id	= v.res_id			AND
																	jsxp.xref_id	= v.xref_id			AND
																	jsxp.page_id	= page.id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $
																   [ g.Module_Library_DB ].SQL_Query_Field( l.resource:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Query_Callback_With_CustomFields( l.search_query, l.filter, g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback_With_CustomFields( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_PageList_Load_Query_Filter', '', 'JSON_Page_CustomFields_Query_Filter', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy_Callback_With_CustomFields( l.search_query, l.sort, 'pv.secure,pv.public,pv.code,pv.name,pv.title,pv.cache,pv.admin,pv.layout,pv.fragment', 'pv.name;page.id', g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query_OrderBy' ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:notes OR l.ondemandcolumns:source OR l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions',	'mtbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateVersions',			'mtv' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtbv.branch_id	= ?				AND
																					mtbv.templ_id	= page.templ_id	AND
																					mtbv.head		= 1				AND
																					mtv.id			= mtbv.version_id',
																					[ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:notes }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes		AS template_notes' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:source }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source		AS template_source' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.settings	AS template_settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"					VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Pages', l.search_sql, l.search_fields, g.Offset, g.Count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00088', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.page_count" VALUE = 0>
	
	<MvEVAL EXPR = "{ JSON_Page_CustomFields_Initialize( l.filter, l.customfield_state ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Pages.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.page_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Read( l.page ) }">

			<MvIF EXPR = "{ l.ondemandcolumns:notes }">		<MvASSIGN NAME = "l.page:notes"		VALUE = "{ Pages.d.template_notes }">								</MvIF>
			<MvIF EXPR = "{ l.ondemandcolumns:source }">	<MvASSIGN NAME = "l.page:source"	VALUE = "{ Pages.d.template_source }">								</MvIF>
			<MvIF EXPR = "{ l.ondemandcolumns:settings }">	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ miva_array_deserialize( Pages.d.template_settings ) }">	</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.page_count ) }">
				"assigned": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( Pages.d.assigned ) }">,
				<MvEVAL EXPR = "{ JSON_Page_OnDemandColumns( l.page, l.ondemandcolumns ) }">
				<MvEVAL EXPR = "{ JSON_Page_CustomFields_With_Query( l.search_query, l.customfield_state, l.page, 'Pages' ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Pages" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Pages">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_LinkedPage_Update_Assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page:admin }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00347', 'An admin page cannot be assigned to a JavaScript resource' ) }">
	<MvELSEIF EXPR = "{ l.page:fragment }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00348', 'A fragment page cannot be assigned to a JavaScript resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'R', 'Assigned', l.assigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.currently_assigned" VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXPage_Load( l.scriptresource:id, l.page:id, l.null ) }">

	<MvIF EXPR = "{ NOT l.currently_assigned }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource Page Assignments' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ( NOT l.currently_assigned ) AND l.assigned }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXPage_Insert( l.scriptresource:id, l.page:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00091', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' assigned to page \'' $ l.page:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ l.currently_assigned AND ( NOT l.assigned ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXPage_Delete( l.scriptresource:id, l.page:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00092', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' removed from page \'' $ l.page:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_LinkedResourceGroupList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"			VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"			VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'rg.code', 'code' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.working_branch_id"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,
																'rg.*,
																 jsxg.group_id	AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ResourceGroups', 'rg' ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions',	'rbv',	'rbv.branch_id = ? AND rbv.res_id = ? AND rbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.scriptresource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'JavaScriptResourceVersions',			'v',	'v.id = rbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'JavaScriptResourceXGroup',			'jsxg',	'jsxg.script_id = v.res_id AND jsxg.xref_id = v.xref_id AND jsxg.group_id = rg.id', '' ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions',	'rbv',	'rbv.branch_id = ? AND rbv.res_id = ? AND rbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.scriptresource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'JavaScriptResourceVersions',			'v',	'v.id = rbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'JavaScriptResourceXGroup',			'jsxg',	'jsxg.script_id = v.res_id AND jsxg.xref_id = v.xref_id AND jsxg.group_id = rg.id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'jsxg.group_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions',	'rbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceVersions',			'v' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceXGroup',			'jsxg' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
																   'rbv.branch_id	= ?					AND
																	rbv.res_id		= ?					AND
																	rbv.head		= 1					AND
																	v.id			= rbv.version_id	AND
																	jsxg.script_id	= v.res_id			AND
																	jsxg.xref_id	= v.xref_id			AND
																	jsxg.group_id	= rg.id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) $ ',' $
																   [ g.Module_Library_DB ].SQL_Query_Field( l.scriptresource:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'rg.code', 'rg.id' ) }">

	<MvASSIGN NAME = "l.search_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ResourceGroups', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00093', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.output_count" VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ResourceGroups.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.output_count LT l.count ) ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
				"id":			<MvEVAL EXPR = "{ int( ResourceGroups.d.id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ResourceGroups.d.code ) }">",
				"assigned":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( ResourceGroups.d.assigned ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ResourceGroups" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ResourceGroups">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_LinkedResourceGroup_Update_Assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.JavaScriptResource_ID" 			VALUE = "{ int( g.JavaScriptResource_ID ) }">
	<MvASSIGN NAME = "g.ResourceGroup_ID" 				VALUE = "{ int( g.ResourceGroup_ID ) }">
	<MvASSIGN NAME = "g.Assigned" 						VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Assigned ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_ID( g.JavaScriptResource_ID, l.scriptresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00094', 'Failed to load script resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_ID( g.ResourceGroup_ID, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00095', 'Failed to load resource group' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.assigned" VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroup_Load( l.scriptresource:id, l.resourcegroup:id, l.null ) }">

	<MvIF EXPR = "{ NOT l.assigned }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Resource Group Assignments' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ( NOT l.assigned ) AND g.Assigned }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroup_Insert( l.scriptresource:id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00096', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' assigned to resource group \'' $ l.resourcegroup:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ l.assigned AND ( NOT g.Assigned ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroup_Delete( l.scriptresource:id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00097', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' removed from resource group \'' $ l.resourcegroup:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptCombinedResource_LinkedResourceList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptCombinedResource_Load( l.combinedresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"			VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"			VALUE = 0>
	<MvASSIGN NAME = "l.default_sort"		VALUE = "js.id">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.active',		'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_data',	'mod_data' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.working_branch_id"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,
																'js.id			AS id,
																 v.code			AS code,
																 js.templ_id	AS templ_id,
																 v.type			AS type,
																 v.is_global	AS is_global,
																 v.active		AS active,
																 v.file			AS file,
																 v.content_id	AS content_id,
																 v.mod_code		AS mod_code,
																 v.mod_data		AS mod_data,
																 v.attributes	AS attributes,
																 jsrxr.res_id	AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResources', 'js' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions', 'rbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
															   'rbv.branch_id	= ?					AND
																rbv.res_id		= js.id				AND
																rbv.head		= 1					AND
																v.id			= rbv.version_id	AND
																(
																	v.type			= \'L\' OR
																	v.type			= \'M\' OR
																	v.type			= \'Z\'
																)',
																[ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'JavaScriptCombinedResourceXResource', 'jsrxr', 'jsrxr.comb_id = ? AND jsrxr.res_id = v.res_id AND jsrxr.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.combinedresource:id ) ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'JavaScriptCombinedResourceXResource', 'jsrxr', 'jsrxr.comb_id = ? AND jsrxr.res_id = v.res_id AND jsrxr.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.combinedresource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'jsrxr.res_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvASSIGN NAME = "l.default_sort" VALUE = "jsrxr.disp_order">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptCombinedResourceXResource', 'jsrxr' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'jsrxr.comb_id = ? AND jsrxr.res_id = v.res_id AND jsrxr.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.combinedresource:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id:js.id,code:v.code,type:v.type,is_global:v.is_global,active:v.active,file:v.file,mod_code:v.mod_code,mod_data:v.mod_data', l.default_sort ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'JavaScriptResources', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00161', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvASSIGN NAME = "l.resource_count" VALUE = 0>

		<MvWHILE EXPR = "{ ( NOT JavaScriptResources.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.resource_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Read( l.scriptresource ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.resource_count ) }">
				<MvEVAL EXPR = "{ JSON_JavaScriptResource( l.scriptresource ) }">
				, "assigned": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( JavaScriptResources.d.assigned ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "JavaScriptResources" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptCombinedResource_LinkedResource_Update_Assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptCombinedResource_Load( l.combinedresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'o', 'Assigned', l.assigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Value_In_List( l.scriptresource:type, 'L,M,Z' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00162', 'Loaded JavaScript Resource is not of type \'Local File\', \'Module\' or \'Module (Managed)\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'JavaScript Combined Resource Assignments' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptCombinedResourceXResource_Load( l.combinedresource:id, l.scriptresource:id, l.null ) }">
		<MvIF EXPR = "{ NOT l.assigned }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptCombinedResourceXResource_Delete( l.combinedresource:id, l.scriptresource:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00163', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' removed from combined resource \'' $ l.combinedresource:code $ '\'' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptCombinedResourceXResource_Insert( l.combinedresource:id, l.scriptresource:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00164', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' assigned to combined resource \'' $ l.combinedresource:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptCombinedResource_LinkedResourceList_DisplayOrder_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_JavaScriptCombinedResource_Load( l.combinedresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.scriptresource_order" ARRAY = "l.scriptresource_order_list" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'JavaScriptResource_Order', l.scriptresource_order_list ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.scriptresource_order, 'R', 'id',				l.change:res_id ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.scriptresource_order, 'R', 'offset',			l.change:offset ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.scriptresource_order, 'R', 'original_offset',	l.change:original_offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.change:offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Order[' $ l.pos $ ']', g.Validation_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.change_count" VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.change_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'Combined JavaScript Resource Linked Resource Display Order Update' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptCombinedResourceXResource_Update_Offsets( l.combinedresource:id, l.changes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00165', 'JavaScript Resource sort order updated for JavaScript Combined Resource \'' $ l.combinedresource:code $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptCombinedResource_Output" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ JSON_JavaScriptResource_Output() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Output" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ JSON_JavaScriptCombinedResource_Loaders_Present() }">
		<MvIF EXPR = "{ NOT JSON_JavaScriptCombinedResource_Load( l.scriptresource ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSEIF EXPR = "{ NOT JSON_JavaScriptResource_Load( l.scriptresource ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'M' }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.scriptresource:mod_code, l.module )	OR
						NOT l.module:active																						OR
						NOT l.module:feature_hash:jsresource }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvEVAL EXPR = "{ JSON_JavaScriptResource_Output_Render_Headers() }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].JavaScriptResourceModule_Resource_Render( l.module, l.scriptresource ) }">
	<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( l.scriptresource:content_id, l.managedcontent ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvEVAL EXPR = "{ JSON_JavaScriptResource_Output_Render_Headers() }">
		<MvEVAL EXPR = "{ l.managedcontent:content }">
	<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'C' }">
		<MvEVAL EXPR = "{ JSON_JavaScriptResource_Output_Render_Headers() }">

		<MvFOREACH INDEX = "l.linked_scriptresource_pos" ITERATOR = "l.linked_scriptresource" ARRAY = "l.linked_scriptresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].Runtime_JavaScriptResourceList_Load_CombinedResource( l.scriptresource:id, l.linked_scriptresources ) }">
			<MvIF EXPR = "{ l.linked_scriptresource:type EQ 'L' }">
				<MvASSIGN NAME = "l.local_file_path" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.linked_scriptresource:file ) }">

				<MvIF EXPR = "{ file_read( l.local_file_path, 'script', l.loaded_file_data ) NE -1 }">
					<MvIF EXPR = "{ l.linked_scriptresource_pos GT 1 }">
						<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
					</MvIF>

					<MvEVAL EXPR = "{ l.loaded_file_data }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.linked_scriptresource:type EQ 'M' }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.linked_scriptresource:mod_code, l.module ) }">	<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:active }">																							<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:feature_hash:jsresource }">																		<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ l.linked_scriptresource_pos GT 1 }">
					<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
				</MvIF>

				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].JavaScriptResourceModule_Resource_Render( l.module, l.linked_scriptresource ) }">
			<MvELSEIF EXPR = "{ l.linked_scriptresource:type EQ 'Z' }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( l.linked_scriptresource:content_id, l.managedcontent ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ l.linked_scriptresource_pos GT 1 }">
					<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
				</MvIF>

				<MvEVAL EXPR = "{ l.managedcontent:content }">
			</MvIF>
		</MvFOREACH>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResource_Output_Render_Headers" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Content-Type', 'text/javascript' ) }">

	<MvIF EXPR = "{ NOT ISNULL g.T }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Expires',			[ g.Module_Clientside ].FormatTime( s.time_t + 31536000 ) ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Cache-Control',	'max-age=31536000' ) }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| CSS Resources
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_CSSResource" PARAMETERS = "cssresource var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.cssresource:id ) }">,
	"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:code ) }">",
	"type":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:type ) }">",
	"is_global":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.cssresource:is_global ) }">,
	"active":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.cssresource:active ) }">,
	"file":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:file ) }">",
	"content_id":	<MvEVAL EXPR = "{ int( l.cssresource:content_id ) }">,
	"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:mod_code ) }">",
	"mod_data":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:mod_data ) }">",
	"templ_id":		<MvEVAL EXPR = "{ int( l.cssresource:templ_id ) }">,
	"attributes":
	[
		<MvASSIGN NAME = "l.attribute_count" VALUE = 0>

		<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.cssresource:attributes">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
				"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
				"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResourceList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.active',		'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_data',	'mod_data' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.working_branch_id"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,
																'r.id			AS id,
																 v.code			AS code,
																 r.templ_id		AS templ_id,
																 v.type			AS type,
																 v.is_global	AS is_global,
																 v.active		AS active,
																 v.file			AS file,
																 v.content_id	AS content_id,
																 v.mod_code		AS mod_code,
																 v.mod_data		AS mod_data,
																 v.attributes	AS attributes' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'rbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResources', 'r' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceVersions', 'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
															   'rbv.branch_id	= ?				AND
																rbv.res_id		= r.id			AND
																rbv.head		= 1				AND
																v.id			= rbv.version_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id:r.id,code:v.code,type:v.type,is_global:v.is_global,active:v.active,file:v.file,mod_code:v.mod_code,mod_data:v.mod_data', 'r.id' ) }">

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'CSSResources', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00098', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.resource_count"	VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT CSSResources.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.resource_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].CSSResource_Read( l.cssresource ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.resource_count ) }">
				<MvEVAL EXPR = "{ JSON_CSSResource( l.cssresource ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "CSSResources" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Load" PARAMETERS = "cssresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'CSSResource_ID', l.cssresource_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_ID( l.cssresource_id, l.cssresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00166', 'CSS Resource not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_CSSResource', l.cssresource_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Code( l.cssresource_code, l.cssresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00167', 'CSS Resource not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'CSSResource_Code', l.cssresource_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Code( l.cssresource_code, l.cssresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00168', 'CSS Resource not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00169', 'Unable to load CSS Resource: One of CSSResource_ID, Edit_CSSResource or CSSResource_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSCombinedResource_Loaders_Present" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'CSSCombinedResource_ID' ) }">			<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Edit_CSSCombinedResource' ) }">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'CSSCombinedResource_Code' ) }">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSCombinedResource_Load" PARAMETERS = "combinedresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'CSSCombinedResource_ID', l.combinedresource_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_ID( l.combinedresource_id, l.combinedresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00170', 'CSS Combined Resource not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_CSSCombinedResource', l.combinedresource_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Code( l.combinedresource_code, l.combinedresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00171', 'CSS Combined Resource not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'CSSCombinedResource_Code', l.combinedresource_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Code( l.combinedresource_code, l.combinedresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00172', 'CSS Combined Resource not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00173', 'Unable to load CSS Combined Resource: One of CSSCombinedResource_ID, Edit_CSSCombinedResource or CSSCombinedResource_Code must be specified' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.combinedresource:type NE 'C' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00174', 'Loaded CSS Combined Resource is not of type \'Combined Resource\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.resource_global"		VALUE = 0>
	<MvASSIGN NAME = "l.resource_active"		VALUE = 0>
	<MvASSIGN NAME = "l.resource_file"			VALUE = "">
	<MvASSIGN NAME = "l.resource_attributes"	VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'R',		'CSSResource_Code',			l.resource_code )									OR
					NOT [ g.Module_JSON ].JSON_Input_List(		'R',		'CSSResource_Type',			l.resource_type,	'C,L,E,I,M,Y', 'C,L,E,I,M,Y' )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',		'CSSResource_Global',		l.resource_global )									OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',		'CSSResource_Active',		l.resource_active )									OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o:254',	'CSSResource_File_Path',	l.resource_file ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.resource_type EQ 'M' OR l.resource_type EQ 'Y' }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R',		'CSSResource_Module_Code', l.module_code ) OR
						NOT [ g.Module_JSON ].JSON_Input_Text( 'R:100',	'CSSResource_Module_Data', l.module_data ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Module_Code', 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Module_Code', 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cssresource }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Module_Code', 'Module \'' $ l.module_code $ '\' does not implement the cssresource feature' ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'CSSResource_Attributes', l.attributes ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'R', 'name',	l.resource_attribute:name ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'o', 'value',	l.resource_attribute:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.resource_attribute_count" VALUE = "{ miva_array_insert( l.resource_attributes, l.resource_attribute, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Code( l.resource_code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Code', 'Code \'' $ l.resource_code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.resource_type EQ 'L' OR l.resource_type EQ 'E' ) AND ISNULL l.resource_file }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_File_Path', 'Please specify a file path' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource \'' $ l.resource_code $ '\' created' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>
		
	<MvIF EXPR = "{ l.resource_type EQ 'C' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Create_Type_Combined( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'I' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Create_Type_InlineCSS( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.empty_template, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'L' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Create_Type_LocalFile( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.resource_file, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'E' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Create_Type_ExternalFile( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.resource_file, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'M' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Create_Type_Module( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.module:code, l.module_data, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.resource_type EQ 'Y' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Create_Type_ModuleInline( l.resource_code, l.resource_attributes, l.resource_global, l.resource_active, l.module:code, l.module_data, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00100', 'CSS Resource \'' $ l.cssresource:code $ '\' inserted on branch \'' $ g.Store:branch:name $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_CSSResource( l.cssresource ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_cssresource" VALUE = "{ l.cssresource }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'O',		'CSSResource_Code',			l.cssresource:code )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',		'CSSResource_Global',		l.cssresource:is_global )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o',		'CSSResource_Active',		l.cssresource:active )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o:254',	'CSSResource_File_Path',	l.cssresource:file ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ ( l.cssresource:type EQ 'M' OR l.cssresource:type EQ 'Y' ) AND
					( [ g.Module_JSON ].JSON_Input_Exists( 'CSSResource_Module_Code' ) OR [ g.Module_JSON ].JSON_Input_Exists( 'CSSResource_Module_Data' ) ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R',		'CSSResource_Module_Code', l.module_code ) OR
						NOT [ g.Module_JSON ].JSON_Input_Text( 'R:100',	'CSSResource_Module_Data', l.module_data ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Module_Code', 'Module \'' $ l.module_code $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Module_Code', 'Module \'' $ l.module_code $ '\' is inactive' ) }">
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cssresource }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Module_Code', 'Module \'' $ l.module_code $ '\' does not implement the cssresource feature' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.cssresource:mod_code" VALUE = "{ l.module:code }">
		<MvASSIGN NAME = "l.cssresource:mod_data" VALUE = "{ l.module_data }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'CSSResource_Attributes' ) }">
		<MvASSIGN NAME = "l.cssresource:attributes" VALUE = "">

		<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'CSSResource_Attributes', l.attributes ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'R', 'name',	l.resource_attribute:name ) OR
							NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'o', 'value',	l.resource_attribute:value ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
			</MvIF>

			<MvASSIGN NAME = "l.cssresource:attribute_count" VALUE = "{ miva_array_insert( l.cssresource:attributes, l.resource_attribute, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Code( l.cssresource:code, l.existing_cssresource ) AND
					l.cssresource:id NE l.existing_cssresource:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Code', 'Code \'' $ l.existing_cssresource:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.cssresource:type EQ 'L' OR l.cssresource:type EQ 'E' ) AND ISNULL l.cssresource:file }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_File_Path', 'Please specify a file path' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'L' AND l.original_cssresource:file NE l.cssresource:file }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Capture_External_Modification_CSSResource( l.original_cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Set_ResourceManagedContent_FromFile( l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource \'' $ l.cssresource:code $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Update( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00101', 'CSS Resource \'' $ l.cssresource:code $ '\' updated' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Update_Global" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Global" VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Global ) }">

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cssresource:is_global" VALUE = "{ g.Global }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource \'' $ l.cssresource:code $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Update( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00102', 'CSS Resource \'' $ l.cssresource:code $ '\' global state set to \'' $ l.cssresource:is_global $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Update_Active" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.Active" VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Active ) }">

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cssresource:active" VALUE = "{ g.Active }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource \'' $ l.cssresource:code $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Update( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00103', 'CSS Resource \'' $ l.cssresource:code $ '\' active state set to \'' $ l.cssresource:active $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Update_Attributes" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cssresource:attributes" VALUE = "">

	<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'CSSResource_Attributes', l.attributes ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'R', 'name',	l.resource_attribute:name ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'o', 'value',	l.resource_attribute:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.cssresource:attribute_count" VALUE = "{ miva_array_insert( l.cssresource:attributes, l.resource_attribute, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource \'' $ l.cssresource:code $ '\' attributes updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Update( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00104', 'CSS Resource \'' $ l.cssresource:code $ '\' attributes updated' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Generate_SRI" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_List( 'R', 'Integrity_Type', l.integrity_type, 'ALL,SHA256,SHA384,SHA512', 'ALL,SHA256,SHA384,SHA512' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type NE 'C' AND l.cssresource:type NE 'E' AND l.cssresource:type NE 'L' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00175', 'CSS resource must be one of type \'Combined Resource\', \'Local File\', or \'External File\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'C' }">
		<MvCAPTURE VARIABLE = "l.resource_data" STANDARDOUTPUTLEVEL = "">
			<MvFOREACH INDEX = "l.linked_cssresource_pos" ITERATOR = "l.linked_cssresource" ARRAY = "l.linked_cssresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].Runtime_CSSResourceList_Load_CombinedResource( l.cssresource:id, l.linked_cssresources ) }">
				<MvIF EXPR = "{ l.linked_cssresource:type EQ 'L' }">
					<MvASSIGN NAME = "l.local_file_path" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.linked_cssresource:file ) }">

					<MvIF EXPR = "{ file_read( l.local_file_path, 'script', l.loaded_file_data ) NE -1 }">
						<MvIF EXPR = "{ l.linked_cssresource_pos GT 1 }">
							<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
						</MvIF>

						<MvEVAL EXPR = "{ l.loaded_file_data }">
					</MvIF>
				<MvELSEIF EXPR = "{ l.linked_cssresource:type EQ 'M' }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.linked_cssresource:mod_code, l.module ) }">	<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ NOT l.module:active }">																						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cssresource }">																	<MvFOREACHCONTINUE>
					</MvIF>

					<MvIF EXPR = "{ l.linked_cssresource_pos GT 1 }">
						<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
					</MvIF>

					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].CSSResourceModule_Resource_Render( l.module, l.linked_cssresource ) }">
				</MvIF>
			</MvFOREACH>
		</MvCAPTURE>
	<MvELSEIF EXPR = "{ l.cssresource:type EQ 'L' }">
		<MvASSIGN NAME = "l.local_file_path" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.cssresource:file ) }">

		<MvIF EXPR = "{ file_read( l.local_file_path, 'script', l.resource_data ) EQ -1 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00176', 'CSS resource file not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.cssresource:type EQ 'E' }">
		<MvIF EXPR = "{ ( '//' IN l.cssresource:file ) EQ 1 }">		<MvASSIGN NAME = "l.url" VALUE = "{ 'https:' $ l.cssresource:file }">
		<MvELSE>													<MvASSIGN NAME = "l.url" VALUE = "{ l.cssresource:file }">
		</MvIF>

		<MIVA MvCALL_ERROR = "nonfatal, nodisplay">

		<MvCAPTURE VARIABLE = "l.resource_data" STANDARDOUTPUTLEVEL = "">
			<MvCALL METHOD	= "GET"
					ACTION	= "{ l.url }"
					FLAGS	= "noparse">
				<MvEVAL EXPR = "{ s.callvalue }">
			</MvCALL>
		</MvCAPTURE>

		<MIVA MvCALL_ERROR = "fatal, display">

		<MvIF EXPR = "{ g.MvCALL_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00177', g.MvCALL_Error ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.integrity_type EQ 'SHA256' OR l.integrity_type EQ 'ALL' }">
		<MvIF EXPR = "{ NOT crypto_evp_digest( 'sha256', l.resource_data, l.resource_data_sha256 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00178', crypto_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.base64_resource_data_sha256"	VALUE = "{ crypto_base64_encode( l.resource_data_sha256 ) }">
	</MvIF>

	<MvIF EXPR = "{ l.integrity_type EQ 'SHA384' OR l.integrity_type EQ 'ALL' }">
		<MvIF EXPR = "{ NOT crypto_evp_digest( 'sha384', l.resource_data, l.resource_data_sha384 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00179', crypto_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.base64_resource_data_sha384"	VALUE = "{ crypto_base64_encode( l.resource_data_sha384 ) }">
	</MvIF>

	<MvIF EXPR = "{ l.integrity_type EQ 'SHA512' OR l.integrity_type EQ 'ALL' }">
		<MvIF EXPR = "{ NOT crypto_evp_digest( 'sha512', l.resource_data, l.resource_data_sha512 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00180', crypto_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.base64_resource_data_sha512"	VALUE = "{ crypto_base64_encode( l.resource_data_sha512 ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_array_search( l.cssresource:attributes, 1, l.attribute, 'tolower( l.attribute:name ) EQ \'crossorigin\'' ) }">
		<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "{ l.attribute }">
	<MvELSE>
		<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "">
		<MvASSIGN NAME = "l.crossorigin_attribute:name"		VALUE = "crossorigin">
		<MvASSIGN NAME = "l.crossorigin_attribute:value"	VALUE = "anonymous">
	</MvIF>

	<MvASSIGN NAME = "l.integrity_attribute"				VALUE = "">
	<MvASSIGN NAME = "l.integrity_attribute:name"			VALUE = "integrity">

	<MvIF EXPR = "{ l.integrity_type EQ 'SHA256' }">		<MvASSIGN NAME = "l.integrity_attribute:value" VALUE = "{ 'sha256-' $ l.base64_resource_data_sha256 }">
	<MvELSEIF EXPR = "{ l.integrity_type EQ 'SHA384' }">	<MvASSIGN NAME = "l.integrity_attribute:value" VALUE = "{ 'sha384-' $ l.base64_resource_data_sha384 }">
	<MvELSEIF EXPR = "{ l.integrity_type EQ 'SHA512' }">	<MvASSIGN NAME = "l.integrity_attribute:value" VALUE = "{ 'sha512-' $ l.base64_resource_data_sha512 }">
	<MvELSE>												<MvASSIGN NAME = "l.integrity_attribute:value" VALUE = "{ 'sha256-' $ l.base64_resource_data_sha256 $ ' sha384-' $ l.base64_resource_data_sha384 $ ' sha512-' $ l.base64_resource_data_sha512 }">
	</MvIF>

	<MvASSIGN NAME = "l.attribute_count"					VALUE = "{ miva_array_filter( l.cssresource:attributes, 1, l.attribute, '( tolower( l.attribute:name ) NE \'integrity\' ) AND ( tolower( l.attribute:name ) NE \'crossorigin\' )', l.attributes ) }">
	<MvASSIGN NAME = "l.attribute_count"					VALUE = "{ miva_array_insert( l.attributes, l.integrity_attribute, -1 ) }">
	<MvASSIGN NAME = "l.attribute_count"					VALUE = "{ miva_array_insert( l.attributes, l.crossorigin_attribute, -1 ) }">
	<MvASSIGN NAME = "l.cssresource:attributes"				VALUE = "{ l.attributes }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource \'' $ l.cssresource:code $ '\' SRI attributes generated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Update( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00181', 'CSS Resource \'' $ l.cssresource:code $ '\': Generated SRI integrity attributes with type \'' $ l.integrity_type $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_CSSResource( l.cssresource ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Clear_SRI" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.attribute_count" VALUE = "{ miva_array_filter( l.cssresource:attributes, 1, l.attribute, '( tolower( l.attribute:name ) NE \'crossorigin\' ) AND ( tolower( l.attribute:name ) NE \'integrity\' )', l.cssresource:attributes ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource \'' $ l.cssresource:code $ '\' SRI attributes cleared' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Update( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00182', 'CSS Resource \'' $ l.cssresource:code $ '\': Cleared SRI integrity attributes' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_CSSResource( l.cssresource ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'Z' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00304', 'Resource of type "Module (Managed)" cannot be deleted' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Delete_CSSResource( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00105', 'CSS Resource \'' $ l.cssresource:code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResourceList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.css_id" ARRAY = "l.css_ids" COUNT = "{ [ g.Module_JSON ].JSON_Array_Integer( g.CSSResource_IDs, l.css_ids ) }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_ID( l.css_id, l.cssresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ l.cssresource:type EQ 'Z' }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.css_id, 'MER-TUI-JSN-00305', 'Resource of type "Module (Managed)" cannot be deleted', l.errors ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Delete_CSSResource( l.cssresource ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.css_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00106', 'CSS Resource \'' $ l.cssresource:code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Upload_ValidateFileUpload" PARAMETERS = "field, filename, content_type" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN VALUE = -1>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = -1>	</MvIF>

	<MvCOMMENT>
	|
	| If more than one uploaded file is present in a single call, just ignore it.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( NOT ISNULL g.Filename ) OR ( NOT ISNULL g.File_MD5 ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Upload_ProcessFileUpload" PARAMETERS = "field, filename, status, tempfile, content_type, size" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_ProcessFileUpload( 'Processed upload for CSS Resource file', l.field, l.filename, l.status, l.tempfile, l.content_type, l.size ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Upload" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_ValidateUploadedFile( l.uploaded_tempfile ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.result"		VALUE = "{ JSON_CSSResource_Upload_LowLevel( l.uploaded_tempfile ) }">
	<MvASSIGN NAME = "l.null"		VALUE = "{ fdelete( l.uploaded_tempfile ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Upload_LowLevel" PARAMETERS = "uploaded_tempfile" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Extension_ToLowerCase( g.Filename, 'css', l.extension ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00211', 'CSS Resource uploaded with an invalid extension for file \'' $ g.Filename $ '\' at path \'' $ l.uploaded_tempfile $ '\'' ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00114', '\'' $ l.extension $ '\' is not a valid css extension' ) }">
	</MvIF>

	<MvASSIGN NAME = "g.FileUpload_Overwrite"	VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.FileUpload_Overwrite ) }">
	<MvASSIGN NAME = "l.filename"				VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Filename ) }">
	<MvASSIGN NAME = "l.css_dir"				VALUE = "{ 'css/' $ padl( g.Store:id, 8, '0' ) $ '/' }">

	<MvASSIGN NAME = "l.working_branch_id"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.working_branch_id, l.working_branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.working_branch:tmpldir }">
		<MvASSIGN NAME = "l.css_dir"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.css_dir, l.working_branch:tmpldir ) }">
	</MvIF>

	<MvASSIGN NAME = "l.root_css_dir"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.css_dir ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.root_css_dir ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.root_css_dir, '0755' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ sexists( l.root_css_dir $ l.filename ) }">
		<MvIF EXPR = "{ NOT g.FileUpload_Overwrite }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00115', 'CSS Resource file \'' $ l.filename $ '\' already exists, not overwritten' ) }">
		<MvELSE>
			<MvIF EXPR = "{ NOT sdelete( l.root_css_dir $ l.filename ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00116', 'Unable to delete CSS Resource file \'' $ l.filename $ '\': ' $ file_last_error() ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT fsrename( l.uploaded_tempfile, l.root_css_dir $ l.filename ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00117', 'Unable to rename CSS Resource file \'' $ l.uploaded_tempfile $ '\' to \'' $ l.filename $ '\': ' $ file_last_error() ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ schmod( l.root_css_dir $ l.filename, '0644' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00113', 'CSS Resource file \'' $ l.css_dir $ l.filename $ '\' uploaded.' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"file_path": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.css_dir $ l.filename ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_File_Update" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_cssresource" VALUE = "{ l.cssresource }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Binary( 'R', 'File_Source', l.source ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Capture_External_Modification_CSSResource( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.full_file_path" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.cssresource:file ) }">

	<MvIF EXPR = "{ NOT sexists( l.full_file_path ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00215', 'File not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ file_overwrite( l.full_file_path, 'script', l.source ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00216', 'Failed to write to file: ' $ file_last_error() ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00217', 'CSS Resource \'' $ l.cssresource:code $ '\' file \'' $ l.cssresource:file $ '\' updated' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_FindOrInsert( l.source, l.managedcontent ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.cssresource:content_id" VALUE = "{ l.managedcontent:id }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource \'' $ l.cssresource:code $ '\' file \'' $ l.cssresource:file $ '\' updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Update( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_File_Load" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_File_Load_LowLevel( 'CSS Resource File Load', l.cssresource:file ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_TemplateVersion_Update" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_TemplateVersion_Update_LowLevel( l.cssresource:templ_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_TemplateVersion_Load" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.TemplateVersion_ID" VALUE = "{ int( g.TemplateVersion_ID ) }">

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_TemplateVersion_Load_LowLevel( l.cssresource:templ_id, g.TemplateVersion_ID ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_TemplateVersionList_Load_Template" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ JSON_TemplateVersionList_Load_Template_LowLevel( l.cssresource:templ_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_LinkedPageList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Loaders_Present() }">
		<MvASSIGN NAME = "l.branch"			VALUE = "{ g.Store:branch }">
	<MvELSEIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.resource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"			VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"			VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.name',		'name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.secure',	'secure' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.public',	'public' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.title',		'title' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'pv.cache',		'cache' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.admin',		'admin' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.layout',	'layout' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'pv.fragment',	'fragment' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>
	
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'page.*,
																				 pv.id			AS version_id,
																				 pv.xref_id		AS version_xref_id,
																				 pv.user_id		AS version_user_id,
																				 pv.admin		AS version_admin,
																				 pv.layout		AS version_layout,
																				 pv.fragment	AS version_fragment,
																				 pv.secure		AS version_secure,
																				 pv.public		AS version_public,
																				 pv.code		AS version_code,
																				 pv.name		AS version_name,
																				 pv.title		AS version_title,
																				 pv.ui_id		AS version_ui_id,
																				 pv.cache		AS version_cache,
																				 pv.cacheset	AS version_cacheset,
																		  		 cxp.page_id	AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageBranchVersions', 'pbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Pages', 'page' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'PageVersions', 'pv' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
															   'pbv.branch_id	= ?					AND
															    pbv.head		= 1					AND
																page.id			= pbv.page_id		AND
																pv.id			= pbv.version_id	AND
																pv.admin		= 0					AND
																pv.fragment		= 0',
															    [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'rbv', 'rbv.branch_id = ? AND rbv.res_id = ? AND rbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.resource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'CSSResourceVersions', 'v', 'v.id = rbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'CSSResourceXPage', 'cxp', 'cxp.css_id = v.res_id AND cxp.xref_id = v.xref_id AND cxp.page_id = page.id', '' ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'rbv', 'rbv.branch_id = ? AND rbv.res_id = ? AND rbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.resource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'CSSResourceVersions', 'v', 'v.id = rbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'page', g.Store_Table_Prefix $ 'CSSResourceXPage', 'cxp', 'cxp.css_id = v.res_id AND cxp.xref_id = v.xref_id AND cxp.page_id = page.id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cxp.page_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'rbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceVersions', 'v' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceXPage', 'cxp' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
																   'rbv.branch_id	= ?					AND
																	rbv.res_id		= ?					AND
																	rbv.head		= 1					AND
																	v.id			= rbv.version_id	AND
																	cxp.css_id		= v.res_id			AND
																	cxp.xref_id		= v.xref_id			AND
																	cxp.page_id		= page.id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) $ ',' $
																   [ g.Module_Library_DB ].SQL_Query_Field( l.resource:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Query_Callback_With_CustomFields( l.search_query, l.filter, g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback_With_CustomFields( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_PageList_Load_Query_Filter', '', 'JSON_Page_CustomFields_Query_Filter', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy_Callback_With_CustomFields( l.search_query, l.sort, 'pv.secure,pv.public,pv.code,pv.name,pv.title,pv.cache,pv.admin,pv.layout,pv.fragment', 'pv.name;page.id', g.Module_Feature_TUI_JSON, 'JSON_Page_CustomFields_Query_OrderBy' ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:notes OR l.ondemandcolumns:source OR l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions',	'mtbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateVersions',			'mtv' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtbv.branch_id	= ?				AND
																					mtbv.templ_id	= page.templ_id	AND
																					mtbv.head		= 1				AND
																					mtv.id			= mtbv.version_id',
																					[ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:notes }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes		AS template_notes' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:source }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source		AS template_source' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.settings	AS template_settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Pages', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00118', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.page_count" VALUE = 0>
	
	<MvEVAL EXPR = "{ JSON_Page_CustomFields_Initialize( l.filter, l.customfield_state ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Pages.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.page_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Read( l.page ) }">

			<MvIF EXPR = "{ l.ondemandcolumns:notes }">		<MvASSIGN NAME = "l.page:notes"		VALUE = "{ Pages.d.template_notes }">								</MvIF>
			<MvIF EXPR = "{ l.ondemandcolumns:source }">	<MvASSIGN NAME = "l.page:source"	VALUE = "{ Pages.d.template_source }">								</MvIF>
			<MvIF EXPR = "{ l.ondemandcolumns:settings }">	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ miva_array_deserialize( Pages.d.template_settings ) }">	</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.page_count ) }">
				"assigned": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( Pages.d.assigned ) }">,
				<MvEVAL EXPR = "{ JSON_Page_OnDemandColumns( l.page, l.ondemandcolumns ) }">
				<MvEVAL EXPR = "{ JSON_Page_CustomFields_With_Query( l.search_query, l.customfield_state, l.page, 'Pages' ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Pages" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Pages">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_LinkedPage_Update_Assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.page:admin }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00349', 'An admin page cannot be assigned to a CSS resource' ) }">
	<MvELSEIF EXPR = "{ l.page:fragment }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00350', 'A fragment page cannot be assigned to a CSS resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'R', 'Assigned', l.assigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.currently_assigned" VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceXPage_Load( l.cssresource:id, l.page:id, l.null ) }">

	<MvIF EXPR = "{ NOT l.currently_assigned }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource Page Assignments' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ( NOT l.currently_assigned ) AND l.assigned }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXPage_Insert( l.cssresource:id, l.page:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00121', 'CSS Resource \'' $ l.cssresource:code $ '\' assigned to page \'' $ l.page:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ l.currently_assigned AND ( NOT l.assigned ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXPage_Delete( l.cssresource:id, l.page:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00122', 'CSS Resource \'' $ l.cssresource:code $ '\' removed from page \'' $ l.page:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_LinkedResourceGroupList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"			VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"			VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'rg.code', 'code' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.working_branch_id"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,
																'rg.*,
																 cxg.group_id	AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ResourceGroups', 'rg' ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'rbv', 'rbv.branch_id = ? AND rbv.res_id = ? AND rbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.cssresource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'CSSResourceVersions', 'v', 'v.id = rbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'CSSResourceXGroup', 'cxg', 'cxg.css_id = v.res_id AND cxg.xref_id = v.xref_id AND cxg.group_id = rg.id', '' ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'rbv', 'rbv.branch_id = ? AND rbv.res_id = ? AND rbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) $ ',' $ [ g.Module_Library_DB ].SQL_Query_Field( l.cssresource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'CSSResourceVersions', 'v', 'v.id = rbv.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'rg', g.Store_Table_Prefix $ 'CSSResourceXGroup', 'cxg', 'cxg.css_id = v.res_id AND cxg.xref_id = v.xref_id AND cxg.group_id = rg.id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cxg.group_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'rbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceVersions', 'v' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceXGroup', 'cxg' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
																   'rbv.branch_id	= ?					AND
																	rbv.res_id		= ?					AND
																	rbv.head		= 1					AND
																	v.id			= rbv.version_id	AND
																	cxg.css_id		= v.res_id			AND
																	cxg.xref_id		= v.xref_id			AND
																	cxg.group_id = rg.id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) $ ',' $
																   [ g.Module_Library_DB ].SQL_Query_Field( l.cssresource:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'rg.code', 'rg.id' ) }">

	<MvASSIGN NAME = "l.search_sql"				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ResourceGroups', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00123', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.output_count" VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ResourceGroups.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.output_count LT l.count ) ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
				"id":			<MvEVAL EXPR = "{ int( ResourceGroups.d.id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ResourceGroups.d.code ) }">",
				"assigned":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( ResourceGroups.d.assigned ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ResourceGroups" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ResourceGroups">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_LinkedResourceGroup_Update_Assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.CSSResource_ID" 		VALUE = "{ int( g.CSSResource_ID ) }">
	<MvASSIGN NAME = "g.ResourceGroup_ID" 		VALUE = "{ int( g.ResourceGroup_ID ) }">
	<MvASSIGN NAME = "g.Assigned" 				VALUE = "{ [ g.Module_Admin ].Trim_Boolean( g.Assigned ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_ID( g.CSSResource_ID, l.cssresource ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00124', 'Failed to load css resource' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_ID( g.ResourceGroup_ID, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00125', 'Failed to load resource group' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.assigned" VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Load( l.cssresource:id, l.resourcegroup:id, l.null ) }">

	<MvIF EXPR = "{ NOT l.assigned }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Resource Group Assignments' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ( NOT l.assigned ) AND g.Assigned }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Insert( l.cssresource:id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00126', 'CSS Resource \'' $ l.cssresource:code $ '\' assigned to resource group \'' $ l.resourcegroup:code $ '\'' ) }">
	<MvELSEIF EXPR = "{ l.assigned AND ( NOT g.Assigned ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Delete( l.cssresource:id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00127', 'CSS Resource \'' $ l.cssresource:code $ '\' removed from resource group \'' $ l.resourcegroup:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSCombinedResource_LinkedResourceList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSCombinedResource_Load( l.combinedresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"			VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"			VALUE = 0>
	<MvASSIGN NAME = "l.default_sort"		VALUE = "css.id">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.active',		'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_data',	'mod_data' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.working_branch_id"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,
																'css.id			AS id,
																 v.code			AS code,
																 css.templ_id	AS templ_id,
																 v.type			AS type,
																 v.is_global	AS is_global,
																 v.active		AS active,
																 v.file			AS file,
																 v.content_id	AS content_id,
																 v.mod_code		AS mod_code,
																 v.mod_data		AS mod_data,
																 v.attributes	AS attributes,
																 cssrxr.res_id	AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResources', 'css' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'rbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceVersions', 'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
															   'rbv.branch_id	= ?					AND
																rbv.res_id		= css.id			AND
																rbv.head		= 1					AND
																v.id			= rbv.version_id	AND
																(
																	v.type			= \'L\' OR
																	v.type			= \'M\' OR
																	v.type			= \'Z\'
																)',
																[ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'CSSCombinedResourceXResource', 'cssrxr', 'cssrxr.comb_id = ? AND cssrxr.res_id = v.res_id AND cssrxr.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.combinedresource:id ) ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'CSSCombinedResourceXResource', 'cssrxr', 'cssrxr.comb_id = ? AND cssrxr.res_id = v.res_id AND cssrxr.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.combinedresource:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cssrxr.res_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvASSIGN NAME = "l.default_sort" VALUE = "cssrxr.disp_order">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSCombinedResourceXResource', 'cssrxr' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cssrxr.comb_id = ? AND cssrxr.res_id = v.res_id AND cssrxr.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.combinedresource:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id:css.id,code:v.code,type:v.type,is_global:v.is_global,active:v.active,file:v.file,mod_code:v.mod_code,mod_data:v.mod_data', l.default_sort ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'CSSResources', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00183', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvASSIGN NAME = "l.resource_count" VALUE = 0>

		<MvWHILE EXPR = "{ ( NOT CSSResources.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.resource_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].CSSResource_Read( l.cssresource ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.resource_count ) }">
				<MvEVAL EXPR = "{ JSON_CSSResource( l.cssresource ) }">
				, "assigned": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( CSSResources.d.assigned ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "CSSResources" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSCombinedResource_LinkedResource_Update_Assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSCombinedResource_Load( l.combinedresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'o', 'Assigned', l.assigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Value_In_List( l.cssresource:type, 'L,M,Z' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00184', 'Loaded CSS Resource is not of type \'Local File\', \'Module\' or \'Module (Managed)\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'CSS Combined Resource Assignments' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].CSSCombinedResourceXResource_Load( l.combinedresource:id, l.cssresource:id, l.null ) }">
		<MvIF EXPR = "{ NOT l.assigned }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSCombinedResourceXResource_Delete( l.combinedresource:id, l.cssresource:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00185', 'CSS Resource \'' $ l.cssresource:code $ '\' removed from combined resource \'' $ l.combinedresource:code $ '\'' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSCombinedResourceXResource_Insert( l.combinedresource:id, l.cssresource:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00186', 'CSS Resource \'' $ l.cssresource:code $ '\' assigned to combined resource \'' $ l.combinedresource:code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSCombinedResource_LinkedResourceList_DisplayOrder_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_CSSCombinedResource_Load( l.combinedresource ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.cssresource_order" ARRAY = "l.cssresource_order_list" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'CSSResource_Order', l.cssresource_order_list ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.cssresource_order, 'R', 'id',				l.change:res_id ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.cssresource_order, 'R', 'offset',			l.change:offset ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.cssresource_order, 'R', 'original_offset',	l.change:original_offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.change:offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Order[' $ l.pos $ ']', g.Validation_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.change_count" VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.change_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'Combined CSS Resource Linked Resource Display Order Update' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSCombinedResourceXResource_Update_Offsets( l.combinedresource:id, l.changes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00187', 'CSS Resource sort order updated for CSS Combined Resource \'' $ l.combinedresource:code $ '\'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSCombinedResource_Output" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ JSON_CSSResource_Output() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Output" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ JSON_CSSCombinedResource_Loaders_Present() }">
		<MvIF EXPR = "{ NOT JSON_CSSCombinedResource_Load( l.cssresource ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	<MvELSEIF EXPR = "{ NOT JSON_CSSResource_Load( l.cssresource ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'M' }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.cssresource:mod_code, l.module )	OR
						NOT l.module:active																					OR
						NOT l.module:feature_hash:cssresource }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvEVAL EXPR = "{ JSON_CSSResource_Output_Render_Headers() }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].CSSResourceModule_Resource_Render( l.module, l.cssresource ) }">
	<MvELSEIF EXPR = "{ l.cssresource:type EQ 'Z' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( l.cssresource:content_id, l.managedcontent ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvEVAL EXPR = "{ JSON_CSSResource_Output_Render_Headers() }">
		<MvEVAL EXPR = "{ l.managedcontent:content }">
	<MvELSEIF EXPR = "{ l.cssresource:type EQ 'C' }">
		<MvEVAL EXPR = "{ JSON_CSSResource_Output_Render_Headers() }">

		<MvFOREACH INDEX = "l.linked_cssresource_pos" ITERATOR = "l.linked_cssresource" ARRAY = "l.linked_cssresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].Runtime_CSSResourceList_Load_CombinedResource( l.cssresource:id, l.linked_cssresources ) }">
			<MvIF EXPR = "{ l.linked_cssresource:type EQ 'L' }">
				<MvASSIGN NAME = "l.local_file_path" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.linked_cssresource:file ) }">

				<MvIF EXPR = "{ file_read( l.local_file_path, 'script', l.loaded_file_data ) NE -1 }">
					<MvIF EXPR = "{ l.linked_cssresource_pos GT 1 }">
						<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
					</MvIF>

					<MvEVAL EXPR = "{ l.loaded_file_data }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.linked_cssresource:type EQ 'M' }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.linked_cssresource:mod_code, l.module ) }">	<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:active }">																						<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cssresource }">																	<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ l.linked_cssresource_pos GT 1 }">
					<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
				</MvIF>

				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].CSSResourceModule_Resource_Render( l.module, l.linked_cssresource ) }">
			<MvELSEIF EXPR = "{ l.linked_cssresource:type EQ 'Z' }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( l.linked_cssresource:content_id, l.managedcontent ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ l.linked_cssresource_pos GT 1 }">
					<MvEVAL EXPR = "{ asciichar( 13 ) $ asciichar( 10 ) }">
				</MvIF>

				<MvEVAL EXPR = "{ l.managedcontent:content }">
			</MvIF>
		</MvFOREACH>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResource_Output_Render_Headers" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Content-Type', 'text/css' ) }">

	<MvIF EXPR = "{ NOT ISNULL g.T }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Expires',			[ g.Module_Clientside ].FormatTime( s.time_t + 31536000 ) ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Cache-Control',	'max-age=31536000' ) }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Resource Groups
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_ResourceGroupList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroupList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Loaders_Present() }">
		<MvASSIGN NAME = "l.branch"			VALUE = "{ g.Store:branch }">
	<MvELSEIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.changeset"			VALUE = "">

	<MvASSIGN NAME = "l.changeset_id"		VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'code',	'' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.changeset_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00238', 'Changeset not found' ) }">
		<MvELSEIF EXPR = "{ l.changeset:branch_id NE l.branch:id }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00239', 'Changeset does not exist on the specified branch' ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.search_query"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ResourceGroups', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_ResourceGroupList_Load_Query_Filter', '', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id,code', 'id' ) }">

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ResourceGroups', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00128', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.group_count"	VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ResourceGroups.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.group_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].ResourceGroup_Read( l.resourcegroup ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.group_count ) }">
				"id":			<MvEVAL EXPR = "{ int( l.resourcegroup:id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.resourcegroup:code ) }">"

				<MvIF EXPR = "{ l.ondemandcolumns:linkedcssresources }">
					,"linkedcssresources":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.cssresource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Branch_Group( l.branch:id, l.resourcegroup:id, l.cssresources ) }">
						<MvELSE>								<MvASSIGN NAME = "l.cssresource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Changeset_Group( l.changeset:id, l.resourcegroup:id, l.cssresources ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_cssresource_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.cssresource" ARRAY = "l.cssresources" COUNT = "{ l.cssresource_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_cssresource_count ) }">
								<MvEVAL EXPR = "{ JSON_CSSResource( l.cssresource ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:linkedjavascriptresources }">
					,"linkedjavascriptresources":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.scriptresource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Branch_Group( l.branch:id, l.resourcegroup:id, l.scriptresources ) }">
						<MvELSE>								<MvASSIGN NAME = "l.scriptresource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Changeset_Group( l.changeset:id, l.resourcegroup:id, l.scriptresources ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_scriptresource_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.scriptresource" ARRAY = "l.scriptresources" COUNT = "{ l.scriptresource_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_scriptresource_count ) }">
								<MvEVAL EXPR = "{ JSON_JavaScriptResource( l.scriptresource ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ResourceGroups" ROWS = 1>
		</MvWHILE>
		]
	}

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ResourceGroups">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroup_Load" PARAMETERS = "resourcegroup var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'ResourceGroup_ID', l.resourcegroup_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_ID( l.resourcegroup_id, l.resourcegroup ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00227', 'Resource group not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_ResourceGroup', l.resourcegroup_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_Code( l.resourcegroup_code, l.resourcegroup ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00228', 'Resource group not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'ResourceGroup_Code', l.resourcegroup_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_Code( l.resourcegroup_code, l.resourcegroup ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00229', 'Resource group not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00230', 'Unable to load resource group: One of ResourceGroup_ID, Edit_ResourceGroup or ResourceGroup_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroup_Validate" PARAMETERS = "resourcegroup var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.ResourceGroup_Code" VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.ResourceGroup_Code ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( g.ResourceGroup_Code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'ResourceGroup_Code', g.Validation_Message ) }">
	<MvELSEIF EXPR = "{ tolower( g.ResourceGroup_Code ) NE tolower( l.resourcegroup:code ) }">
		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_Code( g.ResourceGroup_Code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'ResourceGroup_Code', 'Code \'' $ g.ResourceGroup_Code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.resourcegroup:code" VALUE = "{ g.ResourceGroup_Code }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroup_Insert" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_ResourceGroup_Validate( l.resourcegroup ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Insert( l.resourcegroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00130', 'Resource Group \'' $ l.resourcegroup:code $ '\' inserted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroup_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_ResourceGroup_Load( l.resourcegroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_ResourceGroup_Validate( l.resourcegroup ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Update( l.resourcegroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00131', 'Resource Group \'' $ l.resourcegroup:code $ '\' updated' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroup_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_ResourceGroup_Load( l.resourcegroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Delete( l.resourcegroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00132', 'Resource Group \'' $ l.resourcegroup:code $ '\' deleted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroupList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.group_id" ARRAY = "l.group_ids" COUNT = "{ [ g.Module_JSON ].JSON_Array_Integer( g.ResourceGroup_IDs, l.group_ids ) }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_ID( l.group_id, l.resourcegroup ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Delete( l.resourcegroup ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.group_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00133', 'Resource Group \'' $ l.resourcegroup:code $ '\' deleted' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroup_LinkedCSSResourceList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_ResourceGroup_Load( l.resourcegroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"			VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"			VALUE = 0>

	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.working_branch_id"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvASSIGN NAME = "l.default_sort"		VALUE = "r.id">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.active',		'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_data',	'mod_data' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,
																'r.id			AS id,
																 v.code			AS code,
																 r.templ_id		AS templ_id,
																 v.type			AS type,
																 v.is_global	AS is_global,
																 v.active		AS active,
																 v.file			AS file,
																 v.content_id	AS content_id,
																 v.mod_code		AS mod_code,
																 v.mod_data		AS mod_data,
																 v.attributes	AS attributes,
																 rxg.css_id		AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResources', 'r' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'rbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceVersions', 'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
															   'rbv.branch_id	= ?					AND
															    rbv.res_id		= r.id				AND
																rbv.head		= 1					AND
																v.id			= rbv.version_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'CSSResourceXGroup', 'rxg', 'rxg.group_id = ? AND rxg.css_id = v.res_id AND rxg.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.resourcegroup:id ) ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'CSSResourceXGroup', 'rxg', 'rxg.group_id = ? AND rxg.css_id = v.res_id AND rxg.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.resourcegroup:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'rxg.css_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvASSIGN NAME = "l.default_sort"		VALUE = "rxg.disp_order">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceXGroup', 'rxg' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'rxg.group_id = ? AND rxg.css_id = v.res_id AND rxg.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.resourcegroup:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id:r.id,code:v.code,type:v.type,is_global:v.is_global,active:v.active,file:v.file,mod_code:v.mod_code,mod_data:v.mod_data', l.default_sort ) }">

	<MvASSIGN NAME = "l.search_sql"				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'CSSResources', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00134', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.resource_count"			VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT CSSResources.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.resource_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].CSSResource_Read( l.cssresource ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.resource_count ) }">
				"id":			<MvEVAL EXPR = "{ int( l.cssresource:id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:code ) }">",
				"type":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:type ) }">",
				"is_global":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.cssresource:is_global ) }">,
				"active":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.cssresource:active ) }">,
				"file":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:file ) }">",
				"content_id":	<MvEVAL EXPR = "{ int( l.cssresource:content_id ) }">,
				"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:mod_code ) }">",
				"mod_data":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.cssresource:mod_data ) }">",
				"templ_id":		<MvEVAL EXPR = "{ int( l.cssresource:templ_id ) }">,
				"attributes":	[
					<MvASSIGN NAME = "l.attribute_count" VALUE = 0>

					<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.cssresource:attributes">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
							"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
							"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					</MvFOREACH>
				],
				"assigned":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( CSSResources.d.assigned ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "CSSResources" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroup_LinkedCSSResourceList_DisplayOrder_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.ResourceGroup_ID" VALUE = "{ int( g.ResourceGroup_ID ) }">

	<MvFOREACH ITERATOR = "l.cssresource_order" ARRAY = "g.CSSResource_Order" INDEX = "l.pos">
		<MvASSIGN NAME = "l.cssresource_order:id"				VALUE = "{ int( l.cssresource_order:id ) }">
		<MvASSIGN NAME = "l.cssresource_order:offset"			VALUE = "{ int( l.cssresource_order:offset ) }">
		<MvASSIGN NAME = "l.cssresource_order:original_offset"	VALUE = "{ int( l.cssresource_order:original_offset ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.cssresource_order:offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'CSSResource_Order[' $ l.pos $ ']', g.Validation_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.change_count" VALUE = 0>

	<MvFOREACH ITERATOR = "l.cssresource_order" ARRAY = "g.CSSResource_Order">
		<MvASSIGN NAME = "l.change_count"														VALUE = "{ l.change_count + 1 }">
		<MvASSIGN NAME = "l.changes" 	INDEX = "{ l.change_count }" MEMBER = "css_id"			VALUE = "{ l.cssresource_order:id }">
		<MvASSIGN NAME = "l.changes" 	INDEX = "{ l.change_count }" MEMBER = "offset"			VALUE = "{ l.cssresource_order:offset }">
		<MvASSIGN NAME = "l.changes" 	INDEX = "{ l.change_count }" MEMBER = "original_offset"	VALUE = "{ l.cssresource_order:original_offset }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.change_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'Resource Group Linked CSS Resource Display Order Update' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Update_Offsets( g.ResourceGroup_ID, l.changes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00135', 'CSS Resource sort order updated' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroup_LinkedJavaScriptResourceList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_ResourceGroup_Load( l.resourcegroup ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.assigned"			VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"			VALUE = 0>

	<MvASSIGN NAME = "l.search_query"		VALUE = "">
	<MvASSIGN NAME = "l.working_branch_id"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvASSIGN NAME = "l.default_sort"		VALUE = "r.id">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters, 'v.active',		'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'v.mod_data',	'mod_data' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>
	
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,
																'r.id			AS id,
																 v.code			AS code,
																 r.templ_id		AS templ_id,
																 v.type			AS type,
																 v.is_global	AS is_global,
																 v.active		AS active,
																 v.file			AS file,
																 v.content_id	AS content_id,
																 v.mod_code		AS mod_code,
																 v.mod_data		AS mod_data,
																 v.attributes	AS attributes,
																 rxg.script_id	AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResources', 'r' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions', 'rbv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query,
															   'rbv.branch_id	= ?					AND
															    rbv.res_id		= r.id				AND
																rbv.head		= 1					AND
																v.id			= rbv.version_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.working_branch_id ) ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'JavaScriptResourceXGroup', 'rxg', 'rxg.group_id = ? AND rxg.script_id = v.res_id AND rxg.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.resourcegroup:id ) ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'JavaScriptResourceXGroup', 'rxg', 'rxg.group_id = ? AND rxg.script_id = v.res_id AND rxg.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.resourcegroup:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'rxg.script_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvASSIGN NAME = "l.default_sort"			VALUE = "rxg.disp_order">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceXGroup', 'rxg' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'rxg.group_id = ? AND rxg.script_id = v.res_id AND rxg.xref_id = v.xref_id', [ g.Module_Library_DB ].SQL_Query_Field( l.resourcegroup:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id:r.id,code:v.code,type:v.type,is_global:v.is_global,active:v.active,file:v.file,mod_code:v.mod_code,mod_data:v.mod_data', l.default_sort ) }">

	<MvASSIGN NAME = "l.search_sql"					VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'JavaScriptResources', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00136', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.resource_count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT JavaScriptResources.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.resource_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Read( l.scriptresource ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.resource_count ) }">
				"id":			<MvEVAL EXPR = "{ int( l.scriptresource:id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:code ) }">",
				"type":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:type ) }">",
				"is_global":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.scriptresource:is_global ) }">,
				"active":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.scriptresource:active ) }">,
				"file":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:file ) }">",
				"content_id":	<MvEVAL EXPR = "{ int( l.scriptresource:content_id ) }">,
				"mod_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:mod_code ) }">",
				"mod_data":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.scriptresource:mod_data ) }">",
				"templ_id":		<MvEVAL EXPR = "{ int( l.scriptresource:templ_id ) }">,
				"attributes":	[
					<MvASSIGN NAME = "l.attribute_count" VALUE = 0>

					<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.scriptresource:attributes">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
							"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
							"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					</MvFOREACH>
				],
				"assigned":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( JavaScriptResources.d.assigned ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "JavaScriptResources" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ResourceGroup_LinkedJavaScriptResourceList_DisplayOrder_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "g.ResourceGroup_ID" VALUE = "{ int( g.ResourceGroup_ID ) }">

	<MvFOREACH ITERATOR = "l.scriptresource_order" ARRAY = "g.JavaScriptResource_Order" INDEX = "l.pos">
		<MvASSIGN NAME = "l.scriptresource_order:id"				VALUE = "{ int( l.scriptresource_order:id ) }">
		<MvASSIGN NAME = "l.scriptresource_order:offset"			VALUE = "{ int( l.scriptresource_order:offset ) }">
		<MvASSIGN NAME = "l.scriptresource_order:original_offset"	VALUE = "{ int( l.scriptresource_order:original_offset ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.scriptresource_order:offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'JavaScriptResource_Order[' $ l.pos $ ']', g.Validation_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.change_count" VALUE = 0>

	<MvFOREACH ITERATOR = "l.scriptresource_order" ARRAY = "g.JavaScriptResource_Order">
		<MvASSIGN NAME = "l.change_count"														VALUE = "{ l.change_count + 1 }">
		<MvASSIGN NAME = "l.changes" 	INDEX = "{ l.change_count }" MEMBER = "script_id"		VALUE = "{ l.scriptresource_order:id }">
		<MvASSIGN NAME = "l.changes" 	INDEX = "{ l.change_count }" MEMBER = "offset"			VALUE = "{ l.scriptresource_order:offset }">
		<MvASSIGN NAME = "l.changes" 	INDEX = "{ l.change_count }" MEMBER = "original_offset"	VALUE = "{ l.scriptresource_order:original_offset }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.change_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'Resource Group Linked JavaScript Resource Display Order Update' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroup_Update_Offsets( g.ResourceGroup_ID, l.changes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00137', 'JavaScript Resource sort order updated' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvCOMMENT>
|
| Fonts
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Font" PARAMETERS = "font var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"code":				"<MvEVAL EXPR = "{ encodejavascriptstring( l.font:code ) }">",
	"name":				"<MvEVAL EXPR = "{ encodejavascriptstring( l.font:name ) }">",
	"type":				"<MvEVAL EXPR = "{ encodejavascriptstring( l.font:type ) }">",
	"family":			"<MvEVAL EXPR = "{ encodejavascriptstring( l.font:family ) }">",
	"active":			<MvEVAL EXPR = "{ encodejavascriptboolean( l.font:active ) }">,
	"google_font_name":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.font:google_font_name ) }">",
	"embed":			"<MvEVAL EXPR = "{ encodejavascriptstring( l.font:embed ) }">",
	"weights":
	{
		"100": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:weights:100 ) }">,
		"200": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:weights:200 ) }">,
		"300": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:weights:300 ) }">,
		"400": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:weights:400 ) }">,
		"500": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:weights:500 ) }">,
		"600": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:weights:600 ) }">,
		"700": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:weights:700 ) }">,
		"800": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:weights:800 ) }">,
		"900": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:weights:900 ) }">
	},
	"styles":
	{
		"normal": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:styles:normal ) }">,
		"italic": <MvEVAL EXPR = "{ encodejavascriptboolean( l.font:styles:italic ) }">
	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Font_Load" PARAMETERS = "font var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_Font', l.font_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Font_Load_Code( l.font_code, l.font ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00351', 'Font not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Font_Code', l.font_code ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Font_Load_Code( l.font_code, l.font ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00352', 'Font not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00353', 'Unable to load font: One of Edit_Font or Font_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FontList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Loaders_Present() }">
		<MvASSIGN NAME = "l.branch"			VALUE = "{ g.Store:branch }">
	<MvELSEIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'code',				'l.font:code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'name',				'l.font:name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'type',				'l.font:type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'family',			'l.font:family' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'google_font_name',	'l.font:google_font_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_BOOL( l.available_filters, 'active',			'l.font:active' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o',		'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o',		'Sort',		l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o:nonneg',	'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o',		'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.font_count" VALUE = "{ [ g.Module_Feature_TUI_DB ].FontList_Load_Branch_All( l.branch:id, l.fonts ) }">

	<MvIF EXPR = "{ l.font_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.search_expression" VALUE = "1 EQ 1">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_MivaScript( l.search_expression, l.filter, l.available_filters ) }">

	<MvASSIGN NAME = "l.total_count"		VALUE = "{ miva_array_filter_ref( l.fonts, 1, l.font, l.search_expression, l.filtered_fonts ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_sort( l.filtered_fonts, 'JSON_FontList_Sort_Callback', l.sort ) }">

	<MvASSIGN NAME = "l.output_count"		VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.font" ARRAY = "l.filtered_fonts" FIRST = "{ l.offset + 1 }" LAST = "{ l.total_count }">
				<MvIF EXPR = "{ ( l.output_count GE l.count ) AND ( l.count NE 0 ) }">
					<MvFOREACHSTOP>
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
					<MvEVAL EXPR = "{ JSON_Font( l.font ) }">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FontList_Sort_Callback" PARAMETERS = "left var, right var, sort var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.sort EQ 'code' }">					<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:code, l.right:code ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-code' }">				<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:code, l.left:code ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'name' }">				<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:name, l.right:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-name' }">				<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:name, l.left:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'type' }">				<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:type, l.right:type ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-type' }">				<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:type, l.left:type ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'family' }">				<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:family, l.right:family ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-family' }">				<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:family, l.left:family ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'google_font_name' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:google_font_name, l.right:google_font_name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-google_font_name' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:google_font_name, l.left:google_font_name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'active' }">				<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:active, l.right:active ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-active' }">				<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:active, l.left:active ) }">
	</MvIF>

	<MvIF EXPR = "{ l.result NE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.result }">
	</MvIF>

	<MvCOMMENT>
	|
	| Break ties using the code
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ substring_var( l.sort, 1, 1 ) EQ '-' }">	<MvFUNCTIONRETURN VALUE = "{ strcasecmp( l.right:code, l.left:code ) }">
	<MvELSE>													<MvFUNCTIONRETURN VALUE = "{ strcasecmp( l.left:code, l.right:code ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Font_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.font"				VALUE = "">
	<MvASSIGN NAME = "l.font:type"			VALUE = "standard">
	<MvASSIGN NAME = "l.font:active"		VALUE = 1>
	<MvASSIGN NAME = "l.font:weights"		VALUE = "">
	<MvASSIGN NAME = "l.font:weights:400"	VALUE = 1>
	<MvASSIGN NAME = "l.font:styles"		VALUE = "">
	<MvASSIGN NAME = "l.font:styles:normal"	VALUE = 1>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'R',		'Code',		l.font:code )										OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'R:100',	'Name',		l.font:name )										OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'R',		'Family',	l.font:family )										OR
					NOT [ g.Module_JSON ].JSON_Input_List(		'O',		'Type',		l.font:type, 'standard,google', 'standard,google' )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Active', 	l.font:active ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Font_Load_Code( l.font:code, l.existing_font ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Code', 'Font \'' $ l.existing_font:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.font:type EQ 'google' }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'GoogleFontName', l.font:google_font_name ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'o', 'Embed', l.font:embed ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Weights' ) }">
		<MvASSIGN NAME = "l.font:weights" VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Structure( 'R', 'Weights', l.input_weights ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '100', l.font:weights:100 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '200', l.font:weights:200 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '300', l.font:weights:300 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '400', l.font:weights:400 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '500', l.font:weights:500 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '600', l.font:weights:600 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '700', l.font:weights:700 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '800', l.font:weights:800 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '900', l.font:weights:900 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.font:weights:100 AND
						NOT l.font:weights:200 AND
						NOT l.font:weights:300 AND
						NOT l.font:weights:400 AND
						NOT l.font:weights:500 AND
						NOT l.font:weights:600 AND
						NOT l.font:weights:700 AND
						NOT l.font:weights:800 AND
						NOT l.font:weights:900 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00354', 'At least one font weight must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Styles' ) }">
		<MvASSIGN NAME = "l.font:styles" VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Structure( 'R', 'Styles', l.input_styles ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_styles, 'O', 'normal', l.font:styles:normal ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_styles, 'O', 'italic', l.font:styles:italic ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.font:styles:normal AND
						NOT l.font:styles:italic }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00355', 'At least one font style must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Font_Insert( l.font ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00356', 'Font \'' $ l.font:code $ '\' inserted on branch \'' $ g.Store:branch:name $ '\'' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_Font( l.font ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Font_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Font_Load( l.font ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_font" VALUE = "{ l.font }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'O',		'Code',		l.font:code )										OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O:100',	'Name',		l.font:name )										OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O',		'Family',	l.font:family )										OR
					NOT [ g.Module_JSON ].JSON_Input_List(		'O',		'Type',		l.font:type, 'standard,google', 'standard,google' )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Active', 	l.font:active ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.original_font:code, l.font:code ) NE 0 }">
		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Font_Load_Code( l.font:code, l.existing_font ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Code', 'Font \'' $ l.existing_font:code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.font:type EQ 'google' }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Exists( 'GoogleFontName' ) }">
			<MvIF EXPR = "{ ISNULL l.font:google_font_name }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'GoogleFontName', 'When type is Google, a value for GoogleFontName must be specified' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'O', 'GoogleFontName', l.font:google_font_name ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'o', 'Embed', l.font:embed ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Weights' ) }">
		<MvASSIGN NAME = "l.font:weights" VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Structure( 'R', 'Weights', l.input_weights ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '100', l.font:weights:100 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '200', l.font:weights:200 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '300', l.font:weights:300 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '400', l.font:weights:400 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '500', l.font:weights:500 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '600', l.font:weights:600 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '700', l.font:weights:700 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '800', l.font:weights:800 ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_weights, 'O', '900', l.font:weights:900 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.font:weights:100 AND
						NOT l.font:weights:200 AND
						NOT l.font:weights:300 AND
						NOT l.font:weights:400 AND
						NOT l.font:weights:500 AND
						NOT l.font:weights:600 AND
						NOT l.font:weights:700 AND
						NOT l.font:weights:800 AND
						NOT l.font:weights:900 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00357', 'At least one font weight must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Styles' ) }">
		<MvASSIGN NAME = "l.font:styles" VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Structure( 'R', 'Styles', l.input_styles ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_styles, 'O', 'normal', l.font:styles:normal ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_styles, 'O', 'italic', l.font:styles:italic ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.font:styles:normal AND
						NOT l.font:styles:italic }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00358', 'At least one font style must be specified' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Font_Update( l.original_font, l.font ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00359', 'Font \'' $ l.font:code $ '\' updated on branch \'' $ g.Store:branch:name $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FontList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text_Array( 'R', 'Font_Codes', l.codes, l.code_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.code" ARRAY = "l.codes" COUNT = "{ l.code_count }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Font_Load_Code( l.code, l.font ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Font_Delete( l.font ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.code, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00360', 'Font \'' $ l.font:code $ '\' deleted from branch \'' $ g.Store:branch:name $ '\'' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch" PARAMETERS = "branch var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.branch:id ) }">,
	"immutable":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.branch:immutable ) }">,
	"branchkey":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branch:branchkey ) }">",
	"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branch:name ) }">",
	"color":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branch:color ) }">",
	"framework":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branch:framework ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchTags" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.tag_count"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_BranchTags( l.tags ) }">

	"tags":
	[
		<MvFOREACH INDEX = "l.tag_pos" ITERATOR = "l.tag" ARRAY = "l.tags" COUNT = "{ l.tag_count }">
			<MvIF EXPR = "{ l.tag_pos GT 1 }">
				,
			</MvIF>

			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.tag ) }">"
		</MvFOREACH>
	],
	"formatted_tags": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( [ g.Feature_Filename_TUI_MGR ].TemplateManager_Format_BranchTags( l.tags, l.tag_count ) ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Loaders_Present" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Branch_ID' ) }">			<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Edit_Branch' ) }">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Branch_Name' ) }">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Load" PARAMETERS = "branch var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'Branch_ID', l.branch_id ) }">
		<MvIF EXPR = "{ l.branch_id EQ 0 }">
			<MvASSIGN NAME = "l.branch_id" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Primary_Branch_ID() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.branch_id, l.branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00188', 'Branch not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_Branch', l.branch_name ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_Name( l.branch_name, l.branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00202', 'Branch not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Branch_Name', l.branch_name ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_Name( l.branch_name, l.branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00189', 'Branch not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00190', 'Unable to load branch: One of Branch_ID, Edit_Branch or Branch_Name must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Cookie_Clear" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Clear_BranchCookie() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Cookie_Set" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Set_BranchCookie( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Branch_Cookie_Clear" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">						<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Runtime_CORS_Preflight_Headers() }">	<MvFUNCTIONRETURN> </MvIF>

	<MvCOMMENT>
	|
	| Runtime branch functions return success regardless of outcome
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Clear_RuntimeBranchCookie() }">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Clear_RuntimeBranchDateTimeCookie() }">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Clear_RuntimeBranchPreviewSuppressCookie() }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Branch_Cookie_Set" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">						<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Runtime_CORS_Preflight_Headers() }">	<MvFUNCTIONRETURN> </MvIF>

	<MvCOMMENT>
	|
	| Runtime branch functions return success regardless of outcome
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Clear_RuntimeBranchPreviewSuppressCookie() }">

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Branch_Key', l.branch_key ) }">
		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Branch_Load_BranchKey( l.branch_key, l.branch ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Set_RuntimeBranchCookie( l.branch ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Branch_DateTime_Cookie_Clear" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">						<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Runtime_CORS_Preflight_Headers() }">	<MvFUNCTIONRETURN> </MvIF>

	<MvCOMMENT>
	|
	| Runtime branch functions return success regardless of outcome
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Clear_RuntimeBranchDateTimeCookie() }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_Branch_DateTime_Cookie_Set" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">						<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Runtime_CORS_Preflight_Headers() }">	<MvFUNCTIONRETURN> </MvIF>

	<MvCOMMENT>
	|
	| Runtime branch functions return success regardless of outcome
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Clear_RuntimeBranchPreviewSuppressCookie() }">

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_DateTime( 'R', 'DateTime', l.time_t ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Set_RuntimeBranchDateTimeCookie( l.branch, l.time_t ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_BranchPreviewSuppress_Cookie_Set" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">						<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Runtime_CORS_Preflight_Headers() }">	<MvFUNCTIONRETURN> </MvIF>

	<MvCOMMENT>
	|
	| Runtime branch functions return success regardless of outcome
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Set_RuntimeBranchPreviewSuppressCookie() }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Copy" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Branch_Copy_Session_ID' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Branch_Copy_Session_ID', l.session_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.session_filename" VALUE = "{ JSON_Branch_Session_Filename( 'branchcopy', l.session_id ) }">

		<MvIF EXPR = "{ NOT JSON_Branch_Session_Deserialize( l.session_filename, l.session_id, l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.notes"	VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'Source_Branch_ID',		l.source_branch_id )	OR
						NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'Destination_Branch_ID',	l.dest_branch_id )		OR
						NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Notes',					l.notes ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Tags', l.tags ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Override_BranchTags( l.tags ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.source_branch_id, l.source_branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Source_Branch_ID', 'Source branch not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.dest_branch_id, l.dest_branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination_Branch_ID', 'Destination branch not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Source_Changeset_ID' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'Source_Changeset_ID', l.source_changeset_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.source_changeset_id, l.source_changeset ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Source_Changeset_ID', 'Changeset not found' ) }">
			<MvELSEIF EXPR = "{ l.source_changeset:branch_id NE l.source_branch:id }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Source_Changeset_ID', 'Changeset does not exist on the specified source branch' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_Session_Init( l.source_branch, l.source_changeset, l.dest_branch, l.notes, l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_Session_Process( l.session ) }">

	<MvIF EXPR = "{ l.result EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.result EQ -1 }">
		<MvASSIGN NAME = "l.session_filename" VALUE = "{ JSON_Branch_Session_Filename( 'branchcopy', l.session:id ) }">

		<MvIF EXPR = "{ NOT JSON_Branch_Session_Serialize( l.session_filename, l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		{
			"success":					1,
			"completed":				false,
			"branch_copy_session_id":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.session:id ) }">"
		}
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_Branch_Session_Finalize( l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
		
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00203', 'Managed Template Branch \'' $ l.session:source_branch:name $ '\' copied to \'' $ l.session:dest_branch:name $ '\'' ) }">

		{
			"success":		1,
			"completed":	true,
			"data":
			{
				<MvEVAL EXPR = "{ JSON_Changeset( l.session:dest_changeset ) }">
			}
		}
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Create" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Branch_Create_Session_ID' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Branch_Create_Session_ID', l.session_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.session_filename" VALUE = "{ JSON_Branch_Session_Filename( 'branchcreate', l.session_id ) }">

		<MvIF EXPR = "{ NOT JSON_Branch_Session_Deserialize( l.session_filename, l.session_id, l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSE>	
		<MvASSIGN NAME = "l.color"					VALUE = "#f7394a">
		<MvASSIGN NAME = "l.parent_branch"			VALUE = "">
		<MvASSIGN NAME = "l.parent_changeset"		VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R',		'Parent_Branch_ID',	l.parent_id )	OR
						NOT [ g.Module_JSON ].JSON_Input_Text(		'R:100',	'Name',				l.name )		OR
						NOT [ g.Module_JSON ].JSON_Input_Text(		'o',		'Color',			l.color ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ len_var( l.color ) NE 7 OR substring_var( l.color, 1, 1 ) NE '#' OR NOT isxdigit( substring_var( l.color, 2, 6 ) ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Color', 'Please specify a valid hexadecimal color' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Tags', l.tags ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Override_BranchTags( l.tags ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.parent_id, l.parent_branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Parent_Branch_ID', 'Parent branch not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Changeset_ID' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'Changeset_ID',	l.changeset_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.parent_changeset ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Changeset_ID', 'Changeset not found' ) }">
			<MvELSEIF EXPR = "{ l.parent_changeset:branch_id NE l.parent_branch:id }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Changeset_ID', 'Changeset does not exist on the specified parent branch' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Branch_Load_Name( l.name, l.existing_branch ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Name', 'A branch with the name \'' $ l.existing_branch:name $ '\' already exists' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.branch"			VALUE = "">
		<MvASSIGN NAME = "l.branch:name"	VALUE = "{ l.name }">
		<MvASSIGN NAME = "l.branch:color"	VALUE = "{ l.color }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_Branch_Session_Init( l.parent_branch, l.parent_changeset, l.branch, l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_Branch_Session_Process( l.session ) }">

	<MvIF EXPR = "{ l.result EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.result EQ -1 }">
		<MvASSIGN NAME = "l.session_filename" VALUE = "{ JSON_Branch_Session_Filename( 'branchcreate', l.session:id ) }">

		<MvIF EXPR = "{ NOT JSON_Branch_Session_Serialize( l.session_filename, l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		{
			"success":					1,
			"completed":				false,
			"branch_create_session_id":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.session:id ) }">"
		}
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_Branch_Session_Finalize( l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00204', 'Managed Template Branch \'' $ l.branch:name $ '\' created' ) }">

		{
			"success":		1,
			"completed":	true,
			"data":
			{
				<MvASSIGN NAME = "l.flags"				VALUE = "{ [ g.Module_Feature_URI_UT ].URL_Build_Flags( 'sep,nosession' ) }">
				<MvASSIGN NAME = "l.preview_url"		VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Page_Code_URL( 'SFNT', l.flags ) $ 'BranchKey=' $ encodeattribute( l.session:branch:branchkey ) }">

				<MvEVAL EXPR = "{ JSON_Branch( l.session:branch ) }">
				, "preview_url":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.preview_url ) }">"
			}
		}
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Update" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'O:100', 'Branch_Name',	l.branch:name ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'O',		'Branch_Color',	l.branch:color ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ len_var( l.branch:color ) NE 7 OR substring_var( l.branch:color, 1, 1 ) NE '#' OR NOT isxdigit( substring_var( l.branch:color, 2, 6 ) ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Branch_Color', 'Please specify a valid hexadecimal color' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Branch_Load_Name( l.branch:name, l.existing_branch ) AND l.branch:id NE l.existing_branch:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Branch_Name', 'A branch with the name \'' $ l.existing_branch:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Update( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00205', 'Managed Template Branch \'' $ l.branch:name $ '\' updated' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvASSIGN NAME = "l.flags"				VALUE = "{ [ g.Module_Feature_URI_UT ].URL_Build_Flags( 'sep,nosession' ) }">
		<MvASSIGN NAME = "l.preview_url"		VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Page_Code_URL( 'SFNT', l.flags ) $ 'BranchKey=' $ encodeattribute( l.branch:branchkey ) }">

		<MvEVAL EXPR = "{ JSON_Branch( l.branch ) }">
		, "preview_url":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.preview_url ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Delete_Branch( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00206', 'Managed Template Branch \'' $ l.branch:name $ '\' deleted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_SetPrimary" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_branch_id"	VALUE = "{ g.Store:branch_id }">
	<MvASSIGN NAME = "g.Store:branch_id"	VALUE = "{ l.branch:id }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_Branch( g.Store ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Update URIs
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Handle_Primary_Branch_Change( l.original_branch_id, g.Store:branch_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">
	
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'Branch_IDs', l.branch_ids, l.branch_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.branch_id" ARRAY = "l.branch_ids" COUNT = "{ l.branch_id_count }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.branch_id, l.branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Delete_Branch( l.branch ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.branch_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00207', 'Managed Template Branch \'' $ l.branch:name $ '\' deleted' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Load_Active" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvASSIGN NAME = "l.flags"			VALUE = "{ [ g.Module_Feature_URI_UT ].URL_Build_Flags( 'sep,nosession' ) }">
		<MvASSIGN NAME = "l.preview_url"	VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Page_Code_URL( 'SFNT', l.flags ) $ 'BranchKey=' $ encodeattribute( g.Store:branch:branchkey ) }">

		<MvEVAL EXPR = "{ JSON_Branch( g.Store:branch ) }">
		, "preview_url":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.preview_url ) }">"
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchList_Joins" PARAMETERS = "filter var, sort var, ondemandcolumns var, joins var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.joins"		VALUE = "">
	<MvASSIGN NAME = "l.sort_field"	VALUE = "{ [ g.Module_Library_DB ].SQL_Sort_Field( l.sort, l.null ) }">

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( l.filter, 'last_user', l.null ) }">		<MvASSIGN NAME = "l.joins:users" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'last_user' }">																<MvASSIGN NAME = "l.joins:users" VALUE = 1>
	<MvELSEIF EXPR = "{ l.ondemandcolumns:last_user }">																<MvASSIGN NAME = "l.joins:users" VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( l.filter, 'last_dtstamp', l.null ) }">		<MvASSIGN NAME = "l.joins:changesets" VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( l.filter, 'last_notes', l.null ) }">	<MvASSIGN NAME = "l.joins:changesets" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'last_dtstamp' OR l.sort_field EQ 'last_notes' }">							<MvASSIGN NAME = "l.joins:changesets" VALUE = 1>
	<MvELSEIF EXPR = "{ l.ondemandcolumns:last_dtstamp OR l.ondemandcolumns:last_notes }">							<MvASSIGN NAME = "l.joins:changesets" VALUE = 1>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'b.id',			'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'b.immutable',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'b.branchkey',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'b.name',			'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'b.framework',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'mtc.dtstamp',		'last_dtstamp' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mtc.notes',		'last_notes' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'u.name',			'last_user' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_BranchList_Load_Query_Filter', '', l.ondemandcolumns ) }">

	<MvEVAL EXPR = "{ JSON_BranchList_Joins( l.filter, l.sort, l.ondemandcolumns, l.joins ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'b.*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Branches', 'b' ) }">

	<MvIF EXPR = "{ l.joins:changesets OR l.joins:users }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query,		'mtc.notes',	'last_notes' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query,	'mtc.dtstamp',	'last_dtstamp' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'b', g.Store_Table_Prefix $ 'Changesets', 'mtc', 'mtc.branch_id = b.id AND mtc.id = ( SELECT MAX( id ) FROM ' $ g.Store_Table_Prefix $ 'Changesets mtc2 WHERE mtc2.branch_id = b.id )', '' ) }">

		<MvIF EXPR = "{ l.joins:users }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query,	'u.name',		'last_user_name' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query,	'u.icon',		'last_user_icon' ) }">

			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'b', 'Users', 'u', 'u.id = mtc.user_id', '' ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'b.id,b.immutable,b.branchkey,b.name,b.framework,last_dtstamp:mtc.dtstamp,last_notes:mtc.notes,last_user:last_user_name:null_char', 'b.id' ) }"> 

	<MvASSIGN NAME = "l.search_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Branches', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00191', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.flags"				VALUE = "{ [ g.Module_Feature_URI_UT ].URL_Build_Flags( 'sep,nosession' ) }">
	<MvASSIGN NAME = "l.preview_url_base"	VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Page_Code_URL( 'SFNT', l.flags ) }">
	<MvASSIGN NAME = "l.working_id"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">
	<MvASSIGN NAME = "l.primary_id"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Primary_Branch_ID() }">
	<MvASSIGN NAME = "l.branch_count"		VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Branches.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.branch_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Branch_Read( l.branch ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.branch_count ) }">
				<MvEVAL EXPR = "{ JSON_Branch( l.branch ) }">
				,"is_primary":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.branch:id EQ l.primary_id ) }">,
				"is_working":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.branch:id EQ l.working_id ) }">,
				"preview_url":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.preview_url_base $ 'BranchKey=' $ encodeattribute( l.branch:branchkey ) ) }">"

				<MvIF EXPR = "{ l.ondemandcolumns:last_user }">
					, "last_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Branches.d.last_user_name ) }">",
					"last_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Branches.d.last_user_icon ) }">"
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:last_dtstamp }">
					, "last_dtstamp":	<MvEVAL EXPR = "{ int( Branches.d.last_dtstamp ) }">
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:last_notes }">
					, "last_notes":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Branches.d.last_notes ) }">"
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Branches" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Branches">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchList_Load_Runtime_Headers" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ 'https://' IN s.http_origin AND NOT ISNULL g.Domain:mm_surl }">	<MvASSIGN NAME = "l.origin_url" VALUE = "{ g.Domain:mm_surl }">
	<MvELSE>																		<MvASSIGN NAME = "l.origin_url" VALUE = "{ g.Domain:mm_url }">
	</MvIF>

	<MvASSIGN NAME = "l.end_of_protocol" VALUE = "{ '://' EIN l.origin_url }">

	<MvIF EXPR = "{ l.end_of_protocol }">
		<MvASSIGN NAME = "l.trailing_slash_pos" VALUE = "{ indexof( '/', l.origin_url, l.end_of_protocol + 1 ) }">

		<MvIF EXPR = "{ l.trailing_slash_pos }">
			<MvASSIGN NAME = "l.origin_url" VALUE = "{ substring_var( l.origin_url, 1, l.trailing_slash_pos - 1 ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Access-Control-Allow-Origin',			encodeentities( l.origin_url ) ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Access-Control-Allow-Methods',		'POST' ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Access-Control-Allow-Credentials',	'true' ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Access-Control-Allow-Headers',		'Content-Type, if-modified-since, *' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchList_Load_Runtime" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_BranchList_Load_Runtime_Headers() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Branches', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.null_sort, 'id', 'id' ) }"> 

	<MvASSIGN NAME = "l.branch_count"	VALUE = 0>
	<MvASSIGN NAME = "l.working_id"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">
	<MvASSIGN NAME = "l.primary_id"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Primary_Branch_ID() }">
	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Branches', l.search_sql, l.search_fields, 0, 0 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00209', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
	<MvWHILE EXPR = "{ NOT Branches.d.EOF }">
		<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Branch_Read( l.branch ) }">

		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.branch_count ) }">
			"branchkey":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branch:branchkey ) }">",
			"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branch:name ) }">",
			"color":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branch:color ) }">",
			"is_primary":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.branch:id EQ l.primary_id ) }">,
			"is_working":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.branch:id EQ l.working_id ) }">
		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

		<MvSKIP NAME = "Merchant" VIEW = "Branches" ROWS = 1>
	</MvWHILE>
	]
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Branches">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchTag_Cookie_Get" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">		<MvFUNCTIONRETURN>	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_BranchTags() }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchTag_Cookie_Set" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">		<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'o', 'Tags', l.tags ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Set_BranchTags( l.tags ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_BranchTags() }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ManagedTemplateVersionList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchTemplateVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.changeset"			VALUE = "">

	<MvASSIGN NAME = "l.changeset_id"		VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtv.id',			'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtv.templ_id',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtv.user_id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters, 'u.name',			'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mt.parent_id',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mt.item_id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mt.prop_id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters, 'mt.sync',			'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'mt.filename',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtv.dtstamp',		'' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.changeset_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00192', 'Changeset not found' ) }">
		<MvELSEIF EXPR = "{ l.changeset:branch_id NE l.branch:id }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00193', 'Changeset does not exist on the specified branch' ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.id			AS id,
																				 mtv.templ_id	AS templ_id,
																				 mtv.user_id	As user_id,
																				 mt.parent_id	AS parent_id,
																				 mt.item_id		AS item_id,
																				 mt.prop_id		AS prop_id,
																				 mt.sync		AS sync,
																				 mt.filename	AS filename,
																				 mtv.dtstamp	AS dtstamp' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplates', 'mt' ) }">

	<MvIF EXPR = "{ ISNULL l.changeset }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions', 'mtbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtbv.branch_id	= ?					AND
																					mtbv.head		= 1					AND
																					mtbv.templ_id	= mt.id				AND
																					mtv.id			= mtbv.version_id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateVersions',	'mtv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateChanges',	'mtc' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtc.branch_id	= ?		AND
																					mtc.templ_id	= mt.id	AND
																					mtc.set_id		=
																					(
																						SELECT
																							MAX( mtc2.set_id )
																						FROM
																						' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc2
																						WHERE
																							mtc2.branch_id	= ?		AND
																							mtc2.templ_id	= mt.id	AND
																							mtc2.set_id		<= ?
																					)',
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )	$ ',' $
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )	$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtv.id = mtc.new_id', '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mtv', 'Users', 'u', 'u.id = mtv.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.name', 'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.icon', 'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_ManagedTemplateVersionList_Load_Query_Filter', '', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'mtv.id,mtv.templ_id,mtv.user_id,user_name:u.name:null_char,mt.parent_id,mt.item_id,mt.prop_id,mt.sync,mt.filename,mtv.dtstamp', 'mt.filename' ) }"> 

	<MvIF EXPR = "{ l.ondemandcolumns:notes }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes		AS notes' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:source }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source		AS source' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.settings	AS settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ManagedTemplateVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00194', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"	VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ManagedTemplateVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":				<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.id ) }">,
				"templ_id":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.templ_id ) }">,
				"user_id":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.user_id ) }">,
				"user_name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.user_name ) }">",
				"user_icon":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.user_icon ) }">",
				"parent_id":		<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.parent_id ) }">,
				"item_id":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.item_id ) }">,
				"prop_id":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.prop_id ) }">,
				"sync":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( ManagedTemplateVersions.d.sync ) }">,
				"filename":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.filename ) }">",
				"dtstamp":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.dtstamp ) }">

				<MvIF EXPR = "{ l.ondemandcolumns:notes }">
					,"notes":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.notes ) }">"
				</MvIF>
				
				<MvIF EXPR = "{ l.ondemandcolumns:source }">
					,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( ManagedTemplateVersions.d.source ) }">"
				</MvIF>
				
				<MvIF EXPR = "{ l.ondemandcolumns:settings }">
					,"settings":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( miva_array_deserialize( ManagedTemplateVersions.d.settings ) ) }">
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ManagedTemplateVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplateVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResourceVersionList_Joins" PARAMETERS = "filter var, sort var, ondemandcolumns var, joins var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sort_field"	VALUE = "{ [ g.Module_Library_DB ].SQL_Sort_Field( l.sort, l.null ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:source }">																			<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.ondemandcolumns:source_notes }">																	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'source_user_id' }">																<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'source_user_name' }">																<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( g.Filter, 'source_user_id',	l.null ) }">	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( g.Filter, 'source_user_name',	l.null ) }">	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSE>																												<MvASSIGN NAME = "l.joins:source" VALUE = 0>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CSSResourceVersionList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchCSSResourceVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.changeset"			VALUE = "">

	<MvASSIGN NAME = "l.changeset_id"		VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.id',		'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.res_id',	'res_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.user_id',	'user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'vu.name',		'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'v.active',	'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.mod_data',	'mod_data' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'r.templ_id',	'templ_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'mtv.user_id',	'source_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mtvu.name',	'source_user_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.changeset_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00218', 'Changeset not found' ) }">
		<MvELSEIF EXPR = "{ l.changeset:branch_id NE l.branch:id }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00219', 'Changeset does not exist on the specified branch' ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'v.id			AS id,
																				 v.res_id		AS res_id,
																				 v.user_id		AS user_id,
																				 v.code			AS code,
																				 v.type			AS type,
																				 v.is_global	AS is_global,
																				 v.active		AS active,
																				 v.file			AS file,
																				 v.content_id	AS content_id,
																				 v.mod_code		AS mod_code,
																				 v.mod_data		AS mod_data,
																				 r.templ_id		AS templ_id,
																				 v.attributes	AS attributes' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResources', 'r' ) }">

	<MvIF EXPR = "{ ISNULL l.changeset }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'cssbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceVersions', 'v' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cssbv.branch_id	= ?					AND
																					cssbv.head		= 1					AND
																					v.id			= cssbv.version_id	AND
																					r.id			= cssbv.res_id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions', 'mtbv', 'mtbv.branch_id = ? AND mtbv.templ_id = r.templ_id AND mtbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = mtbv.version_id', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceVersions', 'v' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceChanges', 'cssc' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cssc.branch_id	= ?		AND
																					cssc.res_id		= r.id	AND
																					cssc.set_id		=
																					(
																						SELECT
																							MAX( cssc2.set_id )
																						FROM
																						' $ g.Store_Table_Prefix $ 'CSSResourceChanges cssc2
																						WHERE
																							cssc2.branch_id	= ?		AND
																							cssc2.res_id	= r.id	AND
																							cssc2.set_id	<= ?
																					)',
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'v.id = cssc.new_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplates', 'mt', 'mt.id = r.templ_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateChanges', 'mtc', 'mtc.branch_id	= ?				AND
																																						   mtc.templ_id		= r.templ_id	AND
																																						   mtc.set_id		=
																																						   (
																																								SELECT
																																									MAX( mtc2.set_id )
																																								FROM
																																									' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc2
																																								WHERE
																																									mtc2.branch_id	= ?				AND
																																									mtc2.templ_id	= r.templ_id	AND
																																									mtc2.set_id		<= ?
																																							)',
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mtc.new_id', 0 ), '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', 'Users', 'vu', 'vu.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'vu.name', 'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'vu.icon', 'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_CSSResourceVersionList_Load_Query_Filter', '', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'v.id,v.res_id,v.user_id,user_name:vu.name:null_char,v.code,v.type,v.is_global,v.active,v.file,v.mod_code,v.mod_data,r.templ_id,source_user_id:mtv.user_id:null_integer,source_user_name:mtvu.name:null_char', 'v.code' ) }">

	<MvEVAL EXPR = "{ JSON_CSSResourceVersionList_Joins( l.filter, l.sort, l.ondemandcolumns, l.joins ) }">

	<MvIF EXPR = "{ l.joins:source }">
		<MvIF EXPR = "{ l.ondemandcolumns:source }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'cssbv.head' ) }">

			<MvIF EXPR = "{ NOT ISNULL l.changeset }">
				<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'cssbv', 'cssbv.branch_id = ? AND cssbv.res_id = v.res_id AND cssbv.version_id = v.id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.ondemandcolumns:source_notes }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes AS source_notes' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query, 'mtv.user_id', 'source_user_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', 'Users', 'mtvu', 'mtvu.id = mtv.user_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.name', 'source_user_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.icon', 'source_user_icon' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'CSSResourceVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00220', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"	VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT CSSResourceVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":					<MvEVAL EXPR = "{ int( CSSResourceVersions.d.id ) }">,
				"res_id":				<MvEVAL EXPR = "{ int( CSSResourceVersions.d.res_id ) }">,
				"user_id":				<MvEVAL EXPR = "{ int( CSSResourceVersions.d.user_id ) }">,
				"user_name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.user_name ) }">",
				"user_icon":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.user_icon ) }">",
				"code":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.code ) }">",
				"type":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.type ) }">",
				"is_global":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( CSSResourceVersions.d.is_global ) }">,
				"active":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( CSSResourceVersions.d.active ) }">,
				"file":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.file ) }">",
				"content_id":			<MvEVAL EXPR = "{ int( CSSResourceVersions.d.content_id ) }">,
				"mod_code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.mod_code ) }">",
				"mod_data":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.mod_data ) }">",

				<MvIF EXPR = "{ ( CSSResourceVersions.d.type EQ 'L' ) AND [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'css', l.branch:tmpldir, CSSResourceVersions.d.file, '', l.branchless_file ) }">
					"branchless_file":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branchless_file ) }">",
				</MvIF>

				"templ_id":				<MvEVAL EXPR = "{ int( CSSResourceVersions.d.templ_id ) }">,
				"attributes":
				[
					<MvASSIGN NAME = "l.attribute_count"		VALUE = 0>
					<MvASSIGN NAME = "l.attributes"				VALUE = "{ miva_array_deserialize( CSSResourceVersions.d.attributes ) }">

					<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
							"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
							"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					</MvFOREACH>
				]

				<MvIF EXPR = "{ l.ondemandcolumns:linkedpages }">
					,"linkedpages":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.page_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageList_Load_Branch_CSSResource( l.branch:id, CSSResourceVersions.d.res_id, l.pages ) }">
						<MvELSE>								<MvASSIGN NAME = "l.page_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageList_Load_Changeset_CSSResource( l.changeset:id, CSSResourceVersions.d.res_id, l.pages ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_page_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ l.page_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_page_count ) }">
								<MvEVAL EXPR = "{ JSON_Page( l.page ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ ( CSSResourceVersions.d.type EQ 'C' ) AND l.ondemandcolumns:linkedresources }">
					,"linkedresources":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.resource_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Branch_CombinedResource( l.branch:id, CSSResourceVersions.d.res_id, l.resources ) }">
						<MvELSE>								<MvASSIGN NAME = "l.resource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Changeset_CombinedResource( l.changeset:id, CSSResourceVersions.d.res_id, l.resources ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_resource_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.resource" ARRAY = "l.resources" COUNT = "{ l.resource_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_resource_count ) }">
								<MvEVAL EXPR = "{ JSON_CSSResource( l.resource ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source }">
					<MvIF EXPR = "{ CSSResourceVersions.d.type EQ 'I' }">
						,"source":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( CSSResourceVersions.d.source ) }">",
						"source_user_id":	<MvEVAL EXPR = "{ int( CSSResourceVersions.d.source_user_id ) }">,
						"source_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.source_user_name ) }">",
						"source_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.source_user_icon ) }">"
					<MvELSEIF EXPR = "{ CSSResourceVersions.d.type EQ 'L' }">
						<MvIF EXPR = "{ NOT CSSResourceVersions.d.head }">	<MvASSIGN NAME = "l.managedcontent_loaded" VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( CSSResourceVersions.d.content_id, l.managedcontent ) }">
						<MvELSE>											<MvASSIGN NAME = "l.managedcontent_loaded" VALUE = 0>
						</MvIF>

						<MvIF EXPR = "{ l.managedcontent_loaded }">
							,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.managedcontent:content ) }">"
						<MvELSE>
							<MvASSIGN NAME = "l.source"			VALUE = "">
							<MvASSIGN NAME = "l.full_file_path"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, CSSResourceVersions.d.file ) }">
							<MvASSIGN NAME = "l.null"			VALUE = "{ file_read( l.full_file_path, 'script', l.source ) }">

							,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.source ) }">"
						</MvIF>

						,"source_user_id":	0,
						"source_user_name":	"",
						"source_user_icon":	""
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source_notes AND CSSResourceVersions.d.type EQ 'I' }">
					,"source_notes": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.source_notes ) }">"
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "CSSResourceVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResourceVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResourceVersionList_Joins" PARAMETERS = "filter var, sort var, ondemandcolumns var, joins var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sort_field"	VALUE = "{ [ g.Module_Library_DB ].SQL_Sort_Field( l.sort, l.null ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:source }">																			<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.ondemandcolumns:source_notes }">																	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'source_user_id' }">																<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'source_user_name' }">																<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( g.Filter, 'source_user_id',	l.null ) }">	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( g.Filter, 'source_user_name',	l.null ) }">	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSE>																												<MvASSIGN NAME = "l.joins:source" VALUE = 0>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_JavaScriptResourceVersionList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchJavaScriptResourceVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.changeset"			VALUE = "">

	<MvASSIGN NAME = "l.changeset_id"		VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.id',		'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.res_id',	'res_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.user_id',	'user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'vu.name',		'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'v.active',	'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.mod_data',	'mod_data' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'r.templ_id',	'templ_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'mtv.user_id',	'source_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mtvu.name',	'source_user_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.changeset_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00221', 'Changeset not found' ) }">
		<MvELSEIF EXPR = "{ l.changeset:branch_id NE l.branch:id }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00222', 'Changeset does not exist on the specified branch' ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'v.id			AS id,
																				 v.res_id		AS res_id,
																				 v.user_id		AS user_id,
																				 v.code			AS code,
																				 v.type			AS type,
																				 v.is_global	AS is_global,
																				 v.active		AS active,
																				 v.file			AS file,
																				 v.content_id	AS content_id,
																				 v.mod_code		AS mod_code,
																				 v.mod_data		AS mod_data,
																				 r.templ_id		AS templ_id,
																				 v.attributes	AS attributes' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResources', 'r' ) }">

	<MvIF EXPR = "{ ISNULL l.changeset }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions', 'jsbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'jsbv.branch_id	= ?					AND
																					jsbv.head		= 1					AND
																					v.id			= jsbv.version_id	AND
																					r.id			= jsbv.res_id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions', 'mtbv', 'mtbv.branch_id = ? AND mtbv.templ_id = r.templ_id AND mtbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = mtbv.version_id', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceVersions',	'v' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceChanges',	'jsc' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'jsc.branch_id	= ?		AND
																					jsc.res_id		= r.id	AND
																					jsc.set_id		=
																					(
																						SELECT
																							MAX( jsc2.set_id )
																						FROM
																							' $ g.Store_Table_Prefix $ 'JavaScriptResourceChanges jsc2
																						WHERE
																							jsc2.branch_id	= ?		AND
																							jsc2.res_id		= r.id	AND
																							jsc2.set_id		<= ?
																					)',
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'v.id = jsc.new_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplates', 'mt', 'mt.id = r.templ_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateChanges', 'mtc', 'mtc.branch_id	= ?				AND
																																						   mtc.templ_id		= r.templ_id	AND
																																						   mtc.set_id		=
																																						   (
																																								SELECT
																																									MAX( mtc2.set_id )
																																								FROM
																																									' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc2
																																								WHERE
																																									mtc2.branch_id	= ?				AND
																																									mtc2.templ_id	= r.templ_id	AND
																																									mtc2.set_id		<= ?
																																							)',
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mtc.new_id', 0 ), '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', 'Users', 'vu', 'vu.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'vu.name', 'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'vu.icon', 'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_JavaScriptResourceVersionList_Load_Query_Filter', '', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'v.id,v.res_id,v.user_id,user_name:vu.name:null_char,v.code,v.type,v.is_global,v.active,v.file,v.mod_code,v.mod_data,r.templ_id,source_user_id:mtv.user_id:null_integer,source_user_name:mtvu.name:null_char', 'v.code' ) }"> 

	<MvEVAL EXPR = "{ JSON_JavaScriptResourceVersionList_Joins( l.filter, l.sort, l.ondemandcolumns, l.joins ) }">

	<MvIF EXPR = "{ l.joins:source }">
		<MvIF EXPR = "{ l.ondemandcolumns:source }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'jsbv.head' ) }">

			<MvIF EXPR = "{ NOT ISNULL l.changeset }">
				<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions', 'jsbv', 'jsbv.branch_id = ? AND jsbv.res_id = v.res_id AND jsbv.version_id = v.id', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.ondemandcolumns:source_notes }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes AS source_notes' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query, 'mtv.user_id', 'source_user_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', 'Users', 'mtvu', 'mtvu.id = mtv.user_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.name', 'source_user_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.icon', 'source_user_icon' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'JavaScriptResourceVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00223', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"	VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT JavaScriptResourceVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":					<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.id ) }">,
				"res_id":				<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.res_id ) }">,
				"user_id":				<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.user_id ) }">,
				"user_name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.user_name ) }">",
				"user_icon":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.user_icon ) }">",
				"code":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.code ) }">",
				"type":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.type ) }">",
				"is_global":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( JavaScriptResourceVersions.d.is_global ) }">,
				"active":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( JavaScriptResourceVersions.d.active ) }">,
				"file":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.file ) }">",
				"content_id":			<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.content_id ) }">,
				"mod_code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.mod_code ) }">",
				"mod_data":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.mod_data ) }">",

				<MvIF EXPR = "{ ( JavaScriptResourceVersions.d.type EQ 'L' ) AND [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'scripts', l.branch:tmpldir, JavaScriptResourceVersions.d.file, '', l.branchless_file ) }">
					"branchless_file":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branchless_file ) }">",
				</MvIF>

				"templ_id":				<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.templ_id ) }">,
				"attributes":
				[
					<MvASSIGN NAME = "l.attribute_count"		VALUE = 0>
					<MvASSIGN NAME = "l.attributes"				VALUE = "{ miva_array_deserialize( JavaScriptResourceVersions.d.attributes ) }">

					<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
							"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
							"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					</MvFOREACH>
				]

				<MvIF EXPR = "{ l.ondemandcolumns:linkedpages }">
					,"linkedpages":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.page_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageList_Load_Branch_JavaScriptResource( l.branch:id, JavaScriptResourceVersions.d.res_id, l.pages ) }">
						<MvELSE>								<MvASSIGN NAME = "l.page_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageList_Load_Changeset_JavaScriptResource( l.changeset:id, JavaScriptResourceVersions.d.res_id, l.pages ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_page_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ l.page_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_page_count ) }">
								<MvEVAL EXPR = "{ JSON_Page( l.page ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ ( JavaScriptResourceVersions.d.type EQ 'C' ) AND l.ondemandcolumns:linkedresources }">
					,"linkedresources":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.resource_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Branch_CombinedResource( l.branch:id, JavaScriptResourceVersions.d.res_id, l.resources ) }">
						<MvELSE>								<MvASSIGN NAME = "l.resource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Changeset_CombinedResource( l.changeset:id, JavaScriptResourceVersions.d.res_id, l.resources ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_resource_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.resource" ARRAY = "l.resources" COUNT = "{ l.resource_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_resource_count ) }">
								<MvEVAL EXPR = "{ JSON_JavaScriptResource( l.resource ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source }">
					<MvIF EXPR = "{ JavaScriptResourceVersions.d.type EQ 'I' }">
						,"source":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( JavaScriptResourceVersions.d.source ) }">",
						"source_user_id":	<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.source_user_id ) }">,
						"source_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.source_user_name ) }">",
						"source_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.source_user_icon ) }">"
					<MvELSEIF EXPR = "{ JavaScriptResourceVersions.d.type EQ 'L' }">
						<MvIF EXPR = "{ NOT JavaScriptResourceVersions.d.head }">	<MvASSIGN NAME = "l.managedcontent_loaded" VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( JavaScriptResourceVersions.d.content_id, l.managedcontent ) }">
						<MvELSE>													<MvASSIGN NAME = "l.managedcontent_loaded" VALUE = 0>
						</MvIF>

						<MvIF EXPR = "{ l.managedcontent_loaded }">
							,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.managedcontent:content ) }">"
						<MvELSE>
							<MvASSIGN NAME = "l.source"			VALUE = "">
							<MvASSIGN NAME = "l.full_file_path"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, JavaScriptResourceVersions.d.file ) }">
							<MvASSIGN NAME = "l.null"			VALUE = "{ file_read( l.full_file_path, 'script', l.source ) }">

							,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.source ) }">"
						</MvIF>

						,"source_user_id":	0,
						"source_user_name":	"",
						"source_user_icon":	""
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source_notes AND JavaScriptResourceVersions.d.type EQ 'I' }">
					,"source_notes": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.source_notes ) }">"
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "JavaScriptResourceVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResourceVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset" PARAMETERS = "changeset var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.changeset:id ) }">,
	"branch_id":	<MvEVAL EXPR = "{ int( l.changeset:branch_id ) }">,
	"user_id":		<MvEVAL EXPR = "{ int( l.changeset:user_id ) }">,
	"dtstamp":		<MvEVAL EXPR = "{ int( l.changeset:dtstamp ) }">,
	"notes":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.changeset:notes ) }">",

	<MvASSIGN NAME = "l.tag_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].ChangesetTagList_Load_Changeset( l.changeset:id, l.tags ) }">

	"tags":
	[
		<MvFOREACH INDEX = "l.tag_pos" ITERATOR = "l.tag" ARRAY = "l.tags" COUNT = "{ l.tag_count }">
			<MvIF EXPR = "{ l.tag_pos GT 1 }">
				,
			</MvIF>

			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.tag:tag ) }">"
		</MvFOREACH>
	],
	"formatted_tags":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( [ g.Feature_Filename_TUI_MGR ].TemplateManager_Format_ChangesetTags( l.tags, l.tag_count ) ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Set_Working_Branch( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.notes"				VALUE = "">
	<MvASSIGN NAME = "l.item_count"			VALUE = "{ [ g.Module_Feature_TUI_DB ].ItemList_Load_Codes( l.items ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'o', 'Notes', l.notes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Tags', l.tags ) }">
		<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Override_BranchTags( l.tags ) }">
	</MvIF>

	<MvASSIGN NAME = "l.input_resourcegroup_change_count"	VALUE = "{ [ g.Module_JSON ].JSON_Input_Array( 'ResourceGroup_Changes',			l.input_resourcegroup_changes ) }">
	<MvASSIGN NAME = "l.input_cssresource_change_count"		VALUE = "{ [ g.Module_JSON ].JSON_Input_Array( 'CSSResource_Changes',			l.input_cssresource_changes ) }">
	<MvASSIGN NAME = "l.input_scriptresource_change_count"	VALUE = "{ [ g.Module_JSON ].JSON_Input_Array( 'JavaScriptResource_Changes',	l.input_scriptresource_changes ) }">
	<MvASSIGN NAME = "l.input_property_change_count"		VALUE = "{ [ g.Module_JSON ].JSON_Input_Array( 'Property_Changes',				l.input_property_changes ) }">
	<MvASSIGN NAME = "l.input_template_change_count"		VALUE = "{ [ g.Module_JSON ].JSON_Input_Array( 'Template_Changes',				l.input_template_changes ) }">
	<MvASSIGN NAME = "l.input_module_change_count"			VALUE = "{ [ g.Module_JSON ].JSON_Input_Array( 'Module_Changes',				l.input_module_changes ) }">

	<MvIF EXPR = "{ ( l.input_resourcegroup_change_count EQ 0 )		AND
					( l.input_cssresource_change_count EQ 0 )		AND
					( l.input_scriptresource_change_count EQ 0 )	AND
					( l.input_property_change_count EQ 0 )			AND
					( l.input_template_change_count EQ 0 )			AND
					( l.input_module_change_count EQ 0 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00231', 'At least one change must be specified' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Step 1: Validate/preprocess all changes.  We always validate everything so we can return at least one input error per invalid record.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT JSON_Changeset_Create_Validate_ResourceGroup_Changes( l.branch, l.items, l.input_resourcegroup_changes, l.input_resourcegroup_change_count, l.resourcegroup_changes, l.resourcegroup_change_count )						OR
					NOT JSON_Changeset_Create_Validate_CSSResource_Changes( l.branch, l.notes, l.items, l.input_cssresource_changes, l.input_cssresource_change_count, l.cssresource_changes, l.cssresource_change_count )						OR
					NOT JSON_Changeset_Create_Validate_JavaScriptResource_Changes( l.branch, l.notes, l.items, l.input_scriptresource_changes, l.input_scriptresource_change_count, l.scriptresource_changes, l.scriptresource_change_count )	OR
					NOT JSON_Changeset_Create_Validate_Property_Changes( l.branch, l.notes, l.items, l.input_property_changes, l.input_property_change_count, l.property_changes, l.property_change_count )										OR
					NOT JSON_Changeset_Create_Validate_Template_Changes( l.branch, l.notes, l.items, l.input_template_changes, l.input_template_change_count, l.template_changes, l.template_change_count )										OR
					NOT JSON_Changeset_Create_Validate_Module_Changes( l.branch, l.notes, l.items, l.input_module_changes, l.input_module_change_count, l.module_changes, l.module_change_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvCOMMENT>
	|
	| Step 2: Process items (these helper functions directly call JSON_Response_Error for symmetry with the validation functions)
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin_Branch( l.branch:id, l.notes ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Changeset_Create_Process_ResourceGroup_Changes( l.branch, l.items, l.resourcegroup_changes, l.resourcegroup_change_count ) }">				<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT JSON_Changeset_Create_Process_CSSResource_Changes( l.branch, l.items, l.cssresource_changes, l.cssresource_change_count ) }">				<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT JSON_Changeset_Create_Process_JavaScriptResource_Changes( l.branch, l.items, l.scriptresource_changes, l.scriptresource_change_count ) }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT JSON_Changeset_Create_Process_Property_Changes( l.branch, l.items, l.property_changes, l.property_change_count ) }">						<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT JSON_Changeset_Create_Process_Template_Changes( l.branch, l.items, l.template_changes, l.template_change_count ) }">						<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT JSON_Changeset_Create_Process_Module_Changes( l.branch, l.items, l.module_changes, l.module_change_count ) }">								<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Commit( l.changeset ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_Changeset( l.changeset ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Validate_ResourceGroup_Changes" PARAMETERS = "branch var, items var, input_changes var, input_change_count, changes var, change_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Load Resource Groups and resources being assigned to the group
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.change_count"						VALUE = 0>
	<MvASSIGN NAME = "l.changes"							VALUE = "">

	<MvFOREACH ITERATOR = "l.input_change" ARRAY = "l.input_changes" COUNT = "{ l.input_change_count }">
		<MvASSIGN NAME = "l.change_valid"					VALUE = 1>

		<MvASSIGN NAME = "l.change"							VALUE = "">
		<MvASSIGN NAME = "l.change:resourcegroup"			VALUE = "">
		<MvASSIGN NAME = "l.change:css_unassign"			VALUE = "">
		<MvASSIGN NAME = "l.change:css_unassign_count"		VALUE = 0>
		<MvASSIGN NAME = "l.change:css_assign"				VALUE = "">
		<MvASSIGN NAME = "l.change:css_assign_count"		VALUE = 0>
		<MvASSIGN NAME = "l.change:css_offsets"				VALUE = "">
		<MvASSIGN NAME = "l.change:css_offset_count"		VALUE = 0>
		<MvASSIGN NAME = "l.change:script_unassign"			VALUE = "">
		<MvASSIGN NAME = "l.change:script_unassign_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:script_assign"			VALUE = "">
		<MvASSIGN NAME = "l.change:script_assign_count"		VALUE = 0>
		<MvASSIGN NAME = "l.change:script_offsets"			VALUE = "">
		<MvASSIGN NAME = "l.change:script_offset_count"		VALUE = 0>

		<MvCOMMENT>
		|
		| Locate Resource Group by ResourceGroup_ID or ResourceGroup_Code
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'ResourceGroup_ID' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.input_change, 'R', 'ResourceGroup_ID', l.resourcegroup_id ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_ID( l.resourcegroup_id, l.change:resourcegroup ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'ResourceGroup_ID', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'ResourceGroup_ID', 'Resource Group not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'ResourceGroup_Code' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'R', 'ResourceGroup_Code', l.resourcegroup_code ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_Code( l.resourcegroup_code, l.change:resourcegroup ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'ResourceGroup_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'ResourceGroup_Code', 'Resource Group not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'One of ResourceGroup_ID or ResourceGroup_Code must be specified' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| Load and Validate LinkedCSSResources.  Generate three arrays in the change for processing:
		|
		|	css_unassign[]	IDs of resources to be unassigned
		|	css_assign[]	IDs of resources to be assigned
		|	css_offsets[]	OffsetArray for sorting the resulting records in the proper order
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'LinkedCSSResources' ) }">
			<MvASSIGN NAME = "l.resourcexgroups"					VALUE = "">
			<MvASSIGN NAME = "l.null"								VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceXGroupList_Load_Branch_Group( l.branch:id, l.change:resourcegroup:id, l.resourcexgroups ) }">
			<MvASSIGN NAME = "l.input_resource_count"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change, 'LinkedCSSResources', l.input_resource_codes ) }">

			<MvFOREACH INDEX = "l.index" ITERATOR = "l.input_resource_code" ARRAY = "l.input_resource_codes" COUNT = "{ l.input_resource_count }">
				<MvASSIGN NAME = "l.resource_code"					VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Value( l.input_resource_code ) }">

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Branch_Code( l.branch:id, l.resource_code, l.resource ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', 'CSS Resource not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.offset:css_id"					VALUE = "{ l.resource:id }">
				<MvASSIGN NAME = "l.offset:offset"					VALUE = "{ l.index }">
				<MvASSIGN NAME = "l.offset:original_offset"			VALUE = "{ miva_array_search( l.resourcexgroups, 1, l.resourcexgroup, 'l.resourcexgroup:css_id EQ l.resource:id' ) }">

				<MvIF EXPR = "{ l.offset:original_offset }">
					<MvASSIGN NAME = "l.resourcexgroup:assigned"	VALUE = 1>
				<MvELSE>
					<MvCOMMENT>
					|
					| original_offset is only required to be relative (its absolute value is non-essential), so we simply assume that all newly assigned records are
					| assigned in order at some offset greater than the total number of resulting records, which is good enough.
					|
					</MvCOMMENT>

					<MvASSIGN NAME = "l.offset:original_offset"		VALUE = "{ l.input_resource_count + l.index }">
					<MvASSIGN NAME = "l.change:css_assign_count"	VALUE = "{ miva_array_insert_var( l.change:css_assign, l.resource:id, -1 ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change:css_offset_count"		VALUE = "{ miva_array_insert_var( l.change:css_offsets, l.offset, -1 ) }">
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.resourcexgroup" ARRAY = "l.resourcexgroups" COUNT = "{ miva_array_filter_ref( l.resourcexgroups, 1, l.resourcexgroup, 'NOT l.resourcexgroup:assigned', l.resourcexgroups ) }">
				<MvASSIGN NAME = "l.change:css_unassign_count"		VALUE = "{ miva_array_insert_var( l.change:css_unassign, l.resourcexgroup:css_id, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvCOMMENT>
		|
		| Load and Validate LinkedJavaScriptResources.  Generate three arrays in the change for processing:
		|
		|	script_unassign[]	IDs of resources to be unassigned
		|	script_assign[]		IDs of resources to be assigned
		|	script_offsets[]	OffsetArray for sorting the resulting records in the proper order
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'LinkedJavaScriptResources' ) }">
			<MvASSIGN NAME = "l.resourcexgroups"					VALUE = "">
			<MvASSIGN NAME = "l.null"								VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroupList_Load_Branch_Group( l.branch:id, l.change:resourcegroup:id, l.resourcexgroups ) }">
			<MvASSIGN NAME = "l.input_resource_count"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change, 'LinkedJavaScriptResources', l.input_resource_codes ) }">

			<MvFOREACH INDEX = "l.index" ITERATOR = "l.input_resource_code" ARRAY = "l.input_resource_codes" COUNT = "{ l.input_resource_count }">
				<MvASSIGN NAME = "l.resource_code"					VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Value( l.input_resource_code ) }">

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Branch_Code( l.branch:id, l.resource_code, l.resource ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', 'JavaScript Resource not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.offset:script_id"				VALUE = "{ l.resource:id }">
				<MvASSIGN NAME = "l.offset:offset"					VALUE = "{ l.index }">
				<MvASSIGN NAME = "l.offset:original_offset"			VALUE = "{ miva_array_search( l.resourcexgroups, 1, l.resourcexgroup, 'l.resourcexgroup:script_id EQ l.resource:id' ) }">

				<MvIF EXPR = "{ l.offset:original_offset }">
					<MvASSIGN NAME = "l.resourcexgroup:assigned"	VALUE = 1>
				<MvELSE>
					<MvCOMMENT>
					|
					| original_offset is only required to be relative (its absolute value is non-essential), so we simply assume that all newly assigned records are
					| assigned in order at some offset greater than the total number of resulting records, which is good enough.
					|
					</MvCOMMENT>

					<MvASSIGN NAME = "l.offset:original_offset"		VALUE = "{ l.input_resource_count + l.index }">
					<MvASSIGN NAME = "l.change:script_assign_count"	VALUE = "{ miva_array_insert_var( l.change:script_assign, l.resource:id, -1 ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change:script_offset_count"		VALUE = "{ miva_array_insert_var( l.change:script_offsets, l.offset, -1 ) }">
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.resourcexgroup" ARRAY = "l.resourcexgroups" COUNT = "{ miva_array_filter_ref( l.resourcexgroups, 1, l.resourcexgroup, 'NOT l.resourcexgroup:assigned', l.resourcexgroups ) }">
				<MvASSIGN NAME = "l.change:script_unassign_count"	VALUE = "{ miva_array_insert_var( l.change:script_unassign, l.resourcexgroup:script_id, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvIF EXPR = "{ l.change_valid }">
			<MvASSIGN NAME = "l.change_count"				VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.change_count EQ l.input_change_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Process_ResourceGroup_Changes" PARAMETERS = "branch var, items var, changes var, change_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.change" ARRAY = "l.changes" COUNT = "{ l.change_count }">
		<MvCOMMENT>
		|
		| Process LinkedCSSResources
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.css_id" ARRAY = "l.change:css_unassign" COUNT = "{ l.change:css_unassign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Delete_Branch( l.branch:id, l.css_id, l.change:resourcegroup:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.css_id" ARRAY = "l.change:css_assign" COUNT = "{ l.change:css_assign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Insert_Branch( l.branch:id, l.css_id, l.change:resourcegroup:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.change:css_offset_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Update_Branch_Offsets( l.branch:id, l.change:resourcegroup:id, l.change:css_offsets ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Process LinkedJavaScriptResources
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.script_id" ARRAY = "l.change:script_unassign" COUNT = "{ l.change:script_unassign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroup_Delete_Branch( l.branch:id, l.script_id, l.change:resourcegroup:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.script_id" ARRAY = "l.change:script_assign" COUNT = "{ l.change:script_assign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroup_Insert_Branch( l.branch:id, l.script_id, l.change:resourcegroup:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.change:script_offset_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroup_Update_Branch_Offsets( l.branch:id, l.change:resourcegroup:id, l.change:script_offsets ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Validate_CSSResource_Changes" PARAMETERS = "branch var, changeset_notes, items var, input_changes var, input_change_count, changes var, change_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Load and validate CSS Resource changes
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.change_count"					VALUE = 0>
	<MvASSIGN NAME = "l.changes"						VALUE = "">

	<MvASSIGN NAME = "l.template_dir"					VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">
	<MvASSIGN NAME = "l.temporary_filename"				VALUE = "{ l.template_dir $ MakeSessionID() $ '.mvc' }">

	<MvFOREACH ITERATOR = "l.input_change" ARRAY = "l.input_changes" COUNT = "{ l.input_change_count }">
		<MvASSIGN NAME = "l.change_valid"				VALUE = 1>

		<MvASSIGN NAME = "l.change"						VALUE = "">
		<MvASSIGN NAME = "l.change:update_source"		VALUE = 0>
		<MvASSIGN NAME = "l.change:update_record"		VALUE = 0>
		<MvASSIGN NAME = "l.change:rename_file"			VALUE = 0>
		<MvASSIGN NAME = "l.change:resource"			VALUE = "">
		<MvASSIGN NAME = "l.change:previous_file_path"	VALUE = "">
		<MvASSIGN NAME = "l.change:current_file_path"	VALUE = "">
		<MvASSIGN NAME = "l.change:page_unassign"		VALUE = "">
		<MvASSIGN NAME = "l.change:page_unassign_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:page_assign"			VALUE = "">
		<MvASSIGN NAME = "l.change:page_assign_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:comb_unassign"		VALUE = "">
		<MvASSIGN NAME = "l.change:comb_unassign_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:comb_assign"			VALUE = "">
		<MvASSIGN NAME = "l.change:comb_assign_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:comb_offsets"		VALUE = "">
		<MvASSIGN NAME = "l.change:comb_offset_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:notes"				VALUE = "{ l.changeset_notes }">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'O', 'Notes', l.change:notes ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| Locate CSS Resource by CSSResource_ID or CSSResource_Code
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'CSSResource_ID' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.input_change, 'R', 'CSSResource_ID', l.resource_id ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Branch_ID( l.branch:id, l.resource_id, l.change:resource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'CSSResource_ID', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'CSSResource_ID', 'CSS Resource not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'CSSResource_Code' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'R', 'CSSResource_Code', l.resource_code ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Branch_Code( l.branch:id, l.resource_code, l.change:resource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'CSSResource_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'CSSResource_Code', 'CSS Resource not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'One of CSSResource_ID or CSSResource_Code must be specified' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| External Modification Capture
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:resource:type EQ 'L' }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Capture_External_Modification_CSSResource( l.change:resource ) }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', g.Error_Code $ ': ' $ g.Error_Message ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Handle Source
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Source' ) }">
			<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change, 'Source', l.change:source ) }">

			<MvCOMMENT>
			|
			| Validate template compilation for inline resources
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.change:resource:type EQ 'I' }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Branch_ID( l.branch:id, l.change:resource:templ_id, l.change:managedtemplate ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', 'Resource template not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.change:source, l.null, l.temporary_filename, l.compile_error ) }">
					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', 'Error compiling template: ' $ l.compile_error ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.null"					VALUE = "{ sdelete( l.temporary_filename ) }">
			<MvELSEIF EXPR = "{ l.change:resource:type NE 'L' }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', 'Source may only be specified for resources of type \'Local File\' or \'Inline CSS\'' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.change:update_source"		VALUE = 1>
		</MvIF>

		<MvCOMMENT>
		|
		| Process changes to the CSS Resource fields
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:resource:type EQ 'L' }">
			<MvASSIGN NAME = "l.change:previous_file_path"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.change:resource:file ) }">
		</MvIF>

		<MvASSIGN NAME = "l.file_path_exists"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'File_Path' ) }">
		<MvASSIGN NAME = "l.branchless_file_path_exists"	VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Branchless_File_Path' ) }">

		<MvIF EXPR = "{ l.file_path_exists AND l.branchless_file_path_exists }">
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'File_Path', 'Only one of File_Path or Branchless_File_Path may be specified' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Global' )	OR
						[ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Active' )	OR
						l.file_path_exists OR l.branchless_file_path_exists }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_change, 'o', 'Global',					l.change:resource:is_global )	OR
							NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_change, 'o', 'Active',					l.change:resource:active ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.file_path_exists }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text(	l.input_change, 'o', 'File_Path',				l.change:resource:file ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSEIF EXPR = "{ l.branchless_file_path_exists }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text(	l.input_change, 'O', 'Branchless_File_Path',	l.branchless_file ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'css', '', l.branchless_file, l.branch:tmpldir, l.change:resource:file ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.change:resource:type EQ 'L' OR l.change:resource:type EQ 'E' ) AND ISNULL l.change:resource:file }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'File_Path', 'Please specify a file path' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.change:update_resource"		VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ l.change:resource:type EQ 'M' OR
						l.change:resource:type EQ 'Y' }">
			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Module_Code' ) OR
							[ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Module_Data' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'R',		'Module_Code',	l.module_code ) OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'R:100', 'Module_Data',	l.module_data ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module \'' $ l.module_code $ '\' not found' ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:active }">
					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module \'' $ l.module_code $ '\' is inactive' ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cssresource }">
					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module \'' $ l.module_code $ '\' does not implement the cssresource feature' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.change:resource:mod_code"	VALUE = "{ l.module:code }">
				<MvASSIGN NAME = "l.change:resource:mod_data"	VALUE = "{ l.module_data }">

				<MvASSIGN NAME = "l.change:update_resource"		VALUE = 1>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Attributes' ) }">
			<MvASSIGN NAME = "l.change:resource:attributes"	VALUE = "">

			<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change, 'Attributes', l.attributes ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'R', 'name',	l.resource_attribute:name ) OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'o', 'value',	l.resource_attribute:value ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.null"					VALUE = "{ miva_array_insert( l.change:resource:attributes, l.resource_attribute, -1 ) }">
			</MvFOREACH>

			<MvASSIGN NAME = "l.change:update_resource"		VALUE = 1>
		</MvIF>

		<MvCOMMENT>
		|
		| Determine if we are renaming a Local File resource
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:resource:type EQ 'L' }">
			<MvASSIGN NAME = "l.change:current_file_path"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.change:resource:file ) }">
			<MvASSIGN NAME = "l.change:rename_file"			VALUE = "{ l.change:current_file_path NE l.change:previous_file_path }">
		</MvIF>

		<MvCOMMENT>
		|
		| Load and Validate LinkedPages (if resource is not global).  Generate two arrays in the change for processing:
		|
		|	page_unassign[]	IDs of pages to be unassigned
		|	page_assign[]	IDs of pages to be assigned
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'LinkedPages' ) }">
			<MvASSIGN NAME = "l.resourcexpages"						VALUE = "">
			<MvASSIGN NAME = "l.resourcexpage_count"				VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceXPageList_Load_Branch_Resource( l.branch:id, l.change:resource:id, l.resourcexpages ) }">
			<MvASSIGN NAME = "l.input_page_count"					VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change, 'LinkedPages', l.input_page_codes ) }">

			<MvFOREACH INDEX = "l.index" ITERATOR = "l.input_page_code" ARRAY = "l.input_page_codes" COUNT = "{ l.input_page_count }">
				<MvASSIGN NAME = "l.page_code"						VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Value( l.input_page_code ) }">

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Branch_Code( l.branch:id, l.page_code, l.page ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_page_code, '', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_page_code, '', 'Page not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.existing_index"					VALUE = "{ miva_array_search( l.resourcexpages, 1, l.resourcexpage, 'l.resourcexpage:page_id EQ l.page:id' ) }">

				<MvIF EXPR = "{ l.existing_index }">
					<MvASSIGN NAME = "l.resourcexpage_count"		VALUE = "{ miva_array_delete( l.resourcexpages, l.existing_index, 1 ) }">
				<MvELSE>
					<MvCOMMENT>
					|
					| original_offset is only required to be relative (its absolute value is non-essential), so we simply assume that all newly assigned records are
					| assigned in order at some offset greater than the total number of resulting records, which is good enough.
					|
					</MvCOMMENT>

					<MvASSIGN NAME = "l.offset:original_offset"		VALUE = "{ l.input_page_count + l.index }">
					<MvASSIGN NAME = "l.change:page_assign_count"	VALUE = "{ miva_array_insert_var( l.change:page_assign, l.page:id, -1 ) }">
				</MvIF>
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.resourcexpage" ARRAY = "l.resourcexpages" COUNT = "{ l.resourcexpage_count }">
				<MvASSIGN NAME = "l.change:page_unassign_count"		VALUE = "{ miva_array_insert_var( l.change:page_unassign, l.resourcexpage:page_id, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvCOMMENT>
		|
		| Load and Validate LinkedResources.  Generate three arrays in the change for processing:
		|
		|	comb_unassign[]	IDs of resources to be unassigned
		|	comb_assign[]	IDs of resources to be assigned
		|	comb_offsets[]	OffsetArray for sorting the resulting records in the proper order
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'LinkedResources' ) }">
			<MvIF EXPR = "{ l.change:resource:type NE 'C' }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'LinkedResources', 'Loaded CSS Resource is not of type \'Combined Resource\'' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.null"								VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSCombinedResourceXResourceList_Load_Branch_CombinedResource( l.branch:id, l.change:resource:id, l.resourcexresources ) }">
			<MvASSIGN NAME = "l.input_resource_count"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change, 'LinkedResources', l.input_resource_codes ) }">

			<MvFOREACH INDEX = "l.index" ITERATOR = "l.input_resource_code" ARRAY = "l.input_resource_codes" COUNT = "{ l.input_resource_count }">
				<MvASSIGN NAME = "l.resource_code"					VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Value( l.input_resource_code ) }">

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Branch_Code( l.branch:id, l.resource_code, l.resource ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', 'CSS Resource not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ l.resource:type NE 'L' AND l.resource:type NE 'M' }">
					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', 'Loaded CSS Resource is not of type \'Local File\' or \'Module\'' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.offset:res_id"					VALUE = "{ l.resource:id }">
				<MvASSIGN NAME = "l.offset:offset"					VALUE = "{ l.index }">
				<MvASSIGN NAME = "l.offset:original_offset"			VALUE = "{ miva_array_search( l.resourcexresources, 1, l.resourcexresource, 'l.resourcexresource:res_id EQ l.resource:id' ) }">

				<MvIF EXPR = "{ l.offset:original_offset }">
					<MvASSIGN NAME = "l.resourcexresource:assigned"	VALUE = 1>
				<MvELSE>
					<MvCOMMENT>
					|
					| original_offset is only required to be relative (its absolute value is non-essential), so we simply assume that all newly assigned records are
					| assigned in order at some offset greater than the total number of resulting records, which is good enough.
					|
					</MvCOMMENT>

					<MvASSIGN NAME = "l.offset:original_offset"		VALUE = "{ l.input_resource_count + l.index }">
					<MvASSIGN NAME = "l.change:comb_assign_count"	VALUE = "{ miva_array_insert_var( l.change:comb_assign, l.resource:id, -1 ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change:comb_offset_count"		VALUE = "{ miva_array_insert_var( l.change:comb_offsets, l.offset, -1 ) }">
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.resourcexresource" ARRAY = "l.resourcexresources" COUNT = "{ miva_array_filter_ref( l.resourcexresources, 1, l.resourcexresource, 'NOT l.resourcexresource:assigned', l.resourcexresources ) }">
				<MvASSIGN NAME = "l.change:comb_unassign_count"	VALUE = "{ miva_array_insert_var( l.change:comb_unassign, l.resourcexresource:res_id, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvASSIGN NAME = "l.change_count"	VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.change_count EQ l.input_change_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Process_CSSResource_Changes" PARAMETERS = "branch var, items var, changes var, change_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.template_dir"						VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">

	<MvFOREACH ITERATOR = "l.change" ARRAY = "l.changes" COUNT = "{ l.change_count }">
		<MvCOMMENT>
		|
		| Handle renames of Local File resources, by copying the original file to the destination, rather than renaming.
		| This is most consistent with the branch copy/merge behavior.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:rename_file }">
			<MvIF EXPR = "{ sexists( l.change:previous_file_path ) }">
				<MvIF EXPR = "{ NOT scopy( l.change:previous_file_path, l.change:current_file_path ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00247', 'Unable to copy \'' $ l.change:previous_file_path $ '\' to \'' $ l.change:current_file_path $ '\': ' $ file_last_error() ) }">
				</MvIF>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Process source changes
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:update_source }">
			<MvIF EXPR = "{ l.change:resource:type EQ 'L' }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Write_ResourceFile( l.change:current_file_path, l.change:source ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_FindOrInsert( l.change:source, l.managedcontent ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change:resource:content_id"	VALUE = "{ l.managedcontent:id }">
				<MvASSIGN NAME = "l.change:update_resource"		VALUE = 1>
			<MvELSEIF EXPR = "{ l.change:resource:type EQ 'I' }">
				<MvASSIGN NAME = "l.version"					VALUE = "">
				<MvASSIGN NAME = "l.version:templ_id"			VALUE = "{ l.change:managedtemplate:id }">
				<MvASSIGN NAME = "l.version:user_id"			VALUE = "{ int( g.User:id ) }">
				<MvASSIGN NAME = "l.version:immutable"			VALUE = 0>
				<MvASSIGN NAME = "l.version:dtstamp"			VALUE = "{ s.time_t }">
				<MvASSIGN NAME = "l.version:notes"				VALUE = "{ substring_var( l.change:notes, 1, 100 ) }">
				<MvASSIGN NAME = "l.version:settings"			VALUE = "">
				<MvREFERENCE NAME = "l.version:source"			VARIABLE = "l.change:source">

				<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.version:source, l.null, l.template_dir $ l.change:managedtemplate:filename, l.compile_error ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00234', 'Error compiling template \'' $ l.change:managedtemplate:filename $ '\': ' $ l.compile_error ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Insert( l.version ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch:id, l.version:templ_id, l.version:id )		OR
								NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch:id, l.version:templ_id, l.version:id )	OR
								NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Record_ManagedTemplateVersion( l.version:templ_id, l.change:managedtemplate:current_id, l.version:id, l.version:notes ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Process record updates
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:update_resource }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Update_Branch( l.branch:id, l.change:resource ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Process LinkedPages
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.page_id" ARRAY = "l.change:page_unassign" COUNT = "{ l.change:page_unassign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXPage_Delete_Branch( l.branch:id, l.change:resource:id, l.page_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.page_id" ARRAY = "l.change:page_assign" COUNT = "{ l.change:page_assign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXPage_Insert_Branch( l.branch:id, l.change:resource:id, l.page_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Process LinkedResources
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.res_id" ARRAY = "l.change:comb_unassign" COUNT = "{ l.change:comb_unassign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSCombinedResourceXResource_Delete_Branch( l.branch:id, l.change:resource:id, l.res_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.res_id" ARRAY = "l.change:comb_assign" COUNT = "{ l.change:comb_assign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSCombinedResourceXResource_Insert_Branch( l.branch:id, l.change:resource:id, l.res_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.change:comb_offset_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSCombinedResourceXResource_Update_Branch_Offsets( l.branch:id, l.change:resource:id, l.change:comb_offsets ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Validate_JavaScriptResource_Changes" PARAMETERS = "branch var, changeset_notes, items var, input_changes var, input_change_count, changes var, change_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Load and validate JavaScript Resource changes
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.change_count"					VALUE = 0>
	<MvASSIGN NAME = "l.changes"						VALUE = "">

	<MvASSIGN NAME = "l.template_dir"					VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">
	<MvASSIGN NAME = "l.temporary_filename"				VALUE = "{ l.template_dir $ MakeSessionID() $ '.mvc' }">

	<MvFOREACH ITERATOR = "l.input_change" ARRAY = "l.input_changes" COUNT = "{ l.input_change_count }">
		<MvASSIGN NAME = "l.change_valid"				VALUE = 1>

		<MvASSIGN NAME = "l.change"						VALUE = "">
		<MvASSIGN NAME = "l.change:update_source"		VALUE = 0>
		<MvASSIGN NAME = "l.change:update_record"		VALUE = 0>
		<MvASSIGN NAME = "l.change:rename_file"			VALUE = 0>
		<MvASSIGN NAME = "l.change:resource"			VALUE = "">
		<MvASSIGN NAME = "l.change:previous_file_path"	VALUE = "">
		<MvASSIGN NAME = "l.change:current_file_path"	VALUE = "">
		<MvASSIGN NAME = "l.change:page_unassign"		VALUE = "">
		<MvASSIGN NAME = "l.change:page_unassign_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:page_assign"			VALUE = "">
		<MvASSIGN NAME = "l.change:page_assign_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:comb_unassign"		VALUE = "">
		<MvASSIGN NAME = "l.change:comb_unassign_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:comb_assign"			VALUE = "">
		<MvASSIGN NAME = "l.change:comb_assign_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:comb_offsets"		VALUE = "">
		<MvASSIGN NAME = "l.change:comb_offset_count"	VALUE = 0>
		<MvASSIGN NAME = "l.change:notes"				VALUE = "{ l.changeset_notes }">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'O', 'Notes', l.change:notes ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| Locate JavaScript Resource by JavaScriptResource_ID or JavaScriptResource_Code
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'JavaScriptResource_ID' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.input_change, 'R', 'JavaScriptResource_ID', l.resource_id ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Branch_ID( l.branch:id, l.resource_id, l.change:resource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'JavaScriptResource_ID', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'JavaScriptResource_ID', 'JavaScript Resource not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'JavaScriptResource_Code' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'R', 'JavaScriptResource_Code', l.resource_code ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Branch_Code( l.branch:id, l.resource_code, l.change:resource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'JavaScriptResource_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'JavaScriptResource_Code', 'JavaScript Resource not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'One of JavaScriptResource_ID or JavaScriptResource_Code must be specified' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| External Modification Capture
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:resource:type EQ 'L' }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Capture_External_Modification_JavaScriptResource( l.change:resource ) }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', g.Error_Code $ ': ' $ g.Error_Message ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Handle Source
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Source' ) }">
			<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change, 'Source', l.change:source ) }">

			<MvCOMMENT>
			|
			| Validate existence of local files and template compilation for inline resources
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.change:resource:type EQ 'I' }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Branch_ID( l.branch:id, l.change:resource:templ_id, l.change:managedtemplate ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', 'Resource template not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.change:source, l.null, l.temporary_filename, l.compile_error ) }">
					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', 'Error compiling template: ' $ l.compile_error ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.null"					VALUE = "{ sdelete( l.temporary_filename ) }">
			<MvELSEIF EXPR = "{ l.change:resource:type NE 'L' }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', 'Source may only be specified for resources of type \'Local File\' or \'Inline Script\'' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.change:update_source"		VALUE = 1>
		</MvIF>

		<MvCOMMENT>
		|
		| Process changes to the JavaScript Resource fields
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:resource:type EQ 'L' }">
			<MvASSIGN NAME = "l.change:previous_file_path"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.change:resource:file ) }">
		</MvIF>

		<MvASSIGN NAME = "l.file_path_exists"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'File_Path' ) }">
		<MvASSIGN NAME = "l.branchless_file_path_exists"	VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Branchless_File_Path' ) }">

		<MvIF EXPR = "{ l.file_path_exists AND l.branchless_file_path_exists }">
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'File_Path', 'Only one of File_Path or Branchless_File_Path may be specified' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Global' )	OR
						[ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Active' )	OR
						l.file_path_exists OR l.branchless_file_path_exists }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_change, 'o', 'Global',					l.change:resource:is_global )	OR
							NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_change, 'o', 'Active',					l.change:resource:active ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.file_path_exists }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text(	l.input_change, 'o', 'File_Path',				l.change:resource:file ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSEIF EXPR = "{ l.branchless_file_path_exists }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text(	l.input_change, 'O', 'Branchless_File_Path',	l.branchless_file ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'scripts', '', l.branchless_file, l.branch:tmpldir, l.change:resource:file ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.change:resource:type EQ 'L' OR l.change:resource:type EQ 'E' ) AND ISNULL l.change:resource:file }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'File_Path', 'Please specify a file path' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.change:update_resource"		VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ l.change:resource:type EQ 'M' OR
						l.change:resource:type EQ 'Y' }">
			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Module_Code' ) OR
							[ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Module_Data' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'R',		'Module_Code',	l.module_code ) OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'R:100',	'Module_Data',	l.module_data ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module \'' $ l.module_code $ '\' not found' ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:active }">
					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module \'' $ l.module_code $ '\' is inactive' ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:feature_hash:jsresource }">
					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module \'' $ l.module_code $ '\' does not implement the jsresource feature' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.change:resource:mod_code"	VALUE = "{ l.module:code }">
				<MvASSIGN NAME = "l.change:resource:mod_data"	VALUE = "{ l.module_data }">

				<MvASSIGN NAME = "l.change:update_resource"		VALUE = 1>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Attributes' ) }">
			<MvASSIGN NAME = "l.change:resource:attributes"	VALUE = "">

			<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change, 'Attributes', l.attributes ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'R', 'name',	l.resource_attribute:name ) OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.attribute, 'o', 'value',	l.resource_attribute:value ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.null"					VALUE = "{ miva_array_insert( l.change:resource:attributes, l.resource_attribute, -1 ) }">
			</MvFOREACH>

			<MvASSIGN NAME = "l.change:update_resource"		VALUE = 1>
		</MvIF>

		<MvCOMMENT>
		|
		| Determine if we are renaming a Local File resource
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:resource:type EQ 'L' }">
			<MvASSIGN NAME = "l.change:current_file_path"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.change:resource:file ) }">
			<MvASSIGN NAME = "l.change:rename_file"			VALUE = "{ l.change:current_file_path NE l.change:previous_file_path }">
		</MvIF>

		<MvCOMMENT>
		|
		| Load and Validate LinkedPages (if resource is not global).  Generate two arrays in the change for processing:
		|
		|	page_unassign[]	IDs of pages to be unassigned
		|	page_assign[]	IDs of pages to be assigned
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'LinkedPages' ) }">
			<MvASSIGN NAME = "l.resourcexpages"						VALUE = "">
			<MvASSIGN NAME = "l.resourcexpage_count"				VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXPageList_Load_Branch_Resource( l.branch:id, l.change:resource:id, l.resourcexpages ) }">
			<MvASSIGN NAME = "l.input_page_count"					VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change, 'LinkedPages', l.input_page_codes ) }">

			<MvFOREACH INDEX = "l.index" ITERATOR = "l.input_page_code" ARRAY = "l.input_page_codes" COUNT = "{ l.input_page_count }">
				<MvASSIGN NAME = "l.page_code"						VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Value( l.input_page_code ) }">

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Branch_Code( l.branch:id, l.page_code, l.page ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_page_code, '', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_page_code, '', 'Page not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.existing_index"					VALUE = "{ miva_array_search( l.resourcexpages, 1, l.resourcexpage, 'l.resourcexpage:page_id EQ l.page:id' ) }">

				<MvIF EXPR = "{ l.existing_index }">
					<MvASSIGN NAME = "l.resourcexpage_count"		VALUE = "{ miva_array_delete( l.resourcexpages, l.existing_index, 1 ) }">
				<MvELSE>
					<MvCOMMENT>
					|
					| original_offset is only required to be relative (its absolute value is non-essential), so we simply assume that all newly assigned records are
					| assigned in order at some offset greater than the total number of resulting records, which is good enough.
					|
					</MvCOMMENT>

					<MvASSIGN NAME = "l.offset:original_offset"		VALUE = "{ l.input_page_count + l.index }">
					<MvASSIGN NAME = "l.change:page_assign_count"	VALUE = "{ miva_array_insert_var( l.change:page_assign, l.page:id, -1 ) }">
				</MvIF>
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.resourcexpage" ARRAY = "l.resourcexpages" COUNT = "{ l.resourcexpage_count }">
				<MvASSIGN NAME = "l.change:page_unassign_count"		VALUE = "{ miva_array_insert_var( l.change:page_unassign, l.resourcexpage:page_id, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvCOMMENT>
		|
		| Load and Validate LinkedResources.  Generate three arrays in the change for processing:
		|
		|	comb_unassign[]	IDs of resources to be unassigned
		|	comb_assign[]	IDs of resources to be assigned
		|	comb_offsets[]	OffsetArray for sorting the resulting records in the proper order
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'LinkedResources' ) }">
			<MvIF EXPR = "{ l.change:resource:type NE 'C' }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'LinkedResources', 'Loaded JavaScript Resource is not of type \'Combined Resource\'' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.null"								VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptCombinedResourceXResourceList_Load_Branch_CombinedResource( l.branch:id, l.change:resource:id, l.resourcexresources ) }">
			<MvASSIGN NAME = "l.input_resource_count"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change, 'LinkedResources', l.input_resource_codes ) }">

			<MvFOREACH INDEX = "l.index" ITERATOR = "l.input_resource_code" ARRAY = "l.input_resource_codes" COUNT = "{ l.input_resource_count }">
				<MvASSIGN NAME = "l.resource_code"					VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Value( l.input_resource_code ) }">

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Branch_Code( l.branch:id, l.resource_code, l.resource ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', 'JavaScript Resource not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ l.resource:type NE 'L' AND l.resource:type NE 'M' }">
					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_resource_code, '', 'Loaded JavaScript Resource is not of type \'Local File\' or \'Module\'' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.offset:res_id"					VALUE = "{ l.resource:id }">
				<MvASSIGN NAME = "l.offset:offset"					VALUE = "{ l.index }">
				<MvASSIGN NAME = "l.offset:original_offset"			VALUE = "{ miva_array_search( l.resourcexresources, 1, l.resourcexresource, 'l.resourcexresource:res_id EQ l.resource:id' ) }">

				<MvIF EXPR = "{ l.offset:original_offset }">
					<MvASSIGN NAME = "l.resourcexresource:assigned"	VALUE = 1>
				<MvELSE>
					<MvCOMMENT>
					|
					| original_offset is only required to be relative (its absolute value is non-essential), so we simply assume that all newly assigned records are
					| assigned in order at some offset greater than the total number of resulting records, which is good enough.
					|
					</MvCOMMENT>

					<MvASSIGN NAME = "l.offset:original_offset"		VALUE = "{ l.input_resource_count + l.index }">
					<MvASSIGN NAME = "l.change:comb_assign_count"	VALUE = "{ miva_array_insert_var( l.change:comb_assign, l.resource:id, -1 ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change:comb_offset_count"		VALUE = "{ miva_array_insert_var( l.change:comb_offsets, l.offset, -1 ) }">
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.resourcexresource" ARRAY = "l.resourcexresources" COUNT = "{ miva_array_filter_ref( l.resourcexresources, 1, l.resourcexresource, 'NOT l.resourcexresource:assigned', l.resourcexresources ) }">
				<MvASSIGN NAME = "l.change:comb_unassign_count"	VALUE = "{ miva_array_insert_var( l.change:comb_unassign, l.resourcexresource:res_id, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvIF EXPR = "{ l.change_valid }">
			<MvASSIGN NAME = "l.change_count"			VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.change_count EQ l.input_change_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Process_JavaScriptResource_Changes" PARAMETERS = "branch var, items var, changes var, change_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.template_dir" VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">

	<MvFOREACH ITERATOR = "l.change" ARRAY = "l.changes" COUNT = "{ l.change_count }">
		<MvCOMMENT>
		|
		| Handle renames of Local File resources, by copying the original file to the destination, rather than renaming.
		| This is most consistent with the branch copy/merge behavior.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:rename_file }">
			<MvIF EXPR = "{ sexists( l.change:previous_file_path ) }">
				<MvIF EXPR = "{ NOT scopy( l.change:previous_file_path, l.change:current_file_path ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00248', 'Unable to copy \'' $ l.change:previous_file_path $ '\' to \'' $ l.change:current_file_path $ '\': ' $ file_last_error() ) }">
				</MvIF>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Process source changes
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:update_source }">
			<MvIF EXPR = "{ l.change:resource:type EQ 'L' }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Write_ResourceFile( l.change:current_file_path, l.change:source ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_FindOrInsert( l.change:source, l.managedcontent ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change:resource:content_id"	VALUE = "{ l.managedcontent:id }">
				<MvASSIGN NAME = "l.change:update_resource"		VALUE = 1>
			<MvELSEIF EXPR = "{ l.change:resource:type EQ 'I' }">
				<MvASSIGN NAME = "l.version"					VALUE = "">
				<MvASSIGN NAME = "l.version:templ_id"			VALUE = "{ l.change:managedtemplate:id }">
				<MvASSIGN NAME = "l.version:user_id"			VALUE = "{ int( g.User:id ) }">
				<MvASSIGN NAME = "l.version:immutable"			VALUE = 0>
				<MvASSIGN NAME = "l.version:dtstamp"			VALUE = "{ s.time_t }">
				<MvASSIGN NAME = "l.version:notes"				VALUE = "{ substring_var( l.change:notes, 1, 100 ) }">
				<MvASSIGN NAME = "l.version:settings"			VALUE = "">
				<MvREFERENCE NAME = "l.version:source"			VARIABLE = "l.change:source">

				<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.version:source, l.null, l.template_dir $ l.change:managedtemplate:filename, l.compile_error ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00237', 'Error compiling template \'' $ l.change:managedtemplate:filename $ '\': ' $ l.compile_error ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Insert( l.version ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch:id, l.version:templ_id, l.version:id )		OR
								NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch:id, l.version:templ_id, l.version:id )	OR
								NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Record_ManagedTemplateVersion( l.version:templ_id, l.change:managedtemplate:current_id, l.version:id, l.version:notes ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Process record updates
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.change:update_resource }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Update_Branch( l.branch:id, l.change:resource ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Process LinkedPages
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.page_id" ARRAY = "l.change:page_unassign" COUNT = "{ l.change:page_unassign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXPage_Delete_Branch( l.branch:id, l.change:resource:id, l.page_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.page_id" ARRAY = "l.change:page_assign" COUNT = "{ l.change:page_assign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXPage_Insert_Branch( l.branch:id, l.change:resource:id, l.page_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Process LinkedResources
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.res_id" ARRAY = "l.change:comb_unassign" COUNT = "{ l.change:comb_unassign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptCombinedResourceXResource_Delete_Branch( l.branch:id, l.change:resource:id, l.res_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.res_id" ARRAY = "l.change:comb_assign" COUNT = "{ l.change:comb_assign_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptCombinedResourceXResource_Insert_Branch( l.branch:id, l.change:resource:id, l.res_id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.change:comb_offset_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptCombinedResourceXResource_Update_Branch_Offsets( l.branch:id, l.change:resource:id, l.change:comb_offsets ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Validate_Property_Changes" PARAMETERS = "branch var, changeset_notes, items var, input_changes var, input_change_count, changes var, change_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Load/validate properties, perform test compilation of source code (if specified)
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.change_count"					VALUE = 0>
	<MvASSIGN NAME = "l.changes"						VALUE = "">

	<MvASSIGN NAME = "l.template_dir"					VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">
	<MvASSIGN NAME = "l.temporary_filename"				VALUE = "{ l.template_dir $ MakeSessionID() $ '.mvc' }">

	<MvFOREACH ITERATOR = "l.input_change" ARRAY = "l.input_changes" COUNT = "{ l.input_change_count }">
		<MvASSIGN NAME = "l.change_valid"				VALUE = 1>

		<MvASSIGN NAME = "l.change"						VALUE = "">
		<MvASSIGN NAME = "l.change:managedproperty"		VALUE = "">
		<MvASSIGN NAME = "l.change:managedtemplate"		VALUE = "">
		<MvASSIGN NAME = "l.change:source"				VALUE = "">
		<MvASSIGN NAME = "l.change:update_source"		VALUE = 0>
		<MvASSIGN NAME = "l.change:settings"			VALUE = "">
		<MvASSIGN NAME = "l.change:update_settings"		VALUE = 0>
		<MvASSIGN NAME = "l.change:image_id"			VALUE = 0>
		<MvASSIGN NAME = "l.change:update_image"		VALUE = 0>
		<MvASSIGN NAME = "l.change:notes"				VALUE = "{ l.changeset_notes }">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'O', 'Notes', l.change:notes ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| Locate Managed Property by Property_ID or a combination of Property_Type and one of Property_Code or
		| Product_ID/Product_Code/Edit_Product or Category_ID/Category_Code/Edit_Category
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Property_ID' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.input_change, 'R', 'Property_ID', l.property_id ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch_ID( l.branch:id, l.property_id, l.change:managedproperty ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Property_ID', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Property_ID', 'Property not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Property_Type' ) }">
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'One of Property_ID or Property_Type must be specified' ) }">
			<MvFOREACHCONTINUE>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'R', 'Property_Type', l.property_type ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Property_Code' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_change, 'R', 'Property_Code', l.property_code ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch_Code( l.branch:id, l.property_type, l.property_code, l.change:managedproperty ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Property_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Property_Code', 'Property not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Product_ID' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.input_change, 'R', 'Product_ID', l.product_id ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch_Product( l.branch:id, l.property_type, l.product_id, l.change:managedproperty ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Product_ID', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Product_ID', 'Property not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Product_Code' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_change, 'R', 'Product_Code', l.product_code ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Product_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Product_Code', 'Product not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch_Product( l.branch:id, l.property_type, l.product:id, l.change:managedproperty ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Product_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Product_Code', 'Property not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Edit_Product' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_change, 'R', 'Edit_Product', l.product_code ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Edit_Product', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Edit_Product', 'Product not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch_Product( l.branch:id, l.property_type, l.product:id, l.change:managedproperty ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Edit_Product', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Edit_Product', 'Property not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Category_ID' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.input_change, 'R', 'Category_ID', l.cat_id ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch_Category( l.branch:id, l.property_type, l.cat_id, l.change:managedproperty ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Category_ID', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Category_ID', 'Property not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Category_Code' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_change, 'R', 'Category_Code', l.category_code ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Category_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Category_Code', 'Category not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch_Category( l.branch:id, l.property_type, l.category:id, l.change:managedproperty ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Category_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Category_Code', 'Property not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Edit_Category' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_change, 'R', 'Edit_Category', l.category_code ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Category_Load_Code( l.category_code, l.category ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Edit_Category', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Edit_Category', 'Category not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch_Category( l.branch:id, l.property_type, l.category:id, l.change:managedproperty ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Edit_Category', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Edit_Category', 'Property not found' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'One of Property_Code, Product_ID/Product_Code/Edit_Product or Category_ID/Category_Code/Edit_Category must be specified' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Validate Source and Settings
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.source_specified"			VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Source' ) }">
		<MvASSIGN NAME = "l.settings_specified"			VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Settings' ) }">
		<MvASSIGN NAME = "l.image_specified"			VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Image' ) OR
																   [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Image_ID' ) }">

		<MvIF EXPR = "{ ( NOT l.source_specified ) AND ( NOT l.settings_specified ) AND ( NOT l.image_specified ) }">
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'One of Source, Settings, Image_ID or Image must be specified' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.settings_specified }">
			<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change, 'Settings', l.change:settings ) }">
			<MvASSIGN NAME = "l.change:update_settings"	VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ l.source_specified }">
			<MvIF EXPR = "{ l.change:managedproperty:templ_id EQ 0 }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Settings', 'Property does not have an associated template' ) }">
				<MvFOREACHCONTINUE>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branch_ID( l.branch:id, l.change:managedproperty:templ_id, l.change:managedtemplate ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Source', 'Template not found' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change, 'Source', l.change:source ) }">

			<MvCOMMENT>
			|
			| Validate compilation of the template
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.change:source, l.null, l.temporary_filename, l.compile_error ) }">
				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'Error compiling template: ' $ l.compile_error ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.null"					VALUE = "{ sdelete( l.temporary_filename ) }">
			<MvASSIGN NAME = "l.change:update_source"	VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ l.image_specified }">
			<MvASSIGN NAME = "l.image_id" 				VALUE = 0>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Image_ID' ) }">
				<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Integer( l.input_change, 'o', 'Image_ID', l.image_id ) }">
				
				<MvIF EXPR = "{ l.image_id }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_ID( l.image_id, l.validated_image ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Image_ID', 'Image not found' ) }">					
					</MvIF>

					<MvASSIGN NAME = "l.image_id"		VALUE = "{ l.validated_image:id }">
				</MvIF>
			<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Image' ) }">
				<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'o', 'Image', l.image_path ) }">
				
				<MvIF EXPR = "{ NOT ISNULL l.image_path }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_File( l.image_path, l.validated_image ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Image', 'Image not found' ) }">
					</MvIF>

					<MvASSIGN NAME = "l.image_id"		VALUE = "{ l.validated_image:id }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.change:image_id"		VALUE = "{ l.image_id }">
			<MvASSIGN NAME = "l.change:update_image"	VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ l.change_valid }">
			<MvASSIGN NAME = "l.change_count"			VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.change_count EQ l.input_change_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Process_Property_Changes" PARAMETERS = "branch var, items var, changes var, change_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.template_dir"								VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">

	<MvFOREACH ITERATOR = "l.change" ARRAY = "l.changes" INDEX = "l.change_index" COUNT = "{ l.change_count }">
		<MvIF EXPR = "{ l.change:update_settings OR l.change:update_image }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyVersionAndImage_Load_Branch( l.branch:id, l.change:managedproperty:id, l.change:managedproperty:version ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.managedpropertyversion"				VALUE = "">
			<MvASSIGN NAME = "l.managedpropertyversion:prop_id"		VALUE = "{ l.change:managedproperty:id }">
			<MvASSIGN NAME = "l.managedpropertyversion:user_id"		VALUE = "{ int( g.User:id ) }">
			<MvASSIGN NAME = "l.managedpropertyversion:type"		VALUE = "{ l.change:managedproperty:version:type }">
			<MvASSIGN NAME = "l.managedpropertyversion:code"		VALUE = "{ l.change:managedproperty:version:code }">
			<MvASSIGN NAME = "l.managedpropertyversion:product_id"	VALUE = "{ l.change:managedproperty:version:product_id }">
			<MvASSIGN NAME = "l.managedpropertyversion:cat_id"		VALUE = "{ l.change:managedproperty:version:cat_id }">
			<MvASSIGN NAME = "l.managedpropertyversion:immutable"	VALUE = 0>

			<MvIF EXPR = "{ l.change:update_settings AND l.change:update_image }">
				<MvASSIGN NAME = "l.managedpropertyversion:settings"	VALUE = "{ l.change:settings }">
				<MvASSIGN NAME = "l.managedpropertyversion:image_id"	VALUE = "{ l.change:image_id }">		
			<MvELSEIF EXPR = "{ l.change:update_settings }">
				<MvASSIGN NAME = "l.managedpropertyversion:settings"	VALUE = "{ l.change:settings }">
				<MvASSIGN NAME = "l.managedpropertyversion:image_id"	VALUE = "{ l.change:managedproperty:version:image_id }">		
			<MvELSEIF EXPR = "{ l.change:update_image }">
				<MvASSIGN NAME = "l.managedpropertyversion:settings"	VALUE = "{ l.change:managedproperty:version:settings }">
				<MvASSIGN NAME = "l.managedpropertyversion:image_id"	VALUE = "{ l.change:image_id }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_ManagedPropertyVersion_Branch_LowLevel( l.branch:id, l.change:managedproperty, l.managedpropertyversion ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.change:update_source }">
			<MvASSIGN NAME = "l.managedtemplateversion"				VALUE = "">
			<MvASSIGN NAME = "l.managedtemplateversion:templ_id"	VALUE = "{ l.change:managedtemplate:id }">
			<MvASSIGN NAME = "l.managedtemplateversion:user_id"		VALUE = "{ int( g.User:id ) }">
			<MvASSIGN NAME = "l.managedtemplateversion:immutable"	VALUE = 0>
			<MvASSIGN NAME = "l.managedtemplateversion:dtstamp"		VALUE = "{ s.time_t }">
			<MvASSIGN NAME = "l.managedtemplateversion:notes"		VALUE = "{ substring_var( l.change:notes, 1, 100 ) }">
			<MvASSIGN NAME = "l.managedtemplateversion:settings"	VALUE = "">
			<MvREFERENCE NAME = "l.managedtemplateversion:source"	VARIABLE = "l.change:source">

			<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.managedtemplateversion:source, l.null, l.template_dir $ l.change:managedtemplate:filename, l.compile_error ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00195', 'Error compiling template \'' $ l.change:managedtemplate:filename $ '\': ' $ l.compile_error ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Insert( l.managedtemplateversion ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch:id, l.managedtemplateversion:templ_id, l.managedtemplateversion:id )		OR
							NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch:id, l.managedtemplateversion:templ_id, l.managedtemplateversion:id )	OR
							NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Record_ManagedTemplateVersion( l.managedtemplateversion:templ_id, l.change:managedtemplate:current_id, l.managedtemplateversion:id, l.managedtemplateversion:notes ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Validate_Template_Changes" PARAMETERS = "branch var, changeset_notes, items var, input_changes var, input_change_count, changes var, change_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Load/validate templates, perform test compilation of source code (if specified)
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.change_count"				VALUE = 0>
	<MvASSIGN NAME = "l.changes"					VALUE = "">

	<MvASSIGN NAME = "l.template_dir"				VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">
	<MvASSIGN NAME = "l.temporary_filename"			VALUE = "{ l.template_dir $ MakeSessionID() $ '.mvc' }">

	<MvFOREACH ITERATOR = "l.input_change" ARRAY = "l.input_changes" COUNT = "{ l.input_change_count }">
		<MvASSIGN NAME = "l.change_valid"			VALUE = 1>

		<MvASSIGN NAME = "l.change"					VALUE = "">
		<MvASSIGN NAME = "l.change:managedtemplate"	VALUE = "">
		<MvASSIGN NAME = "l.change:source"			VALUE = "">
		<MvASSIGN NAME = "l.change:settings"		VALUE = "">
		<MvASSIGN NAME = "l.change:notes"			VALUE = "{ l.changeset_notes }">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'O', 'Notes', l.change:notes ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| Locate Managed Template by Template_ID or Template_Filename
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Template_ID' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Integer( l.input_change, 'R', 'Template_ID', l.template_id ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Branch_ID( l.branch:id, l.template_id, l.change:managedtemplate ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Template_ID', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Template_ID', 'Template not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Template_Filename' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change, 'R', 'Template_Filename', l.template_filename ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Filename( l.template_filename, l.change:managedtemplate ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Template_Filename', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Template_Filename', 'Template not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'One of Template_ID or Template_Filename must be specified' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| If Source or Settings are not specified, load the current values from the head version of the template on the specified branch
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.source_specified"		VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Source' ) }">
		<MvASSIGN NAME = "l.settings_specified"		VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change, 'Settings' ) }">
		<MvASSIGN NAME = "l.managedtemplateversion"	VALUE = "">

		<MvIF EXPR = "{ ( NOT l.source_specified ) AND ( NOT l.settings_specified ) }">
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'One of Source or Settings must be specified' ) }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ ( NOT l.source_specified ) OR ( NOT l.settings_specified ) }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_Branch_Head( l.branch:id, l.change:managedtemplate:id, l.managedtemplateversion ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', g.Error_Code $ ': ' $ g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'Previous template version not found' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.source_specified }">		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change, 'Source', l.change:source ) }">
		<MvELSE>									<MvASSIGN NAME = "l.change:source"		VALUE = "{ l.managedtemplateversion:source }">
		</MvIF>

		<MvIF EXPR = "{ l.settings_specified }">	<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change, 'Settings', l.change:settings ) }">
		<MvELSE>									<MvASSIGN NAME = "l.change:settings"	VALUE = "{ l.managedtemplateversion:settings }">
		</MvIF>

		<MvCOMMENT>
		|
		| Validate compilation of the template
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.change:source, l.null, l.temporary_filename, l.compile_error ) }">
			<MvASSIGN NAME = "l.change_valid" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, '', 'Error compiling template: ' $ l.compile_error ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.null"					VALUE = "{ sdelete( l.temporary_filename ) }">

		<MvIF EXPR = "{ l.change_valid }">
			<MvASSIGN NAME = "l.change_count"		VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.change_count EQ l.input_change_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Process_Template_Changes" PARAMETERS = "branch var, items var, changes var, change_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.template_dir"				VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">

	<MvFOREACH ITERATOR = "l.change" ARRAY = "l.changes" COUNT = "{ l.change_count }">
		<MvASSIGN NAME = "l.version"				VALUE = "">
		<MvASSIGN NAME = "l.version:templ_id"		VALUE = "{ l.change:managedtemplate:id }">
		<MvASSIGN NAME = "l.version:user_id"		VALUE = "{ int( g.User:id ) }">
		<MvASSIGN NAME = "l.version:immutable"		VALUE = 0>
		<MvASSIGN NAME = "l.version:dtstamp"		VALUE = "{ s.time_t }">
		<MvASSIGN NAME = "l.version:notes"			VALUE = "{ substring_var( l.change:notes, 1, 100 ) }">
		<MvREFERENCE NAME = "l.version:source"		VARIABLE = "l.change:source">
		<MvREFERENCE NAME = "l.version:settings"	VARIABLE = "l.change:settings">

		<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.version:source, l.null, l.template_dir $ l.change:managedtemplate:filename, l.compile_error ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00244', 'Error compiling template \'' $ l.change:managedtemplate:filename $ '\': ' $ l.compile_error ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Insert( l.version ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch:id, l.version:templ_id, l.version:id )		OR
						NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch:id, l.version:templ_id, l.version:id )	OR
						NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Record_ManagedTemplateVersion( l.version:templ_id, l.change:managedtemplate:current_id, l.version:id, l.version:notes ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Validate_Module_Changes" PARAMETERS = "branch var, changeset_notes, items var, input_changes var, input_change_count, changes var, change_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Allow module to parse/validate input data
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.change_count"			VALUE = 0>
	<MvASSIGN NAME = "l.changes"				VALUE = "">

	<MvFOREACH ITERATOR = "l.input_change" ARRAY = "l.input_changes" COUNT = "{ l.input_change_count }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.input_change, 'R', 'Module_Code',			l.module_code )	OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.input_change, 'R', 'Module_Operation',	l.operation )	OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Structure(	l.input_change, 'O', 'Module_Data',			l.input_change_data ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.module_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', g.Error_Code $ ': ' $ g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module not found' ) }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.module:id ) }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module is not installed in the store' ) }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module not active' ) }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:json_changeset }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change, 'Module_Code', 'Module does not implement the \'json_changeset\' feature' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.change"				VALUE = "">
		<MvASSIGN NAME = "l.change:operation"	VALUE = "{ l.operation }">
		<MvASSIGN NAME = "l.change:module"		VALUE = "{ l.module }">

		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].Module_JSON_Changeset_Validate_Change( l.module, l.operation, l.changeset_notes, l.items, l.input_change_data, l.change:data ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.change_count"		VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.change_count EQ l.input_change_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Changeset_Create_Process_Module_Changes" PARAMETERS = "branch var, items var, changes var, change_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.change" ARRAY = "l.changes" COUNT = "{ l.change_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.change:module:module ].Module_JSON_Changeset_Process_Change( l.change:module, l.change:operation, l.items, l.change:data ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.data"				VALUE = "">
	<MvASSIGN NAME = "l.data:branch_id"		VALUE = "{ l.branch:id }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtc.id',			'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtc.branch_id',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtc.user_id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtc.dtstamp',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'mtc.notes',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.available_filters, 'u.name',			'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'cst.tag',			'formatted_tags' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.filter_contains_tags" VALUE = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( l.filter, 'formatted_tags', l.null ) }">

	<MvIF EXPR = "{ l.filter_contains_tags }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_DISTINCT( l.search_query, 'mtc.*' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtc.*' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.name',	'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.icon',	'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Changesets', 'mtc' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mtc', 'Users', 'u', 'u.id = mtc.user_id', '' ) }">

	<MvIF EXPR = "{ l.filter_contains_tags }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mtc', g.Store_Table_Prefix $ 'ChangesetTags', 'cst', 'cst.set_id = mtc.id', '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtc.branch_id = ?', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetList_Load_Query_Search_Filter', l.data ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'mtc.id,mtc.branch_id,mtc.user_id,user_name:u.name:null_char,mtc.dtstamp,mtc.notes', 'id' ) }">

	<MvASSIGN NAME = "l.count_query" VALUE = "{ l.search_query }">

	<MvIF EXPR = "{ l.filter_contains_tags }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_CLEAR( l.count_query ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_DISTINCT( l.count_query, 'mtc.id' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.count_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Changesets', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00196', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.changeset_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Changesets.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.changeset_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Read( l.changeset ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.changeset_count ) }">
				<MvEVAL EXPR = "{ JSON_Changeset( l.changeset ) }">,
				"user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Changesets.d.user_name ) }">",
				"user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Changesets.d.user_icon ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Changesets" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Changesets">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetList_Load_Query_Search_Filter" PARAMETERS = "query var, field_count var, search_field, search_operator, search_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.search_field NE 'formatted_tags' }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Value_In_List( l.search_operator, 'NOT_IN,NE,NC,NOTLIKE' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.changeset_tags_list"		VALUE = "">
	<MvASSIGN NAME = "l.changeset_tags_list_count"	VALUE = "">

	<MvFOREACH ITERATOR = "l.changeset"	ARRAY = "l.changesets" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ChangesetList_Load_Branch( l.data:branch_id, l.changesets ) }">
		<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Feature_Filename_TUI_DB ].ChangesetTagList_Load_Changeset( l.changeset:id, l.tags ) }">
		<MvASSIGN NAME = "l.changeset_tags_list_count"	VALUE = "{ miva_array_insert_var( l.changeset_tags_list, l.tags, -1 ) }">
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SUB_WHERE_BEGIN( l.query ) }">

	<MvIF EXPR = "{ l.search_operator EQ 'NOT_IN' }">
		<MvASSIGN NAME = "l.in_count" VALUE = "{ miva_splitstring( l.search_value, ',', l.in_list, 'trim' ) }">

		<MvFOREACH ITERATOR = "l.tags" ARRAY = "l.changeset_tags_list" COUNT = "{ l.changeset_tags_list_count }">
			<MvFOREACH ITERATOR = "l.tag" ARRAY = "l.tags" >
				<MvFOREACH ITERATOR = "l.filter_value_compare"	ARRAY = "l.in_list" COUNT = "{ l.in_count }">
					<MvIF EXPR = "{ l.tag:tag EQ l.filter_value_compare }">
						<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mtc.id <> ?', [ g.Module_Library_DB ].SQL_Query_Field( l.tag:set_id ) ) }">
					</MvIF>
				</MvFOREACH>
			</MvFOREACH>
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.search_operator EQ 'NE' }">
		<MvFOREACH ITERATOR = "l.tags" ARRAY = "l.changeset_tags_list" COUNT = "{ l.changeset_tags_list_count }">
			<MvFOREACH ITERATOR = "l.tag" ARRAY = "l.tags" >
				<MvIF EXPR = "{ l.search_value EQ l.tag:tag }">
					<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mtc.id <> ?', [ g.Module_Library_DB ].SQL_Query_Field( l.tag:set_id ) ) }">
				</MvIF>
			</MvFOREACH>
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.search_operator EQ 'NC' }">
		<MvFOREACH ITERATOR = "l.tags" ARRAY = "l.changeset_tags_list" COUNT = "{ l.changeset_tags_list_count }">
			<MvFOREACH ITERATOR = "l.tag" ARRAY = "l.tags" >
				<MvIF EXPR = "{ l.search_value IN l.tag:tag }">
					<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mtc.id <> ?', [ g.Module_Library_DB ].SQL_Query_Field( l.tag:set_id ) ) }">
				</MvIF>
			</MvFOREACH>
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.search_operator EQ 'NOTLIKE' }">
		<MvFOREACH ITERATOR = "l.tags" ARRAY = "l.changeset_tags_list" COUNT = "{ l.changeset_tags_list_count }">
			<MvFOREACH ITERATOR = "l.tag" ARRAY = "l.tags" >
				<MvIF EXPR = "{ JSON_Search_Filter_MivaScript_LIKE( toupper( l.tag:tag ), toupper( l.search_value ) ) }">
					<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mtc.id <> ?', [ g.Module_Library_DB ].SQL_Query_Field( l.tag:set_id ) ) }">
				</MvIF>
			</MvFOREACH>
		</MvFOREACH>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SUB_WHERE_END_Clause( l.query, 'AND', 'AND' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetList_Merge" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'ChangesetList_Merge_Session_ID' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'ChangesetList_Merge_Session_ID', l.session_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvASSIGN NAME = "l.session_filename"				VALUE = "{ JSON_Branch_Session_Filename( 'changesetmerge', l.session_id ) }">

		<MvIF EXPR = "{ NOT JSON_Branch_Session_Deserialize( l.session_filename, l.session_id, l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.notes"							VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array(	'R', 'Source_Changeset_IDs',	l.source_changeset_ids,	l.source_changeset_id_count )	OR
						NOT [ g.Module_JSON ].JSON_Input_Integer(		'R', 'Destination_Branch_ID',	l.dest_branch_id )										OR
						NOT [ g.Module_JSON ].JSON_Input_Text(			'o', 'Notes',					l.notes ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Tags', l.tags ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Override_BranchTags( l.tags ) }">
		</MvIF>

		<MvASSIGN NAME = "l.source_changeset_count"			VALUE = 0>
		<MvASSIGN NAME = "l.source_changesets"				VALUE = "">

		<MvFOREACH INDEX = "l.pos" ITERATOR = "l.source_changeset_id" ARRAY = "l.source_changeset_ids" COUNT = "{ l.source_changeset_id_count }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.source_changeset_id, l.source_changeset ) }">
				<MvASSIGN NAME = "l.source_changeset_count"	VALUE = "{ miva_array_insert_var( l.source_changesets, l.source_changeset, -1 ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_JSON ].JSON_Input_Error( 'Source_Changeset_IDs[' $ l.pos $ ']', 'Changeset not found' ) }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.source_changeset_count NE l.source_changeset_id_count }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		<MvELSEIF EXPR = "{ l.source_changeset_count EQ 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Source_Changeset_IDs', 'At least one source changeset must be specified' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.dest_branch_id, l.dest_branch ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Destination_Branch_ID', 'Destination branch not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Merge_Changesets_Session_Init( l.source_changesets, l.source_changeset_count, l.dest_branch, l.notes, l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Merge_Changesets_Session_Process( l.session ) }">

	<MvIF EXPR = "{ l.result EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.result EQ -1 }">
		<MvASSIGN NAME = "l.session_filename" VALUE = "{ JSON_Branch_Session_Filename( 'changesetmerge', l.session:id ) }">

		<MvIF EXPR = "{ NOT JSON_Branch_Session_Serialize( l.session_filename, l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		{
			"success":							1,
			"completed":						false,
			"changesetlist_merge_session_id":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.session:id ) }">"
		}
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Merge_Changesets_Session_Finalize( l.session ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		{
			"success":		1,
			"completed":	true,
			"data":
			{
				<MvEVAL EXPR = "{ JSON_Changeset( l.session:dest_changeset ) }">
			}
		}
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetChangeList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Changeset_ID', 'Changeset not found' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Managed Templates
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.template_filters, 'v.templ_id',	'item_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.template_filters, 'v.user_id',	'item_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.template_filters, 'u.name',		'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.template_filters, 'v.id',			'item_version_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.template_filters, 'mt.filename',	'item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.template_query_common, '\'template\'	AS item_type,
																						  v.templ_id	AS item_id,
																						  v.user_id		AS item_user_id,
																						  v.id			AS item_version_id,
																						  mt.filename	AS item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.template_query_common, g.Store_Table_Prefix $ 'ManagedTemplateChanges',		'c' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.template_query_common, g.Store_Table_Prefix $ 'ManagedTemplates',			'mt' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.template_query_common, g.Store_Table_Prefix $ 'ManagedTemplateVersions',	'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.template_query_common, 'v', 'Users', 'u', 'u.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.template_query_common, 'u.name', 'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.template_query_common, 'u.icon', 'item_user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.template_query_common, 'c.set_id	= ? AND
																						 mt.id		= v.templ_id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvASSIGN NAME = "l.template_query_created"	VALUE = "{ l.template_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.template_query_created, '\'created\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.template_query_created, 'c.old_id	= 0 AND
																						  v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.template_query_created, l.filter, l.template_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.template_query_modified"	VALUE = "{ l.template_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.template_query_modified, '\'modified\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.template_query_modified, 'c.old_id	<> 0 AND
																						   v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.template_query_modified, l.filter, l.template_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.template_query_deleted"	VALUE = "{ l.template_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.template_query_deleted, '\'deleted\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.template_query_deleted,	'c.new_id	= 0 AND
																							 v.id		= c.old_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.template_query_deleted, l.filter, l.template_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvCOMMENT>
	|
	| CSS Resources
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.cssresource_filters, 'v.res_id',	'item_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.cssresource_filters, 'v.user_id',	'item_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.cssresource_filters, 'u.name',	'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.cssresource_filters, 'v.id',		'item_version_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.cssresource_filters, 'v.code',	'item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.cssresource_query_common, '\'cssresource\'	AS item_type,
																							 v.res_id			AS item_id,
																							 v.user_id			AS item_user_id,
																							 v.id				AS item_version_id,
																							 v.code				AS item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.cssresource_query_common, g.Store_Table_Prefix $ 'CSSResourceChanges',	'c' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.cssresource_query_common, g.Store_Table_Prefix $ 'CSSResources',		'res' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.cssresource_query_common, g.Store_Table_Prefix $ 'CSSResourceVersions',	'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.cssresource_query_common, 'v', 'Users', 'u', 'u.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cssresource_query_common, 'u.name', 'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.cssresource_query_common, 'u.icon', 'item_user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.cssresource_query_common, 'c.set_id	= ? AND
																							res.id		= v.res_id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvASSIGN NAME = "l.cssresource_query_created"	VALUE = "{ l.cssresource_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.cssresource_query_created, '\'created\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.cssresource_query_created, 'c.old_id	= 0 AND
																							 v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.cssresource_query_created, l.filter, l.cssresource_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.cssresource_query_modified"	VALUE = "{ l.cssresource_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.cssresource_query_modified, '\'modified\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.cssresource_query_modified, 'c.old_id	<> 0 AND
																							  v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.cssresource_query_modified, l.filter, l.cssresource_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.cssresource_query_deleted"	VALUE = "{ l.cssresource_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.cssresource_query_deleted, '\'deleted\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.cssresource_query_deleted,	'c.new_id	= 0 AND
																							 v.id		= c.old_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.cssresource_query_deleted, l.filter, l.cssresource_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvCOMMENT>
	|
	| JavaScript Resources
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.scriptresource_filters, 'v.res_id',	'item_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.scriptresource_filters, 'v.user_id',	'item_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.scriptresource_filters, 'u.name',		'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.scriptresource_filters, 'v.id',		'item_version_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.scriptresource_filters, 'v.code',		'item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.scriptresource_query_common, '\'scriptresource\'	AS item_type,
																								 v.res_id			AS item_id,
																								 v.user_id			AS item_user_id,
																								 v.id				AS item_version_id,
																								 v.code				AS item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.scriptresource_query_common, g.Store_Table_Prefix $ 'JavaScriptResourceChanges',	'c' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.scriptresource_query_common, g.Store_Table_Prefix $ 'JavaScriptResources',			'res' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.scriptresource_query_common, g.Store_Table_Prefix $ 'JavaScriptResourceVersions',	'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.scriptresource_query_common, 'v', 'Users', 'u', 'u.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.scriptresource_query_common, 'u.name', 'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.scriptresource_query_common, 'u.icon', 'item_user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.scriptresource_query_common, 'c.set_id	= ? AND
																							   res.id	= v.res_id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvASSIGN NAME = "l.scriptresource_query_created"	VALUE = "{ l.scriptresource_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.scriptresource_query_created, '\'created\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.scriptresource_query_created, 'c.old_id	= 0 AND
																								v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.scriptresource_query_created, l.filter, l.scriptresource_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.scriptresource_query_modified"	VALUE = "{ l.scriptresource_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.scriptresource_query_modified, '\'modified\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.scriptresource_query_modified, 'c.old_id	<> 0 AND
																								 v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.scriptresource_query_modified, l.filter, l.scriptresource_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.scriptresource_query_deleted"	VALUE = "{ l.scriptresource_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.scriptresource_query_deleted, '\'deleted\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.scriptresource_query_deleted,	'c.new_id	= 0 AND
																								 v.id		= c.old_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.scriptresource_query_deleted, l.filter, l.scriptresource_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvCOMMENT>
	|
	| Managed Properties
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.property_filters, 'v.prop_id',	'item_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.property_filters, 'v.user_id',	'item_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.property_filters, 'u.name',		'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.property_filters, 'v.id',			'item_version_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.property_filters, 'v.type',		'item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.property_query_common, '\'property\'	AS item_type,
																							v.prop_id	AS item_id,
																							v.user_id	AS item_user_id,
																							v.id		AS item_version_id,
																							v.type		AS item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.property_query_common, g.Store_Table_Prefix $ 'ManagedPropertyChanges',		'c' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.property_query_common, g.Store_Table_Prefix $ 'ManagedProperties',			'mp' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.property_query_common, g.Store_Table_Prefix $ 'ManagedPropertyVersions',	'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.property_query_common, 'v', 'Users', 'u', 'u.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.property_query_common, 'u.name', 'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.property_query_common, 'u.icon', 'item_user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.property_query_common, 'c.set_id	= ? AND
																						 mp.id		= v.prop_id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvASSIGN NAME = "l.property_query_created"	VALUE = "{ l.property_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.property_query_created, '\'created\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.property_query_created, 'c.old_id	= 0 AND
																						  v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.property_query_created, l.filter, l.property_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.property_query_modified"	VALUE = "{ l.property_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.property_query_modified, '\'modified\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.property_query_modified, 'c.old_id	<> 0 AND
																						   v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.property_query_modified, l.filter, l.property_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.property_query_deleted"	VALUE = "{ l.property_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.property_query_deleted, '\'deleted\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.property_query_deleted,	'c.new_id	= 0 AND
																							 v.id		= c.old_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.property_query_deleted, l.filter, l.property_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvCOMMENT>
	|
	| Pages
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.page_filters, 'v.page_id',	'item_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.page_filters, 'v.user_id',	'item_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.page_filters, 'u.name',		'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.page_filters, 'v.id',			'item_version_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.page_filters, 'v.code',		'item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.page_query_common, '\'page\'	AS item_type,
																					  v.page_id	AS item_id,
																					  v.user_id	AS item_user_id,
																					  v.id		AS item_version_id,
																					  v.code	AS item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.page_query_common, g.Store_Table_Prefix $ 'PageChanges',	'c' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.page_query_common, g.Store_Table_Prefix $ 'Pages',			'page' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.page_query_common, g.Store_Table_Prefix $ 'PageVersions',	'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.page_query_common, 'v', 'Users', 'u', 'u.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.page_query_common, 'u.name', 'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.page_query_common, 'u.icon', 'item_user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.page_query_common, 'c.set_id	= ? AND
																					 page.id	= v.page_id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvASSIGN NAME = "l.page_query_created"	VALUE = "{ l.page_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.page_query_created, '\'created\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.page_query_created, 'c.old_id	= 0 AND
																					  v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.page_query_created, l.filter, l.page_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.page_query_modified"	VALUE = "{ l.page_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.page_query_modified, '\'modified\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.page_query_modified, 'c.old_id	<> 0 AND
																					   v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.page_query_modified, l.filter, l.page_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.page_query_deleted"	VALUE = "{ l.page_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.page_query_deleted, '\'deleted\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.page_query_deleted,	'c.new_id	= 0 AND
																						 v.id		= c.old_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.page_query_deleted, l.filter, l.page_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvCOMMENT>
	|
	| Items
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.item_filters, 'v.item_id',	'item_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.item_filters, 'v.user_id',	'item_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(	l.item_filters, 'u.name',		'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.item_filters, 'v.id',			'item_version_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.item_filters, 'v.code',		'item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.item_query_common, '\'item\'		AS item_type,
																					  v.item_id		AS item_id,
																					  0				AS item_user_id,
																					  v.id			AS item_version_id,
																					  v.code		AS item_identifier' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.item_query_common, g.Store_Table_Prefix $ 'ItemChanges',	'c' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.item_query_common, g.Store_Table_Prefix $ 'Items',			'i' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.item_query_common, g.Store_Table_Prefix $ 'ItemVersions',	'v' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.item_query_common, 'v', 'Users', 'u', 'u.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.item_query_common, 'u.name', 'item_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.item_query_common, 'u.icon', 'item_user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.item_query_common, 'c.set_id	= ? AND
																					 i.id		= v.item_id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvASSIGN NAME = "l.item_query_created"	VALUE = "{ l.item_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.item_query_created, '\'created\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.item_query_created, 'c.old_id	= 0 AND
																					  v.id		= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.item_query_created, l.filter, l.item_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.item_query_modified"	VALUE = "{ l.item_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.item_query_modified, '\'modified\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.item_query_modified, 'c.old_id	<> 0 AND
																					   v.id	= c.new_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.item_query_modified, l.filter, l.item_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvASSIGN NAME = "l.item_query_deleted"	VALUE = "{ l.item_query_common }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.item_query_deleted, '\'deleted\' AS item_change_type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.item_query_deleted,	'c.new_id	= 0 AND
																						 v.id		= c.old_id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.item_query_deleted, l.filter, l.item_filters, g.Module_Feature_TUI_JSON, '', 'JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter', l.null ) }">

	<MvCOMMENT>
	|
	| Execute query, output results
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.template_query_created ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.template_query_modified ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.template_query_deleted ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.cssresource_query_created ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.cssresource_query_modified ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.cssresource_query_deleted ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.scriptresource_query_created ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.scriptresource_query_modified ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.scriptresource_query_deleted ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.property_query_created ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.property_query_modified ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.property_query_deleted ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.page_query_created ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.page_query_modified ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.page_query_deleted ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.item_query_created ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.item_query_modified ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_UNION_ALL( l.search_query, l.item_query_deleted ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, l.sort, 'item_type,item_id,item_user_id,item_user_name,item_version_id,item_identifier,item_change_type', 'item_identifier;item_type;item_id' ) }"> 

	<MvASSIGN NAME = "l.search_sql"							VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvASSIGN NAME = "l.template_count_created_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.template_query_created, l.null ) }">
	<MvASSIGN NAME = "l.template_count_modified_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.template_query_modified, l.null ) }">
	<MvASSIGN NAME = "l.template_count_deleted_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.template_query_deleted, l.null ) }">
	<MvASSIGN NAME = "l.cssresource_count_created_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.cssresource_query_created, l.null ) }">
	<MvASSIGN NAME = "l.cssresource_count_modified_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.cssresource_query_modified, l.null ) }">
	<MvASSIGN NAME = "l.cssresource_count_deleted_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.cssresource_query_deleted, l.null ) }">
	<MvASSIGN NAME = "l.scriptresource_count_created_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.scriptresource_query_created, l.null ) }">
	<MvASSIGN NAME = "l.scriptresource_count_modified_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.scriptresource_query_modified, l.null ) }">
	<MvASSIGN NAME = "l.scriptresource_count_deleted_sql"	VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.scriptresource_query_deleted, l.null ) }">
	<MvASSIGN NAME = "l.property_count_created_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.property_query_created, l.null ) }">
	<MvASSIGN NAME = "l.property_count_modified_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.property_query_modified, l.null ) }">
	<MvASSIGN NAME = "l.property_count_deleted_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.property_query_deleted, l.null ) }">
	<MvASSIGN NAME = "l.page_count_created_sql"				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.page_query_created, l.null ) }">
	<MvASSIGN NAME = "l.page_count_modified_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.page_query_modified, l.null ) }">
	<MvASSIGN NAME = "l.page_count_deleted_sql"				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.page_query_deleted, l.null ) }">
	<MvASSIGN NAME = "l.item_count_created_sql"				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.item_query_created, l.null ) }">
	<MvASSIGN NAME = "l.item_count_modified_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.item_query_modified, l.null ) }">
	<MvASSIGN NAME = "l.item_count_deleted_sql"				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build_Count( l.item_query_deleted, l.null ) }">

	<MvASSIGN NAME = "l.count_sql"							VALUE = "{ l.template_count_created_sql			$ ' UNION ALL ' $
																	   l.template_count_modified_sql		$ ' UNION ALL ' $
																	   l.template_count_deleted_sql			$ ' UNION ALL ' $
																	   l.cssresource_count_created_sql		$ ' UNION ALL ' $
																	   l.cssresource_count_modified_sql		$ ' UNION ALL ' $
																	   l.cssresource_count_deleted_sql		$ ' UNION ALL ' $
																	   l.scriptresource_count_created_sql	$ ' UNION ALL ' $
																	   l.scriptresource_count_modified_sql	$ ' UNION ALL ' $
																	   l.scriptresource_count_deleted_sql	$ ' UNION ALL ' $
																	   l.property_count_created_sql			$ ' UNION ALL ' $
																	   l.property_count_modified_sql		$ ' UNION ALL ' $
																	   l.property_count_deleted_sql			$ ' UNION ALL ' $
																	   l.page_count_created_sql				$ ' UNION ALL ' $
																	   l.page_count_modified_sql			$ ' UNION ALL ' $
																	   l.page_count_deleted_sql				$ ' UNION ALL ' $
																	   l.item_count_created_sql				$ ' UNION ALL ' $
																	   l.item_count_modified_sql			$ ' UNION ALL ' $
																	   l.item_count_deleted_sql }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Count( l.count_sql, l.search_fields, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ChangesetChanges', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00226', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.change_count"	VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ChangesetChanges.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.change_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.change_count ) }">
				"item_type":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ChangesetChanges.d.item_type ) }">",
				"item_id":			<MvEVAL EXPR = "{ int( ChangesetChanges.d.item_id ) }">,
				"item_user_id":		<MvEVAL EXPR = "{ int( ChangesetChanges.d.item_user_id ) }">,
				"item_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ChangesetChanges.d.item_user_name ) }">",
				"item_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ChangesetChanges.d.item_user_icon ) }">",
				"item_version_id":	<MvEVAL EXPR = "{ int( ChangesetChanges.d.item_version_id ) }">,
				"item_identifier":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ChangesetChanges.d.item_identifier ) }">",
				"item_change_type":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ChangesetChanges.d.item_change_type ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ChangesetChanges" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ChangesetChanges">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetChangeList_Load_Query_AdvancedSearchFilter" PARAMETERS = "query var, field_count var, filter_name, filter_operator, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'item_change_type' }">
		<MvIF EXPR = "{ l.filter_operator EQ 'EQ' }">
			<MvIF EXPR = "{ l.filter_value EQ 'created' }">			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '( c.old_id = 0 AND c.new_id <> 0 )', '' ) }">
			<MvELSEIF EXPR = "{ l.filter_value EQ 'modified' }">	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '( c.old_id <> 0 AND c.new_id <> 0 )', '' ) }">
			<MvELSEIF EXPR = "{ l.filter_value EQ 'deleted' }">		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '( c.old_id <> 0 AND c.new_id = 0 )', '' ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ l.filter_operator EQ 'NE' }">
			<MvIF EXPR = "{ l.filter_value EQ 'created' }">			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '( c.old_id <> 0 )', '' ) }">
			<MvELSEIF EXPR = "{ l.filter_value EQ 'modified' }">	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '( c.old_id = 0 OR c.new_id = 0 )', '' ) }">
			<MvELSEIF EXPR = "{ l.filter_value EQ 'deleted' }">		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '( c.new_id <> 0 )', '' ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetTemplateVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtv.id',			'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtv.templ_id',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtv.user_id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'u.name',			'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mt.parent_id',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mt.item_id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mt.prop_id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters, 'mt.sync',			'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'mt.filename',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'mtv.dtstamp',		'' ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Changeset_ID', 'Changeset not found' ) }">
	</MvIF>
	
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.id			AS id,
																				 mtv.templ_id	AS templ_id,
																				 mtv.user_id	AS user_id,
																				 mt.parent_id	AS parent_id,
																				 mt.item_id		AS item_id,
																				 mt.prop_id		AS prop_id,
																				 mt.sync		AS sync,
																				 mt.filename	AS filename,
																				 mtv.dtstamp	AS dtstamp' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateChanges', 'mtc' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedTemplates', 'mt' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mtv', 'Users', 'u', 'u.id = mtv.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.name', 'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.icon', 'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mtc.set_id	= ?				AND
																				mtv.id		= mtc.new_id	AND
																				mt.id		= mtv.templ_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_ManagedTemplateVersionList_Load_Query_Filter', '', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'mtv.id,mtv.templ_id,mtv.user_id,user_name:u.name:null_char,mt.parent_id,mt.item_id,mt.prop_id,mt.sync,mt.filename,mtv.dtstamp', 'mt.filename' ) }"> 

	<MvIF EXPR = "{ l.ondemandcolumns:notes }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes		AS notes' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:source }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source		AS source' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.settings	AS settings' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ManagedTemplateVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00197', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"	VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ManagedTemplateVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":				<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.id ) }">,
				"templ_id":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.templ_id ) }">,
				"user_id":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.user_id ) }">,
				"user_name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.user_name ) }">",
				"user_icon":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.user_icon ) }">",
				"parent_id":		<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.parent_id ) }">,
				"item_id":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.item_id ) }">,
				"prop_id":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.prop_id ) }">,
				"sync":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( ManagedTemplateVersions.d.sync ) }">,
				"filename":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.filename ) }">",
				"dtstamp":			<MvEVAL EXPR = "{ int( ManagedTemplateVersions.d.dtstamp ) }">

				<MvIF EXPR = "{ l.ondemandcolumns:notes }">
					,"notes":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedTemplateVersions.d.notes ) }">"
				</MvIF>
				
				<MvIF EXPR = "{ l.ondemandcolumns:source }">
					,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( ManagedTemplateVersions.d.source ) }">"
				</MvIF>
				
				<MvIF EXPR = "{ l.ondemandcolumns:settings }">
					,"settings":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( miva_array_deserialize( ManagedTemplateVersions.d.settings ) ) }">
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ManagedTemplateVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplateVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetCSSResourceVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.id',		'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.res_id',	'res_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.user_id',	'user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'vu.name',		'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'v.active',	'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.mod_data',	'mod_data' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'r.templ_id',	'templ_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'mtv.user_id',	'source_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mtvu.name',	'source_user_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Changeset_ID', 'Changeset not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.changeset:branch_id, l.branch ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00249', 'Branch not found' ) }">
	</MvIF>
	
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'v.id			AS id,
																				 v.res_id		AS res_id,
																				 v.user_id		AS user_id,
																				 v.code			AS code,
																				 v.type			AS type,
																				 v.is_global	AS is_global,
																				 v.active		AS active,
																				 v.file			AS file,
																				 v.content_id	AS content_id,
																				 v.mod_code		AS mod_code,
																				 v.mod_data		AS mod_data,
																				 r.templ_id		AS templ_id,
																				 v.attributes	AS attributes' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceChanges', 'cssc' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResourceVersions', 'v' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CSSResources', 'r' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cssc.set_id	= ?				AND
																				v.id		= cssc.new_id	AND
																				r.id		= cssc.res_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateChanges', 'mtc', 'mtc.branch_id	= ?				AND
																																					   mtc.templ_id		= r.templ_id	AND
																																					   mtc.set_id		=
																																					   (
																																							SELECT
																																								MAX( mtc2.set_id )
																																							FROM
																																								' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc2
																																							WHERE
																																								mtc2.branch_id	= ?				AND
																																								mtc2.templ_id	= r.templ_id	AND
																																								mtc2.set_id		<= ?
																																						)',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = mtc.new_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', 'Users', 'vu', 'vu.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'vu.name', 'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'vu.icon', 'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_CSSResourceVersionList_Load_Query_Filter', '', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'v.id,v.res_id,v.user_id,user_name:vu.name:null_char,v.code,v.type,v.is_global,v.active,v.file,v.mod_code,v.mod_data,r.templ_id,source_user_id:mtv.user_id:null_integer,source_user_name:mtvu.name:null_char', 'v.code' ) }"> 

	<MvEVAL EXPR = "{ JSON_CSSResourceVersionList_Joins( l.filter, l.sort, l.ondemandcolumns, l.joins ) }">

	<MvIF EXPR = "{ l.joins:source }">
		<MvIF EXPR = "{ l.ondemandcolumns:source }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'bv.head' ) }">

			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'CSSResourceBranchVersions', 'bv', 'bv.branch_id = ? AND bv.res_id = v.res_id AND bv.version_id = v.id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) ) }">
		</MvIF>

		<MvIF EXPR = "{ l.ondemandcolumns:source_notes }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes AS source_notes' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query, 'mtv.user_id', 'source_user_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', 'Users', 'mtvu', 'mtvu.id = mtv.user_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.name', 'source_user_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.icon', 'source_user_icon' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'CSSResourceVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00224', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"	VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT CSSResourceVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":					<MvEVAL EXPR = "{ int( CSSResourceVersions.d.id ) }">,
				"res_id":				<MvEVAL EXPR = "{ int( CSSResourceVersions.d.res_id ) }">,
				"user_id":				<MvEVAL EXPR = "{ int( CSSResourceVersions.d.user_id ) }">,
				"user_name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.user_name ) }">",
				"user_icon":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.user_icon ) }">",
				"code":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.code ) }">",
				"type":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.type ) }">",
				"is_global":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( CSSResourceVersions.d.is_global ) }">,
				"active":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( CSSResourceVersions.d.active ) }">,
				"file":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.file ) }">",
				"content_id":			<MvEVAL EXPR = "{ int( CSSResourceVersions.d.content_id ) }">,
				"mod_code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.mod_code ) }">",
				"mod_data":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.mod_data ) }">",

				<MvIF EXPR = "{ ( CSSResourceVersions.d.type EQ 'L' ) AND [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'css', l.branch:tmpldir, CSSResourceVersions.d.file, '', l.branchless_file ) }">
					"branchless_file":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branchless_file ) }">",
				</MvIF>

				"templ_id":				<MvEVAL EXPR = "{ int( CSSResourceVersions.d.templ_id ) }">,
				"attributes":
				[
					<MvASSIGN NAME = "l.attribute_count"		VALUE = 0>
					<MvASSIGN NAME = "l.attributes"				VALUE = "{ miva_array_deserialize( CSSResourceVersions.d.attributes ) }">

					<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
							"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
							"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					</MvFOREACH>
				]

				<MvIF EXPR = "{ l.ondemandcolumns:linkedpages }">
					,"linkedpages":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.page_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageList_Load_Branch_CSSResource( l.branch:id, CSSResourceVersions.d.res_id, l.pages ) }">
						<MvELSE>								<MvASSIGN NAME = "l.page_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageList_Load_Changeset_CSSResource( l.changeset:id, CSSResourceVersions.d.res_id, l.pages ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_page_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ l.page_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_page_count ) }">
								<MvEVAL EXPR = "{ JSON_Page( l.page ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ ( CSSResourceVersions.d.type EQ 'C' ) AND l.ondemandcolumns:linkedresources }">
					,"linkedresources":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.resource_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Branch_CombinedResource( l.branch:id, CSSResourceVersions.d.res_id, l.resources ) }">
						<MvELSE>								<MvASSIGN NAME = "l.resource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Changeset_CombinedResource( l.changeset:id, CSSResourceVersions.d.res_id, l.resources ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_resource_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.resource" ARRAY = "l.resources" COUNT = "{ l.resource_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_resource_count ) }">
								<MvEVAL EXPR = "{ JSON_CSSResource( l.resource ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source }">
					<MvIF EXPR = "{ CSSResourceVersions.d.type EQ 'I' }">
						,"source":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( CSSResourceVersions.d.source ) }">",
						"source_user_id":	<MvEVAL EXPR = "{ int( CSSResourceVersions.d.source_user_id ) }">,
						"source_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.source_user_name ) }">",
						"source_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.source_user_icon ) }">"
					<MvELSEIF EXPR = "{ CSSResourceVersions.d.type EQ 'L' }">
						<MvIF EXPR = "{ NOT CSSResourceVersions.d.head }">	<MvASSIGN NAME = "l.managedcontent_loaded" VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( CSSResourceVersions.d.content_id, l.managedcontent ) }">
						<MvELSE>											<MvASSIGN NAME = "l.managedcontent_loaded" VALUE = 0>
						</MvIF>

						<MvIF EXPR = "{ l.managedcontent_loaded }">
							,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.managedcontent:content ) }">"
						<MvELSE>
							<MvASSIGN NAME = "l.source"					VALUE = "">
							<MvASSIGN NAME = "l.full_file_path"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, CSSResourceVersions.d.file ) }">
							<MvASSIGN NAME = "l.null"					VALUE = "{ file_read( l.full_file_path, 'script', l.source ) }">

							,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.source ) }">"
						</MvIF>

						,"source_user_id":	0,
						"source_user_name":	"",
						"source_user_icon":	""
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source_notes AND CSSResourceVersions.d.type EQ 'I' }">
					,"source_notes": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( CSSResourceVersions.d.source_notes ) }">"
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "CSSResourceVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResourceVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetJavaScriptResourceVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.id',		'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.res_id',	'res_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'v.user_id',	'user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'vu.name',		'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'v.is_global',	'is_global' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'v.active',	'active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.file',		'file' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.mod_code',	'mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'v.mod_data',	'mod_data' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'r.templ_id',	'templ_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'mtv.user_id',	'source_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mtvu.name',	'source_user_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Changeset_ID', 'Changeset not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID( l.changeset:branch_id, l.branch ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00250', 'Branch not found' ) }">
	</MvIF>
	
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'v.id			AS id,
																				 v.res_id		AS res_id,
																				 v.user_id		AS user_id,
																				 v.code			AS code,
																				 v.type			AS type,
																				 v.is_global	AS is_global,
																				 v.active		AS active,
																				 v.file			AS file,
																				 v.content_id	AS content_id,
																				 v.mod_code		AS mod_code,
																				 v.mod_data		AS mod_data,
																				 r.templ_id		AS templ_id,
																				 v.attributes	AS attributes' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceChanges', 'jsc' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'JavaScriptResources', 'r' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'jsc.set_id	= ?				AND
																				v.id		= jsc.new_id	AND
																				r.id		= jsc.res_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateChanges', 'mtc', 'mtc.branch_id	= ?				AND
																																					   mtc.templ_id		= r.templ_id	AND
																																					   mtc.set_id		=
																																					   (
																																							SELECT
																																								MAX( mtc2.set_id )
																																							FROM
																																								' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc2
																																							WHERE
																																								mtc2.branch_id	= ?				AND
																																								mtc2.templ_id	= r.templ_id	AND
																																								mtc2.set_id		<= ?
																																						)',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = mtc.new_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', 'Users', 'vu', 'vu.id = v.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'vu.name', 'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'vu.icon', 'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_JavaScriptResourceVersionList_Load_Query_Filter', '', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'v.id,v.res_id,v.user_id,user_name:vu.name:null_char,v.code,v.type,v.is_global,v.active,v.file,v.mod_code,v.mod_data,r.templ_id,source_user_id:mtv.user_id:null_integer,source_user_name:mtvu.name:null_char', 'v.code' ) }"> 

	<MvEVAL EXPR = "{ JSON_JavaScriptResourceVersionList_Joins( l.filter, l.sort, l.ondemandcolumns, l.joins ) }">

	<MvIF EXPR = "{ l.joins:source }">
		<MvIF EXPR = "{ l.ondemandcolumns:source }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source' ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'bv.head' ) }">

			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'v', g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions', 'bv', 'bv.branch_id = ? AND bv.res_id = v.res_id AND bv.version_id = v.id', [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) ) }">
		</MvIF>

		<MvIF EXPR = "{ l.ondemandcolumns:source_notes }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes AS source_notes' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query, 'mtv.user_id', 'source_user_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'r', 'Users', 'mtvu', 'mtvu.id = mtv.user_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.name', 'source_user_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.icon', 'source_user_icon' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'JavaScriptResourceVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00225', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"	VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT JavaScriptResourceVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":					<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.id ) }">,
				"res_id":				<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.res_id ) }">,
				"user_id":				<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.user_id ) }">,
				"user_name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.user_name ) }">",
				"user_icon":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.user_icon ) }">",
				"code":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.code ) }">",
				"type":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.type ) }">",
				"is_global":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( JavaScriptResourceVersions.d.is_global ) }">,
				"active":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( JavaScriptResourceVersions.d.active ) }">,
				"file":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.file ) }">",
				"content_id":			<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.content_id ) }">,
				"mod_code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.mod_code ) }">",
				"mod_data":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.mod_data ) }">",

				<MvIF EXPR = "{ ( JavaScriptResourceVersions.d.type EQ 'L' ) AND [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'scripts', l.branch:tmpldir, JavaScriptResourceVersions.d.file, '', l.branchless_file ) }">
					"branchless_file":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.branchless_file ) }">",
				</MvIF>

				"templ_id":				<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.templ_id ) }">,
				"attributes":
				[
					<MvASSIGN NAME = "l.attribute_count"		VALUE = 0>
					<MvASSIGN NAME = "l.attributes"				VALUE = "{ miva_array_deserialize( JavaScriptResourceVersions.d.attributes ) }">

					<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
							"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
							"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					</MvFOREACH>
				]

				<MvIF EXPR = "{ l.ondemandcolumns:linkedpages }">
					,"linkedpages":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.page_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageList_Load_Branch_JavaScriptResource( l.branch:id, JavaScriptResourceVersions.d.res_id, l.pages ) }">
						<MvELSE>								<MvASSIGN NAME = "l.page_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageList_Load_Changeset_JavaScriptResource( l.changeset:id, JavaScriptResourceVersions.d.res_id, l.pages ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_page_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ l.page_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_page_count ) }">
								<MvEVAL EXPR = "{ JSON_Page( l.page ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ ( JavaScriptResourceVersions.d.type EQ 'C' ) AND l.ondemandcolumns:linkedresources }">
					,"linkedresources":
					[
						<MvIF EXPR = "{ ISNULL l.changeset }">	<MvASSIGN NAME = "l.resource_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Branch_CombinedResource( l.branch:id, JavaScriptResourceVersions.d.res_id, l.resources ) }">
						<MvELSE>								<MvASSIGN NAME = "l.resource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Changeset_CombinedResource( l.changeset:id, JavaScriptResourceVersions.d.res_id, l.resources ) }">
						</MvIF>

						<MvASSIGN NAME = "l.output_resource_count"	VALUE = 0>

						<MvFOREACH ITERATOR = "l.resource" ARRAY = "l.resources" COUNT = "{ l.resource_count }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_resource_count ) }">
								<MvEVAL EXPR = "{ JSON_JavaScriptResource( l.resource ) }">
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
						</MvFOREACH>
					]
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source }">
					<MvIF EXPR = "{ JavaScriptResourceVersions.d.type EQ 'I' }">
						,"source":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( JavaScriptResourceVersions.d.source ) }">",
						"source_user_id":	<MvEVAL EXPR = "{ int( JavaScriptResourceVersions.d.source_user_id ) }">,
						"source_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.source_user_name ) }">",
						"source_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.source_user_icon ) }">"
					<MvELSEIF EXPR = "{ JavaScriptResourceVersions.d.type EQ 'L' }">
						<MvIF EXPR = "{ NOT JavaScriptResourceVersions.d.head }">	<MvASSIGN NAME = "l.managedcontent_loaded" VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( JavaScriptResourceVersions.d.content_id, l.managedcontent ) }">
						<MvELSE>													<MvASSIGN NAME = "l.managedcontent_loaded" VALUE = 0>
						</MvIF>

						<MvIF EXPR = "{ l.managedcontent_loaded }">
							,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.managedcontent:content ) }">"
						<MvELSE>
							<MvASSIGN NAME = "l.source"					VALUE = "">
							<MvASSIGN NAME = "l.full_file_path"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, JavaScriptResourceVersions.d.file ) }">
							<MvASSIGN NAME = "l.null"					VALUE = "{ file_read( l.full_file_path, 'script', l.source ) }">

							,"source":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( l.source ) }">"
						</MvIF>

						,"source_user_id":	0,
						"source_user_name":	"",
						"source_user_icon":	""
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source_notes AND JavaScriptResourceVersions.d.type EQ 'I' }">
					,"source_notes": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( JavaScriptResourceVersions.d.source_notes ) }">"
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "JavaScriptResourceVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResourceVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetItemVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'iv.id',			'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'iv.item_id',		'item_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'iv.user_id',		'user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'u.name',			'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'iv.code',			'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'iv.mod_code',		'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'm.name',			'module_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Changeset_ID', 'Changeset not found' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT(					l.search_query, 'iv.id			AS id,
																								 iv.item_id		AS item_id,
																								 iv.user_id		AS user_id,
																								 iv.code		AS code,
																								 iv.mod_code	AS mod_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.id',			'module_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.name',		'module_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.code',		'module_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.provider',	'module_provider' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.api_ver',	'module_api_ver' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.version',	'module_version' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR(		l.search_query, 'm.module',		'module_module' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.refcount',	'module_refcount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_BOOL(		l.search_query, 'm.active',		'module_active' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER(	l.search_query, 'm.priority',	'module_priority' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemChanges',		'ic' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemVersions',	'iv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Items',			'i' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', 'Modules',	'm',	[ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'm.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'iv.mod_code' ), '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', 'Users',		'u',	'u.id = iv.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.name', 'user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'u.icon', 'user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'ic.set_id	= ?			AND
																				iv.id		= ic.new_id	AND
																				i.id		= iv.item_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'iv.id,iv.item_id,iv.user_id,user_name:u.name:null_char,code:iv.code,module_id:m.id:null_integer,module_code:iv.mod_code,module_name:m.name:null_char', 'iv.code' ) }">

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ItemVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00317', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"	VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ItemVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvASSIGN NAME = "l.module:id"			VALUE = "{ ItemVersions.d.module_id }">
			<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-{ ItemVersions.d.module_code }">
			<MvASSIGN NAME = "l.module:name"		VALUE = "{ ItemVersions.d.module_name }">
			<MvASSIGN NAME = "l.module:provider"	VALUE = "{ ItemVersions.d.module_provider }">
			<MvASSIGN NAME = "l.module:api_ver"		VALUE = "{ ItemVersions.d.module_api_ver }">
			<MvASSIGN NAME = "l.module:version"		VALUE = "{ ItemVersions.d.module_version }">
			<MvASSIGN NAME = "l.module:module"		VALUE = "{ ItemVersions.d.module_module }">
			<MvASSIGN NAME = "l.module:refcount"	VALUE = "{ ItemVersions.d.module_refcount }">
			<MvASSIGN NAME = "l.module:active"		VALUE = "{ ItemVersions.d.module_active }">
			<MvASSIGN NAME = "l.module:priority"	VALUE = "{ ItemVersions.d.module_priority }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"id":				<MvEVAL EXPR = "{ int( ItemVersions.d.id ) }">,
				"item_id":			<MvEVAL EXPR = "{ int( ItemVersions.d.item_id ) }">,
				"user_id":			<MvEVAL EXPR = "{ int( ItemVersions.d.user_id ) }">,
				"user_name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ItemVersions.d.user_name ) }">",
				"user_icon":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ItemVersions.d.user_icon ) }">",
				"code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ItemVersions.d.code ) }">",
				"mod_code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ItemVersions.d.mod_code ) }">",
				"module":
				{
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.module ) }">
				}
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ItemVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ItemVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ManagedPropertyVersionList_Joins" PARAMETERS = "filter var, sort var, ondemandcolumns var, joins var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sort_field"	VALUE = "{ [ g.Module_Library_DB ].SQL_Sort_Field( l.sort, l.null ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:source }">																			<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.ondemandcolumns:source_notes }">																	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'source_user_id' }">																<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ l.sort_field EQ 'source_user_name' }">																<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( g.Filter, 'source_user_id',	l.null ) }">	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Filter_Contains_Search_Field( g.Filter, 'source_user_name',	l.null ) }">	<MvASSIGN NAME = "l.joins:source" VALUE = 1>
	<MvELSE>																												<MvASSIGN NAME = "l.joins:source" VALUE = 0>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ManagedPropertyVersionList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ManagedPropertyVersionList_Load_Query_Search_Filter" PARAMETERS = "query var, field_count var, search_field, search_operator, search_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.search_field EQ 'version_id' }">			<MvASSIGN NAME = "l.column" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mpv.id', 0 ) }">
	<MvELSEIF EXPR = "{ l.search_field EQ 'version_user_id' }">	<MvASSIGN NAME = "l.column" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mpv.user_id', 0 ) }">
	<MvELSEIF EXPR = "{ l.search_field EQ 'source_user_id' }">	<MvASSIGN NAME = "l.column" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mtv.user_id', 0 ) }">
	<MvELSE>													<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.search_operator EQ 'IN' OR
					l.search_operator EQ 'NOT_IN' }">			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Search_CommaSeparatedList_With_Type( l.query, 'INTEGER', l.column, l.search_operator, l.search_value ) }">
	<MvELSE>
		<MvIF EXPR = "{ l.search_operator EQ 'EQ' }">			<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_EQ(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'GT' }">		<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_GT(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'GE' }">		<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_GE(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'LT' }">		<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_LT(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'LE' }">		<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_LE(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'CO' }">		<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_CO(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'NC' }">		<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_NC(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'LIKE' }">		<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_LIKE(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'NOTLIKE' }">	<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_NOTLIKE(	'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'NE' }">		<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_NE(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'TRUE' }">		<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_TRUE(		'INTEGER', l.column, l.search_value ) }">
		<MvELSEIF EXPR = "{ l.search_operator EQ 'FALSE' }">	<MvASSIGN NAME = "l.where_sql" VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Filter_FALSE(	'INTEGER', l.column, l.search_value ) }">
		</MvIF>

		<MvIF EXPR = "{ l.search_operator EQ 'TRUE' OR l.operator EQ 'FALSE' }">	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, l.where_sql, '' ) }">
		<MvELSE>																	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, l.where_sql, [ g.Module_Library_DB ].SQL_Query_Field( l.search_value ) ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_BranchPropertyVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Branch_Load( l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.changeset"			VALUE = "">

	<MvASSIGN NAME = "l.changeset_id"		VALUE = 0>
	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mp.id',			'prop_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'mpv.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'mpv.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mpv.product_id',	'product_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mpv.cat_id',		'cat_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'mp.sync',			'sync' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mp.templ_id',		'templ_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mpv.id',			'version_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mpv.user_id',		'version_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mpvu.name',		'version_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'mtv.user_id',		'source_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mtvu.name',		'source_user_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.changeset_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00241', 'Changeset not found' ) }">
		<MvELSEIF EXPR = "{ l.changeset:branch_id NE l.branch:id }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00242', 'Changeset does not exist on the specified branch' ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mp.id			AS prop_id,
																				 mp.sync		AS sync,
																				 mp.templ_id	AS templ_id,
																				 mpv.type		AS type,
																				 mpv.code		AS code,
																				 mpv.product_id	AS product_id,
																				 mpv.cat_id		AS cat_id,
																				 mpv.id			AS version_id,
																				 mpv.user_id	AS version_user_id' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query, 'mtv.id', 'template_version_id' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedProperties', 'mp' ) }">

	<MvIF EXPR = "{ ISNULL l.changeset }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedPropertyBranchVersions', 'mpbv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedPropertyVersions', 'mpv' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mpbv.branch_id	= ?					AND
																					mpbv.head		= 1					AND
																					mpv.id			= mpbv.version_id	AND
																					mp.id			= mpbv.prop_id',
																   [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mp', g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions', 'mtbv', 'mtbv.branch_id = ? AND mtbv.templ_id = mp.templ_id AND mtbv.head = 1', [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mp', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = mtbv.version_id', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedPropertyVersions',	'mpv' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedPropertyChanges',	'mpc' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mpc.branch_id	= ?		AND
																					mpc.prop_id		= mp.id	AND
																					mpc.set_id		=
																					(
																						SELECT
																							MAX( mpc2.set_id )
																						FROM
																							' $ g.Store_Table_Prefix $ 'ManagedPropertyChanges mpc2
																						WHERE
																							mpc2.branch_id	= ?		AND
																							mpc2.prop_id	= mp.id	AND
																							mpc2.set_id		<= ?
																					)',
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																		     [ g.Module_Library_DB ].SQL_Query_Field( l.branch:id )		$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mpv.id = mpc.new_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mp', g.Store_Table_Prefix $ 'ManagedTemplates', 'mt', 'mt.id = mp.templ_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mp', g.Store_Table_Prefix $ 'ManagedTemplateChanges', 'mtc', 'mtc.branch_id	= ?				AND
																																							mtc.templ_id	= mp.templ_id	AND
																																							mtc.set_id		=
																																							(
																																								SELECT
																																									MAX( mtc2.set_id )
																																								FROM
																																									' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc2
																																								WHERE
																																									mtc2.branch_id	= ?				AND
																																									mtc2.templ_id	= mp.templ_id	AND
																																									mtc2.set_id		<= ?
																																							)',
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mp', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mtc.new_id', 0 ), '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mpv', 'Users', 'mpvu', 'mpvu.id = mpv.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mpvu.name', 'version_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mpvu.icon', 'version_user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_ManagedPropertyVersionList_Load_Query_Filter', 'JSON_ManagedPropertyVersionList_Load_Query_Search_Filter', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'prop_id:mp.id,type:mpv.type:null_char,code:mpv.code:null_char,product_id:mpv.product_id:null_integer,cat_id:mpv.cat_id:null_integer,mp.sync,mp.templ_id,version_id:mpv.id:null_integer,version_user_id:mpv.user_id:null_integer,version_user_name:mpvu.name:null_char,source_user_id:mtv.user_id:null_integer,source_user_name:mtvu.name:null_char', 'type;code;product_id;cat_id;mp.id;version_id;template_version_id' ) }"> 

	<MvEVAL EXPR = "{ JSON_ManagedPropertyVersionList_Joins( l.filter, l.sort, l.ondemandcolumns, l.joins ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mpv.settings	AS settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:image }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'i.id			AS image_loaded_id,
																					 i.image 		AS image_image, 
																					 i.refcount 	AS image_refcount, 
																					 r.head_count 	AS image_head_count' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mpv', g.Store_Table_Prefix $ 'Images', 'i', 'i.id = mpv.image_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mpv', g.Store_Table_Prefix $ 'ManagedPropertyVersionImageReferences', 'r', 'r.prop_id		= mpv.prop_id 	AND 
																																										 r.version_id	= mpv.id 		AND 
																																										 r.image_id		= mpv.image_id', '' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:content }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'c.id		AS content_loaded_id,
															                         c.encoding	AS content_encoding,
															                         c.content	AS content_content' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mpv', g.Store_Table_Prefix $ 'ManagedContent', 'c', 'c.id = mpv.content_id', '' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.joins:source }">
		<MvIF EXPR = "{ l.ondemandcolumns:source }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.ondemandcolumns:source_notes }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes AS source_notes' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query, 'mtv.user_id', 'source_user_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mp', 'Users', 'mtvu', 'mtvu.id = mtv.user_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.name', 'source_user_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mtvu.icon', 'source_user_icon' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ManagedPropertyVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00243', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"		VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ManagedPropertyVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"prop_id":				<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.prop_id ) }">,
				"type":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.type ) }">",
				"code":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.code ) }">",
				"product_id":			<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.product_id ) }">,
				"cat_id":				<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.cat_id ) }">,
				"sync":					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( ManagedPropertyVersions.d.sync ) }">,
				"templ_id":				<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.templ_id ) }">,
				"version_id":			<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.version_id ) }">,
				"version_user_id":		<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.version_user_id ) }">,
				"version_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.version_user_name ) }">",
				"version_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.version_user_icon ) }">"

				<MvIF EXPR = "{ l.ondemandcolumns:settings AND ManagedPropertyVersions.d.version_id }">
					,"settings":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( miva_array_deserialize( ManagedPropertyVersions.d.settings ) ) }">
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source AND ManagedPropertyVersions.d.templ_id }">
					,"source":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( ManagedPropertyVersions.d.source ) }">",
					"source_user_id":	<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.source_user_id ) }">,
					"source_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.source_user_name ) }">",
					"source_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.source_user_icon ) }">"
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source_notes AND ManagedPropertyVersions.d.templ_id }">
					,"source_notes":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.source_notes ) }">"
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:product AND ManagedPropertyVersions.d.product_id }">
					<MvIF EXPR = "{ [ g.Module_Library_DB ].Product_Load_ID( ManagedPropertyVersions.d.product_id, l.product ) }">
						,"product":
						{
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Product_OnDemandColumns( l.product, l.ondemandcolumns ) }">
						}
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:category AND ManagedPropertyVersions.d.cat_id }">
					<MvIF EXPR = "{ [ g.Module_Library_DB ].Category_Load_ID( ManagedPropertyVersions.d.cat_id, l.category ) }">
						,"category":
						{
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Category_OnDemandColumns( l.category, l.ondemandcolumns ) }">
						}
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:image AND ManagedPropertyVersions.d.image_loaded_id }">
					,"image": 			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.image_image ) }">",
					"image_id": 		<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.image_loaded_id ) }">,
					"image_refcount": 	<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.image_refcount ) }">,
					"image_head_count": <MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.image_head_count ) }">
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:content AND ManagedPropertyVersions.d.content_loaded_id }">
					<MvIF EXPR = "{ ManagedPropertyVersions.d.content_encoding EQ 'base64' }">	<MvASSIGN NAME = "l.content" VALUE = "{ crypto_base64_decode( ManagedPropertyVersions.d.content_content ) }">
					<MvELSE>																	<MvASSIGN NAME = "l.content" VALUE = "{ ManagedPropertyVersions.d.content_content }">
					</MvIF>

					,"content":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.content ) }">",
					"content_id": 	<MvEVAL EXPR = "{ encodejavascriptnumber( ManagedPropertyVersions.d.content_loaded_id ) }">
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ManagedPropertyVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedPropertyVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ChangesetPropertyVersionList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mp.id',			'prop_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'mpv.type',		'type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(			l.available_filters, 'mpv.code',		'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mpv.product_id',	'product_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mpv.cat_id',		'cat_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(			l.available_filters, 'mp.sync',			'sync' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mp.templ_id',		'templ_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mpv.id',			'version_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(		l.available_filters, 'mpv.user_id',		'version_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mpvu.name',		'version_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_INTEGER(	l.available_filters, 'mtv.user_id',		'source_user_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_NULL_CHAR(		l.available_filters, 'mtvu.name',		'source_user_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer(	'R', 'Changeset_ID',	l.changeset_id )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',			l.filter )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',			l.sort )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',			l.offset )			OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',			l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Load_ID( l.changeset_id, l.changeset ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Changeset_ID', 'Changeset not found' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mp.id			AS prop_id,
																				 mpv.type		AS type,
																				 mpv.code		AS code,
																				 mpv.product_id	AS product_id,
																				 mpv.cat_id		AS cat_id,
																				 mpv.id			AS version_id,
																				 mpv.user_id	AS version_user_id,
																				 mp.sync		AS sync,
																				 mp.templ_id	AS templ_id' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query, 'mtv.id',		'template_version_id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.search_query, 'mtv.user_id',	'source_user_id' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedPropertyChanges',	'mpc' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedPropertyVersions',	'mpv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ManagedProperties',		'mp' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'mpc.set_id	= ?				AND
																				mpv.id		= mpc.new_id	AND
																				mp.id		= mpv.prop_id',
															   [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mp', g.Store_Table_Prefix $ 'ManagedTemplateChanges', 'mtc', 'mtc.branch_id	= ?				AND
																																					    mtc.templ_id	= mp.templ_id	AND
																																					    mtc.set_id		=
																																					    (
																																							SELECT
																																								MAX( mtc2.set_id )
																																							FROM
																																								' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc2
																																							WHERE
																																								mtc2.branch_id	= ?				AND
																																								mtc2.templ_id	= mp.templ_id	AND
																																								mtc2.set_id		<= ?
																																						)',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:branch_id ) $ ',' $
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.changeset:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mp', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv', 'mtv.id = mtc.new_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mpv', 'Users', 'mpvu', 'mpvu.id = mpv.user_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mpvu.name', 'version_user_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query, 'mpvu.icon', 'version_user_icon' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Feature_TUI_JSON, 'JSON_ManagedPropertyVersionList_Load_Query_Filter', 'JSON_ManagedPropertyVersionList_Load_Query_Search_Filter', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'prop_id:mp.id,mpv.type,mpv.code,mpv.product_id,mpv.cat_id,mp.sync,mp.templ_id,version_id:mpv.id,version_user_id:mpv.user_id,version_user_name:mpvu.name:null_char,source_user_id:mtv.user_id:null_integer,source_user_name:mtvu.name:null_char', 'mpv.type;mpv.code;mpv.product_id;mpv.cat_id;mp.id;mpv.id;template_version_id' ) }"> 

	<MvEVAL EXPR = "{ JSON_ManagedPropertyVersionList_Joins( l.filter, l.sort, l.ondemandcolumns, l.joins ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:settings }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mpv.settings	AS settings' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:image }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'i.id			AS image_id,
																					 i.image 		AS image_image, 
																					 i.refcount 	AS image_refcount, 
																					 r.head_count 	AS image_head_count' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mpv', g.Store_Table_Prefix $ 'Images',								'i', 'i.id			= mpv.image_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mpv', g.Store_Table_Prefix $ 'ManagedPropertyVersionImageReferences',	'r', 'r.prop_id		= mpv.prop_id 	AND 
																																										  r.version_id	= mpv.id 		AND 
																																										  r.image_id	= mpv.image_id', '' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.joins:source }">
		<MvIF EXPR = "{ l.ondemandcolumns:source }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.source' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.ondemandcolumns:source_notes }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv.notes AS source_notes' ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query,		'mtvu.name',	'source_user_name' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_CHAR( l.search_query,		'mtvu.icon',	'source_user_icon' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'mp', 'Users', 'mtvu', 'mtvu.id = mtv.user_id', '' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.search_sql"		VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ManagedPropertyVersions', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00240', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version_count"	VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT ManagedPropertyVersions.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.version_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.version_count ) }">
				"prop_id":				<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.prop_id ) }">,
				"type":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.type ) }">",
				"code":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.code ) }">",
				"product_id":			<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.product_id ) }">,
				"cat_id":				<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.cat_id ) }">,
				"sync":					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( ManagedPropertyVersions.d.sync ) }">,
				"templ_id":				<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.templ_id ) }">,
				"version_id":			<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.version_id ) }">,
				"version_user_id":		<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.version_user_id ) }">,
				"version_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.version_user_name ) }">",
				"version_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.version_user_icon ) }">"

				<MvIF EXPR = "{ l.ondemandcolumns:settings AND ManagedPropertyVersions.d.version_id }">
					,"settings":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( miva_array_deserialize( ManagedPropertyVersions.d.settings ) ) }">
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source AND ManagedPropertyVersions.d.templ_id }">
					,"source":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode_Binary( ManagedPropertyVersions.d.source ) }">",
					"source_user_id":	<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.source_user_id ) }">,
					"source_user_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.source_user_name ) }">",
					"source_user_icon":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.source_user_icon ) }">"
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:source_notes AND ManagedPropertyVersions.d.templ_id }">
					 ,"source_notes":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.source_notes ) }">"
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:product AND ManagedPropertyVersions.d.product_id }">
					<MvIF EXPR = "{ [ g.Module_Library_DB ].Product_Load_ID( ManagedPropertyVersions.d.product_id, l.product ) }">
						,"product":
						{
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Product_OnDemandColumns( l.product, l.ondemandcolumns ) }">
						}
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:category AND ManagedPropertyVersions.d.cat_id }">
					<MvIF EXPR = "{ [ g.Module_Library_DB ].Category_Load_ID( ManagedPropertyVersions.d.cat_id, l.category ) }">
						,"category":
						{
							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Category_OnDemandColumns( l.category, l.ondemandcolumns ) }">
						}
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.ondemandcolumns:image AND ManagedPropertyVersions.d.image_id }">
					,"image": 			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( ManagedPropertyVersions.d.image_image ) }">",
					"image_id": 		<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.image_id ) }">,
					"image_refcount": 	<MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.image_refcount ) }">,
					"image_head_count": <MvEVAL EXPR = "{ int( ManagedPropertyVersions.d.image_head_count ) }">
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "ManagedPropertyVersions" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedPropertyVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageCacheSetting_Load" PARAMETERS = "page var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_PageCacheSetting_Type', l.settings:type ) AND
					[ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_PageCacheSetting_Name', l.settings:name ) }">
		<MvREFERENCEARRAY NAME = "l.settings:ref"	VARIABLE = "l.page:cacheset">
			<MvMEMBER NAME = "{ l.settings:type }">
			<MvMEMBER NAME = "{ l.settings:name }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ISNULL l.settings:ref }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00255', 'Cache settings not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00256', 'Unable to load cache settings: Edit_PageCacheSetting_Type and Edit_PageCacheSetting_Name must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageCacheSettingList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"		VALUE = "">
	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = 0>
	<MvASSIGN NAME = "l.count"					VALUE = 0>
	<MvASSIGN NAME = "l.records"				VALUE = "">
	<MvASSIGN NAME = "l.search_expression"		VALUE = "1 EQ 1">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'name',	'l.record:name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'type',	'l.record:type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'mode',	'l.record:mode' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'value',	'l.record:value' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o',		'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o',		'Sort',		l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o:nonneg', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o',		'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.type" ARRAY = "l.types" COUNT = "{ miva_struct_members( l.page:cacheset, l.types ) }">
		<MvREFERENCEARRAY NAME = "l.name_struct" VARIABLE = "l.page:cacheset">
			<MvMEMBER NAME = "{ l.type }">
		</MvREFERENCEARRAY>

		<MvFOREACH ITERATOR = "l.name" ARRAY = "l.names" COUNT = "{ miva_struct_members( l.name_struct, l.names ) }">
			<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.page:cacheset">
				<MvMEMBER NAME = "{ l.type }">
				<MvMEMBER NAME = "{ l.name }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.record"			VALUE = "">
			<MvASSIGN NAME = "l.record:name"	VALUE = "{ l.name }">
			<MvASSIGN NAME = "l.record:type"	VALUE = "{ l.type }">
			<MvASSIGN NAME = "l.record:mode"	VALUE = "{ l.settings:mode }">
			<MvASSIGN NAME = "l.record:value"	VALUE = "{ l.settings:value }">

			<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert_var( l.records, l.record, -1 ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_MivaScript( l.search_expression, l.filter, l.available_filters ) }">

	<MvASSIGN NAME = "l.total_count"			VALUE = "{ miva_array_filter_ref( l.records, 1, l.record, l.search_expression, l.filtered_records ) }">
	<MvASSIGN NAME = "l.null"					VALUE = "{ miva_array_sort( l.filtered_records, 'PageCacheSettingList_Sort_Callback', l.sort ) }">
	<MvASSIGN NAME = "l.output_count"			VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.record" ARRAY = "l.filtered_records" FIRST = "{ l.offset + 1 }" LAST = "{ l.total_count }">
				<MvIF EXPR = "{ ( l.output_count GE l.count ) AND ( l.count NE 0 ) }">
					<MvFOREACHSTOP>
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
					"type":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.record:type ) }">",
					"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.record:name ) }">",
					"mode":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.record:mode ) }">",
					"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.record:value ) }">"
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "PageCacheSettingList_Sort_Callback" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.data EQ 'name' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:name, l.right:name ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-name' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:name, l.left:name ) }">
	<MvELSEIF EXPR = "{ l.data EQ 'type' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:type, l.right:type ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-type' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:type, l.left:type ) }">
	<MvELSEIF EXPR = "{ l.data EQ 'mode' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:mode, l.right:mode ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-mode' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:mode, l.left:mode ) }">
	<MvELSEIF EXPR = "{ l.data EQ 'value' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:value, l.right:value ) }">
	<MvELSEIF EXPR = "{ l.data EQ '-value' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:value, l.left:value ) }">
	</MvIF>

	<MvIF EXPR = "{ l.result NE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.result }">
	</MvIF>

	<MvCOMMENT>
	|
	| Break ties using name then type
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ substring_var( l.data, 1, 1 ) NE '-' }">
		<MvIF EXPR = "{ strcasecmp( l.left:name, l.right:name ) LT 0 }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:name, l.right:name ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:type, l.right:type ) LT 0 }">	<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:type, l.right:type ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ strcasecmp( l.right:name, l.left:name ) LT 0 }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.right:name, l.left:name ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ strcasecmp( l.right:type, l.left:type ) LT 0 }">	<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.right:type, l.left:type ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageCacheSetting_Insert" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_LockFile( l.page ) }">	
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_PageCacheSetting_Insert_LowLevel( l.page ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageCacheSetting_Insert_LowLevel" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_ID( l.page:id, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_List( 'R', 'Type', l.type, 'cookie,parameter,header', 'cookie,parameter,header' ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Name', l.name ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.page:cacheset">
		<MvMEMBER NAME = "{ l.type }">
		<MvMEMBER NAME = "{ l.name }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT ISNULL l.settings }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00253', 'Cache settings with type \'' $ l.type $ '\' and name \'' $ l.name $ '\' already defined' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_List( 'R', 'Mode', l.settings:mode, 'ignore,key,disable,disable_substring,disable_equal', 'ignore,key,disable,disable_substring,disable_equal' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.settings:mode EQ 'disable_substring' OR l.settings:mode EQ 'disable_equal' }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Value', l.settings:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Update_CacheSettings( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00318', 'Cache settings with type \'' $ l.type $ '\' and name \'' $ l.name $ '\' created for page \'' $ l.page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageCacheSetting_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_LockFile( l.page ) }">	
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_PageCacheSetting_Update_LowLevel( l.page ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageCacheSetting_Update_LowLevel" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_ID( l.page:id, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_PageCacheSetting_Load( l.page, l.data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvREFERENCE NAME = "l.settings"		VARIABLE = "l.data:ref">
	<MvASSIGN NAME = "l.original_settings"	VALUE = "{ l.settings }">

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Name' ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Name', l.updated_name ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ strcasecmp( l.updated_name, l.data:name ) NE 0 }">
			<MvREFERENCEARRAY NAME = "l.updated_settings"	VARIABLE = "l.page:cacheset">
				<MvMEMBER NAME = "{ l.data:type }">
				<MvMEMBER NAME = "{ l.updated_name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.updated_settings }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00254', 'Cache settings with type \'' $ l.data:type $ '\' and name \'' $ l.updated_name $ '\' already defined' ) }">
			</MvIF>

			<MvCOMMENT>
			|
			| Copy existing settings to new location
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.updated_settings:mode"	VALUE = "{ l.settings:mode }">
			<MvASSIGN NAME = "l.updated_settings:value"	VALUE = "{ l.settings:value }">

			<MvCOMMENT>
			|
			| Delete existing settings structure
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.settings"				VALUE = "">

			<MvREFERENCEARRAY NAME = "l.settings"	VARIABLE = "l.page:cacheset">
				<MvMEMBER NAME = "{ l.data:type }">
				<MvMEMBER NAME = "{ l.updated_name }">
			</MvREFERENCEARRAY>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_List( 'O', 'Mode', l.settings:mode, 'ignore,key,disable,disable_substring,disable_equal', 'ignore,key,disable,disable_substring,disable_equal' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.settings:mode EQ 'disable_substring' OR l.settings:mode EQ 'disable_equal' }">
		<MvIF EXPR = "{ l.original_settings:mode NE 'disable_substring' AND l.original_settings:mode NE 'disable_equal' }">	<MvASSIGN NAME = "l.value_required" VALUE = "R">
		<MvELSE>																											<MvASSIGN NAME = "l.value_required" VALUE = "O">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( l.value_required, 'Value', l.settings:value ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.settings:value" VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Update_CacheSettings( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00319', 'Cache settings with type \'' $ l.data:type $ '\' and name \'' $ ternary( NOT ISNULL l.updated_name, l.updated_name, l.data:name ) $ '\' updated on page \'' $ l.page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageCacheSetting_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_LockFile( l.page ) }">	
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_PageCacheSetting_Delete_LowLevel( l.page ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageCacheSetting_Delete_LowLevel" PARAMETERS="page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_ID( l.page:id, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_PageCacheSetting_Load( l.page, l.data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvREFERENCE NAME = "l.settings"	VARIABLE = "l.data:ref">
	<MvASSIGN NAME = "l.settings"		VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Update_CacheSettings( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00320', 'Cache settings with type \'' $ l.data:type $ '\' and name \'' $ l.data:name $ '\' deleted from page \'' $ l.page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CopyPageRules" PARAMETERS = "copypagerules var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.copypagerules:id ) }">,
	"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.copypagerules:name ) }">",
	"secure":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.copypagerules:secure ) }">,
	"title":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.copypagerules:title ) }">,
	"template":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.copypagerules:template ) }">,
	"items":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.copypagerules:items ) }">,
	"settings":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.copypagerules:settings ) }">",
	"jsres":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.copypagerules:jsres ) }">,
	"cssres":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.copypagerules:cssres ) }">,
	"cacheset":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.copypagerules:cacheset ) }">,
	"public":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.copypagerules:public ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CopyPageRules_Loaders_Present" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'CopyPageRules_ID' ) }">		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'CopyPageRules_Name' ) }">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CopyPageRules_Load" PARAMETERS = "copypagerules var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'CopyPageRules_ID', l.copypagerules_id ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CopyPageRules_Load_ID( l.copypagerules_id, l.copypagerules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00262', 'Copy page rules not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'CopyPageRules_Name', l.copypagerules_name ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CopyPageRules_Load_Name( l.copypagerules_name, l.copypagerules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00263', 'Copy page rules not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00264', 'Unable to load copy page rules: One of CopyPageRules_ID or CopyPageRules_Name must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CopyPageRulesList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.search_query"		VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER( l.available_filters,	'id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters,		'name',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters,		'secure',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters,		'title',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters,		'template',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters,		'items',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters,		'settings',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters,		'jsres',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters,		'cssres',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters,		'cacheset',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL( l.available_filters,		'public',	'' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CopyPageRules', 'cpr' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id,name,secure,title,template,items,settings,jsres,cssres,cacheset,public', 'name' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'CopyPageRules', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00265', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.copypagerules_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count":	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset":	<MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT CopyPageRules.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.copypagerules_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].CopyPageRules_Read( l.copypagerules ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.copypagerules_count ) }">
				<MvEVAL EXPR = "{ JSON_CopyPageRules( l.copypagerules ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "CopyPageRules" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "CopyPageRules">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CopyPageRules_Insert" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.copypagerules"				VALUE = "">
	<MvASSIGN NAME = "l.copypagerules:secure"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:title"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:template"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:items"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:settings"		VALUE = "none">
	<MvASSIGN NAME = "l.copypagerules:jsres"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:cssres"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:cacheset"		VALUE = 0>
	<MvASSIGN NAME = "l.copypagerules:public"		VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'R:100',	'Name',								l.copypagerules:name )													OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Secure',							l.copypagerules:secure ) 												OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Title',							l.copypagerules:title )													OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Template',							l.copypagerules:template )												OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Items',							l.copypagerules:items )													OR
					NOT [ g.Module_JSON ].JSON_Input_List(		'O',		'Settings',							l.copypagerules:settings, 'all,none,specific', 'all,none,specific' )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'JavaScriptResourceAssignments',	l.copypagerules:jsres )													OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'CSSResourceAssignments',			l.copypagerules:cssres )												OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'CacheSettings',					l.copypagerules:cacheset )												OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Public',							l.copypagerules:public ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].CopyPageRules_Load_Name( l.copypagerules:name, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Name', 'A rule with the name \'' $ l.copypagerules:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CopyPageRule_Insert( l.copypagerules ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00266', 'Copy page rules for \'' $ l.copypagerules:name $ '\' created' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_CopyPageRules( l.copypagerules ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CopyPageRules_Update" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CopyPageRules_Load( l.copypagerules ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_copypagerules" VALUE = "{ l.copypagerules }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'O:100',	'Name',								l.copypagerules:name )													OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Secure',							l.copypagerules:secure ) 												OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Title',							l.copypagerules:title )													OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Template',							l.copypagerules:template )												OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Items',							l.copypagerules:items )													OR
					NOT [ g.Module_JSON ].JSON_Input_List(		'O',		'Settings',							l.copypagerules:settings, 'all,none,specific', 'all,none,specific' )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'JavaScriptResourceAssignments',	l.copypagerules:jsres )													OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'CSSResourceAssignments',			l.copypagerules:cssres )												OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'CacheSettings',					l.copypagerules:cacheset )												OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Public',							l.copypagerules:public ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].CopyPageRules_Load_Name( l.copypagerules:name, l.existing_copypagerules ) AND l.copypagerules:id NE l.existing_copypagerules:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Name', 'A rule with the name \'' $ l.copypagerules:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CopyPageRule_Update( l.copypagerules ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.original_copypagerules:settings EQ 'specific' AND l.copypagerules:settings NE 'specific' }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CopyPageRulesXSettings_Delete_All_RulesID( l.copypagerules:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00267', 'Copy page rules for \'' $ l.copypagerules:name $ '\' updated' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CopyPageRulesList_Delete" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'CopyPageRules_IDs', l.copypagerules_ids, l.copypagerules_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">

	<MvFOREACH ITERATOR = "l.copypagerules_id" ARRAY = "l.copypagerules_ids" COUNT = "{ l.copypagerules_id_count }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CopyPageRules_Load_ID( l.copypagerules_id, l.copypagerules ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CopyPageRules_Delete( l.copypagerules ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.apitoken_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00268', 'Copy page rules for \'' $ l.copypagerules:name $ '\' deleted' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CopyPageRulesSettingsList_Load_Query" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CopyPageRules_Load( l.copypagerules ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.filter"			VALUE = "">
	<MvASSIGN NAME = "l.sort"			VALUE = "">
	<MvASSIGN NAME = "l.offset"			VALUE = 0>
	<MvASSIGN NAME = "l.count"			VALUE = 0>
	<MvASSIGN NAME = "l.assigned"		VALUE = 1>
	<MvASSIGN NAME = "l.unassigned"		VALUE = 0>
	<MvASSIGN NAME = "l.branch_id"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Working_Branch_ID() }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'iv.code',	'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR( l.available_filters, 'm.name',	'module_name' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',		l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',		l.count )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Assigned',	l.assigned )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Unassigned',	l.unassigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'i.*,
																				 iv.code			AS code,
																				 m.name				AS module_name,
																				 m.code				AS module_code,
																				 m.provider			AS module_provider,
																				 m.api_ver			AS module_api_ver,
																				 m.version			AS module_version,
																				 m.module			AS module_module,
																				 m.refcount			AS module_refcount,
																				 m.active			AS module_active,
																				 m.priority			AS module_priority,
																				 cps.rules_id		AS assigned' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemBranchVersions',	'ibv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Items',				'i' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'ItemVersions',		'iv' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'ibv.branch_id	= ?				AND
																				ibv.head		= 1				AND
																				i.id			= ibv.item_id	AND
																				iv.id			= ibv.version_id', [ g.Module_Library_DB ].SQL_Query_Field( l.branch_id ) ) }">

	<MvIF EXPR = "{ l.assigned AND l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', g.Store_Table_Prefix $ 'CopyPageRulesXSettings', 'cps', 'cps.rules_id = ? AND ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'cps.item_code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'iv.code' ), [ g.Module_Library_DB ].SQL_Query_Field( l.copypagerules:id ) ) }">
	<MvELSEIF EXPR = "{ l.unassigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', g.Store_Table_Prefix $ 'CopyPageRulesXSettings', 'cps', 'cps.rules_id = ? AND ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'cps.item_code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'iv.code' ), [ g.Module_Library_DB ].SQL_Query_Field( l.copypagerules:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cps.rules_id IS NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'CopyPageRulesXSettings', 'cps' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'cps.rules_id = ? AND ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'cps.item_code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'iv.code' ), [ g.Module_Library_DB ].SQL_Query_Field( l.copypagerules:id ) ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'iv', 'Modules', 'm', [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'm.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'iv.mod_code' ), '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort, 'id:i.id,code:iv.code,module_name:m.name', 'iv.code' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Items', l.search_sql, l.search_fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00269', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.item_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Items.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.item_count LT l.count ) ) }">
			<MvASSIGN NAME = "l.module:id"			VALUE = "{ Items.d.module_id }">
			<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-{ Items.d.module_code }">
			<MvASSIGN NAME = "l.module:name"		VALUE = "{ Items.d.module_name }">
			<MvASSIGN NAME = "l.module:provider"	VALUE = "{ Items.d.module_provider }">
			<MvASSIGN NAME = "l.module:api_ver"		VALUE = "{ Items.d.module_api_ver }">
			<MvASSIGN NAME = "l.module:version"		VALUE = "{ Items.d.module_version }">
			<MvASSIGN NAME = "l.module:module"		VALUE = "{ Items.d.module_module }">
			<MvASSIGN NAME = "l.module:refcount"	VALUE = "{ Items.d.module_refcount }">
			<MvASSIGN NAME = "l.module:active"		VALUE = "{ Items.d.module_active }">
			<MvASSIGN NAME = "l.module:priority"	VALUE = "{ Items.d.module_priority }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.item_count ) }">
				"id":			<MvEVAL EXPR = "{ int( Items.d.id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Items.d.code ) }">",
				"assigned":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( Items.d.assigned ) }">,
				"module":
				{
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Module( l.module ) }">
				}
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Items" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Items">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_CopyPageRulesSettings_Update_Assigned" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_CopyPageRules_Load( l.copypagerules ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'Item_Code',	l.item_code ) OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'R', 'Assigned',	l.assigned ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.item_code, l.item ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-TUI-JSN-00270', 'Item \'' $ l.item_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].CopyPageRulesXSettings_Load( l.copypagerules:id, l.item:code, l.null ) }">
		<MvIF EXPR = "{ NOT l.assigned }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CopyPageRulesXSettings_Delete( l.copypagerules:id, l.item:code ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00271', 'Item \'' $ l.item:code $ '\' unassigned from Copy Page Rules \'' $ l.copypagerules:name $ '\'' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ l.assigned }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CopyPageRulesXSettings_Insert( l.copypagerules:id, l.item:code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-JSN-00272', 'Item \'' $ l.item:code $ '\' assigned to Copy Page Rules \'' $ l.copypagerules:name $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvCOMMENT>
|
| Helper Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "JSON_Branch_Session_Filename" PARAMETERS = "prefix, session_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.prefix $ '_' $ l.session_id $ '.data' }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Session_Serialize" PARAMETERS = "filename, session var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ file_touch( l.filename, 'data' ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00336', 'Failed to create session: ' $ file_last_error() ) }">
	</MvIF>

	<MvIF EXPR = "{ file_overwrite( l.filename, 'data', miva_array_serialize( l.session ) ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00337', 'Failed to write to session: ' $ file_last_error() ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Branch_Session_Deserialize" PARAMETERS = "filename, session_id, session var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( NOT isalnum( l.session_id ) ) OR ( len_var( l.session_id ) NE len_var( MakeSessionID() ) ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00333', 'Invalid session' ) }">
	</MvIF>

	<MvIF EXPR = "{ file_read( l.filename, 'data', l.raw_session ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00334', 'Session does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"		VALUE = "{ fdelete( l.filename ) }">
	<MvASSIGN NAME = "l.session"	VALUE = "{ miva_array_deserialize( l.raw_session ) }">

	<MvIF EXPR = "{ ( l.session:id NE l.session_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-JSN-00335', 'Corrupted session' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Page_Type" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.page:layout }">		<MvFUNCTIONRETURN VALUE = "Layout">
	<MvELSEIF EXPR = "{ l.page:fragment }">	<MvFUNCTIONRETURN VALUE = "Fragment">
	<MvELSE>								<MvFUNCTIONRETURN VALUE = "Page">
	</MvIF>
</MvFUNCTION>

<MvINCLUDE FILE = "json/mivascript.mv">
