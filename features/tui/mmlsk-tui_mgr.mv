<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2025 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-TUI-MGR-
| Next Error Code: 119   
|
</MvCOMMENT>

<MvFUNCTION NAME = "TemplateManager_Create_Item" PARAMETERS = "code, module_code" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.item:code"		VALUE = "{ l.code }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00001', 'Component module \'' $ l.module_code $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.item:mod_code"	VALUE = "{ l.module:code }">

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_Item_LowLevel( l.item, l.module ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function creates an item that references a specific module and was added specifically to enable the creation of Store Morph
| items from inside Module_Install_Store() of a currency, tax, or storeui module, but may also be used elsewhere when a full Module 
| record is available, to avoid explicitly loading the record from the database.
|
| For a complete description of the issues resolved by calling this function, see MM-1648
|
</MvCOMMENT>

<MvFUNCTION NAME = "TemplateManager_Create_Item_Module" PARAMETERS = "code, module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.item:code"		VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.item:mod_code"	VALUE = "{ l.module:code }">

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_Item_LowLevel( l.item, l.module ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Item_LowLevel" PARAMETERS = "item var, module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT TemplateManager_Increment_ReferenceCount_Transaction( l.module, 'component' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| If the module reference was installed during TemplateManager_Increment_ReferenceCount_Transaction
	| and it creates the item we are already trying to create, we should decrement the reference count
	| and return without creating the item a second time
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Item_Load_Code( l.item:code, l.null ) }">
		<MvIF EXPR = "{ NOT TemplateManager_Decrement_ReferenceCount_Transaction( l.module:id, 'component' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvCOMMENT>
	|
	| Attempt to locate a deleted item on this branch with the same code for reuse, or create a new item record
	| if none can be found.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_Branch_Reuse( l.branch_id, l.item:code, l.item ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Insert( l.item ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.itemversion"			VALUE = "">

		<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].ItemVersion_Copy_Item( l.item, l.itemversion ) }">

		<MvASSIGN NAME = "l.itemversion:user_id"	VALUE = "{ int( g.User:id ) }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemVersion_Insert( l.itemversion ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Item_Copy_ItemVersion( l.itemversion, l.item ) }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Insert( l.branch_id, l.item:id, l.itemversion:id ) OR
						NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Update_Head( l.branch_id, l.item:id, l.itemversion:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_ItemVersion( l.item:id, 0, l.itemversion:id, 'Item \'' $ l.item:code $ '\' created' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Update_Item" PARAMETERS = "item var, code, module var" STANDARDOUTPUTLEVEL = "">
	<MvTRANSACT NAME = "Merchant">

	<MvASSIGN NAME = "l.original_module_code"	VALUE = "{ l.item:mod_code }">

	<MvIF EXPR = "{ strcasecmp( l.original_module_code, l.module:code ) NE 0 }">
		<MvIF EXPR = "{ NOT TemplateManager_Increment_ReferenceCount_Transaction( l.module, 'component' ) }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.item:code"				VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.item:mod_code"			VALUE = "{ l.module:code }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Update( l.item ) }">
		<MvROLLBACK NAME = "Merchant">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.original_module_code, l.module:code ) NE 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.original_module_code, l.original_module ) }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT TemplateManager_Decrement_ReferenceCount_Transaction( l.original_module:id, 'component' ) }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMIT NAME = "Merchant">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_Item" PARAMETERS = "item var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Delete_Item_Branch( TemplateManager_Working_Branch_ID(), l.item ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_Item_Branch" PARAMETERS = "branch_id, item var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemVersion_Load_Branch_Head( l.branch_id, l.item:id, l.itemversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Insert( l.branch_id, l.item:id, 0 ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Update_Head( l.branch_id, l.item:id, 0 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_ItemVersion_Branch( l.branch_id, l.item:id, l.itemversion:id, 0, 'Item \'' $ l.item:code $ '\' deleted' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_All_Module_Items_Transaction" PARAMETERS = "mod_code" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_Item_Module_Code( l.mod_code, l.branches ) }">
		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
			<MvASSIGN NAME = "l.end_changeset" VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.end_changeset" VALUE = 1>

			<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin( 'Items linked to module \'' $ l.mod_code $ '\' deleted' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ItemList_Load_Module_Code( l.mod_code, l.items ) }">
			<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ [ g.Feature_Filename_TUI_DB ].PageList_Load_Item( l.item:id, l.pages ) }">
				<MvIF EXPR = "{ NOT TemplateManager_Page_Unassign_Item_LowLevel( l.page, l.item ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-MGR-00104', 'Assignment for Item \'' $ l.item:code $ '\' deleted for Page \'' $ l.page:code $ '\'' ) }">

				<MvIF EXPR = "{ NOT TemplateManager_Page_Update_Settings( l.page, 'Item Unassignment' ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT TemplateManager_Page_Update_IfModified( l.page ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvFOREACH>

			<MvIF EXPR = "{ NOT TemplateManager_Delete_Item( l.item ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.end_changeset }">
			<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_Item_Code" PARAMETERS = "item_code" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_Item_Code( l.item_code, l.branches ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Branch_Code( l.branch:id, l.item_code, l.item ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_Item( l.item ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Purge_Item" PARAMETERS = "item var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.managedtemplate" ARRAY = "l.managedtemplates" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplateList_Load_Branchless_Item( l.item:id, l.managedtemplates ) }">
		<MvIF EXPR = "{ NOT TemplateManager_Purge_ManagedTemplate( l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_TUI_DB ].Item_Purge( l.item ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ItemExtension" PARAMETERS = "item_code, module_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_Code( l.item_code, l.item ) 	OR
					NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.module ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ItemExtension_LowLevel( l.item, l.module ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ItemExtension_LowLevel" PARAMETERS = "item var, module var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Ignore and return success if the item extension already exists
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ItemExtension_Load_ItemModuleCode( l.item:id, l.module:code, l.null ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Create a new ItemVersion entry and duplicate all of the existing extensions into the new version, then create the new item extension
	|
	</MvCOMMENT>

	<MvTRANSACT NAME = "Merchant">

	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin( 'Module \'' $ l.module:code $ '\' registered as an extension of item \'' $ l.item:code $ '\'' ) }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Fork_Extensions( l.item ) }">
		<MvROLLBACK NAME = "Merchant">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Increment_ReferenceCount_Transaction( l.module, 'component' ) }">
		<MvROLLBACK NAME = "Merchant">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	|	If the module reference was installed during TemplateManager_Increment_ReferenceCount_Transaction
	|	and it creates the itemextension we are already trying to create, we should decrement the reference count
	|	and return without creating the itemextension a second time
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ItemExtension_Load_ItemModuleCode( l.item:id, l.module:code, l.null ) }">
		<MvIF EXPR = "{ NOT TemplateManager_Decrement_ReferenceCount_Transaction( l.module:id, 'component' ) }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.end_changeset }">
			<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
				<MvROLLBACK NAME = "Merchant">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMIT NAME = "Merchant">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.itemextension:item_id"		VALUE = "{ l.item:id }">
	<MvASSIGN NAME = "l.itemextension:version_id"	VALUE = "{ l.item:version_id }">
	<MvASSIGN NAME = "l.itemextension:mod_code"		VALUE = "{ l.module:code }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemExtension_Insert( l.itemextension ) }">
		<MvIF EXPR = "{ NOT TemplateManager_Decrement_ReferenceCount_Transaction( l.module:id, 'component' ) }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMIT NAME = "Merchant">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMIT NAME = "Merchant">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_ItemExtension" PARAMETERS = "itemextension var" STANDARDOUTPUTLEVEL = "">
	<MvTRANSACT NAME = "Merchant">

	<MvCOMMENT>
	|
	| Create a new ItemVersion entry and duplicate all of the existing extensions into the new version, then delete the item extension
	|
	</MvCOMMENT>

	<MvTRANSACT NAME = "Merchant">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_ID( l.itemextension:item_id, l.item ) }">
		<MvROLLBACK NAME = "Merchant">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin( 'Module \'' $ l.itemextension:mod_code $ '\' removed as an extension of item \'' $ l.item:code $ '\'' ) }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Fork_Extensions( l.item ) }">
		<MvROLLBACK NAME = "Merchant">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.itemextension:mod_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT TemplateManager_Decrement_ReferenceCount_Transaction( l.module:id, 'component' ) }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemExtension_Delete( l.itemextension ) }">
		<MvROLLBACK NAME = "Merchant">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
			<MvROLLBACK NAME = "Merchant">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMIT NAME = "Merchant">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Page" PARAMETERS = "code, name, ui_id, template, settings var, page var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.page:admin"		VALUE = 0>
	<MvASSIGN NAME = "l.page:layout"	VALUE = 0>
	<MvASSIGN NAME = "l.page:fragment"	VALUE = 0>
	<MvASSIGN NAME = "l.page:secure"	VALUE = 0>
	<MvASSIGN NAME = "l.page:public"	VALUE = 0>
	<MvASSIGN NAME = "l.page:code"		VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.page:name"		VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.page:ui_id"		VALUE = "{ l.ui_id }">
	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ l.settings }">

	<MvIF EXPR = "{ file_read( g.Module_Root $ 'templates/' $ l.template, 'script', l.template_data ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00025', 'Unable to read \'' $ g.Module_Root $ 'templates/' $ l.template $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Create_Page_LowLevel( l.page, l.template_data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Page_New( l.page ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Page_Secure" PARAMETERS = "code, name, ui_id, template, settings var, page var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.page:admin"		VALUE = 0>
	<MvASSIGN NAME = "l.page:layout"	VALUE = 0>
	<MvASSIGN NAME = "l.page:fragment"	VALUE = 0>
	<MvASSIGN NAME = "l.page:secure"	VALUE = 1>
	<MvASSIGN NAME = "l.page:public"	VALUE = 0>
	<MvASSIGN NAME = "l.page:code"		VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.page:name"		VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.page:ui_id"		VALUE = "{ l.ui_id }">
	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ l.settings }">

	<MvIF EXPR = "{ file_read( g.Module_Root $ 'templates/' $ l.template, 'script', l.template_data ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00028', 'Unable to read \'' $ g.Module_Root $ 'templates/' $ l.template $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Create_Page_LowLevel( l.page, l.template_data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Page_New( l.page ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Page_Admin" PARAMETERS = "code, name, template, settings var, page var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.page:admin"		VALUE = 1>
	<MvASSIGN NAME = "l.page:layout"	VALUE = 0>
	<MvASSIGN NAME = "l.page:fragment"	VALUE = 0>
	<MvASSIGN NAME = "l.page:secure"	VALUE = 1>
	<MvASSIGN NAME = "l.page:public"	VALUE = 0>
	<MvASSIGN NAME = "l.page:code"		VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.page:name"		VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.page:ui_id"		VALUE = 0>
	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ l.settings }">

	<MvIF EXPR = "{ file_read( g.Module_Root $ 'templates/' $ l.template, 'script', l.template_data ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00026', 'Unable to read \'' $ g.Module_Root $ 'templates/' $ l.template $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_Page_LowLevel( l.page, l.template_data ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Page_AdminUI" PARAMETERS = "code, name, ui_id, template, settings var, page var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.page:admin"		VALUE = 1>
	<MvASSIGN NAME = "l.page:layout"	VALUE = 0>
	<MvASSIGN NAME = "l.page:fragment"	VALUE = 0>
	<MvASSIGN NAME = "l.page:secure"	VALUE = 1>
	<MvASSIGN NAME = "l.page:public"	VALUE = 0>
	<MvASSIGN NAME = "l.page:code"		VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.page:name"		VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.page:ui_id"		VALUE = "{ l.ui_id }">
	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ l.settings }">

	<MvIF EXPR = "{ file_read( g.Module_Root $ 'templates/' $ l.template, 'script', l.template_data ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00027', 'Unable to read \'' $ g.Module_Root $ 'templates/' $ l.template $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_Page_LowLevel( l.page, l.template_data ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Page_Layout" PARAMETERS = "code, name, ui_id, template, settings var, page var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.page:admin"		VALUE = 0>
	<MvASSIGN NAME = "l.page:layout"	VALUE = 1>
	<MvASSIGN NAME = "l.page:fragment"	VALUE = 0>
	<MvASSIGN NAME = "l.page:secure"	VALUE = 0>
	<MvASSIGN NAME = "l.page:public"	VALUE = 0>
	<MvASSIGN NAME = "l.page:code"		VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.page:name"		VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.page:ui_id"		VALUE = "{ l.ui_id }">
	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ l.settings }">

	<MvIF EXPR = "{ file_read( g.Module_Root $ 'templates/' $ l.template, 'script', l.template_data ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00085', 'Unable to read \'' $ g.Module_Root $ 'templates/' $ l.template $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Create_Page_LowLevel( l.page, l.template_data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Page_Fragment" PARAMETERS = "code, name, ui_id, template, settings var, page var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.page:admin"		VALUE = 0>
	<MvASSIGN NAME = "l.page:layout"	VALUE = 0>
	<MvASSIGN NAME = "l.page:fragment"	VALUE = 1>
	<MvASSIGN NAME = "l.page:secure"	VALUE = 0>
	<MvASSIGN NAME = "l.page:public"	VALUE = 0>
	<MvASSIGN NAME = "l.page:code"		VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.page:name"		VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.page:ui_id"		VALUE = "{ l.ui_id }">
	<MvASSIGN NAME = "l.page:settings"	VALUE = "{ l.settings }">

	<MvIF EXPR = "{ file_read( g.Module_Root $ 'templates/' $ l.template, 'script', l.template_data ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00113', 'Unable to read \'' $ g.Module_Root $ 'templates/' $ l.template $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Create_Page_LowLevel( l.page, l.template_data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Page_LowLevel" PARAMETERS = "page var, template_data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.branch_id"				VALUE = "{ TemplateManager_Working_Branch_ID() }">
	<MvASSIGN NAME = "l.page_reused"			VALUE = 0>

	<MvIF EXPR = "{ ISNULL l.page:admin }">
		<MvASSIGN NAME = "l.page:admin"			VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.page:layout }">
		<MvASSIGN NAME = "l.page:layout"		VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.page:fragment }">
		<MvASSIGN NAME = "l.page:fragment"		VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, 'Page \'' $ l.page:code $ '\' created' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Attempt to locate a deleted page on this branch with the same code for reuse, or create a new page record and associated template
	| if none can be found.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Load_Branch_Reuse( l.branch_id, l.page, l.page ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.page:templ_id, l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.page_reused"		VALUE = 1>
		<MvASSIGN NAME = "l.template_filename"	VALUE = "{ l.managedtemplate:filename }">

		<MvIF EXPR = "{ NOT TemplateManager_Create_ManagedTemplateVersion( l.managedtemplate, 'Original', l.template_data, l.page:settings, l.null ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.template_filename"	VALUE = "{ [ g.Feature_Filename_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( tolower( l.page:code ) $ '.mvc' ) }">

		<MvIF EXPR = "{ l.page:admin }">	<MvASSIGN NAME = "l.page:templ_id"	VALUE = "{ TemplateManager_Create_Unsynced_ManagedTemplate( l.template_data, l.page:settings, l.template_filename ) }">
		<MvELSE>							<MvASSIGN NAME = "l.page:templ_id"	VALUE = "{ TemplateManager_Create_ManagedTemplate( l.template_data, l.page:settings, l.template_filename ) }">
		</MvIF>

		<MvIF EXPR = "{ l.page:templ_id EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Insert_LowLevel( l.page ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Insert initial PageVersion and register on the current branch
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.pageversion"			VALUE = "">

	<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].PageVersion_Copy_Page( l.page, l.pageversion ) }">

	<MvASSIGN NAME = "l.pageversion:user_id"	VALUE = "{ int( g.User:id ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageVersion_Insert( l.pageversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Copy_PageVersion( l.pageversion, l.page ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Insert( l.branch_id, l.page:id, l.pageversion:id ) OR
					NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Update_Head( l.branch_id, l.page:id, l.pageversion:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_PageVersion( l.page:id, 0, l.pageversion:id, l.pageversion:xref_id, 'Page \'' $ l.page:code $ '\' created' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT l.page_reused }">
		<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_page', l.modules ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_Page_Insert( l.module, l.page ) }">
		</MvFOREACH>
	</MvIF>

	<MvCOMMENT>
	|
	| Items are always reassigned, even if reusing an existing page_id.
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items" COUNT = "{ [ g.Store_Template_Path $ l.template_filename ].Template_Items( l.items ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ TemplateManager_Page_Assign_Item( l.page, l.item ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Update the page in case any of the components changed their settings
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Replace_Settings( l.page ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_Page" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, 'Page \'' $ l.page:code $ '\' deleted' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Feature_TUI_DB ].ItemModuleList_Load_Page_Active( l.page:id, l.modules ) }">
		<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.page">
			<MvMEMBER NAME = "settings">
			<MvMEMBER NAME = "{ l.module:item_code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].ComponentModule_Page_Unassign( l.module, l.page, l.module:item_code, l.item_settings ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Insert( l.branch_id, l.page:id, 0 ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Update_Head( l.branch_id, l.page:id, 0 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_PageVersion_Branch( l.branch_id, l.page:id, l.page:version_id, 0, 0, 'Page \'' $ l.page:code $ '\' deleted' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Delete_ManagedTemplate_Branch( l.branch_id, l.page:templ_id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Page_Delete( l.page ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_Page_Code" PARAMETERS = "page_code" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_Page_Code( l.page_code, l.branches ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Branch_Code( l.branch:id, l.page_code, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_Page( l.page ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_Page_Code_Admin_UI" PARAMETERS = "page_code, ui_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_Page_Code_Admin_UI( l.page_code, l.ui_id, l.branches ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Branch_Code( l.branch:id, l.page_code, l.page ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_Page( l.page ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Purge_Page" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Feature_TUI_DB ].ItemModuleList_Load_Page_Active( l.page:id, l.modules ) }">
		<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.page">
			<MvMEMBER NAME = "settings">
			<MvMEMBER NAME = "{ l.module:item_code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].ComponentModule_Page_Unassign( l.module, l.page, l.module:item_code, l.item_settings ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.page:templ_id, l.managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT TemplateManager_Purge_ManagedTemplate( l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.managedtemplate" ARRAY = "l.managedtemplates" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplateList_Load_Branchless_Parent( l.page:templ_id, l.managedtemplates ) }">
		<MvIF EXPR = "{ NOT TemplateManager_Purge_ManagedTemplate( l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_TUI_DB ].Page_Purge( l.page ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ManagedTemplate_Version_Select" PARAMETERS = "templ_id, name, current_id" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<select name="{ encodeentities( l.name ) }">
	<MvFOREACH ITERATOR = "l.version" ARRAY = "l.versions" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersionList_Load_Template( l.templ_id, l.versions ) }">
		<MvIF EXPR = "{ NOT ISNULL l.version:notes }">	<MvASSIGN NAME = "l.text" VALUE = "{ l.version:notes }">
		<MvELSE>										<MvASSIGN NAME = "l.text" VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.version:dtstamp, s.miva_language ) $ ' ' $ [ g.Module_Library_Utilities ].Format_Time( l.version:dtstamp, s.miva_language ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption_Encode( l.version:id, l.current_id, l.text ) }">
	</MvFOREACH>
	</select>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Validate_Compilation" PARAMETERS = "source var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.temporary_filename"		VALUE = "{ l.template_dir $ MakeSessionID() $ '.mvc' }">

	<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.source, l.null, l.temporary_filename, l.compile_error ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00063', l.compile_error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"					VALUE = "{ sdelete( l.temporary_filename ) }">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedTemplate" PARAMETERS = "source var, settings var, output_file" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.managedtemplate:prop_id"	VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:sync"		VALUE = 1>
	<MvASSIGN NAME = "l.managedtemplate:current_id"	VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:filename"	VALUE = "{ l.output_file }">

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedTemplate_LowLevel( l.managedtemplate, l.source, l.settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedTemplate_NoDuplicates" PARAMETERS = "source var, settings var, output_file var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.managedtemplate:prop_id"	VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:sync"		VALUE = 1>
	<MvASSIGN NAME = "l.managedtemplate:current_id"	VALUE = 0>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedTemplate_LowLevel_NoDuplicates( l.managedtemplate, l.source, l.settings, l.output_file ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Unsynced_ManagedTemplate" PARAMETERS = "source var, settings var, output_file" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.managedtemplate:prop_id"	VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:sync"		VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:current_id"	VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:filename"	VALUE = "{ l.output_file }">

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedTemplate_LowLevel( l.managedtemplate, l.source, l.settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Unsynced_ManagedTemplate_NoDuplicates" PARAMETERS = "source var, settings var, output_file var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.managedtemplate:prop_id"	VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:sync"		VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:current_id"	VALUE = 0>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedTemplate_LowLevel_NoDuplicates( l.managedtemplate, l.source, l.settings, l.output_file ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedTemplate_LowLevel" PARAMETERS = "managedtemplate var, source var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT sexists( g.Store_Template_Path ) }">
		<MvIF EXPR = "{ NOT smkdir( g.Store_Template_Path ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00002', 'Unable to create directory \'' $ g.Store_Template_Path $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.managedtemplate:parent_id }">	<MvASSIGN NAME = "l.managedtemplate:parent_id"	VALUE = "{ int( g.Session:cache:page:templ_id ) }">	</MvIF>
	<MvIF EXPR = "{ ISNULL l.managedtemplate:item_id }">	<MvASSIGN NAME = "l.managedtemplate:item_id"	VALUE = "{ int( g.Session:cache:item:id ) }">		</MvIF>

	<MvCOMMENT>
	|
	| Attempt to locate a deleted template on this branch with the same identifiers for reuse, or create a new template record
	| if none can be found.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.filename" VALUE = "{ l.managedtemplate:filename }">

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Reuse( l.filename, l.managedtemplate:parent_id, l.managedtemplate:item_id, l.managedtemplate:prop_id, l.managedtemplate:sync, l.managedtemplate ) }">
		<MvIF EXPR = "{ strcmp( l.filename, l.managedtemplate:filename ) NE 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00118', 'A managed template with the same filename but a differing case already exists' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Insert( l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Create_Immutable_ManagedTemplateVersion( l.managedtemplate, 'Original', l.source, l.settings, l.null ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Delete_ID( l.managedtemplate:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.managedtemplate:id }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedTemplate_LowLevel_NoDuplicates" PARAMETERS = "managedtemplate var, source var, settings var, output_file var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT sexists( g.Store_Template_Path ) }">
		<MvIF EXPR = "{ NOT smkdir( g.Store_Template_Path ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00103', 'Unable to create directory \'' $ g.Store_Template_Path $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.managedtemplate:parent_id }">	<MvASSIGN NAME = "l.managedtemplate:parent_id"	VALUE = "{ int( g.Session:cache:page:templ_id ) }">	</MvIF>
	<MvIF EXPR = "{ ISNULL l.managedtemplate:item_id }">	<MvASSIGN NAME = "l.managedtemplate:item_id"	VALUE = "{ int( g.Session:cache:item:id ) }">		</MvIF>

	<MvCOMMENT>
	|
	| Attempt to locate a deleted template on this branch with the same identifiers for reuse, or create a new template record
	| if none can be found.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.managedtemplate_reused" VALUE = 0>

	<MvWHILE EXPR = "{ 1 }">
		<MvIF EXPR = "{ len_var( l.output_file ) GT 254 }">
			<MvASSIGN NAME = "l.output_file" VALUE = "{ crypto_md5( l.output_file ) $ '.mvc' }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Reuse( l.output_file, l.managedtemplate:parent_id, l.managedtemplate:item_id, l.managedtemplate:prop_id, l.managedtemplate:sync, l.managedtemplate ) }">
			<MvIF EXPR = "{ strcmp( l.output_file, l.managedtemplate:filename ) EQ 0 }">
				<MvASSIGN NAME = "l.managedtemplate_reused" VALUE = 1>
				<MvWHILESTOP>
			</MvIF>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Branchless_Filename( l.output_file, l.managedtemplate ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvWHILESTOP>
		</MvIF>

		<MvASSIGN NAME = "l.output_file" VALUE = "{ l.managedtemplate:id $ '_' $ l.output_file }">
	</MvWHILE>

	<MvASSIGN NAME = "l.managedtemplate:filename" VALUE = "{ l.output_file }">

	<MvIF EXPR = "{ NOT l.managedtemplate_reused }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Insert( l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Create_Immutable_ManagedTemplateVersion( l.managedtemplate, 'Original', l.source, l.settings, l.null ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Delete_ID( l.managedtemplate:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.managedtemplate:id }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_ManagedTemplate_Filename" PARAMETERS = "filename" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Delete_ManagedTemplate_Filename_Branch( TemplateManager_Working_Branch_ID(), l.filename ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_ManagedTemplate_Filename_Branch" PARAMETERS = "branch_id, filename" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Branch_Filename( l.branch_id, l.filename, l.managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Delete_ManagedTemplate_LowLevel( l.branch_id, l.managedtemplate ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_ManagedTemplate" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Delete_ManagedTemplate_Branch( TemplateManager_Working_Branch_ID(), l.id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_ManagedTemplate_Branch" PARAMETERS = "branch_id, id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.id, l.managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Delete_ManagedTemplate_LowLevel( l.branch_id, l.managedtemplate ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_ManagedTemplate_LowLevel" PARAMETERS = "branch_id, managedtemplate var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_Branch_Head( l.branch_id, l.managedtemplate:id, l.managedtemplateversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00099', 'Managed template version not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch_id, l.managedtemplate:id, 0 ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch_id, l.managedtemplate:id, 0 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_ManagedTemplateVersion_Branch( l.branch_id, l.managedtemplate:id, l.managedtemplateversion:id, 0, 'Managed Template Deleted' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.branch_id EQ TemplateManager_Working_Branch_ID() }">									<MvASSIGN NAME = "l.branch_tmpldir" VALUE = "{ g.Store:branch:tmpldir }">
	<MvELSEIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Branch_Load_ID_Cached( l.branch_id, l.branch ) }">	<MvASSIGN NAME = "l.branch_tmpldir" VALUE = "{ l.branch:tmpldir }">
	<MvELSE>																								<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch_tmpldir $ l.managedtemplate:filename ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_ManagedTemplate_Filename" PARAMETERS = "filename" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_ManagedTemplate_Filename( l.filename, l.branches ) }">
		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_ManagedTemplate_Filename( l.filename ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_All_ManagedTemplate_Files" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.base_dir"		VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' }">
	<MvASSIGN NAME = "l.branch_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_All( l.branches ) }">

	<MvFOREACH ITERATOR = "l.managedtemplate" ARRAY = "l.managedtemplates" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplateList_Load_All( l.managedtemplates ) }">
		<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ l.branch_count }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ sdelete( l.base_dir $ l.branch:tmpldir $ l.managedtemplate:filename ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| The lowest ID branch will always have an empty tmpldir, so skip it and manually delete the primary directory after deleting all other branches.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.branch_count GT 1 }">
		<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" FIRST = 2 LAST = "{ l.branch_count }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ sdelete( l.base_dir $ l.branch:tmpldir ) }">
		</MvFOREACH>
	</MvIF>

	<MvASSIGN NAME = "l.null"			VALUE = "{ sdelete( l.base_dir ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Purge_ManagedTemplate" PARAMETERS = "managedtemplate var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Purge( l.managedtemplate ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Purge_ManagedTemplate_Filename" PARAMETERS = "filename" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Purge_Filename( l.filename ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Replace_ManagedTemplateVersion" PARAMETERS = "managedtemplate var, version var, source, compile_error var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.source, l.null, g.Store_Template_Path $ l.managedtemplate:filename, l.compile_error ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00004', 'Error compiling template: ' $ l.compile_error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.version:dtstamp"	VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.version:source"		VALUE = "{ l.source }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Update( l.version ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Revert_ManagedTemplateVersion" PARAMETERS = "managedtemplate var, version var, compile_error var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Some legacy code sets :current_id prior to calling this function.  This is both unnecessary, because we do that for them, and prevents
	| us from properly recording the original version in the change, so we reload the record if it appears that the caller has done so.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.managedtemplate:current_id EQ l.version:id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.managedtemplate:id, l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| If, after reloading, current_id already points to the version we want it to, we do not have to do anything.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.managedtemplate:current_id EQ l.version:id }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.version:source, l.null, g.Store_Template_Path $ l.managedtemplate:filename, l.compile_error ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00005', 'Error compiling template: ' $ l.compile_error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.branch_id"					VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvCOMMENT>
	|
	| Ensure that this version exists on the current branch
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch_id, l.managedtemplate:id, l.version:id ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch_id, l.managedtemplate:id, l.version:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_ManagedTemplateVersion( l.managedtemplate:id, l.managedtemplate:current_id, l.version:id, l.version:notes ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.managedtemplate:current_id"	VALUE = "{ l.version:id }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Immutable_ManagedTemplateVersion" PARAMETERS = "managedtemplate var, notes, source var, settings var, compile_error var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.version:templ_id"		VALUE = "{ l.managedtemplate:id }">
	<MvASSIGN NAME = "l.version:user_id"		VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.version:immutable"		VALUE = 1>
	<MvASSIGN NAME = "l.version:dtstamp"		VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.version:source"			VALUE = "{ l.source }">
	<MvASSIGN NAME = "l.version:settings"		VALUE = "{ l.settings }">

	<MvIF EXPR = "{ NOT ISNULL l.notes }">
		<MvASSIGN NAME = "l.version:notes"		VALUE = "{ substring_var( l.notes, 1, 100 ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ TemplateManager_Get_WorkingBranchStack_Current( l.stackentry ) }">

		<MvASSIGN NAME = "l.version:notes"		VALUE = "{ substring_var( l.stackentry:changeset:notes, 1, 100 ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedTemplateVersion_LowLevel( l.managedtemplate, l.version, l.compile_error ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedTemplateVersion" PARAMETERS = "managedtemplate var, notes, source var, settings var, compile_error var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.version:templ_id"		VALUE = "{ l.managedtemplate:id }">
	<MvASSIGN NAME = "l.version:user_id"		VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.version:immutable"		VALUE = 0>
	<MvASSIGN NAME = "l.version:dtstamp"		VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.version:source"			VALUE = "{ l.source }">
	<MvASSIGN NAME = "l.version:settings"		VALUE = "{ l.settings }">

	<MvIF EXPR = "{ NOT ISNULL l.notes }">
		<MvASSIGN NAME = "l.version:notes"		VALUE = "{ substring_var( l.notes, 1, 100 ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ TemplateManager_Get_WorkingBranchStack_Current( l.stackentry ) }">

		<MvASSIGN NAME = "l.version:notes"		VALUE = "{ substring_var( l.stackentry:changeset:notes, 1, 100 ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedTemplateVersion_LowLevel( l.managedtemplate, l.version, l.compile_error ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedTemplateVersion_LowLevel" PARAMETERS = "managedtemplate var, version var, compile_error var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.base_dir"						VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' }">
	<MvASSIGN NAME = "l.branch_id"						VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.version:source, l.null, g.Store_Template_Path $ l.managedtemplate:filename, l.compile_error ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00006', 'Error compiling template: ' $ l.compile_error ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Insert( l.version ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch_id, l.managedtemplate:id, l.version:id ) OR
					NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch_id, l.managedtemplate:id, l.version:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.managedtemplate:current_id }">	<MvASSIGN NAME = "l.old_id"	VALUE = 0>
	<MvELSE>												<MvASSIGN NAME = "l.old_id"	VALUE = "{ l.managedtemplate:current_id }">
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_ManagedTemplateVersion( l.managedtemplate:id, l.old_id, l.version:id, l.version:notes ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.managedtemplate:current_id"		VALUE = "{ l.version:id }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_CreateIfModified_ManagedTemplateVersion" PARAMETERS = "managedtemplate var, notes, source var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.managedtemplate:id, l.templateversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00072', 'Unable to load template version' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_CreateIfModified_ManagedTemplateVersion_LowLevel( l.managedtemplate, l.templateversion, l.notes, l.source, l.settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_CreateIfModified_ManagedTemplateVersion_LowLevel" PARAMETERS = "managedtemplate var, templateversion var, notes, source var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( crypto_md5( l.source ) NE crypto_md5( l.templateversion:source ) ) OR
					( crypto_md5( miva_array_serialize( l.settings ) ) NE crypto_md5( miva_array_serialize( l.templateversion:settings ) ) ) }">
		<MvIF EXPR = "{ NOT TemplateManager_Create_ManagedTemplateVersion( l.managedtemplate, l.notes, l.source, l.settings, l.compile_error ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-MGR-00073', 'Template \'' $ l.managedtemplate:filename $ '\' updated' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Assign_Item" PARAMETERS = "page var, item_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_Code( l.item_code, l.item ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00007', 'Item \'' $ l.item_code $ '\' not found' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Page_Assign_Item_LowLevel( l.page, l.item ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Assign_Item_LowLevel" PARAMETERS = "page var, item var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pageversion"			VALUE = "">
	<MvASSIGN NAME = "l.branch_id"				VALUE = "{ TemplateManager_Working_Branch_ID() }">
	
	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].PageXItem_Load_CrossReference( l.page:id, l.page:xref_id, l.item:id, l.pagexitem ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.item:mod_code, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00008', 'Component module \'' $ l.item:mod_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.module:active }">														<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00114', 'Module \'' $ l.module:code $ '\' is deactivated' ) }">
	<MvELSEIF EXPR = "{ NOT l.module:feature_hash:component }">									<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00115', 'Module \'' $ l.module:code $ '\' does not provide feature \'component\'' ) }">
	<MvELSEIF EXPR = "{ l.page:fragment AND NOT l.module:feature_hash:component_frag }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00116', 'Module \'' $ l.module:code $ '\' does not provide feature \'component_frag\'' ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module( l.module:id ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00117', 'Module \'' $ l.module:code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].PageVersion_Copy_Page( l.page, l.pageversion ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageVersion_Fork_CrossReferences( l.branch_id, l.pageversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Copy_PageVersion( l.pageversion, l.page ) }">

	<MvASSIGN NAME = "g.Session:cache:page"		VALUE = "{ l.page }">
	<MvASSIGN NAME = "g.Session:cache:item"		VALUE = "{ l.item }">

	<MvIF EXPR = "{ miva_member_exists( l.page:settings, l.item:code ) }">
		<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.page">
			<MvMEMBER NAME = "settings">
			<MvMEMBER NAME = "{ l.item:code }">
		</MvREFERENCEARRAY>
	<MvELSE>
		<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.page">
			<MvMEMBER NAME = "settings">
			<MvMEMBER NAME = "{ l.item:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.module:api_ver GE 10.00 }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Defaults( l.module, l.item:code, l.item_settings ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Defaults( l.module, l.item_settings ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageXItem_Insert_LowLevel( l.page:id, l.pageversion:xref_id, l.item:id ) }">
		<MvASSIGN NAME = "g.Session:cache:page"	VALUE = "">
		<MvASSIGN NAME = "g.Session:cache:item"	VALUE = "">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.module_result"			VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Page_Assign( l.module, l.page, l.item:code, l.item_settings ) }">

	<MvASSIGN NAME = "g.Session:cache:page"		VALUE = "">
	<MvASSIGN NAME = "g.Session:cache:item"		VALUE = "">

	<MvIF EXPR = "{ NOT l.module_result }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageXItem_Delete_LowLevel( l.page:id, l.pageversion:xref_id, l.item:id ) }">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Unassign_Item" PARAMETERS = "page var, item_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_Code( l.item_code, l.item ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Page_Unassign_Item_LowLevel( l.page, l.item ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Unassign_Item_LowLevel" PARAMETERS = "page var, item var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pageversion"			VALUE = "">
	<MvASSIGN NAME = "l.branch_id"				VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageXItem_Load_CrossReference( l.page:id, l.page:xref_id, l.item:id, l.pagexitem ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.item:mod_code, l.module ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00010', 'Component module \'' $ l.item:mod_code $ '\' not found' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].PageVersion_Copy_Page( l.page, l.pageversion ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageVersion_Fork_CrossReferences( l.branch_id, l.pageversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Copy_PageVersion( l.pageversion, l.page ) }">

	<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.page">
		<MvMEMBER NAME = "settings">
		<MvMEMBER NAME = "{ l.item:code }">
	</MvREFERENCEARRAY>

	<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.module_ok" VALUE = "{ ComponentModule_Page_Unassign( l.module, l.page, l.item:code, l.item_settings ) }">
	<MvIF EXPR = "{ NOT l.module_ok }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageXItem_Delete_LowLevel( l.page:id, l.pageversion:xref_id, l.item:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Update_IfModified" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageVersion_Load_Page_Current( l.page:id, l.pageversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( l.page:admin NE l.pageversion:admin )					OR
					( l.page:layout NE l.pageversion:layout	)				OR
					( l.page:fragment NE l.pageversion:fragment	)			OR
					( l.page:secure NE l.pageversion:secure	)				OR
					( l.page:public NE l.pageversion:public	)				OR
					( strcmp( l.page:code, l.pageversion:code ) NE 0 )		OR
					( strcmp( l.page:name, l.pageversion:name ) NE 0 )		OR
					( strcmp( l.page:title, l.pageversion:title ) NE 0 )	OR
					( l.page:ui_id NE l.pageversion:ui_id )					OR
					( strcmp( l.page:cache, l.pageversion:cache ) NE 0 )	OR
					( strcmp( miva_array_serialize( l.page:cacheset ), miva_array_serialize( l.pageversion:cacheset ) ) NE 0 ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Update_LowLevel( l.page ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Update_Settings" PARAMETERS = "page var, notes" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.page:templ_id, l.managedtemplateversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.existing_settings"	VALUE = "{ miva_array_serialize( l.managedtemplateversion:settings ) }">
	<MvASSIGN NAME = "l.updated_settings"	VALUE = "{ miva_array_serialize( l.page:settings ) }">

	<MvIF EXPR = "{ crypto_md5( l.existing_settings ) EQ crypto_md5( l.updated_settings ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Insert a new version with the previous source but the new settings
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.old_version_id"						VALUE = "{ l.managedtemplateversion:id }">

	<MvASSIGN NAME = "l.managedtemplateversion:immutable"	VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplateversion:user_id"		VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.managedtemplateversion:dtstamp"		VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.managedtemplateversion:notes"		VALUE = "{ substring_var( l.notes, 1, 100 ) }">
	<MvASSIGN NAME = "l.managedtemplateversion:settings"	VALUE = "{ l.page:settings }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Insert( l.managedtemplateversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.branch_id"			VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch_id, l.managedtemplateversion:templ_id, l.managedtemplateversion:id ) OR
					NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch_id, l.managedtemplateversion:templ_id, l.managedtemplateversion:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Record_ManagedTemplateVersion( l.page:templ_id, l.old_version_id, l.managedtemplateversion:id, l.notes ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Update_Global_Settings" PARAMETERS = "page var, notes" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| With branch-local page/item assignment, it is no longer necessary to update settings on other branches.  Settings on the current
	| branch are updated for backwards compatibility.
	|
	</MvCOMMENT>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Page_Update_Settings( l.page, l.notes ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Increment_ReferenceCount_Transaction" PARAMETERS = "module var, feature" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| The 'component' feature does not have its refcount tracked (MM-13168) any longer. When l.feature
	| is 'component', we will no longer increment the refcount if the module is already in the sNN_StoreModules
	| table, and if it is not, we will insert with a refcount of 0. All other features will be inserted and
	| have their refcounts tracked normally.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].StoreModule_Load( l.module:id, l.feature, l.storemodule ) }">
		<MvIF EXPR = "{ l.feature EQ 'component' }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Increment_ReferenceCount( l.module:id, l.feature ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvCOMMENT>
		|
		| Make sure the module implements the specified feature
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT l.module:feature_count }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features( l.module ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.has_feature" VARIABLE = "l.module:feature_hash">
			<MvMEMBER NAME = "{ l.feature }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT l.has_feature }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00022', 'Module \'' $ l.module:name $ '\' does not implement the ' $ l.feature $ ' feature.' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Insert_Feature_Transaction( l.module, l.feature, 0 ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Decrement_ReferenceCount_Transaction" PARAMETERS = "module_id, feature" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.feature EQ 'component' }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Decrement_ReferenceCount( l.module_id, l.feature ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Reset_Exception" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.TemplateManager_Exception"		VALUE = 0>
	<MvASSIGN NAME = "g.TemplateManager_Exception_Code"	VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Throw_Exception" PARAMETERS = "code" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.TemplateManager_Exception"		VALUE = 1>
	<MvASSIGN NAME = "g.TemplateManager_Exception_Code"	VALUE = "{ l.code }">

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Page" PARAMETERS = "code" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Reset_Exception() }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code_Cached( l.code, l.page )	OR
					l.page:admin																OR
					l.page:layout																OR
					l.page:fragment }">
		<MvASSIGN NAME = "l.null" VALUE = "{ TemplateManager_Throw_Exception( 'page_not_found' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00011', 'Unknown page \'' $ l.code $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Render_Page_LowLevel( l.code, l.page ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Page_Admin" PARAMETERS = "code" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Reset_Exception() }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code_Cached( l.code, l.page ) OR
					NOT l.page:admin }">
		<MvASSIGN NAME = "l.null" VALUE = "{ TemplateManager_Throw_Exception( 'page_not_found' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00024', 'Unknown page \'' $ l.code $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Render_Page_LowLevel( l.code, l.page ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Page_LowLevel" PARAMETERS = "code, page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.page:templ_id, l.template ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.page:settings:page:id"				VALUE = "{ l.page:id }">
	<MvASSIGN NAME = "l.page:settings:page:templ_id"		VALUE = "{ l.page:templ_id }">
	<MvASSIGN NAME = "l.page:settings:page:version_id"		VALUE = "{ l.page:version_id }">
	<MvASSIGN NAME = "l.page:settings:page:admin"			VALUE = "{ l.page:admin }">
	<MvASSIGN NAME = "l.page:settings:page:code"			VALUE = "{ l.page:code }">
	<MvASSIGN NAME = "l.page:settings:page:name"			VALUE = "{ l.page:name }">
	<MvASSIGN NAME = "l.page:settings:page:title"			VALUE = "{ l.page:title }">
	<MvASSIGN NAME = "l.page:settings:page:xref_id"			VALUE = "{ l.page:xref_id }">
	<MvASSIGN NAME = "l.page:settings:page:user_id"			VALUE = "{ l.page:user_id }">
	<MvASSIGN NAME = "l.page:settings:page:layout"			VALUE = "{ l.page:layout }">
	<MvASSIGN NAME = "l.page:settings:page:fragment"		VALUE = "{ l.page:fragment }">
	<MvASSIGN NAME = "l.page:settings:page:secure"			VALUE = "{ l.page:secure }">
	<MvASSIGN NAME = "l.page:settings:page:public"			VALUE = "{ l.page:public }">
	<MvASSIGN NAME = "l.page:settings:page:ui_id"			VALUE = "{ l.page:ui_id }">
	<MvASSIGN NAME = "l.page:settings:page:cache"			VALUE = "{ l.page:cache }">
	<MvASSIGN NAME = "l.page:settings:page:cacheset"		VALUE = "{ l.page:cacheset }">
	<MvASSIGN NAME = "l.page:settings:uridata"				VALUE = "">

	<MvEVAL EXPR = "{ miva_struct_member_callback( l.page:settings:uridata, 'TemplateManager_Render_Page_URIData_Callback', l.page:settings ) }">

	<MvCOMMENT>
	|
	| Load and initialize items
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.item_pos"			VALUE = 1>
	<MvASSIGN NAME = "l.item_count"			VALUE = "{ [ g.Feature_Filename_TUI_DB ].ItemModuleList_Load_Page_Render( l.page:id, l.page:settings:_mgr ) }">

	<MvIF EXPR = "{ l.item_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemExtensionModuleList_Load_Page_Render( l.page:id, l.page:settings:_mgr ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvWHILE EXPR = "{ l.item_pos LE l.item_count }">
		<MvIF EXPR = "{ NOT TemplateManager_Initialize_Item_LowLevel( l.page:settings, l.page:settings:_mgr:items[ l.item_pos ] ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ g.TemplateManager_Exception }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00023', 'Item \'' $ l.page:settings:_mgr:items[ l.item_pos ]:item_code $ '\' threw exception \'' $ g.TemplateManager_Exception_Code $ '\' during initialization' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.item_pos"	VALUE = "{ l.item_pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ ISNULL s.HTTP_X_Miva_Partial_Render }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Store_Template_Path $ l.template:filename ].Template_Render( l.page, l.page:settings ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.capture_items"									VALUE = "">
		<MvASSIGN NAME = "l.capture_item_count"								VALUE = 0>

		<MvASSIGN NAME = "g.Session:_mgr:capture:item_lookup"				VALUE = "">
		<MvASSIGN NAME = "g.Session:_mgr:capture:active_captures"			VALUE = "">
		<MvASSIGN NAME = "g.Session:_mgr:capture:active_capture_count"		VALUE = 0>
		<MvASSIGN NAME = "g.Session:_mgr:capture:ordered_captures"			VALUE = "">
		<MvASSIGN NAME = "g.Session:_mgr:capture:ordered_capture_count"		VALUE = 0>

		<MvFOREACH ITERATOR = "l.partial_render_item" ARRAY = "l.partial_render_items" COUNT = "{ miva_splitstring( s.HTTP_X_Miva_Partial_Render, ',', l.partial_render_items, 'trim, noempty' ) }">
			<MvASSIGN NAME = "l.item_code"									VALUE = "{ gettoken( l.partial_render_item, ':', 1 ) }">
			<MvASSIGN NAME = "l.param_hash"									VALUE = "{ gettoken( l.partial_render_item, ':', 2 ) }">

			<MvREFERENCEARRAY NAME = "l.capture_item" VARIABLE = "g.Session:_mgr:capture:item_lookup">
				<MvMEMBER NAME = "{ l.item_code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ISNULL l.capture_item }">
				<MvASSIGN NAME = "l.capture_item:code"						VALUE = "{ l.item_code }">
				<MvASSIGN NAME = "l.capture_item:include_all"				VALUE = 0>
				<MvASSIGN NAME = "l.capture_item:hashes"					VALUE = "">
				<MvASSIGN NAME = "l.capture_item:content"					VALUE = "">
				<MvASSIGN NAME = "l.capture_item:content_count"				VALUE = 0>
				
				<MvASSIGN NAME = "l.capture_item_count"						VALUE = "{ miva_array_insert_ref( l.capture_items, l.capture_item, -1 ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.capture_item:include_all }">
				<MvIF EXPR = "{ ISNULL l.param_hash }">
					<MvASSIGN NAME = "l.capture_item:include_all"			VALUE = 1>
					<MvASSIGN NAME = "l.capture_item:hashes"				VALUE = "">
				<MvELSE>
					<MvASSIGNARRAY NAME = "l.capture_item:hashes"			VALUE = 1>
						<MvMEMBER NAME = "{ l.param_hash }">
					</MvASSIGNARRAY>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvCAPTURE VARIABLE = "l.discard">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Store_Template_Path $ l.template:filename ].Template_Render( l.page, l.page:settings ) }">
		</MvCAPTURE>

		<MvIF EXPR = "{ s.HTTP_X_Miva_Partial_Render_Output EQ 'json' }">
			<MvASSIGN NAME = "l.null" VALUE = "{ TemplateManager_Output_Header( 'Content-Type', 'application/json; charset=utf-8' ) }">

			<MIVA STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
			{
				<MvFOREACH INDEX = "l.capture_item_pos" ITERATOR = "l.capture_item" ARRAY = "l.capture_items" COUNT = "{ l.capture_item_count }">
					<MvIF EXPR = "{ l.capture_item_pos GT 1 }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.capture_item:code ) }">":
					[
						<MvFOREACH INDEX = "l.capture_content_pos" ITERATOR = "l.capture_content" ARRAY = "l.capture_item:content" COUNT = "{ l.capture_item:content_count }">
							<MvIF EXPR = "{ l.capture_content_pos GT 1 }">
								,
							</MvIF>

							{
								"param_hash":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.capture_content:hash ) }">",
								"content":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.capture_content:render_start $ l.capture_content:render_end ) }">"
							}
						</MvFOREACH>
					]
				</MvFOREACH>
			}
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
			<MIVA STANDARDOUTPUTLEVEL = "">
		<MvELSE>
			<MvFOREACH ITERATOR = "l.capture_content" ARRAY = "g.Session:_mgr:capture:ordered_captures" COUNT = "{ g.Session:_mgr:capture:ordered_capture_count }">
				<MvEVAL EXPR = "{ l.capture_content:render_start $ l.capture_content:render_end }">
			</MvFOREACH>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Trigger logging after the page has rendered
	|
	</MvCOMMENT>
	
	<MvASSIGN NAME = "l.logmodule_pos"		VALUE = 1>
	<MvWHILE EXPR = "{ l.logmodule_pos LE g.LogModule_Count }">
		<MvDO FILE = "{ g.Module_Root $ g.LogModules[ l.logmodule_pos ]:module }" NAME = "l.module_ok" VALUE = "{ LogModule_Screen( g.LogModules[ l.logmodule_pos ], l.code ) }">
		<MvIF EXPR = "{ NOT l.module_ok }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.logmodule_pos"	VALUE = "{ l.logmodule_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Page_URIData_Callback" PARAMETERS = "uridata var, member, settings var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Delete the callback variable and recreate it as a normal variable which ensures subsequent
	| references to l.settings:uridata members do not continue to trigger this function.
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ miva_member_delete( l.settings, 'uridata' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Session_Data( l.settings:uridata ) }">
		<MvASSIGN NAME = "l.settings:uridata" VALUE = "">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.settings:uridata">
		<MvMEMBER NAME = "{ l.member }">
	</MvREFERENCEARRAY>

	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Page_Cache" PARAMETERS = "code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ TemplateManager_Page_Cached() }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ TemplateManager_Reset_Exception() }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code_Cached( l.code, l.page )	OR
					l.page:admin																OR
					l.page:layout																OR
					l.page:fragment }">
		<MvASSIGN NAME = "l.null" VALUE = "{ TemplateManager_Throw_Exception( 'page_not_found' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00081', 'Unknown page \'' $ l.code $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Render_Page_Cache_LowLevel( l.code, l.page ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Page_Cache_LowLevel" PARAMETERS = "code, page var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Use a loop construct and stop statements.  If the MvWHILE stops, the page is not
	| cached and will be rendered via TemplateManager_Render_Page_LowLevel.  Otherwise,
	| the page is rendered from the cache or executed, added to the cahce, and then
	| rendered.  This design allows the function to not call TemplateManager_Render_Page_LowLevel
	| for every instance where caching should not occur.
	|
	</MvCOMMENT>

	<MvWHILE EXPR = 1>
		<MvIF EXPR = "{ g.Store:cache_type EQ 'none' }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off store-settings' ) }">
			<MvWHILESTOP>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Cache_Page( l.page ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-settings' ) }">
			<MvWHILESTOP>
		</MvIF>

		<MvCOMMENT>
		|
		| Do not cache if previewing a template branch
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "g.BranchKey" VALUE = "{ trim( g.BranchKey ) }">

		<MvREFERENCEARRAY NAME = "l.branchkey" VARIABLE = "g.Request_Cookies">
			<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-key' }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ( NOT ISNULL g.BranchKey ) OR ( NOT ISNULL l.branchkey ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off branch-preview' ) }">
			<MvWHILESTOP>
		</MvIF>

		<MvCOMMENT>
		|
		| The cache connection should remain open the entire process
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT TemplateManager_Cache_Connect( l.conn_id ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off connection-failed' ) }">
			<MvWHILESTOP>
		</MvIF>

		<MvASSIGN NAME = "l.query_string"			VALUE = "{ s.query_string }">

		<MvIF EXPR = "{ substring_var( l.query_string, 1, 1 ) EQ '&' }">
			<MvASSIGN NAME = "l.query_string"		VALUE = "{ substring_var( l.query_string, 2, len_var( l.query_string ) - 1 ) }">
		</MvIF>

		<MvASSIGN NAME = "l.keys"					VALUE = "">
		<MvASSIGN NAME = "l.keys:request_scheme"	VALUE = "{ gettoken( s.documenturl, '://', 1 ) }">
		<MvASSIGN NAME = "l.keys:http_host"			VALUE = "{ s.http_host }">
		<MvASSIGN NAME = "l.keys:request_uri"		VALUE = "{ glosub( s.request_uri, '?' $ l.query_string, '' ) }">

		<MvCOMMENT>
		|
		| Iterate through parameters, adding values onto cache key if parameter passes all checks 
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.parameter" ARRAY = "g.Session:parameters">
			<MvASSIGN NAME = "l.parameter_value" VALUE = "{ miva_variable_value( 'g.' $ l.parameter ) }">

			<MvREFERENCEARRAY NAME = "l.page_parameter_setting" VARIABLE = "l.page:cacheset:parameter">
				<MvMEMBER NAME = "{ l.parameter }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.store_parameter_setting" VARIABLE = "g.Store:cacheset:parameter">
				<MvMEMBER NAME = "{ l.parameter }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.page_parameter_setting }">
				<MvIF EXPR = "{ l.page_parameter_setting:mode NE 'key' }">
					<MvIF EXPR = "{ l.page_parameter_setting:mode EQ 'ignore' }">
						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ l.page_parameter_setting:mode EQ 'disable' }">		
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-param' ) }">

						<MvWHILESTOP>
					<MvELSEIF EXPR = "{ l.page_parameter_setting:mode EQ 'disable_equal' }">
						<MvIF EXPR = "{ strcasecmp( l.page_parameter_setting:value, l.parameter_value ) EQ 0 }">
							<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-param' ) }">

							<MvWHILESTOP>
						</MvIF>
					<MvELSEIF EXPR = "{ l.page_parameter_setting:mode EQ 'disable_substring' }">
						<MvIF EXPR = "{ l.page_parameter_setting:value CIN l.parameter_value }">
							<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-param' ) }">

							<MvWHILESTOP>
						</MvIF>
					</MvIF>
				</MvIF>
			<MvELSEIF EXPR = "{ NOT ISNULL l.store_parameter_setting }">
				<MvIF EXPR = "{ l.store_parameter_setting:mode EQ 'ignore' }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.store_parameter_setting:mode EQ 'disable' }">	
					<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off global-param' ) }">

					<MvWHILESTOP>
				<MvELSEIF EXPR = "{ l.store_parameter_setting:mode EQ 'disable_equal' }">
					<MvIF EXPR = "{ strcasecmp( l.store_parameter_setting:value, l.parameter_value ) EQ 0 }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off global-param' ) }">

						<MvWHILESTOP>
					</MvIF>
				<MvELSEIF EXPR = "{ l.store_parameter_setting:mode EQ 'disable_substring' }">
					<MvIF EXPR = "{ l.store_parameter_setting:value CIN l.parameter_value }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off global-param' ) }">

						<MvWHILESTOP>
					</MvIF>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ ( l.parameter NE '' ) 						AND
							( l.parameter NE 'session_id' ) 			AND
							( l.parameter NE 'customer_session_id' ) 	AND
							( l.parameter NE 'checkout_session_id' ) }">
				<MvASSIGN NAME = "l.keys" MEMBER = "{ l.parameter }" VALUE = "{ l.parameter_value }">
			</MvIF> 
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Iterate through cookies, adding values onto cache key if cookie passes all checks 
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.cookie" ARRAY = "l.cookies" COUNT = "{ miva_struct_members( g.Request_Cookies, l.cookies ) }">
			<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "g.Request_Cookies">
				<MvMEMBER NAME = "{ l.cookie }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.page_cookie_setting" VARIABLE = "l.page:cacheset:cookie">
				<MvMEMBER NAME = "{ l.cookie }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.store_cookie_setting" VARIABLE = "g.Store:cacheset:cookie">
				<MvMEMBER NAME = "{ l.cookie }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.page_cookie_setting }">
				<MvIF EXPR = "{ l.page_cookie_setting:mode EQ 'ignore' }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.page_cookie_setting:mode EQ 'key' }">
					<MvASSIGN NAME = "l.keys" MEMBER = "{ l.cookie }" VALUE = "{ l.value }">
				<MvELSEIF EXPR = "{ l.page_cookie_setting:mode EQ 'disable' }">	
					<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-cookie' ) }">

					<MvWHILESTOP>
				<MvELSEIF EXPR = "{ l.page_cookie_setting:mode EQ 'disable_equal' }">
					<MvIF EXPR = "{ strcasecmp( l.page_cookie_setting:value, l.value ) EQ 0 }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-cookie' ) }">

						<MvWHILESTOP>
					</MvIF>
				<MvELSEIF EXPR = "{ l.page_cookie_setting:mode EQ 'disable_substring' }">
					<MvIF EXPR = "{ l.page_cookie_setting:value CIN l.value }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-cookie' ) }">

						<MvWHILESTOP>
					</MvIF>
				</MvIF>
			<MvELSEIF EXPR = "{ NOT ISNULL l.store_cookie_setting }">
				<MvIF EXPR = "{ l.store_cookie_setting:mode EQ 'key' }">
					<MvASSIGN NAME = "l.keys" MEMBER = "{ l.cookie }" VALUE = "{ l.value }">
				<MvELSEIF EXPR = "{ l.store_cookie_setting:mode EQ 'disable' }">
					<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off global-cookie' ) }">

					<MvWHILESTOP>
				<MvELSEIF EXPR = "{ l.store_cookie_setting:mode EQ 'disable_equal' }">
					<MvIF EXPR = "{ strcasecmp( l.store_cookie_setting:value, l.value ) EQ 0 }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off global-cookie' ) }">

						<MvWHILESTOP>
					</MvIF>
				<MvELSEIF EXPR = "{ l.store_cookie_setting:mode EQ 'disable_substring' }">
					<MvIF EXPR = "{ l.store_cookie_setting:value CIN l.value }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off global-cookie' ) }">

						<MvWHILESTOP>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Iterate through configured page request headers, adding values onto cache key if header exists and passes all checks 
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.header_name" ARRAY = "l.page_header_names" COUNT = "{ miva_struct_members( l.page:cacheset:header, l.page_header_names ) }">
			<MvASSIGN NAME = "l.header_value" VALUE = "{ miva_variable_value( 's.HTTP_' $ glosub( l.header_name, '-', '_' ) ) }">

			<MvREFERENCEARRAY NAME = "l.header_setting" VARIABLE = "l.page:cacheset:header">
				<MvMEMBER NAME = "{ l.header_name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.header_value }">
				<MvIF EXPR = "{ l.page_cookie_setting:mode EQ 'ignore' }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.header_setting:mode EQ 'key' }">
					<MvASSIGN NAME = "l.keys" MEMBER = "{ l.header_name }" VALUE = "{ l.header_value }">
				<MvELSEIF EXPR = "{ l.header_setting:mode EQ 'disable' }">
					<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-header' ) }">

					<MvWHILESTOP>
				<MvELSEIF EXPR = "{ l.header_setting:mode EQ 'disable_equal' }">
					<MvIF EXPR = "{ strcasecmp( l.header_setting:value, l.header_value ) EQ 0 }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-header' ) }">

						<MvWHILESTOP>
					</MvIF>
				<MvELSEIF EXPR = "{ l.header_setting:mode EQ 'disable_substring' }">
					<MvIF EXPR = "{ l.header_setting:value CIN l.header_value }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off page-header' ) }">

						<MvWHILESTOP>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Iterate through configured store request headers, adding values onto cache key if header exists and passes all checks 
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.header_name" ARRAY = "l.store_header_names" COUNT = "{ miva_struct_members( g.Store:cacheset:header, l.store_header_names ) }">
			<MvCOMMENT>
			|
			| If header was handled by page settings, don't touch it
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ miva_member_exists( l.page:cacheset:header, l.header_name ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.header_value" VALUE = "{ miva_variable_value( 's.HTTP_' $ glosub( l.header_name, '-', '_' ) ) }">

			<MvREFERENCEARRAY NAME = "l.header_setting" VARIABLE = "g.Store:cacheset:header">
				<MvMEMBER NAME = "{ l.header_name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.header_value }">
				<MvIF EXPR = "{ l.header_setting:mode EQ 'key' }">
					<MvASSIGN NAME = "l.keys" MEMBER = "{ l.header_name }" VALUE = "{ l.header_value }">
				<MvELSEIF EXPR = "{ l.header_setting:mode EQ 'disable' }">
					<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off global-header' ) }">

					<MvWHILESTOP>
				<MvELSEIF EXPR = "{ l.header_setting:mode EQ 'disable_equal' }">
					<MvIF EXPR = "{ strcasecmp( l.header_setting:value, l.header_value ) EQ 0 }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off global-header' ) }">

						<MvWHILESTOP>
					</MvIF>
				<MvELSEIF EXPR = "{ l.header_setting:mode EQ 'disable_substring' }">
					<MvIF EXPR = "{ l.header_setting:value CIN l.header_value }">
						<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off global-header' ) }">

						<MvWHILESTOP>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.cache_key" VALUE = "{ crypto_md5( miva_array_serialize( l.keys ) ) }">

		<MvIF EXPR = "{ TemplateManager_Cache_Get_Page( l.conn_id, l.cache_key, l.cache ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'hit ' $ l.cache_key ) }">

			<MvREFERENCE NAME = "l.html" VARIABLE = "l.cache:html">

			<MvFOREACH ITERATOR = "l.header" ARRAY = "l.members" COUNT = "{ miva_struct_members( l.cache:headers, l.members ) }">
				<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.cache:headers">
					<MvMEMBER NAME = "{ l.header }">
				</MvREFERENCEARRAY>
				
				<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( l.header, l.value ) }">
			</MvFOREACH>
		<MvELSE>
			<MvASSIGN NAME = "g.Session:cache:page_cache:capturing" VALUE = 1>

			<MvCAPTURE VARIABLE = "l.html">
				<MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Render_Page_LowLevel( l.code, l.page ) }">
			</MvCAPTURE>

			<MvASSIGN NAME = "g.Session:cache:page_cache:capturing" VALUE = 0>

			<MvIF EXPR = "{ NOT l.result }">
				<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off cached-page-generation-failed' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ ISNULL g.Session:cache:page_cache:aborted }">
				<MvASSIGN NAME = "l.null" 								VALUE = "{ miva_output_header( 'X-Miva-Cache', 'miss ' $ l.cache_key ) }">
				<MvASSIGN NAME = "l.null" 								VALUE = "{ TemplateManager_Cache_Set_Page( l.conn_id, l.cache_key, g.Session:headers, l.html ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.null" 								VALUE = "{ miva_output_header( 'X-Miva-Cache', 'off aborted-' $ glosub( glosub( g.Session:cache:page_cache:aborted, asciichar( 10 ), '' ), asciichar( 13 ), '' ) ) }">
				<MvASSIGN NAME = "g.Session:cache:page_cache:aborted" 	VALUE = "">
			</MvIF>
		</MvIF>

		<MvEVAL EXPR = "{ l.html }">

		<MvFUNCTIONRETURN VALUE = 1>
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Render_Page_LowLevel( l.code, l.page ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Template" PARAMETERS = "filename, all_settings var" STANDARDOUTPUTLEVEL = "">
	<MIVA MvDO_ERROR = "nonfatal, nodisplay">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Store_Template_Path $ l.filename ].Template_Render( l.null, l.all_settings ) }">
	<MIVA MvDO_ERROR = "fatal, display">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_JSON_Variables" PARAMETERS = "all_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.all_settings:_mgr:json:variables_rendered }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MIVA STANDARDOUTPUTLEVEL = "text, html"><script type="text/javascript">
var json_url = <MvEVAL EXPR = "{ '"' $ [ g.Module_Admin ].JavaScriptEncode( g.json_url ) $ '"' }">;
var json_nosessionurl = <MvEVAL EXPR = "{ '"' $ [ g.Module_Admin ].JavaScriptEncode( g.json_nosessionurl ) $ '"' }">;
var Store_Code = <MvEVAL EXPR = "{ '"' $ [ g.Module_Admin ].JavaScriptEncode( g.Store_Code ) $ '"' }">;
</script>
<MIVA STANDARDOUTPUTLEVEL = "">

	<MvASSIGN NAME = "l.all_settings:_mgr:json:variables_rendered" VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Clientside" PARAMETERS = "all_settings var, filename" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.filename_md5"	VALUE = "{ crypto_md5( l.filename ) }">

	<MvIF EXPR = "{ miva_member_exists( l.all_settings:_mgr:clientside, l.filename_md5 ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Clientside ].Output_Link_JavaScript( l.filename ) }">

	<MvASSIGN NAME = "l.all_settings:_mgr:clientside" MEMBER = "{ l.filename_md5 }" VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Clientside_Deferred" PARAMETERS = "all_settings var, filename" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| When called from inside TemplateManager_Render_Head/ComponentModule_Render_Head, these duplicate script tags are prevented
	| by waiting to output all of the deferred scripts until TemplateManager_Render_Head has processed all items.  When called
	| outside of ComponentModule_Render_Head, we have to output the script tag immediately.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.filename_md5"	VALUE = "{ crypto_md5( l.filename ) }">

	<MvIF EXPR = "{ NOT l.all_settings:_mgr:head_rendering }">
		<MvIF EXPR = "{ miva_member_exists( l.all_settings:_mgr:clientside, l.filename_md5 ) OR
						miva_member_exists( l.all_settings:_mgr:clientside_deferred, l.filename_md5 ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Output_Link_JavaScript_Deferred( l.filename ) }">

		<MvASSIGN NAME = "l.all_settings:_mgr:clientside"		MEMBER = "{ l.filename_md5 }" VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.all_settings:_mgr:clientside_deferred"	MEMBER = "{ l.filename_md5 }" VALUE = "{ l.filename }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_Head" PARAMETERS = "all_settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.all_settings:_mgr:head_rendering"	VALUE = 1>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.all_settings:_mgr:items">
		<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.all_settings">
			<MvMEMBER NAME = "{ l.item:item_code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.item:module:api_ver GE 9.07 }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.item:module:module ].ComponentModule_Render_Head( l.item:module, l.item:item_code, l.all_settings, l.item_settings ) }">
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ TemplateManager_Render_PageBuilder( l.all_settings ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_BranchPreview( l.all_settings ) }">
	<MvEVAL EXPR = "{ [ g.Module_Feature_CUS_UT ].ShopAsCustomer_Render_CustomerPreview( l.all_settings ) }">

	<MvFOREACH ITERATOR = "l.filename_md5" ARRAY = "l.clientside_deferred" COUNT = "{ miva_struct_members( l.all_settings:_mgr:clientside_deferred, l.clientside_deferred ) }">
		<MvIF EXPR = "{ NOT miva_member_exists( l.all_settings:_mgr:clientside, l.filename_md5 ) }">
			<MvREFERENCEARRAY NAME = "l.filename" VARIABLE = "l.all_settings">
				<MvMEMBER NAME = "_mgr">
				<MvMEMBER NAME = "clientside_deferred">
				<MvMEMBER NAME = "{ l.filename_md5 }">
			</MvREFERENCEARRAY>

			<MvEVAL EXPR = "{ [ g.Module_Clientside ].Output_Link_JavaScript_Deferred( l.filename ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.all_settings:_mgr:head_rendering"	VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_PageBuilder" PARAMETERS = "all_settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGB_UT ].PageBuilderPreview_Active() }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvEVAL EXPR = "{ TemplateManager_Render_JSON_Variables( l.all_settings ) }">

	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'ajax.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'admin/ui.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'features/pgb/preview.js' ) }">

	<MvASSIGN NAME = "l.id" VALUE = "{ MakeSessionID() }">

	<script id="{ encodeentities( l.id ) }" type="text/javascript">
		window.PageBuilderPreview_FragmentKey = '<MvEVAL EXPR = "{ encodejavascriptstring( [ g.Module_Feature_PGB_UT ].PageBuilderPreview_FragmentKey() ) }">';

		(function()
		{
			var post_data, element_script;

			element_script = document.getElementById( '<MvEVAL EXPR = "{ encodejavascriptstring( l.id ) }">' );
			element_script.remove();

			if ( window.parent )
			{
				<MvIF EXPR = "{ NOT ISNULL g.Branch_DateTime }">
					<MvASSIGN NAME = "l.branch_datetime"			VALUE = "{ g.Branch_DateTime }">
				<MvELSE>
					<MvREFERENCEARRAY NAME = "l.branch_datetime"	VARIABLE = "g.Request_Cookies">
						<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-datetime' }">
					</MvREFERENCEARRAY>
				</MvIF>

				<MvIF EXPR = "{ ISNULL l.branch_datetime }">
					<MvASSIGN NAME = "l.time_t"						VALUE = -1>
				<MvELSEIF EXPR = "{ isdigit( l.branch_datetime ) }">
					<MvASSIGN NAME = "l.time_t"						VALUE = "{ l.branch_datetime }">
				<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Timestamp_RFC3339_To_Time( l.branch_datetime, l.time_t ) }">
					<MvASSIGN NAME = "l.time_t"						VALUE = -1>
				</MvIF>

				post_data =
				{
					command: 'preview_branchdata',
					data:
					{
						branchkey:	'<MvEVAL EXPR = "{ encodejavascriptstring( g.Store:branch:branchkey ) }">',
						datetime:	<MvEVAL EXPR = "{ int( l.time_t ) }">
					}
				};

				window.parent.postMessage( JSON.stringify( post_data ), '*' );
			}
		})();

		window.addEventListener( 'load', () =>
		{
			if ( window.parent )
			{
				new PageBuilderUI_RuntimePreview();
			}
		}, false );

		<MvCOMMENT>
		|
		| Output a fragment token here and replace it once render has completed in order to get the
		| final list of rendered fragments, otherwise we would not have the complete list of fragments
		| by the time we output this block.
		|
		</MvCOMMENT>

		document.addEventListener( 'DOMContentLoaded', () =>
		{
			if ( window.parent )
			{
				post_data =
				{
					command: 'pagebuilder_rendered_fragments',
					data:
					{
						codes:
						[
							<MvEVAL EXPR = "{ [ g.Module_Feature_PGB_UT ].PageBuilderPreview_FragmentReplacementToken() }">
						]
					}
				};

				if ( post_data.data.codes.length )
				{
					window.parent.postMessage( JSON.stringify( post_data ), '*' );
				}
			}
		}, false );
	</script>

	<style type="text/css">
		.pagebuilderui_runtimepreview_inspect_element_overlay
		{
			position: absolute;
			top: 0;
			left: 0;
			width: 0;
			height: 0;
			display: none;
			border-radius: 3px;
			background: rgba( 83, 156, 255, 0.35 );
			border: 1px solid #fff;
			cursor: pointer;
			z-index: 2147483647;
		}

		.pagebuilderui_runtimepreview_inspect_element_overlay.pagebuilderui_runtimepreview_inspect_element_overlay_shimmer
		{
			background: linear-gradient(-45deg, rgba( 83, 156, 255, 0.35 ) 40%, rgba( 183, 214, 255, 0.5) 50%, rgba( 83, 156, 255, 0.35 ) 60%);
			background-size: 300%;
			background-position-x: 100%;
		}

		.pagebuilderui_runtimepreview_inspect_element_overlay.pagebuilderui_runtimepreview_inspect_element_overlay_global
		{
			background: rgba( 121, 26, 214, 0.3 );
		}

		.pagebuilderui_runtimepreview_inspect_element_overlay.pagebuilderui_runtimepreview_inspect_element_overlay_global.pagebuilderui_runtimepreview_inspect_element_overlay_shimmer
		{
			background: linear-gradient(-45deg, rgba( 121, 26, 214, 0.3 ) 40%, rgba( 215, 180, 255, 0.5) 50%, rgba( 121, 26, 214, 0.3 ) 60%);
			background-size: 300%;
			background-position-x: 100%;
		}

		.pagebuilderui_runtimepreview_inspect_element_overlay_global_label
		{
			position: absolute;
			display: none;
			top: 0;
			left: 0;
			padding: 4px 8px;
			border-radius: 3px;
			background: #791ad6;
			transform: translateY( calc( -100% - 6px ) );
		}

		.pagebuilderui_runtimepreview_inspect_element_overlay.pagebuilderui_runtimepreview_inspect_element_overlay_global .pagebuilderui_runtimepreview_inspect_element_overlay_global_label
		{
			display: block;
		}

		.pagebuilderui_runtimepreview_inspect_element_overlay_global_label::after
		{
			position: relative;
			display: inline-block;
			margin-left: 6px;
			font-size: 12px;
			font-weight: 500;
			color: #fff;
			font-family: Arial, sans-serif;
			content: 'Global';
		}
	</style>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_BranchPreview" PARAMETERS = "all_settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvREFERENCEARRAY NAME = "l.branchkey" VARIABLE = "g.Request_Cookies">
		<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-key' }">
	</MvREFERENCEARRAY>

	<MvREFERENCEARRAY NAME = "l.suppress_branch_preview" VARIABLE = "g.Request_Cookies">
		<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-preview-suppress' }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ ISNULL g.BranchKey AND ( ISNULL l.branchkey OR l.suppress_branch_preview ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvEVAL EXPR = "{ TemplateManager_Render_BranchPreview_MMRuntimeBranchPreview( l.all_settings ) }">

	<script type="text/javascript">
		function AJAX_Invalid_Session( response, reload_window, callback )
		{
			if ( typeof callback === 'function' )
			{
				callback( response );
			}
		}

		window.addEventListener( 'load', function()
		{
			const template = document.getElementById( 'mm_runtimebranchpreview_template_instance' );
			var count, event_frame, timeout_id, event_message;

			if ( !window.parent )
			{
				document.body.appendChild( template.content.cloneNode( true ) );
			}
			else
			{
				event_message = function( event )
				{
					if ( event.data === 'prevent_branch_preview' && event.source === window.parent )
					{
						template.remove();
						clearTimeout( timeout_id );
						window.removeEventListener( 'message', event_message );
					}
				}

				window.addEventListener( 'message', event_message );

				//
				// Wait 3 frame cycles for a response.
				//
				// Window.postMessage is dispatched only after all pending execution contexts have
				// finished, so we must wait 1 cycle to send, 1 cycle to receive, and 1 cycle to process
				// once we know the postmessage did not happen in the previous two execution cycles.
				//

				count			= 0;
				event_frame		= function()
				{
					if ( ++count < 3 )
					{
						timeout_id = setTimeout( event_frame, 0 );
						return;
					}

					window.removeEventListener( 'message', event_message );
					document.body.appendChild( template.content.cloneNode( true ) );
				};

				timeout_id = setTimeout( event_frame, 0 );
				window.parent.postMessage( 'showing_branch_preview', '*' );
			}
		}, false );
	</script>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_BranchPreview_MMRuntimeBranchPreview" PARAMETERS = "all_settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session:_mgr:branchpreview_mmruntimebranchpreview }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "g.Session:_mgr:branchpreview_mmruntimebranchpreview" VALUE = 1>

	<MvEVAL EXPR = "{ TemplateManager_Render_BranchPreview_Fonts() }">
	<MvEVAL EXPR = "{ TemplateManager_Render_JSON_Variables( l.all_settings ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_BranchPreview_MMRuntimeBranchPreviewDatePicker( l.all_settings ) }">

	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'ajax.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'admin/ui.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'admin/modal.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'admin/mmmenubutton.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'features/tui/branchpreview.js' ) }">

	<MvIF EXPR = "{ ISNULL g.Domain:admin_surl }">
		<MvASSIGN NAME = "l.json_secureurl"				VALUE = "{ g.json_url }">
	<MvELSE>
		<MvASSIGN NAME = "l.json_secureurl"				VALUE = "{ glosub( g.Domain:admin_surl, 'admin.mvc', 'json.mvc' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL g.Branch_DateTime }">
		<MvASSIGN NAME = "l.branch_datetime"			VALUE = "{ g.Branch_DateTime }">
	<MvELSE>
		<MvREFERENCEARRAY NAME = "l.branch_datetime"	VARIABLE = "g.Request_Cookies">
			<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-datetime' }">
		</MvREFERENCEARRAY>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.branch_datetime }">
		<MvASSIGN NAME = "l.time_t"						VALUE = -1>
	<MvELSEIF EXPR = "{ isdigit( l.branch_datetime ) }">
		<MvASSIGN NAME = "l.time_t"						VALUE = "{ l.branch_datetime }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Timestamp_RFC3339_To_Time( l.branch_datetime, l.time_t ) }">
		<MvASSIGN NAME = "l.time_t"						VALUE = -1>
	</MvIF>

	<MvASSIGN NAME = "l.flags"							VALUE = "{ [ g.Module_Feature_URI_UT ].URL_Build_Flags( 'sep,nosession' ) }">
	<MvASSIGN NAME = "l.preview_url"					VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Page_Code_URL( 'SFNT', l.flags )  }">

	<style type="text/css">
		.mm_runtimeshopascustomer_present.mm_runtimeshopascustomer_top_left mm-runtimebranchpreview[data-position="top_left"]::part(menubutton)
		{
			top: 15px;
			left: 83px;
		}

		.mm_runtimeshopascustomer_present.mm_runtimeshopascustomer_bottom_left mm-runtimebranchpreview[data-position="bottom_left"]::part(menubutton)
		{
			bottom: 15px;
			left: 83px;
		}

		.mm_runtimeshopascustomer_present.mm_runtimeshopascustomer_top_left mm-runtimebranchpreview[data-position="top_left"]::part(menubutton_text),
		.mm_runtimeshopascustomer_present.mm_runtimeshopascustomer_top_right mm-runtimebranchpreview[data-position="top_right"]::part(menubutton_text),
		.mm_runtimeshopascustomer_present.mm_runtimeshopascustomer_bottom_right mm-runtimebranchpreview[data-position="bottom_right"]::part(menubutton_text),
		.mm_runtimeshopascustomer_present.mm_runtimeshopascustomer_bottom_left mm-runtimebranchpreview[data-position="bottom_left"]::part(menubutton_text)
		{
			display: none;
		}
	</style>

	<template id="mm_runtimebranchpreview_template">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Output_Link_CSS( 'features/tui/branchpreview.css' ) }">
	</template>

	<template id="mm_runtimebranchpreview_template_instance">
		<mm-runtimebranchpreview-datepicker></mm-runtimebranchpreview-datepicker>
		<mm-runtimebranchpreview data-name="{ encodeentities( g.Store:branch:name ) }"
								 data-color="{ encodeentities( g.Store:branch:color ) }"
								 data-branchkey="{ encodeentities( g.Store:branch:branchkey ) }"
								 data-branch-datetime="{ int( l.time_t ) }"
								 data-preview-url="{ encodeentities( l.preview_url ) }"
								 data-json-secureurl="{ encodeentities( l.json_secureurl ) }"></mm-runtimebranchpreview>
	</template>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_BranchPreview_MMRuntimeBranchPreviewDatePicker" PARAMETERS = "all_settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session:_mgr:branchpreview_mmruntimebranchpreviewdatepicker }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "g.Session:_mgr:branchpreview_mmruntimebranchpreviewdatepicker" VALUE = 1>

	<MvEVAL EXPR = "{ TemplateManager_Render_BranchPreview_Fonts() }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'ajax.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'admin/ui.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'admin/modal.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'admin/mmmenubutton.js' ) }">
	<MvEVAL EXPR = "{ TemplateManager_Render_Clientside( l.all_settings, 'features/tui/branchpreviewdatepicker.js' ) }">

	<template id="mm_runtimebranchpreview_datepicker_template">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Output_Link_CSS( 'features/tui/branchpreviewdatepicker.css' ) }">

		<span id="mm_runtimebranchpreview_datepicker_background" class="mm_runtimebranchpreview_datepicker_background"></span>
		<span id="mm_runtimebranchpreview_datepicker_dialog" class="mm_runtimebranchpreview_datepicker_dialog">
			<span class="mm_runtimebranchpreview_datepicker_container">
				<span id="mm_runtimebranchpreview_datepicker_content_container" class="mm_runtimebranchpreview_datepicker_content_container">
					<span id="mm_runtimebranchpreview_datepicker_close" class="mm_runtimebranchpreview_datepicker_close"></span>
					<span id="mm_runtimebranchpreview_datepicker_title" class="mm_runtimebranchpreview_datepicker_title mm_runtimebranchpreview_datepicker_header_font">Select Date and Time</span>
					<span id="mm_runtimebranchpreview_datepicker_subtitle" class="mm_runtimebranchpreview_datepicker_subtitle mm_runtimebranchpreview_datepicker_header_font">Preview the site at a future date to view scheduled components and price groups.</span>
					<span id="mm_runtimebranchpreview_datepicker_content" class="mm_runtimebranchpreview_datepicker_content mm_runtimebranchpreview_datepicker_content_body">
						<span class="mm_runtimebranchpreview_datepicker">
							<span class="mm_runtimebranchpreview_datepicker_calendar_container">
								<div class="mm_runtimebranchpreview_datepicker_calendar_month_selector">
									<div id="mm_runtimebranchpreview_datepicker_calendar_month_selector_prev" class="mm_runtimebranchpreview_datepicker_calendar_month_selector_prev"></div>
									<div id="mm_runtimebranchpreview_datepicker_calendar_month_selector_title" class="mm_runtimebranchpreview_datepicker_calendar_month_selector_title">
										<span id="mm_runtimebranchpreview_datepicker_calendar_month_selector_title_month" class="mm_runtimebranchpreview_datepicker_calendar_month_selector_title_month mm_runtimebranchpreview_datepicker_header_font"></span>
										<span id="mm_runtimebranchpreview_datepicker_calendar_month_selector_title_year" class="mm_runtimebranchpreview_datepicker_calendar_month_selector_title_year"></span>
									</div>
									<div id="mm_runtimebranchpreview_datepicker_calendar_month_selector_next" class="mm_runtimebranchpreview_datepicker_calendar_month_selector_next"></div>
								</div>

								<div class="mm_runtimebranchpreview_datepicker_calendar_weekday_container">
									<span class="mm_runtimebranchpreview_datepicker_calendar_weekday_title mm_runtimebranchpreview_datepicker_calendar_day_0">Su</span>
									<span class="mm_runtimebranchpreview_datepicker_calendar_weekday_title mm_runtimebranchpreview_datepicker_calendar_day_1">Mo</span>
									<span class="mm_runtimebranchpreview_datepicker_calendar_weekday_title mm_runtimebranchpreview_datepicker_calendar_day_2">Tu</span>
									<span class="mm_runtimebranchpreview_datepicker_calendar_weekday_title mm_runtimebranchpreview_datepicker_calendar_day_3">We</span>
									<span class="mm_runtimebranchpreview_datepicker_calendar_weekday_title mm_runtimebranchpreview_datepicker_calendar_day_4">Th</span>
									<span class="mm_runtimebranchpreview_datepicker_calendar_weekday_title mm_runtimebranchpreview_datepicker_calendar_day_5">Fr</span>
									<span class="mm_runtimebranchpreview_datepicker_calendar_weekday_title mm_runtimebranchpreview_datepicker_calendar_day_6">Sa</span>
								</div>

								<div id="mm_runtimebranchpreview_datepicker_calendar_week_container" class="mm_runtimebranchpreview_datepicker_calendar_week_container"></div>
							</span>
							
							<span id="mm_runtimebranchpreview_datepicker_time_container" class="mm_runtimebranchpreview_datepicker_time_container">
								<span class="mm_runtimebranchpreview_datepicker_time_hms_container">
									<label class="mm_runtimebranchpreview_datepicker_time_label">
										<span class="mm_runtimebranchpreview_datepicker_time_prompt">HH</span>
										<div id="mm_runtimebranchpreview_datepicker_time_hour"></div>
									</label>
									<label class="mm_runtimebranchpreview_datepicker_time_label">
										<span class="mm_runtimebranchpreview_datepicker_time_prompt">MM</span>
										<div id="mm_runtimebranchpreview_datepicker_time_minute"></div>
									</label>
									<label class="mm_runtimebranchpreview_datepicker_time_label">
										<span class="mm_runtimebranchpreview_datepicker_time_prompt">SS</span>
										<div id="mm_runtimebranchpreview_datepicker_time_second"></div>
									</label>
								</span>
								<span class="mm_runtimebranchpreview_datepicker_time_period_container">
									<span id="mm_runtimebranchpreview_datepicker_time_am" class="mm_runtimebranchpreview_datepicker_time_period">AM</span>
									<span id="mm_runtimebranchpreview_datepicker_time_pm" class="mm_runtimebranchpreview_datepicker_time_period">PM</span>
								</span>
							</span>
						</span>
					</span>
					<span id="mm_runtimebranchpreview_datepicker_actionbar" class="mm_runtimebranchpreview_datepicker_actionbar"></span>
				</span>
			</span>
		</span>
	</template>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_BranchPreview_Fonts" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session:_mgr:branchpreview_fonts }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "g.Session:_mgr:branchpreview_fonts" VALUE = 1>

	<MvIF EXPR = "{ g.Secure }">	<MvASSIGN NAME = "l.font_url" VALUE = "{ g.secure_baseurl $ 'fonts/' }">
	<MvELSE>						<MvASSIGN NAME = "l.font_url" VALUE = "{ g.baseurl $ 'fonts/' }">
	</MvIF>

	<style type="text/css">
		@font-face
		{
			font-family: 'MivaIcons';
			src: url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">mivaicons.woff2?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff2'),
				 url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">mivaicons.woff?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff');
			font-weight: normal;
			font-style: normal;
			font-display: fallback;
		}

		@font-face
		{
			font-family: 'Neue Haas Grotesk Display';
			src: url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">NeueHaasGrotDisp-65Medium-Web.woff2?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff2'),
				 url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">NeueHaasGrotDisp-65Medium-Web.woff?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff');
			font-weight:  500;
			font-style:   normal;
			font-stretch: normal;
			font-display: fallback;
		}

		@font-face
		{
			font-family: 'Neue Haas Grotesk Display';
			src: url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">NeueHaasGrotDisp-55Roman-Web.woff2?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff2'),
				 url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">NeueHaasGrotDisp-55Roman-Web.woff?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff');
			font-weight:  400;
			font-style:   normal;
			font-stretch: normal;
			font-display: fallback;
		}

		@font-face
		{
			font-family: 'Neue Haas Grotesk Text';
			src: url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">NeueHaasGrotText-65Medium-Web.woff2?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff2'),
				 url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">NeueHaasGrotText-65Medium-Web.woff?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff');
			font-weight:  500;
			font-style:   normal;
			font-stretch: normal;
			font-display: fallback;
		}

		@font-face
		{
			font-family: 'Neue Haas Grotesk Text';
			src: url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">NeueHaasGrotText-55Roman-Web.woff2?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff2'),
				 url('<MvEVAL EXPR = "{ encodeentities( l.font_url ) }">NeueHaasGrotText-55Roman-Web.woff?T=<MvEVAL EXPR = "{ [ g.Module_Root $ 'lib/config.mvc' ].Version_Token() }">') format('woff');
			font-weight:  400;
			font-style:   normal;
			font-stretch: normal;
			font-display: fallback;
		}
	</style>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Generate_ResourceToken" PARAMETERS = "string" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ substring( crypto_md5( g.Domain:license $ g.Domain:name $ g.Store:branch:branchkey $ l.string ), 1, 8 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_JavaScriptResource" PARAMETERS = "scriptresource var, group_code, all_settings var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.cache" VARIABLE = "g.Session:cache:javascriptresource_render">
		<MvMEMBER NAME = "{ l.scriptresource:code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.cache:loaded }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.cache:loaded" VALUE = 1>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'C' }">
		<MvASSIGN NAME = "l.linked_scriptresource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].Runtime_JavaScriptResourceList_Load_CombinedResource( l.scriptresource:id, l.linked_scriptresources ) }">

		<MvFOREACH ITERATOR = "l.linked_scriptresource" ARRAY = "l.linked_scriptresources" COUNT = "{ l.linked_scriptresource_count }">
			<MvREFERENCEARRAY NAME = "l.linked_cache" VARIABLE = "g.Session:cache:javascriptresource_render">
				<MvMEMBER NAME = "{ l.linked_scriptresource:code }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.linked_cache:loaded" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'M' OR
					l.scriptresource:type EQ 'Y' }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.scriptresource:mod_code, l.module ) }">	<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ NOT l.module:active }">																					<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:jsresource }">																<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.scriptresource:type EQ 'M' }">
			<MvASSIGN NAME = "l.integrity" VALUE = "{ [ g.Module_Root $ l.module:module ].JavaScriptResourceModule_Resource_Integrity( l.module, l.scriptresource ) }">

			<MvIF EXPR = "{ NOT ISNULL l.integrity }">
				<MvIF EXPR = "{ miva_array_search( l.scriptresource:attributes, 1, l.attribute, 'strcasecmp( l.attribute:name, \'crossorigin\' ) EQ 0' ) }">
					<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "{ l.attribute }">
				<MvELSE>
					<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "">
					<MvASSIGN NAME = "l.crossorigin_attribute:name"		VALUE = "crossorigin">
					<MvASSIGN NAME = "l.crossorigin_attribute:value"	VALUE = "anonymous">
				</MvIF>

				<MvASSIGN NAME = "l.integrity_attribute"				VALUE = "">
				<MvASSIGN NAME = "l.integrity_attribute:name"			VALUE = "integrity">
				<MvASSIGN NAME = "l.integrity_attribute:value"			VALUE = "{ l.integrity }">

				<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_filter( l.scriptresource:attributes, 1, l.attribute, '( tolower( l.attribute:name ) NE \'integrity\' ) AND ( tolower( l.attribute:name ) NE \'crossorigin\' )', l.scriptresource:attributes ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.scriptresource:attributes, l.integrity_attribute, -1 ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.scriptresource:attributes, l.crossorigin_attribute, -1 ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "<script">

	<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.scriptresource:attributes">
		<MvEVAL EXPR = "{ ' ' $ encodeentities( l.attribute:name ) }">

		<MvIF EXPR = "{ NOT ISNULL l.attribute:value }">
			<MvEVAL EXPR = "{ '="' $ encodeentities( l.attribute:value ) $ '"' }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'E' }">
		<MvEVAL EXPR = "{ ' src="' $ encodeentities( l.scriptresource:file ) $ '"' }">
	<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'L' }">
		<MvASSIGN NAME = "l.local_file_path" VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, l.scriptresource:file ) }">

		<MvIF EXPR = "{ sexists( l.local_file_path ) }">	<MvEVAL EXPR = "{ ' src="' $ encodeentities( l.scriptresource:file ) $ '?T=' $ encodeattribute( TemplateManager_Generate_ResourceToken( l.scriptresource:file $ ':' $ stime( l.local_file_path ) ) ) $ '"' }">
		<MvELSE>											<MvEVAL EXPR = "{ ' src="' $ encodeentities( l.scriptresource:file ) $ '"' }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'M' }">
		<MvASSIGN NAME = "l.last_modified"							VALUE = "{ [ g.Module_Root $ l.module:module ].JavaScriptResourceModule_Resource_LastModified( l.module, l.scriptresource ) }">

		<MvIF EXPR = "{ NOT ISNULL l.last_modified }">	<MvEVAL EXPR = "{ ' src="' $ encodeentities( g.json_nosessionurl $ 'Store_Code=' $ encodeattribute( g.Store:code ) $ '&Function=JavaScriptResource_Output&JavaScriptResource_Code=' $ encodeattribute( l.scriptresource:code ) ) $ '&T=' $ encodeattribute( TemplateManager_Generate_ResourceToken( l.scriptresource:code $ ':' $ l.scriptresource:mod_code $ ':' $ l.scriptresource:mod_data $ ':' $ l.last_modified ) ) $ '"' }">
		<MvELSE>										<MvEVAL EXPR = "{ ' src="' $ encodeentities( g.json_nosessionurl $ 'Store_Code=' $ encodeattribute( g.Store:code ) $ '&Function=JavaScriptResource_Output&JavaScriptResource_Code=' $ encodeattribute( l.scriptresource:code ) ) $ '"' }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
		<MvEVAL EXPR = "{ ' src="' $ encodeentities( g.json_nosessionurl $ 'Store_Code=' $ encodeattribute( g.Store:code ) $ '&Function=JavaScriptResource_Output&JavaScriptResource_Code=' $ encodeattribute( l.scriptresource:code ) ) $ '&T=' $ encodeattribute( TemplateManager_Generate_ResourceToken( l.scriptresource:code $ ':' $ l.scriptresource:mod_code $ ':' $ l.scriptresource:content_id ) ) $ '"' }">
	<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'C' }">
		<MvASSIGN NAME = "l.resource_token_string" VALUE = "">

		<MvFOREACH ITERATOR = "l.linked_scriptresource" ARRAY = "l.linked_scriptresources" COUNT = "{ l.linked_scriptresource_count }">
			<MvIF EXPR = "{ l.linked_scriptresource:type EQ 'L' }">
				<MvIF EXPR = "{ '/' IN l.linked_scriptresource:file EQ 1 }">	<MvASSIGN NAME = "l.local_file_path" VALUE = "{ l.linked_scriptresource:file }">
				<MvELSE>														<MvASSIGN NAME = "l.local_file_path" VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, l.linked_scriptresource:file ) }">
				</MvIF>

				<MvIF EXPR = "{ sexists( l.local_file_path ) }">
					<MvIF EXPR = "{ NOT ISNULL l.resource_token_string }">
						<MvASSIGN NAME = "l.resource_token_string"	VALUE = "{ l.resource_token_string $ ';' }">
					</MvIF>

					<MvASSIGN NAME = "l.last_modified"				VALUE = "{ stime( l.local_file_path ) }">
					<MvASSIGN NAME = "l.resource_token_string"		VALUE = "{ l.resource_token_string $ l.linked_scriptresource:file $ ':' $ l.last_modified }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.linked_scriptresource:type EQ 'M' }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.linked_scriptresource:mod_code, l.module ) }">	<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:active }">																							<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ NOT l.module:feature_hash:jsresource }">																		<MvFOREACHCONTINUE>
				</MvIF>

				<MvIF EXPR = "{ NOT ISNULL l.resource_token_string }">
					<MvASSIGN NAME = "l.resource_token_string"		VALUE = "{ l.resource_token_string $ ';' }">
				</MvIF>

				<MvASSIGN NAME = "l.last_modified"					VALUE = "{ [ g.Module_Root $ l.module:module ].JavaScriptResourceModule_Resource_LastModified( l.module, l.linked_scriptresource ) }">
				<MvASSIGN NAME = "l.resource_token_string"			VALUE = "{ l.resource_token_string $ l.linked_scriptresource:code $ ':' $ l.linked_scriptresource:mod_code $ ':' $ l.linked_scriptresource:mod_data $ ':' $ l.last_modified }">
			<MvELSEIF EXPR = "{ l.linked_scriptresource:type EQ 'Z' }">
				<MvIF EXPR = "{ NOT ISNULL l.resource_token_string }">
					<MvASSIGN NAME = "l.resource_token_string"		VALUE = "{ l.resource_token_string $ ';' }">
				</MvIF>

				<MvASSIGN NAME = "l.resource_token_string"			VALUE = "{ l.resource_token_string $ l.linked_scriptresource:code $ ':' $ l.linked_scriptresource:mod_code $ ':' $ l.linked_scriptresource:content_id }">
			</MvIF>
		</MvFOREACH>

		<MvEVAL EXPR = "{ ' src="' $ encodeentities( g.json_nosessionurl $ 'Store_Code=' $ encodeattribute( g.Store:code ) $ '&Function=JavaScriptResource_Output&JavaScriptCombinedResource_Code=' $ encodeattribute( l.scriptresource:code ) ) $ '&T=' $ encodeattribute( TemplateManager_Generate_ResourceToken( l.resource_token_string ) ) $ '"' }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.group_code }">
		<MvEVAL EXPR = "{ ' data-resource-group="' $ encodeentities( l.group_code ) $ '"' }">
	</MvIF>

	<MvEVAL EXPR = "{ ' data-resource-code="' $ encodeentities( l.scriptresource:code ) $ '">' }">

	<MvIF EXPR = "{ l.scriptresource:type EQ 'I' AND NOT ISNULL l.scriptresource:template_filename }">	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Store_Template_Path $ l.scriptresource:template_filename ].Template_Render( l.null, l.all_settings ) }">
	<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'Y' }">												<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].JavaScriptResourceModule_Resource_Render( l.module, l.scriptresource ) }">
	</MvIF>

	<MvEVAL EXPR = "</script>">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Render_CSSResource" PARAMETERS = "cssresource var, group_code, all_settings var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.cache" VARIABLE = "g.Session:cache:cssresource_render">
		<MvMEMBER NAME = "{ l.cssresource:code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.cache:loaded }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.cache:loaded" VALUE = 1>

	<MvIF EXPR = "{ l.cssresource:type EQ 'C' }">
		<MvASSIGN NAME = "l.linked_cssresource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].Runtime_CSSResourceList_Load_CombinedResource( l.cssresource:id, l.linked_cssresources ) }">

		<MvFOREACH ITERATOR = "l.linked_cssresource" ARRAY = "l.linked_cssresources" COUNT = "{ l.linked_cssresource_count }">
			<MvREFERENCEARRAY NAME = "l.linked_cache" VARIABLE = "g.Session:cache:cssresource_render">
				<MvMEMBER NAME = "{ l.linked_cssresource:code }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.linked_cache:loaded" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'M' OR
					l.cssresource:type EQ 'Y' }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.cssresource:mod_code, l.module ) }">	<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ NOT l.module:active }">																				<MvFUNCTIONRETURN>
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cssresource }">															<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ l.cssresource:type EQ 'M' }">
			<MvASSIGN NAME = "l.integrity" VALUE = "{ [ g.Module_Root $ l.module:module ].CSSResourceModule_Resource_Integrity( l.module, l.cssresource ) }">

			<MvIF EXPR = "{ NOT ISNULL l.integrity }">
				<MvIF EXPR = "{ miva_array_search( l.cssresource:attributes, 1, l.attribute, 'strcasecmp( l.attribute:name, \'crossorigin\' ) EQ 0' ) }">
					<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "{ l.attribute }">
				<MvELSE>
					<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "">
					<MvASSIGN NAME = "l.crossorigin_attribute:name"		VALUE = "crossorigin">
					<MvASSIGN NAME = "l.crossorigin_attribute:value"	VALUE = "anonymous">
				</MvIF>

				<MvASSIGN NAME = "l.integrity_attribute"				VALUE = "">
				<MvASSIGN NAME = "l.integrity_attribute:name"			VALUE = "integrity">
				<MvASSIGN NAME = "l.integrity_attribute:value"			VALUE = "{ l.integrity }">

				<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_filter( l.cssresource:attributes, 1, l.attribute, '( tolower( l.attribute:name ) NE \'integrity\' ) AND ( tolower( l.attribute:name ) NE \'crossorigin\' )', l.cssresource:attributes ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.cssresource:attributes, l.integrity_attribute, -1 ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.cssresource:attributes, l.crossorigin_attribute, -1 ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'I' OR
					l.cssresource:type EQ 'Y' }">
		<MvEVAL EXPR = "<style">

		<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.cssresource:attributes">
			<MvEVAL EXPR = "{ ' ' $ encodeentities( l.attribute:name ) }">

			<MvIF EXPR = "{ NOT ISNULL l.attribute:value }">
				<MvEVAL EXPR = "{ '="' $ encodeentities( l.attribute:value ) $ '"' }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ NOT ISNULL l.group_code }">
			<MvEVAL EXPR = "{ ' data-resource-group="' $ encodeentities( l.group_code ) $ '"' }">
		</MvIF>

		<MvEVAL EXPR = "{ ' data-resource-code="' $ encodeentities( l.cssresource:code ) $ '">' }">

		<MvIF EXPR = "{ l.cssresource:type EQ 'I' AND NOT ISNULL l.cssresource:template_filename }">	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Store_Template_Path $ l.cssresource:template_filename ].Template_Render( l.null, l.all_settings ) }">
		<MvELSEIF EXPR = "{ l.cssresource:type EQ 'Y' }">												<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].CSSResourceModule_Resource_Render( l.module, l.cssresource ) }">
		</MvIF>

		<MvEVAL EXPR = "</style>">
	<MvELSEIF EXPR = "{ l.cssresource:type EQ 'C' OR
						l.cssresource:type EQ 'L' OR
						l.cssresource:type EQ 'E' OR
						l.cssresource:type EQ 'M' OR
						l.cssresource:type EQ 'Z' }">
		<MvEVAL EXPR = "<link">

		<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.cssresource:attributes">
			<MvEVAL EXPR = "{ ' ' $ encodeentities( l.attribute:name ) }">

			<MvIF EXPR = "{ NOT ISNULL l.attribute:value }">
				<MvEVAL EXPR = "{ '="' $ encodeentities( l.attribute:value ) $ '"' }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.cssresource:type EQ 'E' }">
			<MvEVAL EXPR = "{ ' href="' $ encodeentities( l.cssresource:file ) $ '"' }">
		<MvELSEIF EXPR = "{ l.cssresource:type EQ 'L' }">
			<MvASSIGN NAME = "l.local_file_path" VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, l.cssresource:file ) }">

			<MvIF EXPR = "{ sexists( l.local_file_path ) }">	<MvEVAL EXPR = "{ ' href="' $ encodeentities( l.cssresource:file ) $ '?T=' $ encodeattribute( TemplateManager_Generate_ResourceToken( l.cssresource:file $ ':' $ stime( l.local_file_path ) ) ) $ '"' }">
			<MvELSE>											<MvEVAL EXPR = "{ ' href="' $ encodeentities( l.cssresource:file ) $ '"' }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.cssresource:type EQ 'Z' }">
			<MvEVAL EXPR = "{ ' href="' $ encodeentities( g.json_nosessionurl $ 'Store_Code=' $ encodeattribute( g.Store:code ) $ '&Function=CSSResource_Output&CSSResource_Code=' $ encodeattribute( l.cssresource:code ) ) $ '&T=' $ encodeattribute( TemplateManager_Generate_ResourceToken( l.cssresource:code $ ':' $ l.cssresource:mod_code $ ':' $ l.cssresource:content_id ) ) $ '"' }">
		<MvELSEIF EXPR = "{ l.cssresource:type EQ 'M' }">
			<MvASSIGN NAME = "l.last_modified"							VALUE = "{ [ g.Module_Root $ l.module:module ].CSSResourceModule_Resource_LastModified( l.module, l.cssresource ) }">

			<MvIF EXPR = "{ NOT ISNULL l.last_modified }">	<MvEVAL EXPR = "{ ' href="' $ encodeentities( g.json_nosessionurl $ 'Store_Code=' $ encodeattribute( g.Store:code ) $ '&Function=CSSResource_Output&CSSResource_Code=' $ encodeattribute( l.cssresource:code ) ) $ '&T=' $ encodeattribute( TemplateManager_Generate_ResourceToken( l.cssresource:code $ ':' $ l.cssresource:mod_code $ ':' $ l.cssresource:mod_data $ ':' $ l.last_modified ) ) $ '"' }">
			<MvELSE>										<MvEVAL EXPR = "{ ' href="' $ encodeentities( g.json_nosessionurl $ 'Store_Code=' $ encodeattribute( g.Store:code ) $ '&Function=CSSResource_Output&CSSResource_Code=' $ encodeattribute( l.cssresource:code ) ) $ '"' }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.cssresource:type EQ 'C' }">
			<MvASSIGN NAME = "l.resource_token_string" VALUE = "">

			<MvFOREACH ITERATOR = "l.linked_cssresource" ARRAY = "l.linked_cssresources" COUNT = "{ l.linked_cssresource_count }">
				<MvIF EXPR = "{ l.linked_cssresource:type EQ 'L' }">
					<MvIF EXPR = "{ '/' IN l.linked_cssresource:file EQ 1 }">	<MvASSIGN NAME = "l.local_file_path" VALUE = "{ l.linked_cssresource:file }">
					<MvELSE>													<MvASSIGN NAME = "l.local_file_path" VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, l.linked_cssresource:file ) }">
					</MvIF>

					<MvIF EXPR = "{ sexists( l.local_file_path ) }">
						<MvIF EXPR = "{ NOT ISNULL l.resource_token_string }">
							<MvASSIGN NAME = "l.resource_token_string"	VALUE = "{ l.resource_token_string $ ';' }">
						</MvIF>

						<MvASSIGN NAME = "l.last_modified"				VALUE = "{ stime( l.local_file_path ) }">
						<MvASSIGN NAME = "l.resource_token_string"		VALUE = "{ l.resource_token_string $ l.linked_cssresource:file $ ':' $ l.last_modified }">
					</MvIF>
				<MvELSEIF EXPR = "{ l.linked_cssresource:type EQ 'M' }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.linked_cssresource:mod_code, l.module ) }">	<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ NOT l.module:active }">																						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ NOT l.module:feature_hash:cssresource }">																	<MvFOREACHCONTINUE>
					</MvIF>

					<MvIF EXPR = "{ NOT ISNULL l.resource_token_string }">
						<MvASSIGN NAME = "l.resource_token_string"		VALUE = "{ l.resource_token_string $ ';' }">
					</MvIF>

					<MvASSIGN NAME = "l.last_modified"					VALUE = "{ [ g.Module_Root $ l.module:module ].CSSResourceModule_Resource_LastModified( l.module, l.linked_cssresource ) }">
					<MvASSIGN NAME = "l.resource_token_string"			VALUE = "{ l.resource_token_string $ l.linked_cssresource:code $ ':' $ l.linked_cssresource:mod_code $ ':' $ l.linked_cssresource:mod_data $ ':' $ l.last_modified }">
				<MvELSEIF EXPR = "{ l.linked_cssresource:type EQ 'Z' }">
					<MvIF EXPR = "{ NOT ISNULL l.resource_token_string }">
						<MvASSIGN NAME = "l.resource_token_string"		VALUE = "{ l.resource_token_string $ ';' }">
					</MvIF>

					<MvASSIGN NAME = "l.resource_token_string"			VALUE = "{ l.resource_token_string $ l.linked_cssresource:code $ ':' $ l.linked_cssresource:mod_code $ ':' $ l.linked_cssresource:content_id }">
				</MvIF>
			</MvFOREACH>

			<MvEVAL EXPR = "{ ' href="' $ encodeentities( g.json_nosessionurl $ 'Store_Code=' $ encodeattribute( g.Store:code ) $ '&Function=CSSResource_Output&CSSCombinedResource_Code=' $ encodeattribute( l.cssresource:code ) ) $ '&T=' $ encodeattribute( TemplateManager_Generate_ResourceToken( l.resource_token_string ) ) $ '"' }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.group_code }">
			<MvEVAL EXPR = "{ ' data-resource-group="' $ encodeentities( l.group_code ) $ '"' }">
		</MvIF>

		<MvEVAL EXPR = "{ ' data-resource-code="' $ encodeentities( l.cssresource:code ) $ '" />' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Initialize_Item" PARAMETERS = "all_settings var, item_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.all_settings:_mgr:lookup, l.item_code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.item" VARIABLE = "l.all_settings">
		<MvMEMBER NAME = "_mgr">
		<MvMEMBER NAME = "lookup">
		<MvMEMBER NAME = "{ l.item_code }">
	</MvREFERENCEARRAY>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Initialize_Item_LowLevel( l.all_settings, l.item ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Initialize_Item_LowLevel" PARAMETERS = "all_settings var, item var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.all_settings">
		<MvMEMBER NAME = "{ l.item:item_code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.item:initialized }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.item:initialized"	VALUE = 1>

	<MvCOMMENT>
	|
	| Initialize the primary item
	|
	</MvCOMMENT>

	<MvDO FILE = "{ g.Module_Root $ l.item:module:module }" NAME = "l.null" VALUE = "{ ComponentModule_Initialize( l.item:module, l.item:item_code, l.all_settings, l.item_settings ) }">
	
	<MvCOMMENT>
	|
	| Initialize any extensions
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.extension_pos"		VALUE = 1>
	<MvASSIGN NAME = "l.extension_count"	VALUE = "{ miva_array_elements( l.item:extensions ) }">

	<MvWHILE EXPR = "{ l.extension_pos LE l.extension_count }">
		<MvDO FILE = "{ g.Module_Root $ l.item:extensions[ l.extension_pos ]:module }" NAME = "l.null" VALUE = "{ ComponentModule_Initialize( l.item:extensions[ l.extension_pos ], l.item:item_code, l.all_settings, l.item_settings ) }">
		<MvASSIGN NAME = "l.extension_pos"	VALUE = "{ l.extension_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>	
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Component_Prerender" PARAMETERS = "settings var, item, param" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.settings:_mgr:lookup, l.item ) }">
		<MvFUNCTIONRETURN> <MvCOMMENT> TODO </MvCOMMENT>
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.settings">
		<MvMEMBER NAME = "{ l.item }">
	</MvREFERENCEARRAY>

	<MvREFERENCEARRAY NAME = "l.module" VARIABLE = "l.settings">
		<MvMEMBER NAME = "_mgr">
		<MvMEMBER NAME = "lookup">
		<MvMEMBER NAME = "{ l.item }">
		<MvMEMBER NAME = "module">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.module:api_ver GE 5.72 }">
		<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.null" VALUE = "{ ComponentModule_Prerender( l.module, l.item, l.settings, l.item_settings, l.param ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Component_Render_Start" PARAMETERS = "settings var, item, param" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.settings:_mgr:lookup, l.item ) }">
		<MvFUNCTIONRETURN> <MvCOMMENT> TODO </MvCOMMENT>
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.settings">
		<MvMEMBER NAME = "{ l.item }">
	</MvREFERENCEARRAY>

	<MvREFERENCEARRAY NAME = "l.module" VARIABLE = "l.settings">
		<MvMEMBER NAME = "_mgr">
		<MvMEMBER NAME = "lookup">
		<MvMEMBER NAME = "{ l.item }">
		<MvMEMBER NAME = "module">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.module:api_ver GE 5.72 }">
		<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.null" VALUE = "{ ComponentModule_Prerender( l.module, l.item, l.settings, l.item_settings, l.param ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL s.HTTP_X_Miva_Partial_Render }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Render_Start( l.module, l.item, l.settings, l.item_settings, l.param ) }">
	<MvELSE>
		<MvREFERENCEARRAY NAME = "l.capture_item" VARIABLE = "g.Session:_mgr:capture:item_lookup">
			<MvMEMBER NAME = "{ l.item }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ISNULL l.capture_item }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Render_Start( l.module, l.item, l.settings, l.item_settings, l.param ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.param_hash" VALUE = "{ crypto_md5( l.param ) }">

			<MvIF EXPR = "{ NOT l.capture_item:include_all AND NOT miva_member_exists( l.capture_item:hashes, l.param_hash ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Render_Start( l.module, l.item, l.settings, l.item_settings, l.param ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.content"										VALUE = "">
				<MvASSIGN NAME = "l.content:hash"									VALUE = "{ l.param_hash }">
				<MvASSIGN NAME = "l.content:render_start"							VALUE = "">
				<MvASSIGN NAME = "l.content:render_end"								VALUE = "">

				<MvASSIGN NAME = "l.capture_item:content_count"						VALUE = "{ miva_array_insert_ref( l.capture_item:content, l.content, -1 ) }">
				<MvASSIGN NAME = "g.Session:_mgr:capture:active_capture_count"		VALUE = "{ miva_array_insert_ref( g.Session:_mgr:capture:active_captures, l.capture_item:content[ l.capture_item:content_count ], -1 ) }">

				<MvIF EXPR = "{ s.HTTP_X_Miva_Partial_Render_Output EQ 'json' OR g.Session:_mgr:capture:active_capture_count EQ 1 }">
					<MvCOMMENT>
					|
					| To avoid RAW mode outputting the same template more than once, we only append to
					| the ordered output when looking at a top level capture (ie, all captured descendants
					| of an already captured item will be discarded as they're already included in the
					| ancestral capture).
					|
					</MvCOMMENT>

					<MvASSIGN NAME = "g.Session:_mgr:capture:ordered_capture_count"	VALUE = "{ miva_array_insert_ref( g.Session:_mgr:capture:ordered_captures, l.capture_item:content[ l.capture_item:content_count ], -1 ) }">
				</MvIF>

				<MvCAPTURE VARIABLE = "l.content:render_start" STANDARDOUTPUTLEVEL = "">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Render_Start( l.module, l.item, l.settings, l.item_settings, l.param ) }">
				</MvCAPTURE>

				<MvCOMMENT>
				|
				| Allow content to bubble up
				|
				</MvCOMMENT>

				<MvEVAL EXPR = "{ l.content:render_start }">
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Component_Render_End" PARAMETERS = "settings var, item, param" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.settings:_mgr:lookup, l.item ) }">
		<MvFUNCTIONRETURN> <MvCOMMENT> TODO </MvCOMMENT>
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.item_settings" VARIABLE = "l.settings">
		<MvMEMBER NAME = "{ l.item }">
	</MvREFERENCEARRAY>

	<MvREFERENCEARRAY NAME = "l.module" VARIABLE = "l.settings">
		<MvMEMBER NAME = "_mgr">
		<MvMEMBER NAME = "lookup">
		<MvMEMBER NAME = "{ l.item }">
		<MvMEMBER NAME = "module">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ ISNULL s.HTTP_X_Miva_Partial_Render }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Render_End( l.module, l.item, l.settings, l.item_settings, l.param ) }">
	<MvELSE>
		<MvREFERENCEARRAY NAME = "l.capture_item" VARIABLE = "g.Session:_mgr:capture:item_lookup">
			<MvMEMBER NAME = "{ l.item }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ISNULL l.capture_item }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Render_End( l.module, l.item, l.settings, l.item_settings, l.param ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.param_hash" VALUE = "{ crypto_md5( l.param ) }">

			<MvIF EXPR = "{ NOT l.capture_item:include_all AND NOT miva_member_exists( l.capture_item:hashes, l.param_hash ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Render_End( l.module, l.item, l.settings, l.item_settings, l.param ) }">
			<MvELSE>
				<MvREFERENCEARRAY NAME = "l.capture_entry" VARIABLE = "g.Session:_mgr:capture:active_captures">
					<MvDIMENSION INDEX = "{ g.Session:_mgr:capture:active_capture_count }">
				</MvREFERENCEARRAY>

				<MvCAPTURE VARIABLE = "l.capture_entry:render_end" STANDARDOUTPUTLEVEL = "">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].ComponentModule_Render_End( l.module, l.item, l.settings, l.item_settings, l.param ) }">
				</MvCAPTURE>

				<MvASSIGN NAME = "g.Session:_mgr:capture:active_capture_count" VALUE = "{ miva_array_delete( g.Session:_mgr:capture:active_captures, g.Session:_mgr:capture:active_capture_count, 1 ) }">

				<MvCOMMENT>
				|
				| Allow content to bubble up
				|
				</MvCOMMENT>

				<MvEVAL EXPR = "{ l.capture_entry:render_end }">
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Fragment_Render" PARAMETERS = "page_settings var, code, share var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code_Cached( l.code, l.fragment ) }">	<MvFUNCTIONRETURN>
	<MvELSE>																							<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Fragment_Render_LowLevel( l.page_settings, l.fragment, l.share ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Fragment_Render_LowLevel" PARAMETERS = "page_settings var, fragment var, share var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.fragment:fragment }">																				<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.fragment:templ_id, l.template ) }">	<MvFUNCTIONRETURN>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Feature_PGB_UT ].PageBuilderPreview_OverrideFragmentSettings( l.fragment ) }">

	<MvASSIGN NAME = "l.fragment:settings:_mgr"					VALUE = "">
	<MvASSIGN NAME = "l.fragment:settings:page"					VALUE = "">

	<MvIF EXPR = "{ NOT ISNULL l.page_settings:page }">
		<MvASSIGN NAME = "l.fragment:settings:page:id"			VALUE = "{ l.page_settings:page:id }">
		<MvASSIGN NAME = "l.fragment:settings:page:templ_id"	VALUE = "{ l.page_settings:page:templ_id }">
		<MvASSIGN NAME = "l.fragment:settings:page:version_id"	VALUE = "{ l.page_settings:page:version_id }">
		<MvASSIGN NAME = "l.fragment:settings:page:admin"		VALUE = "{ l.page_settings:page:admin }">
		<MvASSIGN NAME = "l.fragment:settings:page:code"		VALUE = "{ l.page_settings:page:code }">
		<MvASSIGN NAME = "l.fragment:settings:page:name"		VALUE = "{ l.page_settings:page:name }">
		<MvASSIGN NAME = "l.fragment:settings:page:title"		VALUE = "{ l.page_settings:page:title }">
		<MvASSIGN NAME = "l.fragment:settings:page:xref_id"		VALUE = "{ l.page_settings:page:xref_id }">
		<MvASSIGN NAME = "l.fragment:settings:page:user_id"		VALUE = "{ l.page_settings:page:user_id }">
		<MvASSIGN NAME = "l.fragment:settings:page:layout"		VALUE = "{ l.page_settings:page:layout }">
		<MvASSIGN NAME = "l.fragment:settings:page:fragment"	VALUE = "{ l.page_settings:page:fragment }">
		<MvASSIGN NAME = "l.fragment:settings:page:secure"		VALUE = "{ l.page_settings:page:secure }">
		<MvASSIGN NAME = "l.fragment:settings:page:public"		VALUE = "{ l.page_settings:page:public }">
		<MvASSIGN NAME = "l.fragment:settings:page:ui_id"		VALUE = "{ l.page_settings:page:ui_id }">
		<MvASSIGN NAME = "l.fragment:settings:page:cache"		VALUE = "{ l.page_settings:page:cache }">
		<MvASSIGN NAME = "l.fragment:settings:page:cacheset"	VALUE = "{ l.page_settings:page:cacheset }">
	</MvIF>

	<MvASSIGN NAME = "l.fragment:settings:fragment:id"			VALUE = "{ l.fragment:id }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:templ_id"	VALUE = "{ l.fragment:templ_id }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:version_id"	VALUE = "{ l.fragment:version_id }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:admin"		VALUE = "{ l.fragment:admin }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:code"		VALUE = "{ l.fragment:code }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:name"		VALUE = "{ l.fragment:name }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:title"		VALUE = "{ l.fragment:title }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:xref_id"		VALUE = "{ l.fragment:xref_id }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:user_id"		VALUE = "{ l.fragment:user_id }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:layout"		VALUE = "{ l.fragment:layout }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:fragment"	VALUE = "{ l.fragment:fragment }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:secure"		VALUE = "{ l.fragment:secure }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:public"		VALUE = "{ l.fragment:public }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:ui_id"		VALUE = "{ l.fragment:ui_id }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:cache"		VALUE = "{ l.fragment:cache }">
	<MvASSIGN NAME = "l.fragment:settings:fragment:cacheset"	VALUE = "{ l.fragment:cacheset }">

	<MvCOMMENT>
	|
	| Copy non-existent settings
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.copied_settings"	VALUE = "{ l.page_settings }">
	<MvASSIGN NAME = "l.merged_settings"	VALUE = "{ l.fragment:settings }">
	<MvEVAL EXPR = "{ miva_struct_merge_ref( l.copied_settings, l.merged_settings ) }">

	<MvCOMMENT>
	|
	| Configure the URI data callback
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ miva_struct_member_callback( l.merged_settings:uridata, 'TemplateManager_Render_Page_URIData_Callback', l.merged_settings ) }">

	<MvCOMMENT>
	|
	| Create a link between the fragment:share and share variables
	|
	</MvCOMMENT>

	<MvREFERENCE NAME = "l.merged_settings:fragment:share" VARIABLE = "l.share">

	<MvCOMMENT>
	|
	| Load the items
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.item_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].ItemModuleList_Load_Fragment_Render( l.fragment:id, l.fragment:settings:_mgr ) }">
	<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Feature_Filename_TUI_DB ].ItemExtensionModuleList_Load_Fragment_Render( l.fragment:id, l.fragment:settings:_mgr ) }">

	<MvCOMMENT>
	|
	| Build the merge settings _mgr:items array and _mgr:lookup structure based on the passed in items and the items associated with the fragment
	|
	</MvCOMMENT>

	<MvREFERENCE NAME = "l.merged_settings:_mgr" VARIABLE = "l.fragment:settings:_mgr">

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.copied_settings:_mgr:items">
		<MvREFERENCEARRAY NAME = "l.lookup" VARIABLE = "l.merged_settings:_mgr:lookup">
			<MvMEMBER NAME = "{ l.item:item_code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ISNULL l.lookup }">
			<MvASSIGN NAME = "l.lookup"	VALUE = "{ l.item }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert_ref( l.merged_settings:_mgr:items, l.lookup, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Initialize the items
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.fragment:settings:_mgr:items" COUNT = "{ l.item_count }">
		<MvREFERENCEARRAY NAME = "l.page_item_settings" VARIABLE = "l.page_settings">
			<MvMEMBER NAME = "{ l.item:item_code }">
		</MvREFERENCEARRAY>

		<MvREFERENCEARRAY NAME = "l.fragment_item_settings" VARIABLE = "l.fragment:settings">
			<MvMEMBER NAME = "{ l.item:item_code }">
		</MvREFERENCEARRAY>

		<MvREFERENCEARRAY NAME = "l.merged_item_settings" VARIABLE = "l.merged_settings">
			<MvMEMBER NAME = "{ l.item:item_code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.item:initialized }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.item:initialized" VALUE = 1>

		<MvCOMMENT>
		|
		| Initialize the primary item
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.item:module:module ].ComponentModule_Initialize_Fragment( l.item:module, l.item:item_code, l.page_settings, l.page_item_settings, l.fragment:settings, l.fragment_item_settings, l.merged_settings, l.merged_item_settings ) }">

		<MvCOMMENT>
		|
		| Initialize any extensions
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.itemextension" ARRAY = "l.item:extensions">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.itemextension:module ].ComponentModule_Initialize_Fragment( l.itemextension, l.item:item_code, l.page_settings, l.page_item_settings, l.fragment:settings, l.fragment_item_settings, l.merged_settings, l.merged_item_settings ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvASSIGN NAME = "l.null"													VALUE = "{ [ g.Store_Template_Path $ l.template:filename ].Template_Render( l.fragment, l.merged_settings ) }">
	<MvASSIGN NAME = "g.Session:_mgr:fragments" MEMBER = "{ l.fragment:code }"	VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Item_Initialized" PARAMETERS = "all_settings var, item_code" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.lookup" VARIABLE = "l.all_settings:_mgr:lookup">
		<MvMEMBER NAME = "{ l.item_code }">
	</MvREFERENCEARRAY>

	<MvFUNCTIONRETURN VALUE = "{ l.lookup:initialized EQ 1 }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Reference_Cache" PARAMETERS = "settings var, key, cache_entry var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.cache_entry:data" VARIABLE = "l.settings">
		<MvMEMBER NAME = "_mgr">
		<MvMEMBER NAME = "cache">
		<MvMEMBER NAME = "{ crypto_md5( l.key ) }">
	</MvREFERENCEARRAY>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_LockFile" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.MerchantPath $ crypto_md5( l.page:code $ ' settings modification lock file' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ManagedProperty_LockFile" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.MerchantPath $ crypto_md5( l.managedproperty:type $ ':' $ l.managedproperty:code $ ':' $ l.managedproperty:product_id $ ':' $ l.managedproperty:cat_id $ ': managed property modification lock file' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_ExternalFiles" PARAMETERS = "output_root_option, output_dir_root, template_source var, referrer" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sources" 						VALUE = "">
	<MvASSIGN NAME = "l.source_count" 					VALUE = 0>

	<MvASSIGN NAME = "l.tag_start" 						VALUE = "{ TUI_HTML_Parse_Tag_Start( l.template_source, 1, l.tag ) }">

	<MvWHILE EXPR = "{ l.tag_start }">
		<MvEVAL EXPR = "{ TemplateManager_ExternalSourceList_ProcessTag( l.tag, l.template_source, l.source_count, l.sources ) }">

		<MvASSIGN NAME = "l.tag_start" VALUE = "{ TUI_HTML_Parse_Tag_Start( l.template_source, l.tag_start + len_var( l.tag:tag ), l.tag ) }">
	</MvWHILE>

	<MvIF EXPR = "{ NOT TemplateManager_Export_ExternalSourceList_TokenizeAndCopy( l.source_count, l.sources, l.output_root_option, l.output_dir_root, l.template_source ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_ExternalSourceList_TokenizeAndCopy" PARAMETERS = "source_count, sources var, output_root_option, output_dir_root, template_source var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" 			VALUE = "{ miva_array_sort( l.sources, 'TemplateManager_ExternalSourceList_Sort', l.null ) }">
	<MvASSIGN NAME = "l.basehref_path" 	VALUE = "{ TemplateManager_Get_Basehref_Path() }">

	<MvFOREACH ITERATOR = "l.source" ARRAY = "l.sources" COUNT = "{ l.source_count }">
		<MvASSIGN NAME = "l.resource_path" VALUE = "{ glosub( l.source, '\\', '/' ) }">

		<MvIF EXPR = "{ TemplateManager_Export_ExternalSource_SanitizeOutputPath( l.source, l.basehref_path, '', l.tokenized_source, l.destination_file ) }">
			<MvIF EXPR = "{ ( '.css' CIN l.source ) NE ( len_var( l.source ) - 3 ) }">
				<MvIF EXPR = "{ NOT TemplateManager_Export_Copy_DestinationFile_WithFile( l.output_root_option, l.output_dir_root, l.resource_path, l.destination_file ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ TemplateManager_Export_ReadResource( l.source, l.css_source ) }">
					<MvASSIGN NAME = "l.extfiles_exported" VALUE = "{ TemplateManager_Export_ExternalFiles_CSS( l.output_root_option, l.output_dir_root, l.css_source, l.destination_file ) }">

					<MvIF EXPR = "{ NOT TemplateManager_Export_Copy_DestinationFile_WithContent( l.output_root_option, l.output_dir_root, l.css_source, l.destination_file ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.template_source" VALUE = "{ glosub( l.template_source, l.source, l.tokenized_source ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_ReadResource" PARAMETERS = "file, source var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.source_file" 		VALUE = "{ l.file }">
		
	<MvIF EXPR = "{ '/' CIN l.file NE 1 }">
		<MvASSIGN NAME = "l.source_file" 	VALUE = "{ TemplateManager_ConcatenatePath( TemplateManager_Get_Basehref_Path(), l.source_file ) }">
	</MvIF>

	<MvASSIGN NAME = "l.source_file" 		VALUE = "{ TemplateManager_SanitizePath( l.source_file ) }">

	<MvIF EXPR = "{ sisdir( l.source_file ) OR NOT sexists( l.source_file ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ file_read( l.source_file, 'script', l.source ) LE 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_Copy_DestinationFile_WithFile" PARAMETERS = "output_root_option, output_dir_root, file, destination_file" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.file }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ '/' CIN l.file NE 1 }">
		<MvASSIGN NAME = "l.file" 	VALUE = "{ TemplateManager_ConcatenatePath( TemplateManager_Get_Basehref_Path(), l.file ) }">
	</MvIF>

	<MvASSIGN NAME = "l.file" 		VALUE = "{ TemplateManager_SanitizePath( l.file ) }">

	<MvIF EXPR = "{ sisdir( l.file ) OR NOT sexists( l.file ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ TemplateManager_Export_Copy_DestinationFile_Generate_ExternalFile( l.output_dir_root, l.destination_file, l.external_file ) }">

	<MvIF EXPR = "{ TemplateManager_Export_Copy_DestinationFile_ShouldCopyFile( g.TUI_External_Files, l.external_file ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( g.TUI_External_Files, l.external_file, -1 ) }">

		<MvIF EXPR = "{ NOT TemplateManager_Export_Copy_DestinationFile_CopyFile_WithFile( l.output_root_option, l.file, l.external_file ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_Copy_DestinationFile_WithContent" PARAMETERS = "output_root_option, output_dir_root, content var, destination_file" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Export_Copy_DestinationFile_Generate_ExternalFile( l.output_dir_root, l.destination_file, l.external_file ) }">

	<MvIF EXPR = "{ TemplateManager_Export_Copy_DestinationFile_ShouldCopyFile( g.TUI_External_Files, l.external_file ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( g.TUI_External_Files, l.external_file, -1 ) }">

		<MvIF EXPR = "{ NOT TemplateManager_Export_Copy_DestinationFile_CopyFile_WithContent( l.output_root_option, l.content, l.external_file ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_Copy_DestinationFile_Generate_ExternalFile" PARAMETERS = "output_dir_root, destination_file, external_file var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len_var( l.destination_file ) GT 100 }">
		<MvASSIGN NAME = "l.framework_disk_destination_dir_relative"	VALUE = "/files/">
		<MvASSIGN NAME = "l.framework_disk_destination_filename"		VALUE = "{ crypto_md5( l.destination_file ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.framework_disk_destination_dir_relative"	VALUE = "{ [ g.Module_Library_Utilities ].BasePath( l.destination_file ) }">
		<MvASSIGN NAME = "l.framework_disk_destination_filename"		VALUE = "{ [ g.Module_Library_Utilities ].BaseName( l.destination_file ) }">
	</MvIF>

	<MvASSIGN NAME = "l.external_file" 									VALUE = "">
	<MvASSIGN NAME = "l.external_file:framework_disk_destination_dir"	VALUE = "{ TemplateManager_ConcatenatePath( l.output_dir_root, l.framework_disk_destination_dir_relative ) }">
	<MvASSIGN NAME = "l.external_file:framework_disk_destination"		VALUE = "{ TemplateManager_ConcatenatePath( l.external_file:framework_disk_destination_dir, l.framework_disk_destination_filename ) }">
	<MvASSIGN NAME = "l.external_file:destination"						VALUE = "{ l.destination_file }">
	<MvASSIGN NAME = "l.external_file:source"							VALUE = "{ TemplateManager_ConcatenatePath( l.framework_disk_destination_dir_relative, l.framework_disk_destination_filename ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_Copy_DestinationFile_ShouldCopyFile" PARAMETERS = "external_files var, external_file var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ miva_array_search( l.external_files, 1, l.search_file, '( l.search_file:source EQ l.external_file:source ) AND ( l.search_file:destination EQ l.external_file:destination )' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_Copy_DestinationFile_CopyFile_WithFile" PARAMETERS = "output_root_option, file, external_file var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.output_root_option EQ 'D' }">
		<MvIF EXPR = "{ NOT fexists( l.external_file:framework_disk_destination_dir ) }">
			<MvIF EXPR = "{ NOT TemplateManager_Create_Export_Path( l.output_root_option, l.external_file:framework_disk_destination_dir ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ fisdir( l.external_file:framework_disk_destination ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ sfcopy( l.file, l.external_file:framework_disk_destination ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ fchmod( l.external_file:framework_disk_destination, '0644' ) }">
	<MvELSEIF EXPR = "{ l.output_root_option EQ 'H' }">
		<MvIF EXPR = "{ NOT sexists( l.external_file:framework_disk_destination_dir ) }">
			<MvIF EXPR = "{ NOT TemplateManager_Create_Export_Path( l.output_root_option, l.external_file:framework_disk_destination_dir ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ sisdir( l.external_file:framework_disk_destination ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ scopy( l.file, l.external_file:framework_disk_destination ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ schmod( l.external_file:framework_disk_destination, '0644' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_Copy_DestinationFile_CopyFile_WithContent" PARAMETERS = "output_root_option, content var, external_file var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.output_root_option EQ 'D' }">
		<MvIF EXPR = "{ NOT fexists( l.external_file:framework_disk_destination_dir ) }">
			<MvIF EXPR = "{ NOT TemplateManager_Create_Export_Path( l.output_root_option, l.external_file:framework_disk_destination_dir ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ fdelete( l.external_file:framework_disk_destination ) }">

		<MvIF EXPR = "{ file_create( l.external_file:framework_disk_destination, 'data', l.content ) NE -1 }">
			<MvASSIGN NAME = "l.null" VALUE = "{ fchmod( l.external_file:framework_disk_destination, '0644' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.output_root_option EQ 'H' }">
		<MvIF EXPR = "{ NOT sexists( l.external_file:framework_disk_destination_dir ) }">
			<MvIF EXPR = "{ NOT TemplateManager_Create_Export_Path( l.output_root_option, l.external_file:framework_disk_destination_dir ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( l.external_file:framework_disk_destination ) }">

		<MvIF EXPR = "{ file_create( l.external_file:framework_disk_destination, 'script', l.content ) NE -1 }">
			<MvASSIGN NAME = "l.null" VALUE = "{ schmod( l.external_file:framework_disk_destination, '0644' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_ExternalFiles_CSS" PARAMETERS = "output_root_option, output_dir_root, template_source var, referrer" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sources" 						VALUE = "">
	<MvASSIGN NAME = "l.source_count" 					VALUE = 0>

	<MvEVAL EXPR = "{ TemplateManager_ExternalSourceList_ProcessCSSSource( l.template_source, l.referrer, l.source_count, l.sources ) }">

	<MvIF EXPR = "{ NOT TemplateManager_Export_ExternalSourceList_TokenizeAndCopy_CSS( l.source_count, l.sources, l.output_root_option, l.output_dir_root, l.template_source ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ExternalSourceList_ProcessCSSSource" PARAMETERS = "template_source var, referrer, source_count var, sources var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ 'url(' CIN l.template_source }">
		<MvASSIGN NAME = "l.url_start_pos" 					VALUE = "{ indexofi( 'url(', l.template_source, 1 ) }">

		<MvWHILE EXPR = "{ l.url_start_pos }">
			<MvASSIGN NAME = "l.url_end_pos" 				VALUE = "{ indexofi( ')', l.template_source, l.url_start_pos + 4 ) }">

			<MvIF EXPR = "{ l.url_end_pos EQ 0 }">
				<MvWHILESTOP>
			</MvIF>

			<MvASSIGN NAME = "l.url_src" 					VALUE = "{ substring_var( l.template_source, l.url_start_pos + 4, l.url_end_pos - ( l.url_start_pos + 4 ) ) }">
			<MvASSIGN NAME = "l.url_src" 					VALUE = "{ trim( l.url_src ) }">
			<MvASSIGN NAME = "l.url_src_first_char" 		VALUE = "{ substring_var( l.url_src, 1, 1 ) }">
			<MvASSIGN NAME = "l.url_src_last_char" 			VALUE = "{ substring_var( l.url_src, len_var( l.url_src ), 1 ) }">

			<MvASSIGN NAME = "l.url_src_first_char" 		VALUE = "{ substring_var( l.url_src, 1, 1 ) }">
			<MvWHILE EXPR = "{ l.url_src_first_char EQ '\'' OR l.url_src_first_char EQ '"' }">
				<MvASSIGN NAME = "l.url_src" 				VALUE = "{ substring_var( l.url_src, 2, len_var( l.url_src ) - 1 ) }">
				<MvASSIGN NAME = "l.url_src_first_char" 	VALUE = "{ substring_var( l.url_src, 1, 1 ) }">
			</MvWHILE>

			<MvASSIGN NAME = "l.url_src_last_char" 			VALUE = "{ substring_var( l.url_src, len_var( l.url_src ), 1 ) }">
			<MvWHILE EXPR = "{ l.url_src_last_char EQ '\'' OR l.url_src_last_char EQ '"' }">
				<MvASSIGN NAME = "l.url_src" 				VALUE = "{ substring_var( l.url_src, 1, len_var( l.url_src ) - 1 ) }">
				<MvASSIGN NAME = "l.url_src_last_char" 		VALUE = "{ substring_var( l.url_src, len_var( l.url_src ), 1 ) }">
			</MvWHILE>

			<MvASSIGN NAME = "l.url_src" 					VALUE = "{ trim( l.url_src ) }">
			<MvASSIGN NAME = "l.source_count" 				VALUE = "{ TemplateManager_ExternalSourceList_Append_CSS( l.url_src, l.referrer, l.source_count, l.sources ) }">

			<MvASSIGN NAME = "l.url_start_pos" 				VALUE = "{ indexofi( 'url(', l.template_source, l.url_end_pos ) }">
		</MvWHILE>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_ExternalSourceList_TokenizeAndCopy_CSS" PARAMETERS = "source_count, sources var, output_root_option, output_dir_root, template_source var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" 					VALUE = "{ miva_array_sort( l.sources, 'TemplateManager_ExternalSourceList_Sort_CSS', l.null ) }">
	<MvASSIGN NAME = "l.basehref_path" 			VALUE = "{ TemplateManager_Get_Basehref_Path() }">

	<MvFOREACH ITERATOR = "l.source" ARRAY = "l.sources" COUNT = "{ l.source_count }">
		<MvASSIGN NAME = "l.resource_path" 		VALUE = "{ glosub( l.source:source, '\\', '/' ) }">
		<MvASSIGN NAME = "l.referrer" 			VALUE = "{ glosub( l.source:referrer, '\\', '/' ) }">

		<MvASSIGN NAME = "l.referrer_path"		VALUE = "">
		<MvASSIGN NAME = "l.temp_path"			VALUE = "{ l.referrer }">
		<MvASSIGN NAME = "l.slash"				VALUE = "{ '/' IN l.temp_path }">

		<MvWHILE EXPR = "{ l.slash GT 0 }">
			<MvASSIGN NAME = "l.referrer_path"	VALUE = "{ l.referrer_path $ substring_var( l.temp_path, 1, l.slash ) }">
			<MvASSIGN NAME = "l.temp_path"		VALUE = "{ substring_var( l.temp_path, l.slash + 1, len_var( l.temp_path ) - l.slash ) }">
			<MvASSIGN NAME = "l.slash"			VALUE = "{ '/' IN l.temp_path }">
		</MvWHILE>

		<MvIF EXPR = "{ TemplateManager_Export_ExternalSource_SanitizeOutputPath( l.resource_path, l.basehref_path, l.referrer_path, l.tokenized_source, l.destination_file ) }">
			<MvIF EXPR = "{ NOT TemplateManager_Export_Copy_DestinationFile_WithFile( l.output_root_option, l.output_dir_root, l.resource_path, l.destination_file ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.template_source" VALUE = "{ glosub( l.template_source, l.source:source, l.tokenized_source ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_ExternalSource_SanitizeOutputPath" PARAMETERS = "resource_path, basehref_path, referrer, tokenized_source var, destination_file var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
		basehref_path		: /mm5/
		referrer			: /mm5/css/00000001/ 
		source				: ../../graphics/00000001/image_1.jpg
		tokenized_source	: ../../graphics/%STORE_ID%/image_1.jpg
		destination_file	: /%STORE_BASEHREF%/graphics/%STORE_ID%/image_1.jpg

		basehref_path		: /mm5/
		referrer			: /mm5/css/00000001/ 
		source				: ../../css/../graphics/00000001/image_1.jpg
		tokenized_source	: ../../css/../graphics/%STORE_ID%/image_1.jpg
		destination_file	: /%STORE_BASEHREF%/graphics/%STORE_ID%/image_1.jpg

		basehref_path		: /mm5/
		referrer			: css/00000001/ 
		source				: ../../../../graphics/00000001/image_1.jpg
		tokenized_source	: graphics/%STORE_ID%/image_1.jpg
		destination_file	: /%STORE_BASEHREF%/graphics/%STORE_ID%/image_1.jpg

		basehref_path		: /mm5/
		referrer			:  
		source				: ../../images/image_1.jpg
		outcome				: images/image_1.jpg
		tokenized_source	: graphics/%STORE_ID%/image_1.jpg
		destination_file	: /%STORE_BASEHREF%/graphics/%STORE_ID%/image_1.jpg

		basehref_path		: /mm5/
		referrer			:  
		source				: /mm5/../../images/image_1.jpg
		tokenized_source	: /mm5/images/image_1.jpg
		destination_file	: /%STORE_BASEHREF%/graphics/%STORE_ID%/image_1.jpg

		basehref_path		: /mm5/
		referrer			:  
		source				: /mm5/css/00000001/../images/image_1.jpg
		tokenized_source	: /mm5/css/images/image_1.jpg
		destination_file	: /%STORE_BASEHREF%/css/images/image_1.jpg
	</MvCOMMENT>

	<MvASSIGN NAME = "l.referrer"		VALUE = "{ glosub( l.referrer, '/%STORE_BASEHREF%/', l.basehref_path ) }">
	<MvASSIGN NAME = "l.referrer"		VALUE = "{ glosub( l.referrer, '%STORE_ID%/', padl( g.Store:id, 8, '0' ) $ '/' ) }">
	<MvASSIGN NAME = "l.resource_path"	VALUE = "{ glosub( l.resource_path, '/%STORE_BASEHREF%/', l.basehref_path ) }">
	<MvASSIGN NAME = "l.resource_path"	VALUE = "{ glosub( l.resource_path, '%STORE_ID%/', padl( g.Store:id, 8, '0' ) $ '/' ) }">

	<MvIF EXPR = "{ ( '://' CIN l.resource_path ) OR ( '&mvt' CIN l.resource_path ) OR ( '//' CIN l.resource_path EQ 1 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ '/' CIN l.resource_path EQ 1 }">
		<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Export_ExternalSource_SanitizeOutputPath_Absolute( l.resource_path, l.basehref_path, l.tokenized_source, l.destination_file ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Relative URL
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ '/' CIN l.referrer NE 1 }">
		<MvASSIGN NAME = "l.referrer" 				VALUE = "{ TemplateManager_ConcatenatePath( l.basehref_path, l.referrer ) }">
	<MvELSEIF EXPR = "{ l.basehref_path CIN l.referrer NE 1 }">
		<MvCOMMENT>
		|
		| Referrer is not inside the base href, convert tokenized/destination path to absolute and put it in the base href path
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.resource_path" 			VALUE = "{ '/' $ l.resource_path }">

		<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Export_ExternalSource_SanitizeOutputPath_Absolute( l.resource_path, l.basehref_path, l.tokenized_source, l.destination_file ) }">
	</MvIF>

	<MvASSIGN NAME = "l.tmp_path" 					VALUE = "{ TemplateManager_ConcatenatePath( l.referrer, l.resource_path ) }">
	<MvASSIGN NAME = "l.path_array"					VALUE = "">

	<MvFOREACH ITERATOR = "l.path" ARRAY = "l.paths" COUNT = "{ [ g.Module_Library_Utilities ].SplitStringAndTrim( l.tmp_path, '/', l.paths ) }">
		<MvIF EXPR = "{ ISNULL l.path }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.path NE '..' }">			<MvASSIGN NAME = "l.path_count" VALUE = "{ miva_array_insert( l.path_array, l.path, -1 ) }">
		<MvELSEIF EXPR = "{ l.path_count }">		<MvASSIGN NAME = "l.path_count" VALUE = "{ miva_array_delete( l.path_array, l.path_count, 1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.tmp_path"					VALUE = "">

	<MvFOREACH ITERATOR = "l.path" ARRAY = "l.path_array" COUNT = "{ l.path_count }">
		<MvIF EXPR = "{ ISNULL l.path }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.tmp_path" 				VALUE = "{ l.tmp_path $ '/' $ l.path }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.basehref_path CIN l.tmp_path EQ 1 }">
		<MvASSIGN NAME = "l.tokenized_source"		VALUE = "{ glosub( l.resource_path, padl( g.Store:id, 8, '0' ) $ '/', '%STORE_ID%/' ) }">
		<MvASSIGN NAME = "l.destination_file" 		VALUE = "{ substring_var( l.tmp_path, len_var( l.basehref_path ), len_var( l.tmp_path ) - len_var( l.basehref_path ) + 1 ) }">
		<MvASSIGN NAME = "l.destination_file"		VALUE = "{ glosub( l.destination_file, padl( g.Store:id, 8, '0' ) $ '/', '%STORE_ID%/' ) }">
		<MvASSIGN NAME = "l.destination_file" 		VALUE = "{ TemplateManager_ConcatenatePath( '/%STORE_BASEHREF%/', l.destination_file ) }">

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Keep relative path, but make relative to basehref directory
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ '/' CIN l.tmp_path EQ 1 }"> 	<MvASSIGN NAME = "l.resource_path" VALUE = "{ substring_var( l.tmp_path, 2, len_var( l.tmp_path ) ) }">
	<MvELSE> 										<MvASSIGN NAME = "l.resource_path" VALUE = "{ l.tmp_path }">
	</MvIF>

	<MvASSIGN NAME = "l.tokenized_source"			VALUE = "{ glosub( l.resource_path, padl( g.Store:id, 8, '0' ) $ '/', '%STORE_ID%/' ) }">
	<MvASSIGN NAME = "l.destination_file" 			VALUE = "{ TemplateManager_ConcatenatePath( '/%STORE_BASEHREF%/', l.tokenized_source ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_ExternalSource_SanitizeOutputPath_Absolute" PARAMETERS = "resource_path, basehref_path, tokenized_source var, destination_file var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ '../' CIN l.resource_path EQ 0 }">
		<MvIF EXPR = "{	l.basehref_path CIN l.resource_path EQ 1 }">
			<MvASSIGN NAME = "l.resource_path" 		VALUE = "{ substring_var( l.resource_path, len_var( l.basehref_path ), len_var( l.resource_path ) - len_var( l.basehref_path ) + 1 ) }">
		</MvIF>

		<MvASSIGN NAME = "l.tokenized_source"		VALUE = "{ glosub( l.resource_path, padl( g.Store:id, 8, '0' ) $ '/', '%STORE_ID%/' ) }">
		<MvASSIGN NAME = "l.tokenized_source" 		VALUE = "{ TemplateManager_ConcatenatePath( '/%STORE_BASEHREF%/', l.tokenized_source ) }">
		<MvASSIGN NAME = "l.destination_file" 		VALUE = "{ l.tokenized_source }">

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.path_array"					VALUE = "">

	<MvFOREACH ITERATOR = "l.path" ARRAY = "l.paths" COUNT = "{ [ g.Module_Library_Utilities ].SplitStringAndTrim( l.resource_path, '/', l.paths ) }">
		<MvIF EXPR = "{ ISNULL l.path }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.path NE '..' }">			<MvASSIGN NAME = "l.path_count" VALUE = "{ miva_array_insert( l.path_array, l.path, -1 ) }">
		<MvELSEIF EXPR = "{ l.path_count }">		<MvASSIGN NAME = "l.path_count" VALUE = "{ miva_array_delete( l.path_array, l.path_count, 1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.resource_path"				VALUE = "">

	<MvFOREACH ITERATOR = "l.path" ARRAY = "l.path_array" COUNT = "{ l.path_count }">
		<MvIF EXPR = "{ ISNULL l.path }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.resource_path" 			VALUE = "{ l.resource_path $ '/' $ l.path }">
	</MvFOREACH>

	<MvIF EXPR = "{	l.basehref_path CIN l.resource_path EQ 1 }">
		<MvASSIGN NAME = "l.resource_path" 			VALUE = "{ substring_var( l.resource_path, len_var( l.basehref_path ), len_var( l.resource_path ) - len_var( l.basehref_path ) + 1 ) }">
	</MvIF>

	<MvASSIGN NAME = "l.tokenized_source"			VALUE = "{ glosub( l.resource_path, padl( g.Store:id, 8, '0' ) $ '/', '%STORE_ID%/' ) }">
	<MvASSIGN NAME = "l.tokenized_source" 			VALUE = "{ TemplateManager_ConcatenatePath( '/%STORE_BASEHREF%/', l.tokenized_source ) }">
	<MvASSIGN NAME = "l.destination_file" 			VALUE = "{ l.tokenized_source }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_ResourceFilename_StripBranchTemplateDirectory" PARAMETERS = "managed_directory, filepath" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Strip the /%STORE_BASEHREF%/ prefix if present to simplify processing, then add it back later if present
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.beginswith_basehref"	VALUE = "{ ( '/%STORE_BASEHREF%/' IN l.filepath ) EQ 1 }">

	<MvIF EXPR = "{ l.beginswith_basehref }">
		<MvASSIGN NAME = "l.filepath"			VALUE = "{ substring_var( l.filepath, len( '/%STORE_BASEHREF%/' ) + 1, len_var( l.filepath ) - len( '/%STORE_BASEHREF%/' ) ) }">
		<MvASSIGN NAME = "l.path_is_absolute"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.path_is_absolute"	VALUE = "{ ( '/' IN l.filepath ) EQ 1 }">
	</MvIF>

	<MvCOMMENT>
	|
	| There are three possible patterns for the original file:
	|
	|	[managed_directory]/00000001/[tmpldir/]<filepath>	For paths inside the default directory
	|	[tmpldir/]<filepath>								For relative paths outside our managed directory
	|	/[tmpldir/]<filepath>								For absolute paths
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.path_is_absolute }">
		<MvIF EXPR = "{ ( NOT ISNULL g.Store:branch:tmpldir ) AND ( ( ( '/' $ g.Store:branch:tmpldir ) IN l.filepath ) EQ 1 ) }">	<MvASSIGN NAME = "l.stripped_filepath" VALUE = "{ substring_var( l.filepath, len_var( g.Store:branch:tmpldir ) + 2, len_var( l.filepath ) - len_var( g.Store:branch:tmpldir ) - 1 ) }">
		<MvELSE>																													<MvASSIGN NAME = "l.stripped_filepath" VALUE = "{ l.filepath }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ TemplateManager_ConcatenatePath( '/%BRANCH_TMPLDIR%/', l.stripped_filepath ) }">
	</MvIF>

	<MvASSIGN NAME = "l.managed_path"			VALUE = "{ TemplateManager_ConcatenatePath( l.managed_directory, '%STORE_ID%' ) $ '/' }">

	<MvCOMMENT>
	|
	| Detect and strip managed path
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( l.managed_path IN l.filepath ) EQ 1 }">
		<MvASSIGN NAME = "l.inside_managed"		VALUE = 1>
		<MvASSIGN NAME = "l.base_filepath"		VALUE = "{ substring_var( l.filepath, len_var( l.managed_path ) + 1, len_var( l.filepath ) - len_var( l.managed_path ) ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.inside_managed"		VALUE = 0>
		<MvASSIGN NAME = "l.base_filepath"		VALUE = "{ l.filepath }">
	</MvIF>

	<MvCOMMENT>
	|
	| Strip templdir, if present
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( NOT ISNULL g.Store:branch:tmpldir ) AND ( ( g.Store:branch:tmpldir IN l.base_filepath ) EQ 1 ) }">
		<MvASSIGN NAME = "l.base_filepath"		VALUE = "{ substring_var( l.base_filepath, len_var( g.Store:branch:tmpldir ) + 1, len_var( l.base_filepath ) - len_var( g.Store:branch:tmpldir ) ) }">
	</MvIF>

	<MvIF EXPR = "{ l.inside_managed }">	<MvASSIGN NAME = "l.directory" VALUE = "{ TemplateManager_ConcatenatePath( l.managed_path, '/%BRANCH_TMPLDIR%/' ) }">
	<MvELSE>								<MvASSIGN NAME = "l.directory" VALUE = "/%BRANCH_TMPLDIR%/">
	</MvIF>

	<MvASSIGN NAME = "l.stripped_filepath"		VALUE = "{ TemplateManager_ConcatenatePath( l.directory, l.base_filepath ) }">

	<MvIF EXPR = "{ l.beginswith_basehref }">
		<MvASSIGN NAME = "l.stripped_filepath"	VALUE = "{ TemplateManager_ConcatenatePath( '/%STORE_BASEHREF%/', l.stripped_filepath ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.stripped_filepath }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Get_Basehref_Path" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.imageroot }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Import_ExternalSourceList_CopyAndDetokenize" PARAMETERS = "source_count, sources var, input_root_option, input_dir_root, template_source var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_sort( l.sources, 'TemplateManager_ExternalSourceList_Sort', l.null ) }">

	<MvFOREACH ITERATOR = "l.source" ARRAY = "l.sources" COUNT = "{ l.source_count }">
		<MvASSIGN NAME = "l.resource_path" VALUE = "{ glosub( l.source, '\\', '/' ) }">

		<MvCOMMENT>
		|
		| If the reference points to a local file, copy it
		| Otherwise, ignore all references to remote files and '&mvt' entities
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT ( '://' CIN l.resource_path ) AND NOT ( '&mvt' CIN l.resource_path ) AND ( '//' CIN l.resource_path NE 1 ) }" >
			<MvIF EXPR = "{ NOT TemplateManager_Import_Copy( l.input_root_option, l.input_dir_root, l.resource_path ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.template_source" VALUE = "{ glosub( l.template_source, '%STORE_ID%/', padl( g.Store:id, 8, '0' ) $ '/' ) }">
	<MvASSIGN NAME = "l.template_source" VALUE = "{ glosub( l.template_source, '/%STORE_BASEHREF%/', TemplateManager_Get_Basehref_Path() ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Import_Copy" PARAMETERS = "input_root_option, input_dir_root, file" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.source_file" 				VALUE = "{ l.file }">
	
	<MvIF EXPR = "{ '/' CIN l.source_file NE 1 }">
		<MvASSIGN NAME = "l.source_file" 			VALUE = "{ '/%STORE_BASEHREF%/' $ l.source_file }">
	<MvELSEIF EXPR = "{	TemplateManager_Get_Basehref_Path() IN l.source_file EQ 1 }">
		<MvASSIGN NAME = "l.source_file" 			VALUE = "{ '/%STORE_BASEHREF%' $ substring( l.source_file, len( TemplateManager_Get_Basehref_Path() ), len_var( l.source_file ) - len_var( TemplateManager_Get_Basehref_Path() ) + 1 ) }">
	</MvIF>

	<MvASSIGN NAME = "l.destination_file" 			VALUE = "{ l.source_file }">
	<MvASSIGN NAME = "l.destination_file" 			VALUE = "{ glosub( l.destination_file, '%STORE_ID%/', padl( g.Store:id, 8, '0' ) $ '/' ) }">
	<MvASSIGN NAME = "l.destination_file" 			VALUE = "{ glosub( l.destination_file, '/%STORE_BASEHREF%/', TemplateManager_Get_Basehref_Path() ) }">

	<MvASSIGN NAME = "l.destination_file" 			VALUE = "{ TemplateManager_SanitizePath( l.destination_file ) }">
	<MvASSIGN NAME = "l.source_file" 				VALUE = "{ TemplateManager_ConcatenatePath( '/' $ l.input_dir_root, l.source_file ) }">

	<MvASSIGN NAME = "l.destination_path"			VALUE = "">
	<MvASSIGN NAME = "l.temp_path"					VALUE = "{ l.destination_file }">
	<MvASSIGN NAME = "l.slash"						VALUE = "{ '/' IN l.temp_path }">

	<MvWHILE EXPR = "{ l.slash GT 0 }">
		<MvASSIGN NAME = "l.destination_path"		VALUE = "{ l.destination_path $ substring_var( l.temp_path, 1, l.slash ) }">
		<MvASSIGN NAME = "l.temp_path"				VALUE = "{ substring_var( l.temp_path, l.slash + 1, len_var( l.temp_path ) - l.slash ) }">
		<MvASSIGN NAME = "l.slash"					VALUE = "{ '/' IN l.temp_path }">
	</MvWHILE>

	<MvIF EXPR = "{ l.input_root_option EQ 'D' }">
		<MvIF EXPR = "{ NOT fexists( l.source_file ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ NOT fexists( l.destination_path ) }">
			<MvIF EXPR = "{ NOT TemplateManager_Create_ImportDest_Path( l.destination_path, 1, '0755' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.copied" 				VALUE = "{ fscopy( l.source_file, l.destination_file ) }">
		<MvASSIGN NAME = "l.null" 					VALUE = "{ schmod( l.destination_file, '0644' ) }">
	<MvELSEIF EXPR = "{ l.input_root_option EQ 'H' }">
		<MvIF EXPR = "{ NOT sexists( l.source_file ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
		
		<MvIF EXPR = "{ NOT sexists( l.destination_path ) }">
			<MvIF EXPR = "{ NOT TemplateManager_Create_ImportDest_Path( l.destination_path, 1, '0755' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.copied" 				VALUE = "{ scopy( l.source_file, l.destination_file ) }">
		<MvASSIGN NAME = "l.null" 					VALUE = "{ schmod( l.destination_file, '0644' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ImportDest_Path" PARAMETERS = "input_path, dir_only, mode" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This method will create the subdirectories specified by input_path
	|
	| input_path - Path in the destination directory.  Expects a leading '/' slash.
	|  e.g., '/mm5/images' 
	|  e.g., '/images'
	|
	| dir_only - If set, we expect to be passed only the directory.  If zero, the final fragment is a filename.
	| mode - If not null, explicit access mode we want for the directory.
	|
	</MvCOMMENT>

	<MvCOMMENT>
	|
	| Append a final slash to the path if it does not already exist (unless we have a filename).
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "l.desired_path"			VALUE = "{ l.input_path }">
	<MvIF EXPR = "{ l.dir_only AND ( substring( l.desired_path, len( l.desired_path ), 1 ) NE '/' ) }">
		<MvASSIGN NAME = "l.desired_path"		VALUE = "{ l.desired_path $ '/' }">
	</MvIF>

	<MvCOMMENT>
	|
	| If the import dest path does not already exist, create each subdirectory as needed
	|
	</MvCOMMENT>
	<MvIF EXPR = "{ NOT sexists( l.desired_path ) }">
		<MvASSIGN NAME = "l.new_path"		VALUE = "">
		<MvASSIGN NAME = "l.slash"			VALUE = "{ '/' CIN l.desired_path }">

		<MvWHILE EXPR = "{ l.slash GT 0 }">
			<MvIF EXPR = "{ len( l.new_path ) EQ 0 }">
				<MvASSIGN NAME = "l.new_path"	VALUE = "{ substring( l.desired_path, 1, l.slash ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.new_path"	VALUE = "{ l.new_path $ substring( l.desired_path, 1, l.slash ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT sexists( l.new_path ) }">
				<MvIF EXPR="{ NOT smkdir( l.new_path ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00015', 'Unable to create template import path: ' $ file_last_error() ) }">
				</MvIF>
				<MvIF EXPR = "{ NOT ISNULL l.mode AND NOT schmod( l.new_path, l.mode ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00016', 'Unable to set mode on template import path: ' $ file_last_error() ) }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.desired_path"	VALUE = "{ substring( l.desired_path, l.slash + 1, len( l.desired_path ) ) }">
			<MvASSIGN NAME = "l.slash"			VALUE = "{ '/' CIN l.desired_path }">
		</MvWHILE>
	</MvIF>

	<MvIF EXPR = "{ l.dir_only }">
		<MvFUNCTIONRETURN VALUE = "{ sexists( l.input_path ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ sexists( l.new_path ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_SanitizePath" PARAMETERS = "path" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.path" VALUE = "{ glosub( l.path, '\\', '/' ) }">
	<MvASSIGN NAME = "l.path" VALUE = "{ glosub( l.path, '//', '/' ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.path }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_SanitizeAndStripLeadingTrailingSlashes_Path" PARAMETERS = "path" STANDARDOUTPUTLEVEL = "">
	<MvWHILE EXPR = "{ substring_var( l.path, len_var( l.path ), 1 ) EQ '/' }">
		<MvASSIGN NAME = "l.path" VALUE = "{ substring_var( l.path, 1, len_var( l.path ) - 1 ) }">
	</MvWHILE>

	<MvWHILE EXPR = "{ substring_var( l.path, 1, 1 ) EQ '/' }">
		<MvASSIGN NAME = "l.path" VALUE = "{ substring_var( l.path, 2, len_var( l.path ) - 1 ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_SanitizePath( l.path ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ConcatenatePath" PARAMETERS = "first_path, second_path" STANDARDOUTPUTLEVEL = "">
	<MvWHILE EXPR = "{ substring_var( l.first_path, len_var( l.first_path ), 1 ) EQ '/' }">
		<MvASSIGN NAME = "l.first_path" 	VALUE = "{ substring_var( l.first_path, 1, len_var( l.first_path ) - 1 ) }">
	</MvWHILE>

	<MvWHILE EXPR = "{ substring_var( l.second_path, 1, 1 ) EQ '/' }">
		<MvASSIGN NAME = "l.second_path" 	VALUE = "{ substring_var( l.second_path, 2, len_var( l.second_path ) - 1 ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_SanitizePath( l.first_path $ '/' $ l.second_path ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ConcatenateResourcePath" PARAMETERS = "basehref_path, resource_path" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ substring_var( l.resource_path, 1, 1 ) EQ '/' }">
		<MvFUNCTIONRETURN VALUE = "{ l.resource_path }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_ConcatenatePath( l.basehref_path, l.resource_path ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ExternalSourceList_ProcessTag" PARAMETERS = "tag var, template_source var, source_count var, sources var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.tag_name" 					VALUE = "{ tolower( l.tag:name ) }">

	<MvIF EXPR = "{ l.tag_name EQ 'img' OR l.tag_name EQ 'input' OR l.tag_name EQ 'script' }">
		<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.tag:attributes" COUNT = "{ l.tag:attribute_count }">
			<MvIF EXPR = "{ l.attribute:name EQ 'src' }">
				<MvASSIGN NAME = "l.resource_path" 	VALUE = "{ trim( l.attribute:value ) }">
				<MvASSIGN NAME = "l.source_count" 	VALUE = "{ TemplateManager_ExternalSourceList_Append( l.resource_path, l.source_count, l.sources ) }">

				<MvFOREACHSTOP>
			</MvIF>
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.tag_name EQ 'link' }">
		<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.tag:attributes" COUNT = "{ l.tag:attribute_count }">
			<MvIF EXPR = "{ l.attribute:name EQ 'href' }">
				<MvASSIGN NAME = "l.resource_path" 	VALUE = "{ trim( l.attribute:value ) }">
				<MvASSIGN NAME = "l.source_count" 	VALUE = "{ TemplateManager_ExternalSourceList_Append( l.resource_path, l.source_count, l.sources ) }">

				<MvFOREACHSTOP>
			</MvIF>
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.tag_name EQ 'image' }">
		<MvASSIGN NAME = "l.close_tag_start_pos" 	VALUE = "{ l.tag:start_pos + len_var( l.tag:tag ) }">
		<MvASSIGN NAME = "l.close_tag_end_pos" 		VALUE = "{ indexofi( '</Image>', l.template_source, l.close_tag_start_pos ) }">

		<MvIF EXPR = "{ l.close_tag_end_pos }">
			<MvASSIGN NAME = "l.resource_path" 		VALUE = "{ substring_var( l.template_source, l.close_tag_start_pos, l.close_tag_end_pos - l.close_tag_start_pos ) }">

			<MvIF EXPR = "{ [ g.Module_Admin ].Validate_Image_Extension( l.resource_path, l.resource_extension ) }">
				<MvASSIGN NAME = "l.source_count" 		VALUE = "{ TemplateManager_ExternalSourceList_Append( l.resource_path, l.source_count, l.sources ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvCOMMENT> All tags should be checked for html styles containing external references </MvCOMMENT>
	<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.tag:attributes" COUNT = "{ l.tag:attribute_count }">
		<MvIF EXPR = "{ l.attribute:name EQ 'style' }">
			<MvASSIGN NAME = "l.tag_style" 							VALUE = "{ l.attribute:value }">

			<MvIF EXPR = "{ 'url(' CIN l.tag_style }">
				<MvASSIGN NAME = "l.url_start_pos" 					VALUE = "{ indexofi( 'url(', l.tag_style, 1 ) }">

				<MvWHILE EXPR = "{ l.url_start_pos }">
					<MvASSIGN NAME = "l.url_end_pos" 				VALUE = "{ indexofi( ')', l.tag_style, l.url_start_pos + 4 ) }">

					<MvIF EXPR = "{ l.url_end_pos EQ 0 }">
						<MvWHILESTOP>
					</MvIF>

					<MvASSIGN NAME = "l.url_src" 					VALUE = "{ substring_var( l.tag_style, l.url_start_pos + 4, l.url_end_pos - ( l.url_start_pos + 4 ) ) }">
					<MvASSIGN NAME = "l.url_src" 					VALUE = "{ trim( l.url_src ) }">
					<MvASSIGN NAME = "l.url_src_first_char" 		VALUE = "{ substring_var( l.url_src, 1, 1 ) }">
					<MvASSIGN NAME = "l.url_src_last_char" 			VALUE = "{ substring_var( l.url_src, len_var( l.url_src ), 1 ) }">

					<MvASSIGN NAME = "l.url_src_first_char" 		VALUE = "{ substring_var( l.url_src, 1, 1 ) }">
					<MvWHILE EXPR = "{ l.url_src_first_char EQ '\'' OR l.url_src_first_char EQ '"' }">
						<MvASSIGN NAME = "l.url_src" 				VALUE = "{ substring_var( l.url_src, 2, len_var( l.url_src ) - 1 ) }">
						<MvASSIGN NAME = "l.url_src_first_char" 	VALUE = "{ substring_var( l.url_src, 1, 1 ) }">
					</MvWHILE>

					<MvASSIGN NAME = "l.url_src_last_char" 			VALUE = "{ substring_var( l.url_src, len_var( l.url_src ), 1 ) }">
					<MvWHILE EXPR = "{ l.url_src_last_char EQ '\'' OR l.url_src_last_char EQ '"' }">
						<MvASSIGN NAME = "l.url_src" 				VALUE = "{ substring_var( l.url_src, 1, len_var( l.url_src ) - 1 ) }">
						<MvASSIGN NAME = "l.url_src_last_char" 		VALUE = "{ substring_var( l.url_src, len_var( l.url_src ), 1 ) }">
					</MvWHILE>

					<MvASSIGN NAME = "l.url_src" 					VALUE = "{ trim( l.url_src ) }">
					<MvASSIGN NAME = "l.source_count" 				VALUE = "{ TemplateManager_ExternalSourceList_Append( l.url_src, l.source_count, l.sources ) }">

					<MvASSIGN NAME = "l.url_start_pos" 				VALUE = "{ indexofi( 'url(', l.tag_style, l.url_end_pos ) }">
				</MvWHILE>
			</MvIF>

			<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ExternalSourceList_Sort" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.left_length" 	VALUE = "{ len_var( l.left ) }">
	<MvASSIGN NAME = "l.right_length" 	VALUE = "{ len_var( l.right ) }">

	<MvIF EXPR = "{ l.left_length GT l.right_length }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left_length LT l.right_length }">		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ExternalSourceList_Append" PARAMETERS = "source, source_count, sources var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.source }">
		<MvFUNCTIONRETURN VALUE = "{ l.source_count }">
	</MvIF>

	<MvIF EXPR = "{ miva_array_search( l.sources, 1, l.existing_source, 'l.existing_source EQ l.source' ) EQ 0 }">
		<MvASSIGN NAME = "l.sources" INDEX = "{ ++l.source_count }" VALUE = "{ l.source }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.source_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ExternalSourceList_Sort_CSS" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.left_length" 	VALUE = "{ len_var( l.left:source ) }">
	<MvASSIGN NAME = "l.right_length" 	VALUE = "{ len_var( l.right:source ) }">

	<MvIF EXPR = "{ l.left_length GT l.right_length }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left_length LT l.right_length }">		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ExternalSourceList_Append_CSS" PARAMETERS = "source, referrer, source_count, sources var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.source }">
		<MvFUNCTIONRETURN VALUE = "{ l.source_count }">
	</MvIF>

	<MvIF EXPR = "{ miva_array_search( l.sources, 1, l.existing_source, 'l.existing_source:source EQ l.source AND l.existing_source:referrer EQ l.referrer' ) EQ 0 }">
		<MvASSIGN NAME = "l.source_count" 												VALUE = "{ l.source_count + 1 }">
		<MvASSIGN NAME = "l.sources" INDEX = "{ l.source_count }" MEMBER = "source" 	VALUE = "{ l.source }">
		<MvASSIGN NAME = "l.sources" INDEX = "{ l.source_count }" MEMBER = "referrer" 	VALUE = "{ l.referrer }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.source_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "escape" PARAMETERS = "data" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
		<MvASSIGN NAME = "l.output" VALUE = "{ glosub( l.data,		'"',				'%22' ) }">
		<MvASSIGN NAME = "l.output" VALUE = "{ glosub( l.output,	'<',				'%3C' ) }">
		<MvASSIGN NAME = "l.output" VALUE = "{ glosub( l.output,	'>',				'%3E' ) }">
		<MvASSIGN NAME = "l.output" VALUE = "{ glosub( l.output,	asciichar( 10 ),	'%0A' ) }">
		<MvASSIGN NAME = "l.output" VALUE = "{ glosub( l.output,	asciichar( 13 ),	'%0D' ) }">
	</MvCOMMENT>

	<MvASSIGN NAME="l.output" VALUE="{ crypto_base64_encode(l.data) }">

	<MvFUNCTIONRETURN VALUE = "{ l.output }">
</MvFUNCTION>

<MvFUNCTION NAME = "TUI_Strip_Leading_Slash" PARAMETERS="full_path" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.new_path"	VALUE = "">

	<MvCOMMENT>
	|
	| If the path has a leading slash, remove it.
	| If the path is equal to just a slash "/", then return an empty path.
	| If the path does not have a leading slash, return the original path.
	|
	</MvCOMMENT>
	<MvIF EXPR = "{ substring( l.full_path, 1, 1 ) EQ '/' }">
		<MvIF EXPR = "{ len( l.full_path ) GT 1 }">
			<MvASSIGN NAME = "l.new_path"	VALUE = "{ substring( l.full_path, 2, len( l.full_path ) ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.new_path"	VALUE = "{ l.full_path }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.new_path }">
</MvFUNCTION>

<MvFUNCTION NAME = "TUI_HTML_Parse_Tag_Attribute" PARAMETERS = "tag, attrib_name, attrib_value var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Given an entire HTML tag (from start to close) and an attribute name, return the value of the attribute
	| Return 1, if attribute name and value are found
	| Return 0, otherwise
	|
	| For example,
	| Given the tag: <link rel="stylesheet" type="text/css" href="styles/storestyles.css" />
	| Given the attrib_name: href
	| Return parameter attrib_value is set to: styles/storestyles.css
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.tag_len"		VALUE = "{ len( l.tag ) }">
	<MvASSIGN NAME = "l.temp_tag"		VALUE = "{ l.tag }">
	<MvASSIGN NAME = "l.name_start"		VALUE = "{ l.attrib_name CIN l.temp_tag }">

	<MvCOMMENT>
	|
	| If we found the attribute name somewhere in the tag
	|
	</MvCOMMENT>
	<MvWHILE EXPR = "{ l.name_start GT 0 }">

		<MvCOMMENT>
		|
		| If this instance of the attribute name is inside of a quoted string
		| skip it and look for the next appearance of attribute name
		|
		| If it is not in a quoted string, analyze it further
		|
		</MvCOMMENT>
		<MvIF EXPR = "{ NOT TUI_HTML_Tag_CharInsideQuotes(l.tag, l.name_start + (l.tag_len - len(l.temp_tag))) }">

			<MvASSIGN NAME = "l.name_end"				VALUE = "{ l.name_start + len(l.attrib_name) - 1}">
			<MvASSIGN NAME = "l.equal_char"				VALUE = "{ '=' CIN substring(l.temp_tag, l.name_end + 1, len(l.temp_tag) - l.name_end) }">
			<MvASSIGN NAME = "l.equal_char"				VALUE = "{ l.equal_char + l.name_end }">
			<MvASSIGN NAME = "l.found_name_and_equal"	VALUE = "0">

			<MvCOMMENT>
			|
			| If we found an equal sign somewhere after the attribute name
			|
			</MvCOMMENT>
			<MvIF EXPR = "{ l.equal_char GT l.name_end }">

				<MvIF EXPR = "{ l.equal_char EQ (l.name_end + 1) }">
					<MvCOMMENT>
					|
					| The equal sign can be located just after the attribute name (as in 'href=' )
					|
					</MvCOMMENT>
					<MvASSIGN NAME = "l.found_name_and_equal"		VALUE = "1">

				<MvELSE>
					<MvCOMMENT>
					|
					| Otherwise the attribute name and equal sign can be separated by one or more
					| space characters (as in 'href =')
					|
					</MvCOMMENT>
					<MvIF EXPR = "{ isspace(substring(l.temp_tag, l.name_end + 1, l.equal_char - l.name_end)) }">
						<MvASSIGN NAME = "l.found_name_and_equal"	VALUE = "1">
					</MvIF>
				</MvIF>

				<MvCOMMENT>
				|
				| If we found a matching name and equal sign, find the open quote and close quote
				| and extract the attribute value between them
				|
				</MvCOMMENT>
				<MvIF EXPR = "l.found_name_and_equal EQ 1">
					<MvASSIGN NAME = "l.open_quote_char"	VALUE = "{ '"' CIN substring(l.temp_tag, l.equal_char + 1, len(l.temp_tag)) }">
					<MvASSIGN NAME = "l.open_quote_char"	VALUE = "{ l.open_quote_char + l.equal_char }">

					<MvASSIGN NAME = "l.close_quote_char"	VALUE = "{ '"' CIN substring(l.temp_tag, l.open_quote_char + 1, len(l.temp_tag)) }">
					<MvASSIGN NAME = "l.close_quote_char"	VALUE = "{ l.close_quote_char + l.open_quote_char }">

					<MvIF EXPR = "{ (l.open_quote_char GT l.equal_char) AND (l.close_quote_char GT l.open_quote_char) }">
						<MvASSIGN NAME = "l.attrib_value"	VALUE = "{ substring(l.temp_tag, l.open_quote_char + 1, l.close_quote_char - l.open_quote_char - 1) }">

						<MvFUNCTIONRETURN VALUE = 1>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| We have not yet found an attribute (name, value) pair, so look for the next
		| appearance of the attribute name
		|
		</MvCOMMENT>
		<MvASSIGN NAME = "l.temp_tag"		VALUE = "{ substring(l.temp_tag, l.name_start + len(l.attrib_name), len(l.temp_tag)) }">
		<MvASSIGN NAME = "l.name_start"		VALUE = "{ l.attrib_name CIN l.temp_tag }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TUI_HTML_Tag_CharInsideQuotes" PARAMETERS = "tag, charpos" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Return 1 if the input param char is positioned inside of a quoted string
	| Return 0 otherwise
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "l.quote_count"	VALUE = "0">
	<MvASSIGN NAME = "l.temp_tag"		VALUE = "{ substring(l.tag, 1, l.charpos) }">
	<MvASSIGN NAME = "l.quote_char"		VALUE = "{ '"' CIN l.temp_tag }">

	<MvCOMMENT>
	|
	| Count the number of quotes preceeding the char position
	|
	</MvCOMMENT>
	<MvWHILE EXPR = "{ (l.quote_char GT 0) AND (l.quote_char LT l.charpos) }">
		<MvASSIGN NAME = "l.quote_count"	VALUE = "{ l.quote_count + 1 }">

		<MvASSIGN NAME = "l.temp_tag"		VALUE = "{ substring(l.temp_tag, l.quote_char+1, len(l.temp_tag)) }">
		<MvASSIGN NAME = "l.quote_char"		VALUE = "{ '"' CIN l.temp_tag }">
	</MvWHILE>

	<MvCOMMENT>
	|
	| If the count of preceding quotes is an odd number, then the char is inside of a quoted string
	|
	</MvCOMMENT>
	<MvIF EXPR = "{ (l.quote_count MOD 2) GT 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TUI_HTML_Parse_External_File_Source" PARAMETERS = "tag, tag_end var, source var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| If the tag is one we're interested in, return the external file's source path
	| Otherwise, return an empty string for the source
	| Always set tag_end to the next '>' close tag
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "l.source"			VALUE = "">

	<MvASSIGN NAME = "l.tag_name"		VALUE = "<body">
	<MvASSIGN NAME = "l.tag_start"		VALUE = "{ l.tag_name CIN substring(l.tag, 1, len(l.tag_name)) }">
	<MvIF EXPR = "{ l.tag_start GT 0 }">
		<MvASSIGN NAME = "l.temp"		VALUE = "{ substring( l.tag, l.tag_start, len( l.tag) - l.tag_start + 1 ) }">
		<MvASSIGN NAME = "l.tag_end"	VALUE = "{ '>' IN l.temp }">
		<MvIF EXPR = "{ TUI_HTML_Parse_Tag_Attribute(l.tag, 'background', l.source) EQ 1 }">
			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.tag_name"		VALUE = "<img">
	<MvASSIGN NAME = "l.tag_start"		VALUE = "{ l.tag_name CIN substring(l.tag, 1, len(l.tag_name)) }">
	<MvIF EXPR = "{ l.tag_start GT 0 }">
		<MvASSIGN NAME = "l.temp"		VALUE = "{ substring( l.tag, l.tag_start, len( l.tag) - l.tag_start + 1 ) }">
		<MvASSIGN NAME = "l.tag_end"	VALUE = "{ '>' IN l.temp }">
		<MvIF EXPR = "{ TUI_HTML_Parse_Tag_Attribute(l.tag, 'src', l.source) EQ 1 }">
			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.tag_name"		VALUE = "<input">
	<MvASSIGN NAME = "l.tag_start"		VALUE = "{ l.tag_name CIN substring(l.tag, 1, len(l.tag_name)) }">
	<MvIF EXPR = "{ l.tag_start GT 0 }">
		<MvASSIGN NAME = "l.temp"		VALUE = "{ substring( l.tag, l.tag_start, len( l.tag) - l.tag_start + 1 ) }">
		<MvASSIGN NAME = "l.tag_end"	VALUE = "{ '>' IN l.temp }">
		<MvIF EXPR = "{ TUI_HTML_Parse_Tag_Attribute(l.tag, 'src', l.source) EQ 1 }">
			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.tag_name"		VALUE = "<script">
	<MvASSIGN NAME = "l.tag_start"		VALUE = "{ l.tag_name CIN substring(l.tag, 1, len(l.tag_name)) }">
	<MvIF EXPR = "{ l.tag_start GT 0 }">
		<MvASSIGN NAME = "l.temp"		VALUE = "{ substring( l.tag, l.tag_start, len( l.tag) - l.tag_start + 1 ) }">
		<MvASSIGN NAME = "l.tag_end"	VALUE = "{ '>' IN l.temp }">
		<MvIF EXPR = "{ TUI_HTML_Parse_Tag_Attribute(l.tag, 'src', l.source) EQ 1 }">
			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.tag_name"		VALUE = "<link">
	<MvASSIGN NAME = "l.tag_start"		VALUE = "{ l.tag_name CIN substring(l.tag, 1, len(l.tag_name)) }">
	<MvIF EXPR = "{ l.tag_start GT 0 }">
		<MvASSIGN NAME = "l.temp"		VALUE = "{ substring( l.tag, l.tag_start, len( l.tag) - l.tag_start + 1 ) }">
		<MvASSIGN NAME = "l.tag_end"	VALUE = "{ '>' IN l.temp }">
		<MvIF EXPR = "{ TUI_HTML_Parse_Tag_Attribute(l.tag, 'href', l.source) EQ 1 }">
			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMENT>XML Image Tag extraction</MvCOMMENT>

	<MvASSIGN NAME = "l.tag_start" 		VALUE = "{ '<Image>' ECIN l.tag }">
	<MvIF EXPR = "{ l.tag_start GT 0 }">
		<MvASSIGN NAME = "l.tag_end" 		VALUE = "{ '</Image>' CIN l.tag }">
		<MvIF EXPR = "{ l.tag_end GT 0 }">
			<MvASSIGN NAME = "l.source" 		VALUE = "{ substring( l.tag, l.tag_start + 1, l.tag_end - l.tag_start - 1 ) }">

			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>
	
	<MvASSIGN NAME = "l.tag_name"		VALUE = "<!--#include">
	<MvASSIGN NAME = "l.tag_start"		VALUE = "{ l.tag_name CIN substring(l.tag, 1, len(l.tag_name)) }">
	<MvIF EXPR = "{ l.tag_start GT 0 }">
		<MvASSIGN NAME = "l.temp"		VALUE = "{ substring( l.tag, l.tag_start, len( l.tag) - l.tag_start + 1 ) }">
		<MvASSIGN NAME = "l.tag_end"	VALUE = "{ '>' IN l.temp }">
		<MvIF EXPR = "{ TUI_HTML_Parse_Tag_Attribute(l.tag, 'file', l.source) EQ 1 }">
			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvIF EXPR = "{ TUI_HTML_Parse_Tag_Attribute(l.tag, 'virtual', l.source) EQ 1 }">
				<MvFUNCTIONRETURN VALUE = 1>
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.tag_end"	VALUE = "{ '>' IN l.tag }">
	<MvASSIGN NAME = "l.source"		VALUE = "">

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TUI_HTML_Parse_Tag_Start" PARAMETERS = "source var, start_pos, tag var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This function parses out the OPENING tags within the source value. It does not gather the closing tag or inner content. 
	| This function is for use only with the TemplateManager_Export_Template function
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.STATE_START"						VALUE = "start">
	<MvASSIGN NAME = "l.STATE_TAG_START"					VALUE = "tag_start">
	<MvASSIGN NAME = "l.STATE_TAG_NAME"						VALUE = "tag_name">
	<MvASSIGN NAME = "l.STATE_ATTR_START"					VALUE = "attr_start">
	<MvASSIGN NAME = "l.STATE_ATTR_NAME"					VALUE = "attr_name">
	<MvASSIGN NAME = "l.STATE_ATTR_SPACES"					VALUE = "attr_spaces">
	<MvASSIGN NAME = "l.STATE_ATTR_VALUE"					VALUE = "attr_value">
	<MvASSIGN NAME = "l.STATE_ATTR_SINGLEQUOTE_VALUE"		VALUE = "attr_singlevalue">
	<MvASSIGN NAME = "l.STATE_ATTR_DOUBLEQUOTE_VALUE"		VALUE = "attr_doublevalue">
	<MvASSIGN NAME = "l.STATE_ATTR_NOQUOTE_VALUE"			VALUE = "attr_novalue">
	<MvASSIGN NAME = "l.STATE_TAG_CONTENT"					VALUE = "tag_content">

	<MvASSIGN NAME = "l.tag" 								VALUE = "">

	<MvASSIGN NAME = "l.pos"								VALUE = "{ l.start_pos }">
	<MvASSIGN NAME = "l.state"								VALUE = "{ l.STATE_START }">
	<MvASSIGN NAME = "l.length"								VALUE = "{ len_var( l.source ) }">

	<MvWHILE EXPR = "{ l.pos LE l.length }">
		<MvASSIGN NAME = "l.char"							VALUE = "{ substring_var( l.source, l.pos, 1 ) }">

		<MvIF EXPR = "{ l.state EQ l.STATE_START }">
			<MvIF EXPR = "{ l.char EQ '<' }">
				<MvASSIGN NAME = "l.tag"					VALUE = "">
				<MvASSIGN NAME = "l.tag:name"				VALUE = "">
				<MvASSIGN NAME = "l.tag:attributes"			VALUE = "">
				<MvASSIGN NAME = "l.tag:attribute_count"	VALUE = "">
				<MvASSIGN NAME = "l.tag:text"				VALUE = "">
				<MvASSIGN NAME = "l.tag:start_pos"			VALUE = "{ l.pos }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.char }">

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_TAG_START }">
			</MvIF>

			<MvASSIGN NAME = "l.pos" 						VALUE = "{ l.pos + 1 }">

			<MvWHILECONTINUE>
		<MvELSEIF EXPR = "{ l.state EQ l.STATE_TAG_START }">
			<MvIF EXPR = "{ ( asciivalue( l.char ) GE 48 AND asciivalue( l.char ) LE 57 ) OR
							( asciivalue( l.char ) GE 65 AND asciivalue( l.char ) LE 90 ) OR
							( asciivalue( l.char ) GE 97 AND asciivalue( l.char ) LE 122 ) }">
				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_TAG_NAME }">

				<MvWHILECONTINUE>
			<MvELSE>
				<MvASSIGN NAME = "l.tag" 					VALUE = "">
				<MvASSIGN NAME = "l.tag_count"				VALUE = "{ l.tag_count - 1 }">

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_START }">

				<MvWHILECONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ l.STATE_TAG_NAME }">
			<MvIF EXPR = "{ ( asciivalue( l.char ) NE 58 ) AND
							NOT ( asciivalue( l.char ) GE 48 AND asciivalue( l.char ) LE 57 ) AND
							NOT ( asciivalue( l.char ) GE 65 AND asciivalue( l.char ) LE 90 ) AND
							NOT ( asciivalue( l.char ) GE 97 AND asciivalue( l.char ) LE 122 ) }">
				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_START }">

				<MvWHILECONTINUE>
			<MvELSE>
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGN NAME = "l.tag:name"				VALUE = "{ l.tag:name $ l.char }">

				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ l.STATE_ATTR_START }">
			<MvIF EXPR = "{ l.char EQ '>' }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvFUNCTIONRETURN VALUE = "{ int( l.tag:start_pos ) }">
			<MvELSEIF EXPR = "{ l.char EQ '<' }">
				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_START }">

				<MvFUNCTIONRETURN VALUE = "{ int( l.tag:start_pos ) }">
			<MvELSEIF EXPR = "{ asciivalue( l.char ) NE 9	AND
								asciivalue( l.char ) NE 10	AND
								asciivalue( l.char ) NE 12	AND
								asciivalue( l.char ) NE 13	AND
								asciivalue( l.char ) NE 32	AND
								asciivalue( l.char ) NE 47 }">
				<MvASSIGN NAME = "l.tag:attribute_count"	VALUE = "{ l.tag:attribute_count + 1 }">
				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_NAME }">

				<MvWHILECONTINUE>
			<MvELSE>
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGN NAME = "l.pos" 					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ l.STATE_ATTR_NAME }">
			<MvIF EXPR = "{ l.char EQ '<' }">
				<MvFUNCTIONRETURN VALUE = "{ int( l.tag:start_pos ) }">
			<MvELSEIF EXPR = "{ l.char EQ '=' }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_VALUE }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSEIF EXPR = "{ asciivalue( l.char ) EQ 9	OR
								asciivalue( l.char ) EQ 10	OR
								asciivalue( l.char ) EQ 12	OR
								asciivalue( l.char ) EQ 13	OR
								asciivalue( l.char ) EQ 32 }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_SPACES }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSEIF EXPR = "{ l.char EQ '>' }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvFUNCTIONRETURN VALUE = "{ int( l.tag:start_pos ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGNARRAY NAME = "l.tag:attributes" 	VALUE = "{ l.tag:attributes[ l.tag:attribute_count ]:name $ l.char }">
					<MvDIMENSION INDEX = "{ l.tag:attribute_count }">
					<MvMEMBER NAME = "name">
				</MvASSIGNARRAY>

				<MvASSIGN NAME = "l.pos" 					VALUE = "{ l.pos + 1 }">
				
				<MvWHILECONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ l.STATE_ATTR_SPACES }">
			<MvIF EXPR = "{ asciivalue( l.char ) EQ 9	OR
							asciivalue( l.char ) EQ 10	OR
							asciivalue( l.char ) EQ 12	OR
							asciivalue( l.char ) EQ 13	OR
							asciivalue( l.char ) EQ 32 }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSEIF EXPR = "{ l.char NE '=' }">
				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_NAME }">

				<MvWHILECONTINUE>
			<MvELSE>
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_VALUE }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ l.STATE_ATTR_VALUE }">
			<MvIF EXPR = "{ asciivalue( l.char ) EQ 9	OR
							asciivalue( l.char ) EQ 10	OR
							asciivalue( l.char ) EQ 12	OR
							asciivalue( l.char ) EQ 13	OR
							asciivalue( l.char ) EQ 32 }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSEIF EXPR = "{ l.char EQ '\'' }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGNARRAY NAME = "l.tag:attributes" 	VALUE = "{ l.pos + 1 }">
					<MvDIMENSION INDEX = "{ l.tag:attribute_count }">
					<MvMEMBER NAME = "value_start_pos">
				</MvASSIGNARRAY>

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_SINGLEQUOTE_VALUE }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSEIF EXPR = "{ l.char EQ '"' }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGNARRAY NAME = "l.tag:attributes" 	VALUE = "{ l.pos + 1 }">
					<MvDIMENSION INDEX = "{ l.tag:attribute_count }">
					<MvMEMBER NAME = "value_start_pos">
				</MvASSIGNARRAY>

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_DOUBLEQUOTE_VALUE }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSEIF EXPR = "{ l.char EQ '>' }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvFUNCTIONRETURN VALUE = "{ int( l.tag:start_pos ) }">
			<MvELSEIF EXPR = "{ l.char EQ '<' }">
				<MvFUNCTIONRETURN VALUE = "{ int( l.tag:start_pos ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGNARRAY NAME = "l.tag:attributes" 	VALUE = "{ l.pos }">
					<MvDIMENSION INDEX = "{ l.tag:attribute_count }">
					<MvMEMBER NAME = "value_start_pos">
				</MvASSIGNARRAY>

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_NOQUOTE_VALUE }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ l.STATE_ATTR_SINGLEQUOTE_VALUE }">
			<MvIF EXPR = "{ l.char EQ '\'' }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_START }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSE>
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGNARRAY NAME = "l.tag:attributes" 	VALUE = "{ l.tag:attributes[ l.tag:attribute_count ]:value $ l.char }">
					<MvDIMENSION INDEX = "{ l.tag:attribute_count }">
					<MvMEMBER NAME = "value">
				</MvASSIGNARRAY>

				<MvASSIGN NAME = "l.pos" 					VALUE = "{ l.pos + 1 }">
				
				<MvWHILECONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ l.STATE_ATTR_DOUBLEQUOTE_VALUE }">
			<MvIF EXPR = "{ l.char EQ '"' }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_START }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSE>
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGNARRAY NAME = "l.tag:attributes" 	VALUE = "{ l.tag:attributes[ l.tag:attribute_count ]:value $ l.char }">
					<MvDIMENSION INDEX = "{ l.tag:attribute_count }">
					<MvMEMBER NAME = "value">
				</MvASSIGNARRAY>

				<MvASSIGN NAME = "l.pos" 					VALUE = "{ l.pos + 1 }">
				
				<MvWHILECONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ l.STATE_ATTR_NOQUOTE_VALUE }">
			<MvIF EXPR = "{ l.char EQ '>' }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvFUNCTIONRETURN VALUE = "{ int( l.tag:start_pos ) }">
				<MvWHILECONTINUE>
			<MvELSEIF EXPR = "{ l.char EQ '<' }">
				<MvFUNCTIONRETURN VALUE = "{ int( l.tag:start_pos ) }">
			<MvELSEIF EXPR = "{ asciivalue( l.char ) EQ 9	OR
								asciivalue( l.char ) EQ 10	OR
								asciivalue( l.char ) EQ 12	OR
								asciivalue( l.char ) EQ 13	OR
								asciivalue( l.char ) EQ 32 }">
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">

				<MvASSIGN NAME = "l.state"					VALUE = "{ l.STATE_ATTR_START }">
				<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSE>
				<MvASSIGN NAME = "l.tag:tag" 				VALUE = "{ l.tag:tag $ l.char }">
				<MvASSIGNARRAY NAME = "l.tag:attributes" 	VALUE = "{ l.tag:attributes[ l.tag:attribute_count ]:value $ l.char }">
					<MvDIMENSION INDEX = "{ l.tag:attribute_count }">
					<MvMEMBER NAME = "value">
				</MvASSIGNARRAY>

				<MvASSIGN NAME = "l.pos" 					VALUE = "{ l.pos + 1 }">
				
				<MvWHILECONTINUE>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.pos"							VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ int( l.tag:start_pos ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Export_Path" PARAMETERS = "output_root_option, output_path" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This method will create the subdirectories specified by output_path
	|
	| output_root_option - Either 'H' for scripts directory, 'D' for data directory
	|
	| output_path - Path in the destination directory.  Expects a leading '/' slash.
	|  e.g., '/editable_templates/store1' 
	|  e.g., '/editable_templates/store1/mm5/
	|
	</MvCOMMENT>

	<MvCOMMENT>
	|
	| Append a final slash to the path if it doesn't already exist
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "l.desired_path"			VALUE = "{ l.output_path }">
	<MvIF EXPR = "{ substring( l.desired_path, len( l.desired_path ), 1 ) NE '/' }">
		<MvASSIGN NAME = "l.desired_path"		VALUE = "{ l.desired_path $ '/' }">
	</MvIF>

	<MvCOMMENT>
	|
	| If the export dest path does not already exist, create each subdirectory as needed
	|
	</MvCOMMENT>
	<MvIF EXPR = "{ l.output_root_option EQ 'D' }">
		<MvCOMMENT>
		|
		| Due to a VM bug related to Data folder paths containing a leading slash,
		| strip the leading slash (MSA: 03/13/05)
		|
		</MvCOMMENT>
		<MvASSIGN NAME = "l.desired_path"	VALUE = "{ TUI_Strip_Leading_Slash( l.desired_path ) }">

		<MvIF EXPR = "{ NOT fexists( l.desired_path ) }">
			<MvASSIGN NAME = "l.new_path"		VALUE = "">
			<MvASSIGN NAME = "l.slash"			VALUE = "{ '/' CIN l.desired_path }">

			<MvWHILE EXPR = "{ l.slash GT 0 }">
				<MvIF EXPR = "{ len( l.new_path ) EQ 0 }">
					<MvASSIGN NAME = "l.new_path"		VALUE = "{ substring( l.desired_path, 1, l.slash ) }">
				<MvELSE>
					<MvASSIGN NAME = "l.new_path"		VALUE = "{ l.new_path $ substring( l.desired_path, 1, l.slash ) }">
				</MvIF>

				<MvIF EXPR = "{ NOT fexists( l.new_path ) }">
					<MvIF EXPR="{ NOT fmkdir( l.new_path) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00017', 'Unable to create template export path: ' $ file_last_error() ) }">
					</MvIF>
					<MvIF EXPR = "{ NOT fchmod( l.new_path, '0755' ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00018', 'Unable to set mode on template export path: ' $ file_last_error() ) }">
					</MvIF>
				</MvIF>

				<MvASSIGN NAME = "l.desired_path"	VALUE = "{ substring( l.desired_path, l.slash + 1, len(l.desired_path) ) }">
				<MvASSIGN NAME = "l.slash"			VALUE = "{ '/' CIN l.desired_path }">
			</MvWHILE>
		</MvIF>

		<MvCOMMENT>
		|
		| Ensure that we successfully created the full output path.
		|
		| Due to a VM bug related to Data folder paths containing a leading slash,
		| strip the leading slash before checking for existence (MSA: 03/13/05)
		|
		</MvCOMMENT>
		<MvASSIGN NAME = "l.desired_path"	VALUE = "{ TUI_Strip_Leading_Slash( l.output_path ) }">

		<MvFUNCTIONRETURN VALUE = "{ fexists( l.desired_path ) }">

	<MvELSEIF EXPR = "{ l.output_root_option EQ 'H' }">
		<MvIF EXPR = "{ NOT sexists( l.desired_path ) }">
			<MvASSIGN NAME = "l.new_path"		VALUE = "">
			<MvASSIGN NAME = "l.slash"			VALUE = "{ '/' CIN l.desired_path }">

			<MvWHILE EXPR = "{ l.slash GT 0 }">
				<MvIF EXPR = "{ len( l.new_path ) EQ 0 }">
					<MvASSIGN NAME = "l.new_path"		VALUE = "{ substring( l.desired_path, 1, l.slash) }">
				<MvELSE>
					<MvASSIGN NAME = "l.new_path"		VALUE = "{ l.new_path $ substring( l.desired_path, 1, l.slash) }">
				</MvIF>

				<MvIF EXPR = "{ NOT sexists( l.new_path ) }">
					<MvIF EXPR="{ NOT smkdir( l.new_path) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00019', 'Unable to create template export path: ' $ file_last_error() ) }">
					</MvIF>
					<MvIF EXPR = "{ NOT schmod( l.new_path, '0755' ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00020', 'Unable to set mode on template export path: ' $ file_last_error() ) }">
					</MvIF>
				</MvIF>

				<MvASSIGN NAME = "l.desired_path"	VALUE = "{ substring( l.desired_path, l.slash + 1, len(l.desired_path) ) }">
				<MvASSIGN NAME = "l.slash"			VALUE = "{ '/' CIN l.desired_path }">
			</MvWHILE>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ sexists( l.output_path ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "name_suffix" PARAMETERS = "name, suffix" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.dot"	VALUE = "{ '.' IN l.name }">
	<MvIF EXPR = "{ l.dot EQ 0 }">
		<MvASSIGN NAME = "l.dot"	VALUE = "{ len( l.name ) + 1 }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = "{ substring( l.name, 1, l.dot - 1 ) $ '-' $ l.suffix $ substring( l.name, l.dot, len( l.name ) ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| JavaScript Resources
|
</MvCOMMENT>

<MvFUNCTION NAME = "TemplateManager_Delete_JavaScriptResource" PARAMETERS = "scriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Delete_JavaScriptResource_Branch( TemplateManager_Working_Branch_ID(), l.scriptresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_JavaScriptResource_Branch" PARAMETERS = "branch_id, scriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Load_Branch_Head( l.branch_id, l.scriptresource:id, l.scriptresourceversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Insert( l.branch_id, l.scriptresource:id, 0 ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Update_Head( l.branch_id, l.scriptresource:id, 0 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, 'JavaScript Resource \'' $ l.scriptresource:code $ '\' deleted' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_JavaScriptResourceVersion_Branch( l.branch_id, l.scriptresource:id, l.scriptresourceversion:id, 0, 0, 'JavaScript Resource \'' $ l.scriptresource:code $ '\' deleted' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.scriptresource:type EQ 'I' }">
		<MvIF EXPR = "{ NOT TemplateManager_Delete_ManagedTemplate_Branch( l.branch_id, l.scriptresource:templ_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_JavaScriptResource_Code" PARAMETERS = "code" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_JavaScriptResource_Code( l.code, l.branches ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Branch_Code( l.branch:id, l.code, l.scriptresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_JavaScriptResource( l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_JavaScriptResource_File" PARAMETERS = "file" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_All( l.branches ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'scripts', l.branch:tmpldir,	l.file,				'',					l.branchless_file ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'scripts', '',				l.branchless_file,	l.branch:tmpldir,	l.branch_file ) }">

		<MvASSIGN NAME = "l.branch_scriptresources"			VALUE = "">
		<MvASSIGN NAME = "l.branch_scriptresource_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Branch_File( l.branch:id, l.branch_file, l.branch_scriptresources ) }">

		<MvIF EXPR = "{ l.branch_scriptresource_count }">
			<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
				<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvFOREACH ITERATOR = "l.scriptresource" ARRAY = "l.branch_scriptresources" COUNT = "{ l.branch_scriptresource_count }">
				<MvASSIGN NAME = "l.null" VALUE = "{ TemplateManager_Delete_JavaScriptResource( l.scriptresource ) }">
			</MvFOREACH>

			<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
				<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Purge_JavaScriptResource" PARAMETERS = "scriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.scriptresource:templ_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.scriptresource:templ_id, l.managedtemplate ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Purge( l.managedtemplate ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Purge( l.scriptresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_All_JavaScriptResource" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.scriptresource" ARRAY = "l.scriptresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_All( l.scriptresources ) }">
		<MvIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_JavaScriptResource( l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Register_Global_JavaScriptResource_LocalFile_BuildPath" PARAMETERS = "filename, abs_file_path var, rel_file_path var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.store_folder"					VALUE = "{ padl( g.Store:id, 8, '0' ) }">
	<MvASSIGN NAME = "l.scripts_dir"					VALUE = "{ g.imageroot $ 'scripts/' $ l.store_folder $ '/' $ g.Store:branch:tmpldir }">
	<MvASSIGN NAME = "l.abs_file_path"					VALUE = "{ g.imageroot $ 'scripts/' $ l.store_folder $ '/' $ g.Store:branch:tmpldir $ l.filename }">
	<MvASSIGN NAME = "l.rel_file_path"					VALUE = "{ 'scripts/' $ l.store_folder $ '/' $ g.Store:branch:tmpldir $ l.filename }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.scripts_dir ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.scripts_dir, '0755' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Register_Global_JavaScriptResource_LocalFile_WithFile" PARAMETERS = "group_code, filename, source_file_path, scriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT TemplateManager_Register_Global_JavaScriptResource_LocalFile_BuildPath( l.filename, l.abs_file_path, l.rel_file_path ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ sexists( l.source_file_path ) AND NOT sexists( l.abs_file_path ) }">
		<MvIF EXPR = "{ NOT scopy( l.source_file_path, l.abs_file_path ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00033', 'Unable to copy \'' $ l.source_file_path $ '\' to store-specific scripts directory: ' $ file_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ schmod( l.abs_file_path, '0644' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Register_Global_JavaScriptResource_LocalFile_LowLevel( l.group_code, l.rel_file_path, l.scriptresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Register_Global_JavaScriptResource_LocalFile_WithContent" PARAMETERS = "group_code, filename, content var, scriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT TemplateManager_Register_Global_JavaScriptResource_LocalFile_BuildPath( l.filename, l.abs_file_path, l.rel_file_path ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT sexists( l.abs_file_path ) }">
		<MvIF EXPR = "{ file_create( l.abs_file_path, 'script', l.content ) EQ -1 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00034', 'Unable to create file \'' $ l.filename $ '\': ' $ file_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ schmod( l.abs_file_path, '0644' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Register_Global_JavaScriptResource_LocalFile_LowLevel( l.group_code, l.rel_file_path, l.scriptresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Register_Global_JavaScriptResource_LocalFile_LowLevel" PARAMETERS = "group_code, file_path, scriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_Code( l.group_code, l.resourcegroup ) }">
		<MvASSIGN NAME = "l.resourcegroup:code" VALUE = "{ l.group_code }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Insert( l.resourcegroup ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.existing_scriptresource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_File( l.file_path, l.existing_scriptresources ) }">

	<MvIF EXPR = "{ l.existing_scriptresource_count }">
		<MvFOREACH ITERATOR = "l.existing_scriptresource" ARRAY = "l.existing_scriptresources" COUNT = "{ l.existing_scriptresource_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroup_Insert( l.existing_scriptresource:id, l.resourcegroup:id ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.scriptresource" VALUE = "{ l.existing_scriptresources[ 1 ] }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_UT ].GenerateUniqueJavaScriptResourceCode_FromFilePath( l.file_path, l.code ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.attribute_count" VALUE = "{ [ g.Feature_Filename_TUI_UT ].JavaScriptResource_Default_Attributes( 'L', l.attributes ) }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Create_Type_LocalFile( l.code, l.attributes, 1, 1, l.file_path, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroup_Insert( l.scriptresource:id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Capture_External_Modification_All_JavaScriptResource" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Capture_External_Modification_All_JavaScriptResource_Branch( TemplateManager_Working_Branch_ID() ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Capture_External_Modification_All_JavaScriptResource_Branch" PARAMETERS = "branch_id" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.scriptresource" ARRAY = "l.scriptresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Branch_Type( l.branch_id, 'L', l.scriptresources ) }">
		<MvIF EXPR = "{ NOT TemplateManager_Capture_External_Modification_JavaScriptResource_Branch( l.branch_id, l.scriptresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Capture_External_Modification_JavaScriptResource" PARAMETERS = "scriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Capture_External_Modification_JavaScriptResource_Branch( TemplateManager_Working_Branch_ID(), l.scriptresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Capture_External_Modification_JavaScriptResource_Branch" PARAMETERS = "branch_id, scriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.filepath" VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, l.scriptresource:file ) }">

	<MvIF EXPR = "{ file_read( l.filepath, 'script', l.source ) EQ -1 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_FindOrInsert( l.source, l.managedcontent ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ l.managedcontent:id EQ l.scriptresource:content_id }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Load_Branch_Head( l.branch_id, l.scriptresource:id, l.scriptresourceversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.old_version_id"						VALUE = "{ l.scriptresourceversion:id }">
	<MvASSIGN NAME = "l.old_content_id"						VALUE = "{ l.scriptresource:content_id }">

	<MvASSIGN NAME = "l.scriptresourceversion:user_id"		VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.scriptresourceversion:content_id"	VALUE = "{ l.managedcontent:id }">
	<MvASSIGN NAME = "l.scriptresourceversion:immutable"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Insert( l.scriptresourceversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Insert( l.branch_id, l.scriptresource:id, l.scriptresourceversion:id ) OR
					NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Update_Head( l.branch_id, l.scriptresource:id, l.scriptresourceversion:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Record_JavaScriptResourceVersion_Branch( l.branch_id, l.scriptresource:id, l.old_version_id, l.scriptresourceversion:id, l.scriptresourceversion:xref_id, 'External modification of JavaScript Resource \'' $ l.scriptresource:code $ '\' file \'' $ l.scriptresource:file $ '\' recorded' ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| CSS Resources
|
</MvCOMMENT>

<MvFUNCTION NAME = "TemplateManager_Delete_CSSResource" PARAMETERS = "cssresource var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Delete_CSSResource_Branch( TemplateManager_Working_Branch_ID(), l.cssresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_CSSResource_Branch" PARAMETERS = "branch_id, cssresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Load_Branch_Head( l.branch_id, l.cssresource:id, l.cssresourceversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Insert( l.branch_id, l.cssresource:id, 0 ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Update_Head( l.branch_id, l.cssresource:id, 0 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, 'CSS Resource \'' $ l.cssresource:code $ '\' deleted' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_CSSResourceVersion_Branch( l.branch_id, l.cssresource:id, l.cssresourceversion:id, 0, 0, 'CSS Resource \'' $ l.cssresource:code $ '\' deleted' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.cssresource:type EQ 'I' }">
		<MvIF EXPR = "{ NOT TemplateManager_Delete_ManagedTemplate_Branch( l.branch_id, l.cssresource:templ_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_CSSResource_Code" PARAMETERS = "code" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_CSSResource_Code( l.code, l.branches ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Branch_Code( l.branch:id, l.code, l.cssresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_CSSResource( l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_CSSResource_File" PARAMETERS = "file" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_All( l.branches ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'css', l.branch:tmpldir,	l.file,				'',					l.branchless_file ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Copy_Branch_ResourceFilename( 'css', '',				l.branchless_file,	l.branch:tmpldir,	l.branch_file ) }">

		<MvASSIGN NAME = "l.branch_cssresources"		VALUE = "">
		<MvASSIGN NAME = "l.branch_cssresource_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Branch_File( l.branch:id, l.branch_file, l.branch_cssresources ) }">

		<MvIF EXPR = "{ l.branch_cssresource_count }">
			<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
				<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvFOREACH ITERATOR = "l.cssresource" ARRAY = "l.branch_cssresources" COUNT = "{ l.branch_cssresource_count }">
				<MvASSIGN NAME = "l.null" VALUE = "{ TemplateManager_Delete_CSSResource( l.cssresource ) }">
			</MvFOREACH>

			<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
				<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Purge_CSSResource" PARAMETERS = "cssresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.cssresource:templ_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.cssresource:templ_id, l.managedtemplate ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Purge( l.managedtemplate ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResource_Purge( l.cssresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_All_CSSResource" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.cssresource" ARRAY = "l.cssresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_All( l.cssresources ) }">
		<MvIF EXPR = "{ l.cssresource:type EQ 'Z' }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_CSSResource( l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Register_Global_CSSResource_LocalFile_BuildPath" PARAMETERS = "filename, abs_file_path var, rel_file_path var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.store_folder"					VALUE = "{ padl( g.Store:id, 8, '0' ) }">
	<MvASSIGN NAME = "l.css_dir"						VALUE = "{ g.imageroot $ 'css/' $ l.store_folder $ '/' $ g.Store:branch:tmpldir }">
	<MvASSIGN NAME = "l.abs_file_path"					VALUE = "{ g.imageroot $ 'css/' $ l.store_folder $ '/' $ g.Store:branch:tmpldir $ l.filename }">
	<MvASSIGN NAME = "l.rel_file_path"					VALUE = "{ 'css/' $ l.store_folder $ '/' $ g.Store:branch:tmpldir $ l.filename }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.css_dir ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.css_dir, '0755' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Register_Global_CSSResource_LocalFile_WithFile" PARAMETERS = "group_code, filename, source_file_path, cssresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT TemplateManager_Register_Global_CSSResource_LocalFile_BuildPath( l.filename, l.abs_file_path, l.rel_file_path ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ sexists( l.source_file_path ) AND NOT sexists( l.abs_file_path ) }">
		<MvIF EXPR = "{ NOT scopy( l.source_file_path, l.abs_file_path ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00031', 'Unable to copy \'' $ l.source_file_path $ '\' to store-specific css directory: ' $ file_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ schmod( l.abs_file_path, '0644' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Register_Global_CSSResource_LocalFile_LowLevel( l.group_code, l.rel_file_path, l.cssresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Register_Global_CSSResource_LocalFile_WithContent" PARAMETERS = "group_code, filename, content var, cssresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT TemplateManager_Register_Global_CSSResource_LocalFile_BuildPath( l.filename, l.abs_file_path, l.rel_file_path ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT sexists( l.abs_file_path ) }">
		<MvIF EXPR = "{ file_create( l.abs_file_path, 'script', l.content ) EQ -1 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00032', 'Unable to create file \'' $ l.filename $ '\': ' $ file_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ schmod( l.abs_file_path, '0644' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Register_Global_CSSResource_LocalFile_LowLevel( l.group_code, l.rel_file_path, l.cssresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Register_Global_CSSResource_LocalFile_LowLevel" PARAMETERS = "group_code, file_path, cssresource var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_Code( l.group_code, l.resourcegroup ) }">
		<MvASSIGN NAME = "l.resourcegroup:code" VALUE = "{ l.group_code }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Insert( l.resourcegroup ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.existing_cssresource_count" VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_File( l.file_path, l.existing_cssresources ) }">

	<MvIF EXPR = "{ l.existing_cssresource_count }">
		<MvFOREACH ITERATOR = "l.existing_cssresource" ARRAY = "l.existing_cssresources" COUNT = "{ l.existing_cssresource_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Insert( l.existing_cssresource:id, l.resourcegroup:id ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.cssresource" VALUE = "{ l.existing_cssresources[ 1 ] }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_UT ].GenerateUniqueCSSResourceCode_FromFilePath( l.file_path, l.code ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.attribute_count" VALUE = "{ [ g.Feature_Filename_TUI_UT ].CSSResource_Default_Attributes( 'L', l.attributes ) }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Create_Type_LocalFile( l.code, l.attributes, 1, 1, l.file_path, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Insert( l.cssresource:id, l.resourcegroup:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Capture_External_Modification_All_CSSResource" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Capture_External_Modification_All_CSSResource_Branch( TemplateManager_Working_Branch_ID() ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Capture_External_Modification_All_CSSResource_Branch" PARAMETERS = "branch_id" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.cssresource" ARRAY = "l.cssresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Branch_Type( l.branch_id, 'L', l.cssresources ) }">
		<MvIF EXPR = "{ NOT TemplateManager_Capture_External_Modification_CSSResource_Branch( l.branch_id, l.cssresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Capture_External_Modification_CSSResource" PARAMETERS = "cssresource var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Capture_External_Modification_CSSResource_Branch( TemplateManager_Working_Branch_ID(), l.cssresource ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Capture_External_Modification_CSSResource_Branch" PARAMETERS = "branch_id, cssresource var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.filepath" VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, l.cssresource:file ) }">

	<MvIF EXPR = "{ file_read( l.filepath, 'script', l.source ) EQ -1 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_FindOrInsert( l.source, l.managedcontent ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ l.managedcontent:id EQ l.cssresource:content_id }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Load_Branch_Head( l.branch_id, l.cssresource:id, l.cssresourceversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.old_version_id"					VALUE = "{ l.cssresourceversion:id }">
	<MvASSIGN NAME = "l.old_content_id"					VALUE = "{ l.cssresource:content_id }">

	<MvASSIGN NAME = "l.cssresourceversion:user_id"		VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.cssresourceversion:content_id"	VALUE = "{ l.managedcontent:id }">
	<MvASSIGN NAME = "l.cssresourceversion:immutable"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Insert( l.cssresourceversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Insert( l.branch_id, l.cssresource:id, l.cssresourceversion:id ) OR
					NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Update_Head( l.branch_id, l.cssresource:id, l.cssresourceversion:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Record_CSSResourceVersion_Branch( l.branch_id, l.cssresource:id, l.old_version_id, l.cssresourceversion:id, l.cssresourceversion:xref_id, 'External modification of CSS Resource \'' $ l.cssresource:code $ '\' file \'' $ l.cssresource:file $ '\' recorded' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Begin" PARAMETERS = "notes" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Begin_Branch( TemplateManager_Working_Branch_ID(), l.notes ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Begin_Branch" PARAMETERS = "branch_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Get_WorkingBranchStack_Current( l.stackentry ) }">

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Load_Branch_Current( l.branch_id, l.current_changeset ) }">
		<MvASSIGN NAME = "l.stackentry:changeset:parent_id"	VALUE = "{ l.current_changeset:id }">
	<MvELSEIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvASSIGN NAME = "l.stackentry:changeset:parent_id"	VALUE = 0>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.stackentry:changeset:branch_id"		VALUE = "{ l.branch_id }">
	<MvASSIGN NAME = "l.stackentry:changeset:user_id"		VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.stackentry:changeset:dtstamp"		VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.stackentry:changeset:notes"			VALUE = "{ l.notes }">

	<MvASSIGN NAME = "l.stackentry:changeset_active"		VALUE = 1>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Active" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Get_WorkingBranchStack_Current( l.stackentry ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.stackentry:changeset_active EQ 1 }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Commit" PARAMETERS = "changeset var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Get_WorkingBranchStack_Current( l.stackentry ) }">

	<MvIF EXPR = "{ l.stackentry:changeset:id EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Insert( l.stackentry:changeset ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Insert_ChangesetTags( l.stackentry:changeset ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.changeset" VALUE = "{ l.stackentry:changeset }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_ManagedTemplateVersion" PARAMETERS = "templ_id, old_id, new_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Record_ManagedTemplateVersion_Branch( TemplateManager_Working_Branch_ID(), l.templ_id, l.old_id, l.new_id, l.notes ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_ManagedTemplateVersion_Branch" PARAMETERS = "branch_id, templ_id, old_id, new_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, l.notes ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Commit( l.changeset ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.result"				VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplateChange_InsertOrUpdate( l.changeset:branch_id, l.changeset:id, l.templ_id, l.old_id, l.new_id ) }">

	<MvIF EXPR = "{ l.end_changeset }">
		<MvASSIGN NAME = "l.result"			VALUE = "{ l.result AND TemplateManager_Changeset_End() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_PageVersion" PARAMETERS = "page_id, old_id, new_id, xref_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Record_PageVersion_Branch( TemplateManager_Working_Branch_ID(), l.page_id, l.old_id, l.new_id, l.xref_id, l.notes ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_PageVersion_Branch" PARAMETERS = "branch_id, page_id, old_id, new_id, xref_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, l.notes ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Commit( l.changeset ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.result"				VALUE = "{ [ g.Feature_Filename_TUI_DB ].PageChange_InsertOrUpdate( l.changeset:branch_id, l.changeset:id, l.page_id, l.old_id, l.new_id, l.xref_id ) }">

	<MvIF EXPR = "{ l.end_changeset }">
		<MvASSIGN NAME = "l.result"			VALUE = "{ l.result AND TemplateManager_Changeset_End() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_ItemVersion" PARAMETERS = "item_id, old_id, new_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Record_ItemVersion_Branch( TemplateManager_Working_Branch_ID(), l.item_id, l.old_id, l.new_id, l.notes ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_ItemVersion_Branch" PARAMETERS = "branch_id, item_id, old_id, new_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, l.notes ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Commit( l.changeset ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.result"				VALUE = "{ [ g.Feature_Filename_TUI_DB ].ItemChange_InsertOrUpdate( l.changeset:branch_id, l.changeset:id, l.item_id, l.old_id, l.new_id ) }">

	<MvIF EXPR = "{ l.end_changeset }">
		<MvASSIGN NAME = "l.result"			VALUE = "{ l.result AND TemplateManager_Changeset_End() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_JavaScriptResourceVersion" PARAMETERS = "res_id, old_id, new_id, xref_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Record_JavaScriptResourceVersion_Branch( TemplateManager_Working_Branch_ID(), l.res_id, l.old_id, l.new_id, l.xref_id, l.notes ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_JavaScriptResourceVersion_Branch" PARAMETERS = "branch_id, res_id, old_id, new_id, xref_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, l.notes ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Commit( l.changeset ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.result"				VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceChange_InsertOrUpdate( l.changeset:branch_id, l.changeset:id, l.res_id, l.old_id, l.new_id, l.xref_id ) }">

	<MvIF EXPR = "{ l.end_changeset }">
		<MvASSIGN NAME = "l.result"			VALUE = "{ l.result AND TemplateManager_Changeset_End() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_CSSResourceVersion" PARAMETERS = "res_id, old_id, new_id, xref_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Record_CSSResourceVersion_Branch( TemplateManager_Working_Branch_ID(), l.res_id, l.old_id, l.new_id, l.xref_id, l.notes ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_CSSResourceVersion_Branch" PARAMETERS = "branch_id, res_id, old_id, new_id, xref_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, l.notes ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Commit( l.changeset ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.result"				VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceChange_InsertOrUpdate( l.changeset:branch_id, l.changeset:id, l.res_id, l.old_id, l.new_id, l.xref_id ) }">

	<MvIF EXPR = "{ l.end_changeset }">
		<MvASSIGN NAME = "l.result"			VALUE = "{ l.result AND TemplateManager_Changeset_End() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_ManagedPropertyVersion" PARAMETERS = "prop_id, old_id, new_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Changeset_Record_ManagedPropertyVersion_Branch( TemplateManager_Working_Branch_ID(), l.prop_id, l.old_id, l.new_id, l.notes ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_Record_ManagedPropertyVersion_Branch" PARAMETERS = "branch_id, prop_id, old_id, new_id, notes" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, l.notes ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Commit( l.changeset ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.result"				VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedPropertyChange_InsertOrUpdate( l.changeset:branch_id, l.changeset:id, l.prop_id, l.old_id, l.new_id ) }">

	<MvIF EXPR = "{ l.end_changeset }">
		<MvASSIGN NAME = "l.result"			VALUE = "{ l.result AND TemplateManager_Changeset_End() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Changeset_End" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Get_WorkingBranchStack_Current( l.stackentry ) }">

	<MvASSIGN NAME = "l.stackentry:changeset"			VALUE = "">
	<MvASSIGN NAME = "l.stackentry:changeset_active"	VALUE = 0>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Push_WorkingBranchStack" PARAMETERS = "branch var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Push_WorkingBranchStack_Entry( l.stackentry ) }">

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Set_Working_Branch( l.branch ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Push_WorkingBranchStack_Entry" PARAMETERS = "stackentry var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Session:_mgr:working_branch_stack_count" VALUE = "{ miva_array_insert_var( g.Session:_mgr:working_branch_stack, l.stackentry, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Pop_WorkingBranchStack" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session:_mgr:working_branch_stack_count GT 1 }">
		<MvASSIGN NAME = "g.Session:_mgr:working_branch_stack_count" VALUE = "{ miva_array_delete( g.Session:_mgr:working_branch_stack, g.Session:_mgr:working_branch_stack_count, 1 ) }">

		<MvIF EXPR = "{ NOT TemplateManager_Set_Working_Branch( g.Session:_mgr:working_branch_stack[ g.Session:_mgr:working_branch_stack_count ]:branch ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Update_WorkingBranchStack_Branch" PARAMETERS = "branch var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session:_mgr:working_branch_stack_count EQ 0 }">
		<MvEVAL EXPR = "{ TemplateManager_Push_WorkingBranchStack_Entry( l.stackentry ) }">
	</MvIF>

	<MvASSIGNARRAY NAME = "g.Session:_mgr:working_branch_stack" VALUE = "{ l.branch }">
		<MvDIMENSION INDEX = "{ g.Session:_mgr:working_branch_stack_count }">
		<MvMEMBER NAME = "branch">
	</MvASSIGNARRAY>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Get_WorkingBranchStack_Current" PARAMETERS = "stackentry var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.stackentry" VALUE = "">

	<MvIF EXPR = "{ g.Session:_mgr:working_branch_stack_count EQ 0 }">
		<MvASSIGN NAME = "l.new_stackentry"			VALUE = "">
		<MvASSIGN NAME = "l.new_stackentry:branch"	VALUE = "{ g.Store:branch }">

		<MvEVAL EXPR = "{ TemplateManager_Push_WorkingBranchStack_Entry( l.new_stackentry ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Due to pass-by-variable restrictions in MivaScript, we must reference each
	| sub-member of the actual stack entry into the "stackentry var" variable.
	|
	</MvCOMMENT>

	<MvREFERENCEARRAY NAME = "l.stackentry:branch" VARIABLE = "g.Session:_mgr:working_branch_stack">
		<MvDIMENSION INDEX = "{ g.Session:_mgr:working_branch_stack_count }">
		<MvMEMBER NAME = "branch">
	</MvREFERENCEARRAY>

	<MvREFERENCEARRAY NAME = "l.stackentry:changeset" VARIABLE = "g.Session:_mgr:working_branch_stack">
		<MvDIMENSION INDEX = "{ g.Session:_mgr:working_branch_stack_count }">
		<MvMEMBER NAME = "changeset">
	</MvREFERENCEARRAY>

	<MvREFERENCEARRAY NAME = "l.stackentry:changeset_active" VARIABLE = "g.Session:_mgr:working_branch_stack">
		<MvDIMENSION INDEX = "{ g.Session:_mgr:working_branch_stack_count }">
		<MvMEMBER NAME = "changeset_active">
	</MvREFERENCEARRAY>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Determine_Branch" PARAMETERS = "store var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.BranchKey"						VALUE = "{ trim( g.BranchKey ) }">

	<MvIF EXPR = "{ NOT ISNULL g.Session:branch_id AND g.Session:branch_id EQ 0 }">
		<MvASSIGN NAME = "l.branchkey"					VALUE = "">
	<MvELSEIF EXPR = "{ g.Session:branch_id }">
		<MvASSIGN NAME = "l.branchkey"					VALUE = "">

		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Branch_Load_ID_Cached( g.Session:branch_id, l.store:branch ) }">
			<MvASSIGN NAME = "g.Store_Template_Path"	VALUE = "{ g.Module_Root $ 'templates/s' $ padl( l.store:id , 2, '0' ) $ '/' $ l.store:branch:tmpldir }">

			<MvEVAL EXPR = "{ TemplateManager_Update_WorkingBranchStack_Branch( l.store:branch ) }">

			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSEIF EXPR = "{ NOT ISNULL g.Session:branchkey }">
		<MvASSIGN NAME = "l.branchkey"					VALUE = "{ g.Session:branchkey }">
	<MvELSEIF EXPR = "{ g.Session:source EQ 'admin' }">
		<MvREFERENCEARRAY NAME = "l.branchkey"			VARIABLE = "g.Request_Cookies">
			<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( l.store:code ) $ '-branch-key' }">
		</MvREFERENCEARRAY>
	<MvELSEIF EXPR = "{ NOT ISNULL g.BranchKey }">
		<MvASSIGN NAME = "l.branchkey"					VALUE = "{ g.BranchKey }">
		<MvASSIGN NAME = "l.null"						VALUE = "{ TemplateManager_Clear_RuntimeBranchPreviewSuppressCookie() }">
	<MvELSE>
		<MvREFERENCEARRAY NAME = "l.branchkey"			VARIABLE = "g.Request_Cookies">
			<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( l.store:code ) $ '-runtime-branch-key' }">
		</MvREFERENCEARRAY>
	</MvIF>

	<MvCOMMENT>
	|
	| Set the working branch based on the branch key (if specified)
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL l.branchkey }">
		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Branch_Load_BranchKey_Cached( l.branchkey, l.store:branch ) }">
			<MvASSIGN NAME = "g.Store_Template_Path"	VALUE = "{ g.Module_Root $ 'templates/s' $ padl( l.store:id , 2, '0' ) $ '/' $ l.store:branch:tmpldir }">

			<MvIF EXPR = "{ NOT ISNULL g.BranchKey AND g.Session:source NE 'admin' }">
				<MvASSIGN NAME = "l.null"				VALUE = "{ TemplateManager_Set_RuntimeBranchCookie( l.store:branch ) }">
			</MvIF>

			<MvEVAL EXPR = "{ TemplateManager_Update_WorkingBranchStack_Branch( l.store:branch ) }">

			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Set the primary branch as the working branch
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Branch_Load_ID_Cached( l.store:branch_id, l.store:branch ) }">
		<MvASSIGN NAME = "g.Store_Template_Path"		VALUE = "{ g.Module_Root $ 'templates/s' $ padl( l.store:id , 2, '0' ) $ '/' $ l.store:branch:tmpldir }">

		<MvEVAL EXPR = "{ TemplateManager_Update_WorkingBranchStack_Branch( l.store:branch ) }">

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Set_Working_Branch" PARAMETERS = "branch var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Session:branchkey" VALUE = "{ l.branch:branchkey }">

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Determine_Branch( g.Store ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Set_Working_Branch_ID" PARAMETERS = "branch_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Session:branch_id" VALUE = "{ l.branch_id }">

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Determine_Branch( g.Store ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Set_BranchCookie" PARAMETERS = "branch var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].v10_SetCookie( g.Output_Cookies,
																	'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-branch-key',
																	l.branch:branchkey,
																	'',
																	s.dyn_time_t + 60 * 60 * 24 * 365,
																	'',
																	g.Secure,
																	'Strict'  ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Clear_BranchCookie" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].ClearCookie( g.Output_Cookies,
																  'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-branch-key',
																  '',
																  '',
																  g.Secure ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Set_RuntimeBranchCookie" PARAMETERS = "branch var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].v10_SetCookie( g.Output_Cookies,
																	'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-key',
																	l.branch:branchkey,
																	g.Domain:mmc_domn,
																	'',
																	g.Domain:mmc_path,
																	0,
																	'Lax' ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Clear_RuntimeBranchCookie" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].ClearCookie( g.Output_Cookies,
																  'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-key',
																  g.Domain:mmc_domn,
																  g.Domain:mmc_path,
																  0 ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Set_RuntimeBranchDateTimeCookie" PARAMETERS = "branch var, time_t" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].v10_SetCookie( g.Output_Cookies,
																	'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-datetime',
																	[ g.Module_Library_Utilities ].Format_RFC3339_DateTime( l.time_t ),
																	g.Domain:mmc_domn,
																	'',
																	g.Domain:mmc_path,
																	0,
																	'Lax' ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Clear_RuntimeBranchDateTimeCookie" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].ClearCookie( g.Output_Cookies,
																  'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-datetime',
																  g.Domain:mmc_domn,
																  g.Domain:mmc_path,
																  0 ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Set_RuntimeBranchPreviewSuppressCookie" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].v10_SetCookie( g.Output_Cookies,
																	'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-preview-suppress',
																	1,
																	g.Domain:mmc_domn,
																	'',
																	g.Domain:mmc_path,
																	0,
																	'Lax' ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Clear_RuntimeBranchPreviewSuppressCookie" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].ClearCookie( g.Output_Cookies,
																  'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-preview-suppress',
																  g.Domain:mmc_domn,
																  g.Domain:mmc_path,
																  0 ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_DateTime" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session:source NE 'runtime' }">
		<MvFUNCTIONRETURN VALUE = "{ s.time_t }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL g.Session:cache:templatemanager_datetime }">
		<MvFUNCTIONRETURN VALUE = "{ g.Session:cache:templatemanager_datetime }">
	</MvIF>

	<MvASSIGN NAME = "g.Session:cache:templatemanager_datetime" VALUE = "{ TemplateManager_DateTime_LowLevel() }">

	<MvFUNCTIONRETURN VALUE = "{ g.Session:cache:templatemanager_datetime }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_DateTime_LowLevel" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.BranchKey"						VALUE = "{ trim( g.BranchKey ) }">
	<MvASSIGN NAME = "g.Branch_DateTime"				VALUE = "{ trim( g.Branch_DateTime ) }">

	<MvIF EXPR = "{ NOT ISNULL g.Branch_DateTime }">
		<MvASSIGN NAME = "l.branch_datetime"			VALUE = "{ g.Branch_DateTime }">
	<MvELSE>
		<MvREFERENCEARRAY NAME = "l.branch_datetime"	VARIABLE = "g.Request_Cookies">
			<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-datetime' }">
		</MvREFERENCEARRAY>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.branch_datetime }">
		<MvFUNCTIONRETURN VALUE = "{ s.time_t }">
	<MvELSEIF EXPR = "{ isdigit( l.branch_datetime ) }">
		<MvASSIGN NAME = "l.time_t" VALUE = "{ l.branch_datetime }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Timestamp_RFC3339_To_Time( l.branch_datetime, l.time_t ) }">
		<MvFUNCTIONRETURN VALUE = "{ s.time_t }">
	</MvIF>

	<MvCOMMENT>
	|
	| Ensure branch exists
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL g.BranchKey }">
		<MvASSIGN NAME = "l.branchkey"					VALUE = "{ g.BranchKey }">
	<MvELSE>
		<MvREFERENCEARRAY NAME = "l.branchkey"			VARIABLE = "g.Request_Cookies">
			<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-runtime-branch-key' }">
		</MvREFERENCEARRAY>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.branchkey }">
		<MvFUNCTIONRETURN VALUE = "{ s.time_t }">
	<MvELSEIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_BranchKey( l.branchkey, l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ s.time_t }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.time_t }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Working_Branch_ID" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL g.Store:branch }">
		<MvFUNCTIONRETURN VALUE = "{ g.Store:branch:id }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ g.Store:branch_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Primary_Branch_ID" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.Store:branch_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Working_Branch_Is_Primary" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Working_Branch_ID() EQ TemplateManager_Primary_Branch_ID() }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Sanitize_BranchTags" PARAMETERS = "delimited, tags var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.tags"					VALUE = "">
	<MvASSIGN NAME = "l.tag_count"				VALUE = 0>

	<MvCOMMENT>
	|
	| Split, tolower and normalize (remove "#") from tags.  Discard any empty values.  Prevent duplicates
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.input_tag" ARRAY = "l.input_tags" COUNT = "{ miva_splitstring( glosub( l.delimited, '#', '' ), ' ', l.input_tags, 'trim,lower' ) }">
		<MvIF EXPR = "{ NOT ISNULL l.input_tag }">
			<MvIF EXPR = "{ NOT miva_array_search( l.tags, 1, l.tag, 'l.tag EQ l.input_tag' ) }">
				<MvASSIGN NAME = "l.tag_count"	VALUE = "{ miva_array_insert_var( l.tags, l.input_tag, -1 ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.tag_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Get_BranchTags" PARAMETERS = "tags var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT g.Session:cache:branchtags:loaded }">
		<MvREFERENCEARRAY NAME = "l.branchtags" VARIABLE = "g.Request_Cookies">
			<MvMEMBER NAME = "{ 'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-branch-tags' }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT ISNULL l.branchtags }">
			<MvASSIGN NAME = "g.Session:cache:branchtags:tag_count"	VALUE = "{ TemplateManager_Sanitize_BranchTags( crypto_base64_decode( l.branchtags ), g.Session:cache:branchtags:tags ) }">
		<MvELSE>
			<MvASSIGN NAME = "g.Session:cache:branchtags:tag_count"	VALUE = 0>
			<MvASSIGN NAME = "g.Session:cache:branchtags:tags"		VALUE = "">
		</MvIF>

		<MvASSIGN NAME = "g.Session:cache:branchtags:loaded"		VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.tags"										VALUE = "{ g.Session:cache:branchtags:tags }">
	<MvFUNCTIONRETURN VALUE = "{ g.Session:cache:branchtags:tag_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Set_BranchTags" PARAMETERS = "tags" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Session:cache:branchtags:loaded"	VALUE = 1>
	<MvASSIGN NAME = "g.Session:cache:branchtags:tag_count"	VALUE = "{ TemplateManager_Sanitize_BranchTags( l.tags, g.Session:cache:branchtags:tags ) }">

	<MvIF EXPR = "{ g.Session:cache:branchtags:tag_count EQ 0 }">
		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].ClearCookie( g.Output_Cookies,
																	  'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-branch-tags',
																	  '',
																	  '',
																	  g.Secure ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].v10_SetCookie( g.Output_Cookies,
																		'mm-' $ [ g.Module_Library_Utilities ].AlphaNumericOnly( g.Store:code ) $ '-branch-tags',
																		crypto_base64_encode( miva_joinstring( g.Session:cache:branchtags:tags, ' ', '' ) ),
																		'',
																		s.dyn_time_t + 60 * 60 * 24 * 365,
																		'',
																		g.Secure,
																		'Strict'  ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Format_BranchTags" PARAMETERS = "tags var, tag_count" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.formatted_tags">
		<MvFOREACH INDEX = "l.tag_pos" ITERATOR = "l.tag" ARRAY = "l.tags" COUNT = "{ l.tag_count }">
			<MvIF EXPR = "{ l.tag_pos GT 1 }">
				<MvEVAL EXPR = " ">
			</MvIF>

			<MvEVAL EXPR = "#">
			<MvEVAL EXPR = "{ l.tag }">
		</MvFOREACH>
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ l.formatted_tags }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Override_BranchTags" PARAMETERS = "tags" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Session:cache:branchtags:loaded"	VALUE = 1>
	<MvASSIGN NAME = "g.Session:cache:branchtags:tag_count"	VALUE = "{ TemplateManager_Sanitize_BranchTags( l.tags, g.Session:cache:branchtags:tags ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Format_ChangesetTags" PARAMETERS = "tags var, tag_count" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.formatted_tags">
		<MvFOREACH INDEX = "l.tag_pos" ITERATOR = "l.tag" ARRAY = "l.tags" COUNT = "{ l.tag_count }">
			<MvIF EXPR = "{ l.tag_pos GT 1 }">
				<MvEVAL EXPR = " ">
			</MvIF>

			<MvEVAL EXPR = "#">
			<MvEVAL EXPR = "{ l.tag:tag }">
		</MvFOREACH>
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ l.formatted_tags }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Insert_ChangesetTags" PARAMETERS = "changeset var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.tag" ARRAY = "l.tags" COUNT = "{ TemplateManager_Get_BranchTags( l.tags ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateTag_Insert( l.tag ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ChangesetTag_Insert( l.changeset:id, l.tag ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Branch" PARAMETERS = "parent_branch var, parent_changeset var, branch var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.result"		VALUE = 1>

	<MvIF EXPR = "{ l.result GT 0 }"> <MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Create_Branch_Session_Init( l.parent_branch, l.parent_changeset, l.branch, l.session ) }">	</MvIF>
	<MvIF EXPR = "{ l.result GT 0 }"> <MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Create_Branch_Session_Process( l.session ) }">												</MvIF>
	<MvIF EXPR = "{ l.result GT 0 }"> <MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Create_Branch_Session_Finalize( l.session ) }">											</MvIF>

	<MvIF EXPR = "{ l.result EQ -1 }">
		<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].Branch_Delete( l.session:branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00110', 'Operation timed out' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Branch_Session_Init" PARAMETERS = "parent_branch var, parent_changeset var, branch var, session var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT TemplateManager_Create_Branch_Session_Init_LowLevel( l.parent_branch, l.parent_changeset, l.branch, l.session ) }">
		<MvASSIGN NAME = "l.error_code"		VALUE = "{ g.Error_Code }">
		<MvASSIGN NAME = "l.error_message"	VALUE = "{ g.Error_Message }">

		<MvIF EXPR = "{ l.session:branch_created }">
			<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Feature_Filename_TUI_DB ].Branch_Delete( l.session:branch ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.error_code, l.error_message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Branch_Session_Init_LowLevel" PARAMETERS = "parent_branch var, parent_changeset var, branch var, session var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.session"							VALUE = "">
	<MvASSIGN NAME = "l.session:id"							VALUE = "{ MakeSessionID() }">
	<MvASSIGN NAME = "l.session:state"						VALUE = "">
	<MvASSIGN NAME = "l.session:state:pages"				VALUE = 0>
	<MvASSIGN NAME = "l.session:state:items"				VALUE = 0>
	<MvASSIGN NAME = "l.session:state:javascriptresources"	VALUE = 0>
	<MvASSIGN NAME = "l.session:state:cssresources"			VALUE = 0>
	<MvASSIGN NAME = "l.session:state:properties"			VALUE = 0>
	<MvASSIGN NAME = "l.session:state:templates"			VALUE = 0>
	<MvASSIGN NAME = "l.session:branch_created"				VALUE = 0>

	<MvIF EXPR = "{ ISNULL l.parent_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Capture_External_Modification_All_CSSResource_Branch( l.parent_branch:id ) OR
						NOT TemplateManager_Capture_External_Modification_All_JavaScriptResource_Branch( l.parent_branch:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.session:parent_branch"				VALUE = "{ l.parent_branch }">
	<MvASSIGN NAME = "l.session:parent_changeset"			VALUE = "{ l.parent_changeset }">
	<MvASSIGN NAME = "l.session:branch"						VALUE = "{ l.branch }">

	<MvASSIGN NAME = "l.session:branch:id"					VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'Branches' ) }">
	<MvASSIGN NAME = "l.session:branch:immutable"			VALUE = 0>
	<MvASSIGN NAME = "l.session:branch:branchkey"			VALUE = "{ MakeSessionID() }">
	<MvASSIGN NAME = "l.session:branch:framework"			VALUE = "{ l.parent_branch:framework }">
	<MvASSIGN NAME = "l.session:branch:tmpldir"				VALUE = "{ 'b' $ padl( l.session:branch:id, 2, '0' ) $ '/' }">

	<MvCOMMENT>
	|
	| Create the branch
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Insert( l.session:branch ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.session:branch_created"				VALUE = 1>

	<MvASSIGN NAME = "l.session:changeset:parent_id"		VALUE = "{ int( l.parent_changeset:id ) }">
	<MvASSIGN NAME = "l.session:changeset:branch_id"		VALUE = "{ l.session:branch:id }">
	<MvASSIGN NAME = "l.session:changeset:user_id"			VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.session:changeset:dtstamp"			VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.session:changeset:notes"			VALUE = "{ 'Branch \'' $ l.session:branch:name $ '\' created' }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Insert( l.session:changeset ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Insert_ChangesetTags( l.session:changeset ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Branch_Session_Process" PARAMETERS = "session var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.result"				VALUE = "{ TemplateManager_Create_Branch_Session_Process_LowLevel( l.session ) }">

	<MvIF EXPR = "{ l.result EQ 0 }">
		<MvASSIGN NAME = "l.error_code"		VALUE = "{ g.Error_Code }">
		<MvASSIGN NAME = "l.error_message"	VALUE = "{ g.Error_Message }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Feature_Filename_TUI_DB ].Branch_Delete( l.session:branch ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.error_code, l.error_message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Branch_Session_Process_LowLevel" PARAMETERS = "session var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.result"									VALUE = 1>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:pages NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_Pages( l.session:parent_branch, l.session:parent_changeset, l.session:branch, l.session:changeset ) }">
		<MvASSIGN NAME = "l.session:state:pages"				VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:items NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_Items( l.session:parent_branch, l.session:parent_changeset, l.session:branch, l.session:changeset ) }">
		<MvASSIGN NAME = "l.session:state:items"				VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:javascriptresources NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_JavaScriptResources( l.session:parent_branch, l.session:parent_changeset, l.session:branch, l.session:changeset ) }">
		<MvASSIGN NAME = "l.session:state:javascriptresources"	VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:cssresources NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_CSSResources( l.session:parent_branch, l.session:parent_changeset, l.session:branch, l.session:changeset ) }">
		<MvASSIGN NAME = "l.session:state:cssresources"			VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:properties NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_Properties( l.session:parent_branch, l.session:parent_changeset, l.session:branch, l.session:changeset ) }">
		<MvASSIGN NAME = "l.session:state:properties"			VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:templates NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_Templates( l.session:parent_branch, l.session:parent_changeset, l.session:branch, l.session:changeset ) }">
		<MvASSIGN NAME = "l.session:state:templates"			VALUE = "{ l.result }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Branch_Session_Finalize" PARAMETERS = "session var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, notes, dest_changeset var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.result" 	VALUE = 1>

	<MvIF EXPR = "{ l.result GT 0 }"> <MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Copy_Branch_Session_Init( l.source_branch, l.source_changeset, l.dest_branch, l.notes, l.session ) }">	</MvIF>
	<MvIF EXPR = "{ l.result GT 0 }"> <MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Copy_Branch_Session_Process( l.session ) }">															</MvIF>
	<MvIF EXPR = "{ l.result GT 0 }"> <MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Copy_Branch_Session_Finalize( l.session ) }">															</MvIF>

	<MvIF EXPR = "{ l.result EQ -1 }">
		<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Delete( l.session:dest_changeset ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00111', 'Operation timed out' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_Session_Init" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, notes, session var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT TemplateManager_Copy_Branch_Session_Init_LowLevel( l.source_branch, l.source_changeset, l.dest_branch, l.notes, l.session ) }">
		<MvASSIGN NAME = "l.error_code"		VALUE = "{ g.Error_Code }">
		<MvASSIGN NAME = "l.error_message"	VALUE = "{ g.Error_Message }">

		<MvIF EXPR = "{ l.session:changeset_created }">
			<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Delete( l.session:dest_changeset ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.error_code, l.error_message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_Session_Init_LowLevel" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, notes, session var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.session"								VALUE = "">
	<MvASSIGN NAME = "l.session:id"								VALUE = "{ MakeSessionID() }">
	<MvASSIGN NAME = "l.session:state"							VALUE = "">
	<MvASSIGN NAME = "l.session:state:pages"					VALUE = 0>
	<MvASSIGN NAME = "l.session:state:items"					VALUE = 0>
	<MvASSIGN NAME = "l.session:state:javascriptresources"		VALUE = 0>
	<MvASSIGN NAME = "l.session:state:cssresources"				VALUE = 0>
	<MvASSIGN NAME = "l.session:state:properties"				VALUE = 0>
	<MvASSIGN NAME = "l.session:state:templates"				VALUE = 0>
	<MvASSIGN NAME = "l.session:changeset_created"				VALUE = 0>

	<MvIF EXPR = "{ NOT TemplateManager_Capture_External_Modification_All_CSSResource_Branch( l.dest_branch:id ) OR
					NOT TemplateManager_Capture_External_Modification_All_JavaScriptResource_Branch( l.dest_branch:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.source_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Capture_External_Modification_All_CSSResource_Branch( l.source_branch:id ) OR
						NOT TemplateManager_Capture_External_Modification_All_JavaScriptResource_Branch( l.source_branch:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Load_Branch_Current( l.dest_branch:id, l.current_changeset ) }">
		<MvASSIGN NAME = "l.session:dest_changeset:parent_id"	VALUE = "{ l.current_changeset:id }">
	<MvELSEIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvASSIGN NAME = "l.session:dest_changeset:parent_id"	VALUE = 0>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.session:source_branch"					VALUE = "{ l.source_branch }">
	<MvASSIGN NAME = "l.session:source_changeset"				VALUE = "{ l.source_changeset }">
	<MvASSIGN NAME = "l.session:dest_branch"					VALUE = "{ l.dest_branch }">

	<MvASSIGN NAME = "l.session:dest_changeset:branch_id"		VALUE = "{ l.session:dest_branch:id }">
	<MvASSIGN NAME = "l.session:dest_changeset:user_id"			VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.session:dest_changeset:dtstamp"			VALUE = "{ s.dyn_time_t }">

	<MvIF EXPR = "{ NOT ISNULL l.notes }">					<MvASSIGN NAME = "l.session:dest_changeset:notes" VALUE = "{ l.notes }">
	<MvELSEIF EXPR = "{ NOT ISNULL l.source_changeset }">	<MvASSIGN NAME = "l.session:dest_changeset:notes" VALUE = "{ 'Copied from branch \'' $ l.session:source_branch:name $ '\': ' $ l.session:source_changeset:notes }">
	<MvELSE>												<MvASSIGN NAME = "l.session:dest_changeset:notes" VALUE = "{ 'Copied from branch \'' $ l.session:source_branch:name $ '\'' }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Insert( l.session:dest_changeset ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.session:changeset_created"				VALUE = 1>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Insert_ChangesetTags( l.session:dest_changeset ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_Session_Process" PARAMETERS = "session var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.result"				VALUE = "{ TemplateManager_Copy_Branch_Session_Process_LowLevel( l.session ) }">

	<MvIF EXPR = "{ l.result EQ 0 }">
		<MvASSIGN NAME = "l.error_code"		VALUE = "{ g.Error_Code }">
		<MvASSIGN NAME = "l.error_message"	VALUE = "{ g.Error_Message }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Delete( l.session:dest_changeset ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.error_code, l.error_message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_Session_Process_LowLevel" PARAMETERS = "session var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.result"									VALUE = 1>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:pages NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_Pages( l.session:source_branch, l.session:source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
		<MvASSIGN NAME = "l.session:state:pages"				VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:items NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_Items( l.session:source_branch, l.session:source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
		<MvASSIGN NAME = "l.session:state:items"				VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:javascriptresources NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_JavaScriptResources( l.session:source_branch, l.session:source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
		<MvASSIGN NAME = "l.session:state:javascriptresources"	VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:cssresources NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_CSSResources( l.session:source_branch, l.session:source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
		<MvASSIGN NAME = "l.session:state:cssresources"			VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:properties NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_Properties( l.session:source_branch, l.session:source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
		<MvASSIGN NAME = "l.session:state:properties"			VALUE = "{ l.result }">
	</MvIF>

	<MvIF EXPR = "{ l.result GT 0 AND l.session:state:templates NE 1 }">
		<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Copy_Branch_Templates( l.session:source_branch, l.session:source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
		<MvASSIGN NAME = "l.session:state:templates"			VALUE = "{ l.result }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_Session_Finalize" PARAMETERS = "session var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_Pages" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URISettings_Load_Cached( l.urisettings ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'pbv_source.page_id		AS page_id,
																		  p.templ_id				AS page_templ_id,
																		  pbv_dest.version_id		AS previous_id,
																		  pv_source.user_id			AS source_user_id,
																		  pv_source.admin			AS source_admin,
																		  pv_source.layout			AS source_layout,
																		  pv_source.fragment		AS source_fragment,
																		  pv_source.secure			AS source_secure,
																		  pv_source.public			AS source_public,
																		  pv_source.code			AS source_code,
																		  pv_source.name			AS source_name,
																		  pv_source.title			AS source_title,
																		  pv_source.ui_id			AS source_ui_id,
																		  pv_source.cache			AS source_cache,
																		  pv_source.cacheset		AS source_cacheset,
																		  pv_dest.code				AS dest_code,
																		  pv_dest.xref_id			AS dest_xref_id' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'Pages',				'p' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'PageBranchVersions',	'pbv_source' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'pbv_source', g.Store_Table_Prefix $ 'PageBranchVersions',
																		 'pbv_dest', 'pbv_dest.branch_id = ? AND pbv_dest.page_id = pbv_source.page_id AND pbv_dest.head = 1',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.dest_branch:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'pbv_source', g.Store_Table_Prefix $ 'PageVersions', 'pv_dest', 'pv_dest.id = pbv_dest.version_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'pbv_source.branch_id	= ?',						[ g.Module_Library_DB ].SQL_Query_Field( l.source_branch:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'pbv_source.head		= 1',						'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'p.id					= pbv_source.page_id',		'' ) }">

	<MvIF EXPR = "{ NOT l.source_changeset:id }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'pbv_source.version_id																AS source_id,
																			 ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'pv_source.xref_id', '0' )  $ '	AS source_xref_id,
																			 ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'pv_source.xref_id', '0' )  $ '	AS target_xref_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'pbv_source', g.Store_Table_Prefix $ 'PageVersions', 'pv_source', 'pv_source.id = pbv_source.version_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'pbv_dest.version_id', 0 ) $ ' <> pbv_source.version_id', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'pc.new_id																					AS source_id,
																			 ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'pv_source.xref_id', '0' )			$ '	AS source_xref_id,
																			 ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'pc.xref_id', 'pv_source.xref_id' )	$ '	AS target_xref_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'PageChanges', 'pc' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'pc', g.Store_Table_Prefix $ 'PageVersions', 'pv_source', 'pv_source.id = pc.new_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'pc.branch_id	= pbv_source.branch_id	AND
																			 pc.page_id		= pbv_source.page_id	AND
																			 pc.set_id		=
																			 (
																				SELECT
																					MAX( pc2.set_id )
																				FROM
																					' $ g.Store_Table_Prefix $ 'PageChanges pc2
																				WHERE
																					pc2.branch_id	= pbv_source.branch_id	AND
																					pc2.page_id		= pbv_source.page_id	AND
																					pc2.set_id		<= ?
																			 )', [ g.Module_Library_DB ].SQL_Query_Field( l.source_changeset:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '(
																				pbv_dest.version_id	IS NULL					OR
																				pc.new_id			<> pbv_dest.version_id	OR
																				pv_dest.xref_id		<> ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'pc.xref_id', 'pv_source.xref_id' ) $ '
																			 )', '' ) }">
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "Page_Source"
				QUERY	= "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.query_fields ) }"
				FIELDS	= "{ l.query_fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00095', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT Page_Source.d.EOF }">
		<MvCOMMENT>
		|
		| Overwrite pages on the destination branch with conflicting codes by marking them as deleted
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.page_overwritten" VALUE = 0>

		<MvIF EXPR = "{ Page_Source.d.source_id NE 0 }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Load_Branch_Code( l.dest_branch:id, Page_Source.d.source_code, l.existing_page ) AND
							Page_Source.d.page_id NE l.existing_page:id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Insert( l.dest_branch:id, l.existing_page:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Update_Head( l.dest_branch:id, l.existing_page:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_page:id, l.existing_page:version_id, 0, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvASSIGN NAME = "l.page_overwritten"	VALUE = 1>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.pageversion"				VALUE = "">
		<MvASSIGN NAME = "l.pageversion:id"				VALUE = "{ Page_Source.d.source_id }">
		<MvASSIGN NAME = "l.pageversion:page_id"		VALUE = "{ Page_Source.d.page_id }">
		<MvASSIGN NAME = "l.pageversion:xref_id"		VALUE = "{ Page_Source.d.source_xref_id }">
		<MvASSIGN NAME = "l.pageversion:user_id"		VALUE = "{ Page_Source.d.source_user_id }">
		<MvASSIGN NAME = "l.pageversion:admin"			VALUE = "{ Page_Source.d.source_admin }">
		<MvASSIGN NAME = "l.pageversion:layout"			VALUE = "{ Page_Source.d.source_layout }">
		<MvASSIGN NAME = "l.pageversion:fragment"		VALUE = "{ Page_Source.d.source_fragment }">
		<MvASSIGN NAME = "l.pageversion:secure"			VALUE = "{ Page_Source.d.source_secure }">
		<MvASSIGN NAME = "l.pageversion:public"			VALUE = "{ Page_Source.d.source_public }">
		<MvASSIGN NAME = "l.pageversion:code"			VALUE = "{ Page_Source.d.source_code }">
		<MvASSIGN NAME = "l.pageversion:name"			VALUE = "{ Page_Source.d.source_name }">
		<MvASSIGN NAME = "l.pageversion:title"			VALUE = "{ Page_Source.d.source_title }">
		<MvASSIGN NAME = "l.pageversion:ui_id"			VALUE = "{ Page_Source.d.source_ui_id }">
		<MvASSIGN NAME = "l.pageversion:cache"			VALUE = "{ Page_Source.d.source_cache }">
		<MvASSIGN NAME = "l.pageversion:cacheset"		VALUE = "{ miva_array_deserialize( Page_Source.d.source_cacheset ) }">

		<MvCOMMENT>
		|
		| If the target_xref_id differs from the source_xref_id (can occur when copying from a non-head changeset), we must
		| insert a new version with the correct xref_id.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.requires_propagation"		VALUE = 0>

		<MvIF EXPR = "{ l.pageversion:xref_id NE Page_Source.d.target_xref_id }">
			<MvASSIGN NAME = "l.pageversion:xref_id"	VALUE = "{ Page_Source.d.target_xref_id }">
			<MvASSIGN NAME = "l.requires_propagation"	VALUE = 1>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageVersion_Insert( l.pageversion ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Record the page on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Insert( l.dest_branch:id, Page_Source.d.page_id, l.pageversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Update_Head( l.dest_branch:id, Page_Source.d.page_id, l.pageversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL Page_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id" VALUE = 0>
		<MvELSE>												<MvASSIGN NAME = "l.previous_id" VALUE = "{ Page_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ l.requires_propagation }">
			<MvIF EXPR = "{ NOT TemplateManager_Page_Fields_Propagate( Page_Source.d.page_id, l.previous_id, l.pageversion:id ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, Page_Source.d.page_id, l.previous_id, l.pageversion:id, l.pageversion:xref_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| Update URIs
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ( NOT Page_Source.d.source_layout ) AND ( NOT Page_Source.d.source_fragment ) AND ( Page_Source.d.source_id NE 0 ) }">
			<MvASSIGN NAME = "l.page"			VALUE = "">
			<MvASSIGN NAME = "l.page:id"		VALUE = "{ Page_Source.d.page_id }">
			<MvASSIGN NAME = "l.page:templ_id"	VALUE = "{ Page_Source.d.page_templ_id }">

			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Copy_PageVersion( l.pageversion, l.page ) }">

			<MvIF EXPR = "{ l.page_overwritten OR ( l.previous_id NE 0 ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Branch_Page_Update( l.dest_branch, l.page ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URIList_Load_Page_Code( Page_Source.d.source_code, l.null ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Branch_Page_New( l.dest_branch, l.page ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "Page_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_Items" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'ibv_source.item_id	AS item_id,
																		  ibv_dest.version_id	AS previous_id,
																		  iv_source.user_id		AS source_user_id,
																		  iv_source.code		AS source_code,
																		  iv_source.mod_code	AS source_mod_code,
																		  iv_dest.code			AS dest_code' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'Items',				'i' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ItemBranchVersions',	'ibv_source' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'ibv_source', g.Store_Table_Prefix $ 'ItemBranchVersions',
																		 'ibv_dest', 'ibv_dest.branch_id = ? AND ibv_dest.item_id = ibv_source.item_id AND ibv_dest.head = 1',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.dest_branch:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'ibv_source', g.Store_Table_Prefix $ 'ItemVersions', 'iv_dest', 'iv_dest.id = ibv_dest.version_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'ibv_source.branch_id	= ? AND
																		 ibv_source.head		= 1 AND
																		 i.id					= ibv_source.item_id', [ g.Module_Library_DB ].SQL_Query_Field( l.source_branch:id ) ) }">

	<MvIF EXPR = "{ NOT l.source_changeset:id }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'ibv_source.version_id AS source_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'ibv_source', g.Store_Table_Prefix $ 'ItemVersions', 'iv_source', 'iv_source.id = ibv_source.version_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'ibv_dest.version_id', 0 ) $ ' <> ibv_source.version_id', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'pc.new_id AS source_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ItemChanges', 'pc' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'pc', g.Store_Table_Prefix $ 'ItemVersions', 'iv_source', 'iv_source.id = pc.new_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'pc.branch_id	= ibv_source.branch_id	AND
																			 pc.item_id		= ibv_source.item_id	AND
																			 pc.set_id		=
																			 (
																				SELECT
																					MAX( pc2.set_id )
																				FROM
																					' $ g.Store_Table_Prefix $ 'ItemChanges pc2
																				WHERE
																					pc2.branch_id	= ibv_source.branch_id	AND
																					pc2.item_id		= ibv_source.item_id	AND
																					pc2.set_id		<= ?
																			 )', [ g.Module_Library_DB ].SQL_Query_Field( l.source_changeset:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '(
																				ibv_dest.version_id	IS NULL OR
																				pc.new_id			<> ibv_dest.version_id
																			 )', '' ) }">
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "Item_Source"
				QUERY	= "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.query_fields ) }"
				FIELDS	= "{ l.query_fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00101', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT Item_Source.d.EOF }">
		<MvCOMMENT>
		|
		| Overwrite items on the destination branch with conflicting codes by marking them as deleted
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ Item_Source.d.source_id NE 0 }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Item_Load_Branch_Code( l.dest_branch:id, Item_Source.d.source_code, l.existing_item ) AND
							Item_Source.d.item_id NE l.existing_item:id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Insert( l.dest_branch:id, l.existing_item:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Update_Head( l.dest_branch:id, l.existing_item:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_item:id, l.existing_item:version_id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.itemversion"			VALUE = "">
		<MvASSIGN NAME = "l.itemversion:id"			VALUE = "{ Item_Source.d.source_id }">
		<MvASSIGN NAME = "l.itemversion:item_id"	VALUE = "{ Item_Source.d.item_id }">
		<MvASSIGN NAME = "l.itemversion:user_id"	VALUE = "{ Item_Source.d.source_user_id }">
		<MvASSIGN NAME = "l.itemversion:code"		VALUE = "{ Item_Source.d.source_code }">
		<MvASSIGN NAME = "l.itemversion:mod_code"	VALUE = "{ Item_Source.d.source_mod_code }">

		<MvCOMMENT>
		|
		| Record the item on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Insert( l.dest_branch:id, Item_Source.d.item_id, l.itemversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Update_Head( l.dest_branch:id, Item_Source.d.item_id, l.itemversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL Item_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id" VALUE = 0>
		<MvELSE>												<MvASSIGN NAME = "l.previous_id" VALUE = "{ Item_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, Item_Source.d.item_id, l.previous_id, l.itemversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "Item_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_JavaScriptResources" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'jsbv_source.res_id		AS res_id,
																		  jsbv_source.version_id	AS source_head_id,
																		  v_source.code				AS source_code,
																		  v_source.user_id			AS source_user_id,
																		  v_source.type				AS source_type,
																		  v_source.is_global		AS source_is_global,
																		  v_source.active			AS source_active,
																		  v_source.file				AS source_file,
																		  v_source.content_id		AS source_content_id,
																		  v_source.mod_code			AS source_mod_code,
																		  v_source.mod_data			AS source_mod_data,
																		  v_source.attributes		AS source_attributes,
																		  v_dest.id					AS dest_id,
																		  v_dest.code				AS dest_code,
																		  v_dest.xref_id			AS dest_xref_id,
																		  v_dest.type				AS dest_type,
																		  v_dest.is_global			AS dest_is_global,
																		  v_dest.active				AS dest_active,
																		  v_dest.file				AS dest_file,
																		  v_dest.content_id			AS dest_content_id,
																		  v_dest.mod_code			AS dest_mod_code,
																		  v_dest.mod_data			AS dest_mod_data,
																		  v_dest.attributes			AS dest_attributes,
																		  jsbv_dest.version_id		AS previous_id' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'JavaScriptResources',				'r' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions',	'jsbv_source' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'jsbv_source', g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions',
																		 'jsbv_dest', 'jsbv_dest.branch_id = ? AND jsbv_dest.res_id = jsbv_source.res_id AND jsbv_dest.head = 1',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.dest_branch:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'jsbv_source', g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v_dest', 'v_dest.id = jsbv_dest.version_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'jsbv_source.branch_id	= ?',					[ g.Module_Library_DB ].SQL_Query_Field( l.source_branch:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'jsbv_source.head		= 1',					'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'r.id					= jsbv_source.res_id',	'' ) }">

	<MvIF EXPR = "{ NOT l.source_changeset:id }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'jsbv_source.version_id															AS source_id,
																			 ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_source.xref_id', '0' )  $ '	AS source_xref_id,
																			 ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_source.xref_id', '0' )  $ '	AS target_xref_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'jsbv_source', g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v_source', 'v_source.id = jsbv_source.version_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '(
																				jsbv_dest.version_id	IS NULL					OR
																				jsbv_source.version_id	<> jsbv_dest.version_id	OR
																				v_dest.type				= \'L\'
																			 )', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'jsc.new_id																				AS source_id,
																			  ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_source.xref_id', '0' )  $ '			AS source_xref_id,
																			  ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'jsc.xref_id', 'v_source.xref_id' ) $ '	AS target_xref_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'JavaScriptResourceChanges', 'jsc' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'jsc', g.Store_Table_Prefix $ 'JavaScriptResourceVersions', 'v_source', 'v_source.id = jsc.new_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'jsc.branch_id	= jsbv_source.branch_id	AND
																			 jsc.res_id		= jsbv_source.res_id	AND
																			 jsc.set_id		=
																			 (
																				SELECT
																					MAX( jsc2.set_id )
																				FROM
																					' $ g.Store_Table_Prefix $ 'JavaScriptResourceChanges jsc2
																				WHERE
																					jsc2.branch_id	= jsbv_source.branch_id	AND
																					jsc2.res_id		= jsbv_source.res_id	AND
																					jsc2.set_id		<= ?
																			 )', [ g.Module_Library_DB ].SQL_Query_Field( l.source_changeset:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '(
																				jsbv_dest.version_id	IS NULL					OR
																				jsc.new_id				<> jsbv_dest.version_id	OR
																				v_dest.type				= \'L\'					OR
																				v_dest.xref_id			<> ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'jsc.xref_id', 'v_source.xref_id' ) $ '
																			 )', '' ) }">
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "JavaScriptResource_Source"
				QUERY	= "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.query_fields ) }"
				FIELDS	= "{ l.query_fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00054', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT JavaScriptResource_Source.d.EOF }">
		<MvIF EXPR = "{ JavaScriptResource_Source.d.source_id NE 0 }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Branch_Code( l.dest_branch:id, JavaScriptResource_Source.d.source_code, l.existing_dest_scriptresource ) AND
							l.existing_dest_scriptresource:id NE JavaScriptResource_Source.d.res_id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Load_Branch_Head( l.dest_branch:id, l.existing_dest_scriptresource:id, l.existing_dest_scriptresourceversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Insert( l.dest_branch:id, l.existing_dest_scriptresource:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Update_Head( l.dest_branch:id, l.existing_dest_scriptresource:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_dest_scriptresource:id, l.existing_dest_scriptresourceversion:id, 0, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.scriptresourceversion"				VALUE = "">
		<MvASSIGN NAME = "l.scriptresourceversion:id"			VALUE = "{ JavaScriptResource_Source.d.source_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:code"			VALUE = "{ JavaScriptResource_Source.d.source_code }">
		<MvASSIGN NAME = "l.scriptresourceversion:res_id"		VALUE = "{ JavaScriptResource_Source.d.res_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:xref_id"		VALUE = "{ JavaScriptResource_Source.d.source_xref_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:user_id"		VALUE = "{ JavaScriptResource_Source.d.source_user_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:content_id"	VALUE = "{ JavaScriptResource_Source.d.source_content_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:immutable"	VALUE = 0>
		<MvASSIGN NAME = "l.scriptresourceversion:type"			VALUE = "{ JavaScriptResource_Source.d.source_type }">
		<MvASSIGN NAME = "l.scriptresourceversion:is_global"	VALUE = "{ JavaScriptResource_Source.d.source_is_global }">
		<MvASSIGN NAME = "l.scriptresourceversion:active"		VALUE = "{ JavaScriptResource_Source.d.source_active }">
		<MvASSIGN NAME = "l.scriptresourceversion:file"			VALUE = "{ JavaScriptResource_Source.d.source_file }">
		<MvASSIGN NAME = "l.scriptresourceversion:mod_code"		VALUE = "{ JavaScriptResource_Source.d.source_mod_code }">
		<MvASSIGN NAME = "l.scriptresourceversion:mod_data"		VALUE = "{ JavaScriptResource_Source.d.source_mod_data }">
		<MvASSIGN NAME = "l.scriptresourceversion:attributes"	VALUE = "{ miva_array_deserialize( JavaScriptResource_Source.d.source_attributes ) }">

		<MvCOMMENT>
		|
		| Copying of Local File resources requires also copying the actual file and potentially creating a new version of the resource
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ JavaScriptResource_Source.d.source_type EQ 'L' }">
			<MvIF EXPR = "{ JavaScriptResource_Source.d.dest_type NE 'L' }">
				<MvCOMMENT>
				|
				| If there is no destination version (creating a branch), or the type is different, create a new version with
				| a branch-specific path.  If the source file does not exist, strip any branch-specific directory out of the
				| filename and do not attempt to copy the actual file.
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT TemplateManager_Copy_Branch_ResourceFile( 'scripts', l.source_branch, JavaScriptResource_Source.d.source_file, JavaScriptResource_Source.d.source_id EQ JavaScriptResource_Source.d.source_head_id, l.dest_branch, l.scriptresourceversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvCOMMENT>
				|
				| If the destination is also a Local File with either a different file or different Managed Content, overwrite
				| destination.  If the source content does not exist, or both source and destination exist and are identical,
				| avoid recording a change unless we have non-file modifications to the resource.
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT TemplateManager_Branch_Load_ResourceFile_ManagedContent( JavaScriptResource_Source.d.source_file, JavaScriptResource_Source.d.source_content_id, JavaScriptResource_Source.d.source_id EQ JavaScriptResource_Source.d.source_head_id, l.content_loaded, l.managedcontent ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvASSIGN NAME = "l.dest_file_path"	VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, JavaScriptResource_Source.d.dest_file ) }">

				<MvIF EXPR = "{ NOT l.content_loaded OR
								(
									crypto_md5_file( l.dest_file_path, 'script', l.dest_md5 ) AND
									l.dest_md5 EQ l.managedcontent:md5
								) }">
					<MvIF EXPR = "{ JavaScriptResource_Source.d.dest_code		EQ JavaScriptResource_Source.d.source_code			AND
									JavaScriptResource_Source.d.dest_xref_id	EQ JavaScriptResource_Source.d.target_xref_id		AND
									JavaScriptResource_Source.d.dest_type		EQ JavaScriptResource_Source.d.source_type			AND
									JavaScriptResource_Source.d.dest_is_global	EQ JavaScriptResource_Source.d.source_is_global		AND
									JavaScriptResource_Source.d.dest_active		EQ JavaScriptResource_Source.d.source_active		AND
									JavaScriptResource_Source.d.dest_content_id	EQ JavaScriptResource_Source.d.source_content_id	AND
									JavaScriptResource_Source.d.dest_attributes	EQ JavaScriptResource_Source.d.source_attributes }">
						<MvSKIP NAME = "Merchant" VIEW = "JavaScriptResource_Source" ROWS = 1>
						<MvWHILECONTINUE>
					</MvIF>
				<MvELSE>
					<MvIF EXPR = "{ NOT TemplateManager_Write_ResourceFile( l.dest_file_path, l.managedcontent:content ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvASSIGN NAME = "l.scriptresourceversion:file"			VALUE = "{ JavaScriptResource_Source.d.dest_file }">
				<MvASSIGN NAME = "l.scriptresourceversion:content_id"	VALUE = "{ l.managedcontent:id }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| There are two reasons we would need to insert a new version:
		|
		|	1. The filename differs (occurs when creating a new branch or changing the resource type)
		|	2. The target_xref_id differs from the source_xref_id (can occur when copying from a non-head changeset)
		|	3. The scriptresource version content_id differs from the source_content_id (can occur when the local file content differs from what we have stored in the database)
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.scriptresourceversion:file		NE JavaScriptResource_Source.d.source_file		OR
						l.scriptresourceversion:xref_id		NE JavaScriptResource_Source.d.target_xref_id	OR
						l.scriptresourceversion:content_id	NE JavaScriptResource_Source.d.source_content_id }">
			<MvASSIGN NAME = "l.scriptresourceversion:xref_id" VALUE = "{ JavaScriptResource_Source.d.target_xref_id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Insert( l.scriptresourceversion ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Record the resource on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Insert( l.dest_branch:id, JavaScriptResource_Source.d.res_id, l.scriptresourceversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Update_Head( l.dest_branch:id, JavaScriptResource_Source.d.res_id, l.scriptresourceversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL JavaScriptResource_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id"	VALUE = 0>
		<MvELSE>															<MvASSIGN NAME = "l.previous_id"	VALUE = "{ JavaScriptResource_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, JavaScriptResource_Source.d.res_id, l.previous_id, l.scriptresourceversion:id, l.scriptresourceversion:xref_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "JavaScriptResource_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_CSSResources" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'cssbv_source.res_id		AS res_id,
																		  cssbv_source.version_id	AS source_head_id,
																		  v_source.code				AS source_code,
																		  v_source.user_id			AS source_user_id,
																		  v_source.type				AS source_type,
																		  v_source.is_global		AS source_is_global,
																		  v_source.active			AS source_active,
																		  v_source.file				AS source_file,
																		  v_source.content_id		AS source_content_id,
																		  v_source.mod_code			AS source_mod_code,
																		  v_source.mod_data			AS source_mod_data,
																		  v_source.attributes		AS source_attributes,
																		  v_dest.id					AS dest_id,
																		  v_dest.code				AS dest_code,
																		  v_dest.xref_id			AS dest_xref_id,
																		  v_dest.type				AS dest_type,
																		  v_dest.is_global			AS dest_is_global,
																		  v_dest.active				AS dest_active,
																		  v_dest.file				AS dest_file,
																		  v_dest.content_id			AS dest_content_id,
																		  v_dest.mod_code			AS dest_mod_code,
																		  v_dest.mod_data			AS dest_mod_data,
																		  v_dest.attributes			AS dest_attributes,
																		  cssbv_dest.version_id		AS previous_id' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'CSSResources',				'r' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'CSSResourceBranchVersions',	'cssbv_source' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'cssbv_source', g.Store_Table_Prefix $ 'CSSResourceBranchVersions',
																		 'cssbv_dest', 'cssbv_dest.branch_id = ? AND cssbv_dest.res_id = cssbv_source.res_id AND cssbv_dest.head = 1',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.dest_branch:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'cssbv_source', g.Store_Table_Prefix $ 'CSSResourceVersions', 'v_dest', 'v_dest.id = cssbv_dest.version_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'cssbv_source.branch_id	= ?',					[ g.Module_Library_DB ].SQL_Query_Field( l.source_branch:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'cssbv_source.head		= 1',					'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'r.id					= cssbv_source.res_id',	'' ) }">

	<MvIF EXPR = "{ NOT l.source_changeset:id }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'cssbv_source.version_id															AS source_id,
																			 ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_source.xref_id', '0' )  $ '	AS source_xref_id,
																			 ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_source.xref_id', '0' )  $ '	AS target_xref_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'cssbv_source', g.Store_Table_Prefix $ 'CSSResourceVersions', 'v_source', 'v_source.id = cssbv_source.version_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '(
																				cssbv_dest.version_id	IS NULL						OR
																				cssbv_source.version_id	<> cssbv_dest.version_id	OR
																				v_dest.type				= \'L\'
																			 )', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'cssc.new_id																				AS source_id,
																			  ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_source.xref_id', '0' )  $ '			AS source_xref_id,
																			  ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'cssc.xref_id', 'v_source.xref_id' ) $ '	AS target_xref_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'CSSResourceChanges', 'cssc' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'cssc', g.Store_Table_Prefix $ 'CSSResourceVersions', 'v_source', 'v_source.id = cssc.new_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'cssc.branch_id	= cssbv_source.branch_id	AND
																			 cssc.res_id	= cssbv_source.res_id		AND
																			 cssc.set_id	=
																			 (
																				SELECT
																					MAX( cssc2.set_id )
																				FROM
																					' $ g.Store_Table_Prefix $ 'CSSResourceChanges cssc2
																				WHERE
																					cssc2.branch_id	= cssbv_source.branch_id	AND
																					cssc2.res_id	= cssbv_source.res_id		AND
																					cssc2.set_id	<= ?
																			 )', [ g.Module_Library_DB ].SQL_Query_Field( l.source_changeset:id ) ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '(
																				cssbv_dest.version_id	IS NULL						OR
																				cssc.new_id				<> cssbv_dest.version_id	OR
																				v_dest.type				= \'L\'						OR
																				v_dest.xref_id			<> ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'cssc.xref_id', 'v_source.xref_id' ) $ '
																			 )', '' ) }">
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "CSSResource_Source"
				QUERY	= "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.query_fields ) }"
				FIELDS	= "{ l.query_fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00056', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT CSSResource_Source.d.EOF }">
		<MvIF EXPR = "{ CSSResource_Source.d.source_id NE 0 }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Branch_Code( l.dest_branch:id, CSSResource_Source.d.source_code, l.existing_dest_cssresource ) AND
							l.existing_dest_cssresource:id NE CSSResource_Source.d.res_id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Load_Branch_Head( l.dest_branch:id, l.existing_dest_cssresource:id, l.existing_dest_cssresourceversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Insert( l.dest_branch:id, l.existing_dest_cssresource:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Update_Head( l.dest_branch:id, l.existing_dest_cssresource:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_dest_cssresource:id, l.existing_dest_cssresourceversion:id, 0, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.cssresourceversion"				VALUE = "">
		<MvASSIGN NAME = "l.cssresourceversion:id"			VALUE = "{ CSSResource_Source.d.source_id }">
		<MvASSIGN NAME = "l.cssresourceversion:code"		VALUE = "{ CSSResource_Source.d.source_code }">
		<MvASSIGN NAME = "l.cssresourceversion:res_id"		VALUE = "{ CSSResource_Source.d.res_id }">
		<MvASSIGN NAME = "l.cssresourceversion:xref_id"		VALUE = "{ CSSResource_Source.d.source_xref_id }">
		<MvASSIGN NAME = "l.cssresourceversion:user_id"		VALUE = "{ CSSResource_Source.d.source_user_id }">
		<MvASSIGN NAME = "l.cssresourceversion:content_id"	VALUE = "{ CSSResource_Source.d.source_content_id }">
		<MvASSIGN NAME = "l.cssresourceversion:immutable"	VALUE = 0>
		<MvASSIGN NAME = "l.cssresourceversion:type"		VALUE = "{ CSSResource_Source.d.source_type }">
		<MvASSIGN NAME = "l.cssresourceversion:is_global"	VALUE = "{ CSSResource_Source.d.source_is_global }">
		<MvASSIGN NAME = "l.cssresourceversion:active"		VALUE = "{ CSSResource_Source.d.source_active }">
		<MvASSIGN NAME = "l.cssresourceversion:file"		VALUE = "{ CSSResource_Source.d.source_file }">
		<MvASSIGN NAME = "l.cssresourceversion:mod_code"	VALUE = "{ CSSResource_Source.d.source_mod_code }">
		<MvASSIGN NAME = "l.cssresourceversion:mod_data"	VALUE = "{ CSSResource_Source.d.source_mod_data }">
		<MvASSIGN NAME = "l.cssresourceversion:attributes"	VALUE = "{ miva_array_deserialize( CSSResource_Source.d.source_attributes ) }">

		<MvCOMMENT>
		|
		| Copying of Local File resources requires also copying the actual file and potentially creating a new version of the resource
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ CSSResource_Source.d.source_type EQ 'L' }">
			<MvIF EXPR = "{ CSSResource_Source.d.dest_type NE 'L' }">
				<MvCOMMENT>
				|
				| If there is no destination version (creating a branch), or the type is different, create a new version with
				| a branch-specific path.  If the source file does not exist, strip any branch-specific directory out of the
				| filename and do not attempt to copy the actual file.
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT TemplateManager_Copy_Branch_ResourceFile( 'css', l.source_branch, CSSResource_Source.d.source_file, CSSResource_Source.d.source_id EQ CSSResource_Source.d.source_head_id, l.dest_branch, l.cssresourceversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvCOMMENT>
				|
				| If the destination is also a Local File with either a different file or different Managed Content, overwrite
				| destination.  If the source content does not exist, or both source and destination exist and are identical,
				| avoid recording a change unless we have non-file modifications to the resource.
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT TemplateManager_Branch_Load_ResourceFile_ManagedContent( CSSResource_Source.d.source_file, CSSResource_Source.d.source_content_id, CSSResource_Source.d.source_id EQ CSSResource_Source.d.source_head_id, l.content_loaded, l.managedcontent ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvASSIGN NAME = "l.dest_file_path"	VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, CSSResource_Source.d.dest_file ) }">

				<MvIF EXPR = "{ NOT l.content_loaded OR
								(
									crypto_md5_file( l.dest_file_path, 'script', l.dest_md5 ) AND
									l.dest_md5 EQ l.managedcontent:md5
								) }">
					<MvIF EXPR = "{ CSSResource_Source.d.dest_code			EQ CSSResource_Source.d.source_code			AND
									CSSResource_Source.d.dest_xref_id		EQ CSSResource_Source.d.target_xref_id		AND
									CSSResource_Source.d.dest_type			EQ CSSResource_Source.d.source_type			AND
									CSSResource_Source.d.dest_is_global		EQ CSSResource_Source.d.source_is_global	AND
									CSSResource_Source.d.dest_active		EQ CSSResource_Source.d.source_active		AND
									CSSResource_Source.d.dest_content_id	EQ CSSResource_Source.d.source_content_id	AND
									CSSResource_Source.d.dest_attributes	EQ CSSResource_Source.d.source_attributes }">
						<MvSKIP NAME = "Merchant" VIEW = "CSSResource_Source" ROWS = 1>
						<MvWHILECONTINUE>
					</MvIF>
				<MvELSE>
					<MvIF EXPR = "{ NOT TemplateManager_Write_ResourceFile( l.dest_file_path, l.managedcontent:content ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvASSIGN NAME = "l.cssresourceversion:file"		VALUE = "{ CSSResource_Source.d.dest_file }">
				<MvASSIGN NAME = "l.cssresourceversion:content_id"	VALUE = "{ l.managedcontent:id }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| There are two reasons we would need to insert a new version:
		|
		|	1. The filename differs (occurs when creating a new branch or changing the resource type)
		|	2. The target_xref_id differs from the source_xref_id (can occur when copying from a non-head changeset)
		|	3. The cssresource version content_id differs from the source_content_id (can occur when the local file content differs from what we have stored in the database)
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.cssresourceversion:file		NE CSSResource_Source.d.source_file		OR
						l.cssresourceversion:xref_id	NE CSSResource_Source.d.target_xref_id	OR
						l.cssresourceversion:content_id	NE CSSResource_Source.d.source_content_id }">
			<MvASSIGN NAME = "l.cssresourceversion:xref_id" VALUE = "{ CSSResource_Source.d.target_xref_id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Insert( l.cssresourceversion ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Record the resource on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Insert( l.dest_branch:id, CSSResource_Source.d.res_id, l.cssresourceversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Update_Head( l.dest_branch:id, CSSResource_Source.d.res_id, l.cssresourceversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL CSSResource_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id"	VALUE = 0>
		<MvELSE>													<MvASSIGN NAME = "l.previous_id"	VALUE = "{ CSSResource_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, CSSResource_Source.d.res_id, l.previous_id, l.cssresourceversion:id, l.cssresourceversion:xref_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "CSSResource_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_Properties" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Copy properties and register initial versions
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'mpbv_source.prop_id		AS prop_id,
																		  mpbv_dest.version_id		AS previous_id,
																		  mpv_source.type			AS source_type,
																		  mpv_source.code			AS source_code,
																		  mpv_source.product_id		AS source_product_id,
																		  mpv_source.cat_id			AS source_cat_id,
																		  mpv_dest.type				AS dest_type,
																		  mpv_dest.code				AS dest_code,
																		  mpv_dest.product_id		AS dest_product_id,
																		  mpv_dest.cat_id			AS dest_cat_id,
																		  mpv_dest.image_id			AS dest_image_id,
																		  mpvir_dest.head_count		AS dest_head_count' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ManagedProperties',				'mp' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ManagedPropertyBranchVersions',	'mpbv_source' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mpbv_source', g.Store_Table_Prefix $ 'ManagedPropertyBranchVersions',
																		 'mpbv_dest', 'mpbv_dest.branch_id = ? AND mpbv_dest.prop_id = mpbv_source.prop_id AND mpbv_dest.head = 1',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.dest_branch:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mpbv_source', g.Store_Table_Prefix $ 'ManagedPropertyVersions',
																		 'mpv_dest', 'mpv_dest.id = mpbv_dest.version_id',
																		'' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mpbv_source', g.Store_Table_Prefix $ 'ManagedPropertyVersionImageReferences',
																		 'mpvir_dest', 'mpvir_dest.version_id = mpv_dest.id AND mpvir_dest.image_id = mpv_dest.image_id',
																		'' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mpbv_source.branch_id	= ?',						[ g.Module_Library_DB ].SQL_Query_Field( l.source_branch:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mpbv_source.head		= 1',						'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mp.id					= mpbv_source.prop_id',		'' ) }">

	<MvIF EXPR = "{ NOT l.source_changeset:id }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'mpbv_source.version_id	AS source_id,
																			  mpv_source.image_id		AS source_image_id,
																			  mpvir_source.head_count	AS source_head_count' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mpbv_source', g.Store_Table_Prefix $ 'ManagedPropertyVersions',
																			 'mpv_source', 'mpv_source.id = mpbv_source.version_id',
																			'' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mpbv_source', g.Store_Table_Prefix $ 'ManagedPropertyVersionImageReferences',
																			 'mpvir_source', 'mpvir_source.version_id = mpv_source.id AND mpvir_source.image_id = mpv_source.image_id',
																			'' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mpbv_dest.version_id', 0 ) $ ' <> mpbv_source.version_id', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mpc.new_id', 0 ) 				$ ' AS source_id,' $
																			 [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mpv_source.image_id', 0 ) 		$ ' AS source_image_id,' $
																			 [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mpvir_source.head_count', 0 )	$ ' AS source_head_count' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mpbv_source', g.Store_Table_Prefix $ 'ManagedPropertyChanges', 'mpc',
																			 'mpc.branch_id	= mpbv_source.branch_id	AND
																			  mpc.prop_id	= mpbv_source.prop_id	AND
																			  mpc.set_id	=
																			  (
																				SELECT
																					MAX( mpc2.set_id )
																				FROM
																					' $ g.Store_Table_Prefix $ 'ManagedPropertyChanges mpc2
																				WHERE
																					mpc2.branch_id	= mpbv_source.branch_id	AND
																					mpc2.prop_id	= mpbv_source.prop_id	AND
																					mpc2.set_id		<= ?
																			  )',
																			  [ g.Module_Library_DB ].SQL_Query_Field( l.source_changeset:id ) ) }">
		
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mpbv_source', g.Store_Table_Prefix $ 'ManagedPropertyVersions',
																			 'mpv_source', 'mpv_source.id = mpc.new_id',
																			'' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mpbv_source', g.Store_Table_Prefix $ 'ManagedPropertyVersionImageReferences',
																			 'mpvir_source', 'mpvir_source.version_id = mpv_source.id AND mpvir_source.image_id = mpv_source.image_id',
																			'' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mpbv_dest.version_id', 0 ) $ ' <> ' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mpc.new_id', 0 ), '' ) }">
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "ManagedProperty_Source"
				QUERY	= "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.query_fields ) }"
				FIELDS	= "{ l.query_fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00070', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT ManagedProperty_Source.d.EOF }">
		<MvIF EXPR = "{ ( ManagedProperty_Source.d.source_id NE 0 ) AND
						(
							strcmp( ManagedProperty_Source.d.source_type, ManagedProperty_Source.d.dest_type ) NE 0	OR
							strcmp( ManagedProperty_Source.d.source_code, ManagedProperty_Source.d.dest_code ) NE 0	OR
							ManagedProperty_Source.d.source_product_id	NE ManagedProperty_Source.d.dest_product_id	OR
							ManagedProperty_Source.d.source_cat_id		NE ManagedProperty_Source.d.dest_cat_id
						) }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch( l.dest_branch:id, ManagedProperty_Source.d.source_type, ManagedProperty_Source.d.source_code, ManagedProperty_Source.d.source_product_id, ManagedProperty_Source.d.source_cat_id, l.existing_managedproperty ) AND
							ManagedProperty_Source.d.prop_id NE l.existing_managedproperty:id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyVersion_Load_Branch_Head( l.dest_branch:id, l.existing_managedproperty:id, l.existing_managedpropertyversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Insert( l.dest_branch:id, l.existing_managedproperty:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Update_Head( l.dest_branch:id, l.existing_managedproperty:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ l.existing_managedpropertyversion:image:id  }">
					<MvIF EXPR = "{ l.existing_managedpropertyversion:image:head_count EQ 1 }">
						<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Decrement_RefCount( l.existing_managedpropertyversion:image:id ) }">
							<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
							<MvFUNCTIONRETURN VALUE = 0>
						</MvIF>
					</MvIF>

					<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyImageReference_Decrement_HeadCount( l.existing_managedpropertyversion:id, l.existing_managedpropertyversion:image:id ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_managedproperty:id, l.existing_managedpropertyversion:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Record the property change on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ManagedProperty_Source.d.source_id EQ 0 }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Insert( l.dest_branch:id, ManagedProperty_Source.d.prop_id, 0 ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Insert( l.dest_branch:id, ManagedProperty_Source.d.prop_id, ManagedProperty_Source.d.source_id ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Update_Head( l.dest_branch:id, ManagedProperty_Source.d.prop_id, ManagedProperty_Source.d.source_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL ManagedProperty_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id"	VALUE = 0>
		<MvELSE>														<MvASSIGN NAME = "l.previous_id"	VALUE = "{ ManagedProperty_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, ManagedProperty_Source.d.prop_id, l.previous_id, ManagedProperty_Source.d.source_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| If the destination version image exists:
		|	- Decrement the image reference count if the destination version is the only reference
		|	- Decrement the head count on the version/image_id pair
		| Increment head count on destination branch
		|
		| Note that we are intentionally decrementing and then incrementing if source / destination 
		| image ids are the same so that the property version id is correctly tracked
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ManagedProperty_Source.d.dest_image_id }">
			<MvIF EXPR = "{ ManagedProperty_Source.d.dest_head_count EQ 1 }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Decrement_RefCount( ManagedProperty_Source.d.dest_image_id ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyImageReference_Decrement_HeadCount( ManagedProperty_Source.d.previous_id, ManagedProperty_Source.d.dest_image_id ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ManagedProperty_Source.d.source_image_id }">
			<MvIF EXPR = "{ NOT ManagedProperty_Source.d.source_head_count }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Increment_RefCount( ManagedProperty_Source.d.source_image_id ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyImageReference_InsertOrIncrement( ManagedProperty_Source.d.prop_id, ManagedProperty_Source.d.source_id, ManagedProperty_Source.d.source_image_id ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "ManagedProperty_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_Templates" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Ensure that the target branch directory exists
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.source_dir"					VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.source_branch:tmpldir }">
	<MvASSIGN NAME = "l.dest_dir"					VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.dest_branch:tmpldir }">

	<MvIF EXPR = "{ NOT sexists( l.dest_dir ) }">
		<MvIF EXPR = "{ NOT smkdir( l.dest_dir ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00043', 'Unable to create directory \'' $ l.dest_dir $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Copy/compile templates and register initial versions
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'mtbv_source.templ_id		AS templ_id,
																		  mt.filename				AS filename,
																		  mtbv_source.version_id	AS head_id,
																		  mtbv_dest.version_id		AS previous_id,
																		  mtv_source.source			AS source_source,
																		  mtv_source.settings		AS source_settings,
																		  mtv_dest.settings			AS dest_settings' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ManagedTemplates',				'mt' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions',	'mtbv_source' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mtbv_source', g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions', 'mtbv_dest', 'mtbv_dest.branch_id = ? AND mtbv_dest.templ_id = mtbv_source.templ_id AND mtbv_dest.head = 1',
																		 [ g.Module_Library_DB ].SQL_Query_Field( l.dest_branch:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mtbv_source', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv_dest', 'mtv_dest.id = mtbv_dest.version_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mtbv_source.branch_id	= ?',						[ g.Module_Library_DB ].SQL_Query_Field( l.source_branch:id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mtbv_source.head		= 1',						'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mt.id					= mtbv_source.templ_id',	'' ) }">

	<MvIF EXPR = "{ NOT l.source_changeset:id }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'mtbv_source.version_id AS source_id' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mtbv_source', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv_source', 'mtv_source.id = mtbv_source.version_id', '' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mtbv_dest.version_id', 0 ) $ ' <> mtbv_source.version_id', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'mtc.new_id AS source_id' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'ManagedTemplateChanges', 'mtc' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'mtc', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv_source', 'mtv_source.id = mtc.new_id', '' ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'mtc.branch_id	= mtbv_source.branch_id	AND
																			 mtc.templ_id	= mtbv_source.templ_id	AND
																			 mtc.set_id		=
																			 (
																				SELECT
																					MAX( mtc2.set_id )
																				FROM
																					' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc2
																				WHERE
																					mtc2.branch_id	= mtbv_source.branch_id	AND
																					mtc2.templ_id	= mtbv_source.templ_id	AND
																					mtc2.set_id		<= ?
																			 )', [ g.Module_Library_DB ].SQL_Query_Field( l.source_changeset:id ) ) }">

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, '(
																				mtbv_dest.version_id	IS NULL					OR
																				mtc.new_id				<> mtbv_dest.version_id
																			 )', '' ) }">
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "ManagedTemplate_Source"
				QUERY	= "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.query_fields ) }"
				FIELDS	= "{ l.query_fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00044', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT ManagedTemplate_Source.d.EOF }">
		<MvCOMMENT>
		|
		| When using the current head version, we can just copy the existing compiled template from one directory
		| to another.  If using a previous version, we have to recompile.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.version_id" VALUE = "{ ManagedTemplate_Source.d.source_id }">

		<MvIF EXPR = "{ ( ManagedTemplate_Source.d.source_id NE 0 ) AND ( ManagedTemplate_Source.d.source_id EQ ManagedTemplate_Source.d.head_id ) }">
			<MvIF EXPR = "{ NOT scopy( l.source_dir $ ManagedTemplate_Source.d.filename, l.dest_dir $ ManagedTemplate_Source.d.filename ) }">
				<MvASSIGN NAME = "l.error_message" VALUE = "{ 'Unable to copy \'' $ l.source_dir $ ManagedTemplate_Source.d.filename $ '\' to \'' $ l.dest_dir $ ManagedTemplate_Source.d.filename $ '\': ' $ file_last_error() }">

				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00045', l.error_message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, ManagedTemplate_Source.d.source_source, l.null, l.dest_dir $ ManagedTemplate_Source.d.filename, l.compile_error ) }">
				<MvASSIGN NAME = "l.error_message" VALUE = "{ 'Error compiling template \'' $ ManagedTemplate_Source.d.filename $ '\': ' $ l.compile_error }">

				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00046', l.error_message ) }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Merge any non-existent top-level settings from the destination template version into the settings from the source, creating a new
		| version if necessary.  The order may seem backwards but we are trying to preserve top-level settings that exist in the destination
		| version (from new item assignments), but not in the source version (possibly created prior to the item assignment).
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.source_settings"	VALUE = "{ miva_array_deserialize( ManagedTemplate_Source.d.source_settings ) }">
		<MvASSIGN NAME = "l.dest_settings"		VALUE = "{ miva_array_deserialize( ManagedTemplate_Source.d.dest_settings ) }">

		<MvEVAL EXPR = "{ miva_struct_merge_ref( l.dest_settings, l.source_settings ) }">

		<MvIF EXPR = "{ crypto_md5( miva_array_serialize( l.source_settings ) ) NE crypto_md5( ManagedTemplate_Source.d.source_settings ) }">
			<MvCOMMENT>
			|
			| There were top-level settings merged from the destination, so a new ManagedTemplateVersion is required
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.managedtemplateversion"				VALUE = "">
			<MvASSIGN NAME = "l.managedtemplateversion:templ_id"	VALUE = "{ ManagedTemplate_Source.d.templ_id }">
			<MvASSIGN NAME = "l.managedtemplateversion:user_id"		VALUE = "{ int( g.User:id ) }">
			<MvASSIGN NAME = "l.managedtemplateversion:immutable"	VALUE = 0>
			<MvASSIGN NAME = "l.managedtemplateversion:dtstamp"		VALUE = "{ s.dyn_time_t }">
			<MvASSIGN NAME = "l.managedtemplateversion:notes"		VALUE = "{ substring_var( l.dest_changeset:notes, 1, 100 ) }">
			<MvASSIGN NAME = "l.managedtemplateversion:source"		VALUE = "{ ManagedTemplate_Source.d.source_source }">
			<MvASSIGN NAME = "l.managedtemplateversion:settings"	VALUE = "{ l.source_settings }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Insert( l.managedtemplateversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.version_id" VALUE = "{ l.managedtemplateversion:id }">
		</MvIF>

		<MvCOMMENT>
		|
		| Record the template change on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.dest_branch:id, ManagedTemplate_Source.d.templ_id, l.version_id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.dest_branch:id, ManagedTemplate_Source.d.templ_id, l.version_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL ManagedTemplate_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id" VALUE = 0>
		<MvELSE>														<MvASSIGN NAME = "l.previous_id" VALUE = "{ ManagedTemplate_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, ManagedTemplate_Source.d.templ_id, l.previous_id, l.version_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "ManagedTemplate_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
	<MvFUNCTIONRETURN VALUE = 1>	
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changesets" PARAMETERS = "source_changesets var, source_changeset_count, dest_branch var, notes, dest_changeset var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.result"				VALUE = 1>

	<MvIF EXPR = "{ l.result GT 0 }"> <MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Merge_Changesets_Session_Init( l.source_changesets, l.source_changeset_count, l.dest_branch, l.notes, l.session ) }">	</MvIF>
	<MvIF EXPR = "{ l.result GT 0 }"> <MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Merge_Changesets_Session_Process( l.session ) }">																		</MvIF>
	<MvIF EXPR = "{ l.result GT 0 }"> <MvASSIGN NAME = "l.result" VALUE = "{ TemplateManager_Copy_Branch_Session_Finalize( l.session ) }">																			</MvIF>

	<MvIF EXPR = "{ l.result EQ -1 }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Delete( l.session:dest_changeset ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00112', 'Operation timed out' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changesets_Session_Init" PARAMETERS = "source_changesets var, source_changeset_count, dest_branch var, notes, session var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT TemplateManager_Merge_Changesets_Session_Init_LowLevel( l.source_changesets, l.source_changeset_count, l.dest_branch, l.notes, l.session ) }">
		<MvASSIGN NAME = "l.error_code"		VALUE = "{ g.Error_Code }">
		<MvASSIGN NAME = "l.error_message"	VALUE = "{ g.Error_Message }">

		<MvIF EXPR = "{ l.session:changeset_created }">
			<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Delete( l.session:dest_changeset ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.error_code, l.error_message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changesets_Session_Init_LowLevel" PARAMETERS = "source_changesets var, source_changeset_count, dest_branch var, notes, session var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.session"								VALUE = "">
	<MvASSIGN NAME = "l.session:id"								VALUE = "{ MakeSessionID() }">
	<MvASSIGN NAME = "l.session:start_index"					VALUE = 1>
	<MvASSIGN NAME = "l.session:state"							VALUE = "">
	<MvASSIGN NAME = "l.session:state:pages"					VALUE = 0>
	<MvASSIGN NAME = "l.session:state:items"					VALUE = 0>
	<MvASSIGN NAME = "l.session:state:javascriptresources"		VALUE = 0>
	<MvASSIGN NAME = "l.session:state:cssresources"				VALUE = 0>
	<MvASSIGN NAME = "l.session:state:properties"				VALUE = 0>
	<MvASSIGN NAME = "l.session:state:templates"				VALUE = 0>
	<MvASSIGN NAME = "l.session:changeset_created"				VALUE = 0>

	<MvIF EXPR = "{ NOT TemplateManager_Capture_External_Modification_All_CSSResource_Branch( l.dest_branch:id ) OR
					NOT TemplateManager_Capture_External_Modification_All_JavaScriptResource_Branch( l.dest_branch:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Load_Branch_Current( l.dest_branch:id, l.current_changeset ) }">
		<MvASSIGN NAME = "l.session:dest_changeset:parent_id"	VALUE = "{ l.current_changeset:id }">
	<MvELSEIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvASSIGN NAME = "l.session:dest_changeset:parent_id"	VALUE = 0>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.session:source_changesets"				VALUE = "{ l.source_changesets }">
	<MvASSIGN NAME = "l.session:source_changeset_count"			VALUE = "{ l.source_changeset_count }">
	<MvASSIGN NAME = "l.session:dest_branch"					VALUE = "{ l.dest_branch }">

	<MvASSIGN NAME = "l.session:dest_changeset:branch_id"		VALUE = "{ l.dest_branch:id }">
	<MvASSIGN NAME = "l.session:dest_changeset:user_id"			VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.session:dest_changeset:dtstamp"			VALUE = "{ s.dyn_time_t }">

	<MvIF EXPR = "{ ISNULL l.notes }">	<MvASSIGN NAME = "l.session:dest_changeset:notes" VALUE = "Merge">
	<MvELSE>							<MvASSIGN NAME = "l.session:dest_changeset:notes" VALUE = "{ l.notes }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Changeset_Insert( l.session:dest_changeset ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.session:changeset_created"				VALUE = 1>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Insert_ChangesetTags( l.session:dest_changeset ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changesets_Session_Process" PARAMETERS = "session var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.result"				VALUE = "{ TemplateManager_Merge_Changesets_Session_Process_LowLevel( l.session ) }">

	<MvIF EXPR = "{ l.result EQ 0 }">
		<MvASSIGN NAME = "l.error_code"		VALUE = "{ g.Error_Code }">
		<MvASSIGN NAME = "l.error_message"	VALUE = "{ g.Error_Message }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Delete( l.session:dest_changeset ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.error_code, l.error_message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changesets_Session_Process_LowLevel" PARAMETERS = "session var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.source_branch"								VALUE = "">

	<MvFOREACH ITERATOR = "l.source_changeset" ARRAY = "l.session:source_changesets" FIRST = "{ l.session:start_index }" LAST = "{ l.session:source_changeset_count }">
		<MvIF EXPR = "{ l.source_branch:id NE l.source_changeset:branch_id }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Branch_Load_ID_Cached( l.source_changeset:branch_id, l.source_branch ) }">
				<MvASSIGN NAME = "l.null"							VALUE = "{ [ g.Feature_Filename_TUI_DB ].Changeset_Delete( l.session:dest_changeset ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.result"									VALUE = 1>

		<MvIF EXPR = "{ l.result GT 0 AND l.state:pages NE 1 }">
			<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Merge_Changeset_Pages( l.source_branch, l.source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
			<MvASSIGN NAME = "l.session:state:pages"				VALUE = "{ l.result }">
		</MvIF>
		
		<MvIF EXPR = "{ l.result GT 0 AND l.state:items NE 1 }">
			<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Merge_Changeset_Items( l.source_branch, l.source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
			<MvASSIGN NAME = "l.session:state:items"				VALUE = "{ l.result }">
		</MvIF>
		
		<MvIF EXPR = "{ l.result GT 0 AND l.state:javascriptresources NE 1 }">
			<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Merge_Changeset_JavaScriptResources( l.source_branch, l.source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
			<MvASSIGN NAME = "l.session:state:javascriptresources"	VALUE = "{ l.result }">
		</MvIF>
		
		<MvIF EXPR = "{ l.result GT 0 AND l.state:cssresources NE 1 }">
			<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Merge_Changeset_CSSResources( l.source_branch, l.source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
			<MvASSIGN NAME = "l.session:state:cssresources"			VALUE = "{ l.result }">
		</MvIF>
		
		<MvIF EXPR = "{ l.result GT 0 AND l.state:properties NE 1 }">
			<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Merge_Changeset_Properties( l.source_branch, l.source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
			<MvASSIGN NAME = "l.session:state:properties"			VALUE = "{ l.result }">
		</MvIF>
		
		<MvIF EXPR = "{ l.result GT 0 AND l.state:templates NE 1 }">
			<MvASSIGN NAME = "l.result"								VALUE = "{ TemplateManager_Merge_Changeset_Templates( l.source_branch, l.source_changeset, l.session:dest_branch, l.session:dest_changeset ) }">
			<MvASSIGN NAME = "l.session:state:templates"			VALUE = "{ l.result }">
		</MvIF>

		<MvIF EXPR = "{ l.state:pages EQ 1 AND l.state:items EQ 1 AND l.state:javascriptresources EQ 1 AND l.state:cssresources EQ 1 AND l.state:properties EQ 1 AND l.state:templates EQ 1 }">
			<MvASSIGN NAME = "l.session:start_index"				VALUE = "{ l.session:start_index + 1 }">
			<MvASSIGN NAME = "l.session:state"						VALUE = "">
			<MvASSIGN NAME = "l.session:state:pages"				VALUE = 0>
			<MvASSIGN NAME = "l.session:state:items"				VALUE = 0>
			<MvASSIGN NAME = "l.session:state:javascriptresources"	VALUE = 0>
			<MvASSIGN NAME = "l.session:state:cssresources"			VALUE = 0>
			<MvASSIGN NAME = "l.session:state:properties"			VALUE = 0>
			<MvASSIGN NAME = "l.session:state:templates"			VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changesets_Session_Finalize" PARAMETERS = "session var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changeset_Pages" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URISettings_Load_Cached( l.urisettings ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Copy pages from the source branch that were modified in the specified changset and differ
	| from the current head version in the destination branch.
	|
	</MvCOMMENT>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "Page_Source"
				QUERY	= "{ 'SELECT
								pc.page_id																			AS page_id,
								p.templ_id																			AS page_templ_id,
								pc.new_id																			AS source_id,
								pbv_dest.version_id																	AS previous_id,
								' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'pv_source.xref_id', '0' )  $ '	AS source_xref_id,
								pv_source.user_id																	AS source_user_id,
								pv_source.admin																		AS source_admin,
								pv_source.layout																	AS source_layout,
								pv_source.fragment																	AS source_fragment,
								pv_source.secure																	AS source_secure,
								pv_source.public																	AS source_public,
								pv_source.code																		AS source_code,
								pv_source.name																		AS source_name,
								pv_source.title																		AS source_title,
								pv_source.ui_id																		AS source_ui_id,
								pv_source.cache																		AS source_cache,
								pv_source.cacheset																	AS source_cacheset,
								pv_dest.code																		AS dest_code,
								pv_dest.xref_id																		AS dest_xref_id,
								pc.xref_id																			AS target_xref_id
							  FROM
								' $ g.Store_Table_Prefix $ 'Pages p,
								' $ g.Store_Table_Prefix $ 'PageChanges pc
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'PageBranchVersions pbv_dest	ON pbv_dest.branch_id		= ? AND
																										   pbv_dest.head			= 1 AND
																										   pbv_dest.page_id			= pc.page_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'PageVersions pv_source		ON pv_source.id				= pc.new_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'PageVersions pv_dest 		ON pv_dest.id				= pbv_dest.version_id
							  WHERE
								pc.set_id	= ?				AND
								p.id		= pc.page_id	AND
								(
									' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'pbv_dest.version_id', '0' )	$ ' <> pc.new_id OR
									' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'pv_dest.xref_id', '0' )		$ ' <> pc.xref_id
								)' }"
				FIELDS	= "l.dest_branch:id, l.source_changeset:id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00096', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT Page_Source.d.EOF }">
		<MvCOMMENT>
		|
		| Overwrite pages on the destination branch with conflicting codes by marking them as deleted
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.page_overwritten" VALUE = 0>

		<MvIF EXPR = "{ Page_Source.d.source_id NE 0 }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Load_Branch_Code( l.dest_branch:id, Page_Source.d.source_code, l.existing_page ) AND
							Page_Source.d.page_id NE l.existing_page:id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Insert( l.dest_branch:id, l.existing_page:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Update_Head( l.dest_branch:id, l.existing_page:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_page:id, l.existing_page:version_id, 0, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvASSIGN NAME = "l.page_overwritten"	VALUE = 1>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.pageversion"				VALUE = "">
		<MvASSIGN NAME = "l.pageversion:id"				VALUE = "{ Page_Source.d.source_id }">
		<MvASSIGN NAME = "l.pageversion:page_id"		VALUE = "{ Page_Source.d.page_id }">
		<MvASSIGN NAME = "l.pageversion:xref_id"		VALUE = "{ Page_Source.d.source_xref_id }">
		<MvASSIGN NAME = "l.pageversion:user_id"		VALUE = "{ Page_Source.d.source_user_id }">
		<MvASSIGN NAME = "l.pageversion:admin"			VALUE = "{ Page_Source.d.source_admin }">
		<MvASSIGN NAME = "l.pageversion:layout"			VALUE = "{ Page_Source.d.source_layout }">
		<MvASSIGN NAME = "l.pageversion:fragment"		VALUE = "{ Page_Source.d.source_fragment }">
		<MvASSIGN NAME = "l.pageversion:secure"			VALUE = "{ Page_Source.d.source_secure }">
		<MvASSIGN NAME = "l.pageversion:public"			VALUE = "{ Page_Source.d.source_public }">
		<MvASSIGN NAME = "l.pageversion:code"			VALUE = "{ Page_Source.d.source_code }">
		<MvASSIGN NAME = "l.pageversion:name"			VALUE = "{ Page_Source.d.source_name }">
		<MvASSIGN NAME = "l.pageversion:title"			VALUE = "{ Page_Source.d.source_title }">
		<MvASSIGN NAME = "l.pageversion:ui_id"			VALUE = "{ Page_Source.d.source_ui_id }">
		<MvASSIGN NAME = "l.pageversion:cache"			VALUE = "{ Page_Source.d.source_cache }">
		<MvASSIGN NAME = "l.pageversion:cacheset"		VALUE = "{ miva_array_deserialize( Page_Source.d.source_cacheset ) }">

		<MvCOMMENT>
		|
		| If the target_xref_id differs from the source_xref_id (can occur when copying from a non-head changeset), we must
		| insert a new version with the correct xref_id.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.requires_propagation"		VALUE = 0>

		<MvIF EXPR = "{ l.pageversion:xref_id NE Page_Source.d.target_xref_id }">
			<MvASSIGN NAME = "l.pageversion:xref_id"	VALUE = "{ Page_Source.d.target_xref_id }">
			<MvASSIGN NAME = "l.requires_propagation"	VALUE = 1>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageVersion_Insert( l.pageversion ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Record the page on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Insert( l.dest_branch:id, Page_Source.d.page_id, l.pageversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageBranchVersion_Update_Head( l.dest_branch:id, Page_Source.d.page_id, l.pageversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL Page_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id" VALUE = 0>
		<MvELSE>												<MvASSIGN NAME = "l.previous_id" VALUE = "{ Page_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ l.requires_propagation }">
			<MvIF EXPR = "{ NOT TemplateManager_Page_Fields_Propagate( Page_Source.d.page_id, l.previous_id, l.pageversion:id ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, Page_Source.d.page_id, l.previous_id, l.pageversion:id, l.pageversion:xref_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| Update URIs
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ( NOT Page_Source.d.source_layout ) AND ( NOT Page_Source.d.source_fragment ) AND ( Page_Source.d.source_id NE 0 ) }">
			<MvASSIGN NAME = "l.page"			VALUE = "">
			<MvASSIGN NAME = "l.page:id"		VALUE = "{ Page_Source.d.page_id }">
			<MvASSIGN NAME = "l.page:templ_id"	VALUE = "{ Page_Source.d.page_templ_id }">

			<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Copy_PageVersion( l.pageversion, l.page ) }">

			<MvIF EXPR = "{ l.page_overwritten OR ( l.previous_id NE 0 ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Branch_Page_Update( l.dest_branch, l.page ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URIList_Load_Page_Code( Page_Source.d.source_code, l.null ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_UT ].URI_Generate_Branch_Page_New( l.dest_branch, l.page ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "Page_Source" ROWS = 1>
	</MvWHILE>
	
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Page_Source">
	<MvFUNCTIONRETURN VALUE = 1>	
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changeset_Items" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Copy items from the source branch that were modified in the specified changset and differ
	| from the current head version in the destination branch.
	|
	</MvCOMMENT>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "Item_Source"
				QUERY	= "{ 'SELECT
								ic.item_id			AS item_id,
								ic.new_id			AS source_id,
								ibv_dest.version_id	AS previous_id,
								iv_source.user_id	AS source_user_id,
								iv_source.code		AS source_code,
								iv_source.mod_code	AS source_mod_code,
								iv_dest.code		AS dest_code
							  FROM
								' $ g.Store_Table_Prefix $ 'Items i,
								' $ g.Store_Table_Prefix $ 'ItemChanges ic
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ItemBranchVersions ibv_dest	ON ibv_dest.branch_id	= ? AND
																										   ibv_dest.head		= 1 AND
																										   ibv_dest.item_id		= ic.item_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ItemVersions iv_source		ON iv_source.id			= ic.new_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ItemVersions iv_dest 		ON iv_dest.id			= ibv_dest.version_id
							  WHERE
								ic.set_id	= ?				AND
								i.id		= ic.item_id	AND
								' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'ibv_dest.version_id', '0' ) $ ' <> ic.new_id' }"
				FIELDS	= "l.dest_branch:id, l.source_changeset:id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00102', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT Item_Source.d.EOF }">
		<MvCOMMENT>
		|
		| Overwrite items on the destination branch with conflicting codes by marking them as deleted
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ Item_Source.d.source_id NE 0 }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Item_Load_Branch_Code( l.dest_branch:id, Item_Source.d.source_code, l.existing_item ) AND
							Item_Source.d.item_id NE l.existing_item:id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Insert( l.dest_branch:id, l.existing_item:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Update_Head( l.dest_branch:id, l.existing_item:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_item:id, l.existing_item:version_id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.itemversion"			VALUE = "">
		<MvASSIGN NAME = "l.itemversion:id"			VALUE = "{ Item_Source.d.source_id }">
		<MvASSIGN NAME = "l.itemversion:item_id"	VALUE = "{ Item_Source.d.item_id }">
		<MvASSIGN NAME = "l.itemversion:user_id"	VALUE = "{ Item_Source.d.source_user_id }">
		<MvASSIGN NAME = "l.itemversion:code"		VALUE = "{ Item_Source.d.source_code }">
		<MvASSIGN NAME = "l.itemversion:mod_code"	VALUE = "{ Item_Source.d.source_mod_code }">

		<MvCOMMENT>
		|
		| Record the item on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Insert( l.dest_branch:id, Item_Source.d.item_id, l.itemversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemBranchVersion_Update_Head( l.dest_branch:id, Item_Source.d.item_id, l.itemversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL Item_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id" VALUE = 0>
		<MvELSE>												<MvASSIGN NAME = "l.previous_id" VALUE = "{ Item_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, Item_Source.d.item_id, l.previous_id, l.itemversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "Item_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Item_Source">
	<MvFUNCTIONRETURN VALUE = 1>	
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changeset_JavaScriptResources" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Copy resources from the source branch that were modified in the specified changset and differ
	| from the current head version in the destination branch.
	|
	</MvCOMMENT>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "JavaScriptResource_Source"
				QUERY	= "{ 'SELECT
								c.res_id																		AS res_id,
								c.new_id																		AS source_id,
								bv_source.head																	AS source_head,
								v_source.code																	AS source_code,
								' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_source.xref_id', '0' )  $ '	AS source_xref_id,
								v_source.user_id																AS source_user_id,
								v_source.type																	AS source_type,
								v_source.is_global																AS source_is_global,
								v_source.active																	AS source_active,
								v_source.file																	AS source_file,
								v_source.content_id																AS source_content_id,
								v_source.attributes																AS source_attributes,
								v_dest.id																		AS dest_id,
								v_dest.code																		AS dest_code,
								v_dest.xref_id																	AS dest_xref_id,
								v_dest.type																		AS dest_type,
								v_dest.is_global																AS dest_is_global,
								v_dest.active																	AS dest_active,
								v_dest.file																		AS dest_file,
								v_dest.content_id																AS dest_content_id,
								v_dest.attributes																AS dest_attributes,
								bv_dest.version_id																AS previous_id,
								c.xref_id																		AS target_xref_id
							  FROM
								' $ g.Store_Table_Prefix $ 'JavaScriptResourceChanges c
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions bv_source ON bv_source.branch_id = ? AND bv_source.res_id = c.res_id AND bv_source.version_id = c.new_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'JavaScriptResourceBranchVersions bv_dest ON bv_dest.branch_id = ? AND bv_dest.head = 1 AND bv_dest.res_id = c.res_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'JavaScriptResourceVersions v_source ON v_source.id = c.new_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'JavaScriptResourceVersions v_dest ON v_dest.id = bv_dest.version_id
							  WHERE
								c.set_id = ? AND
								(
									' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'bv_dest.version_id', '0' )	$ ' <> c.new_id OR
									' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_dest.xref_id', '0' )		$ ' <> c.xref_id
								)' }"
				FIELDS	= "l.source_branch:id, l.dest_branch:id, l.source_changeset:id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00059', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT JavaScriptResource_Source.d.EOF }">
		<MvIF EXPR = "{ JavaScriptResource_Source.d.source_id NE 0 }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Branch_Code( l.dest_branch:id, JavaScriptResource_Source.d.source_code, l.existing_dest_scriptresource ) AND
							l.existing_dest_scriptresource:id NE JavaScriptResource_Source.d.res_id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Load_Branch_Head( l.dest_branch:id, l.existing_dest_scriptresource:id, l.existing_dest_scriptresourceversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Insert( l.dest_branch:id, l.existing_dest_scriptresource:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Update_Head( l.dest_branch:id, l.existing_dest_scriptresource:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_dest_scriptresource:id, l.existing_dest_scriptresourceversion:id, 0, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.scriptresourceversion"				VALUE = "">
		<MvASSIGN NAME = "l.scriptresourceversion:id"			VALUE = "{ JavaScriptResource_Source.d.source_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:code"			VALUE = "{ JavaScriptResource_Source.d.source_code }">
		<MvASSIGN NAME = "l.scriptresourceversion:res_id"		VALUE = "{ JavaScriptResource_Source.d.res_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:xref_id"		VALUE = "{ JavaScriptResource_Source.d.source_xref_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:user_id"		VALUE = "{ JavaScriptResource_Source.d.source_user_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:content_id"	VALUE = "{ JavaScriptResource_Source.d.source_content_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:immutable"	VALUE = 0>
		<MvASSIGN NAME = "l.scriptresourceversion:type"			VALUE = "{ JavaScriptResource_Source.d.source_type }">
		<MvASSIGN NAME = "l.scriptresourceversion:is_global"	VALUE = "{ JavaScriptResource_Source.d.source_is_global }">
		<MvASSIGN NAME = "l.scriptresourceversion:active"		VALUE = "{ JavaScriptResource_Source.d.source_active }">
		<MvASSIGN NAME = "l.scriptresourceversion:file"			VALUE = "{ JavaScriptResource_Source.d.source_file }">
		<MvASSIGN NAME = "l.scriptresourceversion:attributes"	VALUE = "{ miva_array_deserialize( JavaScriptResource_Source.d.source_attributes ) }">

		<MvCOMMENT>
		|
		| Copying of Local File resources requires also copying the actual file and potentially creating a new version of the resource
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ JavaScriptResource_Source.d.source_type EQ 'L' }">
			<MvIF EXPR = "{ JavaScriptResource_Source.d.dest_type NE 'L' }">
				<MvCOMMENT>
				|
				| If there is no destination version (creating a branch), or the type is different, create a new version with
				| a branch-specific path.  If the source file does not exist, strip any branch-specific directory out of the
				| filename and do not attempt to copy the actual file.
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT TemplateManager_Copy_Branch_ResourceFile( 'scripts', l.source_branch, JavaScriptResource_Source.d.source_file, JavaScriptResource_Source.d.source_head, l.dest_branch, l.scriptresourceversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvCOMMENT>
				|
				| If the destination is also a Local File with either a different file or different Managed Content, overwrite
				| destination.  If the source content does not exist, or both source and destination exist and are identical,
				| avoid recording a change unless we have non-file modifications to the resource.
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT TemplateManager_Branch_Load_ResourceFile_ManagedContent( JavaScriptResource_Source.d.source_file, JavaScriptResource_Source.d.source_content_id, JavaScriptResource_Source.d.source_head, l.content_loaded, l.managedcontent ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvASSIGN NAME = "l.dest_file_path"	VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, JavaScriptResource_Source.d.dest_file ) }">

				<MvIF EXPR = "{ NOT l.content_loaded OR
								(
									crypto_md5_file( l.dest_file_path, 'script', l.dest_md5 ) AND
									l.dest_md5 EQ l.managedcontent:md5
								) }">
					<MvIF EXPR = "{ JavaScriptResource_Source.d.dest_code		EQ JavaScriptResource_Source.d.source_code			AND
									JavaScriptResource_Source.d.dest_xref_id	EQ JavaScriptResource_Source.d.target_xref_id		AND
									JavaScriptResource_Source.d.dest_type		EQ JavaScriptResource_Source.d.source_type			AND
									JavaScriptResource_Source.d.dest_is_global	EQ JavaScriptResource_Source.d.source_is_global		AND
									JavaScriptResource_Source.d.dest_active		EQ JavaScriptResource_Source.d.source_active		AND
									JavaScriptResource_Source.d.dest_content_id	EQ JavaScriptResource_Source.d.source_content_id	AND
									JavaScriptResource_Source.d.dest_attributes	EQ JavaScriptResource_Source.d.source_attributes }">
						<MvSKIP NAME = "Merchant" VIEW = "JavaScriptResource_Source" ROWS = 1>
						<MvWHILECONTINUE>
					</MvIF>
				<MvELSE>
					<MvIF EXPR = "{ NOT TemplateManager_Write_ResourceFile( l.dest_file_path, l.managedcontent:content ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvASSIGN NAME = "l.scriptresourceversion:file"			VALUE = "{ JavaScriptResource_Source.d.dest_file }">
				<MvASSIGN NAME = "l.scriptresourceversion:content_id"	VALUE = "{ l.managedcontent:id }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| There are two reasons we would need to insert a new version:
		|
		|	1. The filename differs (occurs when changing the resource type)
		|	2. The target_xref_id differs from the source_xref_id (can occur when merging from a non-head changeset)
		|	3. The scriptresource version content_id differs from the source_content_id (can occur when the local file content differs from what we have stored in the database)
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.scriptresourceversion:file		NE JavaScriptResource_Source.d.source_file		OR
						l.scriptresourceversion:xref_id		NE JavaScriptResource_Source.d.target_xref_id	OR
						l.scriptresourceversion:content_id	NE JavaScriptResource_Source.d.source_content_id }">
			<MvASSIGN NAME = "l.scriptresourceversion:xref_id" VALUE = "{ JavaScriptResource_Source.d.target_xref_id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Insert( l.scriptresourceversion ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Record the resource on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Insert( l.dest_branch:id, JavaScriptResource_Source.d.res_id, l.scriptresourceversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceBranchVersion_Update_Head( l.dest_branch:id, JavaScriptResource_Source.d.res_id, l.scriptresourceversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL JavaScriptResource_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id"	VALUE = 0>
		<MvELSE>															<MvASSIGN NAME = "l.previous_id"	VALUE = "{ JavaScriptResource_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, JavaScriptResource_Source.d.res_id, l.previous_id, l.scriptresourceversion:id, l.scriptresourceversion:xref_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "JavaScriptResource_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "JavaScriptResource_Source">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changeset_CSSResources" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Copy resources from the source branch that were modified in the specified changset and differ
	| from the current head version in the destination branch.
	|
	</MvCOMMENT>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "CSSResource_Source"
				QUERY	= "{ 'SELECT
								c.res_id																		AS res_id,
								c.new_id																		AS source_id,
								bv_source.head																	AS source_head,
								v_source.code																	AS source_code,
								' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_source.xref_id', '0' )  $ '	AS source_xref_id,
								v_source.user_id																AS source_user_id,
								v_source.type																	AS source_type,
								v_source.is_global																AS source_is_global,
								v_source.active																	AS source_active,
								v_source.file																	AS source_file,
								v_source.content_id																AS source_content_id,
								v_source.attributes																AS source_attributes,
								v_dest.id																		AS dest_id,
								v_dest.code																		AS dest_code,
								v_dest.xref_id																	AS dest_xref_id,
								v_dest.type																		AS dest_type,
								v_dest.is_global																AS dest_is_global,
								v_dest.active																	AS dest_active,
								v_dest.file																		AS dest_file,
								v_dest.content_id																AS dest_content_id,
								v_dest.attributes																AS dest_attributes,
								bv_dest.version_id																AS previous_id,
								c.xref_id																		AS target_xref_id
							  FROM
								' $ g.Store_Table_Prefix $ 'CSSResourceChanges c
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'CSSResourceBranchVersions bv_source ON bv_source.branch_id = ? AND bv_source.res_id = c.res_id AND bv_source.version_id = c.new_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'CSSResourceBranchVersions bv_dest ON bv_dest.branch_id = ? AND bv_dest.head = 1 AND bv_dest.res_id = c.res_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'CSSResourceVersions v_source ON v_source.id = c.new_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'CSSResourceVersions v_dest ON v_dest.id = bv_dest.version_id
							  WHERE
								c.set_id = ? AND
								(
									' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'bv_dest.version_id', '0' )	$ ' <> c.new_id OR
									' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'v_dest.xref_id', '0' )		$ ' <> c.xref_id
								)' }"
				FIELDS	= "l.source_branch:id, l.dest_branch:id, l.source_changeset:id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00060', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT CSSResource_Source.d.EOF }">
		<MvIF EXPR = "{ CSSResource_Source.d.source_id NE 0 }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Branch_Code( l.dest_branch:id, CSSResource_Source.d.source_code, l.existing_dest_cssresource ) AND
							l.existing_dest_cssresource:id NE CSSResource_Source.d.res_id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Load_Branch_Head( l.dest_branch:id, l.existing_dest_cssresource:id, l.existing_dest_cssresourceversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Insert( l.dest_branch:id, l.existing_dest_cssresource:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Update_Head( l.dest_branch:id, l.existing_dest_cssresource:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_dest_cssresource:id, l.existing_dest_cssresourceversion:id, 0, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.cssresourceversion"				VALUE = "">
		<MvASSIGN NAME = "l.cssresourceversion:id"			VALUE = "{ CSSResource_Source.d.source_id }">
		<MvASSIGN NAME = "l.cssresourceversion:code"		VALUE = "{ CSSResource_Source.d.source_code }">
		<MvASSIGN NAME = "l.cssresourceversion:res_id"		VALUE = "{ CSSResource_Source.d.res_id }">
		<MvASSIGN NAME = "l.cssresourceversion:xref_id"		VALUE = "{ CSSResource_Source.d.source_xref_id }">
		<MvASSIGN NAME = "l.cssresourceversion:user_id"		VALUE = "{ CSSResource_Source.d.source_user_id }">
		<MvASSIGN NAME = "l.cssresourceversion:content_id"	VALUE = "{ CSSResource_Source.d.source_content_id }">
		<MvASSIGN NAME = "l.cssresourceversion:immutable"	VALUE = 0>
		<MvASSIGN NAME = "l.cssresourceversion:type"		VALUE = "{ CSSResource_Source.d.source_type }">
		<MvASSIGN NAME = "l.cssresourceversion:is_global"	VALUE = "{ CSSResource_Source.d.source_is_global }">
		<MvASSIGN NAME = "l.cssresourceversion:active"		VALUE = "{ CSSResource_Source.d.source_active }">
		<MvASSIGN NAME = "l.cssresourceversion:file"		VALUE = "{ CSSResource_Source.d.source_file }">
		<MvASSIGN NAME = "l.cssresourceversion:attributes"	VALUE = "{ miva_array_deserialize( CSSResource_Source.d.source_attributes ) }">

		<MvCOMMENT>
		|
		| Copying of Local File resources requires also copying the actual file and potentially creating a new version of the resource
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ CSSResource_Source.d.source_type EQ 'L' }">
			<MvIF EXPR = "{ CSSResource_Source.d.dest_type NE 'L' }">
				<MvCOMMENT>
				|
				| If there is no destination version (creating a branch), or the type is different, create a new version with
				| a branch-specific path.  If the source file does not exist, strip any branch-specific directory out of the
				| filename and do not attempt to copy the actual file.
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT TemplateManager_Copy_Branch_ResourceFile( 'css', l.source_branch, CSSResource_Source.d.source_file, CSSResource_Source.d.source_head, l.dest_branch, l.cssresourceversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvCOMMENT>
				|
				| If the destination is also a Local File with either a different file or different Managed Content, overwrite
				| destination.  If the source content does not exist, or both source and destination exist and are identical,
				| avoid recording a change unless we have non-file modifications to the resource.
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT TemplateManager_Branch_Load_ResourceFile_ManagedContent( CSSResource_Source.d.source_file, CSSResource_Source.d.source_content_id, CSSResource_Source.d.source_head, l.content_loaded, l.managedcontent ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvASSIGN NAME = "l.dest_file_path"	VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, CSSResource_Source.d.dest_file ) }">

				<MvIF EXPR = "{ NOT l.content_loaded OR
								(
									crypto_md5_file( l.dest_file_path, 'script', l.dest_md5 ) AND
									l.dest_md5 EQ l.managedcontent:md5
								) }">
					<MvIF EXPR = "{ CSSResource_Source.d.dest_code			EQ CSSResource_Source.d.source_code			AND
									CSSResource_Source.d.dest_xref_id		EQ CSSResource_Source.d.target_xref_id		AND
									CSSResource_Source.d.dest_type			EQ CSSResource_Source.d.source_type			AND
									CSSResource_Source.d.dest_is_global		EQ CSSResource_Source.d.source_is_global	AND
									CSSResource_Source.d.dest_active		EQ CSSResource_Source.d.source_active		AND
									CSSResource_Source.d.dest_content_id	EQ CSSResource_Source.d.source_content_id	AND
									CSSResource_Source.d.dest_attributes	EQ CSSResource_Source.d.source_attributes }">
						<MvSKIP NAME = "Merchant" VIEW = "CSSResource_Source" ROWS = 1>
						<MvWHILECONTINUE>
					</MvIF>
				<MvELSE>
					<MvIF EXPR = "{ NOT TemplateManager_Write_ResourceFile( l.dest_file_path, l.managedcontent:content ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvASSIGN NAME = "l.cssresourceversion:file"		VALUE = "{ CSSResource_Source.d.dest_file }">
				<MvASSIGN NAME = "l.cssresourceversion:content_id"	VALUE = "{ l.managedcontent:id }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| There are two reasons we would need to insert a new version:
		|
		|	1. The filename differs (occurs when changing the resource type)
		|	2. The target_xref_id differs from the source_xref_id (can occur when merging from a non-head changeset)
		|	3. The cssresource version content_id differs from the source_content_id (can occur when the local file content differs from what we have stored in the database)
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.cssresourceversion:file		NE CSSResource_Source.d.source_file		OR
						l.cssresourceversion:xref_id	NE CSSResource_Source.d.target_xref_id	OR
						l.cssresourceversion:content_id	NE CSSResource_Source.d.source_content_id }">
			<MvASSIGN NAME = "l.cssresourceversion:xref_id" VALUE = "{ CSSResource_Source.d.target_xref_id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Insert( l.cssresourceversion ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Record the resource on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Insert( l.dest_branch:id, CSSResource_Source.d.res_id, l.cssresourceversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceBranchVersion_Update_Head( l.dest_branch:id, CSSResource_Source.d.res_id, l.cssresourceversion:id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL CSSResource_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id"	VALUE = 0>
		<MvELSE>													<MvASSIGN NAME = "l.previous_id"	VALUE = "{ CSSResource_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, CSSResource_Source.d.res_id, l.previous_id, l.cssresourceversion:id, l.cssresourceversion:xref_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "CSSResource_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "CSSResource_Source">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changeset_Properties" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Copy properties from the source branch that were modified in the specified changset and differ
	| from the current head version in the destination branch.
	|
	</MvCOMMENT>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "ManagedProperty_Source"
				QUERY	= "{ 'SELECT
								mpc.prop_id				AS prop_id,
								mpc.new_id				AS version_id,
								mpbv_dest.version_id	AS previous_id,
								mpv_source.type			AS source_type,
								mpv_source.code			AS source_code,
								mpv_source.product_id	AS source_product_id,
								mpv_source.cat_id		AS source_cat_id,
								mpv_source.image_id		AS source_image_id,
								mpv_dest.type			AS dest_type,
								mpv_dest.code			AS dest_code,
								mpv_dest.product_id		AS dest_product_id,
								mpv_dest.cat_id			AS dest_cat_id,
								mpv_dest.image_id		AS dest_image_id,
								mpvir_dest.head_count	AS dest_head_count,
								mpvir_source.head_count	AS source_head_count
							  FROM
								' $ g.Store_Table_Prefix $ 'ManagedPropertyChanges mpc
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ManagedPropertyBranchVersions mpbv_dest 			ON mpbv_dest.branch_id		= ? AND 
																															   	   mpbv_dest.head			= 1 AND 
																															   	   mpbv_dest.prop_id		= mpc.prop_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ManagedPropertyVersions mpv_source 					ON mpv_source.id			= mpc.new_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ManagedPropertyVersions mpv_dest 					ON mpv_dest.id				= mpbv_dest.version_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ManagedPropertyVersionImageReferences mpvir_dest 	ON mpvir_dest.version_id	= mpv_dest.id AND 
																																   mpvir_dest.image_id		= mpv_dest.image_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ManagedPropertyVersionImageReferences mpvir_source 	ON mpvir_source.version_id	= mpc.new_id AND 
																																   mpvir_source.image_id	= mpv_source.image_id
							  WHERE
								mpc.set_id	= ?	AND
								' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mpbv_dest.version_id', '0' ) $ ' <> mpc.new_id' }"
				FIELDS	= "l.dest_branch:id, l.source_changeset:id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00071', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT ManagedProperty_Source.d.EOF }">
		<MvIF EXPR = "{ ( ManagedProperty_Source.d.version_id NE 0 ) AND
						(
							strcmp( ManagedProperty_Source.d.source_type, ManagedProperty_Source.d.dest_type ) NE 0	OR
							strcmp( ManagedProperty_Source.d.source_code, ManagedProperty_Source.d.dest_code ) NE 0	OR
							ManagedProperty_Source.d.source_product_id	NE ManagedProperty_Source.d.dest_product_id	OR
							ManagedProperty_Source.d.source_cat_id		NE ManagedProperty_Source.d.dest_cat_id
						) }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Branch( l.dest_branch:id, ManagedProperty_Source.d.source_type, ManagedProperty_Source.d.source_code, ManagedProperty_Source.d.source_product_id, ManagedProperty_Source.d.source_cat_id, l.existing_managedproperty ) AND
							ManagedProperty_Source.d.prop_id NE l.existing_managedproperty:id }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyVersion_Load_Branch_Head( l.dest_branch:id, l.existing_managedproperty:id, l.existing_managedpropertyversion ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Insert( l.dest_branch:id, l.existing_managedproperty:id, 0 ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Update_Head( l.dest_branch:id, l.existing_managedproperty:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ l.existing_managedpropertyversion:image:id  }">
					<MvIF EXPR = "{ l.existing_managedpropertyversion:image:head_count EQ 1 }">
						<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Decrement_RefCount( l.existing_managedpropertyversion:image:id ) }">
							<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
							<MvFUNCTIONRETURN VALUE = 0>
						</MvIF>
					</MvIF>

					<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyImageReference_Decrement_HeadCount( l.existing_managedpropertyversion:id, l.existing_managedpropertyversion:image:id ) }">
						<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyChange_InsertOrUpdate( l.dest_branch:id, l.dest_changeset:id, l.existing_managedproperty:id, l.existing_managedpropertyversion:id, 0 ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Record the property change on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ManagedProperty_Source.d.version_id EQ 0 }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Insert( l.dest_branch:id, ManagedProperty_Source.d.prop_id, 0 ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Insert( l.dest_branch:id, ManagedProperty_Source.d.prop_id, ManagedProperty_Source.d.version_id ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Update_Head( l.dest_branch:id, ManagedProperty_Source.d.prop_id, ManagedProperty_Source.d.version_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL ManagedProperty_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id" VALUE = 0>
		<MvELSE>														<MvASSIGN NAME = "l.previous_id" VALUE = "{ ManagedProperty_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, ManagedProperty_Source.d.prop_id, l.previous_id, ManagedProperty_Source.d.version_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| If the destination version image exists:
		|	- Decrement the image reference count if the destination version is the only reference
		|	- Decrement the head count on the version/image_id pair
		| Increment head count on destination branch
		| Increment the image refcount if the source has no existing reference
		|
		| Note that we are intentionally decrementing and then incrementing if source / destination 
		| image ids are the same so that the property version id is correctly tracked
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ManagedProperty_Source.d.dest_image_id }">
			<MvIF EXPR = "{ ManagedProperty_Source.d.dest_head_count EQ 1 }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Decrement_RefCount( ManagedProperty_Source.d.dest_image_id ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyImageReference_Decrement_HeadCount( ManagedProperty_Source.d.previous_id, ManagedProperty_Source.d.dest_image_id ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ManagedProperty_Source.d.source_image_id }">
			<MvIF EXPR = "{ NOT ManagedProperty_Source.d.source_head_count }">
				<MvCOMMENT>
				|
				| The source version has no head reference because the merged version is not on any head.
				| We need to increment the image reference in this case
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Increment_RefCount( ManagedProperty_Source.d.source_image_id ) }">
					<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyImageReference_InsertOrIncrement( ManagedProperty_Source.d.prop_id, ManagedProperty_Source.d.version_id, ManagedProperty_Source.d.source_image_id ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "ManagedProperty_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedProperty_Source">
	<MvFUNCTIONRETURN VALUE = 1>	
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Merge_Changeset_Templates" PARAMETERS = "source_branch var, source_changeset var, dest_branch var, dest_changeset var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Ensure that the target branch directory exists
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.source_dir"				VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.source_branch:tmpldir }">
	<MvASSIGN NAME = "l.dest_dir"				VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.dest_branch:tmpldir }">

	<MvIF EXPR = "{ NOT sexists( l.dest_dir ) }">
		<MvIF EXPR = "{ NOT smkdir( l.dest_dir ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00047', 'Unable to create directory \'' $ l.dest_dir $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Copy/compile templates from the source branch that were modified in the specified changset and differ
	| from the current head version in the destination branch.
	|
	</MvCOMMENT>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "ManagedTemplate_Source"
				QUERY	= "{ 'SELECT
								mtc.templ_id			AS templ_id,
								mt.filename				AS filename,
								mtc.new_id				AS source_id,
								mtbv_source.version_id	AS head_id,
								mtbv_dest.version_id	AS previous_id,
								mtv_source.source		AS source_source,
								mtv_source.settings		AS source_settings,
								mtv_dest.settings		AS dest_settings
							  FROM
								' $ g.Store_Table_Prefix $ 'ManagedTemplates mt,
								' $ g.Store_Table_Prefix $ 'ManagedTemplateChanges mtc
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions mtbv_source	ON mtbv_source.branch_id	= ? AND
																														   mtbv_source.head			= 1 AND
																														   mtbv_source.templ_id		= mtc.templ_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ManagedTemplateBranchVersions mtbv_dest		ON mtbv_dest.branch_id		= ? AND
																														   mtbv_dest.head			= 1 AND
																														   mtbv_dest.templ_id		= mtc.templ_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ManagedTemplateVersions mtv_source			ON mtv_source.id			= mtc.new_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ManagedTemplateVersions mtv_dest 			ON mtv_dest.id				= mtbv_dest.version_id
							  WHERE
								mtc.set_id	= ?				AND
								mt.id		= mtc.templ_id	AND
								' $ [ g.Module_Library_Native_DBAPI ].DB_IFNULL( 'mtbv_dest.version_id', '0' )	$ ' <> mtc.new_id' }"
				FIELDS	= "l.source_branch:id, l.dest_branch:id, l.source_changeset:id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00048', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT ManagedTemplate_Source.d.EOF }">
		<MvCOMMENT>
		|
		| When using the current head version, we can just copy the existing compiled template from one directory
		| to another.  If using a previous version, we have to recompile.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ( ManagedTemplate_Source.d.source_id NE 0 ) AND ( ManagedTemplate_Source.d.source_id EQ ManagedTemplate_Source.d.head_id ) }">
			<MvIF EXPR = "{ NOT scopy( l.source_dir $ ManagedTemplate_Source.d.filename, l.dest_dir $ ManagedTemplate_Source.d.filename ) }">
				<MvASSIGN NAME = "l.error_message" VALUE = "{ 'Unable to copy \'' $ l.source_dir $ ManagedTemplate_Source.d.filename $ '\' to \'' $ l.dest_dir $ ManagedTemplate_Source.d.filename $ '\': ' $ file_last_error() }">

				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00049', l.error_message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, ManagedTemplate_Source.d.source_source, l.null, l.dest_dir $ ManagedTemplate_Source.d.filename, l.compile_error ) }">
				<MvASSIGN NAME = "l.error_message" VALUE = "{ 'Error compiling template \'' $ ManagedTemplate_Source.d.filename $ '\': ' $ l.compile_error }">

				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00050', l.error_message ) }">
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Merge any non-existent top-level settings from the destination template version into the settings from the changeset, creating a new
		| version if necessary.  The order may seem backwards but we are trying to preserve top-level settings that exist in the destination
		| version (from new item assignments), but not in the changeset version (possibly created prior to the item assignment).
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.source_settings"	VALUE = "{ miva_array_deserialize( ManagedTemplate_Source.d.source_settings ) }">
		<MvASSIGN NAME = "l.dest_settings"		VALUE = "{ miva_array_deserialize( ManagedTemplate_Source.d.dest_settings ) }">

		<MvEVAL EXPR = "{ miva_struct_merge_ref( l.dest_settings, l.source_settings ) }">

		<MvIF EXPR = "{ crypto_md5( miva_array_serialize( l.source_settings ) ) EQ crypto_md5( ManagedTemplate_Source.d.source_settings ) }">
			<MvASSIGN NAME = "l.version_id"		VALUE = "{ ManagedTemplate_Source.d.source_id }">
		<MvELSE>
			<MvCOMMENT>
			|
			| There were top-level settings merged from the destination, so a new ManagedTemplateVersion is required
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.managedtemplateversion"				VALUE = "">
			<MvASSIGN NAME = "l.managedtemplateversion:templ_id"	VALUE = "{ ManagedTemplate_Source.d.templ_id }">
			<MvASSIGN NAME = "l.managedtemplateversion:user_id"		VALUE = "{ int( g.User:id ) }">
			<MvASSIGN NAME = "l.managedtemplateversion:immutable"	VALUE = 0>
			<MvASSIGN NAME = "l.managedtemplateversion:dtstamp"		VALUE = "{ s.dyn_time_t }">
			<MvASSIGN NAME = "l.managedtemplateversion:notes"		VALUE = "{ substring_var( l.dest_changeset:notes, 1, 100 ) }">
			<MvASSIGN NAME = "l.managedtemplateversion:source"		VALUE = "{ ManagedTemplate_Source.d.source_source }">
			<MvASSIGN NAME = "l.managedtemplateversion:settings"	VALUE = "{ l.source_settings }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Insert( l.managedtemplateversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.version_id"		VALUE = "{ l.managedtemplateversion:id }">
		</MvIF>

		<MvCOMMENT>
		|
		| Record the template change on the destination branch
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.dest_branch:id, ManagedTemplate_Source.d.templ_id, l.version_id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.dest_branch:id, ManagedTemplate_Source.d.templ_id, l.version_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL ManagedTemplate_Source.d.previous_id }">	<MvASSIGN NAME = "l.previous_id" VALUE = 0>
		<MvELSE>														<MvASSIGN NAME = "l.previous_id" VALUE = "{ ManagedTemplate_Source.d.previous_id }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateChange_InsertOrUpdate( l.dest_changeset:branch_id, l.dest_changeset:id, ManagedTemplate_Source.d.templ_id, l.previous_id, l.version_id ) }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
		
		<MvIF EXPR = "{ TemplateManager_Session_Recycle_Recommended() }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "ManagedTemplate_Source" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedTemplate_Source">
	<MvFUNCTIONRETURN VALUE = 1>	
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_ResourceFilename" PARAMETERS = "managed_directory, source_tmpldir, source_file, dest_tmpldir, dest_file var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| There are two possible patterns for the original file:
	|
	|	[managed_directory]/00000001/[tmpldir/]<filepath>	For paths inside the default directory
	|	[tmpldir/]<filepath>								For paths outside our managed directory
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.path_is_absolute"			VALUE = "{ ( '/' IN l.source_file ) EQ 1 }">
	<MvASSIGN NAME = "l.managed_path"				VALUE = "{ TemplateManager_ConcatenatePath( l.managed_directory, padl( g.Store:id, 8, '0' ) ) $ '/' }">
	<MvASSIGN NAME = "l.normalized_source"			VALUE = "{ [ g.Module_Library_Utilities ].NormalizePath( l.source_file ) }">

	<MvCOMMENT>
	|
	| Detect and strip managed path
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( l.managed_path IN l.normalized_source ) EQ 1 }">
		<MvASSIGN NAME = "l.inside_managed"			VALUE = 1>
		<MvASSIGN NAME = "l.destination_base"		VALUE = "{ substring_var( l.normalized_source, len_var( l.managed_path ) + 1, len_var( l.normalized_source ) - len_var( l.managed_path ) ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.inside_managed"			VALUE = 0>
		<MvASSIGN NAME = "l.destination_base"		VALUE = "{ l.normalized_source }">
	</MvIF>

	<MvCOMMENT>
	|
	| Strip templdir, if present
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL l.source_tmpldir }">
		<MvIF EXPR = "{ l.path_is_absolute AND ( ( ( '/' $ l.source_tmpldir ) IN l.destination_base ) EQ 1 ) }">
			<MvASSIGN NAME = "l.destination_base"	VALUE = "{ substring_var( l.destination_base, len_var( l.source_tmpldir ) + 2, len_var( l.destination_base ) - len_var( l.source_tmpldir ) + 1 ) }">
		<MvELSEIF EXPR = "{ ( l.source_tmpldir IN l.destination_base ) EQ 1 }">
			<MvASSIGN NAME = "l.destination_base"	VALUE = "{ substring_var( l.destination_base, len_var( l.source_tmpldir ) + 1, len_var( l.destination_base ) - len_var( l.source_tmpldir ) ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.dest_tmpldir }">
		<MvIF EXPR = "{ l.inside_managed }">		<MvASSIGN NAME = "l.destination_dir" VALUE = "{ l.managed_path }">
		<MvELSE>									<MvASSIGN NAME = "l.destination_dir" VALUE = "">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.inside_managed }">		<MvASSIGN NAME = "l.destination_dir" VALUE = "{ TemplateManager_ConcatenatePath( l.managed_path, l.dest_tmpldir ) }">
		<MvELSE>									<MvASSIGN NAME = "l.destination_dir" VALUE = "{ l.dest_tmpldir }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.destination_dir }">	<MvASSIGN NAME = "l.dest_file" VALUE = "{ l.destination_base }">
	<MvELSE>										<MvASSIGN NAME = "l.dest_file" VALUE = "{ TemplateManager_ConcatenatePath( l.destination_dir, l.destination_base ) }">
	</MvIF>

	<MvIF EXPR = "{ l.path_is_absolute }">			<MvASSIGN NAME = "l.dest_file" VALUE = "{ TemplateManager_ConcatenatePath( '/', l.dest_file ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Copy_Branch_ResourceFile" PARAMETERS = "managed_directory, source_branch var, source_file, source_head, dest_branch var, resourceversion var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT TemplateManager_Copy_Branch_ResourceFilename( l.managed_directory, l.source_branch:tmpldir, l.source_file, l.dest_branch:tmpldir, l.resourceversion:file ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.source_file_path"	VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, l.source_file ) }">
	<MvASSIGN NAME = "l.dest_file_path"		VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, l.resourceversion:file ) }">

	<MvIF EXPR = "{ NOT l.source_head AND l.resourceversion:content_id }">
		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( l.resourceversion:content_id, l.managedcontent ) }">
			<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Write_ResourceFile( l.dest_file_path, l.managedcontent:content ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ strcmp( l.source_file_path, l.dest_file_path ) EQ 0 }">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT sexists( l.source_file_path ) }">				<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ '/' IN l.dest_file_path }">
		<MvASSIGN NAME = "l.destination_fulldir" VALUE = "{ substring_var( l.dest_file_path, 1, indexofl( '/', l.dest_file_path, len_var( l.dest_file_path ) ) - 1 ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.destination_fulldir ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.destination_fulldir, '0755' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT scopy( l.source_file_path, l.dest_file_path ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00058', 'Unable to copy \'' $ l.source_file_path $ '\' to \'' $ l.dest_file_path $ '\': ' $ file_last_error() ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Branch_Load_ResourceFile_ManagedContent" PARAMETERS = "source_file, source_content_id, source_head, content_loaded var, managedcontent var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.content_loaded" VALUE = 0>

	<MvIF EXPR = "{ NOT l.source_head AND l.source_content_id }">
		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( l.source_content_id, l.managedcontent ) }">
			<MvASSIGN NAME = "l.content_loaded"	VALUE = 1>
			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.source_file_path" VALUE = "{ TemplateManager_ConcatenateResourcePath( g.imageroot, l.source_file ) }">

	<MvIF EXPR = "{ file_read( l.source_file_path, 'script', l.source ) GE 0 }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_FindOrInsert( l.source, l.managedcontent ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.content_loaded"	VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Write_ResourceFile" PARAMETERS = "file_path var, source var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ sexists( l.file_path ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ file_overwrite( l.file_path, 'script', l.source ) }">
	<MvELSE>
		<MvIF EXPR = "{ '/' IN l.file_path }">
			<MvASSIGN NAME = "l.file_dir" VALUE = "{ substring_var( l.file_path, 1, indexofl( '/', l.file_path, len_var( l.file_path ) ) - 1 ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.file_dir ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.file_dir, '0755' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.result" VALUE = "{ file_create( l.file_path, 'script', l.source ) }">
	</MvIF>

	<MvIF EXPR = "{ l.result LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00094', 'Unable to write to file \'' $ l.file_path $ '\': ' $ file_last_error() ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ schmod( l.file_path, '0644' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Set_ResourceManagedContent_FromFile" PARAMETERS = "resource var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.resource:content_id" VALUE = 0>

	<MvIF EXPR = "{ file_read( TemplateManager_ConcatenateResourcePath( g.imageroot, l.resource:file ), 'script', l.source ) NE -1 }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedContent_FindOrInsert( l.source, l.managedcontent ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.resource:content_id" VALUE = "{ l.managedcontent:id }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_Branch" PARAMETERS = "branch var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.branch:id EQ TemplateManager_Primary_Branch_ID() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00051', 'Branch is the primary branch for the store' ) }">
	<MvELSEIF EXPR = "{ l.branch:immutable }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00052', 'Branch is immutable' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Delete compiled template files
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.template_dir"	VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">

	<MvFOREACH ITERATOR = "l.managedtemplate" ARRAY = "l.managedtemplates" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ManagedTemplateList_Load_All( l.managedtemplates ) }">
		<MvASSIGN NAME = "l.null"		VALUE = "{ sdelete( l.template_dir $ l.managedtemplate:filename ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.null"			VALUE = "{ sdelete( l.template_dir ) }">

	<MvCOMMENT>
	|
	| Delete CSS Resource files
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.cssresource" ARRAY = "l.cssresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Branch_Type( l.branch:id, 'L', l.cssresources ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ TemplateManager_Delete_Branch_ResourceFile( 'css', l.branch:tmpldir, l.cssresource:file ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Delete JavaScript Resource files
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.scriptresource" ARRAY = "l.scriptresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Branch_Type( l.branch:id, 'L', l.scriptresources ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ TemplateManager_Delete_Branch_ResourceFile( 'scripts', l.branch:tmpldir, l.scriptresource:file ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Delete database records
	|
	</MvCOMMENT>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_TUI_DB ].Branch_Delete( l.branch ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_Branch_ResourceFile" PARAMETERS = "managed_directory, tmpldir, filepath" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.tmpldir }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.filepath"							VALUE = "{ glosub( l.filepath, '\\', '/' ) }">
	<MvASSIGN NAME = "l.path_is_absolute"					VALUE = "{ ( '/' IN l.filepath ) EQ 1 }">

	<MvCOMMENT>
	|
	| There are three possible patterns for the original file:
	|
	|	[managed_directory]/00000001/[tmpldir/]<filepath>	For paths inside the default directory
	|	[tmpldir/]<filepath>								For relative paths outside our managed directory
	|	/[tmpldir/]<filepath>								For absolute paths
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.path_is_absolute }">
		<MvIF EXPR = "{ ( ( '/' $ l.tmpldir ) IN l.filepath ) NE 1 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.absolute_file_path"				VALUE = "{ l.filepath }">
		<MvASSIGN NAME = "l.absolute_branched_directory"	VALUE = "{ '/' $ l.tmpldir }">
	<MvELSE>
		<MvASSIGN NAME = "l.managed_path"					VALUE = "{ TemplateManager_ConcatenatePath( l.managed_directory, padl( g.Store:id, 8, '0' ) ) $ '/' }">

		<MvIF EXPR = "{ ( l.managed_path IN l.filepath ) EQ 1 }">
			<MvASSIGN NAME = "l.inside_managed"				VALUE = 1>
			<MvASSIGN NAME = "l.basepath"					VALUE = "{ substring_var( l.filepath, len_var( l.managed_path ) + 1, len_var( l.filepath ) - len_var( l.managed_path ) ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.inside_managed"				VALUE = 0>
			<MvASSIGN NAME = "l.basepath"					VALUE = "{ l.filepath }">
		</MvIF>

		<MvIF EXPR = "{ ( l.tmpldir IN l.basepath ) NE 1 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ l.inside_managed }">	<MvASSIGN NAME = "l.branched_directory" VALUE = "{ TemplateManager_ConcatenatePath( l.managed_path, l.tmpldir ) }">
		<MvELSE>								<MvASSIGN NAME = "l.branched_directory" VALUE = "{ l.tmpldir }">
		</MvIF>

		<MvASSIGN NAME = "l.basehref_path"					VALUE = "{ TemplateManager_Get_Basehref_Path() }">
		<MvASSIGN NAME = "l.absolute_file_path"				VALUE = "{ TemplateManager_ConcatenatePath( l.basehref_path, l.filepath ) }">
		<MvASSIGN NAME = "l.absolute_branched_directory"	VALUE = "{ TemplateManager_ConcatenatePath( l.basehref_path, l.branched_directory ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"								VALUE = "{ sdelete( l.absolute_file_path ) }">

	<MvCOMMENT>
	|
	| Attempt to delete all directories up to the branched directory. If any files still exist within
	| a given directory, the delete will fail and the directory will (intentionally) remain.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.split_count"						VALUE = "{ miva_splitstring( l.absolute_file_path, '/', l.split_path, 'noempty' ) }">
	<MvASSIGN NAME = "l.split_count"						VALUE = "{ miva_array_delete( l.split_path, l.split_count, 1 ) }">

	<MvWHILE EXPR = "{ l.split_count }">
		<MvASSIGN NAME = "l.current_dir"					VALUE = "{ '/' $ miva_joinstring( l.split_path, '/', '' ) $ '/' }">

		<MvIF EXPR = "{ NOT sdelete( l.current_dir ) }">
			<MvWHILESTOP>
		<MvELSEIF EXPR = "{ l.absolute_branched_directory EQ l.current_dir }">
			<MvWHILESTOP>
		</MvIF>

		<MvASSIGN NAME = "l.split_count"					VALUE = "{ miva_array_delete( l.split_path, l.split_count, 1 ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedProperty" PARAMETERS = "type, code, flags_string, source var, settings var, managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.managedproperty:type"		VALUE = "{ l.type }">
	<MvASSIGN NAME = "l.managedproperty:code"		VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.managedproperty:product_id"	VALUE = 0>
	<MvASSIGN NAME = "l.managedproperty:cat_id"		VALUE = 0>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedProperty_LowLevel( l.managedproperty, l.flags_string, l.source, l.settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Product_ManagedProperty" PARAMETERS = "type, product_id, flags_string, source var, settings var, managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.managedproperty:type"		VALUE = "{ l.type }">
	<MvASSIGN NAME = "l.managedproperty:code"		VALUE = "">
	<MvASSIGN NAME = "l.managedproperty:product_id"	VALUE = "{ l.product_id }">
	<MvASSIGN NAME = "l.managedproperty:cat_id"		VALUE = 0>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedProperty_LowLevel( l.managedproperty, l.flags_string, l.source, l.settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Category_ManagedProperty" PARAMETERS = "type, cat_id, flags_string, source var, settings var, managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.managedproperty:type"		VALUE = "{ l.type }">
	<MvASSIGN NAME = "l.managedproperty:code"		VALUE = "">
	<MvASSIGN NAME = "l.managedproperty:product_id"	VALUE = 0>
	<MvASSIGN NAME = "l.managedproperty:cat_id"		VALUE = "{ l.cat_id }">

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedProperty_LowLevel( l.managedproperty, l.flags_string, l.source, l.settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Parse_ManagedProperty_Flags" PARAMETERS = "flags_string" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.flags"	VALUE = "">

	<MvFOREACH ITERATOR = "l.flag" ARRAY = "l.parsed_flags" COUNT = "{ miva_splitstring( l.flags_string, ',', l.parsed_flags, 'trim,tolower' ) }">
		<MvIF EXPR = "{ l.flag EQ 'notemplate' }">		<MvASSIGN NAME = "l.flags:notemplate"	VALUE = 1>
		<MvELSEIF EXPR = "{ l.flag EQ 'nosync' }">		<MvASSIGN NAME = "l.flags:nosync"		VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.flags }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ManagedProperty_TemplateFile" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:code }">	<MvFUNCTIONRETURN VALUE = "{ 'prop-' $ tolower( [ g.Module_Library_Utilities ].AlphaNumericOnly( l.managedproperty:type ) ) $ '-' $ tolower( [ g.Module_Library_Utilities ].AlphaNumericOnly( l.managedproperty:code ) ) $ '.mvc' }">
	<MvELSEIF EXPR = "{ l.managedproperty:product_id }">	<MvFUNCTIONRETURN VALUE = "{ 'prop-' $ tolower( [ g.Module_Library_Utilities ].AlphaNumericOnly( l.managedproperty:type ) ) $ '-p' $ int( l.managedproperty:product_id ) $ '.mvc' }">
	<MvELSEIF EXPR = "{ l.managedproperty:cat_id }">		<MvFUNCTIONRETURN VALUE = "{ 'prop-' $ tolower( [ g.Module_Library_Utilities ].AlphaNumericOnly( l.managedproperty:type ) ) $ '-c' $ int( l.managedproperty:cat_id ) $ '.mvc' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ 'prop-' $ int( l.managedproperty:id ) $ '.mvc' }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedProperty_LowLevel" PARAMETERS = "managedproperty var, flags_string, source var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.managedproperty:type }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00069', 'Managed properties must have a non-empty type' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.have_code"							VALUE = "{ NOT ISNULL l.managedproperty:code }">
	<MvASSIGN NAME = "l.have_product"						VALUE = "{ l.managedproperty:product_id NE 0 }">
	<MvASSIGN NAME = "l.have_category"						VALUE = "{ l.managedproperty:cat_id NE 0 }">

	<MvIF EXPR = "{ ( l.have_code + l.have_product + l.have_category ) NE 1 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00061', 'Managed properties must have exactly one of code, product_id or cat_id' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load( l.managedproperty:type, l.managedproperty:code, l.managedproperty:product_id, l.managedproperty:cat_id, l.existing_managedproperty ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Native_DBAPI ].DB_Error_IndexDuplicate( 'MER-TUI-MGR-00088', 'Managed property already exists' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.flags"								VALUE = "{ TemplateManager_Parse_ManagedProperty_Flags( l.flags_string ) }">

	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"					VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"					VALUE = 1>

		<MvIF EXPR = "{ l.managedproperty:product_id }">	<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.managedproperty:type $ '\', product ' $ l.managedproperty:product_id $ ' created' }">
		<MvELSEIF EXPR = "{ l.managedproperty:cat_id }">	<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.managedproperty:type $ '\', category ' $ l.managedproperty:cat_id $ ' created' }">
		<MvELSE>											<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.managedproperty:type $ '\', code \'' $ l.managedproperty:code $ '\' created' }">											
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin( l.note ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].ManagedProperty_Load_Reuse( l.managedproperty:type, l.managedproperty:code, l.managedproperty:product_id, l.managedproperty:cat_id, NOT l.flags:nosync, NOT l.flags:notemplate, l.reuse_managedproperty ) }">
		<MvCOMMENT>
		|
		| Reuse Existing Property
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.reuse_managedproperty:templ_id }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.reuse_managedproperty:templ_id, l.managedtemplate ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT TemplateManager_Create_ManagedTemplateVersion( l.managedtemplate, 'Original', l.source, l.null_settings, l.null ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.managedproperty:id"				VALUE = "{ l.reuse_managedproperty:id }">
		<MvASSIGN NAME = "l.managedproperty:sync"			VALUE = "{ l.reuse_managedproperty:sync }">
		<MvASSIGN NAME = "l.managedproperty:templ_id"		VALUE = "{ l.reuse_managedproperty:templ_id }">
		<MvASSIGN NAME = "l.managedproperty:current_id"		VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSE>
		<MvCOMMENT>
		|
		| Reusable Property Not Found, Create New Property
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.managedproperty:sync"			VALUE = "{ NOT l.flags:nosync }">
		<MvASSIGN NAME = "l.managedproperty:templ_id"		VALUE = 0>
		<MvASSIGN NAME = "l.managedproperty:current_id"		VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Insert( l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT l.flags:notemplate }">
			<MvASSIGN NAME = "l.managedtemplate:sync"		VALUE = 0>
			<MvASSIGN NAME = "l.managedtemplate:current_id"	VALUE = 0>
			<MvASSIGN NAME = "l.managedtemplate:page_id"	VALUE = 0>
			<MvASSIGN NAME = "l.managedtemplate:item_id"	VALUE = 0>
			<MvASSIGN NAME = "l.managedtemplate:prop_id"	VALUE = "{ l.managedproperty:id }">

			<MvASSIGN NAME = "l.filename"					VALUE = "{ TemplateManager_ManagedProperty_TemplateFile( l.managedproperty ) }">
			<MvASSIGN NAME = "l.managedtemplate:filename"	VALUE = "{ [ g.Feature_Filename_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( l.filename ) }">

			<MvIF EXPR = "{ NOT TemplateManager_Create_ManagedTemplate_LowLevel( l.managedtemplate, l.source, l.null ) }">
				<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedProperty_Purge( l.managedproperty ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.managedproperty:templ_id"	VALUE = "{ l.managedtemplate:id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedProperty_Update( l.managedproperty ) }">
				<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedProperty_Purge( l.managedproperty ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Create_Immutable_ManagedPropertyVersion( l.managedproperty, l.settings ) }">
		<MvASSIGN NAME = "l.null"							VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedProperty_Purge( l.managedproperty ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_ManagedProperty" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Delete_ManagedProperty_Branch( TemplateManager_Working_Branch_ID(), l.managedproperty ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Delete_ManagedProperty_Branch" PARAMETERS = "branch_id, managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyVersion_Load_Branch_Head( l.branch_id, l.managedproperty:id, l.managedpropertyversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00100', 'Managed property version not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Insert( l.branch_id, l.managedproperty:id, 0 ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Update_Head( l.branch_id, l.managedproperty:id, 0 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.managedpropertyversion:image:id }">
		<MvIF EXPR = "{ l.managedpropertyversion:image:head_count EQ 1 }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Decrement_RefCount( l.managedpropertyversion:image:id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyImageReference_Decrement_HeadCount( l.managedpropertyversion:id, l.managedpropertyversion:image:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.managedpropertyversion:product_id }">	<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.managedpropertyversion:type $ '\', product ' $ l.managedpropertyversion:product_id $ ' deleted' }">
	<MvELSEIF EXPR = "{ l.managedpropertyversion:cat_id }">	<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.managedpropertyversion:type $ '\', category ' $ l.managedpropertyversion:cat_id $ ' deleted' }">
	<MvELSE>												<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.managedpropertyversion:type $ '\', code \'' $ l.managedpropertyversion:code $ '\' deleted' }">											
	</MvIF>

	<MvIF EXPR = "{ TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT TemplateManager_Changeset_Begin_Branch( l.branch_id, l.note ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_ManagedPropertyVersion_Branch( l.branch_id, l.managedproperty:id, l.managedpropertyversion:id, 0, l.note ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.managedproperty:templ_id }">
		<MvIF EXPR = "{ NOT TemplateManager_Delete_ManagedTemplate_Branch( l.branch_id, l.managedproperty:templ_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT TemplateManager_Changeset_End() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_ManagedProperty_Code" PARAMETERS = "type, code" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_ManagedProperty_Code( l.type, l.code, l.branches ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Branch_Code( l.branch:id, l.type, l.code, l.managedproperty ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_ManagedProperty( l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_ManagedProperty_Product" PARAMETERS = "type, product_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_ManagedProperty_Product( l.type, l.product_id, l.branches ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Branch_Product( l.branch:id, l.type, l.product_id, l.managedproperty ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_ManagedProperty( l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_GlobalDelete_ManagedProperty_Category" PARAMETERS = "type, cat_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_branch_id" VALUE = "{ TemplateManager_Working_Branch_ID() }">

	<MvFOREACH ITERATOR = "l.branch" ARRAY = "l.branches" COUNT = "{ [ g.Feature_Filename_TUI_DB ].BranchList_Load_ManagedProperty_Category( l.type, l.cat_id, l.branches ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Branch_Category( l.branch:id, l.type, l.cat_id, l.managedproperty ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Push_WorkingBranchStack( l.branch ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT TemplateManager_Delete_ManagedProperty( l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.working_branch_id NE l.branch:id }">
			<MvIF EXPR = "{ NOT TemplateManager_Pop_WorkingBranchStack() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Purge_ManagedProperty" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.managedproperty:templ_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.managedproperty:templ_id, l.managedtemplate ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Purge( l.managedtemplate ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedProperty_Purge( l.managedproperty ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ManagedProperty_SettingsAndImage" PARAMETERS = "settings var, image_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.return:_settings_and_image" VALUE = 1>
	<MvASSIGN NAME = "l.return:settings" 			VALUE = "{ l.settings }">
	<MvASSIGN NAME = "l.return:image_id" 			VALUE = "{ l.image_id }">

	<MvFUNCTIONRETURN VALUE = "{ l.return }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_ManagedProperty_IsSettingsAndImage" PARAMETERS = "settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.settings:_settings_and_image EQ 1 }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Immutable_ManagedPropertyVersion" PARAMETERS = "managedproperty var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.version:prop_id"		VALUE = "{ l.managedproperty:id }">
	<MvASSIGN NAME = "l.version:user_id"		VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.version:type"			VALUE = "{ l.managedproperty:type }">
	<MvASSIGN NAME = "l.version:code"			VALUE = "{ l.managedproperty:code }">
	<MvASSIGN NAME = "l.version:product_id"		VALUE = "{ l.managedproperty:product_id }">
	<MvASSIGN NAME = "l.version:cat_id"			VALUE = "{ l.managedproperty:cat_id }">
	<MvASSIGN NAME = "l.version:immutable"		VALUE = 1>

	<MvIF EXPR = "{ NOT TemplateManager_ManagedProperty_IsSettingsAndImage( l.settings ) }">
		<MvASSIGN NAME = "l.version:settings"	VALUE = "{ l.settings }">
		<MvASSIGN NAME = "l.version:image_id" 	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.version:settings" 	VALUE = "{ l.settings:settings }">
		<MvASSIGN NAME = "l.version:image_id" 	VALUE = "{ l.settings:image_id }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedPropertyVersion_LowLevel( l.managedproperty, l.version ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedPropertyVersion" PARAMETERS = "managedproperty var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.version:prop_id"		VALUE = "{ l.managedproperty:id }">
	<MvASSIGN NAME = "l.version:user_id"		VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.version:type"			VALUE = "{ l.managedproperty:type }">
	<MvASSIGN NAME = "l.version:code"			VALUE = "{ l.managedproperty:code }">
	<MvASSIGN NAME = "l.version:product_id"		VALUE = "{ l.managedproperty:product_id }">
	<MvASSIGN NAME = "l.version:cat_id"			VALUE = "{ l.managedproperty:cat_id }">
	<MvASSIGN NAME = "l.version:immutable"		VALUE = 0>

	<MvIF EXPR = "{ NOT TemplateManager_ManagedProperty_IsSettingsAndImage( l.settings ) }">
		<MvASSIGN NAME = "l.version:settings"	VALUE = "{ l.settings }">
		<MvASSIGN NAME = "l.version:image_id" 	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.version:settings" 	VALUE = "{ l.settings:settings }">
		<MvASSIGN NAME = "l.version:image_id" 	VALUE = "{ l.settings:image_id }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedPropertyVersion_LowLevel( l.managedproperty, l.version ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedPropertyVersion_LowLevel" PARAMETERS = "managedproperty var, version var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedPropertyVersion_Branch_LowLevel( TemplateManager_Working_Branch_ID(), l.managedproperty, l.version ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_ManagedPropertyVersion_Branch_LowLevel" PARAMETERS = "branch_id, managedproperty var, version var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyVersion_Insert( l.version ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Check to see if the managedproperty contains the original version information. If not, then we need to load 
	| the original head version before we update it so we can handle image references properly.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ miva_member_exists( l.managedproperty, 'version' ) }">
		<MvREFERENCE NAME = "l.original_version" VARIABLE = "l.managedproperty:version">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyVersion_Load_Branch_Head( l.branch_id, l.managedproperty:id, l.original_version ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Insert( l.branch_id, l.managedproperty:id, l.version:id ) OR
					NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyBranchVersion_Update_Head( l.branch_id, l.managedproperty:id, l.version:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.managedproperty:current_id }">	<MvASSIGN NAME = "l.old_id"	VALUE = 0>
	<MvELSE>												<MvASSIGN NAME = "l.old_id"	VALUE = "{ l.managedproperty:current_id }">
	</MvIF>

	<MvIF EXPR = "{ l.version:product_id }">	<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.version:type $ '\', product ' $ l.version:product_id $ ' updated' }">
	<MvELSEIF EXPR = "{ l.version:cat_id }">	<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.version:type $ '\', category ' $ l.version:cat_id $ ' updated' }">
	<MvELSE>									<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.version:type $ '\', code \'' $ l.version:code $ '\' updated' }">											
	</MvIF>

	<MvIF EXPR = "{ NOT TemplateManager_Changeset_Record_ManagedPropertyVersion( l.managedproperty:id, l.old_id, l.version:id, l.note ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.managedproperty:current_id" VALUE = "{ l.version:id }">

	<MvCOMMENT>
	|
	| Decrement the previous image count if it changed and the head count is 1 (the only reference for this version)
	| Decrement the previous image head count if it changed, regardless of head count
	| Increment the image count and head count of the new version if it is new or it differs from the current
	|
	| Note that we are intentionally decrementing and then incrementing if source / destination 
	| image ids are the same so that the property version id is correctly tracked
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.original_version:original_image_id }">
		<MvIF EXPR = "{ l.original_version:image:head_count EQ 1 }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Decrement_RefCount( l.original_version:original_image_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyImageReference_Decrement_HeadCount( l.original_version:id, l.original_version:original_image_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.version:image_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Increment_RefCount( l.version:image_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedPropertyImageReference_InsertOrIncrement( l.managedproperty:id, l.version:id, l.version:image_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Create_Property_ManagedTemplateVersion" PARAMETERS = "managedproperty var, source var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.managedtemplate"				VALUE = "">

	<MvIF EXPR = "{ l.managedproperty:templ_id }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.managedproperty:templ_id, l.managedtemplate ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00064', 'Managed template for property not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.managedproperty:product_id }">	<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.managedproperty:type $ '\', product ' $ l.managedproperty:product_id $ ' template updated' }">
		<MvELSEIF EXPR = "{ l.managedproperty:cat_id }">	<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.managedproperty:type $ '\', category ' $ l.managedproperty:cat_id $ ' template updated' }">
		<MvELSE>											<MvASSIGN NAME = "l.note" VALUE = "{ 'Managed Property type \'' $ l.managedproperty:type $ '\', code \'' $ l.managedproperty:code $ '\' template updated' }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Create_ManagedTemplateVersion( l.managedtemplate, l.note, l.source, l.null, l.compile_error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.managedtemplate:sync"			VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:current_id"		VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:page_id"		VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:item_id"		VALUE = 0>
	<MvASSIGN NAME = "l.managedtemplate:prop_id"		VALUE = "{ l.managedproperty:id }">

	<MvASSIGN NAME = "l.filename"						VALUE = "{ TemplateManager_ManagedProperty_TemplateFile( l.managedproperty ) }">
	<MvASSIGN NAME = "l.managedtemplate:filename"		VALUE = "{ [ g.Feature_Filename_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( l.filename ) }">

	<MvIF EXPR = "{ NOT TemplateManager_Create_ManagedTemplate_LowLevel( l.managedtemplate, l.source, l.null ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.managedproperty:templ_id"		VALUE = "{ l.managedtemplate:id }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Feature_Filename_TUI_DB ].ManagedProperty_Update( l.managedproperty ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Output_Header" PARAMETERS = "name, value" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( l.name, l.value ) }">

	<MvASSIGN NAME = "g.Session:headers" MEMBER = "{ l.name }" VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Cached" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.Session:cache:page_cache:capturing }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Cache_Disable" PARAMETERS = "reason" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Session:cache:page_cache:capturing"	VALUE = 0>
	<MvASSIGN NAME = "g.Session:cache:page_cache:aborted"	VALUE = "{ l.reason }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Page_Fields_Propagate" PARAMETERS = "page_id, previous_version_id, new_version_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( l.previous_version_id LE 0 ) OR ( l.new_version_id LE 0 ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'fields_page', l.modules ) }">
		<MvIF EXPR = "{ l.module:api_ver GE 10.08 }">
			<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].Module_Page_Fields_Propagate( l.module, l.page_id, l.previous_version_id, l.new_version_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Cache
|
</MvCOMMENT>

<MvFUNCTION NAME = "TemplateManager_Cache_Page" PARAMETERS = "page var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.page:cache EQ 'always' }">			<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.page:cache EQ 'never' }">			<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ l.page:cache EQ 'provisional' }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Basket_Is_Provisional( g.Basket ) }">
	</MvIF>

	<MvASSIGN NAME = "l.empty" VALUE = "{ [ g.Module_Library_DB ].Basket_Is_Empty( g.Basket ) }">

	<MvIF EXPR = "{ l.page:cache EQ 'allempty' }">			<MvFUNCTIONRETURN VALUE = "{ l.empty }">
	<MvELSEIF EXPR = "{ l.page:cache EQ 'anonempty' }">		<MvFUNCTIONRETURN VALUE = "{ l.empty AND ( g.Basket:cust_id EQ 0 ) }">
	<MvELSE>												<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Cache_Connect" PARAMETERS = "conn_id var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Store:cache_type EQ 'redis' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_CHE_UT ].Cache_Redis_Connect( g.Store:redishost, g.Store:redisport, g.Store:redisto, [ g.Module_Library_Crypto ].Decrypt_Payment_Password( g.Store:redispwd ), l.conn_id ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Cache_Disconnect" PARAMETERS = "conn_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Store:cache_type EQ 'redis' }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_CHE_UT ].Cache_Redis_Disconnect( l.conn_id ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Cache_Get_Page" PARAMETERS = "conn_id, cache_key, cache var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.cache"			VALUE = "">
	<MvASSIGN NAME = "l.cache:headers"	VALUE = "">
	<MvASSIGN NAME = "l.cache:html"		VALUE = "">

	<MvCOMMENT>
	|
	| Cache managers will return the following:
	|	-1: The cache_key does not exist and the cache structure is not populated
	|	 0: An error has occurred within the cache
	|	 1: The cache_key does exist and the cache structure is populated
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.result"			VALUE = 0>

	<MvIF EXPR = "{ g.Store:cache_type EQ 'redis' }">
		<MvASSIGN NAME = "l.result"		VALUE = "{ TemplateManager_Cache_Redis_Get_Page( l.conn_id, l.cache_key, l.cache ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Convert the cache result to a 1/0 and ignore all errors as we don't want
	| to bubble up any cache errors.  -1/0 will cause the page to be fully rendered.
	|
	</MvCOMMENT>

	<MvFUNCTIONRETURN VALUE = "{ l.result EQ 1 }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Cache_Set_Page" PARAMETERS = "conn_id, cache_key, headers var, html var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Store:cache_type EQ 'redis' }">
		<MvFUNCTIONRETURN VALUE = "{ TemplateManager_Cache_Redis_Set_Page( l.conn_id, l.cache_key, l.headers, l.html ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManger_Cache_Page_Stats" PARAMETERS = "conn_id, stats var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.stats"			VALUE = "">
	<MvASSIGN NAME = "l.stats:hits"		VALUE = 0>
	<MvASSIGN NAME = "l.stats:misses"	VALUE = 0>

	<MvIF EXPR = "{ g.Store:cache_type EQ 'redis' }">
		<MvASSIGN NAME = "l.key"		VALUE = "{ TemplateManager_Cache_Redis_Page_Cache_Stats_Key() }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_CHE_UT ].Cache_Redis_Hash_Get_All_Mapped( l.conn_id, l.key, l.output )  }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-MGR-00084', 'Unsupported cache type' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.stats:hits"		VALUE = "{ int( l.output:hits ) }">
	<MvASSIGN NAME = "l.stats:misses"	VALUE = "{ int( l.output:misses ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Redis Cache
|
</MvCOMMENT>

<MvFUNCTION NAME = "TemplateManager_Cache_Redis_Get_Page" PARAMETERS = "conn_id, cache_key, cache var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Cache_Redis_Get_Page_Load_LUA( l.sha1, l.script ) }">

	<MvASSIGN NAME = "l.keys"	VALUE = "">
	<MvASSIGN NAME = "l.args"	VALUE = "">

	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, 'page_cache:' $ l.cache_key,							-1 ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, 'headers',											-1 ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, 'html',												-1 ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, 'compression',										-1 ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, TemplateManager_Cache_Redis_Page_Cache_Stats_Key(),	-1 ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.keys, 'hits',												-1 ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_CHE_UT ].Cache_Redis_Load_And_Execute_LUA_Array( l.conn_id, l.sha1, l.script, l.keys, l.args, l.data, l.null ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| No cache entry exists, the page needs to be fully rendered
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.data[ 1 ] EQ 0 }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvCOMMENT>
	|
	| Cache entry does exist, map the output
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.cache"			VALUE = "">
	<MvASSIGN NAME = "l.cache:headers" 	VALUE = "{ miva_array_deserialize( l.data[ 2 ] ) }">
	<MvASSIGN NAME = "l.cache:html" 	VALUE = "">

	<MvREFERENCEARRAY NAME = "l.html" VARIABLE = "l.data">
		<MvDIMENSION INDEX = 3>
	</MvREFERENCEARRAY>

	<MvASSIGN NAME = "l.compression" 	VALUE = "{ l.data[ 4 ] }">

	<MvIF EXPR = "{ ISNULL l.compression }">
		<MvREFERENCE NAME = "l.cache:html" VARIABLE = "l.html">
	<MvELSEIF EXPR = "{ l.compression EQ 'bzip2' }">
		<MvIF EXPR = "{ NOT bzip2_decompress( l.html, l.cache:html ) }">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Cache_Redis_Set_Page" PARAMETERS = "conn_id, cache_key, headers var, html var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ TemplateManager_Cache_Redis_Set_Page_Load_LUAScript( l.sha1, l.script ) }">

	<MvASSIGN NAME = "l.keys"				VALUE = "">
	<MvASSIGN NAME = "l.args"				VALUE = "">

	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, 'page_cache:' $ l.cache_key,							-1 ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, 'headers',											-1 ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, 'html',												-1 ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, 'compression',										-1 ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, TemplateManager_Cache_Redis_Page_Cache_Stats_Key(),	-1 ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.keys, 'misses',												-1 ) }">

	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert_ref( l.args, miva_array_serialize( l.headers ),				-1 ) }">

	<MvASSIGN NAME = "l.compressed" 		VALUE = 0>

	<MvIF EXPR = "{ g.Store:cache_comp }">
		<MvASSIGN NAME = "l.compressed" 	VALUE = "{ bzip2_compress( l.html, 1, l.html_compressed ) }">
	</MvIF>

	<MvIF EXPR = "{ l.compressed }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert_ref( l.args, l.html_compressed,	-1 ) }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert( l.args, 'bzip2',					-1 ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert_ref( l.args, l.html,				-1 ) }">
		<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert( l.args, '',						-1 ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert_var( l.args, g.Store:redisex,		-1 ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_CHE_UT ].Cache_Redis_Load_And_Execute_LUA( l.conn_id, l.sha1, l.script, l.keys, l.args, l.null ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Cache_Redis_Page_Cache_Stats_Key" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'page_cache_stats:' $ g.Store:id }">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Cache_Redis_Get_Page_Load_LUA" PARAMETERS = "sha1 var, script var" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "features/tui/redispageget_lua.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Cache_Redis_Set_Page_Load_LUAScript" PARAMETERS = "sha1 var, script var" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "features/tui/redispageset_lua.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Session_Recycle_Recommended" STANDARDOUTPUTLEVEL = "">
<MvFUNCTIONRETURN VALUE = "{ ( ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) ) OR ( ( s.dyn_time_t - s.time_t ) GT 30 ) }">
</MvFUNCTION>
