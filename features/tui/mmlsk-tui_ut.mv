<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2025 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-TUI-UT-
| Next Error Code: 94   
|
</MvCOMMENT>

<MvFUNCTION NAME = "SKIN_Directory_Delete" PARAMETERS = "skin_dir" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.file_count" VALUE = "{ dir( l.skin_dir, 'script', l.files ) }">
	<MvASSIGN NAME = "l.file_pos"   VALUE = 1>

	<MvWHILE EXPR = "{ l.file_pos LE l.file_count }">
		<MvASSIGN NAME = "l.file"   VALUE = "{ l.files[ l.file_pos ] }">
		<MvIF EXPR = "{ ( l.file NE '.' AND l.file NE '..' ) }">
		    <MvIF EXPR = "{ sisdir( l.skin_dir $ l.file ) }">
			<MvASSIGN NAME = "l.null"   VALUE = "{ SKIN_Directory_Delete( l.skin_dir $ l.file $ '/' ) }">
		    </MvIF>

		    <MvASSIGN NAME = "l.null"   VALUE = "{ sdelete( l.skin_dir $ l.file ) }">
		</MvIF>

		<MvASSIGN NAME = "l.file_pos"   VALUE = "{ l.file_pos + 1 }">
	</MvWHILE>

	<MvASSIGN NAME = "l.null"	value = "{ sdelete( l.skin_dir ) }">

</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Cleanup" PARAMETERS = "skin_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT SKIN_Directory_Verify( l.skin_code, l.skin_dir , l.skin_file ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( ISNULL l.skin_dir ) OR ( l.skin_dir EQ '/' ) OR ( l.skin_dir EQ '.' ) OR ( l.skin_dir EQ '..' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.null"	VALUE = "{ SKIN_Directory_Delete( l.skin_dir ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
|	SKIN_Install
|
</MvCOMMENT>

<MvFUNCTION NAME = "SKIN_Install" PARAMETERS = "store_code, skin_code, overwrite_extfile_okay, execute_configuration" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.okay"	VALUE = 1>
	<MvIF EXPR = "{ l.store_code NE g.Store:code }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Open( l.store_code, l.store ) }">
			<MvASSIGN NAME = "l.okay"	VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Capture_External_Modification_All_CSSResource() OR
					NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Capture_External_Modification_All_JavaScriptResource() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.okay }">
		<MvASSIGN NAME = "l.okay"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_Begin( 'Framework \'' $ l.skin_code $ '\'' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.okay }">
		<MvASSIGN NAME = "l.okay"	VALUE = "{ _SKIN_Install( l.store_code, l.skin_code, l.overwrite_extfile_okay, l.execute_configuration ) }">
		<MvASSIGN NAME = "l.okay"	VALUE = "{ l.okay AND [ g.Feature_Filename_TUI_MGR ].TemplateManager_Changeset_End() }">
	</MvIF>

	<MvIF EXPR = "{ l.okay }">	
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00041', 'Framework \'' $ l.skin_code $ '\' installed' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"	VALUE = "{ SKIN_Cleanup( l.skin_code ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.okay }">
</MvFUNCTION>
	
<MvFUNCTION NAME = "_SKIN_Install" PARAMETERS = "store_code, skin_code, overwrite_extfile_okay, execute_configuration" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT SKIN_Directory_Verify( l.skin_code, l.skin_dir, l.skin_file ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.overwrite_count" VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].SKIN_Load_Code( l.skin_code, l.skin ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Unpack( l.skin_code, l.control ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Validate( l.store_code, l.skin_code, l.control, l.skin_dir ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Install_Pages( l.store_code, l.skin_code, l.control, l.skin_dir ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Install_ExternalFiles( l.control:SKINFile:tags:ExternalFiles[ 1 ]:tags:File, l.skin_dir, l.control:SKINFile:tags:File_Base[ 1 ]:Value, l.overwrite_extfile_okay ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Install_Resources( l.control ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Install_Fonts( l.control ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Install_Theme( l.control ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Install_CSS_Files( l.skin_code, l.control, l.skin_dir, l.overwrite_extfile_okay ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Install_Images( l.control:SKINFile:tags:ImageList[ 1 ]:tags:Image, l.skin_dir, l.control:SKINFile:tags:Image_Base[ 1 ]:Value, l.overwrite_extfile_okay ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Install_Components( l.store_code, l.skin_code, l.control, l.skin_dir ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.execute_configuration }">
		<MvREFERENCE NAME = "l.config"				VARIABLE = "l.control:SKINFile:tags:Config[ 1 ]">

		<MvIF EXPR = "{ miva_array_elements( l.config:children ) }">
			<MvASSIGN NAME = "l.saved_log"				VALUE = "{ g.PRV_log_file_name }">
			<MvASSIGN NAME = "g.PRV_log_file_name"		VALUE = "SKIN-install.log">
			<MvASSIGN NAME = "l.config:attribute:code"	VALUE = "{ l.store_code }">

			<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store( l.config ) }">
			<MvASSIGN NAME = "g.PRV_log_file_name"		VALUE = "{ l.saved_log }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.skin:applied_dt" VALUE = "{ s.time_t }">
	
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].SKIN_Update( l.skin ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ miva_array_elements( l.control:SKINFile:tags:RegisterStoreFramework ) }">
		<MvIF EXPR = "{ l.store_code EQ g.Store:code }">
			<MvASSIGN NAME = "g.Store:framework"		VALUE = "{ l.skin_code }">
			<MvASSIGN NAME = "g.Store_Framework_Inuse"	VALUE = "{ l.skin_code }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_Framework( g.Store ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ [ g.Module_Library_DB ].Store_Load_Code( l.store_code, l.store ) }">
			<MvASSIGN NAME = "l.store:framework"		VALUE = "{ l.skin_code }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Store_Update_Framework( l.store ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_ExternalFiles" PARAMETERS = "files var, SKIN_dir, file_base, overwrite_okay" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.basehref"					VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_Basehref_Path() }">
	<MvASSIGN NAME = "l.basehref"					VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_SanitizeAndStripLeadingTrailingSlashes_Path( l.basehref ) }">

	<MvFOREACH ITERATOR = "l.file" ARRAY = "l.files">
		<MvREFERENCE NAME = "l.file_name"			VARIABLE = "l.file:tags:Name[ 1 ]:Value">
		<MvREFERENCE NAME = "l.file_target"			VARIABLE = "l.file:tags:Target[ 1 ]:Value">

		<MvIF EXPR = "{ ISNULL l.file_target }">
			<MvASSIGN NAME = "l.file_target"		VALUE = "{ l.file_name }">
		</MvIF>

		<MvCOMMENT>
		|
		|	If the source path has a leading slash, then don't prepend the file_base.  This file will be
		|   located outside of the file_base folder.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ substring_var( l.file_name, 1, 1 ) EQ '/' }">
			<MvASSIGN NAME = "l.file_source"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.SKIN_dir, l.file_name ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.file_source"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.SKIN_dir, l.file_base ) }">
			<MvASSIGN NAME = "l.file_source"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.file_source, l.file_name ) }">
		</MvIF>

		<MvCOMMENT>
		|
		|	If the target path does not have a leading slash, then prepend the file_root.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ substring_var( l.file_target, 1, 1 ) NE '/' }">
			<MvASSIGN NAME = "l.file_target"		VALUE = "{ g.fileroot $ l.file_target }">
		</MvIF>

		<MvIF EXPR = "{ sexists( l.file_target ) }">
			<MvASSIGN NAME = "l.overwrite_count"	VALUE = "{ l.overwrite_count + 1 }">
		</MvIF>

		<MvASSIGN NAME = "l.external_file:name"				VALUE = "{ l.file_name }">
		<MvASSIGN NAME = "l.external_file:source"			VALUE = "{ l.file_source }">
		<MvASSIGN NAME = "l.external_file:target"			VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.file_target ) }">
		<MvASSIGN NAME = "l.external_file:add_image" 		VALUE = "{ NOT ISNULL l.file:tags:AddImage }">
		<MvASSIGN NAME = "l.external_file:generated_image" 	VALUE = "">

		<MvIF EXPR = "{ NOT ISNULL l.file:tags:GeneratedImage }">
			<MvASSIGN NAME = "l.external_file:generated_image:source"	VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.file:tags:GeneratedImage[ 1 ]:tags:Source[ 1 ]:Value ) }">
			<MvASSIGN NAME = "l.external_file:generated_image:width" 	VALUE = "{ l.file:tags:GeneratedImage[ 1 ]:tags:Width[ 1 ]:Value }">
			<MvASSIGN NAME = "l.external_file:generated_image:height" 	VALUE = "{ l.file:tags:GeneratedImage[ 1 ]:tags:Height[ 1 ]:Value }">
		</MvIF>

		<MvASSIGN NAME = "l.filelist_count"			VALUE = "{ miva_array_insert( l.filelist, l.external_file, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.overwrite_count AND NOT l.overwrite_okay }">
		<MvIF EXPR = "{ l.overwrite_count GT 1 }">
			<MvASSIGN NAME = "l.s"	VALUE = "s">
		</MvIF>
		
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00048', l.overwrite_count $ ' file' $ l.s $ ' already exist' ) }">
	</MvIF>

	<MvCOMMENT>
	|	We cannot rely on TemplateManager_Import_Page to deploy our files, as it 
	|	will not handle files that are not currently listed in any pages (optional 
	|	graphics that are deployed with a skin, for example).
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.file" ARRAY = "l.filelist" COUNT = "{ l.filelist_count }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_ImportDest_Path( l.file:target, 0, '0755' ) }"> 
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00049', g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ ( '.css' CIN l.file:source ) NE ( len_var( l.file:source ) - 3 ) }">
			<MvIF EXPR = "{ NOT scopy( l.file:source, l.file:target ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00050', 'Failed to copy ' $ l.file:name $ ' to ' $ l.file:target $ ': ' $ file_last_error() ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ file_read( l.file:source, 'script', l.css_source ) EQ -1 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00051', 'Unable to read file ' $ l.file:name $ ': ' $ file_last_error() ) }">
			</MvIF>

			<MvASSIGN NAME = "l.css_source"	VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.css_source ) }">
			<MvASSIGN NAME = "l.null" 		VALUE = "{ sdelete( l.file:target ) }">

			<MvIF EXPR = "{ file_create( l.file:target, 'script', l.css_source ) EQ -1 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00052', 'Failed to create file ' $ l.file:target $ ': ' $ file_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT schmod( l.file:target, '0644' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00053', 'Failed to set file protections on ' $ l.file:name $ ': ' $ file_last_error() ) }">
		</MvIF>

		<MvIF EXPR = "{ l.file:add_image }">
			<MvASSIGN NAME = "l.file_target" VALUE = "{ ImageFilePath_StripImageRoot( l.file:target ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_FindOrInsert_ExistingFile( l.file_target, l.image ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Now re-iterate and process generated images
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.file" ARRAY = "l.filelist" COUNT = "{ l.filelist_count }">
		<MvIF EXPR = "{ NOT ISNULL l.file:generated_image }">
			<MvASSIGN NAME = "l.file_target"	VALUE = "{ ImageFilePath_StripImageRoot( l.file:target ) }">
			<MvASSIGN NAME = "l.source"			VALUE = "{ ImageFilePath_StripImageRoot( l.file:generated_image:source ) }">

			<MvIF EXPR = "{ [ g.Module_Library_DB ].GeneratedImage_Load_File( l.file_target, l.existing_generatedimage ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_File( l.source, l.image ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.generatedimage:image_id" 	VALUE = "{ l.image:id }">
			<MvASSIGN NAME = "l.generatedimage:image" 		VALUE = "{ l.file_target }">
			<MvASSIGN NAME = "l.generatedimage:width" 		VALUE = "{ l.file:generated_image:width }">
			<MvASSIGN NAME = "l.generatedimage:height" 		VALUE = "{ l.file:generated_image:height }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GeneratedImage_Insert_LowLevel( l.generatedimage ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_Images" PARAMETERS = "images VAR, SKIN_dir, image_base, overwrite_okay" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.count"						VALUE = "{ miva_array_elements( l.images ) }">
	<MvASSIGN NAME = "l.pos"						VALUE = 1>
	<MvASSIGN NAME = "l.basehref"					VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_Basehref_Path() }">
	<MvASSIGN NAME = "l.basehref"					VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_SanitizeAndStripLeadingTrailingSlashes_Path( l.basehref ) }">

	<MvWHILE EXPR = "{ l.pos LE l.count }">
		<MvREFERENCE NAME = "l.image"				VARIABLE = "{ 'l.images[' $ l.pos $ ']' }">
		<MvREFERENCE NAME = "l.image_name"			VARIABLE = "l.image:tags:Name[ 1 ]:Value">
		<MvREFERENCE NAME = "l.image_target"		VARIABLE = "l.image:tags:Target[ 1 ]:Value">

		<MvIF EXPR = "{ ISNULL l.image_target }">
			<MvASSIGN NAME = "l.image_target"		VALUE = "{ l.image_name }">
		</MvIF>

		<MvCOMMENT>
		|
		|	If the source path has a leading slash, then don't prepend the image_base.  This image will be
		|   located outside of the image_base folder.
		|
		</MvCOMMENT>
		<MvIF EXPR = "{ substring( l.image_target, 1, 1 ) EQ '/' }">
			<MvASSIGN NAME = "l.image_source"		VALUE = "{ l.SKIN_dir $ 'images' $ l.image_target }">
		<MvELSE>
			<MvASSIGN NAME = "l.image_source"		VALUE = "{ l.SKIN_dir $ 'images' $ l.image_base $ l.image_target }">
		</MvIF>

		<MvCOMMENT>
		|
		|	If the target path does not have a leading slash, then prepend the image_root.
		|
		</MvCOMMENT>
		<MvIF EXPR = "{ substring( l.image_target, 1, 1 ) NE '/' }">
			<MvASSIGN NAME = "l.image_target"		VALUE = "{ g.imageroot $ l.image_target }">
		</MvIF>

		<MvIF EXPR = "{ sexists( l.image_target ) }">
			<MvASSIGN NAME = "l.overwrite_count"	VALUE = "{ l.overwrite_count + 1 }">
		</MvIF>

		<MvASSIGN NAME = "l.imagelist"	INDEX = "{ l.pos }"	MEMBER = "name"		VALUE = "{ l.image_name }">
		<MvASSIGN NAME = "l.imagelist"	INDEX = "{ l.pos }"	MEMBER = "source"	VALUE = "{ l.image_source }">
		<MvASSIGN NAME = "l.imagelist"	INDEX = "{ l.pos }"	MEMBER = "target"	VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.image_target ) }">

		<MvASSIGN NAME = "l.pos"	VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ l.overwrite_count AND NOT l.overwrite_okay }">
		<MvIF EXPR = "{ l.overwrite_count GT 1 }">
			<MvASSIGN NAME = "l.s"	VALUE = "s">
		</MvIF>
		
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00005', l.overwrite_count $ ' image' $ l.s $ ' already exist' ) }">
	</MvIF>

	<MvCOMMENT>
	|	We cannot rely on TemplateManager_Import_Page to deploy our images, as it 
	|	will not handle images that are not currently listed in any pages (optional 
	|	graphics that are deployed with a skin, for example).
	</MvCOMMENT>

	<MvASSIGN NAME = "l.pos"	VALUE = 1>
	<MvWHILE EXPR = "{ l.pos LE l.count }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_ImportDest_Path( l.imagelist[ l.pos ]:target, 0, '0755' ) }"> 
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00006', g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT scopy( l.imagelist[ l.pos ]:source, l.imagelist[ l.pos ]:target ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00007', 'Failed to copy ' $ l.imagelist[ l.pos ]:name $ ' to ' $ l.imagelist[ l.pos ]:target $ ': ' $ file_last_error() ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT schmod( l.imagelist[ l.pos ]:target, '0644' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00008', 'Failed to set image protections on ' $ l.imagelist[ l.pos ]:name $ ': ' $ file_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.pos"	VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Validate" PARAMETERS = "store_code, skin_code, control VAR, SKIN_dir" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCE NAME = "l.framework_ui_code"			VARIABLE = "l.control:SKINFile:tags:UIModuleCode[ 1 ]:value">
	<MvREFERENCE NAME = "l.minimum_merchant_version"	VARIABLE = "l.control:SKINFile:tags:MinimumMerchantVersion[ 1 ]:value">
	<MvREFERENCE NAME = "l.minimum_mivascript_version"	VARIABLE = "l.control:SKINFile:tags:MinimumMivaScriptVersion[ 1 ]:value">
	<MvREFERENCE NAME = "l.items"						VARIABLE = "l.control:SKINFile:tags:RequiredItemList[ 1 ]:tags:Item">

	<MvCOMMENT>
	|
	| Instead of stripping the '.' we are replacing the '.' with '0' to give respective integer
	| values to the versions so that anything above 10.00.00 can be compared with values such as 9.00065
	| and still return as a higher value.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.new_version_num" VALUE = "{ int( glosub( g.Merchant_Version, '.', '0' ) ) }">
	<MvASSIGN NAME = "l.min_version_num" VALUE = "{ int( glosub( l.minimum_merchant_version, '.', '0' ) ) }">
	
	<MvIF EXPR = "{ g.Store:ui_mod:code EQ 'cssui' }">
		<MvIF EXPR = "{ l.framework_ui_code NE 'cssui' }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00039', 'UI module mismatch' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ len( l.framework_ui_code ) GT 0 AND
						g.Store:ui_mod:code NE l.framework_ui_code }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00040', 'UI module mismatch' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( NOT ISNULL l.minimum_merchant_version ) AND ( l.new_version_num LT l.min_version_num ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00046', 'Framework \'' $ l.skin_code $ '\' requires Miva Merchant v' $ l.minimum_merchant_version $ ' or newer.  This installation of Miva Merchant is running v' $ g.Merchant_Version $ '.' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( NOT ISNULL l.minimum_mivascript_version ) AND ( s.mivaversion LT l.minimum_mivascript_version ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00047', 'Framework \'' $ l.skin_code $ '\' requires MivaScript v' $ l.minimum_mivascript_version $ ' or newer.  This installation of Miva Merchant is running v' $ s.mivaversion $ '.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.pos"		VALUE = 1>
	<MvASSIGN NAME = "l.count"		VALUE = "{ miva_array_elements( l.items ) }">
	<MvWHILE EXPR = "{ l.pos LE l.count }">
		<MvREFERENCE NAME = "l.item"				VARIABLE = "{ 'l.items[' $ l.pos $ ']' }">
		<MvREFERENCE NAME = "l.item_code"			VARIABLE = "l.item:tags:Code[ 1 ]:Value">
		<MvREFERENCE NAME = "l.module_code"			VARIABLE = "l.item:tags:Module[ 1 ]:Value">
		<MvREFERENCE NAME = "l.extensions"			VARIABLE = "l.item:tags:Extensions[ 1 ]:tags:Extension">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code_Cached( l.module_code, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00022', 'Module \'' $ l.module_code $ '\' not found. This module is required by framework \'' $ l.skin_code $ '\'. Please add it to Miva Merchant and try again.' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_Code( l.item_code, l.item ) }">
			<MvASSIGN NAME = "l.item:code"			VALUE = "{ l.item_code }">
			<MvASSIGN NAME = "l.item:mod_code"		VALUE = "{ l.module:code }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_Item_LowLevel( l.item, l.module ) }">			
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ strcmp( l.item:mod_code, l.module:code ) NE 0 }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Update_Item( l.item, l.item:code, l.module ) }">			
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvFOREACH ITERATOR = "l.extension" ARRAY = "l.extensions">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code_Cached( l.extension:value, l.extension_module ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00058', 'Module Item Extension \'' $ l.extension:value $ '\' not found for item `' $ l.item_code $ '`. This module is required by framework \'' $ l.skin_code $ '\'. Please add it to Miva Merchant and try again.' ) }">
			<MvELSEIF EXPR = "{ NOT l.extension_module:active }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00059', 'Module \'' $ l.extension_module:name $ '\' is not currently active' ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Features_Cached( l.extension_module ) OR NOT l.extension_module:feature_hash:component }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00060', 'Module \'' $ l.extension_module:name $ '\' does not implement the component feature' ) }">
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Load( l.extension_module:id, 'component', l.storemodule ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Install( l.extension_module ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00061', 'Unable to install item extension module \'' $ l.extension_module:code $ '\' in store \'' $ g.Store:code $ '\'' ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ItemExtension_Load_ItemModuleCode( l.item:id, l.extension_module:code, l.extension ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_ItemExtension_LowLevel( l.item, l.extension_module ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.pos"	VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_Pages" PARAMETERS = "store_code, skin_code, control var, skin_dir" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.page" ARRAY = "l.control:SKINFile:tags:PageList[ 1 ]:tags:Page">
		<MvREFERENCE NAME = "l.page_code"		VARIABLE = "l.page:tags:Code[ 1 ]:value">
		<MvREFERENCE NAME = "l.page_source"		VARIABLE = "l.page:tags:Source[ 1 ]:value">

		<MvASSIGN NAME = "l.template_file" 		VALUE = "{ l.skin_dir $ 'pages/' $ l.page_source }">
		<MvASSIGN NAME = "l.null" 				VALUE = "{ file_read( l.template_file, 'script', l.template_source ) }">

		<MvASSIGN NAME = "l.basehref"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_Basehref_Path() }">
		<MvASSIGN NAME = "l.basehref"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_SanitizeAndStripLeadingTrailingSlashes_Path( l.basehref ) }">

		<MvASSIGN NAME = "l.template_source" 	VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.template_source ) }">

		<MvASSIGNARRAY NAME = "l.page"			VALUE = "{ l.template_source }">
			<MvMEMBER NAME = "tags">
			<MvMEMBER NAME = "Template">
			<MvDIMENSION INDEX = 1>
			<MvMEMBER NAME = "value">
		</MvASSIGNARRAY>

		<MvASSIGN NAME = "l.page_create"		VALUE = 1>
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Boolean( 'o', l.page, 'Create', l.page_create ) }">

		<MvCOMMENT>
		|
		| Use the existing Page_Add/Page_Update provisioning tags to handle page creation/update of base information
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.page_code, l.existing_page ) }">
			<MvASSIGN NAME = "l.page:attribute:code"	VALUE = "{ l.page:tags:Code[ 1 ]:value }">

			<MvASSIGNARRAY NAME = "l.page"				VALUE = "{ 'Updated by Framework \'' $ l.skin_code $ '\' on (' $ [ g.Module_Library_Utilities ].Format_Date( s.dyn_time_t, s.miva_language ) $ ' ' $ [ g.Module_Library_Utilities ].Format_Time( s.dyn_time_t, s.miva_language ) $ ')' }">
				<MvMEMBER NAME = "tags">
				<MvMEMBER NAME = "Notes">
				<MvDIMENSION INDEX = 1>
				<MvMEMBER NAME = "value">
			</MvASSIGNARRAY>

			<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_Page_Update( l.page ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT l.page_create }">
			<MvFOREACHCONTINUE>
		<MvELSE>
			<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_Page_Add( l.page ) }">
		</MvIF>

		<MvCOMMENT>
		|
		| Reload the page so that we operate with the most current information
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.page_code, l.existing_page ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFOREACH ITERATOR = "l.item" ARRAY = "l.page:tags:ItemList[ 1 ]:tags:Item">
			<MvREFERENCE NAME = "l.item_code"			VARIABLE = "l.item:Value">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Assign_Item( l.existing_page, l.item_code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Update( l.existing_page ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_Components" PARAMETERS = "store_code, skin_code, control VAR, skin_dir" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.component_dir"					VALUE = "{ l.skin_dir $ 'components/' }">
	<MvASSIGN NAME = "l.basehref"						VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_Basehref_Path() }">
	<MvASSIGN NAME = "l.basehref"						VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_SanitizeAndStripLeadingTrailingSlashes_Path( l.basehref ) }">
	<MvASSIGN NAME = "l.store_dir_prefix"				VALUE = "{ 's' $ padl( g.Store:id, 2, '0' ) $ '/' }">

	<MvIF EXPR = "{ NOT fexists( g.MerchantPath $ l.store_dir_prefix ) }">
		<MvIF EXPR = "{ NOT fmkdir( g.MerchantPath $ l.store_dir_prefix ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00043', 'Failed to create directory: ' $ g.MerchantPath $ l.store_dir_prefix $ ': ' $ file_last_error() ) }">	
		</MvIF>

		<MvASSIGN NAME = "l.null"						VALUE = "{ schmod( g.MerchantPath $ l.store_dir_prefix, '0755' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.component" ARRAY = "l.control:SKINFile:tags:ComponentList[ 1 ]:tags:Component">
		<MvREFERENCE NAME = "l.module_code"				VARIABLE = "l.component:tags:Code[ 1 ]:Value">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( l.module_code, l.module ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00030', 'Unable to load module \'' $ l.module_code $ '\'' ) }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ItemList_Load_Module_Code( l.module:code, l.items ) }">
			<MvASSIGN NAME = "l.output_fullpath"		VALUE = "{ l.component_dir $ l.item:code $ '.htm' }">
			<MvIF EXPR = "{ NOT sexists( l.output_fullpath ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.component_source"		VALUE = "">
			<MvASSIGN NAME = "l.new_path"				VALUE = "{ g.MerchantPath $ l.store_dir_prefix $ l.item:code $ '.htm' }">

			<MvIF EXPR = "{ NOT sfcopy( l.output_fullpath, l.new_path ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00044', 'Failed to copy component template ' $ l.module:code $ ': ' $ file_last_error() ) }">
			</MvIF>

			<MvASSIGN NAME = "l.size"					VALUE = "{ file_read( l.new_path, 'data', l.component_source ) }">
			
			<MvIF EXPR = "{ '#Set_Current_Time#' IN l.component_source }">
				<MvASSIGN NAME = "l.component_source"	VALUE = "{ glosub( l.component_source, '#Set_Current_Time#', 'Updated by Framework \'' $ l.skin_code $ '\' on ' $ [ g.Module_Library_Utilities ].Format_Date( s.dyn_time_t, s.miva_language ) $ ' ' $ [ g.Module_Library_Utilities ].Format_Time( s.dyn_time_t, s.miva_language ) ) }">
			</MvIF>

			<MvASSIGN NAME = "l.component_source"		VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.component_source ) }">

			<MvIF EXPR = "{ NOT SKIN_Install_One_Component( l.store_code, l.skin_code, l.skin_dir, l.module:code, l.component_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00031', 'Failed to install component ' $ l.module:code $ ': ' $ g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null"					VALUE = "{ fdelete( l.new_path ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_One_Component" PARAMETERS = "store_code, skin_code, SKIN_dir, component_code, component_settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.control_text"	VALUE = "{ '<Provision>' }">
	<MvASSIGN NAME = "l.control_text"	VALUE = "{ l.control_text $ '<Store code="' $ encodeentities( l.store_code ) $ '">'  }">

	<MvCOMMENT>
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.page:templ_id, l.template ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
	</MvCOMMENT>

	<MvCOMMENT>
	|
	| Create the provisioning code for the primary template for this page
	|
	</MvCOMMENT>

	<MvASSIGN NAME="l.control_text" VALUE="{ l.control_text $ l.component_settings  }">

	<MvCOMMENT>
	|
	| Export the control epilogue
	|
	</MvCOMMENT>

	<MvASSIGN NAME="l.control_text" VALUE="{ l.control_text $ '	</Store>'  }">
	<MvASSIGN NAME="l.control_text" VALUE="{ l.control_text $ '</Provision>' }">

	<MvASSIGN NAME="l.ok" VALUE="{ [ g.Module_Feature_PRV_AD ].PRV_Action_ProvisionStringData( l.control_text ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_CSS_Files" PARAMETERS = "skin_code, control var, skin_dir, overwrite_okay" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.basehref_path" 				VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_Basehref_Path() }">
	<MvASSIGN NAME = "l.basehref_stripped"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_SanitizeAndStripLeadingTrailingSlashes_Path( l.basehref_path ) }">
	<MvASSIGN NAME = "l.css_dir"					VALUE = "{ l.skin_dir }">
	<MvREFERENCE NAME = "l.css_files"				VARIABLE = "l.control:SKINFile:tags:CSSList[ 1 ]:tags:CSS">

	<MvASSIGN NAME = "l.count"						VALUE = "{ miva_array_elements( l.css_files ) }">
	<MvASSIGN NAME = "l.pos"						VALUE = 1>
	<MvWHILE EXPR = "{ l.pos LE l.count }">
		<MvREFERENCE NAME = "l.css_file"			VARIABLE = "{ 'l.css_files[' $ l.pos $ ']' }">
		<MvREFERENCE NAME = "l.file_target"			VARIABLE = "l.css_file:tags:File[ 1 ]:Value">

		<MvASSIGN NAME = "l.file_source"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.skin_dir, l.file_target ) }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_ExternalSource_SanitizeOutputPath( l.file_target, l.basehref_path, '', l.null, l.file_target ) }">
			<MvASSIGN NAME = "l.pos"				VALUE = "{ l.pos + 1 }">
			<MvWHILECONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.file_target"			VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.file_target ) }">

		<MvIF EXPR = "{ sexists( l.file_target ) }">
			<MvASSIGN NAME = "l.overwrite_count"	VALUE = "{ l.overwrite_count + 1 }">
		</MvIF>

		<MvASSIGN NAME = "l.csslist" INDEX = "{ l.pos }" MEMBER = "source" VALUE = "{ l.file_source }">
		<MvASSIGN NAME = "l.csslist" INDEX = "{ l.pos }" MEMBER = "target" VALUE = "{ l.file_target }">

		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ l.overwrite_count AND NOT l.overwrite_okay }">
		<MvIF EXPR = "{ l.overwrite_count GT 1 }">
			<MvASSIGN NAME = "l.s"	VALUE = "s">
		<MvELSE>
			<MvASSIGN NAME = "l.t"	VALUE = "s">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00032', l.overwrite_count $ ' css file' $ l.s $ ' already exist' $ l.t ) }">
	</MvIF>

	<MvIF EXPR = "{ l.count }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_Code( 'css_list', l.resourcegroup ) }">
			<MvASSIGN NAME = "l.resourcegroup:code" VALUE = "css_list">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Insert( l.resourcegroup ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.css" ARRAY = "l.csslist" COUNT = "{ l.count }">
		<MvASSIGN NAME = "l.size"				VALUE = "{ file_read( l.css:source, 'script', l.css_content ) }">
		<MvASSIGN NAME = "l.untokenized_css"	VALUE = "{ SKIN_Install_DetokenizePath( l.basehref_stripped, l.css_content ) }">

		<MvASSIGN NAME = "l.last_slash_pos"		VALUE = "{ indexofli( '/', l.css:target, len_var( l.css:target ) ) }">
		<MvASSIGN NAME = "l.target_path"		VALUE = "{ substring_var( l.css:target, 1, l.last_slash_pos ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.target_path ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.target_path, '0755' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( l.css:target ) }">

		<MvIF EXPR = "{ l.size GT 0 }">
			<MvIF EXPR = "{ file_create( l.css:target, 'script', l.untokenized_css ) LT 0 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00033', 'Failed to install ' $ l.css:source $ ' to ' $ l.css:target $ ': ' $ file_last_error() ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT schmod( l.css:target, '0644' ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00034', 'Failed to update file permissions on ' $ l.css:target $ ': ' $ file_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.file_path" VALUE = "{ substring_var( l.css:target, len_var( l.basehref_path ) + 1, len_var( l.css:target ) - len_var( l.base_href ) ) }">

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_File( l.file_path, l.cssresources ) }">
			<MvIF EXPR = "{ NOT GenerateUniqueCSSResourceCode_FromFilePath( l.file_path, l.code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Create_Type_LocalFile( l.code, l.null_attributes, 1, 1, l.file_path, l.cssresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
				
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXGroup_Insert( l.cssresource:id, l.resourcegroup:id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_Resources" PARAMETERS = "control var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.basehref"					VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_Basehref_Path() }">
	<MvASSIGN NAME = "l.basehref"					VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_SanitizeAndStripLeadingTrailingSlashes_Path( l.basehref ) }">
	<MvASSIGN NAME = "l.saved_log"					VALUE = "{ g.PRV_log_file_name }">
	<MvASSIGN NAME = "g.PRV_log_file_name"			VALUE = "SKIN-install.log">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.control:SKINFile:tags:Resources[ 1 ]:children">
		<MvASSIGN NAME = "l.name"					VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'cssresource_add' OR
						l.name EQ 'cssresource_update' OR
						l.name EQ 'javascriptresource_add' OR
						l.name EQ 'javascriptresource_update' }">
			<MvIF EXPR = "{ miva_member_exists( l.child_xml:tags, 'File_Path' ) }">
				<MvREFERENCEARRAY NAME = "l.file_path"	VARIABLE = "l.child_xml">
					<MvMEMBER NAME = "tags">
					<MvMEMBER NAME = "File_Path">
					<MvDIMENSION INDEX = 1>
					<MvMEMBER NAME = "value">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ NOT ISNULL l.file_path }">
					<MvASSIGN NAME = "l.file_path"		VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.file_path ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ miva_member_exists( l.child_xml:tags, 'Template' ) }">
				<MvREFERENCEARRAY NAME = "l.template" VARIABLE = "l.child_xml">
					<MvMEMBER NAME = "tags">
					<MvMEMBER NAME = "Template">
					<MvDIMENSION INDEX = 1>
					<MvMEMBER NAME = "value">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ NOT ISNULL l.template }">
					<MvASSIGN NAME = "l.template"		VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.template ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ miva_member_exists( l.child_xml:tags, 'Attributes' ) }">
				<MvREFERENCEARRAY NAME = "l.attributes"	VARIABLE = "l.child_xml">
					<MvMEMBER NAME = "tags">
					<MvMEMBER NAME = "Attributes">
					<MvDIMENSION INDEX = 1>
				</MvREFERENCEARRAY>

				<MvFOREACH ITERATOR = "l.attribute_xml" ARRAY = "l.attributes:children">
					<MvREFERENCEARRAY NAME = "l.value"	VARIABLE = "l.attribute_xml">
						<MvMEMBER NAME = "tags">
						<MvMEMBER NAME = "Value">
						<MvDIMENSION INDEX = 1>
						<MvMEMBER NAME = "value">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ NOT ISNULL l.value }">
						<MvASSIGN NAME = "l.value"		VALUE = "{ SKIN_Install_DetokenizePath( l.basehref, l.value ) }">
					</MvIF>
				</MvFOREACH>
			</MvIF>

			<MvIF EXPR = "{ l.name EQ 'cssresource_add' }">														<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResource_Add( l.child_xml ) }">
			<MvELSEIF EXPR = "{ l.name EQ 'cssresource_update' }">												<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResource_Update( l.child_xml ) }">
			<MvELSEIF EXPR = "{ l.name EQ 'javascriptresource_add' }">											<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResource_Add( l.child_xml ) }">
			<MvELSEIF EXPR = "{ l.name EQ 'javascriptresource_update' }">										<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResource_Update( l.child_xml ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.name EQ 'resourcegroup_add' }">													<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ResourceGroup_Add( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'resourcegroup_update' }">												<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ResourceGroup_Update( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'resourcegroup_delete' }">												<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ResourceGroup_Delete( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'resourcegroup_delete_all' }">											<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ResourceGroup_Delete_All( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresource_delete' }">													<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResource_Delete( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresource_delete_all' }">												<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResource_Delete_All( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexpage_assign' }">												<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResourceXPage_Assign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexpage_unassign' }">											<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResourceXPage_Unassign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexpage_unassign_all_resource' }">								<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResourceXPage_Unassign_All_Resource( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexgroup_assign' }">											<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResourceXGroup_Assign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexgroup_unassign' }">											<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResourceXGroup_Unassign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'cssresourcexgroup_unassign_all_group' }">								<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSResourceXGroup_Unassign_All_Group( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'csscombinedresourcexresource_assign' }">									<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSCombinedResourceXResource_Assign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'csscombinedresourcexresource_unassign' }">								<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSCombinedResourceXResource_Unassign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'csscombinedresourcexresource_unassign_all_combinedresource' }">			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_CSSCombinedResourceXResource_Unassign_All_CombinedResource( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresource_delete' }">											<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResource_Delete( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresource_delete_all' }">										<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResource_Delete_All( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexpage_assign' }">										<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResourceXPage_Assign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexpage_unassign' }">									<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResourceXPage_Unassign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexpage_unassign_all_resource' }">						<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResourceXPage_Unassign_All_Resource( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexgroup_assign' }">										<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResourceXGroup_Assign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexgroup_unassign' }">									<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResourceXGroup_Unassign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptresourcexgroup_unassign_all_group' }">							<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptResourceXGroup_Unassign_All_Group( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptcombinedresourcexresource_assign' }">							<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptCombinedResourceXResource_Assign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptcombinedresourcexresource_unassign' }">						<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptCombinedResourceXResource_Unassign( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'javascriptcombinedresourcexresource_unassign_all_combinedresource' }">	<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_JavaScriptCombinedResourceXResource_Unassign_All_CombinedResource( l.child_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "g.PRV_log_file_name" VALUE = "{ l.saved_log }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_Fonts" PARAMETERS = "control var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.saved_log"			VALUE = "{ g.PRV_log_file_name }">
	<MvASSIGN NAME = "g.PRV_log_file_name"	VALUE = "SKIN-install.log">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.control:SKINFile:tags:Fonts[ 1 ]:children">
		<MvASSIGN NAME = "l.name"			VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'font_add' }">			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_Font_Add( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'font_delete' }">		<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_Font_Delete( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'font_delete_all' }">	<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_Font_Delete_All( l.child_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "g.PRV_log_file_name"	VALUE = "{ l.saved_log }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_Theme" PARAMETERS = "control var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.saved_log"			VALUE = "{ g.PRV_log_file_name }">
	<MvASSIGN NAME = "g.PRV_log_file_name"	VALUE = "SKIN-install.log">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.control:SKINFile:tags:Theme[ 1 ]:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'themelayout_update' }">				<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ThemeLayout_Update( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themebutton_add' }">				<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ThemeButton_Add( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themebutton_delete' }">			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ThemeButton_Delete( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themebutton_delete_all' }">		<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ThemeButton_Delete_All( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themetypography_add' }">			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ThemeTypography_Add( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themetypography_delete' }">		<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ThemeTypography_Delete( l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'themetypography_delete_all' }">	<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store_ThemeTypography_Delete_All( l.child_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "g.PRV_log_file_name" VALUE = "{ l.saved_log }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Install_DetokenizePath" PARAMETERS = "basehref var, source var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.search" INDEX = 1 VALUE = "%STORE_ID%">			<MvASSIGN NAME = "l.replace" INDEX = 1 VALUE = "{ padl( g.Store:id, 8, '0' ) }">
	<MvASSIGN NAME = "l.search" INDEX = 2 VALUE = "%STORE_BASEHREF%">	<MvASSIGN NAME = "l.replace" INDEX = 2 VALUE = "{ l.basehref }">
	<MvASSIGN NAME = "l.search" INDEX = 3 VALUE = "%BRANCH_TMPLDIR%/">	<MvASSIGN NAME = "l.replace" INDEX = 3 VALUE = "{ g.Store:branch:tmpldir }">

	<MvFUNCTIONRETURN VALUE = "{ glosub_array( l.source, l.search, l.replace ) }">
</MvFUNCTION>

<MvCOMMENT>
|
|	SKIN register
|
</MvCOMMENT>

<MvFUNCTION NAME = "SKIN_Register" PARAMETERS = "skin_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT SKIN_Unpack( l.skin_code, l.control ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.okay"	VALUE = "{ SKIN_Register_Unpacked( l.skin_code, l.control ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ SKIN_Cleanup( l.skin_code ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.okay }">
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Register_Unpacked" PARAMETERS = "skin_code, control var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT SKIN_Directory_Verify( l.skin_code, l.skin_dir , l.skin_file ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvREFERENCE NAME = "l.detail"			VARIABLE = "l.control:SKINFile:tags">

	<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].SKIN_Load_Code( l.skin_code, l.old_skin ) }">
		<MvIF EXPR = "{ l.old_skin:version EQ l.detail:version[ 1 ]:value }">
			<MvASSIGN NAME = "l.null" VALUE = "{ SKIN_Cleanup( l.skin_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00012', 'Framework package with the same code and version already exists ' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.detail:preview_image[ 1 ]:value }">
		<MvASSIGN NAME = "l.preview_dir" VALUE = "{ 'graphics/' $ padl( g.Store:id, 8, '0' ) $ '/' }">
		<MvASSIGN NAME = "l.path_to_preview_dir" VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.preview_dir ) }">

		<MvIF EXPR = "{ NOT sexists( l.path_to_preview_dir ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.path_to_preview_dir ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00013', 'Failed to create Framework preview directory' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT schmod( l.path_to_preview_dir, '0755' ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00014', 'Failed to update Framework preview directory' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ sexists( l.skin_dir $ 'images/' $ l.detail:preview_image[ 1 ]:value ) }">
			<MvIF EXPR = "{ NOT scopy( l.skin_dir $ 'images/' $ l.detail:preview_image[ 1 ]:value, l.path_to_preview_dir $ l.detail:preview_image[ 1 ]:value ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00015', 'Failed to copy Framework preview image (' $ l.skin_dir $ 'images/' $ l.preview_dir $ l.detail:preview_image[ 1 ]:value $ '): ' $ file_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT schmod( l.path_to_preview_dir $ l.detail:preview_image[ 1 ]:value, '0644' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00016', 'Failed to set permissions on Framework preview file: ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.skin:code"			VALUE = "{ l.skin_code }">
	<MvASSIGN NAME = "l.skin:version"		VALUE = "{ l.detail:version[ 1 ]:value }">
	<MvASSIGN NAME = "l.skin:title"			VALUE = "{ l.detail:title[ 1 ]:value }">
	<MvASSIGN NAME = "l.skin:descrip"		VALUE = "{ l.detail:description[ 1 ]:value }">
	<MvASSIGN NAME = "l.skin:previewurl"	VALUE = "{ l.detail:preview_url[ 1 ]:value }">
	<MvASSIGN NAME = "l.skin:previewimg"	VALUE = "{ l.detail:preview_image[ 1 ]:value }">
	<MvASSIGN NAME = "l.skin:provider"		VALUE = "{ l.detail:provider[ 1 ]:value }">
	<MvASSIGN NAME = "l.skin:created_dt"	VALUE = "{ s.time_t }">
	<MvASSIGN NAME = "l.skin:applied_dt"	VALUE = 0>
	<MvASSIGN NAME = "l.skin:has_comps"		VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].SKIN_Insert( l.skin ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Unpack" PARAMETERS = "skin_code, control var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT SKIN_Directory_Verify( l.skin_code, l.skin_dir, l.skin_file ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.control_file"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.skin_dir, '/control.xml' ) }">
	<MvASSIGN NAME = "l.control"			VALUE = "">

	<MvIF EXPR = "{ NOT tar_extract( l.skin_file, 'script', l.skin_dir, 'script' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00017', 'Failed to unpack Framework package: ' $ tar_last_error() ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT sexists( l.control_file ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00018', 'Framework package does not contain required file.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT xml_parse( l.control_file, 'script', l.control ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00019', 'Framework package control file is corrupt.' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
|	Packaged SKIN registration.
|
</MvCOMMENT>

<MvFUNCTION NAME = "SKIN_Sample_Retrieve" PARAMETERS = "skin_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT SKIN_Directory_Verify( l.skin_code, l.skin_dir , l.skin_file ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.skin_Path"		VALUE = "{ g.Module_Root $ 'frameworks/' }">
	<MvIF EXPR = "{ NOT scopy( l.skin_Path $ l.skin_code $ '.pkg', l.skin_file ) }">
		<MvCOMMENT> Purposely misleading error message </MvCOMMENT>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00020', 'Unable to retrieve sample Framework:' $ g.Error_Message ) }">
   	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ SKIN_Register( l.skin_code ) }">
</MvFUNCTION>

<MvCOMMENT>
|
|	SKIN Export
|
</MvCOMMENT>

<MvFUNCTION NAME = "SKIN_Export" PARAMETERS = "skin_code, title, description, preview_image, minimum_merchant_version, minimum_mivascript_version, export_pages, export_items" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.status"	VALUE = "{ _SKIN_Export( l.skin_code, l.title, l.description, l.preview_image, l.minimum_merchant_version, l.minimum_mivascript_version, l.export_pages, l.export_items ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ SKIN_Cleanup( l.skin_code ) }">

	<MvIF EXPR = "{ l.status }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00042', 'Framework \'' $ l.skin_code $ '\' exported' ) }">
	</MvIF>	
 
	<MvFUNCTIONRETURN VALUE = "{ l.status }">
</MvFUNCTION>

<MvFUNCTION NAME = "_SKIN_Export" PARAMETERS = "skin_code, title, description, preview_image, minimum_merchant_version, minimum_mivascript_version, export_pages, export_items" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT SKIN_Directory_Verify( l.skin_code, l.skin_dir, l.skin_file ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT smkdir( l.skin_dir ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00023', 'Failed to make Framework export directory ' $ l.skin_dir $ ': ' $ file_last_error() ) }">
	</MvIF>
	
	<MvCAPTURE VARIABLE = "l.control_source" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
<?xml version="1.0"?>
<SKINFile>
    <Code><MvEVAL EXPR = "{ miva_cdata_encode( l.skin_code ) }"></Code>
	<UIModuleCode><MvEVAL EXPR = "{ miva_cdata_encode( g.Store:ui_mod:code ) }"></UIModuleCode>
	<RegisterStoreFramework />
    <Title><MvEVAL EXPR = "{ miva_cdata_encode( l.title ) }"></Title>
    <Version>1.0</Version>
	<MvIF EXPR = "{ NOT ISNULL l.minimum_merchant_version }"><MinimumMerchantVersion><MvEVAL EXPR = "{ miva_cdata_encode( l.minimum_merchant_version ) }"></MinimumMerchantVersion></MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.minimum_mivascript_version }"><MinimumMivaScriptVersion><MvEVAL EXPR = "{ miva_cdata_encode( l.minimum_mivascript_version ) }"></MinimumMivaScriptVersion></MvIF>
    <Description><MvEVAL EXPR = "{ miva_cdata_encode( l.description ) }"></Description>
    <Preview_URL></Preview_URL>
    <Preview_Image><MvEVAL EXPR = "{ miva_cdata_encode( l.preview_image ) }"></Preview_Image>
    <Provider><MvEVAL EXPR = "{ miva_cdata_encode( g.Store:name ) }"></Provider>
    <Title><MvEVAL EXPR = "{ miva_cdata_encode( 'Framework exported on ' $ [ g.Module_Library_Utilities ].Format_Date( s.dyn_time_t, 'en-US' ) $ ' ' $ [ g.Module_Library_Utilities ].Format_Time( s.dyn_time_t, 'en-US' ) ) }"></Title>

	<Image_Base><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_Basehref_Path() ) }"></Image_Base>
	</MvCAPTURE>

	<MvIF EXPR = "{ NOT SKIN_Export_Pages( l.skin_code, l.skin_dir, l.control_source, l.external_files, l.export_pages ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Export_RequiredItems( l.skin_code, l.skin_dir, l.control_source ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Export_Config( l.skin_dir, l.export_items, l.control_source ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Export_Components( l.skin_code, l.skin_dir, l.control_source, l.external_files, l.export_items ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Export_Resources( l.skin_code, l.skin_dir, l.control_source, l.external_files ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Export_Fonts( l.skin_code, l.skin_dir, l.control_source ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Export_Theme( l.skin_code, l.skin_dir, l.control_source ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Export_Images( l.skin_dir, l.external_files, l.preview_image, l.control_source ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Export_ExternalFiles( l.skin_dir, l.external_files, l.control_source ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.control_source"	VALUE = "{ l.control_source $ '</SKINFile>' }">

	<MvIF EXPR = "{ file_create( l.skin_dir $ 'control.xml', 'script', l.control_source ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00024', 'Failed to create Framework control file: ' $ file_last_error() ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT xml_parse( l.skin_dir $ 'control.xml', 'script', l.control ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00025', 'Framework package control file is corrupt' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT tar_create( l.skin_file, 'script', l.skin_dir, 'script', 'compress' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00026', 'Failed to create Framework package: ' $ tar_last_error() ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT SKIN_Register_Unpacked( l.skin_code, l.control ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Images" PARAMETERS = "skin_dir, external_files var, preview_image, control var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.image_dir"		VALUE = "{ l.skin_dir $ 'images/' }">

	<MvIF EXPR = "{ NOT sexists( l.image_dir ) }">
		<MvIF EXPR = "{ NOT smkdir( l.image_dir ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00029', 'Failed to make Framework page export directory: ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>
	
	<MvIF EXPR = "{ NOT ISNULL l.preview_image }">
		<MvIF EXPR = "{ NOT scopy( g.imageroot $ g.Skin_Preview_Image, l.skin_dir $ 'images/' $ l.preview_image ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00028', 'Failed to copy framework preview image: ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_ExternalFiles" PARAMETERS = "skin_dir, external_files var, control var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT sexists( l.skin_dir ) }">
		<MvIF EXPR = "{ NOT smkdir( l.skin_dir ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00054', 'Failed to make Framework external files export directory: ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.external_file_pos"				VALUE = 1>
	<MvASSIGN NAME = "l.external_file_count"			VALUE = "{ miva_array_elements( l.external_files ) }">
	<MvASSIGN NAME = "l.basehref_path" 					VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_Basehref_Path() }">
	<MvASSIGN NAME = "l.null" 							VALUE = "{ miva_splitstring( g.Domain:img_ext, ',', l.image_extensions, 'trim' ) }">
	<MvASSIGN NAME = "l.control"						VALUE = "{ l.control $ asciichar( 10 ) $ asciichar( 10 ) $ '<ExternalFiles>' }">

	<MvWHILE EXPR = "{ l.external_file_pos LE l.external_file_count }">
		<MvREFERENCEARRAY NAME = "l.file"				VARIABLE = "l.external_files">
			<MvDIMENSION INDEX = "{ l.external_file_pos }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ISNULL l.file:destination }">
			<MvASSIGN NAME = "l.external_file_pos"		VALUE = "{ l.external_file_pos + 1 }">
			<MvWHILECONTINUE>
		</MvIF>

		<MvIF EXPR = "{ miva_array_search( l.image_extensions, 1, l.ext, 'l.ext CIN l.file:destination' ) }">
			<MvASSIGN NAME = "l.file_base_path"			VALUE = "{ glosub( l.file:destination, '/%STORE_BASEHREF%/', '' ) }">
			<MvASSIGN NAME = "l.file_base_path"			VALUE = "{ glosub( l.file_base_path, '%STORE_ID%', padl( g.Store:id, 8, '0' ) ) }">
			<MvASSIGN NAME = "l.file_base_path"			VALUE = "{ glosub( l.file_base_path, '%BRANCH_TMPLDIR%/', g.Store:branch:tmpldir ) }">

			<MvIF EXPR = "{ [ g.Module_Library_DB ].Image_Load_File( l.file_base_path, l.image ) }">
				<MvEVAL EXPR = "{ SKIN_Export_ExternalFiles_Control_AddImage( l.control, l.file ) }">
				<MvASSIGN NAME = "l.external_file_pos"	VALUE = "{ l.external_file_pos + 1 }">

				<MvWHILECONTINUE>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			<MvELSE>
				<MvIF EXPR = "{ [ g.Module_Library_DB ].GeneratedImage_Load_File( l.file_base_path, l.generatedimage ) }">
					<MvIF EXPR = "{ [ g.Module_Library_DB ].Image_Load_ID( l.generatedimage:image_id, l.master_image ) }">
						<MvASSIGN NAME = "l.master_source_file" 			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.basehref_path, l.master_image:image ) }">
						<MvASSIGN NAME = "l.master_source_file" 			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_SanitizePath( l.master_source_file ) }">

						<MvIF EXPR = "{ sexists( l.master_source_file ) }">
							<MvASSIGN NAME = "l.master_destination_file"	VALUE = "{ glosub( l.master_source_file, padl( g.Store:id, 8, '0' ) $ '/', '%STORE_ID%/' ) }">
							<MvASSIGN NAME = "l.master_destination_file"	VALUE = "{ glosub( l.master_destination_file, l.basehref_path, '/%STORE_BASEHREF%/' ) }">

							<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_Copy_DestinationFile_Generate_ExternalFile( l.skin_dir, l.master_destination_file, l.master_file ) }">

							<MvIF EXPR = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_Copy_DestinationFile_ShouldCopyFile( l.external_files, l.master_file ) }">
								<MvASSIGN NAME = "l.external_file_count"	VALUE = "{ miva_array_insert_var( l.external_files, l.master_file, -1 ) }">

								<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_Copy_DestinationFile_CopyFile_WithFile( 'H', l.master_source_file, l.master_file ) }">
									<MvASSIGN NAME = "l.external_file_pos"	VALUE = "{ l.external_file_pos + 1 }">
									<MvWHILECONTINUE>
								</MvIF>
							</MvIF>

							<MvEVAL EXPR = "{ SKIN_Export_ExternalFiles_Control_AddGeneratedImage( l.control, l.file, l.master_file, l.generatedimage:width, l.generatedimage:height ) }">
							<MvASSIGN NAME = "l.external_file_pos"			VALUE = "{ l.external_file_pos + 1 }">

							<MvWHILECONTINUE>
						</MvIF>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvEVAL EXPR = "{ SKIN_Export_ExternalFiles_Control_AddFile( l.control, l.file ) }">

		<MvASSIGN NAME = "l.external_file_pos"			VALUE = "{ l.external_file_pos + 1 }">
	</MvWHILE>

	<MvASSIGN NAME = "l.control"						VALUE = "{ l.control $ asciichar( 10 ) $ '</ExternalFiles>' }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_ExternalFiles_Control_AddFile" PARAMETERS = "control var, file var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<File>
			<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.file:source ) }"></Name>

			<MvIF EXPR = "{ strcmp( l.file:source, l.file:destination ) NE 0 }">
				<Target><MvEVAL EXPR = "{ miva_cdata_encode( l.file:destination ) }"></Target>
			</MvIF>
		</File>
	</MvCAPTURE>

	<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ l.output }">
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_ExternalFiles_Control_AddImage" PARAMETERS = "control var, image_file var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<File>
			<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.image_file:source ) }"></Name>

			<MvIF EXPR = "{ strcmp( l.image_file:source, l.image_file:destination ) NE 0 }">
				<Target><MvEVAL EXPR = "{ miva_cdata_encode( l.image_file:destination ) }"></Target>
			</MvIF>

			<AddImage />
		</File>
	</MvCAPTURE>

	<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ l.output }">
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_ExternalFiles_Control_AddGeneratedImage" PARAMETERS = "control var, generated_image_file var, master_image_file var, width, height" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<File>
			<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.generated_image_file:source ) }"></Name>

			<MvIF EXPR = "{ strcmp( l.generated_image_file:source, l.generated_image_file:destination ) NE 0 }">
				<Target><MvEVAL EXPR = "{ miva_cdata_encode( l.generated_image_file:destination ) }"></Target>
			</MvIF>

			<GeneratedImage>
				<Source><MvEVAL EXPR = "{ miva_cdata_encode( l.master_image_file:destination ) }"></Source>
				<Width><MvEVAL EXPR = "{ int( l.width ) }"></Width>
				<Height><MvEVAL EXPR = "{ int( l.height ) }"></Height>
			</GeneratedImage>
		</File>
	</MvCAPTURE>

	<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ l.output }">
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Pages" PARAMETERS = "skin_code, skin_dir, control var, external_files var, export_pages var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.TUI_External_Files"		VALUE = "">
	<MvASSIGN NAME = "l.page_dir"				VALUE = "{ l.skin_dir $ 'pages/' }">

	<MvIF EXPR = "{ NOT smkdir( l.page_dir ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00036', 'Failed to make Framework page export directory: ' $ file_last_error() ) }">
	</MvIF>

	<MvASSIGN NAME = "l.result"					VALUE = 1>

	<MvCAPTURE VARIABLE = "l.control" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<MvEVAL EXPR = "{ l.control }">

		<PageList>
		<MvFOREACH ITERATOR = "l.export_page" ARRAY = "l.export_pages">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Load_Code( l.export_page, l.page ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.file_root"		VALUE = "{ l.skin_code $ '-' $ l.page:code }">
			<MvASSIGN NAME = "l.page_file"		VALUE = "{ l.page:code $ '.htm' }">
			<MvASSIGN NAME = "l.control_file"	VALUE = "{ l.page_dir $ l.file_root $ '.xml' }">
			<MvASSIGN NAME = "l.page_settings"	VALUE = "">
			<MvASSIGN NAME = "l.page_items"		VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.page:templ_id, l.template ) }">
				<MvASSIGN NAME = "l.result"		VALUE = 0>
				<MvFOREACHSTOP>
			</MvIF>

			<MvIF EXPR = "{ NOT TemplateManager_Export_Page( l.page, '/' $ l.page_dir, '/' $ l.skin_dir, l.page:settings, l.template:source, l.page_file ) }">
				<MvASSIGN NAME = "l.result"		VALUE = 0>
				<MvFOREACHSTOP>
			</MvIF>

			<Page>
				<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.page:code ) }"></Code>
				<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.page:name ) }"></Name>
				<Title><MvEVAL EXPR = "{ miva_cdata_encode( l.page:title ) }"></Title>
				<Secure><MvIF EXPR = "{ l.page:secure }">Yes<MvELSE>No</MvIF></Secure>
				<Public><MvIF EXPR = "{ l.page:public }">Yes<MvELSE>No</MvIF></Public>
				<Layout><MvIF EXPR = "{ l.page:layout }">Yes<MvELSE>No</MvIF></Layout>
				<Fragment><MvIF EXPR = "{ l.page:fragment }">Yes<MvELSE>No</MvIF></Fragment>
				<UI><MvIF EXPR = "{ l.page:ui_id }">Yes<MvELSE>No</MvIF></UI>
				<Source><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Feature_Filename_TUI_MGR ].name_suffix( l.page_file, 'page' ) ) }"></Source>

				<MvIF EXPR = "{ l.page:cache EQ 'never' }">				<Cache>Never</Cache>
				<MvELSEIF EXPR = "{ l.page:cache EQ 'provisional' }">	<Cache>ProvisionalBasket</Cache>
				<MvELSEIF EXPR = "{ l.page:cache EQ 'anonempty' }">		<Cache>AnonymousEmptyBasket</Cache>
				<MvELSEIF EXPR = "{ l.page:cache EQ 'allempty' }">		<Cache>EmptyBasket</Cache>
				<MvELSEIF EXPR = "{ l.page:cache EQ 'always' }">		<Cache>Always</Cache>
				</MvIF>

				<CacheSettings>
					<MvFOREACH ITERATOR = "l.type" ARRAY = "l.types" COUNT = "{ miva_struct_members( l.page:cacheset, l.types ) }">
						<MvREFERENCEARRAY NAME = "l.name_struct" VARIABLE = "l.page:cacheset">
							<MvMEMBER NAME = "{ l.type }">
						</MvREFERENCEARRAY>

						<MvFOREACH ITERATOR = "l.name" ARRAY = "l.names" COUNT = "{ miva_struct_members( l.name_struct, l.names ) }">
							<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.page:cacheset">
								<MvMEMBER NAME = "{ l.type }">
								<MvMEMBER NAME = "{ l.name }">
							</MvREFERENCEARRAY>

							<MvIF EXPR = "{ l.type EQ 'header' }">			<Header name="{ encodeentities( l.name ) }" mode="{ encodeentities( l.settings:mode ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:value ) }"></Header>
							<MvELSEIF EXPR = "{ l.type EQ 'parameter' }">	<Parameter name="{ encodeentities( l.name ) }" mode="{ encodeentities( l.settings:mode ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:value ) }"></Parameter>
							<MvELSEIF EXPR = "{ l.type EQ 'cookie' }">		<Cookie name="{ encodeentities( l.name ) }" mode="{ encodeentities( l.settings:mode ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:value ) }"></Cookie>
							</MvIF>
						</MvFOREACH>
					</MvFOREACH>
				</CacheSettings>

				<MvIF EXPR = "{ NOT SKIN_Export_Page_Items( l.skin_code, l.skin_dir, l.page, l.page_items ) }">
					<MvASSIGN NAME = "l.result"	VALUE = 0>
					<MvFOREACHSTOP>
				</MvIF>

				<MvEVAL EXPR = "{ l.page_items }">
			</Page>
		</MvFOREACH>
		</PageList>
	</MvCAPTURE>

	<MvASSIGN NAME = "l.control"				VALUE = "{ l.control $ l.xml }">
	<MvASSIGN NAME = "l.external_files"			VALUE = "{ g.TUI_External_Files }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_RequiredItems" PARAMETERS = "skin_code, SKIN_dir, control var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.required_items_xml" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<RequiredItemList>
			<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ItemList_Load_All( l.items ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code_Cached( l.item:mod_code, l.module ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<Item>
					<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.item:code ) }"></Code>
					<Module><MvEVAL EXPR = "{ miva_cdata_encode( l.module:code ) }"></Module>
					<Extensions>
						<MvFOREACH ITERATOR = "l.itemextension" ARRAY = "l.itemextensions" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ItemExtensionList_Load_Item( l.item:id, l.itemextensions ) }">
							<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code_Cached( l.itemextension:mod_code, l.module ) }">
								<MvFOREACHCONTINUE>
							</MvIF>

							<Extension><MvEVAL EXPR = "{ miva_cdata_encode( l.module:code ) }"></Extension>
						</MvFOREACH>
					</Extensions>
				</Item>
			</MvFOREACH>
		</RequiredItemList>
	</MvCAPTURE>

	<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ l.required_items_xml }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TemplateManager_Export_Page" PARAMETERS = "page var, output_dir, extfile_dir, all_settings var, template_source, output_file" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This method exports(saves) a page template out to a file along with external files referenced by
	| the template code, e.g., javascript files, image files, etc.
	|
	| page - The structure for the page being exported
	|
	| output_root_option - Either 'H' for scripts directory, 'D' for data directory
	|
	| output_dir - The destination path for the resulting template files (e.g., '/editable_templates/store1/mm5')
	|    Expects a leading slash '/'
	|
	| extfile_dir - The root destination path for referenced external files (e.g., '/editable_templates/store1')
	|    Expects a leading slash '/'
	|
	| all_settings - Page attributes such as items
	|
	| template_source - Template source code for the page
	|
	| output_file - Name of the file to be output (e.g., 'srch.htm')
	|    If a page template is being exported, '-page' will be suffixed to this name.
	|    Otherwise if an item template is being exported, '-item' or '-global' will be suffixed (by convention, by the component) instead.
	|
	</MvCOMMENT>

	<MvCOMMENT>
	|
	| Examine each template item tag
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.output"			VALUE = "{ l.output $ l.template_source }">

	<MvCOMMENT>
	|
	| Export (copy) other files that are referenced inside of the template source such as:
	|	images, style sheets, script files, etc.
	| Do not return an error on failure; missing files can always be copied manually as needed.
	|
	</MvCOMMENT>
	<MvIF EXPR = "{ len(l.output) GT 0 }">
		<MvASSIGN NAME = "l.extfiles_exported"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_ExternalFiles( 'H', l.extfile_dir, l.output, '' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Determine the file name and the full path for output
	|
	</MvCOMMENT>
	<MvIF EXPR="{ l.page:code $ '.htm' EQ l.output_file }">
		<MvASSIGN NAME = "l.file"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].name_suffix( l.output_file, 'page' ) }">
	<MvELSE>
		<MvCOMMENT>		By convention, the components will put "-item" as suffixes to file names </MvCOMMENT>
		<MvASSIGN NAME = "l.file"		VALUE = "{ l.output_file }">
	</MvIF>

	<MvASSIGN NAME = "l.output_fullpath"		VALUE = "{ l.output_dir $ l.file }">

	<MvCOMMENT>
	|
	| Due to a VM bug related to Data folder paths containing a leading slash,
	| strip the leading slash from the output path (MSA: 03/13/05)
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "l.output_fullpath"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TUI_Strip_Leading_Slash( l.output_fullpath ) }">

	<MvIF EXPR = "{ sexists( l.output_fullpath ) }">
		<MvIF EXPR = "{ sdelete( l.output_fullpath ) }">
			<MvIF EXPR = "{ file_create( l.output_fullpath, 'script', l.output ) GE 0 }">
				<MvASSIGN NAME = "l.ok" VALUE = "{ fchmod( l.output_fullpath, '0644' ) }">
			</MvIF>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ file_create( l.output_fullpath, 'script', l.output ) GE 0 }">
			<MvASSIGN NAME = "l.ok"		VALUE = "{ fchmod( l.output_fullpath, '0644' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Page_Items" PARAMETERS = "skin_code, SKIN_dir, page var, control var" STANDARDOUTPUTLEVEL = "">
	<MvDO FILE = "{ g.Feature_Filename_TUI_DB }" NAME = "l.item_count" VALUE = "{ ItemModuleList_Load_Page_Active( l.page:id, l.item ) }">
	
	<MvASSIGN NAME = "l.control"	VALUE = "{ l.control $ asciichar(9) $ '<ItemList>' $ asciichar(10) }">

	<MvASSIGN NAME = "l.pos" VALUE = 1>
	<MvWHILE EXPR = "{ l.pos LE l.item_count }">
		<MvASSIGN NAME = "l.control"	VALUE = "{ l.control $ asciichar(9) $ asciichar(9) $ '<Item>' $ l.item[ l.pos ]:item_code $ '</Item>' $ asciichar(10) }">

		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvWHILE>
	
	<MvASSIGN NAME = "l.control"	VALUE = "{ l.control $ asciichar(9) $ '</ItemList>' $ asciichar(10) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Components" PARAMETERS = "skin_code, skin_dir, control var, external_files var, export_item" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.TUI_External_Files" VALUE = "">

	<MvASSIGN NAME = "l.control"	VALUE = "{ l.control $ asciichar(10) $ '<ComponentList>' $ asciichar(10) }">
	<MvASSIGN NAME = "l.component_dir"	VALUE = "{ l.skin_dir $ 'components/' }">

	<MvIF EXPR = "{ NOT smkdir( l.component_dir ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00037', 'Failed to make Framework component export directory: ' $ file_last_error() ) }">
	</MvIF>

	<MvASSIGN NAME = "l.item_count"     VALUE = "{ miva_array_max( l.export_item ) }">
	<MvASSIGN NAME = "l.pos"            VALUE = 1>

	<MvWHILE EXPR = "{ l.pos LE l.item_count }">
		<MvIF EXPR = "{ len( l.export_item[ l.pos ] ) }">
			<MvIF EXPR = "{ [ g.Feature_Filename_TUI_DB ].Item_Load_Code( l.export_item[ l.pos ], l.item ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code( l.item:mod_code, l.module )  }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00038', 'Unable to load item \'' $ l.item:code $ '\'' ) }">
				</MvIF>

				<MvIF EXPR = "{ l.module:feature_hash:skins }">
					<MvASSIGN NAME = "l.control"	VALUE = "{ l.control $ '<Component><Code>' $ l.module:code $ '</Code><Name>' $ l.module:name $ '</Name></Component>' $ asciichar( 10 ) }">

					<MvCOMMENT>Clear settings variable to prevent duplicate code</MvCOMMENT>
					<MvASSIGN NAME = "l.output" VALUE = "">

					<MvIF EXPR = "{ l.module:api_ver LT 5.6 }">
						<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.ok" VALUE = "{ SkinsComponentModule_Export( l.module, l.output ) }">
					<MvELSEIF EXPR = "{ l.module:api_ver GE 5.6 }">
						<MvDO FILE = "{ g.Module_Root $ l.module:module }" NAME = "l.ok" VALUE = "{ SkinsComponentModule_Export_Item( l.module, l.item, l.output ) }">
					</MvIF>

					<MvASSIGN NAME = "l.extfiles_exported"	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_ExternalFiles( 'H', l.skin_dir, l.output, '' ) }">

					<MvASSIGN NAME = "l.output_fullpath"		VALUE = "{ l.component_dir $ l.item:code $ '.htm' }">

					<MvIF EXPR = "{ sexists( l.output_fullpath ) }">
						<MvIF EXPR = "{ sdelete( l.output_fullpath ) }">
							<MvIF EXPR = "{ file_create( l.output_fullpath, 'script', l.output ) GE 0 }">
								<MvASSIGN NAME = "l.ok" VALUE = "{ fchmod( l.output_fullpath, '0644' ) }">
							</MvIF>
						</MvIF>
					<MvELSE>
						<MvIF EXPR = "{ file_create( l.output_fullpath, 'script', l.output ) GE 0 }">
							<MvASSIGN NAME = "l.ok"		VALUE = "{ fchmod( l.output_fullpath, '0644' ) }">
						</MvIF>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>
		
		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvASSIGN NAME = "l.control"	VALUE = "{ l.control $ '</ComponentList>' }">

	<MvFOREACH ITERATOR = "l.external_file" ARRAY = "g.TUI_External_Files">
		<MvIF EXPR = "{ NOT miva_array_search( l.external_files, 1, l.search_file, '( l.search_file:source EQ l.external_file:source ) AND l.search_file:destination EQ l.external_file:destination' ) }">
			<MvASSIGN NAME = "l.external_file_count" VALUE = "{ miva_array_insert_var( l.external_files, l.external_file, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Resources" PARAMETERS = "skin_code, skin_dir, control var, external_files var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.TUI_External_Files" VALUE = "">

	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<Resources>
			<MvFOREACH ITERATOR = "l.resourcegroup" ARRAY = "l.resourcegroups" COUNT = "{ [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_All( l.resourcegroups ) }">
				<MvIF EXPR = "{ l.resourcegroup:code NE 'modules' }">
					<ResourceGroup_Delete code="{ l.resourcegroup:code }" />
				</MvIF>

				<ResourceGroup_Add>
					<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.resourcegroup:code ) }"></Code>
				</ResourceGroup_Add>
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.cssresource" ARRAY = "l.cssresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_All( l.cssresources ) }">
				<MvIF EXPR = "{ l.cssresource:type EQ 'Z' }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.cssresource:type EQ 'L' }">
					<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_ExternalSource_SanitizeOutputPath( l.cssresource:file, g.imageroot, '', l.null, l.destination_file ) }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<MvASSIGN NAME = "l.destination_file"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_ResourceFilename_StripBranchTemplateDirectory( 'css', l.destination_file ) }">
					<MvASSIGN NAME = "l.export_filename"		VALUE = "{ substring_var( l.destination_file, len( '/%STORE_BASEHREF%/' ) + 1, len_var( l.destination_file ) - len( '/%STORE_BASEHREF%/' ) ) }">
					<MvASSIGN NAME = "l.source_file"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.cssresource:file ) }">
					<MvASSIGN NAME = "l.cssresource_source"		VALUE = "">
					
					<MvIF EXPR = "{ file_read( l.source_file, 'script', l.cssresource_source ) EQ -1 }">
						<MvFOREACHCONTINUE>
					<MvELSE>
						<MvASSIGN NAME = "l.extfiles_exported" 	VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_ExternalFiles_CSS( 'H', l.skin_dir, l.cssresource_source, l.destination_file ) }">

						<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_Copy_DestinationFile_WithContent( 'H', l.skin_dir, l.cssresource_source, l.destination_file ) }">
							<MvFOREACHCONTINUE>
						</MvIF>
					</MvIF>
				<MvELSEIF EXPR = "{ l.cssresource:type EQ 'E' }">
					<MvASSIGN NAME = "l.export_filename" VALUE = "{ l.cssresource:file }">
				<MvELSEIF EXPR = "{ l.cssresource:type EQ 'I' }">
					<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.cssresource:templ_id, l.managedtemplate ) OR
									NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_ID( l.managedtemplate:current_id, l.managedtemplateversion ) }">
						<MvFOREACHCONTINUE>
					</MvIF>
				</MvIF>

				<CSSResource_Delete code="{ l.cssresource:code }" />
				<CSSResource_Add>
					<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.cssresource:code ) }"></Code>
					<Type><MvIF EXPR = "{ l.cssresource:type EQ 'C' }">CombinedResource<MvELSEIF EXPR = "{ l.cssresource:type EQ 'L' }">LocalFile<MvELSEIF EXPR = "{ l.cssresource:type EQ 'E' }">ExternalFile<MvELSEIF EXPR = "{ l.cssresource:type EQ 'M' }">Module<MvELSEIF EXPR = "{ l.cssresource:type EQ 'Y' }">InlineModule<MvELSE>InlineCSS</MvIF></Type>
					<Global><MvIF EXPR = "{ l.cssresource:is_global }">Yes<MvELSE>No</MvIF></Global>
					<Active><MvIF EXPR = "{ l.cssresource:active }">Yes<MvELSE>No</MvIF></Active>
					<Attributes>
						<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.cssresource:attributes">
						<Attribute>
							<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:name ) }"></Name>
							<Value><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:value ) }"></Value>
						</Attribute>
						</MvFOREACH>
					</Attributes>

					<MvIF EXPR = "{ l.cssresource:type EQ 'L' OR l.cssresource:type EQ 'E' }">
						<File_Path><MvEVAL EXPR = "{ miva_cdata_encode( l.export_filename ) }"></File_Path>
					<MvELSEIF EXPR = "{ l.cssresource:type EQ 'M' OR l.cssresource:type EQ 'Y' }">
						<Module_Code><MvEVAL EXPR = "{ miva_cdata_encode( l.cssresource:mod_code ) }"></Module_Code>
						<Module_Data><MvEVAL EXPR = "{ miva_cdata_encode( l.cssresource:mod_data ) }"></Module_Data>
					<MvELSEIF EXPR = "{ l.cssresource:type EQ 'I' }">
						<Template><MvEVAL EXPR = "{ miva_cdata_encode( l.managedtemplateversion:source ) }"></Template>
						<Notes>#Set_Current_Time#</Notes>
					</MvIF>
				</CSSResource_Add>
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.csscombinedresourcexresource" ARRAY = "l.csscombinedresourcexresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].CSSCombinedResourceXResourceList_Load_All( l.csscombinedresourcexresources ) }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_ID( l.csscombinedresourcexresource:comb_id, l.combinedresource ) OR
								NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_ID( l.csscombinedresourcexresource:res_id, l.cssresource ) OR
								l.combinedresource:type NE 'C' OR
								( l.cssresource:type NE 'L' AND l.cssresource:type NE 'M' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<CSSCombinedResourceXResource_Assign combined_code="{ l.combinedresource:code }" resource_code="{ l.cssresource:code }" />
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.cssresourcexgroup" ARRAY = "l.cssresourcexgroups" COUNT = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceXGroupList_Load_All( l.cssresourcexgroups ) }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_ID( l.cssresourcexgroup:css_id, l.cssresource ) OR
								NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_ID( l.cssresourcexgroup:group_id, l.resourcegroup ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.cssresource:type EQ 'Z' }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<CSSResourceXGroup_Assign code="{ l.cssresource:code }" group_code="{ l.resourcegroup:code }" />
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.cssresourcexpage" ARRAY = "l.cssresourcexpages" COUNT = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceXPageList_Load_All( l.cssresourcexpages ) }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_ID( l.cssresourcexpage:css_id, l.cssresource ) OR
								NOT [ g.Feature_Filename_TUI_DB ].Page_Load_ID( l.cssresourcexpage:page_id, l.page ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.cssresource:type EQ 'Z' }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<CSSResourceXPage_Assign code="{ l.cssresource:code }" page_code="{ l.page:code }" />
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.scriptresource" ARRAY = "l.scriptresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_All( l.scriptresources ) }">
				<MvIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'L' }">
					<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_ExternalSource_SanitizeOutputPath( l.scriptresource:file, g.imageroot, '', l.null, l.destination_file ) }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<MvASSIGN NAME = "l.destination_file"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_ResourceFilename_StripBranchTemplateDirectory( 'scripts', l.destination_file ) }">
					<MvASSIGN NAME = "l.export_filename"		VALUE = "{ substring_var( l.destination_file, len( '/%STORE_BASEHREF%/' ) + 1, len_var( l.destination_file ) - len( '/%STORE_BASEHREF%/' ) ) }">
					<MvASSIGN NAME = "l.source_file"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.scriptresource:file ) }">
					<MvASSIGN NAME = "l.scriptresource_source"	VALUE = "">

					<MvIF EXPR = "{ file_read( l.source_file, 'script', l.scriptresource_source ) EQ -1 }">
						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Export_Copy_DestinationFile_WithContent( 'H', l.skin_dir, l.scriptresource_source, l.destination_file ) }">
						<MvFOREACHCONTINUE>
					</MvIF>
				<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'E' }">
					<MvASSIGN NAME = "l.export_filename" VALUE = "{ l.scriptresource:file }">
				<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'I' }">
					<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_ID( l.scriptresource:templ_id, l.managedtemplate ) OR
									NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_ID( l.managedtemplate:current_id, l.managedtemplateversion ) }">
						<MvFOREACHCONTINUE>
					</MvIF>
				</MvIF>

				<JavaScriptResource_Delete code="{ l.scriptresource:code }" />
				<JavaScriptResource_Add>
					<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.scriptresource:code ) }"></Code>
					<Type><MvIF EXPR = "{ l.scriptresource:type EQ 'C' }">CombinedResource<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'L' }">LocalFile<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'E' }">ExternalFile<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'M' }">Module<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'Y' }">InlineModule<MvELSE>InlineScript</MvIF></Type>
					<Global><MvIF EXPR = "{ l.scriptresource:is_global }">Yes<MvELSE>No</MvIF></Global>
					<Active><MvIF EXPR = "{ l.scriptresource:active }">Yes<MvELSE>No</MvIF></Active>
					<Attributes>
						<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.scriptresource:attributes">
						<Attribute>
							<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:name ) }"></Name>
							<Value><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:value ) }"></Value>
						</Attribute>
						</MvFOREACH>
					</Attributes>

					<MvIF EXPR = "{ l.scriptresource:type EQ 'L' OR l.scriptresource:type EQ 'E' }">
						<File_Path><MvEVAL EXPR = "{ miva_cdata_encode( l.export_filename ) }"></File_Path>
					<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'M' OR l.scriptresource:type EQ 'Y' }">
						<Module_Code><MvEVAL EXPR = "{ miva_cdata_encode( l.scriptresource:mod_code ) }"></Module_Code>
						<Module_Data><MvEVAL EXPR = "{ miva_cdata_encode( l.scriptresource:mod_data ) }"></Module_Data>
					<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'I' }">
						<Template><MvEVAL EXPR = "{ miva_cdata_encode( l.managedtemplateversion:source ) }"></Template>
						<Notes>#Set_Current_Time#</Notes>
					</MvIF>
				</JavaScriptResource_Add>
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.scriptcombinedresourcexresource" ARRAY = "l.scriptcombinedresourcexresources" COUNT = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptCombinedResourceXResourceList_Load_All( l.scriptcombinedresourcexresources ) }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_ID( l.scriptcombinedresourcexresource:comb_id, l.combinedresource ) OR
								NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_ID( l.scriptcombinedresourcexresource:res_id, l.scriptresource ) OR
								l.combinedresource:type NE 'C' OR
								( l.scriptresource:type NE 'L' AND l.scriptresource:type NE 'M' ) }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<JavaScriptCombinedResourceXResource_Assign combined_code="{ l.combinedresource:code }" resource_code="{ l.scriptresource:code }" />
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.scriptresourcexgroup" ARRAY = "l.scriptresourcexgroups" COUNT = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXGroupList_Load_All( l.scriptresourcexgroups ) }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_ID( l.scriptresourcexgroup:script_id, l.scriptresource ) OR
								NOT [ g.Feature_Filename_TUI_DB ].ResourceGroup_Load_ID( l.scriptresourcexgroup:group_id, l.resourcegroup ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<JavaScriptResourceXGroup_Assign code="{ l.scriptresource:code }" group_code="{ l.resourcegroup:code }" />
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.scriptresourcexpage" ARRAY = "l.scriptresourcexpages" COUNT = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXPageList_Load_All( l.scriptresourcexpages ) }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_ID( l.scriptresourcexpage:script_id, l.scriptresource ) OR
								NOT [ g.Feature_Filename_TUI_DB ].Page_Load_ID( l.scriptresourcexpage:page_id, l.page ) }">
					<MvFOREACHCONTINUE>
				<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<JavaScriptResourceXPage_Assign code="{ l.scriptresource:code }" page_code="{ l.page:code }" />
			</MvFOREACH>
		</Resources>
	</MvCAPTURE>

	<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ l.output }">

	<MvFOREACH ITERATOR = "l.external_file" ARRAY = "g.TUI_External_Files">
		<MvIF EXPR = "{ NOT miva_array_search( l.external_files, 1, l.search_file, '( l.search_file:source EQ l.external_file:source ) AND l.search_file:destination EQ l.external_file:destination' ) }">
			<MvASSIGN NAME = "l.external_file_count" VALUE = "{ miva_array_insert_var( l.external_files, l.external_file, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Fonts" PARAMETERS = "skin_code, skin_dir, control var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<Fonts>
			<MvFOREACH ITERATOR = "l.font" ARRAY = "l.fonts" COUNT = "{ [ g.Feature_Filename_TUI_DB ].FontList_Load_All( l.fonts ) }">
				<Font_Delete code="{ encodeentities( l.font:code ) }" />

				<Font_Add>
					<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.font:code ) }"></Code>
					<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.font:name ) }"></Name>
					<Type><MvIF EXPR = "{ l.font:type EQ 'google' }">Google<MvELSE>Standard</MvIF></Type>
					<Family><MvEVAL EXPR = "{ miva_cdata_encode( l.font:family ) }"></Family>
					<Active><MvIF EXPR = "{ l.font:active }">Yes<MvELSE>No</MvIF></Active>

					<Weights>
						<MvIF EXPR = "{ l.font:weights:100 }">	<Weight value="100" /> </MvIF>
						<MvIF EXPR = "{ l.font:weights:200 }">	<Weight value="200" /> </MvIF>
						<MvIF EXPR = "{ l.font:weights:300 }">	<Weight value="300" /> </MvIF>
						<MvIF EXPR = "{ l.font:weights:400 }">	<Weight value="400" /> </MvIF>
						<MvIF EXPR = "{ l.font:weights:500 }">	<Weight value="500" /> </MvIF>
						<MvIF EXPR = "{ l.font:weights:600 }">	<Weight value="600" /> </MvIF>
						<MvIF EXPR = "{ l.font:weights:700 }">	<Weight value="700" /> </MvIF>
						<MvIF EXPR = "{ l.font:weights:800 }">	<Weight value="800" /> </MvIF>
						<MvIF EXPR = "{ l.font:weights:900 }">	<Weight value="900" /> </MvIF>
					</Weights>

					<Styles>
						<MvIF EXPR = "{ l.font:styles:normal }">	<Style value="normal" /> </MvIF>
						<MvIF EXPR = "{ l.font:styles:italic }">	<Style value="italic" /> </MvIF>
					</Styles>

					<MvIF EXPR = "{ l.font:type EQ 'google' }">
						<GoogleFontName><MvEVAL EXPR = "{ miva_cdata_encode( l.font:google_font_name ) }"></GoogleFontName>
					<MvELSE>
						<Embed><MvEVAL EXPR = "{ miva_cdata_encode( l.font:embed ) }"></Embed>
					</MvIF>
				</Font_Add>
			</MvFOREACH>
		</Fonts>
	</MvCAPTURE>

	<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ l.output }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Theme" PARAMETERS = "skin_code, skin_dir, control var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
			<Theme>
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Layout( l.theme ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Typographies( l.theme ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Buttons( l.theme ) }">
			</Theme>
		</MvCAPTURE>

		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ l.output }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Theme_Layout" PARAMETERS = "theme var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<ThemeLayout_Update>
		<Breakpoints>
			<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
				<Breakpoint>
					<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.breakpoint:code ) }"></Code>
					<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.breakpoint:name ) }"></Name>
					<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'Start',	l.breakpoint:start ) }">
					<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'End',	l.breakpoint:end ) }">
				</Breakpoint>
			</MvFOREACH>
		</Breakpoints>
	</ThemeLayout_Update>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Theme_Typographies" PARAMETERS = "theme var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvFOREACH ITERATOR = "l.typography" ARRAY = "l.theme:typographies" COUNT = "{ l.theme:typography_count }">
		<ThemeTypography_Delete code="{ encodeentities( l.typography:code ) }" />

		<ThemeTypography_Add>
			<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.typography:code ) }"></Code>
			<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.typography:name ) }"></Name>
			<ClassName><MvEVAL EXPR = "{ miva_cdata_encode( l.typography:classname ) }"></ClassName>
			<Type><MvIF EXPR = "{ l.typography:type EQ 'paragraph' }">Paragraph<MvELSE>Heading</MvIF></Type>
			<Styles>
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value(		'Color',			l.typography:styles:color ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Font(			'Font',				l.typography:styles:font ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'FontSize',			l.typography:styles:font_size ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'LineHeight',		l.typography:styles:line_height ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'LetterSpacing',	l.typography:styles:letter_spacing ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_List(			'TextTransform',	l.typography:styles:text_transform,	'None,Uppercase,Lowercase,Capitalize',
																																'none,uppercase,lowercase,capitalize' ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_List(			'OverflowWrap',		l.typography:styles:overflow_wrap,	'Normal,Break-Word,Anywhere',
																																'normal,break-word,anywhere' ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_List(			'WhiteSpace',		l.typography:styles:white_space,	'Normal,Nowrap,Pre,PreWrap,PreLine',
																																'normal,nowrap,pre,prewrap,preline' ) }">

				<MvIF EXPR = "{ l.typography:type EQ 'paragraph' }">
					<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'ParaphraphSpacing', l.typography:styles:paragraph_spacing ) }">
				</MvIF>
			</Styles>
			<BreakpointStyles>
				<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
					<MvREFERENCEARRAY NAME = "l.breakpoint_styles" VARIABLE = "l.typography:breakpoint_styles">
						<MvMEMBER NAME = "{ l.breakpoint:code }">
					</MvREFERENCEARRAY>

					<Breakpoint code="{ encodeentities( l.breakpoint:code ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'FontSize',		l.breakpoint_styles:font_size ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'LineHeight',		l.breakpoint_styles:line_height ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'LetterSpacing',	l.breakpoint_styles:letter_spacing ) }">
					</Breakpoint>
				</MvFOREACH>
			</BreakpointStyles>
		</ThemeTypography_Add>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Theme_Buttons" PARAMETERS = "theme var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvFOREACH ITERATOR = "l.button" ARRAY = "l.theme:buttons" COUNT = "{ l.theme:button_count }">
		<ThemeButton_Delete code="{ encodeentities( l.button:code ) }" />

		<ThemeButton_Add>
			<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.button:code ) }"></Code>
			<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.button:name ) }"></Name>
			<ClassName><MvEVAL EXPR = "{ miva_cdata_encode( l.button:classname ) }"></ClassName>
			<Styles>
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value(		'Color',					l.button:styles:color ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value(		'BackgroundColor',			l.button:styles:background_color ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Font(			'Font',						l.button:styles:font ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_List(			'TextTransform',			l.button:styles:text_transform,	'None,Uppercase,Lowercase,Capitalize',
																																	'none,uppercase,lowercase,capitalize' ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_List(			'OverflowWrap',				l.button:styles:overflow_wrap,	'Normal,Break-Word,Anywhere',
																																	'normal,break-word,anywhere' ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BorderTopLeftRadius',		l.button:styles:border_top_left_radius ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BorderTopRightRadius',		l.button:styles:border_top_right_radius ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BorderBottomRightRadius',	l.button:styles:border_bottom_right_radius ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BorderBottomLeftRadius',	l.button:styles:border_bottom_left_radius ) }">

				<MvIF EXPR = "{ l.button:styles:border_enabled:value }">
					<Border>
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_List(			'BorderStyle',			l.button:styles:border_style,	'Dotted,Dashed,Solid',
																																		'dotted,dashed,solid' ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value(		'BorderColor',			l.button:styles:border_color ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BorderTopWidth',		l.button:styles:border_top_width ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BorderRightWidth',		l.button:styles:border_right_width ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BorderBottomWidth',	l.button:styles:border_bottom_width ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BorderLeftWidth',		l.button:styles:border_left_width ) }">
					</Border>
				</MvIF>

				<MvIF EXPR = "{ l.button:styles:box_shadow_enabled:value }">
					<BoxShadow>
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_List(			'BoxShadowInset',	l.button:styles:box_shadow_inset,	'None,Inset',
																																		',inset' ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowOffsetX',	l.button:styles:box_shadow_offset_x ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowOffsetY',	l.button:styles:box_shadow_offset_y ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowBlur',	l.button:styles:box_shadow_blur ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowSpread',	l.button:styles:box_shadow_spread ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value(		'BoxShadowColor',	l.button:styles:box_shadow_color ) }">
					</BoxShadow>
				</MvIF>

				<MvIF EXPR = "{ l.button:styles:text_underline_enabled:value }">
					<TextUnderline>
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'TextUnderlineThickness',	l.button:styles:text_underline_thickness ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'TextUnderlineOffset',	l.button:styles:text_underline_offset ) }">
					</TextUnderline>
				</MvIF>
			</Styles>
			<HoverStyles>
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value( 'Color',			l.button:hover_styles:color ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value( 'BackgroundColor',	l.button:hover_styles:background_color ) }">

				<MvIF EXPR = "{ l.button:styles:border_enabled:value }">
					<Border>
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value( 'BorderColor',	l.button:hover_styles:border_color ) }">
					</Border>
				</MvIF>

				<MvIF EXPR = "{ l.button:hover_styles:box_shadow_enabled:value }">
					<BoxShadow>
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_List(			'BoxShadowInset',	l.button:hover_styles:box_shadow_inset,	'None,Inset',
																																			',inset' ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowOffsetX',	l.button:hover_styles:box_shadow_offset_x ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowOffsetY',	l.button:hover_styles:box_shadow_offset_y ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowBlur',	l.button:hover_styles:box_shadow_blur ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowSpread',	l.button:hover_styles:box_shadow_spread ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value(		'BoxShadowColor',	l.button:hover_styles:box_shadow_color ) }">
					</BoxShadow>
				</MvIF>

				<MvIF EXPR = "{ l.button:hover_styles:text_underline_enabled:value }">
					<TextUnderline>
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'TextUnderlineThickness',	l.button:hover_styles:text_underline_thickness ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'TextUnderlineOffset',	l.button:hover_styles:text_underline_offset ) }">
					</TextUnderline>
				</MvIF>
			</HoverStyles>
			<DisabledStyles>
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value( 'Color',			l.button:disabled_styles:color ) }">
				<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value( 'BackgroundColor',	l.button:disabled_styles:background_color ) }">

				<MvIF EXPR = "{ l.button:styles:border_enabled:value }">
					<Border>
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value( 'BorderColor', l.button:disabled_styles:border_color ) }">
					</Border>
				</MvIF>

				<MvIF EXPR = "{ l.button:disabled_styles:box_shadow_enabled:value }">
					<BoxShadow>
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_List(			'BoxShadowInset',	l.button:disabled_styles:box_shadow_inset,	'None,Inset',
																																				',inset' ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowOffsetX',	l.button:disabled_styles:box_shadow_offset_x ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowOffsetY',	l.button:disabled_styles:box_shadow_offset_y ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowBlur',	l.button:disabled_styles:box_shadow_blur ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit(	'BoxShadowSpread',	l.button:disabled_styles:box_shadow_spread ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_Value(		'BoxShadowColor',	l.button:disabled_styles:box_shadow_color ) }">
					</BoxShadow>
				</MvIF>

				<MvIF EXPR = "{ l.button:disabled_styles:text_underline_enabled:value }">
					<TextUnderline>
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'TextUnderlineThickness',	l.button:disabled_styles:text_underline_thickness ) }">
						<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'TextUnderlineOffset',	l.button:disabled_styles:text_underline_offset ) }">
					</TextUnderline>
				</MvIF>
			</DisabledStyles>
			<Sizes>
				<MvFOREACH ITERATOR = "l.size" ARRAY = "l.button:sizes" COUNT = "{ l.button:size_count }">
					<Size>
						<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.size:code ) }"></Code>
						<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.size:name ) }"></Name>
						<ClassName><MvEVAL EXPR = "{ miva_cdata_encode( l.size:classname ) }"></ClassName>

						<MvIF EXPR = "{ l.size:default }">
							<Default>Yes</Default>
						</MvIF>

						<Styles>
							<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'FontSize',		l.size:styles:font_size ) }">
							<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'LineHeight',		l.size:styles:line_height ) }">
							<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'LetterSpacing',	l.size:styles:letter_spacing ) }">
							<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'PaddingTop',		l.size:styles:padding_top ) }">
							<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'PaddingRight',	l.size:styles:padding_right ) }">
							<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'PaddingBottom',	l.size:styles:padding_bottom ) }">
							<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'PaddingLeft',	l.size:styles:padding_left ) }">
						</Styles>

						<BreakpointStyles>
							<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
								<MvREFERENCEARRAY NAME = "l.breakpoint_styles" VARIABLE = "l.size:breakpoint_styles">
									<MvMEMBER NAME = "{ l.breakpoint:code }">
								</MvREFERENCEARRAY>

								<Breakpoint code="{ encodeentities( l.breakpoint:code ) }">
									<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'FontSize',		l.breakpoint_styles:font_size ) }">
									<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'LineHeight',		l.breakpoint_styles:line_height ) }">
									<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'LetterSpacing',	l.breakpoint_styles:letter_spacing ) }">
									<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'PaddingTop',		l.breakpoint_styles:padding_top ) }">
									<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'PaddingRight',	l.breakpoint_styles:padding_right ) }">
									<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'PaddingBottom',	l.breakpoint_styles:padding_bottom ) }">
									<MvEVAL EXPR = "{ SKIN_Export_Theme_Field_LengthUnit( 'PaddingLeft',	l.breakpoint_styles:padding_left ) }">
								</Breakpoint>
							</MvFOREACH>
						</BreakpointStyles>
					</Size>
				</MvFOREACH>
			</Sizes>
		</ThemeButton_Add>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Theme_Field_Font" PARAMETERS = "tag_name, font var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.font:code AND NOT ISNULL l.font:weight AND NOT ISNULL l.font:style }">
		<MvEVAL EXPR = "{ '<' $ l.tag_name $ ' weight="' $ encodeentities( l.font:weight ) $ '" style="' $ encodeentities( l.font:style ) $ '">' $ miva_cdata_encode( l.font:code ) $ '</' $ l.tag_name $ '>' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Theme_Field_LengthUnit" PARAMETERS = "tag_name, lengthunit var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.lengthunit:unit AND NOT ISNULL l.lengthunit:value }">
		<MvEVAL EXPR = "{ '<' $ l.tag_name $ ' unit="' $ encodeentities( l.lengthunit:unit ) $ '">' $ miva_cdata_encode( l.lengthunit:value ) $ '</' $ l.tag_name $ '>' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Theme_Field_Boolean" PARAMETERS = "tag_name, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.settings:value }">
		<MvEVAL EXPR = "{ '<' $ l.tag_name $ '>' $ ternary( l.settings:value, 'Yes', 'No' ) $ '</' $ l.tag_name $ '>' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Theme_Field_Value" PARAMETERS = "tag_name, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.settings:value }">
		<MvEVAL EXPR = "{ '<' $ l.tag_name $ '>' $ miva_cdata_encode( l.settings:value ) $ '</' $ l.tag_name $ '>' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Theme_Field_List" PARAMETERS = "tag_name, settings var, tag_values, result_values" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null"			VALUE = "{ miva_splitstring( l.tag_values, ',', l.tag_values_list, 'trim' ) }">
	<MvASSIGN NAME = "l.null"			VALUE = "{ miva_splitstring( l.result_values, ',', l.result_values_list, 'trim' ) }">
	<MvASSIGN NAME = "l.match_index"	VALUE = "{ miva_array_search( l.result_values_list, 1, l.search_value, 'strcasecmp( l.search_value, l.settings:value ) EQ 0' ) }">

	<MvIF EXPR = "{ l.match_index GT 0 }">
		<MvEVAL EXPR = "{ '<' $ l.tag_name $ '>' $ miva_cdata_encode( l.tag_values_list[ l.match_index ] ) $ '</' $ l.tag_name $ '>' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Convert_StoreID_URL_Tokens" PARAMETERS = "original_css, tokenized_css var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ 'url(' CIN l.original_css EQ 0 }">
		<MvASSIGN NAME = "l.tokenized_css"		VALUE = "{ l.original_css }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.basehref"				VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_Get_Basehref_Path() }">
	<MvASSIGN NAME = "l.basehref_stripped"		VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_SanitizeAndStripLeadingTrailingSlashes_Path( l.basehref ) }">
	
	<MvWHILE EXPR = "{ 'url(' IN l.original_css }">
		<MvASSIGN NAME = "l.pos"				VALUE = "{ 'url(' IN l.original_css }">
		<MvASSIGN NAME = "l.tokenized_css"		VALUE = "{ l.tokenized_css $ substring( l.original_css, 1, ( l.pos + 3 ) ) }">

		<MvASSIGN NAME = "l.original_css"		VALUE = "{ substring( l.original_css, ( l.pos + 4 ), len( l.original_css ) ) }">
		<MvASSIGN NAME = "l.end_pos"			VALUE = "{ ')' IN l.original_css }">
		<MvASSIGN NAME = "l.url"				VALUE = "{ substring( l.original_css, 1, l.end_pos - 1 ) }">
		<MvASSIGN NAME = "l.original_css"		VALUE = "{ substring( l.original_css, l.end_pos, len( l.original_css ) ) }">

		<MvASSIGN NAME = "l.url"				VALUE = "{ glosub( l.url, '\'', '' ) }">
		<MvASSIGN NAME = "l.url"				VALUE = "{ glosub( l.url, '"', '' ) }">
		<MvASSIGN NAME = "l.url"				VALUE = "{ trim( l.url ) }">

		<MvASSIGN NAME = "l.url"				VALUE = "{ glosub( l.url, padl( g.Store:id, 8, '0' ) $ '/', '%STORE_ID%/' ) }">
		<MvIF EXPR = "{ ( '/' CIN l.url EQ 1 ) AND ( l.basehref_stripped IN l.url EQ 2 ) }">
			<MvASSIGN NAME = "l.url"			VALUE = "{ '/%STORE_BASEHREF%' $ substring( l.url, len( l.basehref ), len( l.url ) ) }">
		</MvIF>

		<MvASSIGN NAME = "l.tokenized_css"		VALUE = "{ l.tokenized_css $ l.url }">

		<MvIF EXPR = "{ NOT ( 'url(' CIN l.original_css ) }">
			<MvASSIGN NAME = "l.tokenized_css"	VALUE = "{ l.tokenized_css $ l.original_css }">
		</MvIF>
	</MvWHILE>
</MvFUNCTION>

<MvFUNCTION NAME = "Build_CSS_Export_Path" PARAMETERS = "skin_dir, full_css_path, output" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.desired_path"	VALUE = "{ l.full_css_path }">
	<MvASSIGN NAME = "l.slash"			VALUE = "{ '/' IN l.desired_path }">

	<MvWHILE EXPR = "{ l.slash GT 0 }">
		<MvIF EXPR = "{ l.slash EQ 1 }">
			<MvASSIGN NAME = "l.desired_path"	VALUE = "{ substring( l.desired_path, l.slash + 1, len( l.desired_path ) ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.new_path"		VALUE = "{ l.new_path $ substring( l.desired_path, 1, l.slash ) }">
			<MvASSIGN NAME = "l.desired_path"	VALUE = "{ substring( l.desired_path, l.slash + 1, len( l.desired_path ) ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT sexists( l.skin_dir $ l.new_path ) }">
			<MvIF EXPR = "{ NOT smkdir( l.skin_dir $ l.new_path ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT schmod( l.skin_dir $ l.new_path, '0755' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.slash" VALUE = "{ '/' IN l.desired_path }">
	</MvWHILE>

	<MvIF EXPR = "{ file_create( l.skin_dir $ l.new_path $ l.desired_path, 'script', l.output ) GE 0 }">
		<MvASSIGN NAME = "l.ok"	VALUE = "{ fchmod( l.skin_dir $ l.desired_path, '0644' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Config" PARAMETERS = "SKIN_dir, component_list, control var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '<Config>' }">

	<MvCOMMENT>
	|
	| Cache Settings
	|
	</MvCOMMENT>

	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<CacheSettings_Update>
			<Settings>
				<MvFOREACH ITERATOR = "l.type" ARRAY = "l.types" COUNT = "{ miva_struct_members( g.Store:cacheset, l.types ) }">
					<MvREFERENCEARRAY NAME = "l.name_struct" VARIABLE = "g.Store:cacheset">
						<MvMEMBER NAME = "{ l.type }">
					</MvREFERENCEARRAY>

					<MvFOREACH ITERATOR = "l.name" ARRAY = "l.names" COUNT = "{ miva_struct_members( l.name_struct, l.names ) }">
						<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "g.Store:cacheset">
							<MvMEMBER NAME = "{ l.type }">
							<MvMEMBER NAME = "{ l.name }">
						</MvREFERENCEARRAY>

						<MvIF EXPR = "{ l.type EQ 'header' }">			<Header name="{ encodeentities( l.name ) }" mode="{ encodeentities( l.settings:mode ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:value ) }"></Header>
						<MvELSEIF EXPR = "{ l.type EQ 'parameter' }">	<Parameter name="{ encodeentities( l.name ) }" mode="{ encodeentities( l.settings:mode ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:value ) }"></Parameter>
						<MvELSEIF EXPR = "{ l.type EQ 'cookie' }">		<Cookie name="{ encodeentities( l.name ) }" mode="{ encodeentities( l.settings:mode ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:value ) }"></Cookie>
						</MvIF>
					</MvFOREACH>
				</MvFOREACH>
			</Settings>
		</CacheSettings_Update>
	</MvCAPTURE>

	<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ l.output }">
	
	<MvCOMMENT>
	|
	| Customer Field Settings
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.pos" VALUE = 1>
	<MvASSIGN NAME = "l.count"	VALUE = "{ miva_array_max( l.component_list ) }">

	<MvWHILE EXPR = "{ l.pos LE l.count }">
		<MvIF EXPR = "{ l.component_list[ l.pos ] EQ 'customer'			OR 
						l.component_list[ l.pos ] EQ 'order_customer'	OR
						l.component_list[ l.pos ] EQ 'view_order' }">
			<MvASSIGN NAME = "l.found" VALUE = 1>
			<MvWHILESTOP>
		</MvIF>

		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvWHILE>
	
	<MvIF EXPR = "{ l.found }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StandardFields_Load_Cached( l.standard_fields ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00045', 'Unable to load customer fields settings' ) }">
		</MvIF>
		
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '    <CustomerFields_Update>' }">

		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Shipping>'	$ CustomerFields_Translate_Value( l.standard_fields:shipping )		$ '</Shipping>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Billing>'	$ CustomerFields_Translate_Value( l.standard_fields:billing )		$ '</Billing>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Primary>'	$ CustomerFields_Translate_Value( l.standard_fields:primaddr )		$ '</Primary>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <FirstName>' $ CustomerFields_Translate_Value( l.standard_fields:mode_fname	)	$ '</FirstName>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <LastName>'	$ CustomerFields_Translate_Value( l.standard_fields:mode_lname	)	$ '</LastName>'	}">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Email>'		$ CustomerFields_Translate_Value( l.standard_fields:mode_email	)	$ '</Email>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Phone>'		$ CustomerFields_Translate_Value( l.standard_fields:mode_phone	)	$ '</Phone>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Fax>'		$ CustomerFields_Translate_Value( l.standard_fields:mode_fax )		$ '</Fax>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Company>'	$ CustomerFields_Translate_Value( l.standard_fields:mode_comp )		$ '</Company>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Address>'	$ CustomerFields_Translate_Value( l.standard_fields:mode_addr )		$ '</Address>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Address2>'	$ CustomerFields_Translate_Value( l.standard_fields:mode_addr2 )	$ '</Address2>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <City>'		$ CustomerFields_Translate_Value( l.standard_fields:mode_city )		$ '</City>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <State>'		$ CustomerFields_Translate_Value( l.standard_fields:mode_state )	$ '</State>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Zip>'		$ CustomerFields_Translate_Value( l.standard_fields:mode_zip )		$ '</Zip>' }">
		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '        <Country>'	$ CustomerFields_Translate_Value( l.standard_fields:mode_cntry	)	$ '</Country>' }">

		<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '    </CustomerFields_Update>' }">
	</MvIF>

	<MvASSIGN NAME = "l.control" VALUE = "{ l.control $ asciichar( 10 ) $ '</Config>' }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CustomerFields_Translate_Value" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.value EQ 'D' }">
		<MvASSIGN NAME = "l.value" VALUE = "{ 'Defaults' }">
	<MvELSEIF EXPR = "{ l.value EQ 'R' }">
		<MvASSIGN NAME = "l.value" VALUE = "Required">
	<MvELSEIF EXPR = "{ l.value EQ 'H' }">
		<MvASSIGN NAME = "l.value" VALUE = "Hidden">
	<MvELSEIF EXPR = "{ l.value EQ 'shipping' }">
		<MvASSIGN NAME = "l.value" VALUE = "Shipping">
	<MvELSEIF EXPR = "{ l.value EQ 'billing' }">
		<MvASSIGN NAME = "l.value" VALUE = "Billing">
	<MvELSEIF EXPR = "{ l.value EQ 'O' }">
		<MvASSIGN NAME = "l.value" VALUE = "{ 'Optional' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "SKIN_Export_Remove_Assignment" PARAMETERS = "settings, remove" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.work"	VALUE = "{ l.settings }">
	<MvASSIGN NAME = "l.remove"	VALUE = "{ ':' $ l.remove $ '=' }">
	<MvASSIGN NAME = "l.t_pos"	VALUE = "{ l.remove IN l.work }">

	<MvWHILE EXPR = "{ l.t_pos }">
		<MvASSIGN NAME = "l.comma_pos"	VALUE = "{ l.t_pos }">
		<MvWHILE EXPR = "{ substring( l.work, l.comma_pos, 1 ) NE ',' AND l.comma_pos GT 0 }">
			<MvASSIGN NAME = "l.comma_pos"	VALUE = "{ l.comma_pos - 1 }">
		</MvWHILE>
		<MvASSIGN NAME = "l.next_comma_pos"	VALUE = "{ l.t_pos }">
		<MvASSIGN NAME = "l.work_length"	VALUE = "{ len( l.work ) }">
		<MvWHILE EXPR = "{ substring( l.work, l.next_comma_pos, 1 ) NE ',' AND l.next_comma_pos NE l.work_length }">
			<MvASSIGN NAME = "l.next_comma_pos"	VALUE = "{ l.next_comma_pos + 1 }">
		</MvWHILE>
		<MvIF EXPR = "{ l.comma_pos NE 0 }">
			<MvASSIGN NAME = "l.result"		VALUE = "{ l.result $ substring( l.work, 1, l.comma_pos ) }">
		</MvIF>
		<MvIF EXPR = "{ l.next_comma_pos EQ l.work_length }">
			<MvASSIGN NAME = "l.work"		VALUE = "">
		<MvELSE>
			<MvASSIGN NAME = "l.work"		VALUE = "{ substring( l.work, l.next_comma_pos + 1 , l.work_length ) }">
		</MvIF>

		<MvASSIGN NAME = "l.t_pos"		VALUE = "{ l.remove IN l.work }">
	</MvWHILE>

	<MvASSIGN NAME = "l.result"		VALUE = "{ l.result $ l.work }">

	<MvASSIGN NAME = "l.result_len"	VALUE = "{ len( l.result ) }">
	<MvIF EXPR = "{ substring( l.result, l.result_len , 1 ) EQ ',' }">
		<MvASSIGN NAME = "l.result"	VALUE = "{ substring( l.result, 1, l.result_len - 1 ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>
		
<MvFUNCTION NAME = "SKIN_Directory_Verify" PARAMETERS = "skin_code, skin_dir var, skin_file var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.skin_root"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( g.Module_Root_Versionless, 'frameworks/' $ padl( g.Store:id, 8, '0' ) $ '/' ) }">
	<MvASSIGN NAME = "l.skin_dir"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.skin_root, l.skin_code ) $ '/' }">
	<MvASSIGN NAME = "l.skin_file"			VALUE = "{ [ g.Feature_Filename_TUI_MGR ].TemplateManager_ConcatenatePath( l.skin_root, l.skin_code ) $ '.pkg' }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Common component field initialization routines
|
</MvCOMMENT>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Order" PARAMETERS = "order var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This logic mirrors Order_Status() in admin/ui.js
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.order:status EQ 100 }">		<MvASSIGN NAME = "l.order:formatted_status"	VALUE = "Processing">
	<MvELSEIF EXPR = "{ l.order:status EQ 200 }">	<MvASSIGN NAME = "l.order:formatted_status" VALUE = "Shipped">
	<MvELSEIF EXPR = "{ l.order:status EQ 201 }">	<MvASSIGN NAME = "l.order:formatted_status" VALUE = "Partially Shipped">
	<MvELSEIF EXPR = "{ l.order:status EQ 300 }">	<MvASSIGN NAME = "l.order:formatted_status" VALUE = "Cancelled">
	<MvELSEIF EXPR = "{ l.order:status EQ 400 }">	<MvASSIGN NAME = "l.order:formatted_status" VALUE = "Backordered">
	<MvELSEIF EXPR = "{ l.order:status EQ 500 }">	<MvASSIGN NAME = "l.order:formatted_status" VALUE = "RMA Issued">
	<MvELSEIF EXPR = "{ l.order:status EQ 600 }">	<MvASSIGN NAME = "l.order:formatted_status" VALUE = "Returned">
	<MvELSE>										<MvASSIGN NAME = "l.order:formatted_status" VALUE = "Pending">
	</MvIF>

	<MvASSIGN NAME = "l.order:date"				VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.order:orderdate, s.miva_language ) }">
	<MvASSIGN NAME = "l.order:time"				VALUE = "{ [ g.Module_Library_Utilities ].Format_Time( l.order:orderdate, s.miva_language ) }">
	<MvASSIGN NAME = "l.order:formatted_total"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.order:total ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Order_RemovePII" PARAMETERS = "order var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.order:ship_res"		VALUE = "">
	<MvASSIGN NAME = "l.order:ship_fname"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_lname"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_email"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_comp"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_phone"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_fax"		VALUE = "">
	<MvASSIGN NAME = "l.order:ship_addr"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_addr1"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_addr2"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_city"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_state"	VALUE = "">
	<MvASSIGN NAME = "l.order:ship_zip"		VALUE = "">
	<MvASSIGN NAME = "l.order:ship_cntry"	VALUE = "">

	<MvASSIGN NAME = "l.order:bill_fname"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_lname"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_email"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_comp"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_phone"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_fax"		VALUE = "">
	<MvASSIGN NAME = "l.order:bill_addr"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_addr1"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_addr2"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_city"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_state"	VALUE = "">
	<MvASSIGN NAME = "l.order:bill_zip"		VALUE = "">
	<MvASSIGN NAME = "l.order:bill_cntry"	VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_OrderItems" PARAMETERS = "orderitems var, orderitem_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.orderitem" ARRAY = "l.orderitems" COUNT = "{ l.orderitem_count }">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_OrderItem( l.orderitem ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_OrderItem" PARAMETERS = "orderitem var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.orderitem:_initialized }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.orderitem:_initialized"							VALUE = 1>

	<MvCOMMENT>
	|
	| This code mirrors OrderItem_Status() in admin/ui.js
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.orderitem:formatted_dt_instock"					VALUE = "">

	<MvIF EXPR = "{ ( l.orderitem:status EQ 100 ) OR
					( l.orderitem:status EQ 200 ) }">
		<MvIF EXPR = "{ l.orderitem:shpmnt_id EQ 0 }">
			<MvASSIGN NAME = "l.shipment_loaded"						VALUE = 0>
		<MvELSEIF EXPR = "{ l.orderitem:shipment:id EQ l.orderitem:shpmnt_id }">
			<MvASSIGN NAME = "l.shipment_loaded"						VALUE = 1>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderShipment_Load_ID( l.orderitem:shpmnt_id, l.orderitem:shipment ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.shipment_loaded"						VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.shipment_loaded"						VALUE = 1>

			<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_OrderShipment( l.orderitem:shipment ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.orderitem:status EQ 100 }">
			<MvASSIGN NAME = "l.orderitem:formatted_status"				VALUE = "Picking">
			
			<MvIF EXPR = "{ l.shipment_loaded }">
				<MvASSIGN NAME = "l.orderitem:formatted_status"			VALUE = "{ l.orderitem:formatted_status $ ': ' $ l.orderitem:shipment:code }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.orderitem:status EQ 200 }">
			<MvASSIGN NAME = "l.orderitem:formatted_status"				VALUE = "Shipped">
			
			<MvIF EXPR = "{ l.shipment_loaded AND ( len( l.orderitem:shipment:tracknum ) GT 0 ) }">
				<MvASSIGN NAME = "l.orderitem:formatted_status"			VALUE = "{ l.orderitem:formatted_status $ ': ' $ l.orderitem:shipment:tracknum }">
			</MvIF>
		</MvIF>
	<MvELSEIF EXPR = "{ l.orderitem:status EQ 210 }">
		<MvASSIGN NAME = "l.orderitem:formatted_status"					VALUE = "Gift Certificate: Not Redeemed">
	<MvELSEIF EXPR = "{ l.orderitem:status EQ 211 }">
		<MvASSIGN NAME = "l.orderitem:formatted_status"					VALUE = "Gift Certificate: Redeemed">
	<MvELSEIF EXPR = "{ l.orderitem:status EQ 220 }">
		<MvASSIGN NAME = "l.orderitem:formatted_status"					VALUE = "Digital: Not Downloaded">
	<MvELSEIF EXPR = "{ l.orderitem:status EQ 221 }">
		<MvASSIGN NAME = "l.orderitem:formatted_status"					VALUE = "Digital: Downloaded">
	<MvELSEIF EXPR = "{ l.orderitem:status EQ 300 }">
		<MvASSIGN NAME = "l.orderitem:formatted_status"					VALUE = "Cancelled">
	<MvELSEIF EXPR = "{ l.orderitem:status EQ 400 }">
		<MvASSIGN NAME = "l.orderitem:formatted_status"					VALUE = "Backordered">

		<MvIF EXPR = "{ l.orderitem:dt_instock }">
			<MvASSIGN NAME = "l.orderitem:formatted_dt_instock"			VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.orderitem:dt_instock, s.miva_language ) }">
			<MvASSIGN NAME = "l.orderitem:formatted_status"				VALUE = "{ l.orderitem:formatted_status $ ': ' $ l.orderitem:formatted_dt_instock }">
		</MvIF>
	<MvELSEIF EXPR = "{ ( l.orderitem:status EQ 500 ) OR
						( l.orderitem:status EQ 600 ) }">
		<MvIF EXPR = "{ l.orderitem:rma_id EQ 0 }">
			<MvASSIGN NAME = "l.return_loaded"							VALUE = 0>
		<MvELSEIF EXPR = "{ l.orderitem:return:id EQ l.orderitem:rma_id }">
			<MvASSIGN NAME = "l.return_loaded"							VALUE = 1>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderReturn_Load_ID( l.orderitem:rma_id, l.orderitem:return ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.return_loaded"							VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.return_loaded"							VALUE = 1>

			<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_OrderReturn( l.orderitem:return ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.orderitem:status EQ 500 }">
			<MvASSIGN NAME = "l.orderitem:formatted_status"				VALUE = "RMA Issued">

			<MvIF EXPR = "{ l.return_loaded }">
				<MvASSIGN NAME = "l.orderitem:formatted_status"	VALUE = "{ l.orderitem:formatted_status $ ': ' $ l.orderitem:return:code }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.orderitem:status EQ 600 }">
			<MvASSIGN NAME = "l.orderitem:formatted_status"				VALUE = "Returned">

			<MvIF EXPR = "{ l.return_loaded AND l.orderitem:return:dt_recvd }">
				<MvASSIGN NAME = "l.orderitem:formatted_status"			VALUE = "{ l.orderitem:formatted_status $ ': ' $ l.orderitem:return:formatted_dt_recvd }">
			</MvIF>
		</MvIF>
	<MvELSEIF EXPR = "{ l.orderitem:status EQ 999 }">
		<MvASSIGN NAME = "l.orderitem:formatted_status"					VALUE = "Adjustment">
	<MvELSE>
		<MvASSIGN NAME = "l.orderitem:formatted_status"					VALUE = "Pending">
	</MvIF>

	<MvIF EXPR = "{ l.orderitem:subscrp_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].Subscription_Load_ID( l.orderitem:subscrp_id, l.orderitem:subscription ) }">
			<MvASSIGN NAME = "l.orderitem:subscription"					VALUE = "">
		<MvELSE>
			<MvASSIGN NAME = "l.orderitem:subscription:option_count"	VALUE = "{ [ g.Module_Feature_SUB_DB ].SubscriptionOptionList_Load_Subscription( l.orderitem:subscription:id, l.orderitem:subscription:options ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_ID( l.orderitem:subscription:subterm_id, l.orderitem:subscription:productsubscriptionterm ) }">
				<MvASSIGN NAME = "l.orderitem:subscription:productsubscriptionterm" VALUE = "">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.orderitem:subtotal_retail"								VALUE = "{ l.orderitem:retail * l.orderitem:quantity }">
	<MvASSIGN NAME = "l.orderitem:subtotal_base_price"							VALUE = "{ l.orderitem:base_price * l.orderitem:quantity }">
	<MvASSIGN NAME = "l.orderitem:subtotal"										VALUE = "{ l.orderitem:price * l.orderitem:quantity }">
	<MvASSIGN NAME = "l.orderitem:formatted_retail"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:retail ) }">
	<MvASSIGN NAME = "l.orderitem:formatted_base_price"							VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:base_price ) }">
	<MvASSIGN NAME = "l.orderitem:formatted_price"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:price ) }">
	<MvASSIGN NAME = "l.orderitem:formatted_subtotal"							VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:subtotal ) }">
	<MvASSIGN NAME = "l.orderitem:formatted_subtotal_base_price"				VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:subtotal_base_price ) }">
	<MvASSIGN NAME = "l.orderitem:formatted_subtotal_retail"					VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:subtotal_retail ) }">
	<MvASSIGN NAME = "l.orderitem:formatted_total"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:total ) }">
	<MvASSIGN NAME = "l.orderitem:formatted_weight"								VALUE = "{ [ g.Module_Library_Utilities ].Format_Weight( l.orderitem:weight ) }">

	<MvASSIGN NAME = "l.orderitem_total_base_price"								VALUE = "{ l.orderitem:subtotal_base_price }">
	<MvASSIGN NAME = "l.orderitem_total_retail"									VALUE = "{ l.orderitem:subtotal_retail }">

	<MvASSIGN NAME = "l.orderitem:discount_count"								VALUE = "{ [ g.Module_Library_DB ].OrderItemDiscountList_Load_Line( l.orderitem:line_id, l.orderitem:discounts ) }">
	<MvFOREACH ITERATOR = "l.orderitemdiscount" ARRAY = "l.orderitem:discounts" COUNT = "{ l.orderitem:discount_count }">
		<MvASSIGN NAME = "l.orderitemdiscount:formatted_discount"				VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitemdiscount:discount ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.orderitem:option_count"									VALUE = "{ [ g.Module_Library_DB ].OrderOptionList_Load_Line( l.orderitem:line_id, l.orderitem:options ) }">
	<MvFOREACH ITERATOR = "l.orderoption" ARRAY = "l.orderitem:options" COUNT = "{ l.orderitem:option_count }">
		<MvIF EXPR = "{ len( l.orderoption:data ) }">
			<MvASSIGN NAME = "l.orderoption:data"								VALUE = "{ encodeentities( l.orderoption:data ) }">
			<MvASSIGN NAME = "l.orderoption:data"								VALUE = "{ glosub( l.orderoption:data, asciichar( 10 ), '<br>' ) }">
		<MvELSEIF EXPR = "{ len( l.orderoption:data_long ) }">
			<MvASSIGN NAME = "l.orderoption:data_long"							VALUE = "{ encodeentities( l.orderoption:data_long ) }">
			<MvASSIGN NAME = "l.orderoption:data_long"							VALUE = "{ glosub( l.orderoption:data_long, asciichar( 10 ), '<br>' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.orderoption:subtotal_retail"						VALUE = "{ l.orderoption:retail * l.orderitem:quantity }">
		<MvASSIGN NAME = "l.orderoption:subtotal_base_price"					VALUE = "{ l.orderoption:base_price * l.orderitem:quantity }">
		<MvASSIGN NAME = "l.orderoption:subtotal"								VALUE = "{ l.orderoption:price * l.orderitem:quantity }">
		<MvASSIGN NAME = "l.orderoption:formatted_retail"						VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderoption:retail ) }">
		<MvASSIGN NAME = "l.orderoption:formatted_base_price"					VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderoption:base_price ) }">
		<MvASSIGN NAME = "l.orderoption:formatted_price"						VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderoption:price ) }">
		<MvASSIGN NAME = "l.orderoption:formatted_subtotal_retail"				VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderoption:subtotal_retail ) }">
		<MvASSIGN NAME = "l.orderoption:formatted_subtotal_base_price"			VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderoption:subtotal_base_price ) }">
		<MvASSIGN NAME = "l.orderoption:formatted_subtotal"						VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderoption:subtotal ) }">

		<MvASSIGN NAME = "l.orderitem_total_base_price"							VALUE = "{ l.orderitem_total_base_price + l.orderoption:subtotal_base_price }">
		<MvASSIGN NAME = "l.orderitem_total_retail"								VALUE = "{ l.orderitem_total_retail + l.orderoption:subtotal_retail }">

		<MvIF EXPR = "{ l.orderoption:attr_code EQ 'digitaldownload' }">
			<MvASSIGN NAME = "l.orderoption:digital_download_url"				VALUE = "{ [ g.Module_Feature_DDL_UT ].DigitalDownload_Generate_DownloadURL( l.orderoption:data ) }">
		</MvIF>

		<MvASSIGN NAME = "l.orderoption:discount_count"							VALUE = "{ [ g.Module_Library_DB ].OrderOptionDiscountList_Load_LineOption_ID( l.orderoption:id, l.orderoption:discounts ) }">
		<MvFOREACH ITERATOR = "l.orderoptiondiscount" ARRAY = "l.orderoption:discounts" COUNT = "{ l.orderoption:discount_count }">
			<MvASSIGN NAME = "l.orderoptiondiscount:formatted_discount"			VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderoptiondiscount:discount ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvASSIGN NAME = "l.orderitem:subtotal_base_price_comprehensive"			VALUE = "{ [ g.Module_Library_Utilities ].Round_Item_Total( l.orderitem_total_base_price ) }">
	<MvASSIGN NAME = "l.orderitem:subtotal_retail_comprehensive"				VALUE = "{ [ g.Module_Library_Utilities ].Round_Item_Total( l.orderitem_total_retail ) }">
	<MvASSIGN NAME = "l.orderitem:subtotal_comprehensive"						VALUE = "{ l.orderitem:total }">

	<MvASSIGN NAME = "l.orderitem:formatted_subtotal_base_price_comprehensive"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:subtotal_base_price_comprehensive ) }">
	<MvASSIGN NAME = "l.orderitem:formatted_subtotal_retail_comprehensive"		VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:subtotal_retail_comprehensive ) }">
	<MvASSIGN NAME = "l.orderitem:formatted_subtotal_comprehensive"				VALUE = "{ l.orderitem:formatted_total }">

	<MvCOMMENT>
	|
	| Generate combined parent / child totals tokens only for items that have a :child_count value
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( l.orderitem:parent_id EQ 0 ) AND ( NOT ISNULL l.orderitem:child_count ) }">
		<MvASSIGN NAME = "l.orderitem:total_with_children"											VALUE = "{ l.orderitem:total }">
		<MvASSIGN NAME = "l.orderitem:subtotal_base_price_comprehensive_with_children"				VALUE = "{ l.orderitem:subtotal_base_price_comprehensive }">

		<MvFOREACH ITERATOR = "l.child_orderitem" ARRAY = "l.orderitem:children" COUNT = "{ l.orderitem:child_count }">
			<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_OrderItem( l.child_orderitem ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.orderitem:total_with_children"										VALUE = "{ l.orderitem:total_with_children + l.child_orderitem:total }">
			<MvASSIGN NAME = "l.orderitem:subtotal_base_price_comprehensive_with_children"			VALUE = "{ l.orderitem:subtotal_base_price_comprehensive_with_children + l.child_orderitem:subtotal_base_price_comprehensive }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.orderitem:formatted_total_with_children"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:total_with_children ) }">
		<MvASSIGN NAME = "l.orderitem:formatted_subtotal_base_price_comprehensive_with_children"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderitem:subtotal_base_price_comprehensive_with_children ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_OrderItems_WithParts" PARAMETERS = "orderitems var, orderitem_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.orderitem" ARRAY = "l.orderitems" COUNT = "{ l.orderitem_count }">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_OrderItem_WithParts( l.orderitem ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_OrderItem_WithParts" PARAMETERS = "orderitem var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_OrderItem( l.orderitem ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].OrderItem_DetermineVariant_WithOptions( l.orderitem,
																							   l.orderitem:options, l.orderitem:option_count,
																							   l.orderitem:product, l.orderitem:variant_id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ l.orderitem:product:id }">
		<MvASSIGN NAME = "l.orderitem:part_count"		VALUE = "{ [ g.Module_Library_DB ].ProductList_Load_Variant( l.orderitem:product:id, l.orderitem:variant_id, l.orderitem:parts ) }">

		<MvFOREACH ITERATOR = "l.part" ARRAY = "l.orderitem:parts" COUNT = "{ l.orderitem:part_count }">
			<MvASSIGN NAME = "l.part:total_quantity"	VALUE = "{ l.orderitem:quantity * l.part:quantity }">
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_OrderShipment" PARAMETERS = "shipment var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.shipment:tracklink"				VALUE = "">
	<MvASSIGN NAME = "l.shipment:formatted_ship_date"	VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.shipment:ship_date, s.miva_language ) }">
	<MvASSIGN NAME = "l.shipment:formatted_ship_time"	VALUE = "{ [ g.Module_Library_Utilities ].Format_Time( l.shipment:ship_date, s.miva_language ) }">

	<MvIF EXPR = "{ ( NOT ISNULL l.shipment:tracknum ) AND ( NOT ISNULL l.shipment:tracktype ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].TrackingLink_Load_Type( l.shipment:tracktype, l.tracklink ) }">
			<MvASSIGN NAME = "l.shipment:tracklink"	VALUE = "{ glosub( l.tracklink:url, '%tracknum%', l.shipment:tracknum ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_OrderReturn" PARAMETERS = "return var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.return:formatted_dt_issued"			VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.return:dt_issued, s.miva_language ) }">

	<MvIF EXPR = "{ l.return:status EQ 500 }">	
		<MvASSIGN NAME = "l.return:formatted_status"		VALUE = "RMA Issued">
	<MvELSEIF EXPR = "{ l.return:status EQ 600 }">
		<MvIF EXPR = "{ l.return:dt_recvd EQ 0 }">
			<MvASSIGN NAME = "l.return:formatted_status"	VALUE = "Received">
		<MvELSE>
			<MvASSIGN NAME = "l.return:formatted_dt_recvd"	VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.return:dt_recvd, s.miva_language ) }">
			<MvASSIGN NAME = "l.return:formatted_status"	VALUE = "{ 'Received: ' $ l.return:formatted_dt_recvd }">
		</MvIF>
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_OrderCharges" PARAMETERS = "ordercharges var, ordercharge_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.ordercharge" ARRAY = "l.ordercharges" COUNT = "{ l.ordercharge_count }">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_OrderCharge( l.ordercharge ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_OrderCharge" PARAMETERS = "ordercharge var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.ordercharge:formatted_disp_amt"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.ordercharge:disp_amt ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Product_CustomField_Lookup" PARAMETERS = "all_settings var, fields_custom var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.fields"			VALUE = "">
	<MvASSIGN NAME = "l.field_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ CommonComponentFields_Initialize_xxx_CustomField_ModuleList_Load( l.all_settings, l.fields_custom, 'fields_prod', l.modules ) }">
		<MvASSIGN NAME = "l.module_fields"		VALUE = "">
		<MvASSIGN NAME = "l.module_field_count"	VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Product_Fields( l.module, l.module_fields ) }">

		<MvEVAL EXPR = "{ CommonComponentFields_Initialize_xxx_CustomField_Filter_ModuleFields( l.module, l.fields_custom, l.module_fields, l.module_field_count, l.fields, l.field_count ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ CommonComponentFields_Initialize_xxx_CustomField_Lookup( l.fields, l.field_count, 'fields_prod_map', l.all_settings:_mgr:product_customfield_plan, l.all_settings:customfield_names ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Product_Runtime" PARAMETERS = "product var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.product:retail"					VALUE = "{ l.product:price }">

	<MvIF EXPR = "{ ISNULL l.product:base_price }">		<MvASSIGN NAME = "l.product:base_price"	VALUE = "{ [ g.Module_Library_Utilities ].Adjusted_Price( l.product, l.product:price, l.product:cost ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.product:sale_price }">	<MvASSIGN NAME = "l.product:price"		VALUE = "{ l.product:sale_price }">
	<MvELSE>											<MvASSIGN NAME = "l.product:price"		VALUE = "{ l.product:base_price }">
	</MvIF>

	<MvASSIGN NAME = "l.product:formatted_retail"		VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.product:retail ) }">
	<MvASSIGN NAME = "l.product:formatted_base_price"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.product:base_price ) }">
	<MvASSIGN NAME = "l.product:formatted_price"		VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.product:price ) }">
	<MvASSIGN NAME = "l.product:formatted_cost"			VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.product:cost ) }">
	<MvASSIGN NAME = "l.product:formatted_weight"		VALUE = "{ [ g.Module_Library_Utilities ].Format_Weight( l.product:weight ) }">
	<MvASSIGN NAME = "l.product:weight"					VALUE = "{ [ g.Module_Library_Utilities ].Decimal_Pad( l.product:weight, g.Store:wtdispdig ) }">
	<MvASSIGN NAME = "l.product:quantity"				VALUE = "{ [ g.Module_Library_DB ].Basket_Quantity( g.Basket:basket_id, l.product:id ) }">

	<MvIF EXPR = "{ l.product:cancat_id }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Runtime_Category_Load_ID_Cached( l.product:cancat_id, l.category ) }">
			<MvREFERENCE NAME = "l.product:canonical_category" VARIABLE = "l.category">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Product_Discounts_Runtime" PARAMETERS = "products var, product_count" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_CreateFromBasket( g.Basket, l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Load_PriceGroups_Basket( g.Basket, l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Disable_Unused_Item_PriceGroups( l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Predict_Baseline_Discounts( l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products" COUNT = "{ l.product_count }">
		<MvIF EXPR = "{ l.product:id LE 0 }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.product:base_price }">
			<MvASSIGN NAME = "l.product:price"					VALUE = "{ l.product:base_price }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Predict_Product_Discounts_WithProductSubscriptionTerm( l.discount_state, l.product, 0, 0, 1, l.product:price, l.product:discounts, l.product:discount_count ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.product:formatted_price"			VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.product:price ) }">

		<MvFOREACH ITERATOR = "l.discount" ARRAY = "l.product:discounts" COUNT = "{ l.product:discount_count }">
			<MvASSIGN NAME = "l.discount:formatted_discount"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.discount:discount ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Product_Discounts_Runtime_WithProductSubscriptionTerm" PARAMETERS = "product var, subterm_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_CreateFromBasket( g.Basket, l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Load_PriceGroups_Basket( g.Basket, l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Disable_Unused_Item_PriceGroups( l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Predict_Baseline_Discounts( l.discount_state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.product:base_price }">
		<MvASSIGN NAME = "l.product:price"					VALUE = "{ l.product:base_price }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Predict_Product_Discounts_WithProductSubscriptionTerm( l.discount_state, l.product, l.subterm_id, 0, 1, l.product:price, l.product:discounts, l.product:discount_count ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.product:formatted_price"			VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.product:price ) }">

	<MvFOREACH ITERATOR = "l.discount" ARRAY = "l.product:discounts" COUNT = "{ l.product:discount_count }">
		<MvASSIGN NAME = "l.discount:formatted_discount"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.discount:discount ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Product_CustomFields" PARAMETERS = "product_id, output var, all_settings var, fields_custom var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.all_settings:_mgr:product_customfield_plan }">
		<MvFOREACH ITERATOR = "l.plan" ARRAY = "l.all_settings:_mgr:product_customfield_plan">
			<MvIF EXPR = "{ NOT ISNULL l.plan:field_map }">
				<MvREFERENCEARRAY NAME = "l.module_output" VARIABLE = "l.output">
					<MvMEMBER NAME = "customfield_values">
					<MvMEMBER NAME = "{ l.plan:output_module_code }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Product_Fields_Mapped( l.plan:module, l.product_id, l.plan:field_map, l.module_output ) }">
			<MvELSEIF EXPR = "{ l.plan:field_array }">
				<MvIF EXPR = "{ l.plan:module:api_ver LT 9.08 }">
					<MvASSIGNARRAY NAME = "l.output" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Product_Field_Value( l.plan:module, l.product_id, l.plan:field_code ) }">
						<MvMEMBER NAME = "customfield_values">
						<MvMEMBER NAME = "{ l.plan:output_module_code }">
						<MvMEMBER NAME = "{ l.plan:output_field_code }">
					</MvASSIGNARRAY>
				<MvELSE>
					<MvREFERENCEARRAY NAME = "l.array_output" VARIABLE = "l.output">
						<MvMEMBER NAME = "customfield_values">
						<MvMEMBER NAME = "{ l.plan:output_module_code }">
						<MvMEMBER NAME = "{ l.plan:output_field_code }">
					</MvREFERENCEARRAY>

					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Product_Field_Value_Array( l.plan:module, l.product_id, l.plan:field_code, l.array_output ) }">
				</MvIF>
			<MvELSE>
				<MvASSIGNARRAY NAME = "l.output" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Product_Field_Value( l.plan:module, l.product_id, l.plan:field_code ) }">
					<MvMEMBER NAME = "customfield_values">
					<MvMEMBER NAME = "{ l.plan:output_module_code }">
					<MvMEMBER NAME = "{ l.plan:output_field_code }">
				</MvASSIGNARRAY>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.fields_custom">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_Product_CustomField( l.product_id, l.output, l.all_settings, l.field:module, l.field:code ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Product_CustomField" PARAMETERS = "product_id, output var, all_settings var, module_code, field_code" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.module" VARIABLE = "l.all_settings">
		<MvMEMBER NAME = "cached_modules">
		<MvMEMBER NAME = "{ l.module_code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.module:skip OR ( ISNULL l.module:module ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGNARRAY NAME = "l.output" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Product_Field_Value( l.module, l.product_id, l.field_code ) }">
		<MvMEMBER NAME = "customfield_values">
		<MvMEMBER NAME = "{ StripSpecialCharacters_TemplateCode( l.module_code ) }">
		<MvMEMBER NAME = "{ StripSpecialCharacters_TemplateCode( l.field_code ) }">
	</MvASSIGNARRAY>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Category_CustomField_Lookup" PARAMETERS = "all_settings var, fields_custom var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.fields"			VALUE = "">
	<MvASSIGN NAME = "l.field_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ CommonComponentFields_Initialize_xxx_CustomField_ModuleList_Load( l.all_settings, l.fields_custom, 'fields_cat', l.modules ) }">
		<MvASSIGN NAME = "l.module_fields"		VALUE = "">
		<MvASSIGN NAME = "l.module_field_count"	VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Category_Fields( l.module, l.module_fields ) }">

		<MvEVAL EXPR = "{ CommonComponentFields_Initialize_xxx_CustomField_Filter_ModuleFields( l.module, l.fields_custom, l.module_fields, l.module_field_count, l.fields, l.field_count ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ CommonComponentFields_Initialize_xxx_CustomField_Lookup( l.fields, l.field_count, 'fields_cat_map', l.all_settings:_mgr:category_customfield_plan, l.all_settings:customfield_names ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Category_CustomFields" PARAMETERS = "cat_id, output var, all_settings var, fields_custom var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.all_settings:_mgr:category_customfield_plan }">
		<MvFOREACH ITERATOR = "l.plan" ARRAY = "l.all_settings:_mgr:category_customfield_plan">
			<MvIF EXPR = "{ NOT ISNULL l.plan:field_map }">
				<MvREFERENCEARRAY NAME = "l.module_output" VARIABLE = "l.output">
					<MvMEMBER NAME = "customfield_values">
					<MvMEMBER NAME = "{ l.plan:output_module_code }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Category_Fields_Mapped( l.plan:module, l.cat_id, l.plan:field_map, l.module_output ) }">
			<MvELSEIF EXPR = "{ l.plan:field_array }">
				<MvIF EXPR = "{ l.plan:module:api_ver LT 9.08 }">
					<MvASSIGNARRAY NAME = "l.output" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Category_Field_Value( l.plan:module, l.cat_id, l.plan:field_code ) }">
						<MvMEMBER NAME = "customfield_values">
						<MvMEMBER NAME = "{ l.plan:output_module_code }">
						<MvMEMBER NAME = "{ l.plan:output_field_code }">
					</MvASSIGNARRAY>	
				<MvELSE>
					<MvREFERENCEARRAY NAME = "l.array_output" VARIABLE = "l.output">
						<MvMEMBER NAME = "customfield_values">
						<MvMEMBER NAME = "{ l.plan:output_module_code }">
						<MvMEMBER NAME = "{ l.plan:output_field_code }">
					</MvREFERENCEARRAY>

					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Category_Field_Value_Array( l.plan:module, l.cat_id, l.plan:field_code, l.array_output ) }">
				</MvIF>
			<MvELSE>
				<MvASSIGNARRAY NAME = "l.output" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Category_Field_Value( l.plan:module, l.cat_id, l.plan:field_code ) }">
					<MvMEMBER NAME = "customfield_values">
					<MvMEMBER NAME = "{ l.plan:output_module_code }">
					<MvMEMBER NAME = "{ l.plan:output_field_code }">
				</MvASSIGNARRAY>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.fields_custom">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_Category_CustomField( l.cat_id, l.output, l.all_settings, l.field:module, l.field:code ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Category_CustomField" PARAMETERS = "cat_id, output var, all_settings var, module_code, field_code" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.module" VARIABLE = "l.all_settings">
		<MvMEMBER NAME = "cached_modules">
		<MvMEMBER NAME = "{ l.module_code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.module:skip OR ( ISNULL l.module:module ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGNARRAY NAME = "l.output" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Category_Field_Value( l.module, l.cat_id, l.field_code ) }">
		<MvMEMBER NAME = "customfield_values">
		<MvMEMBER NAME = "{ StripSpecialCharacters_TemplateCode( l.module_code ) }">
		<MvMEMBER NAME = "{ StripSpecialCharacters_TemplateCode( l.field_code ) }">
	</MvASSIGNARRAY>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Order_CustomField_Lookup" PARAMETERS = "all_settings var, fields_custom var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.fields"			VALUE = "">
	<MvASSIGN NAME = "l.field_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ CommonComponentFields_Initialize_xxx_CustomField_ModuleList_Load( l.all_settings, l.fields_custom, 'fields_ordr', l.modules ) }">
		<MvASSIGN NAME = "l.module_fields"		VALUE = "">
		<MvASSIGN NAME = "l.module_field_count"	VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Order_Fields( l.module, l.module_fields ) }">

		<MvEVAL EXPR = "{ CommonComponentFields_Initialize_xxx_CustomField_Filter_ModuleFields( l.module, l.fields_custom, l.module_fields, l.module_field_count, l.fields, l.field_count ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ CommonComponentFields_Initialize_xxx_CustomField_Lookup( l.fields, l.field_count, 'fields_ordr_map', l.all_settings:_mgr:order_customfield_plan, l.all_settings:customfield_order_names ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Order_CustomFields" PARAMETERS = "order_id, output var, all_settings var, fields_custom var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.all_settings:_mgr:order_customfield_plan }">
		<MvFOREACH ITERATOR = "l.plan" ARRAY = "l.all_settings:_mgr:order_customfield_plan">
			<MvIF EXPR = "{ NOT ISNULL l.plan:field_map }">
				<MvREFERENCEARRAY NAME = "l.module_output" VARIABLE = "l.output">
					<MvMEMBER NAME = "customfield_order_values">
					<MvMEMBER NAME = "{ l.plan:output_module_code }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Order_Fields_Mapped( l.plan:module, l.order_id, l.plan:field_map, l.module_output ) }">
			<MvELSEIF EXPR = "{ l.plan:field_array }">
				<MvIF EXPR = "{ l.plan:module:api_ver LT 9.08 }">
					<MvASSIGNARRAY NAME = "l.output" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Order_Field_Value( l.plan:module, l.order_id, l.plan:field_code ) }">
						<MvMEMBER NAME = "customfield_order_values">
						<MvMEMBER NAME = "{ l.plan:output_module_code }">
						<MvMEMBER NAME = "{ l.plan:output_field_code }">
					</MvASSIGNARRAY>
				<MvELSE>	
					<MvREFERENCEARRAY NAME = "l.array_output" VARIABLE = "l.output">
						<MvMEMBER NAME = "customfield_order_values">
						<MvMEMBER NAME = "{ l.plan:output_module_code }">
						<MvMEMBER NAME = "{ l.plan:output_field_code }">
					</MvREFERENCEARRAY>

					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Order_Field_Value_Array( l.plan:module, l.order_id, l.plan:field_code, l.array_output ) }">
				</MvIF>
			<MvELSE>
				<MvASSIGNARRAY NAME = "l.output" VALUE = "{ [ g.Module_Root $ l.plan:module:module ].Module_Order_Field_Value( l.plan:module, l.order_id, l.plan:field_code ) }">
					<MvMEMBER NAME = "customfield_order_values">
					<MvMEMBER NAME = "{ l.plan:output_module_code }">
					<MvMEMBER NAME = "{ l.plan:output_field_code }">
				</MvASSIGNARRAY>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.fields_custom">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_Order_CustomField( l.order_id, l.output, l.all_settings, l.field:module, l.field:code ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Order_CustomField" PARAMETERS = "order_id, output var, all_settings var, module_code, field_code" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.module" VARIABLE = "l.all_settings">
		<MvMEMBER NAME = "cached_modules">
		<MvMEMBER NAME = "{ l.module_code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.module:skip OR ( ISNULL l.module:module ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGNARRAY NAME = "l.output" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Order_Field_Value( l.module, l.order_id, l.field_code ) }">
		<MvMEMBER NAME = "customfield_order_values">
		<MvMEMBER NAME = "{ StripSpecialCharacters_TemplateCode( l.module_code ) }">
		<MvMEMBER NAME = "{ StripSpecialCharacters_TemplateCode( l.field_code ) }">
	</MvASSIGNARRAY>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Merge_BasketOrOrderItem_Groups" PARAMETERS = "items var, item_count, groups var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pos"				VALUE = 1>
	<MvASSIGN NAME = "l.group_count"		VALUE = 0>
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_merge_ref( l.items, 1, l.item_count, l.copied_items, 1 ) }">

	<MvWHILE EXPR = "{ l.pos LE l.item_count }">
		<MvASSIGN NAME = "l.group"											VALUE = "{ l.copied_items[ l.pos ] }">

		<MvFOREACH ITERATOR = "l.groupdiscount" ARRAY = "l.group:discounts" COUNT = "{ l.group:discount_count }">
			<MvASSIGN NAME = "l.groupdiscount:discount"						VALUE = "{ l.groupdiscount:discount * l.group:quantity }">
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.groupoption" ARRAY = "l.group:options" COUNT = "{ l.group:option_count }">
			<MvFOREACH ITERATOR = "l.groupdiscount" ARRAY = "l.groupoption:discounts" COUNT = "{ l.groupoption:discount_count }">
				<MvASSIGN NAME = "l.groupdiscount:discount"					VALUE = "{ l.groupdiscount:discount * l.group:quantity }">
			</MvFOREACH>
		</MvFOREACH>

		<MvASSIGN NAME = "l.group_pos"										VALUE = "{ miva_array_search( l.copied_items, l.pos + 1, l.item, 'l.item:group_id EQ l.group:group_id' ) }">
		<MvWHILE EXPR = "{ l.group_pos }">
			<MvASSIGN NAME = "l.group:quantity"								VALUE = "{ l.group:quantity + l.item:quantity }">

			<MvASSIGN NAME = "l.group:subtotal_retail"						VALUE = "{ l.group:subtotal_retail + l.item:subtotal_retail }">
			<MvASSIGN NAME = "l.group:subtotal_base_price"					VALUE = "{ l.group:subtotal_base_price + l.item:subtotal_base_price }">
			<MvASSIGN NAME = "l.group:subtotal"								VALUE = "{ l.group:subtotal + l.item:subtotal }">
			<MvASSIGN NAME = "l.group:subtotal_base_price_comprehensive"	VALUE = "{ l.group:subtotal_base_price_comprehensive + l.item:subtotal_base_price_comprehensive }">
			<MvASSIGN NAME = "l.group:subtotal_retail_comprehensive"		VALUE = "{ l.group:subtotal_retail_comprehensive + l.item:subtotal_retail_comprehensive }">
			<MvASSIGN NAME = "l.group:subtotal_comprehensive"				VALUE = "{ l.group:subtotal_comprehensive + l.item:subtotal_comprehensive }">
			<MvASSIGN NAME = "l.group:total"								VALUE = "{ l.group:total + l.item:total }">

			<MvCOMMENT>
			|
			| Generate combined parent / child totals tokens only for items that have a :child_count value
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ ( l.group:parent_id EQ 0 ) AND ( NOT ISNULL l.group:child_count ) }">
				<MvASSIGN NAME = "l.group:total_with_children"								VALUE = "{ l.group:total_with_children + l.item:total_with_children }">
				<MvASSIGN NAME = "l.group:subtotal_base_price_comprehensive_with_children"	VALUE = "{ l.group:subtotal_base_price_comprehensive_with_children + l.item:subtotal_base_price_comprehensive_with_children }">
			</MvIF>

			<MvFOREACH ITERATOR = "l.discount" ARRAY = "l.item:discounts" COUNT = "{ l.item:discount_count }">
				<MvIF EXPR = "{ miva_array_search( l.group:discounts, 1, l.groupdiscount, 'l.groupdiscount:pgrp_id EQ l.discount:pgrp_id' ) }">
					<MvASSIGN NAME = "l.groupdiscount:discount"				VALUE = "{ l.groupdiscount:discount + ( l.discount:discount * l.item:quantity ) }">
				<MvELSE>
					<MvASSIGN NAME = "l.discount_copy"						VALUE = "{ l.discount }">
					<MvASSIGN NAME = "l.discount_copy:discount"				VALUE = "{ l.discount_copy:discount * l.item:quantity }">
					<MvASSIGN NAME = "l.group:discount_count"				VALUE = "{ miva_array_insert( l.group:discounts, l.discount_copy, -1 ) }">
				</MvIF>
			</MvFOREACH>

			<MvFOREACH INDEX = "l.option_pos" ITERATOR = "l.option" ARRAY = "l.item:options" COUNT = "{ l.item:option_count }">
				<MvREFERENCEARRAY NAME = "l.groupoption" VARIABLE = "l.group">
					<MvMEMBER NAME = "options">
					<MvDIMENSION INDEX = "{ l.option_pos }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.groupoption:subtotal_retail"			VALUE = "{ l.groupoption:subtotal_retail + l.option:subtotal_retail }">
				<MvASSIGN NAME = "l.groupoption:subtotal_base_price"		VALUE = "{ l.groupoption:subtotal_base_price + l.option:subtotal_base_price }">
				<MvASSIGN NAME = "l.groupoption:subtotal"					VALUE = "{ l.groupoption:subtotal + l.option:subtotal }">

				<MvFOREACH ITERATOR = "l.discount" ARRAY = "l.option:discounts" COUNT = "{ l.item:discount_count }">
					<MvIF EXPR = "{ miva_array_search( l.groupoption:discounts, 1, l.groupdiscount, 'l.groupdiscount:pgrp_id EQ l.discount:pgrp_id' ) }">
						<MvASSIGN NAME = "l.groupdiscount:discount"			VALUE = "{ l.groupdiscount:discount + ( l.discount:discount * l.item:quantity ) }">
					<MvELSE>
						<MvASSIGN NAME = "l.discount_copy"					VALUE = "{ l.discount }">
						<MvASSIGN NAME = "l.discount_copy:discount"			VALUE = "{ l.discount_copy:discount * l.item:quantity }">
						<MvASSIGN NAME = "l.groupoption:discount_count"		VALUE = "{ miva_array_insert( l.groupoption:discounts, l.discount_copy, -1 ) }">
					</MvIF>
				</MvFOREACH>
			</MvFOREACH>

			<MvASSIGN NAME = "l.item_count"									VALUE = "{ miva_array_delete( l.copied_items, l.group_pos, 1 ) }">
			<MvASSIGN NAME = "l.group_pos"									VALUE = "{ miva_array_search( l.copied_items, l.group_pos, l.item, 'l.item:group_id EQ l.group:group_id' ) }">
		</MvWHILE>

		<MvASSIGN NAME = "l.group_count"	VALUE = "{ miva_array_insert( l.groups, l.group, -1 ) }">
		<MvASSIGN NAME = "l.pos"			VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvFOREACH ITERATOR = "l.group" ARRAY = "l.groups" COUNT = "{ l.group_count }">
		<MvASSIGN NAME = "l.group:formatted_retail"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:retail ) }">
		<MvASSIGN NAME = "l.group:formatted_base_price"							VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:base_price ) }">
		<MvASSIGN NAME = "l.group:formatted_price"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:price ) }">

		<MvASSIGN NAME = "l.group:formatted_subtotal_retail"					VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:subtotal_retail ) }">
		<MvASSIGN NAME = "l.group:formatted_subtotal_base_price"				VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:subtotal_base_price ) }">
		<MvASSIGN NAME = "l.group:formatted_subtotal"							VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:subtotal ) }">

		<MvFOREACH ITERATOR = "l.groupdiscount" ARRAY = "l.group:discounts" COUNT = "{ l.group:discount_count }">
			<MvASSIGN NAME = "l.groupdiscount:formatted_discount"				VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.groupdiscount:discount ) }">
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.groupoption" ARRAY = "l.group:options" COUNT = "{ l.group:option_count }">
			<MvASSIGN NAME = "l.groupoption:formatted_retail"					VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.groupoption:retail ) }">
			<MvASSIGN NAME = "l.groupoption:formatted_price"					VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.groupoption:price ) }">

			<MvASSIGN NAME = "l.groupoption:formatted_subtotal_retail"			VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.groupoption:subtotal_retail ) }">
			<MvASSIGN NAME = "l.groupoption:formatted_subtotal_base_price"		VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.groupoption:subtotal_base_price ) }">
			<MvASSIGN NAME = "l.groupoption:formatted_subtotal"					VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.groupoption:subtotal ) }">

			<MvFOREACH ITERATOR = "l.groupdiscount" ARRAY = "l.groupoption:discounts" COUNT = "{ l.groupoption:discount_count }">
				<MvASSIGN NAME = "l.groupdiscount:formatted_discount"			VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.groupdiscount:discount ) }">
			</MvFOREACH>
		</MvFOREACH>

		<MvASSIGN NAME = "l.group:formatted_subtotal_base_price_comprehensive"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:subtotal_base_price_comprehensive ) }">
		<MvASSIGN NAME = "l.group:formatted_subtotal_retail_comprehensive"		VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:subtotal_retail_comprehensive ) }">
		<MvASSIGN NAME = "l.group:formatted_subtotal_comprehensive"				VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:subtotal_comprehensive ) }">
		<MvASSIGN NAME = "l.group:formatted_total"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:total ) }">

		<MvCOMMENT>
		|
		| Generate combined parent / child totals tokens only for items that have a :child_count value
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ( l.group:parent_id EQ 0 ) AND ( NOT ISNULL l.group:child_count ) }">
			<MvASSIGN NAME = "l.group:formatted_total_with_children"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:total_with_children ) }">
			<MvASSIGN NAME = "l.group:formatted_subtotal_base_price_comprehensive_with_children"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.group:subtotal_base_price_comprehensive_with_children ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.group_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_BasketItems" PARAMETERS = "basketitems var, basketitem_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.basketitem" ARRAY = "l.basketitems" COUNT = "{ l.basketitem_count }">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_BasketItem( l.basketitem ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Product_ImageTypes" PARAMETERS = "product_id, variant_id, output var, all_settings var, imagetypes var, constrain, b_width, b_height" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.imagetype_count"	VALUE = "{ miva_array_elements( l.imagetypes ) }">
	
	<MvIF EXPR = "{ ( l.product_id EQ 0 ) OR ( l.imagetype_count EQ 0 ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.constrain NE 'B' }">
		<MvASSIGN NAME = "l.constraint_count"								VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.constraint_count"								VALUE = 1>
		<MvASSIGN NAME = "l.constraints"		INDEX = 1 MEMBER = "width"	VALUE = "{ l.b_width }">
		<MvASSIGN NAME = "l.constraints"		INDEX = 1 MEMBER = "height"	VALUE = "{ l.b_height }">
	</MvIF>

	<MvASSIGN NAME = "l.productimagedata_count"	VALUE = "{ [ g.Module_Library_DB ].ProductImageDataList_Load_Product_Variant_TypeCodes_Constrained( l.product_id, l.variant_id, l.imagetypes, l.imagetype_count, l.constraints, l.constraint_count, l.productimagedatalist ) }">

	<MvFOREACH ITERATOR = "l.productimagedata" ARRAY = "l.productimagedatalist" COUNT = "{ l.productimagedata_count }">
		<MvIF EXPR = "{ ( l.constrain NE 'B' ) OR
						( ( l.productimagedata:image:width LE l.b_width ) AND ( l.productimagedata:image:height LE l.b_height ) ) }">
			<MvASSIGN NAME = "l.image_path" VALUE = "{ l.productimagedata:image:image }">
		<MvELSEIF EXPR = "{ NOT ISNULL l.productimagedata:generatedimages[ 1 ]:image }">
			<MvASSIGN NAME = "l.image_path"	VALUE = "{ l.productimagedata:generatedimages[ 1 ]:image }">
		<MvELSEIF EXPR = "{ [ g.Module_Library_DB ].GeneratedImage_FindOrInsert_Image_Dimensions( l.productimagedata:image, l.b_width, l.b_height, l.generatedimage ) }">
			<MvASSIGN NAME = "l.image_path"	VALUE = "{ l.generatedimage:image }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGNARRAY NAME = "l.output" VALUE = "{ l.image_path }">
			<MvMEMBER NAME = "imagetypes">
			<MvMEMBER NAME = "{ StripSpecialCharacters_TemplateCode( l.productimagedata:imagetype:code ) }">
		</MvASSIGNARRAY>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Product_Facets" PARAMETERS = "facets var, facet_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.facet" ARRAY = "l.facets" COUNT = "{ l.facet_count }">
		<MvIF EXPR = "{ l.facet:type EQ 'rangeslider' }">
			<MvASSIGN NAME = "l.facet:value_low"					VALUE = "{ gettoken( l.facet:values[ 1 ]:value, '-', 1 ) }">
			<MvASSIGN NAME = "l.facet:value_high"					VALUE = "{ gettoken( l.facet:values[ 1 ]:value, '-', 2 ) }">
			<MvASSIGN NAME = "l.facet:selected_value_low"			VALUE = "{ gettoken( l.facet:input_values[ 1 ], '-', 1 ) }">
			<MvASSIGN NAME = "l.facet:selected_value_high"			VALUE = "{ gettoken( l.facet:input_values[ 1 ], '-', 2 ) }">

			<MvIF EXPR = "{ ISNULL l.facet:selected_value_low }">
				<MvASSIGN NAME = "l.facet:selected_value_low"		VALUE = "{ l.facet:value_low }">
			</MvIF>

			<MvIF EXPR = "{ ISNULL l.facet:selected_value_high }">
				<MvASSIGN NAME = "l.facet:selected_value_high"		VALUE = "{ l.facet:value_high }">
			</MvIF>
		</MvIF>

		<MvFOREACH ITERATOR = "l.facet_value" ARRAY = "l.facet:values" COUNT = "{ l.facet:value_count }">
			<MvASSIGN NAME = "l.facet_value:prompt"					VALUE = "{ [ g.Module_Root $ l.facet:module:module ].Module_Product_Facet_Value_Prompt( l.facet:module, l.facet, l.facet_value:value ) }">
			<MvASSIGN NAME = "l.facet_value:selected"				VALUE = "{ [ g.Module_Root $ l.facet:module:module ].Module_Product_Facet_Value_Selected( l.facet:module, l.facet, l.facet_value:value, l.facet:input_values, l.facet:input_value_count ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.facet:applied_values"					VALUE = "">

		<MvFOREACH ITERATOR = "l.input_value" ARRAY = "l.facet:input_values" COUNT = "{ l.facet:input_value_count }">
			<MvASSIGN NAME = "l.applied_value:value"				VALUE = "{ l.input_value }">
			<MvASSIGN NAME = "l.applied_value:prompt"				VALUE = "{ [ g.Module_Root $ l.facet:module:module ].Module_Product_Facet_Value_Prompt( l.facet:module, l.facet, l.input_value ) }">

			<MvASSIGN NAME = "l.facet:applied_value_count"			VALUE = "{ miva_array_insert( l.facet:applied_values, l.applied_value, -1 ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_BasketItem" PARAMETERS = "basketitem var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.basketitem:_initialized }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.basketitem:_initialized"								VALUE = 1>
	<MvASSIGN NAME = "l.basketitem:subtotal_retail"								VALUE = "{ l.basketitem:retail * l.basketitem:quantity }">
	<MvASSIGN NAME = "l.basketitem:subtotal_base_price"							VALUE = "{ l.basketitem:base_price * l.basketitem:quantity }">
	<MvASSIGN NAME = "l.basketitem:subtotal"									VALUE = "{ l.basketitem:price * l.basketitem:quantity }">
	<MvASSIGN NAME = "l.basketitem:formatted_retail"							VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:retail ) }">
	<MvASSIGN NAME = "l.basketitem:formatted_base_price"						VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:base_price ) }">
	<MvASSIGN NAME = "l.basketitem:formatted_price"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:price ) }">
	<MvASSIGN NAME = "l.basketitem:formatted_subtotal"							VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:subtotal ) }">
	<MvASSIGN NAME = "l.basketitem:formatted_subtotal_base_price"				VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:subtotal_base_price ) }">
	<MvASSIGN NAME = "l.basketitem:formatted_subtotal_retail"					VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:subtotal_retail ) }">
	<MvASSIGN NAME = "l.basketitem:formatted_total"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:total ) }">
	<MvASSIGN NAME = "l.basketitem:formatted_weight"							VALUE = "{ [ g.Module_Library_Utilities ].Format_Weight( l.basketitem:weight ) }">

	<MvASSIGN NAME = "l.basketitem_total_base_price"							VALUE = "{ l.basketitem:subtotal_base_price }">
	<MvASSIGN NAME = "l.basketitem_total_retail"								VALUE = "{ l.basketitem:subtotal_retail }">

	<MvIF EXPR = "{ l.basketitem:wish_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_WSH_DB ].WishList_Load_WishListItem_Cached( l.basketitem:wish_id, l.basketitem:wishlist ) }">
			<MvASSIGN NAME = "l.basketitem:wishlist" 							VALUE = "">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.basketitem:subterm_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionTerm_Load_ID( l.basketitem:subterm_id, l.basketitem:productsubscriptionterm ) }">
			<MvASSIGN NAME = "l.basketitem:productsubscriptionterm" 			VALUE = "">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.basketitem:discount_count"								VALUE = "{ [ g.Module_Library_DB ].BasketItemDiscountList_Load_Line( l.basketitem:line_id, l.basketitem:discounts ) }">
	<MvFOREACH ITERATOR = "l.basketitemdiscount" ARRAY = "l.basketitem:discounts" COUNT = "{ l.basketitem:discount_count }">
		<MvASSIGN NAME = "l.basketitemdiscount:formatted_discount"				VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitemdiscount:discount ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.basketitem:option_count"								VALUE = "{ [ g.Module_Library_DB ].BasketOptionList_Load_Line( l.basketitem:line_id, l.basketitem:options ) }">
	<MvFOREACH ITERATOR = "l.basketoption" ARRAY = "l.basketitem:options" COUNT = "{ l.basketitem:option_count }">
		<MvIF EXPR = "{ len( l.basketoption:data ) }">
			<MvASSIGN NAME = "l.basketoption:data"								VALUE = "{ encodeentities( l.basketoption:data ) }">
			<MvASSIGN NAME = "l.basketoption:data"								VALUE = "{ glosub( l.basketoption:data, asciichar( 10 ), '<br>' ) }">
		<MvELSEIF EXPR = "{ len( l.basketoption:data_long ) }">
			<MvASSIGN NAME = "l.basketoption:data_long"							VALUE = "{ encodeentities( l.basketoption:data_long ) }">
			<MvASSIGN NAME = "l.basketoption:data_long"							VALUE = "{ glosub( l.basketoption:data_long, asciichar( 10 ), '<br>' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.basketoption:subtotal_retail"						VALUE = "{ l.basketoption:retail * l.basketitem:quantity }">
		<MvASSIGN NAME = "l.basketoption:subtotal_base_price"					VALUE = "{ l.basketoption:base_price * l.basketitem:quantity }">
		<MvASSIGN NAME = "l.basketoption:subtotal"								VALUE = "{ l.basketoption:price * l.basketitem:quantity }">
		<MvASSIGN NAME = "l.basketoption:formatted_retail"						VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketoption:retail ) }">
		<MvASSIGN NAME = "l.basketoption:formatted_base_price"					VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketoption:base_price ) }">
		<MvASSIGN NAME = "l.basketoption:formatted_price"						VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketoption:price ) }">
		<MvASSIGN NAME = "l.basketoption:formatted_subtotal_retail"				VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketoption:subtotal_retail ) }">
		<MvASSIGN NAME = "l.basketoption:formatted_subtotal_base_price"			VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketoption:subtotal_base_price ) }">
		<MvASSIGN NAME = "l.basketoption:formatted_subtotal"					VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketoption:subtotal ) }">

		<MvASSIGN NAME = "l.basketitem_total_base_price"						VALUE = "{ l.basketitem_total_base_price + l.basketoption:subtotal_base_price }">
		<MvASSIGN NAME = "l.basketitem_total_retail"							VALUE = "{ l.basketitem_total_retail + l.basketoption:subtotal_retail }">

		<MvASSIGN NAME = "l.basketoption:discount_count"						VALUE = "{ [ g.Module_Library_DB ].BasketOptionDiscountList_Load_LineOption_ID( l.basketoption:id, l.basketoption:discounts ) }">
		<MvFOREACH ITERATOR = "l.basketoptiondiscount" ARRAY = "l.basketoption:discounts" COUNT = "{ l.basketoption:discount_count }">
			<MvASSIGN NAME = "l.basketoptiondiscount:formatted_discount"		VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketoptiondiscount:discount ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvASSIGN NAME = "l.basketitem:subtotal_base_price_comprehensive"			VALUE = "{ [ g.Module_Library_Utilities ].Round_Item_Total( l.basketitem_total_base_price ) }">
	<MvASSIGN NAME = "l.basketitem:subtotal_retail_comprehensive"				VALUE = "{ [ g.Module_Library_Utilities ].Round_Item_Total( l.basketitem_total_retail ) }">
	<MvASSIGN NAME = "l.basketitem:subtotal_comprehensive"						VALUE = "{ l.basketitem:total }">

	<MvASSIGN NAME = "l.basketitem:formatted_subtotal_base_price_comprehensive"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:subtotal_base_price_comprehensive ) }">
	<MvASSIGN NAME = "l.basketitem:formatted_subtotal_retail_comprehensive"		VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:subtotal_retail_comprehensive ) }">
	<MvASSIGN NAME = "l.basketitem:formatted_subtotal_comprehensive"			VALUE = "{ l.basketitem:formatted_total }">

	<MvCOMMENT>
	|
	| Generate combined parent / child totals tokens only for items that have a :child_count value
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( l.basketitem:parent_id EQ 0 ) AND ( NOT ISNULL l.basketitem:child_count ) }">
		<MvASSIGN NAME = "l.basketitem:total_with_children"											VALUE = "{ l.basketitem:total }">
		<MvASSIGN NAME = "l.basketitem:subtotal_base_price_comprehensive_with_children"				VALUE = "{ l.basketitem:subtotal_base_price_comprehensive }">

		<MvFOREACH ITERATOR = "l.child_basketitem" ARRAY = "l.basketitem:children" COUNT = "{ l.basketitem:child_count }">
			<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_BasketItem( l.child_basketitem ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.basketitem:total_with_children"										VALUE = "{ l.basketitem:total_with_children + l.child_basketitem:total }">
			<MvASSIGN NAME = "l.basketitem:subtotal_base_price_comprehensive_with_children"			VALUE = "{ l.basketitem:subtotal_base_price_comprehensive_with_children + l.child_basketitem:subtotal_base_price_comprehensive }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.basketitem:formatted_total_with_children"								VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:total_with_children ) }">
		<MvASSIGN NAME = "l.basketitem:formatted_subtotal_base_price_comprehensive_with_children"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketitem:subtotal_base_price_comprehensive_with_children ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_BasketItems_WithParts" PARAMETERS = "basketitems var, basketitem_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.basketitem" ARRAY = "l.basketitems" COUNT = "{ l.basketitem_count }">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_BasketItem_WithParts( l.basketitem ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_BasketItem_WithParts" PARAMETERS = "basketitem var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_BasketItem( l.basketitem ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.basketitem:product_id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_ID_WithRuntimeInventory( l.basketitem:product_id, l.basketitem:product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_DB ].ProductSubscriptionSettings_Load_ProductOrDefault( l.basketitem:product:id, l.basketitem:product:productsubscriptionsettings ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.basketitem:part_count"		VALUE = "{ [ g.Module_Library_DB ].ProductList_Load_Variant( l.basketitem:product_id, l.basketitem:variant_id, l.basketitem:parts ) }">

	<MvFOREACH ITERATOR = "l.part" ARRAY = "l.basketitem:parts" COUNT = "{ l.basketitem:part_count }">
		<MvASSIGN NAME = "l.part:total_quantity"	VALUE = "{ l.basketitem:quantity * l.part:quantity }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_BasketCharges" PARAMETERS = "basketcharges var, basketcharge_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.basketcharge" ARRAY = "l.basketcharges" COUNT = "{ l.basketcharge_count }">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_BasketCharge( l.basketcharge ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_BasketCharge" PARAMETERS = "basketcharge var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.basketcharge:formatted_disp_amt"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.basketcharge:disp_amt ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_PaymentMethod_Description" PARAMETERS = "module var, serialized_pay_data var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This function does odd things to get an actual payment method while maintaining backwards
	| compatibility with old modules.  See Bugzilla 6485 for more information.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.deserialized_pay_data"	VALUE = "{ miva_array_deserialize( l.serialized_pay_data ) }">

	<MvIF EXPR = "{ ( ISNULL l.serialized_pay_data ) OR
					( '=' IN l.serialized_pay_data ) EQ 1 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].PaymentModule_Payment_Description( l.module, l.deserialized_pay_data ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Root $ l.module:module ].PaymentModule_Report_Description( l.module, l.deserialized_pay_data ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_DigitalDownload" PARAMETERS = "digitaldownload var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_DDL_UT ].DigitalDownload_MaxDownloads( l.digitaldownload, l.true_max_downloads ) }">			<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_DDL_UT ].DigitalDownload_Expiration_DateTime( l.digitaldownload, l.true_expiration ) }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.digitaldownload:url" VALUE = "{ [ g.Module_Feature_DDL_UT ].DigitalDownload_Generate_DownloadURL( l.digitaldownload:code ) }">

	<MvIF EXPR = "{ l.true_max_downloads EQ 0 }">
		<MvASSIGN NAME = "l.digitaldownload:formatted_max_downloads" VALUE = "Unlimited">
	<MvELSE>
		<MvASSIGN NAME = "l.digitaldownload:formatted_max_downloads" VALUE = "{ l.true_max_downloads }">
	</MvIF>

	<MvIF EXPR = "{ l.true_expiration EQ 0 }">
		<MvASSIGN NAME = "l.digitaldownload:formatted_expiration"	VALUE = "Never">
	<MvELSE>
		<MvASSIGN NAME = "l.digitaldownload:formatted_expiration"	VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.true_expiration, s.miva_language ) $ ' at ' $ [ g.Module_Library_Utilities ].Format_Time( l.true_expiration, s.miva_language ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_ID_Cached( l.digitaldownload:product_id, l.digitaldownload:product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.digitaldownload:product" VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_GiftCertificate" PARAMETERS = "giftcertificate var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.giftcertificate:formatted_amount" VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.giftcertificate:amount ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Subscription" PARAMETERS = "all_settings var, settings var, subscription var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ CommonComponentFields_Initialize_Subscription_Fields( l.all_settings, l.settings, l.subscription, l.original_basket ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ CommonComponentFields_Initialize_Subscription_CleanupTemporaryBasket( l.original_basket ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Subscription_Fields" PARAMETERS = "all_settings var, settings var, subscription var, original_basket var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.subscription:display_total"			VALUE = 0>

	<MvASSIGN NAME = "l.subscription:shipping"				VALUE = 0>
	<MvASSIGN NAME = "l.subscription:tax"					VALUE = 0>
	<MvASSIGN NAME = "l.subscription:total"					VALUE = 0>
	<MvASSIGN NAME = "l.subscription:subtotal"				VALUE = 0>

	<MvASSIGN NAME = "l.subscription:product:quantity" 		VALUE = "{ l.subscription:quantity }">
	<MvASSIGN NAME = "l.subscription:option_count"			VALUE = "{ [ g.Module_Feature_SUB_DB ].SubscriptionOptionList_Load_Subscription( l.subscription:id, l.subscription:options ) }">
	<MvASSIGN NAME = "l.attribute_count"					VALUE = "{ [ g.Module_Feature_SUB_UT ].SubscriptionOptions_BuildAttributes( l.subscription:options, l.subscription:option_count, l.attributes ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Validate_Attributes_DetermineVariant( l.subscription:product, 0, l.attributes, l.attribute_count, l.subscription:product:options, l.subscription:product:option_count, l.variant_id ) OR
					l.variant_id EQ -1 }">
		<MvASSIGN NAME = "l.variant_id"						VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.null"								VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Load_Variant( l.subscription:product, l.variant_id ) }">
	<MvASSIGN NAME = "l.null"								VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Adjust_VariantPricing( l.subscription:product, l.variant_id, l.attr_price_override ) }">

	<MvASSIGN NAME = "l.original_basket"					VALUE = "{ g.Basket }">
	<MvASSIGN NAME = "g.Basket"								VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SUB_UT ].Subscription_CreateBasket_LowLevel( l.subscription:customer, l.subscription:address, l.subscription:paymentcard, l.subscription:product, l.subscription:product:options, l.subscription:product:option_count, l.variant_id, l.attr_price_override, l.subscription:id, l.subscription:subterm_id, l.subscription:quantity, g.Basket ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvWHILE EXPR = "{ 1 }">
		<MvASSIGN NAME = "l.basketcharges"					VALUE = "">
		<MvASSIGN NAME = "l.basketcharge_count"				VALUE = 0>

		<MvIF EXPR = "{ NOT l.subscription:ship_id }">
			<MvASSIGN NAME = "l.subscription:method"		VALUE = "Unknown">
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID_Cached( l.subscription:ship_id, l.shipping_module )	OR
							NOT [ g.Module_Library_DB ].StoreModule_Load( l.shipping_module:id, 'shipping', l.storemodule )	OR
							NOT l.shipping_module:active }">
				<MvASSIGN NAME = "l.shipping_module"		VALUE = "">
				<MvASSIGN NAME = "l.subscription:method"	VALUE = "Unknown">
			<MvELSE>
				<MvASSIGN NAME = "l.subscription:method"	VALUE = "{ [ g.Module_Root $ l.shipping_module:module ].ShippingModule_Description( l.shipping_module, l.subscription:ship_data ) }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.null"							VALUE = "{ [ g.Module_Feature_SUB_UT ].Subscription_Calculate_Basket_Shipping( l.shipping_module, l.subscription:ship_data ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_RT ].Runtime_Discount_Basket( g.Basket ) }">
			<MvWHILESTOP>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Root $ g.Store:tax_mod:module ].TaxModule_Calculate_Basket( g.Store:tax_mod ) }">
			<MvWHILESTOP>
		</MvIF>

		<MvASSIGN NAME = "l.basketcharge_count"				VALUE = "{ [ g.Module_Library_DB ].BasketChargeList_Load_Basket( g.Basket:basket_id, l.basketcharges ) }">
		<MvASSIGN NAME = "l.output_charge_count"			VALUE = 0>

		<MvFOREACH ITERATOR = "l.basketcharge" ARRAY = "l.basketcharges" COUNT = "{ l.basketcharge_count }">
			<MvASSIGN NAME = "l.subscription:total"			VALUE = "{ l.subscription:total + ( l.basketcharge:amount ROUND 2 ) }">

			<MvIF EXPR = "{ l.basketcharge:type EQ 'SHIPPING' }">	<MvASSIGN NAME = "l.subscription:shipping"	VALUE = "{ l.basketcharge:amount ROUND 2 }">
			<MvELSEIF EXPR = "{ l.basketcharge:type EQ 'TAX' }">	<MvASSIGN NAME = "l.subscription:tax"		VALUE = "{ l.basketcharge:amount ROUND 2 }">
			<MvELSE>												<MvASSIGN NAME = "l.subscription:subtotal"	VALUE = "{ l.subscription:subtotal + ( l.basketcharge:amount ROUND 2 ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.basketcharge:type EQ 'SHIPPING' ) AND ( NOT l.settings:display:shipping ) }">			<MvFOREACHCONTINUE>
			<MvELSEIF EXPR = "{ ( l.basketcharge:type EQ 'HANDLING' ) AND ( NOT l.settings:display:handling ) }">		<MvFOREACHCONTINUE>
			<MvELSEIF EXPR = "{ ( l.basketcharge:type EQ 'TAX' ) AND ( NOT l.settings:display:salestax ) }">			<MvFOREACHCONTINUE>
			<MvELSEIF EXPR = "{ ( l.basketcharge:type EQ 'DISCOUNT' ) AND ( NOT l.settings:display:discounts ) }">		<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.subscription:charges" INDEX = "{ ++l.output_charge_count }"	VALUE = "{ l.basketcharge }">

			<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_BasketCharge( l.subscription:charges[ l.output_charge_count ] ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.subscription:display_total"	VALUE = "{ l.subscription:display_total + ( l.basketcharge:amount ROUND 2 ) }">
		</MvFOREACH>

		<MvWHILESTOP>
	</MvWHILE>

	<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_Product_CustomField_Lookup( l.all_settings, l.settings:fields_custom ) }">
		<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Library_DB ].Basket_Reset( g.Basket ) }">
		<MvASSIGN NAME = "g.Basket"	VALUE = "{ l.original_basket }">

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.subscription:item_count" VALUE = "{ [ g.Module_Library_DB ].BasketItemList_Load_Basket( g.Basket:basket_id, l.subscription:items ) }">

	<MvFOREACH ITERATOR = "l.basketitem" ARRAY = "l.subscription:items" COUNT = "{ l.subscription:item_count }">
		<MvIF EXPR = "{ NOT CommonComponentFields_Initialize_BasketItem_WithParts( l.basketitem ) OR
						NOT CommonComponentFields_Initialize_Product_CustomFields( l.basketitem:product_id, l.basketitem, l.all_settings, l.settings:fields_custom ) }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Library_DB ].Basket_Reset( g.Basket ) }">
			<MvASSIGN NAME = "g.Basket"	VALUE = "{ l.original_basket }">

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ CommonComponentFields_Initialize_Product_ImageTypes( l.basketitem:product_id, l.basketitem:variant_id, l.basketitem, l.all_settings, l.settings:imagetypes, l.settings:constrain, l.settings:b_width, l.settings:b_height ) }">

		<MvIF EXPR = "{ l.basketitem:product:id }">
			<MvASSIGN NAME = "l.basketitem:link"							VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Product_URL( l.basketitem:product, l.null ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.basketitem:link"							VALUE = "{ l.all_settings:urls:PROD:auto_sep $ 'Product_Code=' $ encodeattribute( l.basketitem:code ) }">
		</MvIF>

		<MvASSIGN NAME = "l.subscription:total"								VALUE = "{ l.subscription:total + l.basketitem:total }">
		<MvASSIGN NAME = "l.subscription:subtotal"							VALUE = "{ l.subscription:subtotal + l.basketitem:total }">
		<MvASSIGN NAME = "l.subscription:display_total"						VALUE = "{ l.subscription:display_total + l.basketitem:total }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.subscription:tax"									VALUE = "{ l.subscription:tax ROUND 2 }">
	<MvASSIGN NAME = "l.subscription:total"									VALUE = "{ l.subscription:total ROUND 2 }">
	<MvASSIGN NAME = "l.subscription:shipping"								VALUE = "{ l.subscription:shipping ROUND 2 }">
	<MvASSIGN NAME = "l.subscription:subtotal"								VALUE = "{ l.subscription:subtotal ROUND 2 }">
	<MvASSIGN NAME = "l.subscription:display_total"							VALUE = "{ l.subscription:display_total ROUND 2 }">

	<MvASSIGN NAME = "l.subscription:formatted_tax"							VALUE = "{ [ g.Module_Root $ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency, l.subscription:tax ) }">
	<MvASSIGN NAME = "l.subscription:formatted_total"						VALUE = "{ [ g.Module_Root $ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency, l.subscription:total ) }">
	<MvASSIGN NAME = "l.subscription:formatted_shipping"					VALUE = "{ [ g.Module_Root $ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency, l.subscription:shipping ) }">
	<MvASSIGN NAME = "l.subscription:formatted_subtotal"					VALUE = "{ [ g.Module_Root $ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency, l.subscription:subtotal ) }">
	<MvASSIGN NAME = "l.subscription:formatted_display_total"				VALUE = "{ [ g.Module_Root $ g.Store_Module_Currency:module ].CurrencyModule_AddFormatting( g.Store_Module_Currency, l.subscription:display_total ) }">

	<MvASSIGN NAME = "l.subscription:formatted_firstdate_date"				VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.subscription:firstdate, s.miva_language ) }">
	<MvASSIGN NAME = "l.subscription:formatted_lastdate_date"				VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.subscription:lastdate, s.miva_language ) }">
	<MvASSIGN NAME = "l.subscription:formatted_nextdate_date"				VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.subscription:nextdate, s.miva_language ) }">
	<MvASSIGN NAME = "l.subscription:formatted_cncldate_date"				VALUE = "{ [ g.Module_Library_Utilities ].Format_Date( l.subscription:cncldate, s.miva_language ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_Subscription_CleanupTemporaryBasket" PARAMETERS = "original_basket var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Library_DB ].Basket_Reset( g.Basket ) }">
	<MvASSIGN NAME = "g.Basket"	VALUE = "{ l.original_basket }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Component Initialization Helper Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "StripSpecialCharacters_TemplateCode" PARAMETERS = "code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ isalnum( l.code ) }">
		<MvFUNCTIONRETURN VALUE = "{ l.code }">
	</MvIF>

	<MvASSIGN NAME = "l.return_code"			VALUE = "">

	<MvFOR INDEX = "l.pos" COUNT = "{ len_var( l.code ) }">
		<MvASSIGN NAME = "l.char"				VALUE = "{ substring_var( l.code, l.pos, 1 ) }">

		<MvIF EXPR = "{ isalnum( l.char ) OR ( l.char EQ '_' ) }">
			<MvASSIGN NAME = "l.return_code"	VALUE = "{ l.return_code $ l.char }">
		<MvELSEIF EXPR = "{ l.char EQ '-' }">
			<MvASSIGN NAME = "l.return_code"	VALUE = "{ l.return_code $ '_' }">
		</MvIF>
	</MvFOR>

	<MvIF EXPR = "{ ISNULL l.return_code }">
		<MvASSIGN NAME = "l.return_code"		VALUE = "{ crypto_md5( l.code ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.return_code }">
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_xxx_CustomField_ModuleList_Load" PARAMETERS = "all_settings var, fields_custom var, field_feature, modules var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.modules"		VALUE = "">
	<MvASSIGN NAME = "l.module_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.field_custom_filtered" ARRAY = "l.fields_custom_filtered" INDEX = "l.pos" COUNT = "{ miva_array_filter_ref( l.fields_custom, 1, l.field_custom, 'NOT miva_array_search( l.fields_custom_filtered, 1, l.field_custom_filtered, \'l.field_custom_filtered:module EQ l.field_custom:module\' )', l.fields_custom_filtered ) }">
		<MvREFERENCEARRAY NAME = "l.module" VARIABLE = "l.all_settings:cached_modules">
			<MvMEMBER NAME = "{ l.field_custom_filtered:module }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.field_custom_filtered:module, l.module ) OR
						NOT l.module:active }">
			<MvASSIGN NAME = "l.module:skip" VALUE = 1>
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.has_customfield_feature" VARIABLE = "l.module:feature_hash">
			<MvMEMBER NAME = "{ l.field_feature }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT l.has_customfield_feature }">
			<MvASSIGN NAME = "l.module:skip" VALUE = 1>
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.module_count" VALUE = "{ miva_array_insert_ref( l.modules, l.module, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.module_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_xxx_CustomField_Filter_ModuleFields" PARAMETERS = "module var, fields_custom var, module_fields var, module_field_count, fields var, field_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ l.module_field_count }">
		<MvIF EXPR = "{ NOT miva_array_search( l.fields_custom, 1, l.field_custom, 'l.field_custom:module EQ l.module:code AND tolower( l.field_custom:code ) EQ tolower( l.module_field:code )' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.field" VARIABLE = "l.fields">
			<MvDIMENSION INDEX = "{ ++l.field_count }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.field"			VALUE = "">
		<MvASSIGN NAME = "l.field:code"		VALUE = "{ l.module_field:code }">
		<MvASSIGN NAME = "l.field:name"		VALUE = "{ l.module_field:name }">
		<MvASSIGN NAME = "l.field:type"		VALUE = "{ l.module_field:type }">
		<MvASSIGN NAME = "l.field:module"	VALUE = "{ l.module }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "CommonComponentFields_Initialize_xxx_CustomField_Lookup" PARAMETERS = "fields var, field_count, field_map_feature, master_plan var, customfield_names var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| fields[n]
	|	:code		- The custom field code
	|	:name		- The custom field name
	|	:type		- The custom field type (if one exists)
	|	:module		- The custom field module
	|
	| Build an execution plan so that the selected field module version/call logic
	| is not executed for each product/category/customer/order being initialized.
	|
	| plan[n]				- one entry per field or set of fields, per product/category/customer/order execution simply iterates over this array
	| 	:module				- reference to cached modules
	| 	:output_module_code	- "safed" module code
	| 
	| 	:field_map			- causes a call to Module_xxx_Fields_Mapped
	| 			- or -
	|	:field_array		- causes a call to Module_xxx_Field_Value_Array
	|			- or -
	| 	:field_single		- causes a call to Module_xxx_Field_Value
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.master_plan"							VALUE = "">

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.fields" INDEX = "l.pos" COUNT = "{ l.field_count }">
		<MvREFERENCEARRAY NAME = "l.has_mapping_feature" VARIABLE = "l.field:module:feature_hash">
			<MvMEMBER NAME = "{ l.field_map_feature }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.output_module_code"					VALUE = "{ StripSpecialCharacters_TemplateCode( l.field:module:code ) }">
		<MvASSIGN NAME = "l.output_field_code"					VALUE = "{ StripSpecialCharacters_TemplateCode( l.field:code ) }">

		<MvASSIGNARRAY NAME = "l.customfield_names" VALUE = "{ l.field:name }">
			<MvMEMBER NAME = "{ l.output_module_code }">
			<MvMEMBER NAME = "{ l.output_field_code }">
		</MvASSIGNARRAY>

		<MvCOMMENT>
		|
		| Make l.plan a reference variable into a dummy local array
		| so that when the plan is built it can be added to the master plan
		| by reference using miva_array_insert_ref.
		|
		| We cannot make l.plan a direct reference into the master plan
		| because mapped modules that have multiple fields would increment
		| the master plan array on each iteration of the loop even if a new
		| plan is not created.
		|
		</MvCOMMENT>

		<MvREFERENCEARRAY NAME = "l.plan" VARIABLE = "l.dummy_plan_references">
			<MvDIMENSION INDEX = "{ l.pos }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.field:type EQ 'multitext' }">
			<MvCOMMENT>
			|
			| Execution plan must include one entry per multitext field for this module
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.plan"							VALUE = "">
			<MvASSIGN NAME = "l.plan:field_single"				VALUE = 0>
			<MvASSIGN NAME = "l.plan:field_array"				VALUE = 1>	
			<MvASSIGN NAME = "l.plan:field_map"					VALUE = "">
			<MvASSIGN NAME = "l.plan:field_code"				VALUE = "{ l.field:code }">
			<MvASSIGN NAME = "l.plan:module"					VALUE = "">
			<MvASSIGN NAME = "l.plan:output_module_code"		VALUE = "{ l.output_module_code }">
			<MvASSIGN NAME = "l.plan:output_field_code"			VALUE = "{ l.output_field_code }">

			<MvREFERENCE NAME = "l.plan:module"					VARIABLE = "l.field:module">

			<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_ref( l.master_plan, l.plan, -1 ) }">
		<MvELSEIF EXPR = "{ NOT l.has_mapping_feature }">
			<MvCOMMENT>
			|
			| Execution plan must include one entry per field for this module
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.plan"							VALUE = "">
			<MvASSIGN NAME = "l.plan:field_single"				VALUE = 1>
			<MvASSIGN NAME = "l.plan:field_array"				VALUE = 0>	
			<MvASSIGN NAME = "l.plan:field_map"					VALUE = "">
			<MvASSIGN NAME = "l.plan:field_code"				VALUE = "{ l.field:code }">
			<MvASSIGN NAME = "l.plan:module"					VALUE = "">
			<MvASSIGN NAME = "l.plan:output_module_code"		VALUE = "{ l.output_module_code }">
			<MvASSIGN NAME = "l.plan:output_field_code"			VALUE = "{ l.output_field_code }">

			<MvREFERENCE NAME = "l.plan:module"					VARIABLE = "l.field:module">

			<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_ref( l.master_plan, l.plan, -1 ) }">
		<MvELSE>
			<MvCOMMENT>
			|
			| Execution plan may query all fields from this module at once
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.plan_index"						VALUE = "{ miva_array_search( l.master_plan, 1, l.element, 'NOT ISNULL l.element:field_map AND ( tolower( l.element:module:code ) EQ tolower( l.field:module:code ) )' ) }">

			<MvIF EXPR = "{ NOT l.plan_index }">
				<MvASSIGN NAME = "l.plan"						VALUE = "">
				<MvASSIGN NAME = "l.plan:field_single"			VALUE = 0>
				<MvASSIGN NAME = "l.plan:field_array"			VALUE = 0>	
				<MvASSIGN NAME = "l.plan:field_map"				VALUE = "">
				<MvASSIGN NAME = "l.plan:field_code"			VALUE = "">
				<MvASSIGN NAME = "l.plan:module"				VALUE = "">
				<MvASSIGN NAME = "l.plan:output_module_code"	VALUE = "{ l.output_module_code }">
				<MvASSIGN NAME = "l.plan:output_field_code"		VALUE = "">

				<MvREFERENCE NAME = "l.plan:module"				VARIABLE = "l.field:module">

				<MvASSIGN NAME = "l.plan_index"					VALUE = "{ miva_array_insert_ref( l.master_plan, l.plan, -1 ) }">
			</MvIF>

			<MvREFERENCEARRAY NAME = "l.master_plan_reference" VARIABLE = "l.master_plan">
				<MvDIMENSION INDEX = "{ l.plan_index }">
			</MvREFERENCEARRAY>

			<MvASSIGNARRAY NAME = "l.master_plan_reference:field_map" VALUE = "{ l.output_field_code }">
				<MvMEMBER NAME = "{ l.field:code }">
			</MvASSIGNARRAY>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Page Copy
|
</MvCOMMENT>

<MvFUNCTION NAME = "CopyPage_Copy" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data" VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Branch_ID( l.dest_branch:id, l.dest_page:templ_id, l.dest_managedtemplate ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_Branch_Head( l.dest_branch:id, l.dest_page:templ_id, l.dest_template ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.original_dest_template_source"	VALUE = "{ l.dest_template:source }">
	<MvASSIGN NAME = "l.data:dest_template_source"		VALUE = "{ l.dest_template:source }">

	<MvIF EXPR = "{ l.copypagerules:items				OR
					l.copypagerules:settings EQ 'all'	OR
					l.copypagerules:settings EQ 'specific' }">
		<MvASSIGN NAME = "l.data:source_item_count"		VALUE = "{ [ g.Feature_Filename_TUI_DB ].ItemList_Load_Branch_Page( l.source_branch:id, l.source_page:id, l.data:source_items ) }">
		<MvASSIGN NAME = "l.data:dest_item_count"		VALUE = "{ [ g.Feature_Filename_TUI_DB ].ItemList_Load_Branch_Page( l.dest_branch:id, l.dest_page:id, l.data:dest_items ) }">

		<MvIF EXPR = "{ l.source_branch:id NE l.dest_branch:id }">
			<MvCOMMENT>
			|
			| When the source and destination branches are different, we must reload the "source"
			| items by code on the destination branch to ensure they exist on the destination
			| branch. Any items that do not exist on the destination branch should be skipped.
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.tmp_source_items"		VALUE = "{ l.data:source_items }">
			<MvASSIGN NAME = "l.tmp_source_item_count"	VALUE = "{ l.data:source_item_count }">
			<MvASSIGN NAME = "l.data:source_items"		VALUE = "">
			<MvASSIGN NAME = "l.data:source_item_count"	VALUE = 0>

			<MvFOREACH ITERATOR = "l.tmp_source_item" ARRAY = "l.tmp_source_items" COUNT = "{ l.tmp_source_item_count }">
				<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Item_Load_Branch_Code( l.dest_branch:id, l.tmp_source_item:code, l.item ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>

					<MvFOREACHCONTINUE>
				</MvIF>

				<MvASSIGN NAME = "l.data:source_item_count" VALUE = "{ miva_array_insert_var( l.data:source_items, l.item, -1 ) }">
			</MvFOREACH>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Copy page data
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT CopyPage_Copy_Secure( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page, l.data ) }">			<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT CopyPage_Copy_Title( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page, l.data ) }">		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT CopyPage_Copy_Items( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page, l.data ) }">		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT CopyPage_Copy_Settings( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page, l.data ) }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT CopyPage_Copy_Template( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page, l.data ) }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT CopyPage_Copy_Cacheset( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page, l.data ) }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT CopyPage_Copy_Public( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page, l.data ) }">		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT CopyPage_Copy_JavaScript( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page, l.data ) }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT CopyPage_Copy_CSS( l.copypagerules, l.source_branch, l.source_page, l.dest_branch, l.dest_page, l.data ) }">		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Update Page, Template, Settings, and URI
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Feature_Filename_TUI_DB ].PageVersion_Copy_Page( l.dest_page, l.dest_pageversion ) }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].PageVersion_Update_LowLevel( l.dest_pageversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ crypto_md5( l.original_dest_template_source ) EQ crypto_md5( l.data:dest_template_source ) }">
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Update_Settings( l.dest_page, 'Copy Page' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00081', 'Page \'' $ l.dest_page:code $ '\' settings updated on branch \'' $ l.dest_branch:name $ '\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Create_ManagedTemplateVersion( l.dest_managedtemplate, '', l.data:dest_template_source, l.dest_page:settings, l.compile_error ) }">
			<MvIF EXPR = "{ NOT ISNULL l.compile_error }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00082', 'Error compiling copied template: ' $ l.compile_error ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00083', 'Page \'' $ l.dest_page:code $ '\' template updated on branch \'' $ l.dest_branch:name $ '\'' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" COUNT = "{ [ g.Module_Library_DB ].StoreModuleList_Load_Features_Cached( 'not_page', l.modules ) }">
		<MvCOMMENT>
		|
		| Module_Notify_Page_Copy is triggered only if the source and destination branches are the same,
		| or the module's api version is 10.08 or higher and includes the source and destination branches
		| as parameters. We are intentionally not triggering the notification if the branches are different
		| and the module does not support branch parameters, as the module would have no indication that
		| the branches differed and could update data in the wrong context.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.module:api_ver GE 10.08 }">					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_Page_Copy( l.module, l.source_branch, l.source_page, l.dest_branch, l.dest_page ) }">
		<MvELSEIF EXPR = "{ l.source_branch:id EQ l.dest_branch:id }">	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Notify_Page_Copy( l.module, l.source_page, l.dest_page ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CopyPage_Copy_Secure" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.copypagerules:secure }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.dest_page:secure" VALUE = "{ l.source_page:secure }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CopyPage_Copy_Title" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.copypagerules:title }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.dest_page:title" VALUE = "{ l.source_page:title }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CopyPage_Copy_Items" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.copypagerules:items }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.already_assigned_lookup" VALUE = "">

	<MvFOREACH ITERATOR = "l.dest_item" ARRAY = "l.data:dest_items" COUNT = "{ l.data:dest_item_count }">
		<MvIF EXPR = "{ miva_array_search( l.data:source_items, 1, l.source_item, 'l.source_item:id EQ l.dest_item:id' ) }">
			<MvASSIGNARRAY NAME = "l.already_assigned_lookup" VALUE = 1>
				<MvDIMENSION INDEX = "{ l.dest_item:id }">
			</MvASSIGNARRAY>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| Unassign destination page item that is not present in source item list
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.dest_item:mod_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:component }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Unassign_Item_LowLevel( l.dest_page, l.dest_item ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00084', 'Assignment for Item \'' $ l.dest_item:item_code $ '\' deleted for Page \'' $ l.dest_page:code $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.source_item" ARRAY = "l.data:source_items" COUNT = "{ l.data:source_item_count }">
		<MvREFERENCEARRAY NAME = "l.item_already_assigned" VARIABLE = "l.already_assigned_lookup">
			<MvDIMENSION INDEX = "{ l.source_item:id }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.item_already_assigned }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvCOMMENT>
		|
		| Assign source page item that is not present in destination item list
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.source_item:mod_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:component }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_MGR ].TemplateManager_Page_Assign_Item_LowLevel( l.dest_page, l.source_item ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00085', 'Assignment for Item \'' $ l.source_item:item_code $ '\' created for Page \'' $ l.dest_page:code $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Update destination item list to match source item list now that they're in sync (used in copying settings)
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.data:dest_items"		VALUE = "{ l.data:source_items }">
	<MvASSIGN NAME = "l.data:dest_item_count"	VALUE = "{ l.data:source_item_count }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CopyPage_Copy_Settings" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.copypagerules:settings NE 'all' AND
					l.copypagerules:settings NE 'specific' }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.copy_items"			VALUE = "">
	<MvASSIGN NAME = "l.copy_item_count"	VALUE = 0>

	<MvIF EXPR = "{ l.copypagerules:settings EQ 'all' }">
		<MvFOREACH ITERATOR = "l.source_item" ARRAY = "l.data:source_items" COUNT = "{ l.data:source_item_count }">
			<MvIF EXPR = "{ NOT miva_array_search( l.data:dest_items, 1, l.dest_item, 'l.dest_item:id EQ l.source_item:id' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.copy_item_count" VALUE = "{ miva_array_insert_var( l.copy_items, l.source_item, -1 ) }">
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.copypagerules:settings EQ 'specific' }">
		<MvFOREACH ITERATOR = "l.copypagerulesettings" ARRAY = "l.copypagerulesxsettingslist" COUNT = "{ [ g.Feature_Filename_TUI_DB ].CopyPageRulesXSettingsList_Load_RulesID( l.copypagerules:id, l.copypagerulesxsettingslist ) }">
			<MvIF EXPR = "{ NOT miva_array_search( l.data:source_items, 1, l.source_item, 'l.source_item:code EQ l.copypagerulesettings:item_code' ) }">
				<MvFOREACHCONTINUE>
			<MvELSEIF EXPR = "{ NOT miva_array_search( l.data:dest_items, 1, l.dest_item, 'l.dest_item:code EQ l.copypagerulesettings:item_code' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.copy_item_count" VALUE = "{ miva_array_insert_var( l.copy_items, l.source_item, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvFOREACH ITERATOR = "l.copy_item" ARRAY = "l.copy_items" COUNT = "{ l.copy_item_count }">
		<MvASSIGN NAME = "l.module" VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.copy_item:mod_code, l.module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT l.module:active }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT l.module:feature_hash:component }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ l.module:api_ver LT 10.05 }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.source_component_settings" VARIABLE = "l.source_page:settings">
			<MvMEMBER NAME = "{ l.copy_item:code }">
		</MvREFERENCEARRAY>

		<MvREFERENCEARRAY NAME = "l.dest_component_settings" VARIABLE = "l.dest_page:settings">
			<MvMEMBER NAME = "{ l.copy_item:code }">
		</MvREFERENCEARRAY>

		<MvCOMMENT>
		|
		| ComponentModule_Page_Copy is triggered only if the source and destination branches are the same,
		| or the module's api version is 10.08 or higher and includes the source and destination branches
		| as parameters. We are intentionally not triggering the module copy if the branches are different
		| and the module does not support branch parameters, as the module would have no indication that
		| the branches differed and could update data in the wrong context.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.module:api_ver GE 10.08 }">
			<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].ComponentModule_Page_Copy( l.module, l.copy_item:code, l.source_branch, l.source_page, l.source_component_settings, l.dest_branch, l.dest_page, l.dest_component_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.source_branch:id EQ l.dest_branch:id }">
			<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].ComponentModule_Page_Copy( l.module, l.copy_item:code, l.source_page, l.source_component_settings, l.dest_page, l.dest_component_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CopyPage_Copy_Template" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.copypagerules:template }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplateVersion_Load_Branch_Head( l.source_branch:id, l.source_page:templ_id, l.source_template ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.data:dest_template_source" VALUE = "{ l.source_template:source }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CopyPage_Copy_Cacheset" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.copypagerules:cacheset }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.dest_page:cache"	VALUE = "{ l.source_page:cache }">
	<MvASSIGN NAME = "l.dest_page:cacheset"	VALUE = "{ l.source_page:cacheset }">

	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].Page_Update_CacheSettings( l.dest_page ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CopyPage_Copy_Public" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.copypagerules:public }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.dest_page:public" VALUE = "{ l.source_page:public }">	

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CopyPage_Copy_JavaScript" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.copypagerules:jsres }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.source_scriptresource_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Branch_Page( l.source_branch:id, l.source_page:id, l.source_scriptresources ) }">
	<MvASSIGN NAME = "l.dest_scriptresource_count"		VALUE = "{ [ g.Feature_Filename_TUI_DB ].JavaScriptResourceList_Load_Branch_Page( l.dest_branch:id, l.dest_page:id, l.dest_scriptresources ) }">

	<MvASSIGN NAME = "l.already_assigned_lookup"		VALUE = "">

	<MvASSIGN NAME = "l.assign_resources"				VALUE = "">
	<MvASSIGN NAME = "l.assign_resource_count"			VALUE = 0>

	<MvASSIGN NAME = "l.unassign_resources"				VALUE = "">
	<MvASSIGN NAME = "l.unassign_resource_count"		VALUE = 0>

	<MvIF EXPR = "{ l.source_branch:id NE l.dest_branch:id }">
		<MvCOMMENT>
		|
		| When the source and destination branches are different, we must reload the "source"
		| resources by code on the destination branch to ensure they exist on the destination
		| branch. Any resources that do not exist on the destination branch should be skipped.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.tmp_source_scriptresources"			VALUE = "{ l.source_scriptresources }">
		<MvASSIGN NAME = "l.tmp_source_scriptresource_count"	VALUE = "{ l.source_scriptresource_count }">
		<MvASSIGN NAME = "l.source_scriptresources"				VALUE = "">
		<MvASSIGN NAME = "l.source_scriptresource_count"		VALUE = 0>

		<MvFOREACH ITERATOR = "l.tmp_source_scriptresource" ARRAY = "l.tmp_source_scriptresources" COUNT = "{ l.tmp_source_scriptresource_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Branch_Code( l.dest_branch:id, l.tmp_source_scriptresource:code, l.scriptresource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.source_scriptresource_count" VALUE = "{ miva_array_insert_var( l.source_scriptresources, l.scriptresource, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvFOREACH ITERATOR = "l.dest_scriptresource" ARRAY = "l.dest_scriptresources" COUNT = "{ l.dest_scriptresource_count }">
		<MvIF EXPR = "{ miva_array_search( l.source_scriptresources, 1, l.source_scriptresource, 'l.source_scriptresource:id EQ l.dest_scriptresource:id' ) }">
			<MvASSIGNARRAY NAME = "l.already_assigned_lookup" VALUE = 1>
				<MvDIMENSION INDEX = "{ l.dest_scriptresource:id }">
			</MvASSIGNARRAY>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.unassign_resource_count" VALUE = "{ miva_array_insert_var( l.unassign_resources, l.dest_scriptresource, -1 ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.source_scriptresource" ARRAY = "l.source_scriptresources" COUNT = "{ l.source_scriptresource_count }">
		<MvREFERENCEARRAY NAME = "l.item_already_assigned" VARIABLE = "l.already_assigned_lookup">
			<MvDIMENSION INDEX = "{ l.source_scriptresource:id }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.item_already_assigned }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.assign_resource_count" VALUE = "{ miva_array_insert_var( l.assign_resources, l.source_scriptresource, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.unassign_resource_count OR l.assign_resource_count }">
		<MvASSIGN NAME = "l.xref_id"	VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'JavaScriptResourceReferences' ) }">

		<MvFOREACH ITERATOR = "l.scriptresource" ARRAY = "l.unassign_resources" COUNT = "{ l.unassign_resource_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Load_Branch_Head( l.dest_branch:id, l.scriptresource:id, l.scriptresourceversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Fork_CrossReferences_ID( l.dest_branch:id, l.scriptresourceversion, l.xref_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.scriptresourcexpage:script_id"	VALUE = "{ l.scriptresourceversion:res_id }">
			<MvASSIGN NAME = "l.scriptresourcexpage:xref_id"	VALUE = "{ l.scriptresourceversion:xref_id }">
			<MvASSIGN NAME = "l.scriptresourcexpage:page_id"	VALUE = "{ l.dest_page:id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXPage_Delete_LowLevel( l.scriptresourcexpage ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00086', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' removed from page \'' $ l.dest_page:code $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.scriptresource" ARRAY = "l.assign_resources" COUNT = "{ l.assign_resource_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Load_Branch_Head( l.dest_branch:id, l.scriptresource:id, l.scriptresourceversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceVersion_Fork_CrossReferences_ID( l.dest_branch:id, l.scriptresourceversion, l.xref_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.scriptresourcexpage:script_id"	VALUE = "{ l.scriptresourceversion:res_id }">
			<MvASSIGN NAME = "l.scriptresourcexpage:xref_id"	VALUE = "{ l.scriptresourceversion:xref_id }">
			<MvASSIGN NAME = "l.scriptresourcexpage:page_id"	VALUE = "{ l.dest_page:id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResourceXPage_Insert_LowLevel( l.scriptresourcexpage ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00087', 'JavaScript Resource \'' $ l.scriptresource:code $ '\' assigned to page \'' $ l.dest_page:code $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CopyPage_Copy_CSS" PARAMETERS = "copypagerules var, source_branch var, source_page var, dest_branch var, dest_page var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.copypagerules:cssres }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.source_cssresource_count"	VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Branch_Page( l.source_branch:id, l.source_page:id, l.source_cssresources ) }">
	<MvASSIGN NAME = "l.dest_cssresource_count"		VALUE = "{ [ g.Feature_Filename_TUI_DB ].CSSResourceList_Load_Branch_Page( l.dest_branch:id, l.dest_page:id, l.dest_cssresources ) }">

	<MvASSIGN NAME = "l.already_assigned_lookup"	VALUE = "">

	<MvASSIGN NAME = "l.assign_resources"			VALUE = "">
	<MvASSIGN NAME = "l.assign_resource_count"		VALUE = 0>

	<MvASSIGN NAME = "l.unassign_resources"			VALUE = "">
	<MvASSIGN NAME = "l.unassign_resource_count"	VALUE = 0>

	<MvIF EXPR = "{ l.source_branch:id NE l.dest_branch:id }">
		<MvCOMMENT>
		|
		| When the source and destination branches are different, we must reload the "source"
		| resources by code on the destination branch to ensure they exist on the destination
		| branch. Any resources that do not exist on the destination branch should be skipped.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.tmp_source_cssresources"		VALUE = "{ l.source_cssresources }">
		<MvASSIGN NAME = "l.tmp_source_cssresource_count"	VALUE = "{ l.source_cssresource_count }">
		<MvASSIGN NAME = "l.source_cssresources"			VALUE = "">
		<MvASSIGN NAME = "l.source_cssresource_count"		VALUE = 0>

		<MvFOREACH ITERATOR = "l.tmp_source_cssresource" ARRAY = "l.tmp_source_cssresources" COUNT = "{ l.tmp_source_cssresource_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Branch_Code( l.dest_branch:id, l.tmp_source_cssresource:code, l.cssresource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.source_cssresource_count"	VALUE = "{ miva_array_insert_var( l.source_cssresources, l.cssresource, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvFOREACH ITERATOR = "l.dest_cssresource" ARRAY = "l.dest_cssresources" COUNT = "{ l.dest_cssresource_count }">
		<MvIF EXPR = "{ miva_array_search( l.source_cssresources, 1, l.source_cssresource, 'l.source_cssresource:id EQ l.dest_cssresource:id' ) }">
			<MvASSIGNARRAY NAME = "l.already_assigned_lookup" VALUE = 1>
				<MvDIMENSION INDEX = "{ l.dest_cssresource:id }">
			</MvASSIGNARRAY>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.unassign_resource_count" VALUE = "{ miva_array_insert_var( l.unassign_resources, l.dest_cssresource, -1 ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.source_cssresource" ARRAY = "l.source_cssresources" COUNT = "{ l.source_cssresource_count }">
		<MvREFERENCEARRAY NAME = "l.item_already_assigned" VARIABLE = "l.already_assigned_lookup">
			<MvDIMENSION INDEX = "{ l.source_cssresource:id }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.item_already_assigned }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.assign_resource_count" VALUE = "{ miva_array_insert_var( l.assign_resources, l.source_cssresource, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.unassign_resource_count OR l.assign_resource_count }">
		<MvASSIGN NAME = "l.xref_id" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'CSSResourceReferences' ) }">

		<MvFOREACH ITERATOR = "l.cssresource" ARRAY = "l.unassign_resources" COUNT = "{ l.unassign_resource_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Load_Branch_Head( l.dest_branch:id, l.cssresource:id, l.cssresourceversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Fork_CrossReferences_ID( l.dest_branch:id, l.cssresourceversion, l.xref_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.cssresourcexpage:css_id"	VALUE = "{ l.cssresourceversion:res_id }">
			<MvASSIGN NAME = "l.cssresourcexpage:xref_id"	VALUE = "{ l.cssresourceversion:xref_id }">
			<MvASSIGN NAME = "l.cssresourcexpage:page_id"	VALUE = "{ l.dest_page:id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXPage_Delete_LowLevel( l.cssresourcexpage ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00088', 'CSS Resource \'' $ l.cssresource:code $ '\' removed from page \'' $ l.dest_page:code $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.cssresource" ARRAY = "l.assign_resources" COUNT = "{ l.assign_resource_count }">
			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Load_Branch_Head( l.dest_branch:id, l.cssresource:id, l.cssresourceversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceVersion_Fork_CrossReferences_ID( l.dest_branch:id, l.cssresourceversion, l.xref_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.cssresourcexpage:css_id"	VALUE = "{ l.cssresourceversion:res_id }">
			<MvASSIGN NAME = "l.cssresourcexpage:xref_id"	VALUE = "{ l.cssresourceversion:xref_id }">
			<MvASSIGN NAME = "l.cssresourcexpage:page_id"	VALUE = "{ l.dest_page:id }">

			<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResourceXPage_Insert_LowLevel( l.cssresourcexpage ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-TUI-UT-00089', 'CSS Resource \'' $ l.cssresource:code $ '\' assigned to page \'' $ l.dest_page:code $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Helper Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "GenerateUniqueJavaScriptResourceCode_FromFilePath" PARAMETERS = "path, code var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.filename"			VALUE = "{ [ g.Module_Library_Utilities ].BaseName( l.path ) }">
	<MvASSIGN NAME = "l.extension"			VALUE = "{ [ g.Module_Library_Utilities ].Extension( l.filename ) }">
	<MvASSIGN NAME = "l.extension_pos"		VALUE = "{ indexofl( l.extension, l.filename, len_var( l.filename ) ) }">

	<MvIF EXPR = "{ l.extension_pos EQ 0 }">
		<MvASSIGN NAME = "l.extension_pos"	VALUE = "{ len_var( l.filename ) }">
	</MvIF>

	<MvASSIGN NAME = "l.code_prefix"		VALUE = "{ substring( [ g.Module_Library_Utilities ].AlphaNumericOnly( substring_var( l.filename, 1, l.extension_pos ) ), 1, 45 ) }">
	<MvASSIGN NAME = "l.code"				VALUE = "{ l.code_prefix }">

	<MvFOR COUNT = 100>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.code"			VALUE = "{ l.code_prefix $ random( 9 ) $ random( 9 ) $ random( 9 ) $ random( 9 ) $ random( 9 ) }">
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00055', 'Unable to generate unique JavaScript Resource code after 100 attempts' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "GenerateUniqueJavaScriptResourceCode_FromCode" PARAMETERS = "base_resource_code, code var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.code" VALUE = "{ l.base_resource_code }">

	<MvFOR COUNT = 100>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].JavaScriptResource_Load_Code( l.code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.code" VALUE = "{ substring_var( l.base_resource_code, 1, 45 ) $ random( 9 ) $ random( 9 ) $ random( 9 ) $ random( 9 ) $ random( 9 ) }">
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00090', 'Unable to generate unique JavaScript Resource code after 100 attempts' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "GenerateUniqueCSSResourceCode_FromFilePath" PARAMETERS = "path, code var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.filename"			VALUE = "{ [ g.Module_Library_Utilities ].BaseName( l.path ) }">
	<MvASSIGN NAME = "l.extension"			VALUE = "{ [ g.Module_Library_Utilities ].Extension( l.filename ) }">
	<MvASSIGN NAME = "l.extension_pos"		VALUE = "{ indexofl( l.extension, l.filename, len_var( l.filename ) ) }">

	<MvIF EXPR = "{ l.extension_pos EQ 0 }">
		<MvASSIGN NAME = "l.extension_pos"	VALUE = "{ len_var( l.filename ) }">
	</MvIF>

	<MvASSIGN NAME = "l.code_prefix"		VALUE = "{ substring( [ g.Module_Library_Utilities ].AlphaNumericOnly( substring_var( l.filename, 1, l.extension_pos ) ), 1, 45 ) }">
	<MvASSIGN NAME = "l.code"				VALUE = "{ l.code_prefix }">

	<MvFOR COUNT = 100>
		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].CSSResource_Load_Code( l.code, l.null ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.code"			VALUE = "{ l.code_prefix $ random( 9 ) $ random( 9 ) $ random( 9 ) $ random( 9 ) $ random( 9 ) }">
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00056', 'Unable to generate unique CSS Resource code after 100 attempts' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "GenerateBranchlessUniqueManagedTemplateFilename_FromFilename" PARAMETERS = "filename" STANDARDOUTPUTLEVEL = "">
	<MvWHILE EXPR = "{ 1 }">
		<MvIF EXPR = "{ ( len_var( l.filename ) GT 254 ) OR ( '/' IN l.filename ) OR ( asciichar( 0 ) IN l.filename ) }">
			<MvASSIGN NAME = "l.filename" VALUE = "{ crypto_md5( l.filename ) $ '.mvc' }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedTemplate_Load_Branchless_Filename( l.filename, l.template ) }">
			<MvWHILESTOP>
		</MvIF>

		<MvASSIGN NAME = "l.filename" VALUE = "{ l.template:id $ '_' $ l.template:filename }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.filename }">
</MvFUNCTION>

<MvFUNCTION NAME = "JavaScriptResource_Default_Attributes" PARAMETERS = "type, attributes var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attribute_count"													VALUE = 0>
	<MvASSIGN NAME = "l.attributes" INDEX = "{ ++l.attribute_count }"	MEMBER = "name"		VALUE = "type">
	<MvASSIGN NAME = "l.attributes" INDEX = "{ l.attribute_count }"		MEMBER = "value"	VALUE = "text/javascript">

	<MvFUNCTIONRETURN VALUE = "{ l.attribute_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "CSSResource_Default_Attributes" PARAMETERS = "type, attributes var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attribute_count"															VALUE = 0>
	<MvASSIGN NAME = "l.attributes" 		INDEX = "{ ++l.attribute_count }"	MEMBER = "name"		VALUE = "type">
	<MvASSIGN NAME = "l.attributes" 		INDEX = "{ l.attribute_count }"		MEMBER = "value"	VALUE = "text/css">

	<MvASSIGN NAME = "l.attributes" 		INDEX = "{ ++l.attribute_count }"	MEMBER = "name"		VALUE = "media">
	<MvASSIGN NAME = "l.attributes" 		INDEX = "{ l.attribute_count }"		MEMBER = "value"	VALUE = "all">

	<MvIF EXPR = "{ l.type EQ 'C' OR l.type EQ 'L' OR l.type EQ 'E' OR l.type EQ 'M' OR l.type EQ 'Z' }">
		<MvASSIGN NAME = "l.attributes" 	INDEX = "{ ++l.attribute_count }"	MEMBER = "name"		VALUE = "rel">
		<MvASSIGN NAME = "l.attributes" 	INDEX = "{ l.attribute_count }"		MEMBER = "value"	VALUE = "stylesheet">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.attribute_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "ManagedContent_Generate_SRI_Attributes" PARAMETERS = "content_id, attributes var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Feature_Filename_TUI_DB ].ManagedContent_Load_ID( l.content_id, l.managedcontent ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT crypto_evp_digest( 'sha256', l.managedcontent:content, l.content_sha256 ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00091', crypto_last_error() ) }">
	<MvELSEIF EXPR = "{ NOT crypto_evp_digest( 'sha384', l.managedcontent:content, l.content_sha384 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00092', crypto_last_error() ) }">
	<MvELSEIF EXPR = "{ NOT crypto_evp_digest( 'sha512', l.managedcontent:content, l.content_sha512 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-TUI-UT-00093', crypto_last_error() ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_array_search( l.attributes, 1, l.attribute, 'strcasecmp( l.attribute:name, \'crossorigin\' ) EQ 0' ) }">
		<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "{ l.attribute }">
	<MvELSE>
		<MvASSIGN NAME = "l.crossorigin_attribute"			VALUE = "">
		<MvASSIGN NAME = "l.crossorigin_attribute:name"		VALUE = "crossorigin">
		<MvASSIGN NAME = "l.crossorigin_attribute:value"	VALUE = "anonymous">
	</MvIF>

	<MvASSIGN NAME = "l.integrity_attribute"				VALUE = "">
	<MvASSIGN NAME = "l.integrity_attribute:name"			VALUE = "integrity">
	<MvASSIGN NAME = "l.integrity_attribute:value"			VALUE = "{ 'sha256-' $ crypto_base64_encode( l.content_sha256 ) $ ' sha384-' $ crypto_base64_encode( l.content_sha384 ) $ ' sha512-' $ crypto_base64_encode( l.content_sha512 ) }">

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_filter( l.attributes, 1, l.attribute, '( strcasecmp( l.attribute:name, \'integrity\' ) NE 0 ) AND ( strcasecmp( l.attribute:name, \'crossorigin\' ) NE 0 )', l.attributes ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.attributes, l.integrity_attribute, -1 ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.attributes, l.crossorigin_attribute, -1 ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImageFilePath_StripImageRoot" PARAMETERS = "file_path" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( g.imageroot IN l.file_path ) EQ 1 }">
		<MvFUNCTIONRETURN VALUE = "{ substring_var( l.file_path, len_var( g.imageroot ) + 1, len_var( l.file_path ) - len_var( g.imageroot ) ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.file_path }">
</MvFUNCTION>
