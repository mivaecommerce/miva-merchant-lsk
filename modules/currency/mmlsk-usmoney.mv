<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2020 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-CUR-USM-
| Next Error Code: 1    
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-usmoney">
	<MvASSIGN NAME = "l.module:name"		VALUE = "US Currency Formatting">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Miva Merchant">
	<MvASSIGN NAME = "l.module:version"		VALUE = "10.0000">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "9.07">
	<MvASSIGN NAME = "l.module:features"	VALUE = "currency">
</MvFUNCTION>

<MvFUNCTION NAME = "CurrencyModule_AddFormatting" PARAMETERS = "module var, value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( '-' IN l.value ) EQ 1 }">
		<MvASSIGN NAME = "l.value" VALUE = "{ substring( l.value, 2, len( l.value ) - 1 ) }">
		<MvASSIGN NAME = "l.negative" VALUE = 1>
	<MvELSE>
		<MvASSIGN NAME = "l.negative" VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.result" VALUE = "{ l.value ROUND 2 }">
	<MvASSIGN NAME = "l.decimalpos" VALUE = "{ '.' IN l.result }">

	<MvASSIGN NAME = "l.whole" VALUE = "{ substring( l.result, 1, l.decimalpos - 1 ) }">
	<MvASSIGN NAME = "l.decimal" VALUE = "{ substring( l.result, l.decimalpos + 1, len( l.result ) - l.decimalpos ) }">

	<MvASSIGN NAME = "l.wholelen" VALUE = "{ len( l.whole ) }">
	<MvASSIGN NAME = "l.pos" VALUE = "{ l.wholelen }">
	<MvWHILE EXPR = "{ l.pos GT 3 }">
		<MvASSIGN NAME = "l.comma" VALUE = "{ ',' $ substring( l.whole, l.pos - 2, 3 ) $ l.comma }">
		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos - 3 }">
	</MvWHILE>

	<MvASSIGN NAME = "l.comma" VALUE = "{ substring( l.whole, 1, l.pos ) $ l.comma }">
	<MvIF EXPR = "{ l.negative }">
		<MvASSIGN NAME = "l.formatted" VALUE = "{ '($' $ l.comma $ '.' $ l.decimal $ ')' }">
	<MvELSE>
		<MvASSIGN NAME = "l.formatted" VALUE = "{ '$' $ l.comma $ '.' $ l.decimal }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.formatted }">
</MvFUNCTION>

<MvFUNCTION NAME = "CurrencyModule_AddFormatPlainText" PARAMETERS = "module var, value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ CurrencyModule_AddFormatting( l.module, l.value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "CurrencyModule_AddFormatPlainTextShort" PARAMETERS = "module var, value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ CurrencyModule_AddFormatting( l.module, l.value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "CurrencyModule_Output_CurrencyFormat_JavaScript" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<script type="text/javascript">
		function MMCurrencyFormatter( value, show_whole_numbers_only )
		{
			var formatted_value;

			value			= stod_def( value, 0 );
			formatted_value	= value.toFixed( show_whole_numbers_only ? 0 : 2 ).replace( new RegExp( '(\\d)(?=(\\d{3})+($|\\.))', 'g' ), '$1,' );

			if ( value < 0 )	return ( '($' + formatted_value + ')' );
			else				return ( '$' + formatted_value );
		}
	</script>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>
