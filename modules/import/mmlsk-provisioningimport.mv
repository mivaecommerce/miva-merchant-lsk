<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2022 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-IMP-PRV-
| Next Error Code: 32   
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-provisioningimport">
	<MvASSIGN NAME = "l.module:name"		VALUE = "XML Provisioning Import">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Miva Merchant">
	<MvASSIGN NAME = "l.module:version"		VALUE = "10.0300">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "5.70">
	<MvASSIGN NAME = "l.module:features"	VALUE = "import">
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Capabilities" PARAMETERS = "module var, capabilities var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.capabilities:screen"				VALUE = 0>
	<MvASSIGN NAME = "l.capabilities:persistent"			VALUE = 1>
	<MvASSIGN NAME = "l.capabilities:format"				VALUE = "raw">
	<MvASSIGN NAME = "l.capabilities:persistent_provision"	VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Fields" PARAMETERS = "module var, import var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.import:id }">
		<MvASSIGN NAME = "g.Import_ProvisioningImport_Tags"			VALUE = "">

		<MvFOREACH ITERATOR = "l.tag" ARRAY = "l.members" COUNT = "{ [ g.Module_Library_Utilities ].StructureMembers( l.import:config:tags, l.members ) }">		
			<MvASSIGN NAME = "g.Import_ProvisioningImport_Tags"		VALUE = "{ g.Import_ProvisioningImport_Tags $ miva_variable_value( 'l.import:config:tags:' $ l.tag ) $ asciichar( 10 ) }">
		</MvFOREACH>
	<MvELSE>
		<MvASSIGN NAME = "g.Import_ProvisioningImport_Tags"			VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "tags">
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Invalid" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Prompt" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.field_id EQ 'tags' }">	<MvFUNCTIONRETURN VALUE = "Allowed Tags:">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Field" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.field_id EQ 'tags' }">
		<span style="display: block; font-style: italic; margin: 7px 0 5px;">Enter allowed tag names, one tag per line.  Names are not case sensitive.  An empty value allows all tags.</span>
		<textarea name="Import_ProvisioningImport_Tags" rows="6" cols="60"><MvEVAL EXPR = "{ encodeentities( g.Import_ProvisioningImport_Tags ) }"></textarea>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Validate" PARAMETERS = "module var, import var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Update" PARAMETERS = "module var, import var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.import:config:tags"		VALUE = "">

	<MvASSIGN NAME = "l.tags"					VALUE = "{ trim( g.Import_ProvisioningImport_Tags ) }">
	<MvASSIGN NAME = "l.tags"					VALUE = "{ glosub( l.tags, asciichar( 13 ), asciichar( 10 ) ) }">

	<MvASSIGN NAME = "l.newline_pos"			VALUE = "{ asciichar( 10 ) IN l.tags }">
	<MvWHILE EXPR = "{ l.newline_pos }">
		<MvASSIGN NAME = "l.tag"				VALUE = "{ trim( substring( l.tags, 1, l.newline_pos - 1 ) ) }">

		<MvIF EXPR = "{ NOT ISNULL l.tag }">
			<MvASSIGNARRAY NAME = "l.import:config:tags" VALUE = "{ l.tag }">
				<MvMEMBER NAME = "{ l.tag }">
			</MvASSIGNARRAY>
		</MvIF>

		<MvASSIGN NAME = "l.tags"				VALUE = "{ substring( l.tags, l.newline_pos + 1, len( l.tags ) - l.newline_pos ) }">
		<MvASSIGN NAME = "l.newline_pos"		VALUE = "{ asciichar( 10 ) IN l.tags }">
	</MvWHILE>

	<MvASSIGN NAME = "l.tag"					VALUE = "{ trim( l.tags ) }">

	<MvIF EXPR = "{ NOT ISNULL l.tag }">
		<MvASSIGNARRAY NAME = "l.import:config:tags" VALUE = "{ l.tag }">
			<MvMEMBER NAME = "{ l.tag }">
		</MvASSIGNARRAY>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_StatusFields" PARAMETERS = "module var, import var, fields var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCE NAME = "l.field" VARIABLE = "l.fields[ 1 ]">		<MvASSIGN NAME = "l.field:code" VALUE = "lineno">		<MvASSIGN NAME = "l.field:prompt" VALUE = "Line Number:">			<MvASSIGN NAME = "l.field:initial" VALUE = "">
	<MvREFERENCE NAME = "l.field" VARIABLE = "l.fields[ 2 ]">		<MvASSIGN NAME = "l.field:code" VALUE = "last_tag">		<MvASSIGN NAME = "l.field:prompt" VALUE = "Last Tag Processed:">	<MvASSIGN NAME = "l.field:initial" VALUE = "">

	<MvFUNCTIONRETURN VALUE = 2>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Raw_Import_Begin" PARAMETERS = "module var, import var, session var, filepath, run_data var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Attempt to determine if the XML file contains a <Provision> and/or <Store> tag, and add them if needed.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT xml_parse_section_init( l.filepath, 'data', 2 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00019', 'Unable to initialize XML parser' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT xml_parse_section( l.xml, l.done ) }">
		<MvEVAL EXPR = "{ xml_parse_error( l.error_lineno, l.error_text ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00020', 'Parse Error in XML File: Line ' $ l.error_lineno $ ': ' $ l.error_text ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| xml_parse_section_init() causes a handle to the parsed file to be kept open
	| until the parsing is complete.  We call xml_parse_section_setstate() here (with an invalid state)
	| just to force the existing state to be flushed, and the file handle closed.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.null"				VALUE = "{ xml_parse_section_setstate( l.null ) }">

	<MvIF EXPR = "{ l.done }">
		<MvASSIGN NAME = "l.add_provision"	VALUE = 1>
		<MvASSIGN NAME = "l.add_store"		VALUE = 1>
	<MvELSEIF EXPR = "{ miva_member_exists( l.xml, 'Provision' ) }">
		<MvASSIGN NAME = "l.add_provision"	VALUE = 0>
		<MvASSIGN NAME = "l.add_store"		VALUE = 0>
	<MvELSEIF EXPR = "{ miva_member_exists( l.xml, 'Domain' )	OR
						miva_member_exists( l.xml, 'Store' )	OR
						miva_member_exists( l.xml, 'User' ) }">
		<MvASSIGN NAME = "l.add_provision"	VALUE = 1>
		<MvASSIGN NAME = "l.add_store"		VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.add_provision"	VALUE = 1>
		<MvASSIGN NAME = "l.add_store"		VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| If we are adding any tags, we must do so into a temporary file and then replace the original file
	| Note that we explicitly do not add any line breaks to preserve the line numbers from the original file
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.add_provision OR l.add_store }">
		<MvASSIGN NAME = "l.tempfile"		VALUE = "{ l.filepath $ '.tmp' }">
		<MvASSIGN NAME = "l.ignore"			VALUE = "{ fdelete( l.tempfile ) }">
		<MvASSIGN NAME = "l.xml"			VALUE = "">
	
		<MvIF EXPR = "{ l.add_provision }">
			<MvASSIGN NAME = "l.xml"		VALUE = "<Provision>">
		</MvIF>

		<MvIF EXPR = "{ l.add_store }">
			<MvASSIGN NAME = "l.xml"		VALUE = "{ l.xml $ '<Store code="' $ encodeentities( g.Store:code ) $ '">' }">
		</MvIF>

		<MvIF EXPR = "{ file_create( l.tempfile, 'data', l.xml ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00021', 'Unable to create temporary file' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.offset"			VALUE = 0>
		<MvASSIGN NAME = "l.numread"		VALUE = "{ file_read_bytes( l.filepath, 'data', l.offset, 1024 * 1024, l.data ) }">

		<MvWHILE EXPR = "{ l.numread GT 0 }">
			<MvIF EXPR = "{ file_append( l.tempfile, 'data', l.data ) NE l.numread }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00022', 'Unable to write to temporary file' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.offset"		VALUE = "{ l.offset + l.numread }">
			<MvASSIGN NAME = "l.numread"	VALUE = "{ file_read_bytes( l.filepath, 'data', l.offset, 1024 * 1024, l.data ) }">
		</MvWHILE>

		<MvIF EXPR = "{ l.numread LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00023', 'Unable to read from import file: ' $ file_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.xml"			VALUE = "">

		<MvIF EXPR = "{ l.add_store }">
			<MvASSIGN NAME = "l.xml"		VALUE = "</Store>">
		</MvIF>

		<MvIF EXPR = "{ l.add_provision }">
			<MvASSIGN NAME = "l.xml"		VALUE = "{ l.xml $ '</Provision>' }">
		</MvIF>

		<MvIF EXPR = "{ file_append( l.tempfile, 'data', l.xml ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00024', 'Unable to write to temporary file: ' $ file_last_error() ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT fdelete( l.filepath ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00025', 'Unable to delete import file: ' $ file_last_error() ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT frename( l.tempfile, l.filepath ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00026', 'Unable to rename temporary file \'' $ l.tempfile $ '\' to \'' $ l.filepath $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Initialize the parser, knowing that there is now always a <Provision> and at least one <Store> tag
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT xml_parse_section_init( l.filepath, 'data', 2 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00027', 'Unable to initialize XML parser' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.run_data:filesize"	VALUE = "{ fsize( l.filepath ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Raw_Import_Serialize" PARAMETERS = "module var, import var, session var, filepath, run_data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT xml_parse_section_getstate( l.run_data:xml_parse_state ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00028', 'Unable to save XML parser state' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Raw_Import_Deserialize" PARAMETERS = "module var, import var, session var, filepath, run_data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT xml_parse_section_setstate( l.run_data:xml_parse_state ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00030', 'Unable to restore XML parser state' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Raw_Import_Record" PARAMETERS = "module var, import var, session var, filepath, run_data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT xml_parse_section( l.provide_xml, l.done ) }">
		<MvEVAL EXPR = "{ xml_parse_error( l.error_lineno, l.error_text ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-IMP-PRV-00031', 'Parse Error in XML File: Line ' $ l.error_lineno $ ': ' $ l.error_text ) }">
	<MvELSEIF EXPR = "{ l.done }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvASSIGN NAME = "l.tag_lineno"											VALUE = "{ l.provide_xml:Provision:children[ 1 ]:children[ 1 ]:lineno }">
	<MvASSIGN NAME = "l.tag_name"											VALUE = "{ l.provide_xml:Provision:children[ 1 ]:children[ 1 ]:name }">
	<MvASSIGN NAME = "l.provide_xml:Provision:children[ 1 ]:attribute:code"	VALUE = "{ decodeentities( l.provide_xml:Provision:children[ 1 ]:attribute:code ) }">

	<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_RawPercentComplete_Set( l.session, ( l.provide_xml:Provision:children[ 1 ]:children[ 1 ]:offset / l.run_data:filesize ) * 100 ) }">
	<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_StatusField_Set( l.session, 'lineno',		l.tag_lineno ) }">
	<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_StatusField_Set( l.session, 'last_tag',	l.tag_name ) }">

	<MvCOMMENT>
	|
	| If a list of allowed tags is configured, prevent the processing of tags that are not in the list
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL l.import:config:tags }">
		<MvIF EXPR = "{ ISNULL miva_variable_value( 'l.import:config:tags:' $ l.tag_name ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Log( l.session, l.tag_lineno, l.tag_name $ ': Skipped because it is not in the list of permitted tags for this import' ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Execute this tag, provided it is not for a different user, a different store, or is a domain-level tag
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "g.PRV_log_file_name"	VALUE = "{ l.filepath $ '.log' }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ fdelete( g.PRV_log_file_name ) }">

	<MvIF EXPR = "{ tolower( l.provide_xml:Provision:children[ 1 ]:name ) EQ 'user' }">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.tag_name ) }">

		<MvIF EXPR = "{ miva_member_exists( l.provide_xml:Provision:children[ 1 ]:attribute, 'login' ) }">
			<MvASSIGN NAME = "l.login"	VALUE = "{ trim( miva_variable_value( 'l.provide_xml:Provision:children[ 1 ]:attribute:login' ) ) }">

			<MvIF EXPR = "{ l.login NE g.User:name }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Log( l.session, l.tag_lineno, l.tag_name $ ': Skipped because the tag applies to an invalid user' ) }">
				<MvFUNCTIONRETURN VALUE = 1>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_User( l.provide_xml:Provision:children[ 1 ] ) }">
	<MvELSEIF EXPR = "{ tolower( l.provide_xml:Provision:children[ 1 ]:name ) EQ 'store' }">
		<MvIF EXPR = "{ tolower( l.provide_xml:Provision:children[ 1 ]:attribute:code ) NE tolower( g.Store:code ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Log( l.session, l.tag_lineno, l.tag_name $ ': Skipped because its specified store code (' $ l.provide_xml:Provision:children[ 1 ]:attribute:code $ ') is different than the code of the current store' ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_Action_Provision_Store( l.provide_xml:Provision:children[ 1 ] ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Log( l.session, l.tag_lineno, l.tag_name $ ': Skipped because it is a domain-level tag' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| If any provisioning log entries were output, reflect them to the client using Import_Session_Log
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ fexists( g.PRV_log_file_name ) }">
		<MIVA MvIMPORT_Error = "nonfatal, nodisplay">
		<MvIMPORT FILE = "{ g.PRV_log_file_name }" DELIMITER = "{ asciichar( 9 ) }" FIELDS = "l.log_date, l.log_time, l.log_lineno, l.log_tag, l.log_message">
			<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Log( l.session, l.log_lineno, l.log_tag $ ': ' $ l.log_message ) }">
		</MvIMPORT>
		<MIVA MvIMPORT_Error = "nonfatal, display">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Raw_Import_End" PARAMETERS = "module var, import var, session var, filepath, run_data var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| xml_parse_section_init() causes a handle to the parsed file to be kept open
	| until the parsing is complete.  We call xml_parse_section_setstate() here (with an invalid state)
	| just to force the existing state to be flushed, and the file handle closed.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.null"				VALUE = "{ xml_parse_section_setstate( l.null ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ fdelete( l.filepath $ '.log' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Provision" PARAMETERS = "module var, import var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Tags' ) }">
		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Tags[ 1 ]:children">
			<MvIF EXPR = "{ tolower( l.child_xml:name ) NE 'tag' }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unexpected tag ' $ l.child_xml:name ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'element', l.tag ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.import:config:tags" MEMBER = "{ l.tag }" VALUE = "{ l.tag }">
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>
