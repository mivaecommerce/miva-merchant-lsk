<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-CMP-SEQ-
| Next Error Code: 19   
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-cmp-mv-sequence">
	<MvASSIGN NAME = "l.module:name"		VALUE = "Sequence">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Miva Merchant">
	<MvASSIGN NAME = "l.module:version"		VALUE = "10.1000">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "10.08">
	<MvASSIGN NAME = "l.module:features"	VALUE = "component, component_frag, component_prov, clientside, skins, json, pagebuilder_seq">
</MvFUNCTION>

<MvCOMMENT>
|
| Component Feature (component)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Tabs" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.settings:title OR l.settings:title EQ 'Sequence' }">
		<MvFUNCTIONRETURN VALUE = "{ l.item $ ':Sequence (' $ l.item $ ')' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.item $ ':' $ l.settings:title }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Validate" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update_Requires_Version" PARAMETERS = "module var, page var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PostUpdate" PARAMETERS = "module var, page var, item, field_prefix, fields var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Content" PARAMETERS = "module var, item, tab, load_fields, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ l.item }">
		<MvEVAL EXPR = "{ Element_SequenceList_CSS( l.module ) }">

		<MvIF EXPR = "{ Element_Sequence_JavaScript_Combined_Begin( l.module ) }">
			<MvEVAL EXPR = "{ Element_SequenceList_JavaScript( l.module ) }">
			<MvEVAL EXPR = "{ Element_Sequence_JavaScript_Combined_End( l.module ) }">
		</MvIF>

		<script type="text/javascript">
			MMScreen_LoadFinished( function() { new SequenceList( MMScreenContext.page, '<MvEVAL EXPR = "{ encodejavascriptstring( l.item ) }">' ); } );
		</script>

		<MvEVAL EXPR = "{ Element_SequenceList_HTML( l.module ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawButtons_Suppress( '[UPDATE]' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Defaults" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings:title"		VALUE = "">
	<MvASSIGN NAME = "l.settings:sequence"	VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Assign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Unassign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Copy" PARAMETERS = "module var, item, source_branch var, source_page var, source_settings var, dest_branch var, dest_page var, dest_settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.dest_settings" VALUE = "{ l.source_settings }">

	<MvIF EXPR = "{ l.source_branch:id EQ l.dest_branch:id }">	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-SEQ-00017', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
	<MvELSE>													<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-SEQ-00018', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' from branch \'' $ l.source_branch:name $ '\' to branch \'' $ l.dest_branch:name $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Prerender" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Head" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Start" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.render_time" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_DateTime() }">

	<MvIF EXPR = "{ ISNULL l.all_settings:total_sequence_item_pos }">
		<MvASSIGN NAME = "l.all_settings:total_sequence_item_pos" VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.sequence_item_pos" VALUE = 0>

	<MvFOREACH ITERATOR = "l.sequence_item" ARRAY = "l.settings:sequence">
		<MvIF EXPR = "{ l.sequence_item:enabled															AND
						( l.sequence_item:item NE l.item )												AND
						( l.sequence_item:dt_start EQ 0 OR l.sequence_item:dt_start LE l.render_time )	AND
						( l.sequence_item:dt_end EQ 0 OR l.sequence_item:dt_end GE l.render_time ) }">
			<MvCOMMENT>
			|
			| l.all_settings:sequence_item is assigned (instead of referenced) here to
			| avoid nested sequences overwriting the looped sequence_item. We then re-assign
			| l.all_settings:sequence_item prior to the TemplateManager_Component_Render_End
			| call to ensure the correct sequence_item is available.
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.all_settings:sequence_item_pos"			VALUE = "{ ++l.sequence_item_pos }">
			<MvASSIGN NAME = "l.all_settings:total_sequence_item_pos"	VALUE = "{ l.all_settings:total_sequence_item_pos + 1 }">

			<MvASSIGN NAME = "l.all_settings:sequence_item"				VALUE = "{ l.sequence_item }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Component_Render_Start( l.all_settings, l.sequence_item:item, l.sequence_item:param ) }">

			<MvASSIGN NAME = "l.all_settings:sequence_item"				VALUE = "{ l.sequence_item }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Component_Render_End( l.all_settings, l.sequence_item:item, l.sequence_item:param ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_End" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvCOMMENT>
|
| Component Fragment Feature (component_frag)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Initialize_Fragment" PARAMETERS = "module var, item, page_all_settings var, page_item_settings var, fragment_all_settings var, fragment_item_settings var, merged_all_settings var, merged_item_settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.merged_item_settings" VALUE = "{ l.fragment_item_settings }">

	<MvFUNCTIONRETURN VALUE = "{ ComponentModule_Initialize( l.module, l.item, l.merged_all_settings, l.merged_item_settings ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Component Provision Feature (component_prov)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Provision" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_settings" VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'Title', l.working_settings:title ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Sequence' ) }">
		<MvASSIGN NAME = "l.working_settings:sequence"	VALUE = "">

		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Sequence[ 1 ]:children" COUNT = "{ miva_array_elements( l.provide_xml:tags:Sequence[ 1 ]:children ) }">
			<MvIF EXPR = "{ tolower( l.child_xml:name ) NE 'sequenceitem' }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.sequence_item"			VALUE = "">
			<MvASSIGN NAME = "l.sequence_item:id"		VALUE = "{ MakeSessionID() }">
			<MvASSIGN NAME = "l.sequence_item:enabled"	VALUE = 1>
			<MvASSIGN NAME = "l.sequence_item:dt_start"	VALUE = 0>
			<MvASSIGN NAME = "l.sequence_item:dt_end"	VALUE = 0>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text(		'R', l.child_xml,	'Item',				l.sequence_item:item )		OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text(		'R', l.child_xml,	'Name',				l.sequence_item:name )		OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text(		'O', l.child_xml,	'ID',				l.sequence_item:id )		OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text(		'o', l.child_xml,	'Parameter',		l.sequence_item:param )		OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Boolean(	'O', l.child_xml,	'Enabled',			l.sequence_item:enabled )	OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Date(			 l.child_xml,	'NotVisibleBefore',	l.sequence_item:dt_start )	OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Date(			 l.child_xml,	'NotVisibleAfter',	l.sequence_item:dt_end ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ miva_array_search( l.working_settings:sequence, 1, l.sequence_search_item, 'l.sequence_search_item:id EQ l.sequence_item:id' ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'ID \'' $ l.sequence_item:id $ '\' already in use for this sequence' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.working_settings:sequence, l.sequence_item, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvASSIGN NAME = "l.settings" VALUE = "{ l.working_settings }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Page Builder Sequence (pagebuilder_seq)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Sequences" PARAMETERS = "module var, item, settings var, sequences var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sequence"			VALUE = "">
	<MvASSIGN NAME = "l.sequence:code"		VALUE = "{ l.item }">
	<MvASSIGN NAME = "l.sequence:name"		VALUE = "{ l.settings:title }">
	<MvASSIGN NAME = "l.sequence:name"		VALUE = "{ ternary( NOT ISNULL l.settings:title AND l.settings:title NE 'Sequence', l.settings:title, 'Sequence (' $ l.item $ ')' ) }">
	<MvASSIGN NAME = "l.sequence:elements"	VALUE = "">

	<MvFOREACH ITERATOR = "l.sequence_item" ARRAY = "l.settings:sequence">
		<MvASSIGN NAME = "l.sequence_element"				VALUE = "">
		<MvASSIGN NAME = "l.sequence_element:item_code"		VALUE = "{ l.sequence_item:item }">
		<MvASSIGN NAME = "l.sequence_element:code"			VALUE = "{ l.sequence_item:param }">
		<MvASSIGN NAME = "l.sequence_element:name"			VALUE = "{ l.sequence_item:name }">
		<MvASSIGN NAME = "l.sequence_element:enabled"		VALUE = "{ l.sequence_item:enabled }">
		<MvASSIGN NAME = "l.sequence_element:dt_start"		VALUE = "{ l.sequence_item:dt_start }">
		<MvASSIGN NAME = "l.sequence_element:dt_end"		VALUE = "{ l.sequence_item:dt_end }">

		<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.sequence:elements, l.sequence_element, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ miva_array_insert_var( l.sequences, l.sequence, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Sequence" PARAMETERS = "module var, item, settings var, sequence_code, sequence var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sequence"							VALUE = "">
	<MvASSIGN NAME = "l.sequence:code"						VALUE = "{ l.item }">
	<MvASSIGN NAME = "l.sequence:name"						VALUE = "{ ternary( NOT ISNULL l.settings:title AND l.settings:title NE 'Sequence', l.settings:title, 'Sequence (' $ l.item $ ')' ) }">
	<MvASSIGN NAME = "l.sequence:elements"					VALUE = "">

	<MvFOREACH ITERATOR = "l.sequence_item" ARRAY = "l.settings:sequence">
		<MvASSIGN NAME = "l.sequence_element"				VALUE = "">
		<MvASSIGN NAME = "l.sequence_element:item_code"		VALUE = "{ l.sequence_item:item }">
		<MvASSIGN NAME = "l.sequence_element:code"			VALUE = "{ l.sequence_item:param }">
		<MvASSIGN NAME = "l.sequence_element:name"			VALUE = "{ l.sequence_item:name }">
		<MvASSIGN NAME = "l.sequence_element:enabled"		VALUE = "{ l.sequence_item:enabled }">
		<MvASSIGN NAME = "l.sequence_element:dt_start"		VALUE = "{ l.sequence_item:dt_start }">
		<MvASSIGN NAME = "l.sequence_element:dt_end"		VALUE = "{ l.sequence_item:dt_end }">

		<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.sequence:elements, l.sequence_element, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Sequence_Update" PARAMETERS = "module var, settings var, original_sequence var, sequence var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings:sequence"				VALUE = "">

	<MvFOREACH ITERATOR = "l.sequence_element" ARRAY = "l.sequence:elements">
		<MvASSIGN NAME = "l.sequence_item"				VALUE = "">
		<MvASSIGN NAME = "l.sequence_item:id"			VALUE = "{ MakeSessionID() }">
		<MvASSIGN NAME = "l.sequence_item:item"			VALUE = "{ l.sequence_element:item_code }">
		<MvASSIGN NAME = "l.sequence_item:param"		VALUE = "{ l.sequence_element:code }">
		<MvASSIGN NAME = "l.sequence_item:name"			VALUE = "{ l.sequence_element:name }">
		<MvASSIGN NAME = "l.sequence_item:enabled"		VALUE = "{ l.sequence_element:enabled }">
		<MvASSIGN NAME = "l.sequence_item:dt_start"		VALUE = "{ l.sequence_element:dt_start }">
		<MvASSIGN NAME = "l.sequence_item:dt_end"		VALUE = "{ l.sequence_element:dt_end }">

		<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert_var( l.settings:sequence, l.sequence_item, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Module Client Side Feature (clientside)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Clientside" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( '.js' EIN g.Filename ) EQ len_var( g.Filename ) }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Filename EQ 'combined.js' }">									<MvFUNCTIONRETURN VALUE = "{ Element_Sequence_JavaScript_Combined( l.module ) }">
	<MvELSEIF EXPR = "{ Module_Clientside_Output_File( l.module, g.Filename ) }">	<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Output_File" PARAMETERS = "module var, filename" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/component/cmp-mv-sequence/output.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_File_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/component/cmp-mv-sequence/integrity.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Combined_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/component/cmp-mv-sequence/combined_integrity.mv">
</MvFUNCTION>

<MvCOMMENT>
|
| Framework Support Feature (skins)
|
</MvCOMMENT>

<MvFUNCTION NAME = "SkinsComponentModule_Description" PARAMETERS = "module var, item var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item" PARAMETERS = "module var, item var, output var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ [ g.Module_Feature_TUI_DB ].PageList_Load_Item_Runtime( l.item:id, l.pages ) }">
			<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.page:settings">
				<MvMEMBER NAME = "{ l.item:code }">
			</MvREFERENCEARRAY>

			<Page_Update code="{ l.page:code }">
				<Item code="{ l.item:code }">
					<MvIF EXPR = "{ NOT ISNULL l.settings:title }">
						<Title><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:title ) }"></Title>
					</MvIF>
					<Sequence>
						<MvFOREACH ITERATOR = "l.sequence_item" ARRAY = "l.settings:sequence">
							<SequenceItem>
								<ID><MvEVAL EXPR = "{ miva_cdata_encode( l.sequence_item:id ) }"></ID>
								<Item><MvEVAL EXPR = "{ miva_cdata_encode( l.sequence_item:item ) }"></Item>
								<Parameter><MvEVAL EXPR = "{ miva_cdata_encode( l.sequence_item:param ) }"></Parameter>
								<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.sequence_item:name ) }"></Name>
								<Enabled><MvEVAL EXPR = "{ miva_cdata_encode( l.sequence_item:enabled ) }"></Enabled>
								<NotVisibleBefore><MvEVAL EXPR = "{ int( l.sequence_item:dt_start ) }"></NotVisibleBefore>
								<NotVisibleAfter><MvEVAL EXPR = "{ int( l.sequence_item:dt_end ) }"></NotVisibleAfter>
							</SequenceItem>
						</MvFOREACH>
					</Sequence>
				</Item>
			</Page_Update>
		</MvFOREACH>
	</MvCAPTURE>
</MvFUNCTION>

<MvCOMMENT>
|
| Module JSON Feature (json)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'SequenceItemList_Load_Query' }">				<MvFUNCTIONRETURN VALUE = "{ JSON_SequenceItemList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'SequenceItem_Insert' }">					<MvFUNCTIONRETURN VALUE = "{ JSON_SequenceItem_Insert( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'SequenceItem_Update' }">					<MvFUNCTIONRETURN VALUE = "{ JSON_SequenceItem_Update( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'SequenceItem_Delete' }">					<MvFUNCTIONRETURN VALUE = "{ JSON_SequenceItem_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'SequenceItemList_DisplayOrder_Update' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_SequenceItemList_DisplayOrder_Update( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'SequenceItem_Update_Enabled' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_SequenceItem_Update_Enabled( l.module ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItemList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.sequence"			VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters,		'item',		'l.sequence_item:item' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters,		'param',	'l.sequence_item:param' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters,		'name',		'l.sequence_item:name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_BOOL( l.available_filters,		'enabled',	'l.sequence_item:enabled' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_RFC3339( l.available_filters,	'dt_start',	'l.sequence_item:dt_start' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_RFC3339( l.available_filters,	'dt_end',	'l.sequence_item:dt_end' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'R',		'Sequence',	l.sequence )	OR
					NOT [ g.Module_JSON ].JSON_Input_Filter(	'o',		'Filter',	l.filter )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o',		'Sort',		l.sort )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o:nonneg',	'Offset',	l.offset )		OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o',		'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.page:settings">
		<MvMEMBER NAME = "{ l.sequence }">
	</MvREFERENCEARRAY>

	<MvFOREACH INDEX = "l.disp_order" ITERATOR = "l.sequence_item" ARRAY = "l.settings:sequence" >
		<MvASSIGN NAME = "l.sequence_item:disp_order" VALUE = "{ l.disp_order }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.output_count" 		VALUE = 0>
	<MvASSIGN NAME = "l.total_count" 		VALUE = 0>
	<MvASSIGN NAME = "l.search_expression" 	VALUE = "1 EQ 1">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_MivaScript( l.search_expression, l.filter, l.available_filters ) }">

	<MvASSIGN NAME = "l.total_count"		VALUE = "{ miva_array_filter_ref( l.settings:sequence, 1, l.sequence_item, l.search_expression, l.filtered_array ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_sort( l.filtered_array, 'SequenceList_Sort_Callback', l.sort ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.sequence_item" ARRAY = "l.filtered_array" FIRST = "{ l.offset + 1 }" LAST = "{ l.total_count }">
				<MvIF EXPR = "{ ( l.output_count LT l.count ) OR ( l.count EQ 0 ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
					"id":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.sequence_item:id ) }">",
					"item":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.sequence_item:item ) }">",
					"param":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.sequence_item:param ) }">",
					"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.sequence_item:name ) }">",
					"enabled":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.sequence_item:enabled ) }">,
					"dt_start":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_DateTime( l.sequence_item:dt_start ) }">,
					"dt_end":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_DateTime( l.sequence_item:dt_end ) }">,
					"disp_order":	<MvEVAL EXPR = "{ int( l.sequence_item:disp_order ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvIF>
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Sequence_Load" PARAMETERS = "data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.data:page ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Sequence', l.item_code ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( l.item_code, l.data:sequence ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-SEQ-00013', 'Sequence item \'' $ l.item_code $ '\' not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].PageXItem_Load( l.data:page:id, l.data:sequence:id, l.null ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-SEQ-00014', 'Sequence \'' $ l.data:sequence:code $ '\' not found on page' ) }">
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.data:sequence_settings" VARIABLE = "l.data:page:settings">
			<MvMEMBER NAME = "{ l.data:sequence:code }">
		</MvREFERENCEARRAY>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-SEQ-00015', 'Unable to load sequence: Sequence must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItem_Load" PARAMETERS = "data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Sequence_Load( l.data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Item_ID', l.item_id ) }">
		<MvIF EXPR = "{ NOT miva_array_search( l.data:sequence_settings:sequence, 1, l.data:sequence_item, 'l.data:sequence_item:id EQ l.item_id' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-SEQ-00008', 'Sequence Item not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-SEQ-00016', 'Unable to load sequence item: Item_ID must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItem_Insert" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ SequenceItem_Lockfile_Path( l.page:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_SequenceItem_Insert_LowLevel() }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItem_Insert_LowLevel" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Sequence_Load( l.data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.sequence_item"			VALUE = "">
	<MvASSIGN NAME = "l.sequence_item:id"		VALUE = "{ MakeSessionID() }">
	<MvASSIGN NAME = "l.sequence_item:param"	VALUE = "">
	<MvASSIGN NAME = "l.sequence_item:dt_start"	VALUE = 0>
	<MvASSIGN NAME = "l.sequence_item:dt_end"	VALUE = 0>
	<MvASSIGN NAME = "l.sequence_item:enabled"	VALUE = 1>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'Item_Code',		l.sequence_item:item )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'R', 'Item_Name',		l.sequence_item:name )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Item_Parameter',	l.sequence_item:param )		OR
					NOT [ g.Module_JSON ].JSON_Input_DateTime(	'o', 'Date_Start',		l.sequence_item:dt_start )	OR
					NOT [ g.Module_JSON ].JSON_Input_DateTime(	'o', 'Date_End',		l.sequence_item:dt_end )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Enabled',			l.sequence_item:enabled ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.data:sequence_settings:sequence, l.sequence_item, -1 ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.data:page, 'Sequence Item created' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-SEQ-00003', 'Inserted item \'' $ l.sequence_item:id $ '\' in sequence \'' $ l.data:sequence:code $ '\' on page \'' $ l.data:page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItem_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ SequenceItem_Lockfile_Path( l.page:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_SequenceItem_Update_LowLevel() }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItem_Update_LowLevel" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_SequenceItem_Load( l.data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Item_Code',		l.data:sequence_item:item )			OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Item_Parameter',	l.data:sequence_item:param )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O', 'Item_Name',		l.data:sequence_item:name )			OR
					NOT [ g.Module_JSON ].JSON_Input_DateTime(	'o', 'Date_Start',		l.data:sequence_item:dt_start )		OR
					NOT [ g.Module_JSON ].JSON_Input_DateTime(	'o', 'Date_End',		l.data:sequence_item:dt_end )		OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'o', 'Enabled',			l.data:sequence_item:enabled ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.data:page, 'Sequence Item updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-SEQ-00004', 'Updated item \'' $ l.data:sequence_item:id $ '\' in sequence \'' $ l.data:sequence:code $ '\' on page \'' $ l.data:page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItem_Update_Enabled" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ SequenceItem_Lockfile_Path( l.page:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_SequenceItem_Update_Enabled_LowLevel() }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItem_Update_Enabled_LowLevel" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_SequenceItem_Load( l.data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'R', 'Enabled', l.data:sequence_item:enabled ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.data:page, 'Sequence item ' $ ternary( l.data:sequence_item:enabled, 'enabled', 'disabled' ) ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-SEQ-00012', 'Sequence item \'' $ l.data:sequence_item:id $ '\' ' $ ternary( l.data:sequence_item:enabled, 'enabled', 'disabled' ) $ ' in sequence \'' $ l.data:sequence:code $ '\' on page \'' $ l.data:page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItem_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ SequenceItem_Lockfile_Path( l.page:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_SequenceItem_Delete_LowLevel() }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItem_Delete_LowLevel" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_SequenceItem_Load( l.data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_filter_ref( l.data:sequence_settings:sequence, 1, l.search_sequence_item, 'l.search_sequence_item:id NE l.data:sequence_item:id', l.data:sequence_settings:sequence ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.data:page, 'Sequence Item deleted' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-SEQ-00005', 'Deleted item \'' $ l.data:sequence_item:id $ '\' from sequence \'' $ l.data:sequence:code $ '\' on page \'' $ l.data:page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItemList_DisplayOrder_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ SequenceItem_Lockfile_Path( l.page:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_SequenceItemList_DisplayOrder_Update_LowLevel() }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_SequenceItemList_DisplayOrder_Update_LowLevel" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_Sequence_Load( l.data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.change" ARRAY = "g.Sequence_Order">
		<MvASSIGN NAME = "l.change:id"				VALUE = "{ trim( l.change:id ) }">
		<MvASSIGN NAME = "l.change:offset"			VALUE = "{ int( l.change:offset ) }">
		<MvASSIGN NAME = "l.change:original_offset"	VALUE = "{ int( l.change:original_offset ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.change:offset ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Sequence_Order[' $ l.pos $ ']', g.Validation_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.changes"		VALUE = "">
	<MvASSIGN NAME = "l.change_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.sequence_order" ARRAY = "g.Sequence_Order">
		<MvASSIGN NAME = "l.change_count" VALUE = "{ miva_array_insert_var( l.changes, l.sequence_order, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.change_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].SortOffsetArray( l.changes, l.change_count ) }">

	<MvASSIGN NAME = "l.pastend_changes"		VALUE = "">
	<MvASSIGN NAME = "l.pastend_change_count"	VALUE = 0>
	<MvASSIGN NAME = "l.sequence_count"			VALUE = "{ miva_array_elements( l.data:sequence_settings:sequence ) }">

	<MvFOREACH ITERATOR = "l.change" ARRAY = "l.changes" COUNT = "{ l.change_count }">
		<MvIF EXPR = "{ l.change:offset GE l.sequence_count }">
			<MvASSIGN NAME = "l.pastend_change_count" VALUE = "{ miva_array_insert_var( l.pastend_changes, l.change, -1 ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.index" VALUE = "{ miva_array_search( l.data:sequence_settings:sequence, 1, l.sequence_item, 'l.sequence_item:id EQ l.change:id' ) }">

		<MvIF EXPR = "{ ( l.index EQ 0 ) OR ( l.index EQ l.change:offset ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.index LT l.change:offset }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.data:sequence_settings:sequence, l.sequence_item, l.change:offset + 1 ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_delete( l.data:sequence_settings:sequence, l.index, 1 ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.data:sequence_settings:sequence, l.sequence_item, l.change:offset ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_delete( l.data:sequence_settings:sequence, l.index + 1, 1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.pastend_change_count }">
		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].SortOffsetArray_PastEnd( l.pastend_changes, l.pastend_change_count ) }">

		<MvFOREACH ITERATOR = "l.change" ARRAY = "l.pastend_changes" COUNT = "{ l.pastend_change_count }">
			<MvASSIGN NAME = "l.index"	VALUE = "{ miva_array_search( l.data:sequence_settings:sequence, 1, l.sequence_item, 'l.sequence_item:id EQ l.change:id' ) }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert_var( l.data:sequence_settings:sequence, l.sequence_item, -1 ) }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_delete( l.data:sequence_settings:sequence, l.index, 1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.data:page, 'Updated sequence display order' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-SEQ-00011', 'Updated sequence display order for sequence \'' $ l.data:sequence:code $ '\' on page \'' $ l.data:page:code ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Helper Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "SequenceList_Sort_Callback" PARAMETERS = "left var, right var, sort var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.sort EQ 'item' }">			<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:item, l.right:item ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-item' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:item, l.left:item ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'param' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:param, l.right:param ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-param' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:param, l.left:param ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'name' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:name, l.right:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-name' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:name, l.left:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'enabled' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:enabled, l.right:enabled ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-enabled' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:enabled, l.left:enabled ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'dt_start' }">
		<MvIF EXPR = "{ l.left:dt_start LT l.right:dt_start }">		<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSEIF EXPR = "{ l.left:dt_start GT l.right:dt_start }">	<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSE>													<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.sort EQ '-dt_start' }">
		<MvIF EXPR = "{ l.left:dt_start LT l.right:dt_start }">		<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSEIF EXPR = "{ l.left:dt_start GT l.right:dt_start }">	<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSE>													<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.sort EQ 'dt_end' }">
		<MvIF EXPR = "{ l.left:dt_end LT l.right:dt_end }">			<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSEIF EXPR = "{ l.left:dt_end GT l.right:dt_end }">		<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSE>													<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.sort EQ '-dt_end' }">
		<MvIF EXPR = "{ l.left:dt_end LT l.right:dt_end }">			<MvASSIGN NAME = "l.result" VALUE = 1>
		<MvELSEIF EXPR = "{ l.left:dt_end GT l.right:dt_end }">		<MvASSIGN NAME = "l.result" VALUE = -1>
		<MvELSE>													<MvASSIGN NAME = "l.result" VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.result NE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.result }">
	</MvIF>

	<MvCOMMENT>
	|
	| Break ties using the disp_order
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ substring_var( l.sort, 1, 1 ) NE '-' }">
		<MvIF EXPR = "{ l.left:disp_order LT l.right:disp_order }">			<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ l.left:disp_order GT l.right:disp_order  }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.left:disp_order LT l.right:disp_order }">			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ l.left:disp_order GT l.right:disp_order  }">	<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "SequenceItem_Lockfile_Path" PARAMETERS = "page_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.MerchantPath $ 'sequenceitem_' $ l.page_id }">
</MvFUNCTION>

<MvINCLUDE FILE = "modules/component/cmp-mv-sequence/combined.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-sequence/functions.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-sequence/list.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-sequence/sequenceitemaddeditdialog.mv">
<MvINCLUDE FILE = "json/mivascript.mv">
