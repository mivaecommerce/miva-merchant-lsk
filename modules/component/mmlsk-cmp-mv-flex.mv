<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2025 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-CMP-MV-FLEX-
| Next Error Code: 377    
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-cmp-mv-flex">
	<MvASSIGN NAME = "l.module:name"		VALUE = "Flex Component">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Miva Merchant">
	<MvASSIGN NAME = "l.module:version"		VALUE = "10.1301">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "10.10">
	<MvASSIGN NAME = "l.module:features"	VALUE = "data_store, util, component, component_frag, component_prov, provision_store, json, json_upload, clientside, clientside_sri, pagebuilder_cmp, json_changeset, skins">
</MvFUNCTION>

<MvCOMMENT>
|
| Feature: data_store
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Install_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreKey_Insert( 'FlexComponents',			1 ) OR
					NOT [ g.Module_Library_DB ].StoreKey_Insert( 'FlexComponentVersions',	1 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'FlexComponents
						  (
							id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							code		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 50 )	$ ',
							name		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 100 )	$ ',
							ctype		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 10 )	$ ',
							prop_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							upg_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							init_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							inst_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ '
						  ) ' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00141', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponents_1 ON ' $ g.Store_Table_Prefix $ 'FlexComponents ( id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00142', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponents_2 ON ' $ g.Store_Table_Prefix $ 'FlexComponents ( code )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00143', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources
						  (
							fc_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							code		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 50 )	$ ',
							res_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ '
						  ) ' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00144', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources_1 ON ' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources ( fc_id, code )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00145', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources
						  (
							fc_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							code		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 50 )	$ ',
							res_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ '
						  ) ' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00146', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources_1 ON ' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources ( fc_id, code )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00147', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentVersions
						  (
							id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							fc_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							version		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 20 )	$ ',
							propver_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							upgver_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							initver_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							instver_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ '
						  ) ' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00148', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponentVersions_1 ON ' $ g.Store_Table_Prefix $ 'FlexComponentVersions ( id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00149', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponentVersions_2 ON ' $ g.Store_Table_Prefix $ 'FlexComponentVersions ( fc_id, version )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00150', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentVersionJavaScriptResources
						  (
							fc_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							fcv_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							res_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							resver_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							xref_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ '
						  ) ' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00151', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponentVersionJavaScriptResources_1 ON ' $ g.Store_Table_Prefix $ 'FlexComponentVersionJavaScriptResources ( fcv_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00152', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentVersionCSSResources
						  (
							fc_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							fcv_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							res_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							resver_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							xref_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ '
						  ) ' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00153', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponentVersionCSSResources_1 ON ' $ g.Store_Table_Prefix $ 'FlexComponentVersionCSSResources ( fcv_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00154', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies
						  (
							fc_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							fcv_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							type		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 10 )	$ ',
							code		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 50 )	$ ',
							op			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 10 )	$ ',
							version		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 20 )	$ '
						  ) ' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00269', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies_1 ON ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies ( fc_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00270', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies_2 ON ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies ( fcv_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00271', g.MvQUERY_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Item_Load_Code( 'flex', l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_Item( 'flex', l.module:code ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Upgrade_Store" PARAMETERS = "module var, version" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.module:version EQ l.version }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00011', 'Module \'' $ l.module:name $ '\' does not support manual upgrade.  New versions may only be obtained through the streaming update system.' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Uninstall_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Library_DB ].StoreKey_Delete( 'FlexComponents' ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Library_DB ].StoreKey_Delete( 'FlexComponentVersions' ) }">

	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'FlexComponents' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentVersions' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentVersionJavaScriptResources' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentVersionCSSResources' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies' }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Store Utilities Feature (util)
|
</MvCOMMENT>

<MvFUNCTION NAME = "StoreUtilityModule_LeftNavigation_Privileges" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = -1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_LeftNavigation" PARAMETERS = "module var, indent" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Screen_Privileges" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.Admin_Open_Store }">							<MvFUNCTIONRETURN VALUE = 0> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = 0> </MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Screen" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].SetTabDisplayOrderUniqueIdentifier( 'FLEX' ) }">

	<MvASSIGN NAME = "l.default"	VALUE = "FCMP">
	<MvASSIGN NAME = "l.tabs"		VALUE = "FCMP:Flex Components">
	<MvASSIGN NAME = "l.title"		VALUE = "Flex Components">

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].TabIsValid( g.Tab, l.tabs ) }">
		<MvASSIGN NAME = "g.Tab" VALUE = "{ [ g.Module_Admin ].DetermineDefaultTab( l.tabs ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginScreen_Start( l.title, '', '' ) }">

	<MvIF EXPR = "{ [ g.Module_Admin ].Element_Admin_Core_JavaScript_Combined_Begin() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_AJAX_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_UI_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_Functions_JavaScript() }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_Admin_Core_JavaScript_Combined_End() }">
	</MvIF>

	<MvIF EXPR = "{ g.Tab EQ 'FCMP' }">
		<MvEVAL EXPR = "{ Element_FlexComponentList_CSS( l.module ) }">

		<MvIF EXPR = "{ Element_FlexComponent_JavaScript_Combined_Begin( l.module ) }">
			<MvEVAL EXPR = "{ Element_FlexComponentList_JavaScript( l.module ) }">
			<MvEVAL EXPR = "{ Element_FlexComponent_JavaScript_Combined_End( l.module ) }">
		</MvIF>

		<script language="JavaScript">
			MMScreen_LoadFinished( function() { new FlexComponentList(); } );
		</script>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginScreen_Context_SetNavigationGroup( l.context, 'userinterface' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginScreen_Context_SetSubNavigationGroupWithSection( l.context, 'userinterface_advanced', 'flexcomponents' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginScreen_Context( l.context ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginScreen_End( l.title, '', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginContent() }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawTabs( l.default, l.tabs ) }">

	<MvIF EXPR = "{ g.Tab EQ 'FCMP' }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawButtons_Suppress( '[UPDATE]' ) }">
		<MvEVAL EXPR = "{ Element_FlexComponentList_HTML( l.module ) }">
	</MvIF>

	<MvHIDE FIELDS = "g.Module_Code">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].EndContent() }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawButtons( '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].EndScreen() }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Validate" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Action_Privileges" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = -1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Action" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Component Feature (component)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Tabs" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "FLXI:Flex Items">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Validate" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update_Requires_Version" PARAMETERS = "module var, page var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PostUpdate" PARAMETERS = "module var, page var, item, field_prefix, fields var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Content" PARAMETERS = "module var, item, tab, load_fields, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ 'FLXI' }">
		<MvEVAL EXPR = "{ Element_FlexItemList_CSS( l.module ) }">

		<MvIF EXPR = "{ Element_FlexComponent_JavaScript_Combined_Begin( l.module ) }">
			<MvEVAL EXPR = "{ Element_FlexItemList_JavaScript( l.module ) }">
			<MvEVAL EXPR = "{ Element_FlexComponent_JavaScript_Combined_End( l.module ) }">
		</MvIF>

		<script type="text/javascript">
			MMScreen_LoadFinished( function() { new FlexItemList( MMScreenContext.page ); } );
		</script>

		<MvEVAL EXPR = "{ Element_FlexItemList_HTML( l.module ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawButtons_Suppress( '[UPDATE]' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Defaults" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Initialize_Item( l.all_settings, 'product' ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Initialize_Item( l.all_settings, 'category' ) }">

	<MvFOREACH ITERATOR = "l.item_code" ARRAY = "l.item_codes" COUNT = "{ miva_struct_members( l.settings, l.item_codes ) }">
		<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.settings">
			<MvMEMBER NAME = "{ l.item_code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT ComponentModule_Initialize_FlexItem( l.module, l.item, l.all_settings, l.settings, l.flex_item ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_FlexItem" PARAMETERS = "module var, item, all_settings var, settings var, flex_item var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.flex_item:component_code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ FlexItemSettings_Sanitize( l.module, l.managedproperty:version:settings, l.flex_item:settings ) }">

	<MvASSIGN NAME = "l.flex_item:settings:resourcegroup_code" VALUE = "{ l.managedproperty:version:settings:resourcegroup_code }">

	<MvEVAL EXPR = "{ miva_struct_member_callback( l.flex_item:settings, 'ComponentModule_Initialize_JSON_Callback', l.managedproperty ) }">

	<MvASSIGN NAME = "l.path_prefix" VALUE = "">

	<MvIF EXPR = "{ NOT ComponentModule_Initialize_Properties( l.module, l.flex_item:item_code, l.all_settings, l.flex_item:settings, l.managedproperty:version:settings:properties, l.path_prefix ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:advanced_properties }">
		<MvIF EXPR = "{ NOT ComponentModule_Initialize_Properties( l.module, l.flex_item:item_code, l.all_settings, l.flex_item:settings:advanced, l.managedproperty:version:settings:advanced_properties, l.path_prefix ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Sanitize" PARAMETERS = "module var, component var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ FlexItemSettings_Upgrade( l.module, l.component, l.settings, l.upgraded ) }">
	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults( l.component, l.settings ) }">
	<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible( l.component, l.settings, l.upgraded ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Upgrade" PARAMETERS = "module var, component var, settings var, upgraded var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ strcasecmp( l.settings:_flex:flex_version, l.module:version ) NE 0 }">
		<MvCOMMENT>
		|
		| Placeholder for future functionality. Currently, we perform no upgrade logic when the flex version
		| does not match the module version, only ensure it is updated to the current version when they do
		| not match.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.settings:_flex:flex_version"		VALUE = "{ l.module:version }">
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.settings:_flex:settings_version, l.component:version ) EQ 0 }">
		<MvASSIGN NAME = "l.upgraded" VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.upgraded" VALUE = 1>

		<MvIF EXPR = "{ NOT l.component:upgrade_template_disabled AND
						NOT ISNULL l.component:upgrade_template_filename }">
			<MvASSIGN NAME = "l.render_settings"				VALUE = "">
			<MvASSIGN NAME = "l.render_settings:component"		VALUE = "{ l.component }">
			<MvREFERENCE NAME = "l.render_settings:instance"	VARIABLE = "l.settings">

			<MvCAPTURE VARIABLE = "l.discard">
				<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Render_Template( l.component:upgrade_template_filename, l.render_settings ) }">
			</MvCAPTURE>
		</MvIF>

		<MvASSIGN NAME = "l.settings:_flex:settings_version"	VALUE = "{ l.component:version }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults" PARAMETERS = "component var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Properties( l.component:properties, l.component:defaults, l.settings ) }">

	<MvIF EXPR = "{ NOT ISNULL l.component:advanced_properties }">
		<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Properties( l.component:advanced_properties, l.component:defaults:advanced, l.settings:advanced ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Properties" PARAMETERS = "properties var, defaults var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.property" ARRAY = "l.properties">
		<MvIF EXPR = "{ ISNULL l.property:code }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.property_defaults" VARIABLE = "l.defaults">
			<MvMEMBER NAME = "{ l.property:code }">
		</MvREFERENCEARRAY>

		<MvREFERENCEARRAY NAME = "l.property_settings" VARIABLE = "l.settings">
			<MvMEMBER NAME = "{ l.property:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.property:type EQ 'merchandisingprompt' }">			<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_MerchandisingPrompt( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'borderthickness' }">			<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_BorderThickness( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'button' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Button( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'cornerradius' }">				<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_CornerRadius( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'dropshadow' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_DropShadow( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'radio' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Radio( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'select' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Select( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'selector' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Selector( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'slider' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Slider( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'distributedslider' }">			<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_DistributedSlider( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'checkbox' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Checkbox( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'text' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Text( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'textarea' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_TextArea( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'image' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Image( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'lengthunit' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_LengthUnit( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'padding' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Padding( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'product' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Product( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'productcustomfieldlookup' }">	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_ProductCustomFieldLookup( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'category' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Category( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'categorycustomfieldlookup' }">	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_CategoryCustomFieldLookup( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'customlookup' }">				<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_CustomLookup( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'font' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Font( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'typography' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Typography( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'fragment' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Fragment( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'imagetype' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_ImageType( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'link' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Link( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'color' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Color( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'date' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Date( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'datetime' }">					<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_DateTime( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'breakpointgroup' }">			<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_BreakpointGroup( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'group' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_Group( l.property, l.property_defaults, l.property_settings ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'list' }">						<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Property_List( l.property, l.property_defaults, l.property_settings ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.output }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_MerchandisingPrompt" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:code AND ISNULL l.property_settings:code }">
		<MvASSIGN NAME = "l.property_settings:code" VALUE = "{ l.property_defaults:code }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_BorderThickness" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:border_top_width:unit AND ISNULL l.property_settings:border_top_width:unit }">		<MvASSIGN NAME = "l.property_settings:border_top_width:unit"	VALUE = "{ l.property_defaults:border_top_width:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:border_right_width:unit AND ISNULL l.property_settings:border_right_width:unit }">	<MvASSIGN NAME = "l.property_settings:border_right_width:unit"	VALUE = "{ l.property_defaults:border_right_width:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:border_bottom_width:unit AND ISNULL l.property_settings:border_bottom_width:unit }">	<MvASSIGN NAME = "l.property_settings:border_bottom_width:unit"	VALUE = "{ l.property_defaults:border_bottom_width:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:border_left_width:unit AND ISNULL l.property_settings:border_left_width:unit }">		<MvASSIGN NAME = "l.property_settings:border_left_width:unit"	VALUE = "{ l.property_defaults:border_left_width:unit }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Button" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:code AND ISNULL l.property_settings:code }">												<MvASSIGN NAME = "l.property_settings:code"			VALUE = "{ l.property_defaults:code }">			</MvIF>
	<MvIF EXPR = "{ l.property:supports_legacy AND NOT ISNULL l.property_defaults:theme_mode AND ISNULL l.property_settings:theme_mode }">	<MvASSIGN NAME = "l.property_settings:theme_mode"	VALUE = "{ l.property_defaults:theme_mode }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_CornerRadius" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:border_top_left_radius:unit AND ISNULL l.property_settings:border_top_left_radius:unit }">			<MvASSIGN NAME = "l.property_settings:border_top_left_radius:unit"		VALUE = "{ l.property_defaults:border_top_left_radius:unit }">		</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:border_top_right_radius:unit AND ISNULL l.property_settings:border_top_right_radius:unit }">			<MvASSIGN NAME = "l.property_settings:border_top_right_radius:unit"		VALUE = "{ l.property_defaults:border_top_right_radius:unit }">		</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:border_bottom_right_radius:unit AND ISNULL l.property_settings:border_bottom_right_radius:unit }">	<MvASSIGN NAME = "l.property_settings:border_bottom_right_radius:unit"	VALUE = "{ l.property_defaults:border_bottom_right_radius:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:border_bottom_left_radius:unit AND ISNULL l.property_settings:border_bottom_left_radius:unit }">		<MvASSIGN NAME = "l.property_settings:border_bottom_left_radius:unit"	VALUE = "{ l.property_defaults:border_bottom_left_radius:unit }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_DropShadow" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:box_shadow_offset_x:unit AND ISNULL l.property_settings:box_shadow_offset_x:unit }">	<MvASSIGN NAME = "l.property_settings:box_shadow_offset_x:unit"	VALUE = "{ l.property_defaults:box_shadow_offset_x:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:box_shadow_offset_y:unit AND ISNULL l.property_settings:box_shadow_offset_y:unit }">	<MvASSIGN NAME = "l.property_settings:box_shadow_offset_y:unit"	VALUE = "{ l.property_defaults:box_shadow_offset_y:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:box_shadow_blur:unit AND ISNULL l.property_settings:box_shadow_blur:unit }">			<MvASSIGN NAME = "l.property_settings:box_shadow_blur:unit"		VALUE = "{ l.property_defaults:box_shadow_blur:unit }">		</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:box_shadow_spread:unit AND ISNULL l.property_settings:box_shadow_spread:unit }">		<MvASSIGN NAME = "l.property_settings:box_shadow_spread:unit"	VALUE = "{ l.property_defaults:box_shadow_spread:unit }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Radio" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Select" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Selector" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Slider" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_DistributedSlider" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Checkbox" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Text" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_TextSettings( l.property, l.property_defaults, l.property_settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_TextArea" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_TextSettings( l.property, l.property_defaults, l.property_settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_TextSettings" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.property:textsettings:fields">
		<MvFOREACH ITERATOR = "l.pseudoclass" ARRAY = "l.field:pseudoclasses">
			<MvREFERENCEARRAY NAME = "l.field_defaults" VARIABLE = "l.property_defaults:textsettings:fields">
				<MvMEMBER NAME = "{ l.pseudoclass }">
				<MvMEMBER NAME = "{ l.field:code }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.field_settings" VARIABLE = "l.property_settings:textsettings:fields">
				<MvMEMBER NAME = "{ l.pseudoclass }">
				<MvMEMBER NAME = "{ l.field:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.field:visibility_conditions AND NOT l.field_settings:visible }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.field:type EQ 'borderthickness' }">	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_TextSettings_BorderThickness( l.field, l.field_defaults, l.field_settings ) }">
			<MvELSEIF EXPR = "{ l.field:type EQ 'button' }">		<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_TextSettings_Button( l.field, l.field_defaults, l.field_settings ) }">
			<MvELSEIF EXPR = "{ l.field:type EQ 'cornerradius' }">	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_TextSettings_CornerRadius( l.field, l.field_defaults, l.field_settings ) }">
			<MvELSEIF EXPR = "{ l.field:type EQ 'dropshadow' }">	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_TextSettings_DropShadow( l.field, l.field_defaults, l.field_settings ) }">
			<MvELSEIF EXPR = "{ l.field:type EQ 'lengthunit' }">	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_TextSettings_LengthUnit( l.field, l.field_defaults, l.field_settings ) }">
			<MvELSEIF EXPR = "{ l.field:type EQ 'padding' }">		<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_TextSettings_Padding( l.field, l.field_defaults, l.field_settings ) }">
			<MvELSEIF EXPR = "{ l.field:type EQ 'typography' }">	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_TextSettings_Typography( l.field, l.field_defaults, l.field_settings ) }">
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_TextSettings_BorderThickness" PARAMETERS = "field var, field_defaults var, field_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:border_top_width:unit AND ISNULL l.field_settings:border_top_width:unit }">			<MvASSIGN NAME = "l.field_settings:border_top_width:unit"		VALUE = "{ l.field_defaults:border_top_width:unit }">		</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:border_right_width:unit AND ISNULL l.field_settings:border_right_width:unit }">		<MvASSIGN NAME = "l.field_settings:border_right_width:unit"		VALUE = "{ l.field_defaults:border_right_width:unit }">		</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:border_bottom_width:unit AND ISNULL l.field_settings:border_bottom_width:unit }">	<MvASSIGN NAME = "l.field_settings:border_bottom_width:unit"	VALUE = "{ l.field_defaults:border_bottom_width:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:border_left_width:unit AND ISNULL l.field_settings:border_left_width:unit }">		<MvASSIGN NAME = "l.field_settings:border_left_width:unit"		VALUE = "{ l.field_defaults:border_left_width:unit }">		</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_TextSettings_Button" PARAMETERS = "field var, field_defaults var, field_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:code AND ISNULL l.field_settings:code }">											<MvASSIGN NAME = "l.field_settings:code"		VALUE = "{ l.field_defaults:code }">		</MvIF>
	<MvIF EXPR = "{ l.field:supports_legacy AND NOT ISNULL l.field_defaults:theme_mode AND ISNULL l.field_settings:theme_mode }">	<MvASSIGN NAME = "l.field_settings:theme_mode"	VALUE = "{ l.field_defaults:theme_mode }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_TextSettings_CornerRadius" PARAMETERS = "field var, field_defaults var, field_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:border_top_left_radius:unit AND ISNULL l.field_settings:border_top_left_radius:unit }">			<MvASSIGN NAME = "l.field_settings:border_top_left_radius:unit"		VALUE = "{ l.field_defaults:border_top_left_radius:unit }">		</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:border_top_right_radius:unit AND ISNULL l.field_settings:border_top_right_radius:unit }">		<MvASSIGN NAME = "l.field_settings:border_top_right_radius:unit"	VALUE = "{ l.field_defaults:border_top_right_radius:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:border_bottom_right_radius:unit AND ISNULL l.field_settings:border_bottom_right_radius:unit }">	<MvASSIGN NAME = "l.field_settings:border_bottom_right_radius:unit"	VALUE = "{ l.field_defaults:border_bottom_right_radius:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:border_bottom_left_radius:unit AND ISNULL l.field_settings:border_bottom_left_radius:unit }">	<MvASSIGN NAME = "l.field_settings:border_bottom_left_radius:unit"	VALUE = "{ l.field_defaults:border_bottom_left_radius:unit }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_TextSettings_DropShadow" PARAMETERS = "field var, field_defaults var, field_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:box_shadow_offset_x:unit AND ISNULL l.field_settings:box_shadow_offset_x:unit }">	<MvASSIGN NAME = "l.field_settings:box_shadow_offset_x:unit"	VALUE = "{ l.field_defaults:box_shadow_offset_x:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:box_shadow_offset_y:unit AND ISNULL l.field_settings:box_shadow_offset_y:unit }">	<MvASSIGN NAME = "l.field_settings:box_shadow_offset_y:unit"	VALUE = "{ l.field_defaults:box_shadow_offset_y:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:box_shadow_blur:unit AND ISNULL l.field_settings:box_shadow_blur:unit }">			<MvASSIGN NAME = "l.field_settings:box_shadow_blur:unit"		VALUE = "{ l.field_defaults:box_shadow_blur:unit }">		</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:box_shadow_spread:unit AND ISNULL l.field_settings:box_shadow_spread:unit }">		<MvASSIGN NAME = "l.field_settings:box_shadow_spread:unit"		VALUE = "{ l.field_defaults:box_shadow_spread:unit }">		</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_TextSettings_LengthUnit" PARAMETERS = "field var, field_defaults var, field_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:unit AND ISNULL l.field_settings:unit }">
		<MvASSIGN NAME = "l.field_settings:unit" VALUE = "{ l.field_defaults:unit }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_TextSettings_Padding" PARAMETERS = "field var, field_defaults var, field_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:padding_top:unit AND ISNULL l.field_settings:padding_top:unit }">		<MvASSIGN NAME = "l.field_settings:padding_top:unit"	VALUE = "{ l.field_defaults:padding_top:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:padding_right:unit AND ISNULL l.field_settings:padding_right:unit }">	<MvASSIGN NAME = "l.field_settings:padding_right:unit"	VALUE = "{ l.field_defaults:padding_right:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:padding_bottom:unit AND ISNULL l.field_settings:padding_bottom:unit }">	<MvASSIGN NAME = "l.field_settings:padding_bottom:unit"	VALUE = "{ l.field_defaults:padding_bottom:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:padding_left:unit AND ISNULL l.field_settings:padding_left:unit }">		<MvASSIGN NAME = "l.field_settings:padding_left:unit"	VALUE = "{ l.field_defaults:padding_left:unit }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_TextSettings_Typography" PARAMETERS = "field var, field_defaults var, field_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field_defaults:code AND ISNULL l.field_settings:code }">											<MvASSIGN NAME = "l.field_settings:code"		VALUE = "{ l.field_defaults:code }">		</MvIF>
	<MvIF EXPR = "{ l.field:supports_legacy AND NOT ISNULL l.field_defaults:theme_mode AND ISNULL l.field_settings:theme_mode }">	<MvASSIGN NAME = "l.field_settings:theme_mode"	VALUE = "{ l.field_defaults:theme_mode }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_TextEditor" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Image" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:image AND ISNULL l.property_settings:image }">
		<MvASSIGN NAME = "l.property_settings:image" VALUE = "{ l.property_defaults:image }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_LengthUnit" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:unit AND ISNULL l.property_settings:unit }">
		<MvASSIGN NAME = "l.property_settings:unit" VALUE = "{ l.property_defaults:unit }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Padding" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:padding_top:unit AND ISNULL l.property_settings:padding_top:unit }">			<MvASSIGN NAME = "l.property_settings:padding_top:unit"		VALUE = "{ l.property_defaults:padding_top:unit }">		</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:padding_right:unit AND ISNULL l.property_settings:padding_right:unit }">		<MvASSIGN NAME = "l.property_settings:padding_right:unit"	VALUE = "{ l.property_defaults:padding_right:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:padding_bottom:unit AND ISNULL l.property_settings:padding_bottom:unit }">	<MvASSIGN NAME = "l.property_settings:padding_bottom:unit"	VALUE = "{ l.property_defaults:padding_bottom:unit }">	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:padding_left:unit AND ISNULL l.property_settings:padding_left:unit }">		<MvASSIGN NAME = "l.property_settings:padding_left:unit"	VALUE = "{ l.property_defaults:padding_left:unit }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Product" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:product_code AND ISNULL l.property_settings:product_code }">
		<MvASSIGN NAME = "l.property_settings:product_code" VALUE = "{ l.property_defaults:product_code }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_ProductCustomFieldLookup" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Category" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:category_code AND ISNULL l.property_settings:category_code }">
		<MvASSIGN NAME = "l.property_settings:category_code" VALUE = "{ l.property_defaults:category_code }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_CategoryCustomFieldLookup" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_CustomLookup" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Font" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:code AND ISNULL l.property_settings:code }">		<MvASSIGN NAME = "l.property_settings:code" VALUE = "{ l.property_defaults:code }">		</MvIF>
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:weight AND ISNULL l.property_settings:weight }">	<MvASSIGN NAME = "l.property_settings:weight" VALUE = "{ l.property_defaults:weight }">	</MvIF>
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:style AND ISNULL l.property_settings:style }">	<MvASSIGN NAME = "l.property_settings:style" VALUE = "{ l.property_defaults:style }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Typography" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_defaults:code AND ISNULL l.property_settings:code }">												<MvASSIGN NAME = "l.property_settings:code"			VALUE = "{ l.property_defaults:code }">			</MvIF>
	<MvIF EXPR = "{ l.property:supports_legacy AND NOT ISNULL l.property_defaults:theme_mode AND ISNULL l.property_settings:theme_mode }">	<MvASSIGN NAME = "l.property_settings:theme_mode"	VALUE = "{ l.property_defaults:theme_mode }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Fragment" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_ImageType" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Link" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:type AND ISNULL l.property_settings:type }">					<MvASSIGN NAME = "l.property_settings:type"		VALUE = "{ l.property_defaults:type }">		</MvIF>
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">				<MvASSIGN NAME = "l.property_settings:value"	VALUE = "{ l.property_defaults:value }">	</MvIF>
	<MvIF EXPR = "{ l.property:supports_new_tab AND NOT ISNULL l.property_defaults:new_tab AND ISNULL l.property_settings:new_tab }">	<MvASSIGN NAME = "l.property_settings:new_tab"	VALUE = "{ l.property_defaults:new_tab }">	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Color" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
		<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Date" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.property:serverdate }">
		<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
			<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
			<MvASSIGN NAME = "l.property_settings:value:year"		VALUE = "{ l.property_defaults:value:year }">
			<MvASSIGN NAME = "l.property_settings:value:month"		VALUE = "{ l.property_defaults:value:month }">
			<MvASSIGN NAME = "l.property_settings:value:day"		VALUE = "{ l.property_defaults:value:day }">
			<MvASSIGN NAME = "l.property_settings:value:hour"		VALUE = "{ l.property_defaults:value:hour }">
			<MvASSIGN NAME = "l.property_settings:value:minute"		VALUE = "{ l.property_defaults:value:minute }">
			<MvASSIGN NAME = "l.property_settings:value:second"		VALUE = "{ l.property_defaults:value:second }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_DateTime" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.property:serverdate }">
		<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
			<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ l.property_defaults:value }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.property:required AND NOT ISNULL l.property_defaults:value AND ISNULL l.property_settings:value }">
			<MvASSIGN NAME = "l.property_settings:value:year"		VALUE = "{ l.property_defaults:value:year }">
			<MvASSIGN NAME = "l.property_settings:value:month"		VALUE = "{ l.property_defaults:value:month }">
			<MvASSIGN NAME = "l.property_settings:value:day"		VALUE = "{ l.property_defaults:value:day }">
			<MvASSIGN NAME = "l.property_settings:value:hour"		VALUE = "{ l.property_defaults:value:hour }">
			<MvASSIGN NAME = "l.property_settings:value:minute"		VALUE = "{ l.property_defaults:value:minute }">
			<MvASSIGN NAME = "l.property_settings:value:second"		VALUE = "{ l.property_defaults:value:second }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_BreakpointGroup" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Breakpoint groups are unique in that their "defaults" can include an {any} structure that provides
	| defaults for any breakpoint group (including "default", if enabled) that don't have default values
	| specified. This allows for defaults to be applied to any unknown breakpoint (because breakpoints
	| are dynamic and can be user-altered). Since defaults are set as the applied settings when assigning
	| a flex component to a page, we must translate the {any} structure to any undefined breakpoint groups
	| (including "default", if enabled) here, prior to extending the settings at a lower level.
	|
	</MvCOMMENT>
	
	<MvIF EXPR = "{ l.property:include_default }">
		<MvIF EXPR = "{ miva_member_exists( l.property_defaults, 'default' ) }">
			<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Properties( l.property:properties, l.property_defaults:default, l.property_settings:default ) }">
		<MvELSEIF EXPR = "{ miva_member_exists( l.property_defaults, '{any}' ) }">
			<MvREFERENCEARRAY NAME = "l.default_property_defaults" VARIABLE = "l.property_defaults">
				<MvMEMBER NAME = "{ '{any}' }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT miva_member_exists( l.property_settings, 'default' ) }">
				<MvASSIGN NAME = "l.property_settings:default" VALUE = "{ l.default_property_defaults }">
			</MvIF>

			<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Properties( l.property:properties, l.default_property_defaults, l.property_settings:default ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
		<MvASSIGN NAME = "l.assign_defaults" VALUE = 0>

		<MvIF EXPR = "{ miva_member_exists( l.property_defaults, l.breakpoint:code ) }">
			<MvREFERENCEARRAY NAME = "l.breakpoint_property_defaults" VARIABLE = "l.property_defaults">
				<MvMEMBER NAME = "{ l.breakpoint:code }">
			</MvREFERENCEARRAY>
		<MvELSEIF EXPR = "{ miva_member_exists( l.property_defaults, '{any}' ) }">
			<MvREFERENCEARRAY NAME = "l.breakpoint_property_defaults" VARIABLE = "l.property_defaults">
				<MvMEMBER NAME = "{ '{any}' }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT miva_member_exists( l.property_settings, l.breakpoint:code ) }">
				<MvASSIGN NAME = "l.assign_defaults" VALUE = 1>
			</MvIF>
		<MvELSE>
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.breakpoint_property_settings" VARIABLE = "l.property_settings">
			<MvMEMBER NAME = "{ l.breakpoint:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.assign_defaults }">
			<MvASSIGN NAME = "l.breakpoint_property_settings" VALUE = "{ l.breakpoint_property_defaults }">
		</MvIF>

		<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Properties( l.property:properties, l.breakpoint_property_defaults, l.breakpoint_property_settings ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_Group" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:can_disable }">
		<MvIF EXPR = "{ NOT ISNULL l.property_defaults:settings:enabled AND ISNULL l.property_settings:settings:enabled }">
			<MvASSIGN NAME = "l.property_settings:settings:enabled" VALUE = "{ l.property_defaults:settings:enabled }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.property_settings:settings:enabled }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ FlexItemSettings_Extend_Defaults_Properties( l.property:properties, l.property_defaults, l.property_settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_Extend_Defaults_Property_List" PARAMETERS = "property var, property_defaults var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Intentionally ignored due to the complexity of list defaults vs settings
	|
	</MvCOMMENT>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_SanitizeVisible" PARAMETERS = "component var, settings var, force_visibility_recalculation" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Properties( l.component:properties, l.settings, l.force_visibility_recalculation ) }">

	<MvIF EXPR = "{ NOT ISNULL l.component:advanced_properties }">
		<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Properties( l.component:advanced_properties, l.settings:advanced, l.force_visibility_recalculation ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_SanitizeVisible_Properties" PARAMETERS = "properties var, settings var, force_visibility_recalculation" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.processed_properties" VALUE = "">

	<MvFOREACH ITERATOR = "l.property" ARRAY = "l.properties">
		<MvIF EXPR = "{ ISNULL l.property:code }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Property( l.properties, l.property, l.processed_properties, l.settings, l.force_visibility_recalculation ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_SanitizeVisible_Property" PARAMETERS = "properties var, property var, processed_properties var, settings var, force_visibility_recalculation" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.property_processed" VARIABLE = "l.processed_properties">
		<MvMEMBER NAME = "{ l.property:code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.property_processed }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.property_processed" VALUE = 1>

	<MvREFERENCEARRAY NAME = "l.property_settings" VARIABLE = "l.settings">
		<MvMEMBER NAME = "{ l.property:code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT ISNULL l.property:visibility_conditions AND ( l.force_visibility_recalculation OR ISNULL l.property_settings:visible ) }">
		<MvFOREACH ITERATOR = "l.property_code" ARRAY = "l.property_codes" COUNT = "{ miva_struct_members( l.property:visibility_conditions, l.property_codes ) }">
			<MvIF EXPR = "{ strcasecmp( l.property_code, l.property:code ) EQ 0 }">
				<MvASSIGN NAME = "l.property_settings"			VALUE = "">
				<MvASSIGN NAME = "l.property_settings:visible"	VALUE = 0>

				<MvFUNCTIONRETURN>
			</MvIF>

			<MvREFERENCEARRAY NAME = "l.visibility_condition_property" VARIABLE = "l.property:visibility_conditions">
				<MvMEMBER NAME = "{ l.property_code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT miva_array_search( l.properties, 1, l.search_property, 'strcasecmp( l.search_property:code, l.property_code ) EQ 0' ) }">
				<MvASSIGN NAME = "l.property_settings"			VALUE = "">
				<MvASSIGN NAME = "l.property_settings:visible"	VALUE = 0>

				<MvFUNCTIONRETURN>
			</MvIF>

			<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Property( l.properties, l.search_property, l.processed_properties, l.settings, l.force_visibility_recalculation ) }">

			<MvREFERENCEARRAY NAME = "l.search_property_settings" VARIABLE = "l.settings">
				<MvMEMBER NAME = "{ l.search_property:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.search_property:visibility_conditions AND NOT l.search_property_settings:visible }">
				<MvASSIGN NAME = "l.property_settings"			VALUE = "">
				<MvASSIGN NAME = "l.property_settings:visible"	VALUE = 0>

				<MvFUNCTIONRETURN>
			</MvIF>

			<MvFOREACH ITERATOR = "l.value_member_name" ARRAY = "l.value_member_names" COUNT = "{ miva_struct_members( l.visibility_condition_property, l.value_member_names ) }">
				<MvREFERENCEARRAY NAME = "l.values" VARIABLE = "l.visibility_condition_property">
					<MvMEMBER NAME = "{ l.value_member_name }">
				</MvREFERENCEARRAY>

				<MvREFERENCEARRAY NAME = "l.property_value" VARIABLE = "l.search_property_settings">
					<MvMEMBER NAME = "{ l.value_member_name }">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ NOT miva_array_search( l.values, 1, l.search_value, 'l.search_value EQ l.property_value' ) }">
					<MvASSIGN NAME = "l.property_settings"			VALUE = "">
					<MvASSIGN NAME = "l.property_settings:visible"	VALUE = 0>

					<MvFUNCTIONRETURN>
				</MvIF>
			</MvFOREACH>
		</MvFOREACH>

		<MvASSIGN NAME = "l.property_settings:visible" VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.property:type EQ 'text' OR l.property:type EQ 'textarea' }">	<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Property_TextSettings( l.property, l.property_settings, l.force_visibility_recalculation ) }">
	<MvELSEIF EXPR = "{ l.property:type EQ 'breakpointgroup' }">					<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Property_BreakpointGroup( l.property, l.property_settings, l.force_visibility_recalculation ) }">
	<MvELSEIF EXPR = "{ l.property:type EQ 'group' }">								<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Property_Group( l.property, l.property_settings, l.force_visibility_recalculation ) }">
	<MvELSEIF EXPR = "{ l.property:type EQ 'list' }">								<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Property_List( l.property, l.property_settings, l.force_visibility_recalculation ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_SanitizeVisible_Property_BreakpointGroup" PARAMETERS = "property var, property_settings var, force_visibility_recalculation" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:include_default }">
		<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Properties( l.property:properties, l.property_settings:default, l.force_visibility_recalculation ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
			<MvREFERENCEARRAY NAME = "l.breakpoint_settings" VARIABLE = "l.property_settings">
				<MvMEMBER NAME = "{ l.breakpoint:code }">
			</MvREFERENCEARRAY>
	
			<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Properties( l.property:properties, l.breakpoint_settings, l.force_visibility_recalculation ) }">
		</MvFOREACH>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_SanitizeVisible_Property_Group" PARAMETERS = "property var, property_settings var, force_visibility_recalculation" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.property:can_disable OR l.property_settings:settings:enabled }">
		<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Properties( l.property:properties, l.property_settings, l.force_visibility_recalculation ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_SanitizeVisible_Property_List" PARAMETERS = "property var, property_settings var, force_visibility_recalculation" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.item_settings" ARRAY = "l.property_settings:children">
		<MvIF EXPR = "{ l.property:list_type EQ 'group' }">
			<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Properties( l.property:properties, l.item_settings, l.force_visibility_recalculation ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_SanitizeVisible_Property_TextSettings" PARAMETERS = "property var, property_settings var, force_visibility_recalculation" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.processed_fields" VALUE = "">

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.property:textsettings:fields">
		<MvIF EXPR = "{ ISNULL l.field:code }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvFOREACH ITERATOR = "l.pseudoclass" ARRAY = "l.field:pseudoclasses">
			<MvIF EXPR = "{ ISNULL l.pseudoclass }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvREFERENCEARRAY NAME = "l.pseudoclass_settings" VARIABLE = "l.property_settings:textsettings:fields">
				<MvMEMBER NAME = "{ l.pseudoclass }">
			</MvREFERENCEARRAY>

			<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Property_TextSettings_Field( l.property, l.field, l.pseudoclass, l.processed_fields, l.pseudoclass_settings, l.force_visibility_recalculation ) }">
		</MvFOREACH>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemSettings_SanitizeVisible_Property_TextSettings_Field" PARAMETERS = "property var, field var, pseudoclass var, processed_fields var, pseudoclass_settings var, force_visibility_recalculation" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.field_processed" VARIABLE = "l.processed_fields">
		<MvMEMBER NAME = "{ l.pseudoclass }">
		<MvMEMBER NAME = "{ l.field:code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.field_processed }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.field_processed" VALUE = 1>

	<MvREFERENCEARRAY NAME = "l.field_settings" VARIABLE = "l.pseudoclass_settings">
		<MvMEMBER NAME = "{ l.field:code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT ISNULL l.field:visibility_conditions AND ( l.force_visibility_recalculation OR ISNULL l.field_settings:visible ) }">
		<MvREFERENCEARRAY NAME = "l.pseudoclass_visibility_conditions" VARIABLE = "l.field:visibility_conditions">
			<MvMEMBER NAME = "{ l.pseudoclass }">
		</MvREFERENCEARRAY>

		<MvFOREACH ITERATOR = "l.field_code" ARRAY = "l.field_codes" COUNT = "{ miva_struct_members( l.pseudoclass_visibility_conditions, l.field_codes ) }">
			<MvIF EXPR = "{ strcasecmp( l.field_code, l.field:code ) EQ 0 }">
				<MvASSIGN NAME = "l.field_settings"			VALUE = "">
				<MvASSIGN NAME = "l.field_settings:visible"	VALUE = 0>

				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_array_search( l.property:textsettings:fields, 1, l.search_field, 'strcasecmp( l.search_field:code, l.field_code ) EQ 0' ) OR
							NOT miva_array_search( l.search_field:pseudoclasses, 1, l.search_pseudoclass, 'strcasecmp( l.search_pseudoclass, l.pseudoclass ) EQ 0' ) }">
				<MvASSIGN NAME = "l.field_settings"			VALUE = "">
				<MvASSIGN NAME = "l.field_settings:visible"	VALUE = 0>

				<MvFUNCTIONRETURN>
			</MvIF>

			<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible_Property_TextSettings_Field( l.property, l.search_field, l.pseudoclass, l.processed_fields, l.pseudoclass_settings, l.force_visibility_recalculation ) }">

			<MvREFERENCEARRAY NAME = "l.search_field_settings" VARIABLE = "l.pseudoclass_settings">
				<MvMEMBER NAME = "{ l.search_field:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT ISNULL l.search_field:visibility_conditions AND NOT l.search_field_settings:visible }">
				<MvASSIGN NAME = "l.field_settings"			VALUE = "">
				<MvASSIGN NAME = "l.field_settings:visible"	VALUE = 0>

				<MvFUNCTIONRETURN>
			</MvIF>

			<MvREFERENCEARRAY NAME = "l.visibility_condition_field" VARIABLE = "l.pseudoclass_visibility_conditions">
				<MvMEMBER NAME = "{ l.field_code }">
			</MvREFERENCEARRAY>

			<MvFOREACH ITERATOR = "l.value_member_name" ARRAY = "l.value_member_names" COUNT = "{ miva_struct_members( l.visibility_condition_field, l.value_member_names ) }">
				<MvREFERENCEARRAY NAME = "l.values" VARIABLE = "l.visibility_condition_field">
					<MvMEMBER NAME = "{ l.value_member_name }">
				</MvREFERENCEARRAY>

				<MvREFERENCEARRAY NAME = "l.field_value" VARIABLE = "l.search_field_settings">
					<MvMEMBER NAME = "{ l.value_member_name }">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ NOT miva_array_search( l.values, 1, l.search_value, 'l.search_value EQ l.field_value' ) }">
					<MvASSIGN NAME = "l.field_settings"			VALUE = "">
					<MvASSIGN NAME = "l.field_settings:visible"	VALUE = 0>

					<MvFUNCTIONRETURN>
				</MvIF>
			</MvFOREACH>
		</MvFOREACH>

		<MvASSIGN NAME = "l.field_settings:visible" VALUE = 1>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback" PARAMETERS = "settings var, member, managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.member NE 'json' }">
		<MvFUNCTIONRETURN VALUE = "">
	</MvIF>

	<MvCAPTURE VARIABLE = "l.settings:json" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	{
		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:properties }">
			<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Properties( l.settings, l.managedproperty:version:settings:properties ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:properties AND NOT ISNULL l.managedproperty:version:settings:advanced_properties }">
			,
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:advanced_properties }">
			"advanced":
			{
				<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Properties( l.settings:advanced, l.managedproperty:version:settings:advanced_properties ) }">
			}
		</MvIF>
	}
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ l.settings:json }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Properties" PARAMETERS = "settings var, properties var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvFOREACH INDEX = "l.property_index" ITERATOR = "l.property" ARRAY = "l.properties">
		<MvIF EXPR = "{ ISNULL l.property:code }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.property_settings" VARIABLE = "l.settings">
			<MvMEMBER NAME = "{ l.property:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.property_index GT 1 }">
			,
		</MvIF>

		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property:code ) }">":
		{
			<MvIF EXPR = "{ NOT ISNULL l.property:visibility_conditions }">
				"visible": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.property_settings:visible ) }">
			</MvIF>

			<MvIF EXPR = "{ ( ISNULL l.property:visibility_conditions ) OR ( NOT ISNULL l.property:visibility_conditions AND l.property_settings:visible ) }">
				<MvIF EXPR = "{ NOT ISNULL l.property:visibility_conditions }">
					,
				</MvIF>

				<MvIF EXPR = "{ l.property:type EQ 'merchandisingprompt' }">			<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_MerchandisingPrompt( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'borderthickness' }">			<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_BorderThickness( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'breakpoint' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Breakpoint( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'button' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Button( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'cornerradius' }">				<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_CornerRadius( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'dropshadow' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_DropShadow( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'radio' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Radio( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'select' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Select( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'selector' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Selector( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'slider' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Slider( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'distributedslider' }">			<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_DistributedSlider( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'checkbox' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Checkbox( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'text' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Text( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'textarea' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_TextArea( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'image' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Image( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'lengthunit' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_LengthUnit( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'padding' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Padding( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'product' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Product( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'productcustomfieldlookup' }">	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_ProductCustomFieldLookup( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'category' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Category( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'categorycustomfieldlookup' }">	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_CategoryCustomFieldLookup( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'customlookup' }">				<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_CustomLookup( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'font' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Font( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'typography' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Typography( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'fragment' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Fragment( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'imagetype' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_ImageType( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'link' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Link( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'color' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Color( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'date' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Date( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'datetime' }">					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_DateTime( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'breakpointgroup' }">			<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_BreakpointGroup( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'group' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Group( l.property_settings, l.property ) }">
				<MvELSEIF EXPR = "{ l.property:type EQ 'list' }">						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_List( l.property_settings, l.property ) }">
				</MvIF>
			</MvIF>
		}
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_MerchandisingPrompt" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"code":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.property_settings:code ) }">",
	"search":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.property_settings:search ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_BorderThickness" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.output_separator" VALUE = 0>

	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_top_width',		l.property_settings:border_top_width,		l.output_separator ) }">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_right_width',		l.property_settings:border_right_width,		l.output_separator ) }">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_bottom_width',	l.property_settings:border_bottom_width,	l.output_separator ) }">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_left_width',		l.property_settings:border_left_width,		l.output_separator ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Breakpoint" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"code":					"<MvEVAL EXPR = "{ encodejavascriptstring( l.property_settings:code ) }">",
	"breakpoint_available":	<MvEVAL EXPR = "{ encodejavascriptboolean( l.property_settings:breakpoint_available ) }">

	<MvIF EXPR = "{ l.property_settings:breakpoint_available }">
		, "breakpoint":
		{
			"code":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.property_settings:breakpoint:code ) }">",
			"name":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.property_settings:breakpoint:name ) }">"

			<MvASSIGN NAME = "l.output_separator" VALUE = 1>

			<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'start',	l.property_settings:breakpoint:start,	l.output_separator ) }">
			<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'end',	l.property_settings:breakpoint:end,		l.output_separator ) }">
		}
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Button" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Button_LowLevel( l.property_settings, l.property ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Button_LowLevel" PARAMETERS = "settings var, property_or_field var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.property_or_field:supports_legacy }">
		"theme_mode": <MvEVAL EXPR = "{ encodejavascriptboolean( l.settings:theme_mode ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.property_or_field:supports_legacy OR l.settings:theme_mode }">
		<MvIF EXPR = "{ l.property_or_field:supports_legacy }">
			,
		</MvIF>

		"theme_available": <MvEVAL EXPR = "{ encodejavascriptboolean( l.settings:theme_available ) }">

		<MvIF EXPR = "{ l.settings:theme_available }">
			, "code":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.settings:code ) }">",
			"size":			"<MvEVAL EXPR = "{ encodejavascriptstring( l.settings:size ) }">",
			"classname":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.settings:classname ) }">"

			<MvIF EXPR = "{ l.property_or_field:supports_customization }">
				, "customizations":
				{
					"styles":
					{
						<MvASSIGN NAME = "l.output_separator" VALUE = 0>

						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_text_color',			l.settings:customizations:styles:overwrite_text_color,				l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_font',				l.settings:customizations:styles:overwrite_font,					l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_fill_color',			l.settings:customizations:styles:overwrite_fill_color,				l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_padding',			l.settings:customizations:styles:overwrite_padding,					l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_border',				l.settings:customizations:styles:overwrite_border,					l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_corner_radius',		l.settings:customizations:styles:overwrite_corner_radius,			l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_drop_shadow',		l.settings:customizations:styles:overwrite_drop_shadow,				l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_text_settings',		l.settings:customizations:styles:overwrite_text_settings,			l.output_separator ) }">

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_text_color }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'color', 						l.settings:customizations:styles:color,								l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_font }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Font(				'font',							l.settings:customizations:styles:font,								l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'font_size',					l.settings:customizations:styles:font_size,							l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_fill_color }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'background_color',				l.settings:customizations:styles:background_color,					l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_padding }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'padding_top',					l.settings:customizations:styles:padding_top,						l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'padding_right',				l.settings:customizations:styles:padding_right,						l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'padding_bottom',				l.settings:customizations:styles:padding_bottom,					l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'padding_left',					l.settings:customizations:styles:padding_left,						l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_border }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Boolean(			'border_enabled',				l.settings:customizations:styles:border_enabled,					l.output_separator ) }">

							<MvIF EXPR = "{ l.settings:customizations:styles:border_enabled:value }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'border_top_width',				l.settings:customizations:styles:border_top_width,					l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'border_right_width',			l.settings:customizations:styles:border_right_width,				l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'border_bottom_width',			l.settings:customizations:styles:border_bottom_width,				l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'border_left_width',			l.settings:customizations:styles:border_left_width,					l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'border_style',					l.settings:customizations:styles:border_style,						l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'border_color',					l.settings:customizations:styles:border_color,						l.output_separator ) }">
							</MvIF>
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_corner_radius }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'border_top_left_radius',		l.settings:customizations:styles:border_top_left_radius,			l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'border_top_right_radius',		l.settings:customizations:styles:border_top_right_radius,			l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'border_bottom_right_radius',	l.settings:customizations:styles:border_bottom_right_radius,		l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'border_bottom_left_radius',	l.settings:customizations:styles:border_bottom_left_radius,			l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_drop_shadow }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Boolean(			'box_shadow_enabled',			l.settings:customizations:styles:box_shadow_enabled,				l.output_separator ) }">

							<MvIF EXPR = "{ l.settings:customizations:styles:box_shadow_enabled:value }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_inset',				l.settings:customizations:styles:box_shadow_inset,					l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_x',			l.settings:customizations:styles:box_shadow_offset_x,				l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_y',			l.settings:customizations:styles:box_shadow_offset_y,				l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_blur',				l.settings:customizations:styles:box_shadow_blur,					l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_spread',			l.settings:customizations:styles:box_shadow_spread,					l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_color',				l.settings:customizations:styles:box_shadow_color,					l.output_separator ) }">
							</MvIF>
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_text_settings }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'line_height',					l.settings:customizations:styles:line_height,						l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'letter_spacing',				l.settings:customizations:styles:letter_spacing,					l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'text_transform',				l.settings:customizations:styles:text_transform,					l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'overflow_wrap',				l.settings:customizations:styles:overflow_wrap,						l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Boolean(			'text_underline_enabled',		l.settings:customizations:styles:text_underline_enabled,			l.output_separator ) }">

							<MvIF EXPR = "{ l.settings:customizations:styles:text_underline_enabled:value }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'text_underline_thickness',		l.settings:customizations:styles:text_underline_thickness,			l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'text_underline_offset',		l.settings:customizations:styles:text_underline_offset,				l.output_separator ) }">
							</MvIF>
						</MvIF>
					},
					"hover_styles":
					{
						<MvASSIGN NAME = "l.output_separator" VALUE = 0>

						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_text_color',			l.settings:customizations:hover_styles:overwrite_text_color,		l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_fill_color',			l.settings:customizations:hover_styles:overwrite_fill_color,		l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_border',				l.settings:customizations:hover_styles:overwrite_border,			l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_drop_shadow',		l.settings:customizations:hover_styles:overwrite_drop_shadow,		l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_text_settings',		l.settings:customizations:hover_styles:overwrite_text_settings,		l.output_separator ) }">

						<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_text_color }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'color', 						l.settings:customizations:hover_styles:color,						l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_fill_color }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'background_color',				l.settings:customizations:hover_styles:background_color,			l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_border AND l.settings:customizations:styles:border_enabled:value }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'border_color',					l.settings:customizations:hover_styles:border_color,				l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_drop_shadow }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Boolean(			'box_shadow_enabled',			l.settings:customizations:hover_styles:box_shadow_enabled,			l.output_separator ) }">

							<MvIF EXPR = "{ l.settings:customizations:hover_styles:box_shadow_enabled:value }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_inset',				l.settings:customizations:hover_styles:box_shadow_inset,			l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_x',			l.settings:customizations:hover_styles:box_shadow_offset_x,			l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_y',			l.settings:customizations:hover_styles:box_shadow_offset_y,			l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_blur',				l.settings:customizations:hover_styles:box_shadow_blur,				l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_spread',			l.settings:customizations:hover_styles:box_shadow_spread,			l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_color',				l.settings:customizations:hover_styles:box_shadow_color,			l.output_separator ) }">
							</MvIF>
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_text_settings }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Boolean(			'text_underline_enabled',		l.settings:customizations:hover_styles:text_underline_enabled,		l.output_separator ) }">

							<MvIF EXPR = "{ l.settings:customizations:hover_styles:text_underline_enabled:value }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'text_underline_thickness',		l.settings:customizations:hover_styles:text_underline_thickness,	l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'text_underline_offset',		l.settings:customizations:hover_styles:text_underline_offset,		l.output_separator ) }">
							</MvIF>
						</MvIF>
					},
					"disabled_styles":
					{
						<MvASSIGN NAME = "l.output_separator" VALUE = 0>

						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_text_color',			l.settings:customizations:disabled_styles:overwrite_text_color,		l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_fill_color',			l.settings:customizations:disabled_styles:overwrite_fill_color,		l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_border',				l.settings:customizations:disabled_styles:overwrite_border,			l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_drop_shadow',		l.settings:customizations:disabled_styles:overwrite_drop_shadow,	l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_text_settings',		l.settings:customizations:disabled_styles:overwrite_text_settings,	l.output_separator ) }">

						<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_text_color }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'color', 						l.settings:customizations:disabled_styles:color,					l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_fill_color }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'background_color',				l.settings:customizations:disabled_styles:background_color,			l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_border AND l.settings:customizations:styles:border_enabled:value }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'border_color',					l.settings:customizations:disabled_styles:border_color,				l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_drop_shadow }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Boolean(			'box_shadow_enabled',			l.settings:customizations:disabled_styles:box_shadow_enabled,		l.output_separator ) }">

							<MvIF EXPR = "{ l.settings:customizations:disabled_styles:box_shadow_enabled:value }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_inset',				l.settings:customizations:disabled_styles:box_shadow_inset,			l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_x',			l.settings:customizations:disabled_styles:box_shadow_offset_x,		l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_y',			l.settings:customizations:disabled_styles:box_shadow_offset_y,		l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_blur',				l.settings:customizations:disabled_styles:box_shadow_blur,			l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_spread',			l.settings:customizations:disabled_styles:box_shadow_spread,		l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_color',				l.settings:customizations:disabled_styles:box_shadow_color,			l.output_separator ) }">
							</MvIF>
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_text_settings }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Boolean(			'text_underline_enabled',		l.settings:customizations:disabled_styles:text_underline_enabled,	l.output_separator ) }">

							<MvIF EXPR = "{ l.settings:customizations:disabled_styles:text_underline_enabled:value }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'text_underline_thickness',		l.settings:customizations:disabled_styles:text_underline_thickness,	l.output_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'text_underline_offset',		l.settings:customizations:disabled_styles:text_underline_offset,	l.output_separator ) }">
							</MvIF>
						</MvIF>
					},
					"breakpoint_styles":
					{
						<MvASSIGN NAME = "l.output_breakpoint_styles_separator"	VALUE = 0>
						<MvASSIGN NAME = "l.null"								VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">

						<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
							<MvREFERENCEARRAY NAME = "l.breakpoint_styles" VARIABLE = "l.settings:customizations:breakpoint_styles">
								<MvMEMBER NAME = "{ l.breakpoint:code }">
							</MvREFERENCEARRAY>

							<MvIF EXPR = "{ ISNULL l.breakpoint_styles }">
								<MvFOREACHCONTINUE>
							<MvELSEIF EXPR = "{ NOT l.breakpoint_styles:overwrite_size_settings }">
								<MvFOREACHCONTINUE>
							</MvIF>

							<MvIF EXPR = "{ l.output_breakpoint_styles_separator }">
								,
							<MvELSE>
								<MvASSIGN NAME = "l.output_breakpoint_styles_separator" VALUE = 1>
							</MvIF>

							"<MvEVAL EXPR = "{ encodejavascriptstring( l.breakpoint:code ) }">":
							{
								<MvASSIGN NAME = "l.output_breakpoint_separator" VALUE = 0>

								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(				'overwrite_size_settings',	l.breakpoint_styles:overwrite_size_settings,	l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'font_size',				l.breakpoint_styles:font_size,					l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'line_height',				l.breakpoint_styles:line_height,				l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'letter_spacing',			l.breakpoint_styles:letter_spacing,				l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'padding_top',				l.breakpoint_styles:padding_top,				l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'padding_right',			l.breakpoint_styles:padding_right,				l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'padding_bottom',			l.breakpoint_styles:padding_bottom,				l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'padding_left',				l.breakpoint_styles:padding_left,				l.output_breakpoint_separator ) }">
							}
						</MvFOREACH>
					}
				}
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_CornerRadius" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.output_separator" VALUE = 0>

	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_top_left_radius',		l.property_settings:border_top_left_radius,		l.output_separator ) }">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_top_right_radius',	l.property_settings:border_top_right_radius,	l.output_separator ) }">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_bottom_right_radius',	l.property_settings:border_bottom_right_radius,	l.output_separator ) }">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_bottom_left_radius',	l.property_settings:border_bottom_left_radius,	l.output_separator ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_DropShadow" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.output_separator" VALUE = 0>

	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Boolean(			'box_shadow_enabled',	l.property_settings:box_shadow_enabled,		l.output_separator ) }">

	<MvIF EXPR = "{ l.property_settings:box_shadow_enabled:value }">
		<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_inset',		l.property_settings:box_shadow_inset,		l.output_separator ) }">
		<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_x',	l.property_settings:box_shadow_offset_x,	l.output_separator ) }">
		<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_y',	l.property_settings:box_shadow_offset_y,	l.output_separator ) }">
		<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_blur',		l.property_settings:box_shadow_blur,		l.output_separator ) }">
		<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_spread',	l.property_settings:box_shadow_spread,		l.output_separator ) }">
		<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_color',		l.property_settings:box_shadow_color,		l.output_separator ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Radio" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Select" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Selector" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Slider" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.property:scale EQ -1 OR l.property:precision EQ -1 }">	"value": <MvEVAL EXPR = "{ int( l.property_settings:value ) }">
	<MvELSE>																	"value": <MvEVAL EXPR = "{ l.property_settings:value ROUND l.property:scale }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_DistributedSlider" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": <MvEVAL EXPR = "{ l.property_settings:value + 0 }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Checkbox" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.property_settings:value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Text" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"

	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Text_LowLevel( l.property_settings, l.property ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Text_LowLevel" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	, "textsettings":
	{
		"fields":
		{
			<MvASSIGN NAME = "l.pseudoclasses" VALUE = "">

			<MvFOREACH ITERATOR = "l.field" ARRAY = "l.property:textsettings:fields">
				<MvFOREACH ITERATOR = "l.pseudoclass" ARRAY = "l.field:pseudoclasses">
					<MvREFERENCEARRAY NAME = "l.field_settings" VARIABLE = "l.property_settings:textsettings:fields">
						<MvMEMBER NAME = "{ l.pseudoclass }">
						<MvMEMBER NAME = "{ l.field:code }">
					</MvREFERENCEARRAY>

					<MvREFERENCEARRAY NAME = "l.field_data" VARIABLE = "l.pseudoclasses">
						<MvMEMBER NAME = "{ l.pseudoclass }">
						<MvMEMBER NAME = "{ l.field:code }">
					</MvREFERENCEARRAY>

					<MvASSIGN NAME = "l.field_data:field" VALUE = "{ l.field }">

					<MvIF EXPR = "{ NOT ISNULL l.field:visibility_conditions }">
						<MvASSIGN NAME = "l.field_data:settings:visible" VALUE = "{ l.field_settings:visible }">
					</MvIF>

					<MvIF EXPR = "{ l.field:type EQ 'text'		OR
									l.field:type EQ 'select'	OR
									l.field:type EQ 'selector'	OR
									l.field:type EQ 'color' }">
						<MvASSIGN NAME = "l.field_data:settings:value"							VALUE = "{ l.field_settings:value }">
					<MvELSEIF EXPR = "{ l.field:type EQ 'borderthickness' }">
						<MvASSIGN NAME = "l.field_data:settings:border_top_width"				VALUE = "{ l.field_settings:border_top_width }">
						<MvASSIGN NAME = "l.field_data:settings:border_right_width"				VALUE = "{ l.field_settings:border_right_width }">
						<MvASSIGN NAME = "l.field_data:settings:border_bottom_width"			VALUE = "{ l.field_settings:border_bottom_width }">
						<MvASSIGN NAME = "l.field_data:settings:border_left_width"				VALUE = "{ l.field_settings:border_left_width }">
					<MvELSEIF EXPR = "{ l.field:type EQ 'breakpoint' }">
						<MvASSIGN NAME = "l.field_data:settings:code"							VALUE = "{ l.field_settings:code }">
						<MvASSIGN NAME = "l.field_data:settings:breakpoint_available"			VALUE = "{ l.field_settings:breakpoint_available }">
						<MvREFERENCE NAME = "l.field_data:settings:breakpoint"					VARIABLE = "l.field_settings:breakpoint">
					<MvELSEIF EXPR = "{ l.field:type EQ 'button' }">
						<MvASSIGN NAME = "l.field_data:settings:code"							VALUE = "{ l.field_settings:code }">
						<MvASSIGN NAME = "l.field_data:settings:size"							VALUE = "{ l.field_settings:size }">
						<MvASSIGN NAME = "l.field_data:settings:theme_mode"						VALUE = "{ l.field_settings:theme_mode }">
						<MvASSIGN NAME = "l.field_data:settings:theme_available"				VALUE = "{ l.field_settings:theme_available }">
						<MvASSIGN NAME = "l.field_data:settings:classname"						VALUE = "{ l.field_settings:classname }">
						<MvASSIGN NAME = "l.field_data:settings:customizations"					VALUE = "{ l.field_settings:customizations }">
					<MvELSEIF EXPR = "{ l.field:type EQ 'cornerradius' }">
						<MvASSIGN NAME = "l.field_data:settings:border_top_left_radius"			VALUE = "{ l.field_settings:border_top_left_radius }">
						<MvASSIGN NAME = "l.field_data:settings:border_top_right_radius"		VALUE = "{ l.field_settings:border_top_right_radius }">
						<MvASSIGN NAME = "l.field_data:settings:border_bottom_right_radius"		VALUE = "{ l.field_settings:border_bottom_right_radius }">
						<MvASSIGN NAME = "l.field_data:settings:border_bottom_left_radius"		VALUE = "{ l.field_settings:border_bottom_left_radius }">
					<MvELSEIF EXPR = "{ l.field:type EQ 'dropshadow' }">
						<MvASSIGN NAME = "l.field_data:settings:box_shadow_enabled"				VALUE = "{ l.field_settings:box_shadow_enabled }">
						<MvASSIGN NAME = "l.field_data:settings:box_shadow_inset"				VALUE = "{ l.field_settings:box_shadow_inset }">
						<MvASSIGN NAME = "l.field_data:settings:box_shadow_offset_x"			VALUE = "{ l.field_settings:box_shadow_offset_x }">
						<MvASSIGN NAME = "l.field_data:settings:box_shadow_offset_y"			VALUE = "{ l.field_settings:box_shadow_offset_y }">
						<MvASSIGN NAME = "l.field_data:settings:box_shadow_blur"				VALUE = "{ l.field_settings:box_shadow_blur }">
						<MvASSIGN NAME = "l.field_data:settings:box_shadow_spread"				VALUE = "{ l.field_settings:box_shadow_spread }">
						<MvASSIGN NAME = "l.field_data:settings:box_shadow_color"				VALUE = "{ l.field_settings:box_shadow_color }">
					<MvELSEIF EXPR = "{ l.field:type EQ 'font' }">
						<MvASSIGN NAME = "l.field_data:settings:code"							VALUE = "{ l.field_settings:code }">
						<MvASSIGN NAME = "l.field_data:settings:weight"							VALUE = "{ l.field_settings:weight }">
						<MvASSIGN NAME = "l.field_data:settings:style"							VALUE = "{ l.field_settings:style }">
						<MvREFERENCE NAME = "l.field_data:settings:font"						VARIABLE = "l.field_settings:font">
					<MvELSEIF EXPR = "{ l.field:type EQ 'lengthunit' }">
						<MvASSIGN NAME = "l.field_data:settings:value"							VALUE = "{ l.field_settings:value }">
						<MvASSIGN NAME = "l.field_data:settings:unit"							VALUE = "{ l.field_settings:unit }">
					<MvELSEIF EXPR = "{ l.field:type EQ 'padding' }">
						<MvASSIGN NAME = "l.field_data:settings:padding_top"					VALUE = "{ l.field_settings:padding_top }">
						<MvASSIGN NAME = "l.field_data:settings:padding_right"					VALUE = "{ l.field_settings:padding_right }">
						<MvASSIGN NAME = "l.field_data:settings:padding_bottom"					VALUE = "{ l.field_settings:padding_bottom }">
						<MvASSIGN NAME = "l.field_data:settings:padding_left"					VALUE = "{ l.field_settings:padding_left }">
					<MvELSEIF EXPR = "{ l.field:type EQ 'typography' }">
						<MvASSIGN NAME = "l.field_data:settings:code"							VALUE = "{ l.field_settings:code }">
						<MvASSIGN NAME = "l.field_data:settings:type"							VALUE = "{ l.field_settings:type }">
						<MvASSIGN NAME = "l.field_data:settings:theme_mode"						VALUE = "{ l.field_settings:theme_mode }">
						<MvASSIGN NAME = "l.field_data:settings:theme_available"				VALUE = "{ l.field_settings:theme_available }">
						<MvASSIGN NAME = "l.field_data:settings:classname"						VALUE = "{ l.field_settings:classname }">
						<MvASSIGN NAME = "l.field_data:settings:customizations"					VALUE = "{ l.field_settings:customizations }">
					</MvIF>
				</MvFOREACH>
			</MvFOREACH>

			<MvFOREACH INDEX = "l.pseudoclass_index" ITERATOR = "l.pseudoclass" ARRAY = "l.pseudoclass_members" COUNT = "{ miva_struct_members( l.pseudoclasses, l.pseudoclass_members ) }">
				<MvREFERENCEARRAY NAME = "l.fields" VARIABLE = "l.pseudoclasses">
					<MvMEMBER NAME = "{ l.pseudoclass }">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ l.pseudoclass_index GT 1 }">
					,
				</MvIF>

				"<MvEVAL EXPR = "{ encodejavascriptstring( l.pseudoclass ) }">":
				{
					<MvFOREACH INDEX = "l.field_index" ITERATOR = "l.field_code" ARRAY = "l.field_members" COUNT = "{ miva_struct_members( l.fields, l.field_members ) }">
						<MvREFERENCEARRAY NAME = "l.field_data" VARIABLE = "l.fields">
							<MvMEMBER NAME = "{ l.field_code }">
						</MvREFERENCEARRAY>

						<MvIF EXPR = "{ l.field_index GT 1 }">
							,
						</MvIF>

						"<MvEVAL EXPR = "{ encodejavascriptstring( l.field_code ) }">":
						{
							<MvIF EXPR = "{ NOT ISNULL l.field_data:settings:visible }">
								"visible": <MvEVAL EXPR = "{ encodejavascriptboolean( l.field_data:settings:visible ) }">
							</MvIF>

							<MvIF EXPR = "{ ( ISNULL l.field_data:settings:visible ) OR ( NOT ISNULL l.field_data:settings:visible AND l.field_data:settings:visible ) }">
								<MvIF EXPR = "{ l.field_data:field:type EQ 'text'		OR
												l.field_data:field:type EQ 'select'		OR
												l.field_data:field:type EQ 'selector'	OR
												l.field_data:field:type EQ 'color' }">
									<MvIF EXPR = "{ NOT ISNULL l.field_data:settings:visible }">
										,
									</MvIF>

									"value":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.field_data:settings:value ) }">"
								<MvELSEIF EXPR = "{ l.field_data:field:type EQ 'borderthickness' }">
									<MvASSIGN NAME = "l.output_separator" VALUE = "{ NOT ISNULL l.field_data:settings:visible }">

									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_top_width',		l.field_data:settings:border_top_width,		l.output_separator ) }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_right_width',		l.field_data:settings:border_right_width,	l.output_separator ) }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_bottom_width',	l.field_data:settings:border_bottom_width,	l.output_separator ) }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_left_width',		l.field_data:settings:border_left_width,	l.output_separator ) }">
								<MvELSEIF EXPR = "{ l.field_data:field:type EQ 'breakpoint' }">
									<MvIF EXPR = "{ NOT ISNULL l.field_data:settings:visible }">
										,
									</MvIF>

									"code":					"<MvEVAL EXPR = "{ encodejavascriptstring( l.field_data:settings:code ) }">",
									"breakpoint_available":	<MvEVAL EXPR = "{ encodejavascriptboolean( l.field_data:settings:breakpoint_available ) }">

									<MvIF EXPR = "{ l.field_data:settings:breakpoint_available }">
										, "breakpoint":
										{
											"code":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.field_data:settings:breakpoint:code ) }">",
											"name":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.field_data:settings:breakpoint:name ) }">"

											<MvASSIGN NAME = "l.output_breakpoint_separator" VALUE = 1>

											<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'start',	l.field_data:settings:breakpoint:start,	l.output_breakpoint_separator ) }">
											<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'end',	l.field_data:settings:breakpoint:end,	l.output_breakpoint_separator ) }">
										}
									</MvIF>
								<MvELSEIF EXPR = "{ l.field_data:field:type EQ 'button' }">
									<MvIF EXPR = "{ NOT ISNULL l.field_data:settings:visible }">
										,
									</MvIF>

									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Button_LowLevel( l.field_data:settings, l.field_data:field ) }">
								<MvELSEIF EXPR = "{ l.field_data:field:type EQ 'cornerradius' }">
									<MvASSIGN NAME = "l.output_separator" VALUE = "{ NOT ISNULL l.field_data:settings:visible }">

									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_top_left_radius',		l.field_data:settings:border_top_left_radius,		l.output_separator ) }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_top_right_radius',	l.field_data:settings:border_top_right_radius,		l.output_separator ) }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_bottom_right_radius',	l.field_data:settings:border_bottom_right_radius,	l.output_separator ) }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'border_bottom_left_radius',	l.field_data:settings:border_bottom_left_radius,	l.output_separator ) }">
								<MvELSEIF EXPR = "{ l.field_data:field:type EQ 'dropshadow' }">
									<MvASSIGN NAME = "l.output_separator" VALUE = "{ NOT ISNULL l.field_data:settings:visible }">

									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Boolean(			'box_shadow_enabled',	l.field_data:settings:box_shadow_enabled,	l.output_separator ) }">

									<MvIF EXPR = "{ l.field_data:settings:box_shadow_enabled:value }">
										<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_inset',		l.field_data:settings:box_shadow_inset,		l.output_separator ) }">
										<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_x',	l.field_data:settings:box_shadow_offset_x,	l.output_separator ) }">
										<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_offset_y',	l.field_data:settings:box_shadow_offset_y,	l.output_separator ) }">
										<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_blur',		l.field_data:settings:box_shadow_blur,		l.output_separator ) }">
										<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'box_shadow_spread',	l.field_data:settings:box_shadow_spread,	l.output_separator ) }">
										<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(		'box_shadow_color',		l.field_data:settings:box_shadow_color,		l.output_separator ) }">
									</MvIF>
								<MvELSEIF EXPR = "{ l.field_data:field:type EQ 'font' }">
									<MvASSIGN NAME = "l.output_separator" VALUE = "{ NOT ISNULL l.field_data:settings:visible }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Inline_Font( l.field_data:settings, l.output_separator ) }">
								<MvELSEIF EXPR = "{ l.field_data:field:type EQ 'lengthunit' }">
									<MvASSIGN NAME = "l.output_separator" VALUE = "{ NOT ISNULL l.field_data:settings:visible }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Inline_LengthUnit( l.field_data:settings, l.output_separator ) }">
								<MvELSEIF EXPR = "{ l.field_data:field:type EQ 'padding' }">
									<MvASSIGN NAME = "l.output_separator" VALUE = "{ NOT ISNULL l.field_data:settings:visible }">

									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'padding_top',	l.field_data:settings:padding_top,		l.output_separator ) }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'padding_right',	l.field_data:settings:padding_right,	l.output_separator ) }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'padding_bottom',	l.field_data:settings:padding_bottom,	l.output_separator ) }">
									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'padding_left',	l.field_data:settings:padding_left,		l.output_separator ) }">
								<MvELSEIF EXPR = "{ l.field_data:field:type EQ 'typography' }">
									<MvIF EXPR = "{ NOT ISNULL l.field_data:settings:visible }">
										,
									</MvIF>

									<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Typography_LowLevel( l.field_data:settings, l.field_data:field ) }">
								</MvIF>
							</MvIF>
						}
					</MvFOREACH>
				}
			</MvFOREACH>
		}

		<MvIF EXPR = "{ NOT ISNULL l.property_settings:textsettings:styles:classname }">
			, "styles":
			{
				"classname": "<MvEVAL EXPR = "{ encodejavascriptstring( l.property_settings:textsettings:styles:classname ) }">"

				<MvFOREACH ITERATOR = "l.pseudoclass" ARRAY = "l.pseudoclass_members" COUNT = "{ miva_struct_members( l.property_settings:textsettings:styles, l.pseudoclass_members ) }">
					<MvIF EXPR = "{ l.pseudoclass EQ 'classname' }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<MvREFERENCEARRAY NAME = "l.styles" VARIABLE = "l.property_settings:textsettings:styles">
						<MvMEMBER NAME = "{ l.pseudoclass }">
					</MvREFERENCEARRAY>

					, "<MvEVAL EXPR = "{ encodejavascriptstring( l.pseudoclass ) }">": "<MvEVAL EXPR = "{ encodejavascriptstring( l.styles ) }">"
				</MvFOREACH>
			}
		</MvIF>
	}
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_TextArea" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"

	<MvIF EXPR = "{ l.property:markdown }">
		, "source": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:source ) }">"
	</MvIF>

	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Text_LowLevel( l.property_settings, l.property ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Image" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"image":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.property_settings:image ) }">",
	"width":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.property_settings:width ) }">,
	"height":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.property_settings:height ) }">,
	"alt":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.property_settings:alt ) }">",
	"responsive_images":
	{
		<MvFOREACH INDEX = "l.responsive_image_index" ITERATOR = "l.responsive_image" ARRAY = "l.property:responsive_images">
			<MvREFERENCEARRAY NAME = "l.image" VARIABLE = "l.property_settings">
				<MvMEMBER NAME = "responsive_images">
				<MvMEMBER NAME = "{ l.responsive_image:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ l.responsive_image_index GT 1 }">
				,
			</MvIF>

			"<MvEVAL EXPR = "{ encodejavascriptstring( l.responsive_image:code ) }">": "<MvEVAL EXPR = "{ encodejavascriptstring( l.image ) }">"
		</MvFOREACH>
	},
	"responsive_image_data":
	{
		<MvFOREACH INDEX = "l.responsive_image_index" ITERATOR = "l.responsive_image" ARRAY = "l.property:responsive_images">
			<MvREFERENCEARRAY NAME = "l.image_data" VARIABLE = "l.property_settings">
				<MvMEMBER NAME = "responsive_image_data">
				<MvMEMBER NAME = "{ l.responsive_image:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ l.responsive_image_index GT 1 }">
				,
			</MvIF>

			"<MvEVAL EXPR = "{ encodejavascriptstring( l.responsive_image:code ) }">":
			{
				"image":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.image_data:image ) }">",
				"width":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.image_data:width ) }">,
				"height":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.image_data:height ) }">
			}
		</MvFOREACH>
	}
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_LengthUnit" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.output_separator" VALUE = 0>
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Inline_LengthUnit( l.property_settings, l.output_separator ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Padding" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.output_separator" VALUE = 0>

	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'padding_top',	l.property_settings:padding_top,	l.output_separator ) }">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'padding_right',	l.property_settings:padding_right,	l.output_separator ) }">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'padding_bottom',	l.property_settings:padding_bottom,	l.output_separator ) }">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit( 'padding_left',	l.property_settings:padding_left,	l.output_separator ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Product" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"product_code": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product_code ) }">",
	"product":
	{
		"code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product:code ) }">",
		"sku":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product:sku ) }">",
		"name":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product:name ) }">",
		"retail":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.property_settings:product:retail ) }">,
		"formatted_retail":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product:formatted_retail ) }">",
		"price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.property_settings:product:price ) }">,
		"formatted_price":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product:formatted_price ) }">",
		"descrip":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product:descrip ) }">",
		"weight":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.property_settings:product:weight ) }">,
		"formatted_weight":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( [ g.Module_Library_Utilities ].Format_Weight( l.property_settings:product:weight ) ) }">",
		"link":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product:link ) }">"

		<MvIF EXPR = "{ l.property_settings:product:cancat_id }">
			, "canonical_category":
			{
				"code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product:canonical_category:code ) }">",
				"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:product:canonical_category:name ) }">"
			}
		</MvIF>
	}
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_ProductCustomFieldLookup" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Category" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"category_code": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:category_code ) }">",
	"category":
	{
		"code": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:category:code ) }">",
		"name": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:category:name ) }">",
		"link": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:category:link ) }">"
	}
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_CategoryCustomFieldLookup" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_CustomLookup" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Font" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.output_separator" VALUE = 0>
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Inline_Font( l.property_settings,	l.output_separator ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Typography" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Property_Typography_LowLevel( l.property_settings, l.property ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Typography_LowLevel" PARAMETERS = "settings var, property_or_field var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.property_or_field:supports_legacy }">
		"theme_mode": <MvEVAL EXPR = "{ encodejavascriptboolean( l.settings:theme_mode ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.property_or_field:supports_legacy OR l.settings:theme_mode }">
		<MvIF EXPR = "{ l.property_or_field:supports_legacy }">
			,
		</MvIF>

		"theme_available": <MvEVAL EXPR = "{ encodejavascriptboolean( l.settings:theme_available ) }">

		<MvIF EXPR = "{ l.settings:theme_available }">
			, "code":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.settings:code ) }">",
			"classname":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.settings:classname ) }">"

			<MvIF EXPR = "{ l.property_or_field:supports_customization }">
				, "customizations":
				{
					"styles":
					{
						<MvASSIGN NAME = "l.output_separator" VALUE = 0>

						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_font',			l.settings:customizations:styles:overwrite_font,			l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_color',			l.settings:customizations:styles:overwrite_color,			l.output_separator ) }">
						<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(						'overwrite_text_settings',	l.settings:customizations:styles:overwrite_text_settings,	l.output_separator ) }">

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_font }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Font(				'font',						l.settings:customizations:styles:font,						l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'font_size',				l.settings:customizations:styles:font_size,					l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_color }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'color',					l.settings:customizations:styles:color,						l.output_separator ) }">
						</MvIF>

						<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_text_settings }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'line_height',				l.settings:customizations:styles:line_height,				l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(		'letter_spacing',			l.settings:customizations:styles:letter_spacing,			l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'text_transform',			l.settings:customizations:styles:text_transform,			l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'overflow_wrap',			l.settings:customizations:styles:overflow_wrap,				l.output_separator ) }">
							<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Value(			'white_space',				l.settings:customizations:styles:white_space,				l.output_separator ) }">

							<MvIF EXPR = "{ l.settings:type EQ 'paragraph' }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'paragraph_spacing',		l.settings:customizations:styles:paragraph_spacing,			l.output_separator ) }">
							</MvIF>
						</MvIF>
					},
					"breakpoint_styles":
					{
						<MvASSIGN NAME = "l.output_breakpoint_styles_separator"	VALUE = 0>
						<MvASSIGN NAME = "l.null"								VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">

						<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
							<MvREFERENCEARRAY NAME = "l.breakpoint_styles" VARIABLE = "l.settings:customizations:breakpoint_styles">
								<MvMEMBER NAME = "{ l.breakpoint:code }">
							</MvREFERENCEARRAY>

							<MvIF EXPR = "{ ISNULL l.breakpoint_styles }">
								<MvFOREACHCONTINUE>
							<MvELSEIF EXPR = "{ NOT l.breakpoint_styles:overwrite_text_settings }">
								<MvFOREACHCONTINUE>
							</MvIF>

							<MvIF EXPR = "{ l.output_breakpoint_styles_separator }">
								,
							<MvELSE>
								<MvASSIGN NAME = "l.output_breakpoint_styles_separator" VALUE = 1>
							</MvIF>

							"<MvEVAL EXPR = "{ encodejavascriptstring( l.breakpoint:code ) }">":
							{
								<MvASSIGN NAME = "l.output_breakpoint_separator" VALUE = 0>

								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Overwrite(				'overwrite_text_settings',	l.breakpoint_styles:overwrite_text_settings,	l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'font_size',				l.breakpoint_styles:font_size,					l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'line_height',				l.breakpoint_styles:line_height,				l.output_breakpoint_separator ) }">
								<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit(	'letter_spacing',			l.breakpoint_styles:letter_spacing,				l.output_breakpoint_separator ) }">
							}
						</MvFOREACH>
					}
				}
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Fragment" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_ImageType" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Link" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">",
	"type":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:type ) }">",
	"url":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:url ) }">"

	<MvIF EXPR = "{ l.property:supports_new_tab }">
		, "new_tab": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.property_settings:new_tab ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Color" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.property_settings:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Date" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT l.property:serverdate }">
		"value": <MvEVAL EXPR = "{ int( l.property_settings:value ) }">
	<MvELSE>
		"value":
		{
			"year":		<MvEVAL EXPR = "{ int( l.property_settings:value:year ) }">,
			"month":	<MvEVAL EXPR = "{ int( l.property_settings:value:month ) }">,
			"day":		<MvEVAL EXPR = "{ int( l.property_settings:value:day ) }">,
			"hour":		<MvEVAL EXPR = "{ int( l.property_settings:value:hour ) }">,
			"minute":	<MvEVAL EXPR = "{ int( l.property_settings:value:minute ) }">,
			"second":	<MvEVAL EXPR = "{ int( l.property_settings:value:second ) }">
		}
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_DateTime" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT l.property:serverdate }">
		"value": <MvEVAL EXPR = "{ int( l.property_settings:value ) }">
	<MvELSE>
		"value":
		{
			"year":		<MvEVAL EXPR = "{ int( l.property_settings:value:year ) }">,
			"month":	<MvEVAL EXPR = "{ int( l.property_settings:value:month ) }">,
			"day":		<MvEVAL EXPR = "{ int( l.property_settings:value:day ) }">,
			"hour":		<MvEVAL EXPR = "{ int( l.property_settings:value:hour ) }">,
			"minute":	<MvEVAL EXPR = "{ int( l.property_settings:value:minute ) }">,
			"second":	<MvEVAL EXPR = "{ int( l.property_settings:value:second ) }">
		}
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_BreakpointGroup" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.property:include_default }">
		"default":
		{
			<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Properties( l.property_settings:default, l.property:properties ) }">
		}
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvFOREACH INDEX = "l.breakpoint_pos" ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
		<MvREFERENCEARRAY NAME = "l.breakpoint_property_settings" VARIABLE = "l.property_settings">
			<MvMEMBER NAME = "{ l.breakpoint:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.property:include_default OR l.breakpoint_pos GT 1 }">
			,
		</MvIF>

		"<MvEVAL EXPR = "{ encodejavascriptstring( l.breakpoint:code ) }">":
		{
			<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Properties( l.breakpoint_property_settings, l.property:properties ) }">
		}
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_Group" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.property:can_disable }">
		"settings":
		{
			"enabled": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.property_settings:settings:enabled ) }">
		},
	</MvIF>

	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Properties( l.property_settings, l.property:properties ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Callback_Property_List" PARAMETERS = "property_settings var, property var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"children":
	[
		<MvFOREACH INDEX = "l.item_settings_index" ITERATOR = "l.item_settings" ARRAY = "l.property_settings:children">
			<MvIF EXPR = "{ l.item_settings_index GT 1 }">
				,
			</MvIF>

			{
				<MvIF EXPR = "{ l.property:list_type EQ 'text' }">			"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:value ) }">"
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'color' }">		"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:value ) }">"
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'product' }">
					"product_code": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product_code ) }">",
					"product":
					{
						"code":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product:code ) }">",
						"sku":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product:sku ) }">",
						"name":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product:name ) }">",
						"retail":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.item_settings:product:retail ) }">,
						"formatted_retail":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product:formatted_retail ) }">",
						"price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.item_settings:product:price ) }">,
						"formatted_price":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product:formatted_price ) }">",
						"descrip":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product:descrip ) }">",
						"weight":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.item_settings:product:weight ) }">,
						"formatted_weight":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( [ g.Module_Library_Utilities ].Format_Weight( l.item_settings:product:weight ) ) }">",
						"link":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product:link ) }">"

						<MvIF EXPR = "{ l.item_settings:product:cancat_id }">
							, "canonical_category":
							{
								"code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product:canonical_category:code ) }">",
								"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:product:canonical_category:name ) }">"
							}
						</MvIF>
					}
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'productcustomfieldlookup' }"> "value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:value ) }">"
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'categorycustomfieldlookup' }"> "value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:value ) }">"
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'category' }">
					"category_code": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:category_code ) }">",
					"category":
					{
						"code": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:category:code ) }">",
						"name": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:category:name ) }">",
						"link": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:category:link ) }">"
					}
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'date' }">
					<MvIF EXPR = "{ NOT l.property:serverdate }">
						"value": <MvEVAL EXPR = "{ int( l.item_settings:value ) }">
					<MvELSE>
						"value":
						{
							"year":		<MvEVAL EXPR = "{ int( l.item_settings:value:year ) }">,
							"month":	<MvEVAL EXPR = "{ int( l.item_settings:value:month ) }">,
							"day":		<MvEVAL EXPR = "{ int( l.item_settings:value:day ) }">,
							"hour":		<MvEVAL EXPR = "{ int( l.item_settings:value:hour ) }">,
							"minute":	<MvEVAL EXPR = "{ int( l.item_settings:value:minute ) }">,
							"second":	<MvEVAL EXPR = "{ int( l.item_settings:value:second ) }">
						}
					</MvIF>
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'datetime' }">
					<MvIF EXPR = "{ NOT l.property:serverdate }">
						"value": <MvEVAL EXPR = "{ int( l.item_settings:value ) }">
					<MvELSE>
						"value":
						{
							"year":		<MvEVAL EXPR = "{ int( l.item_settings:value:year ) }">,
							"month":	<MvEVAL EXPR = "{ int( l.item_settings:value:month ) }">,
							"day":		<MvEVAL EXPR = "{ int( l.item_settings:value:day ) }">,
							"hour":		<MvEVAL EXPR = "{ int( l.item_settings:value:hour ) }">,
							"minute":	<MvEVAL EXPR = "{ int( l.item_settings:value:minute ) }">,
							"second":	<MvEVAL EXPR = "{ int( l.item_settings:value:second ) }">
						}
					</MvIF>
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'image' }">
					"image":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.item_settings:image ) }">",
					"width":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.item_settings:width ) }">,
					"height":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.item_settings:height ) }">,
					"alt":		"<MvEVAL EXPR = "{ encodejavascriptstring( l.item_settings:alt ) }">",
					"responsive_images":
					{
						<MvFOREACH INDEX = "l.responsive_image_index" ITERATOR = "l.responsive_image" ARRAY = "l.property:responsive_images">
							<MvREFERENCEARRAY NAME = "l.image" VARIABLE = "l.item_settings">
								<MvMEMBER NAME = "responsive_images">
								<MvMEMBER NAME = "{ l.responsive_image:code }">
							</MvREFERENCEARRAY>

							<MvIF EXPR = "{ l.responsive_image_index GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ encodejavascriptstring( l.responsive_image:code ) }">": "<MvEVAL EXPR = "{ encodejavascriptstring( l.image ) }">"
						</MvFOREACH>
					},
					"responsive_image_data":
					{
						<MvFOREACH INDEX = "l.responsive_image_index" ITERATOR = "l.responsive_image" ARRAY = "l.property:responsive_images">
							<MvREFERENCEARRAY NAME = "l.image_data" VARIABLE = "l.item_settings">
								<MvMEMBER NAME = "responsive_image_data">
								<MvMEMBER NAME = "{ l.responsive_image:code }">
							</MvREFERENCEARRAY>

							<MvIF EXPR = "{ l.responsive_image_index GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ encodejavascriptstring( l.responsive_image:code ) }">":
							{
								"image":	"<MvEVAL EXPR = "{ encodejavascriptstring( l.image_data:image ) }">",
								"width":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.image_data:width ) }">,
								"height":	<MvEVAL EXPR = "{ encodejavascriptnumber( l.image_data:height ) }">
							}
						</MvFOREACH>
					}
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'link' }">
					"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:value ) }">",
					"type":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item_settings:type ) }">"

					<MvIF EXPR = "{ l.property:supports_new_tab }">
						, "new_tab": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.item_settings:new_tab ) }">
					</MvIF>
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'group' }">
					<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Callback_Properties( l.item_settings, l.property:properties ) }">
				</MvIF>
			}
		</MvFOREACH>
	]
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Output_Overwrite" PARAMETERS = "field, output var, output_separator var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT l.output_separator }">
		<MvASSIGN NAME = "l.output_separator" VALUE = 1>
	<MvELSE>
		,
	</MvIF>

	"<MvEVAL EXPR = "{ encodeentities( l.field ) }">": <MvEVAL EXPR = "{ encodejavascriptboolean( l.output ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Output_Optional_Font" PARAMETERS = "field, output var, output_separator var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ ISNULL l.output:code AND ISNULL l.output:weight AND ISNULL l.output:style }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT l.output_separator }">
		<MvASSIGN NAME = "l.output_separator" VALUE = 1>
	<MvELSE>
		,
	</MvIF>

	"<MvEVAL EXPR = "{ encodeentities( l.field ) }">":
	{
		<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Font_LowLevel( l.output ) }">
	}
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Output_Optional_Inline_Font" PARAMETERS = "output var, output_separator var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ ISNULL l.output:code AND ISNULL l.output:weight AND ISNULL l.output:style }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT l.output_separator }">
		<MvASSIGN NAME = "l.output_separator" VALUE = 1>
	<MvELSE>
		,
	</MvIF>

	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_Font_LowLevel( l.output ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Output_Optional_Font_LowLevel" PARAMETERS = "output var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.output_separator" VALUE = 0>

	<MvIF EXPR = "{ NOT ISNULL l.output:code }">
		<MvASSIGN NAME = "l.output_separator" VALUE = 1>

		"code": "<MvEVAL EXPR = "{ encodejavascriptstring( l.output:code ) }">"
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.output:weight }">
		<MvIF EXPR = "{ NOT l.output_separator }">
			<MvASSIGN NAME = "l.output_separator" VALUE = 1>
		<MvELSE>
			,
		</MvIF>

		"weight": "<MvEVAL EXPR = "{ encodejavascriptstring( l.output:weight ) }">"
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.output:style }">
		<MvIF EXPR = "{ NOT l.output_separator }">
			<MvASSIGN NAME = "l.output_separator" VALUE = 1>
		<MvELSE>
			,
		</MvIF>

		"style": "<MvEVAL EXPR = "{ encodejavascriptstring( l.output:style ) }">"
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.output:font }">
		<MvIF EXPR = "{ NOT l.output_separator }">
			<MvASSIGN NAME = "l.output_separator" VALUE = 1>
		<MvELSE>
			,
		</MvIF>

		"font":
		{
			<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_JSON ].JSON_Font( l.output:font ) }">
		}
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Output_Optional_Boolean" PARAMETERS = "field, output var, output_separator var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ ISNULL l.output:value }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT l.output_separator }">
		<MvASSIGN NAME = "l.output_separator" VALUE = 1>
	<MvELSE>
		,
	</MvIF>

	"<MvEVAL EXPR = "{ encodeentities( l.field ) }">":
	{
		"value": <MvEVAL EXPR = "{ encodejavascriptboolean( l.output:value ) }">
	}
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Output_Optional_Value" PARAMETERS = "field, output var, output_separator var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ ISNULL l.output:value }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT l.output_separator }">
		<MvASSIGN NAME = "l.output_separator" VALUE = 1>
	<MvELSE>
		,
	</MvIF>

	"<MvEVAL EXPR = "{ encodeentities( l.field ) }">":
	{
		"value": "<MvEVAL EXPR = "{ encodejavascriptstring( l.output:value ) }">"
	}
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Output_Optional_LengthUnit" PARAMETERS = "field, output var, output_separator var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ ISNULL l.output:value }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT l.output_separator }">
		<MvASSIGN NAME = "l.output_separator" VALUE = 1>
	<MvELSE>
		,
	</MvIF>

	"<MvEVAL EXPR = "{ encodeentities( l.field ) }">":
	{
		<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit_LowLevel( l.output ) }">
	}
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Output_Optional_Inline_LengthUnit" PARAMETERS = "output var, output_separator var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ ISNULL l.output:value }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT l.output_separator }">
		<MvASSIGN NAME = "l.output_separator" VALUE = 1>
	<MvELSE>
		,
	</MvIF>

	<MvEVAL EXPR = "{ ComponentModule_Initialize_JSON_Output_Optional_LengthUnit_LowLevel( l.output ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_JSON_Output_Optional_LengthUnit_LowLevel" PARAMETERS = "output var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"unit": "<MvEVAL EXPR = "{ encodejavascriptstring( l.output:unit ) }">",
	"value": "<MvEVAL EXPR = "{ encodejavascriptstring( l.output:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Properties" PARAMETERS = "module var, item, all_settings var, settings var, properties var, path_prefix" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.property" ARRAY = "l.properties">
		<MvIF EXPR = "{ ISNULL l.property:code }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.property_settings" VARIABLE = "l.settings">
			<MvMEMBER NAME = "{ l.property:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT ISNULL l.property:visibility_conditions AND NOT l.property_settings:visible }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.property_path_prefix" VALUE = "{ l.path_prefix $ l.property:code $ ':' }">

		<MvIF EXPR = "{ l.property:type EQ 'merchandisingprompt' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_MerchandisingPrompt( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'breakpoint' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_Breakpoint( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'button' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_Button( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'category' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_Category( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'font' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_Font( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'breakpointgroup' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_BreakpointGroup( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'group' }">
			<MvIF EXPR = "{ NOT l.property:can_disable OR ( l.property:can_disable AND l.property_settings:settings:enabled ) }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_Properties( l.module, l.item, l.all_settings, l.property_settings, l.property:properties, l.property_path_prefix ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'image' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_Image( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'link' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_Link( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'list' }">
			<MvFOREACH INDEX = "l.item_pos" ITERATOR = "l.item_settings" ARRAY = "l.property_settings:children">
				<MvASSIGN NAME = "l.child_path_prefix" VALUE = "{ l.property_path_prefix $ 'children[' $ l.item_pos $ ']' }">

				<MvIF EXPR = "{ l.property:list_type EQ 'category' }">
					<MvIF EXPR = "{ NOT ComponentModule_Initialize_Category( l.module, l.item, l.all_settings, l.settings, l.child_path_prefix, l.item_settings ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'group' }">
					<MvIF EXPR = "{ NOT ComponentModule_Initialize_Properties( l.module, l.item, l.all_settings, l.item_settings, l.property:properties, l.child_path_prefix ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'image' }">
					<MvIF EXPR = "{ NOT ComponentModule_Initialize_Image( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property, l.item_settings ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'link' }">
					<MvIF EXPR = "{ NOT ComponentModule_Initialize_Link( l.module, l.item, l.all_settings, l.settings, l.child_path_prefix, l.item_settings ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				<MvELSEIF EXPR = "{ l.property:list_type EQ 'product' }">
					<MvIF EXPR = "{ NOT ComponentModule_Initialize_Product( l.module, l.item, l.all_settings, l.settings, l.child_path_prefix, l.item_settings ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvFOREACH>
		<MvELSEIF EXPR = "{ l.property:type EQ 'product' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_Product( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'text' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'textarea' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextArea( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.property:type EQ 'typography' }">
			<MvIF EXPR = "{ NOT ComponentModule_Initialize_Typography( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property, l.property_settings ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_MerchandisingPrompt" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_MCH_DB ].MerchandisingPrompt_Load_Code( l.property_settings:code, l.merchandisingprompt ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.property_settings:context" VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Feature_MCH_UT ].MerchandisingPrompt_Tokens_Used( l.merchandisingprompt, l.tokens ) }">

	<MvIF EXPR = "{ l.tokens:product }">	<MvASSIGN NAME = "l.property_settings:context:product_id"	VALUE = "{ l.all_settings:product:id }">	</MvIF>
	<MvIF EXPR = "{ l.tokens:category }">	<MvASSIGN NAME = "l.property_settings:context:category_id"	VALUE = "{ l.all_settings:category:id }">	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Breakpoint" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvASSIGN NAME = "l.property_settings:breakpoint_available"	VALUE = 0>
	<MvELSEIF EXPR = "{ NOT miva_array_search( l.theme:layout:breakpoints, 1, l.breakpoint, 'strcasecmp( l.breakpoint:code, l.property_settings:code ) EQ 0' ) }">
		<MvASSIGN NAME = "l.property_settings:breakpoint_available"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.property_settings:breakpoint_available"	VALUE = 1>
		<MvASSIGN NAME = "l.property_settings:breakpoint"			VALUE = "{ l.breakpoint }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_BreakpointGroup" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Only settings for current / existing breakpoints are made available to the templates
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.tmp_property_settings"	VALUE = "{ l.property_settings }">
	<MvASSIGN NAME = "l.property_settings"		VALUE = "">

	<MvIF EXPR = "{ l.property:include_default }">
		<MvASSIGN NAME = "l.property_settings:default" VALUE = "{ l.tmp_property_settings:default }">

		<MvIF EXPR = "{ NOT ComponentModule_Initialize_Properties( l.module, l.item, l.all_settings, l.property_settings:default, l.property:properties, l.property_path_prefix $ 'default:' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
		<MvREFERENCEARRAY NAME = "l.breakpoint_property_settings" VARIABLE = "l.property_settings">
			<MvMEMBER NAME = "{ l.breakpoint:code }">
		</MvREFERENCEARRAY>

		<MvREFERENCEARRAY NAME = "l.tmp_breakpoint_property_settings" VARIABLE = "l.tmp_property_settings">
			<MvMEMBER NAME = "{ l.breakpoint:code }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.breakpoint_property_settings" VALUE = "{ l.tmp_breakpoint_property_settings }">

		<MvIF EXPR = "{ NOT ComponentModule_Initialize_Properties( l.module, l.item, l.all_settings, l.breakpoint_property_settings, l.property:properties, l.property_path_prefix $ l.breakpoint:code $ ':' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Button" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:supports_legacy AND NOT l.property_settings:theme_mode }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvASSIGN NAME = "l.property_settings:theme_available"	VALUE = 0>
	<MvELSEIF EXPR = "{ NOT miva_array_search( l.theme:buttons, 1, l.button, 'strcasecmp( l.button:code, l.property_settings:code ) EQ 0' ) }">
		<MvASSIGN NAME = "l.property_settings:theme_available"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.property_settings:theme_available"	VALUE = 1>
		<MvASSIGN NAME = "l.size_found"						VALUE = "{ miva_array_search( l.button:sizes, 1, l.size, 'strcasecmp( l.size:code, l.property_settings:size ) EQ 0' ) }">

		<MvIF EXPR = "{ NOT ComponentModule_Initialize_Button_Customizations_Enabled( l.property, l.property_settings, l.theme ) }">
			<MvIF EXPR = "{ l.size_found }">				<MvASSIGN NAME = "l.property_settings:classname" VALUE = "{ l.button:classname $ ' ' $ l.size:classname }">
			<MvELSE>										<MvASSIGN NAME = "l.property_settings:classname" VALUE = "{ l.button:classname }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.custom_classname"			VALUE = "{ 'flex_' $ crypto_md5( l.item $ ':' $ l.property_path_prefix $ 'code' ) }">

			<MvIF EXPR = "{ l.size_found }">				<MvASSIGN NAME = "l.property_settings:classname" VALUE = "{ l.button:classname $ ' ' $ l.size:classname $ ' ' $ l.custom_classname }">
			<MvELSE>										<MvASSIGN NAME = "l.property_settings:classname" VALUE = "{ l.button:classname $ ' ' $ l.custom_classname }">
			</MvIF>

			<MvASSIGN NAME = "l.data"						VALUE = "">
			<MvASSIGN NAME = "l.data:classpath"				VALUE = "{ '.' $ glosub( l.property_settings:classname, ' ', '.' ) }">
			<MvREFERENCE NAME = "l.data:theme"				VARIABLE = "l.theme">
			<MvREFERENCE NAME = "l.data:button"				VARIABLE = "l.button">

			<MvEVAL EXPR = "{ miva_struct_member_callback( l.property_settings, 'ComponentModule_Initialize_Button_Stylesheet_Callback', l.data ) }">

			<MvCOMMENT>
			|
			| Load font reference
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.property_settings:customizations:styles:overwrite_font AND NOT ISNULL l.property_settings:customizations:styles:font:code }">
				<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Font_Load_Code_Cached( l.property_settings:customizations:styles:font:code, l.font ) }">
					<MvREFERENCE NAME = "l.property_settings:customizations:styles:font:font" VARIABLE = "l.font">
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Button_Customizations_Enabled" PARAMETERS = "property_or_field var, settings var, theme var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.property_or_field:supports_customization }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_corner_radius		OR
					l.settings:customizations:styles:overwrite_fill_color			OR
					l.settings:customizations:styles:overwrite_border				OR
					l.settings:customizations:styles:overwrite_drop_shadow			OR
					l.settings:customizations:styles:overwrite_padding				OR
					l.settings:customizations:styles:overwrite_font					OR
					l.settings:customizations:styles:overwrite_text_color			OR
					l.settings:customizations:styles:overwrite_text_settings		OR
					l.settings:customizations:hover_styles:overwrite_fill_color		OR
					l.settings:customizations:hover_styles:overwrite_border			OR
					l.settings:customizations:hover_styles:overwrite_drop_shadow	OR
					l.settings:customizations:hover_styles:overwrite_text_color		OR
					l.settings:customizations:hover_styles:overwrite_text_settings	OR
					l.settings:customizations:disabled_styles:overwrite_fill_color	OR
					l.settings:customizations:disabled_styles:overwrite_border		OR
					l.settings:customizations:disabled_styles:overwrite_drop_shadow	OR
					l.settings:customizations:disabled_styles:overwrite_text_color	OR
					l.settings:customizations:disabled_styles:overwrite_text_settings }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
		<MvREFERENCEARRAY NAME = "l.breakpoint_styles" VARIABLE = "l.settings:customizations:breakpoint_styles">
			<MvMEMBER NAME = "{ l.breakpoint:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.breakpoint_styles:overwrite_size_settings }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Button_Stylesheet_Callback" PARAMETERS = "settings var, member, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.member NE 'stylesheet' }">
		<MvFUNCTIONRETURN VALUE = "">
	</MvIF>

	<MvCAPTURE VARIABLE = "l.settings:stylesheet">
		<MvCOMMENT>
		|
		| Default State Overrides
		|
		</MvCOMMENT>

		<MvCOMMENT>
		|
		| Due to CSS style cascading, we need to generate the customization CSS in such a way that
		| overriding the default state doesn't necessarily override the other states
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_corner_radius	OR
						l.settings:customizations:styles:overwrite_border			OR
						l.settings:customizations:styles:overwrite_padding			OR
						l.settings:customizations:styles:overwrite_font				OR
						l.settings:customizations:styles:overwrite_text_settings }">
			<MvEVAL EXPR = "{ l.data:classpath $ asciichar( 10 ) }">
			<MvEVAL EXPR = "{ '{' $ asciichar( 10 ) }">
				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_corner_radius }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-top-left-radius: '		$ ternary( NOT ISNULL l.settings:customizations:styles:border_top_left_radius:value,		l.settings:customizations:styles:border_top_left_radius:value $ l.settings:customizations:styles:border_top_left_radius:unit,			'0' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-top-right-radius: '		$ ternary( NOT ISNULL l.settings:customizations:styles:border_top_right_radius:value,		l.settings:customizations:styles:border_top_right_radius:value $ l.settings:customizations:styles:border_top_right_radius:unit,			'0' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-bottom-right-radius: '	$ ternary( NOT ISNULL l.settings:customizations:styles:border_bottom_right_radius:value,	l.settings:customizations:styles:border_bottom_right_radius:value $ l.settings:customizations:styles:border_bottom_right_radius:unit,	'0' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-bottom-left-radius: '	$ ternary( NOT ISNULL l.settings:customizations:styles:border_bottom_left_radius:value,		l.settings:customizations:styles:border_bottom_left_radius:value $ l.settings:customizations:styles:border_bottom_left_radius:unit,		'0' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_border }">
					<MvIF EXPR = "{ NOT l.settings:customizations:styles:border_enabled:value }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border: none;' $ asciichar( 10 ) }">
					<MvELSE>
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-top-width: '		$ ternary( NOT ISNULL l.settings:customizations:styles:border_top_width:value,		l.settings:customizations:styles:border_top_width:value $ l.settings:customizations:styles:border_top_width:unit,		'0' )		$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-right-width: '	$ ternary( NOT ISNULL l.settings:customizations:styles:border_right_width:value,	l.settings:customizations:styles:border_right_width:value $ l.settings:customizations:styles:border_right_width:unit,	'0' )		$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-bottom-width: '	$ ternary( NOT ISNULL l.settings:customizations:styles:border_bottom_width:value,	l.settings:customizations:styles:border_bottom_width:value $ l.settings:customizations:styles:border_bottom_width:unit,	'0' )		$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-left-width: '	$ ternary( NOT ISNULL l.settings:customizations:styles:border_left_width:value,		l.settings:customizations:styles:border_left_width:value $ l.settings:customizations:styles:border_left_width:unit,		'0' )		$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-style: '			$ ternary( NOT ISNULL l.settings:customizations:styles:border_style:value,			l.settings:customizations:styles:border_style:value,																	'solid' )	$ ';' $ asciichar( 10 ) }">
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_padding }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'padding-top: '		$ ternary( NOT ISNULL l.settings:customizations:styles:padding_top:value,		l.settings:customizations:styles:padding_top:value $ l.settings:customizations:styles:padding_top:unit,			'0' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'padding-right: '	$ ternary( NOT ISNULL l.settings:customizations:styles:padding_right:value,		l.settings:customizations:styles:padding_right:value $ l.settings:customizations:styles:padding_right:unit,		'0' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'padding-bottom: '	$ ternary( NOT ISNULL l.settings:customizations:styles:padding_bottom:value,	l.settings:customizations:styles:padding_bottom:value $ l.settings:customizations:styles:padding_bottom:unit,	'0' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'padding-left: '		$ ternary( NOT ISNULL l.settings:customizations:styles:padding_left:value,		l.settings:customizations:styles:padding_left:value $ l.settings:customizations:styles:padding_left:unit,		'0' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_font }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-size: '		$ ternary( NOT ISNULL l.settings:customizations:styles:font_size:value,	l.settings:customizations:styles:font_size:value $ l.settings:customizations:styles:font_size:unit,	'inherit' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-weight: '		$ ternary( NOT ISNULL l.settings:customizations:styles:font:weight,		l.settings:customizations:styles:font:weight,														'inherit' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-style: '		$ ternary( NOT ISNULL l.settings:customizations:styles:font:style,		l.settings:customizations:styles:font:style,														'inherit' ) $ ';' $ asciichar( 10 ) }">

					<MvIF EXPR = "{ ISNULL l.settings:customizations:styles:font:code }">																<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-family: inherit;' $ asciichar( 10 ) }">
					<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Font_Load_Code_Cached( l.settings:customizations:styles:font:code, l.font ) }">	<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-family: inherit;' $ asciichar( 10 ) }">
					<MvELSE>																															<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-family: ' $ l.font:family $ ';' $ asciichar( 10 ) }">
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_text_settings }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'line-height: '		$ ternary( NOT ISNULL l.settings:customizations:styles:line_height:value,		l.settings:customizations:styles:line_height:value $ l.settings:customizations:styles:line_height:unit,			'0' )		$ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'letter-spacing: '	$ ternary( NOT ISNULL l.settings:customizations:styles:letter_spacing:value,	l.settings:customizations:styles:letter_spacing:value $ l.settings:customizations:styles:letter_spacing:unit,	'0' )		$ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-transform: '	$ ternary( NOT ISNULL l.settings:customizations:styles:text_transform:value,	l.settings:customizations:styles:text_transform:value,															'inherit' )	$ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'overflow-wrap: '	$ ternary( NOT ISNULL l.settings:customizations:styles:overflow_wrap:value,		l.settings:customizations:styles:overflow_wrap:value,															'inherit' )	$ ';' $ asciichar( 10 ) }">
				</MvIF>
			<MvEVAL EXPR = "{ '}' $ asciichar( 10 ) }">
		</MvIF>

		<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_fill_color		OR
						l.settings:customizations:styles:overwrite_border			OR
						l.settings:customizations:styles:overwrite_drop_shadow		OR
						l.settings:customizations:styles:overwrite_text_color		OR
						l.settings:customizations:styles:overwrite_text_settings }">
			<MvEVAL EXPR = "{ l.data:classpath $ ':not(:hover,:disabled,[disabled])' $ asciichar( 10 ) }">
			<MvEVAL EXPR = "{ '{' $ asciichar( 10 ) }">
				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_fill_color }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'background-color: ' $ ternary( NOT ISNULL l.settings:customizations:styles:background_color:value, l.settings:customizations:styles:background_color:value, 'transparent' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_border AND l.settings:customizations:styles:border_enabled:value }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-color: ' $ ternary( NOT ISNULL l.settings:customizations:styles:border_color:value, l.settings:customizations:styles:border_color:value, 'transparent' )	$ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_drop_shadow }">
					<MvIF EXPR = "{ NOT l.settings:customizations:styles:box_shadow_enabled:value }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'box-shadow: none;' $ asciichar( 10 ) }">
					<MvELSE>
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'box-shadow:' }">

						<MvIF EXPR = "{ NOT ISNULL l.settings:customizations:styles:box_shadow_inset:value }">
							<MvEVAL EXPR = "{ ' ' $ l.settings:customizations:styles:box_shadow_inset:value }">
						</MvIF>

						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:styles:box_shadow_offset_x:value,	l.settings:customizations:styles:box_shadow_offset_x:value $ l.settings:customizations:styles:box_shadow_offset_x:unit,	'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:styles:box_shadow_offset_y:value,	l.settings:customizations:styles:box_shadow_offset_y:value $ l.settings:customizations:styles:box_shadow_offset_y:unit,	'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:styles:box_shadow_blur:value,		l.settings:customizations:styles:box_shadow_blur:value $ l.settings:customizations:styles:box_shadow_blur:unit,			'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:styles:box_shadow_spread:value,	l.settings:customizations:styles:box_shadow_spread:value $ l.settings:customizations:styles:box_shadow_spread:unit,		'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:styles:box_shadow_color:value,	l.settings:customizations:styles:box_shadow_color:value,																'transparent' ) }">

						<MvEVAL EXPR = "{ ';' $ asciichar( 10 ) }">
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_text_color }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'color: ' $ ternary( NOT ISNULL l.settings:customizations:styles:color:value, l.settings:customizations:styles:color:value, 'inherit' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_text_settings }">
					<MvIF EXPR = "{ NOT l.settings:customizations:styles:text_underline_enabled:value }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-decoration-line: none;' $ asciichar( 10 ) }">
					<MvELSE>
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-decoration-line: underline;'																																																										$ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-decoration-thickness: '	$ ternary( NOT ISNULL l.settings:customizations:styles:text_underline_thickness:value,	l.settings:customizations:styles:text_underline_thickness:value $ l.settings:customizations:styles:text_underline_thickness:unit,	'0' ) $ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-underline-offset: '		$ ternary( NOT ISNULL l.settings:customizations:styles:text_underline_offset:value,		l.settings:customizations:styles:text_underline_offset:value $ l.settings:customizations:styles:text_underline_offset:unit,			'0' ) $ ';' $ asciichar( 10 ) }">
					</MvIF>
				</MvIF>
			<MvEVAL EXPR = "{ '}' $ asciichar( 10 ) }">
		</MvIF>

		<MvCOMMENT>
		|
		| Hover State Overrides
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_fill_color		OR
						l.settings:customizations:hover_styles:overwrite_border			OR
						l.settings:customizations:hover_styles:overwrite_drop_shadow	OR
						l.settings:customizations:hover_styles:overwrite_text_color		OR
						l.settings:customizations:hover_styles:overwrite_text_settings }">
			<MvEVAL EXPR = "{ l.data:classpath $ ':hover' $ asciichar( 10 ) }">
			<MvEVAL EXPR = "{ '{' $ asciichar( 10 ) }">
				<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_fill_color }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'background-color: ' $ ternary( NOT ISNULL l.settings:customizations:hover_styles:background_color:value, l.settings:customizations:hover_styles:background_color:value, 'transparent' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_border AND l.settings:customizations:styles:border_enabled:value }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-color: ' $ ternary( NOT ISNULL l.settings:customizations:hover_styles:border_color:value, l.settings:customizations:hover_styles:border_color:value, 'transparent' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_drop_shadow }">
					<MvIF EXPR = "{ NOT l.settings:customizations:hover_styles:box_shadow_enabled:value }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'box-shadow: none;' $ asciichar( 10 ) }">
					<MvELSE>
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'box-shadow:' }">

						<MvIF EXPR = "{ NOT ISNULL l.settings:customizations:hover_styles:box_shadow_inset:value }">
							<MvEVAL EXPR = "{ ' ' $ l.settings:customizations:hover_styles:box_shadow_inset:value }">
						</MvIF>

						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:hover_styles:box_shadow_offset_x:value,	l.settings:customizations:hover_styles:box_shadow_offset_x:value $ l.settings:customizations:hover_styles:box_shadow_offset_x:unit,	'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:hover_styles:box_shadow_offset_y:value,	l.settings:customizations:hover_styles:box_shadow_offset_y:value $ l.settings:customizations:hover_styles:box_shadow_offset_y:unit,	'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:hover_styles:box_shadow_blur:value,		l.settings:customizations:hover_styles:box_shadow_blur:value $ l.settings:customizations:hover_styles:box_shadow_blur:unit,			'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:hover_styles:box_shadow_spread:value,		l.settings:customizations:hover_styles:box_shadow_spread:value $ l.settings:customizations:hover_styles:box_shadow_spread:unit,		'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:hover_styles:box_shadow_color:value,		l.settings:customizations:hover_styles:box_shadow_color:value,																		'transparent' ) }">

						<MvEVAL EXPR = "{ ';' $ asciichar( 10 ) }">
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_text_color }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'color: ' $ ternary( NOT ISNULL l.settings:customizations:hover_styles:color:value, l.settings:customizations:hover_styles:color:value, 'inherit' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:hover_styles:overwrite_text_settings }">
					<MvIF EXPR = "{ NOT l.settings:customizations:hover_styles:text_underline_enabled:value }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-decoration-line: none;' $ asciichar( 10 ) }">
					<MvELSE>
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-decoration-line: underline;'																																																															$ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-decoration-thickness: '	$ ternary( NOT ISNULL l.settings:customizations:hover_styles:text_underline_thickness:value,	l.settings:customizations:hover_styles:text_underline_thickness:value $ l.settings:customizations:hover_styles:text_underline_thickness:unit,	'0' ) $ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-underline-offset: '		$ ternary( NOT ISNULL l.settings:customizations:hover_styles:text_underline_offset:value,		l.settings:customizations:hover_styles:text_underline_offset:value $ l.settings:customizations:hover_styles:text_underline_offset:unit,			'0' ) $ ';' $ asciichar( 10 ) }">
					</MvIF>
				</MvIF>
			<MvEVAL EXPR = "{ '}' $ asciichar( 10 ) }">
		</MvIF>

		<MvCOMMENT>
		|
		| Disabled State Overrides
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_fill_color	OR
						l.settings:customizations:disabled_styles:overwrite_border		OR
						l.settings:customizations:disabled_styles:overwrite_drop_shadow	OR
						l.settings:customizations:disabled_styles:overwrite_text_color	OR
						l.settings:customizations:disabled_styles:overwrite_text_settings }">
			<MvEVAL EXPR = "{ l.data:classpath $ ':disabled,' $ asciichar( 10 ) }">
			<MvEVAL EXPR = "{ l.data:classpath $ '[disabled]' $ asciichar( 10 ) }">
			<MvEVAL EXPR = "{ '{' $ asciichar( 10 ) }">
				<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_fill_color }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'background-color: ' $ ternary( NOT ISNULL l.settings:customizations:disabled_styles:background_color:value, l.settings:customizations:disabled_styles:background_color:value, 'transparent' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_border AND l.settings:customizations:styles:border_enabled:value }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'border-color: ' $ ternary( NOT ISNULL l.settings:customizations:disabled_styles:border_color:value, l.settings:customizations:disabled_styles:border_color:value, 'transparent' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_drop_shadow }">
					<MvIF EXPR = "{ NOT l.settings:customizations:disabled_styles:box_shadow_enabled:value }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'box-shadow: none;' $ asciichar( 10 ) }">
					<MvELSE>
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'box-shadow:' }">

						<MvIF EXPR = "{ NOT ISNULL l.settings:customizations:disabled_styles:box_shadow_inset:value }">
							<MvEVAL EXPR = "{ ' ' $ l.settings:customizations:disabled_styles:box_shadow_inset:value }">
						</MvIF>

						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:disabled_styles:box_shadow_offset_x:value,	l.settings:customizations:disabled_styles:box_shadow_offset_x:value $ l.settings:customizations:disabled_styles:box_shadow_offset_x:unit,	'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:disabled_styles:box_shadow_offset_y:value,	l.settings:customizations:disabled_styles:box_shadow_offset_y:value $ l.settings:customizations:disabled_styles:box_shadow_offset_y:unit,	'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:disabled_styles:box_shadow_blur:value,		l.settings:customizations:disabled_styles:box_shadow_blur:value $ l.settings:customizations:disabled_styles:box_shadow_blur:unit,			'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:disabled_styles:box_shadow_spread:value,		l.settings:customizations:disabled_styles:box_shadow_spread:value $ l.settings:customizations:disabled_styles:box_shadow_spread:unit,		'0' ) }">
						<MvEVAL EXPR = "{ ' ' $ ternary( NOT ISNULL l.settings:customizations:disabled_styles:box_shadow_color:value,		l.settings:customizations:disabled_styles:box_shadow_color:value,																			'transparent' ) }">

						<MvEVAL EXPR = "{ ';' $ asciichar( 10 ) }">
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_text_color }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'color: ' $ ternary( NOT ISNULL l.settings:customizations:disabled_styles:color:value, l.settings:customizations:disabled_styles:color:value, 'inherit' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:disabled_styles:overwrite_text_settings }">
					<MvIF EXPR = "{ NOT l.settings:customizations:disabled_styles:text_underline_enabled:value }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-decoration-line: none;' $ asciichar( 10 ) }">
					<MvELSE>
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-decoration-line: underline;'																																																																$ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-decoration-thickness: '	$ ternary( NOT ISNULL l.settings:customizations:disabled_styles:text_underline_thickness:value,	l.settings:customizations:disabled_styles:text_underline_thickness:value $ l.settings:customizations:disabled_styles:text_underline_thickness:unit,	'0' ) $ ';'	$ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-underline-offset: '		$ ternary( NOT ISNULL l.settings:customizations:disabled_styles:text_underline_offset:value,	l.settings:customizations:disabled_styles:text_underline_offset:value $ l.settings:customizations:disabled_styles:text_underline_offset:unit,		'0' ) $ ';'	$ asciichar( 10 ) }">
					</MvIF>
				</MvIF>
			<MvEVAL EXPR = "{ '}' $ asciichar( 10 ) }">
		</MvIF>

		<MvCOMMENT>
		|
		| Breakpoint Overrides
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.data:theme:layout:breakpoints" COUNT = "{ l.data:theme:layout:breakpoint_count }">
			<MvREFERENCEARRAY NAME = "l.breakpoint_styles" VARIABLE = "l.settings:customizations:breakpoint_styles">
				<MvMEMBER NAME = "{ l.breakpoint:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ l.breakpoint_styles:overwrite_size_settings }">
				<MvIF EXPR = "{ ( l.breakpoint:start:value GT 0 ) AND ( l.breakpoint:end:value GT 0 ) }">
					<MvEVAL EXPR = "{ '@media screen and (min-width: ' $ l.breakpoint:start:value $ l.breakpoint:start:unit $ ') and (max-width: ' $ l.breakpoint:end:value $ l.breakpoint:end:unit $ ')' $ asciichar( 10 ) }">
				<MvELSEIF EXPR = "{ l.breakpoint:start:value GT 0 }">
					<MvEVAL EXPR = "{ '@media screen and (min-width: ' $ l.breakpoint:start:value $ l.breakpoint:start:unit $ ')' $ asciichar( 10 ) }">
				<MvELSEIF EXPR = "{ l.breakpoint:end:value GT 0 }">
					<MvEVAL EXPR = "{ '@media screen and (max-width: ' $ l.breakpoint:end:value $ l.breakpoint:end:unit $ ')' $ asciichar( 10 ) }">
				<MvELSE>
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvEVAL EXPR = "{ '{' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ l.data:classpath $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ '{' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'font-size: '		$ ternary( NOT ISNULL l.breakpoint_styles:font_size:value,		l.breakpoint_styles:font_size:value $ l.breakpoint_styles:font_size:unit,				'inherit' )	$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'line-height: '		$ ternary( NOT ISNULL l.breakpoint_styles:line_height:value,	l.breakpoint_styles:line_height:value $ l.breakpoint_styles:line_height:unit,			'inherit' )	$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'letter-spacing: '	$ ternary( NOT ISNULL l.breakpoint_styles:letter_spacing:value,	l.breakpoint_styles:letter_spacing:value $ l.breakpoint_styles:letter_spacing:unit,		'inherit' )	$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'padding-top: '		$ ternary( NOT ISNULL l.breakpoint_styles:padding_top:value,	l.breakpoint_styles:padding_top:value $ l.breakpoint_styles:padding_top:unit,			'0' )		$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'padding-right: '	$ ternary( NOT ISNULL l.breakpoint_styles:padding_right:value,	l.breakpoint_styles:padding_right:value $ l.breakpoint_styles:padding_right:unit,		'0' )		$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'padding-bottom: '	$ ternary( NOT ISNULL l.breakpoint_styles:padding_bottom:value,	l.breakpoint_styles:padding_bottom:value $ l.breakpoint_styles:padding_bottom:unit,		'0' )		$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'padding-left: '	$ ternary( NOT ISNULL l.breakpoint_styles:padding_left:value,	l.breakpoint_styles:padding_left:value $ l.breakpoint_styles:padding_left:unit,			'0' )		$ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ '}' $ asciichar( 10 ) }">
				<MvEVAL EXPR = "{ '}' $ asciichar( 10 ) }">
			</MvIF>
		</MvFOREACH>
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ l.settings:stylesheet }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextArea" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:markdown AND l.property_settings:source EQ 'markdown' }">
		<MvIF EXPR = "{ [ g.Module_Feature_PGB_UT ].PageBuilder_CMark_Supported() }">	<MvASSIGN NAME = "l.property_settings:value" VALUE = "{ cmark_markdown_to_html( l.property_settings:value, 'safe,hardbreaks' ) }">
		<MvELSE>																		<MvASSIGN NAME = "l.property_settings:value" VALUE = "">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ ComponentModule_Initialize_TextSettings( l.module, l.item, l.all_settings, l.settings, l.property_path_prefix, l.property, l.property_settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.property:textsettings:fields">
		<MvFOREACH ITERATOR = "l.pseudoclass" ARRAY = "l.field:pseudoclasses">
			<MvREFERENCEARRAY NAME = "l.field_settings" VARIABLE = "l.property_settings:textsettings:fields">
				<MvMEMBER NAME = "{ l.pseudoclass }">
				<MvMEMBER NAME = "{ l.field:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ( NOT ISNULL l.field:visibility_conditions ) AND ( NOT ISNULL l.field_settings:visible ) AND ( NOT l.field_settings:visible ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.field_path_prefix" VALUE = "{ l.property_path_prefix $ 'textsettings:fields:' $ l.pseudoclass $ ':' $ l.field:code $ ':' }">

			<MvREFERENCEARRAY NAME = "l.styles" VARIABLE = "l.property_settings:textsettings:styles">
				<MvMEMBER NAME = "{ l.pseudoclass }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ l.field:type EQ 'borderthickness' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_BorderThickness( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'breakpoint' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_Breakpoint( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'button' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_Button( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'color' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_Color( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'cornerradius' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_CornerRadius( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'dropshadow' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_DropShadow( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'font' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_Font( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'lengthunit' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_LengthUnit( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'padding' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_Padding( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'select' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_Select( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'selector' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_Selector( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'text' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_Text( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.field:type EQ 'typography' }">
				<MvIF EXPR = "{ NOT ComponentModule_Initialize_TextSettings_Typography( l.module, l.item, l.all_settings, l.settings, l.field_path_prefix, l.field, l.field_settings, l.styles ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT ISNULL l.property_settings:textsettings:styles }">
		<MvASSIGN NAME = "l.property_settings:textsettings:styles:classname" VALUE = "{ 'flex_' $ MakeSessionID() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_BorderThickness" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| "l.field:style" is treated as boolean and the value is ignored. If present, we will always
	| output styles border-top-width, border-right-width, border-bottom-width, and border-left-width.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ISNULL l.field:style }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:border_top_width:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'border-top-width', '', l.field_settings:border_top_width:value $ l.field_settings:border_top_width:unit, '' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:border_right_width:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'border-right-width', '', l.field_settings:border_right_width:value $ l.field_settings:border_right_width:unit, '' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:border_bottom_width:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'border-bottom-width', '', l.field_settings:border_bottom_width:value $ l.field_settings:border_bottom_width:unit, '' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:border_left_width:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'border-left-width', '', l.field_settings:border_left_width:value $ l.field_settings:border_left_width:unit, '' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_Breakpoint" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Note that this text settings type does not support styles
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvASSIGN NAME = "l.field_settings:breakpoint_available"	VALUE = 0>
	<MvELSEIF EXPR = "{ NOT miva_array_search( l.theme:layout:breakpoints, 1, l.breakpoint, 'strcasecmp( l.breakpoint:code, l.field_settings:code ) EQ 0' ) }">
		<MvASSIGN NAME = "l.field_settings:breakpoint_available"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.field_settings:breakpoint_available"	VALUE = 1>
		<MvASSIGN NAME = "l.field_settings:breakpoint"				VALUE = "{ l.breakpoint }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_Button" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Note that this text settings type does not support styles
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.field:supports_legacy AND NOT l.field_settings:theme_mode }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvASSIGN NAME = "l.field_settings:theme_available"	VALUE = 0>
	<MvELSEIF EXPR = "{ NOT miva_array_search( l.theme:buttons, 1, l.button, 'strcasecmp( l.button:code, l.field_settings:code ) EQ 0' ) }">
		<MvASSIGN NAME = "l.field_settings:theme_available"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.field_settings:theme_available"	VALUE = 1>
		<MvASSIGN NAME = "l.size_found"						VALUE = "{ miva_array_search( l.button:sizes, 1, l.size, 'strcasecmp( l.size:code, l.field_settings:size ) EQ 0' ) }">

		<MvIF EXPR = "{ NOT ComponentModule_Initialize_Button_Customizations_Enabled( l.field, l.field_settings, l.theme ) }">
			<MvIF EXPR = "{ l.size_found }">				<MvASSIGN NAME = "l.field_settings:classname" VALUE = "{ l.button:classname $ ' ' $ l.size:classname }">
			<MvELSE>										<MvASSIGN NAME = "l.field_settings:classname" VALUE = "{ l.button:classname }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.custom_classname"			VALUE = "{ 'flex_' $ crypto_md5( l.item $ ':' $ l.field_path_prefix $ 'code' ) }">

			<MvIF EXPR = "{ l.size_found }">				<MvASSIGN NAME = "l.field_settings:classname" VALUE = "{ l.button:classname $ ' ' $ l.size:classname $ ' ' $ l.custom_classname }">
			<MvELSE>										<MvASSIGN NAME = "l.field_settings:classname" VALUE = "{ l.button:classname $ ' ' $ l.custom_classname }">
			</MvIF>

			<MvASSIGN NAME = "l.data"						VALUE = "">
			<MvASSIGN NAME = "l.data:classpath"				VALUE = "{ '.' $ glosub( l.field_settings:classname, ' ', '.' ) }">
			<MvREFERENCE NAME = "l.data:theme"				VARIABLE = "l.theme">
			<MvREFERENCE NAME = "l.data:button"				VARIABLE = "l.button">

			<MvEVAL EXPR = "{ miva_struct_member_callback( l.field_settings, 'ComponentModule_Initialize_Button_Stylesheet_Callback', l.data ) }">

			<MvCOMMENT>
			|
			| Load font reference
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.field_settings:customizations:styles:overwrite_font AND NOT ISNULL l.field_settings:customizations:styles:font:code }">
				<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Font_Load_Code_Cached( l.field_settings:customizations:styles:font:code, l.font ) }">
					<MvREFERENCE NAME = "l.field_settings:customizations:styles:font:font" VARIABLE = "l.font">
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_Text" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field:style }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( l.field:style, l.field:style_prefix, l.field_settings:value, l.field:style_suffix ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_Select" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field:style }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( l.field:style, l.field:style_prefix, l.field_settings:value, l.field:style_suffix ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_Selector" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field:style }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( l.field:style, l.field:style_prefix, l.field_settings:value, l.field:style_suffix ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_Color" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field:style }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( l.field:style, l.field:style_prefix, l.field_settings:value, l.field:style_suffix ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_CornerRadius" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| "l.field:style" is treated as boolean and the value is ignored. If present, we will always
	| output styles border-top-left-radius, border-top-right-radius, border-bottom-right-radius,
	| and border-bottom-left-radius.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ISNULL l.field:style }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:border_top_left_radius:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'border-top-left-radius', '', l.field_settings:border_top_left_radius:value $ l.field_settings:border_top_left_radius:unit, '' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:border_top_right_radius:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'border-top-right-radius', '', l.field_settings:border_top_right_radius:value $ l.field_settings:border_top_right_radius:unit, '' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:border_bottom_right_radius:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'border-bottom-right-radius', '', l.field_settings:border_bottom_right_radius:value $ l.field_settings:border_bottom_right_radius:unit, '' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:border_bottom_left_radius:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'border-bottom-left-radius', '', l.field_settings:border_bottom_left_radius:value $ l.field_settings:border_bottom_left_radius:unit, '' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_DropShadow" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| "l.field:style" is treated as boolean and the value is ignored. If present, we will always
	| output box-shadow.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ISNULL l.field:style }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.field_settings:box_shadow_enabled:value }">
		<MvCAPTURE VARIABLE = "l.box_shadow">
			<MvIF EXPR = "{ l.field_settings:box_shadow_inset:value EQ 'inset' }">
				<MvEVAL EXPR = "inset ">
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.field_settings:box_shadow_offset_x:value }">	<MvEVAL EXPR = "{ l.field_settings:box_shadow_offset_x:value $ l.field_settings:box_shadow_offset_x:unit }">
			<MvELSE>																	<MvEVAL EXPR = "0">
			</MvIF>

			<MvEVAL EXPR = " ">

			<MvIF EXPR = "{ NOT ISNULL l.field_settings:box_shadow_offset_y:value }">	<MvEVAL EXPR = "{ l.field_settings:box_shadow_offset_y:value $ l.field_settings:box_shadow_offset_y:unit }">
			<MvELSE>																	<MvEVAL EXPR = "0">
			</MvIF>

			<MvEVAL EXPR = " ">

			<MvIF EXPR = "{ NOT ISNULL l.field_settings:box_shadow_blur:value }">		<MvEVAL EXPR = "{ l.field_settings:box_shadow_blur:value $ l.field_settings:box_shadow_blur:unit }">
			<MvELSE>																	<MvEVAL EXPR = "0">
			</MvIF>

			<MvEVAL EXPR = " ">

			<MvIF EXPR = "{ NOT ISNULL l.field_settings:box_shadow_spread:value }">		<MvEVAL EXPR = "{ l.field_settings:box_shadow_spread:value $ l.field_settings:box_shadow_spread:unit }">
			<MvELSE>																	<MvEVAL EXPR = "0">
			</MvIF>

			<MvEVAL EXPR = " ">
			<MvEVAL EXPR = "{ l.field_settings:box_shadow_color:value }">
		</MvCAPTURE>

		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'box-shadow', '', l.box_shadow, '' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_Font" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| "l.field:style" is treated as boolean and the value is ignored. If present, we will always
	| output styles font-family, font-weight, and font-style, since this is a "font" property
	| and is specific to these three styles.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:code }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Font_Load_Code_Cached( l.field_settings:code, l.font ) }">
			<MvREFERENCE NAME = "l.field_settings:font" VARIABLE = "l.font">

			<MvIF EXPR = "{ NOT ISNULL l.field:style }">
				<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'font-family', '', l.font:family, '' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field:style }">
		<MvIF EXPR = "{ NOT ISNULL l.field_settings:weight }">
			<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'font-weight', '', l.field_settings:weight, '' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.field_settings:style }">
			<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'font-style', '', l.field_settings:style, '' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_LengthUnit" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.field:style }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( l.field:style, l.field:style_prefix, l.field_settings:value $ l.field_settings:unit, l.field:style_suffix ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_Padding" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| "l.field:style" is treated as boolean and the value is ignored. If present, we will always
	| output styles padding-top, padding-right, padding-bottom, and padding-left.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ISNULL l.field:style }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:padding_top:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'padding-top', '', l.field_settings:padding_top:value $ l.field_settings:padding_top:unit, '' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:padding_right:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'padding-right', '', l.field_settings:padding_right:value $ l.field_settings:padding_right:unit, '' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:padding_bottom:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'padding-bottom', '', l.field_settings:padding_bottom:value $ l.field_settings:padding_bottom:unit, '' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.field_settings:padding_left:value }">
		<MvASSIGN NAME = "l.styles" VALUE = "{ l.styles $ SanitizeCSSStyle( 'padding-left', '', l.field_settings:padding_left:value $ l.field_settings:padding_left:unit, '' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_TextSettings_Typography" PARAMETERS = "module var, item, all_settings var, settings var, field_path_prefix, field var, field_settings var, styles var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Note that this text settings type does not support styles
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.field:supports_legacy AND NOT l.field_settings:theme_mode }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvASSIGN NAME = "l.field_settings:theme_available"			VALUE = 0>
	<MvELSEIF EXPR = "{ NOT miva_array_search( l.theme:typographies, 1, l.typography, 'strcasecmp( l.typography:code, l.field_settings:code ) EQ 0' ) }">
		<MvASSIGN NAME = "l.field_settings:theme_available"			VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.field_settings:theme_available"			VALUE = 1>
		<MvASSIGN NAME = "l.field_settings:type"					VALUE = "{ l.typography:type }">

		<MvIF EXPR = "{ NOT ComponentModule_Initialize_Typography_Customizations_Enabled( l.field, l.field_settings, l.theme ) }">
			<MvASSIGN NAME = "l.field_settings:classname"			VALUE = "{ l.typography:classname }">
		<MvELSE>
			<MvASSIGN NAME = "l.custom_classname"					VALUE = "{ 'flex_' $ crypto_md5( l.item $ ':' $ l.field_path_prefix $ 'code' ) }">
			<MvASSIGN NAME = "l.field_settings:classname"			VALUE = "{ l.typography:classname $ ' ' $ l.custom_classname }">

			<MvASSIGN NAME = "l.data"								VALUE = "">
			<MvASSIGN NAME = "l.data:classpath"						VALUE = "{ '.' $ l.typography:classname $ '.' $ l.custom_classname }">
			<MvREFERENCE NAME = "l.data:theme"						VARIABLE = "l.theme">
			<MvREFERENCE NAME = "l.data:typography"					VARIABLE = "l.typography">

			<MvEVAL EXPR = "{ miva_struct_member_callback( l.field_settings, 'ComponentModule_Initialize_Typography_Stylesheet_Callback', l.data ) }">

			<MvCOMMENT>
			|
			| Load font reference
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.field_settings:customizations:styles:overwrite_font AND NOT ISNULL l.field_settings:customizations:styles:font:code }">
				<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Font_Load_Code_Cached( l.field_settings:customizations:styles:font:code, l.font ) }">
					<MvREFERENCE NAME = "l.field_settings:customizations:styles:font:font" VARIABLE = "l.font">
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Product" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Library_DB ].Runtime_Product_Load_Code( l.property_settings:product_code, l.property_settings:product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_UT ].CommonComponentFields_Initialize_Product_Runtime( l.property_settings:product ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.property_settings:product:link" VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Product_URL( l.property_settings:product, l.null ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Category" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Library_DB ].Runtime_Category_Load_Code( l.property_settings:category_code, l.property_settings:category ) }">
		<MvASSIGN NAME = "l.property_settings:category:link" VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Category_URL( l.property_settings:category, l.null ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Font" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_settings:code }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Font_Load_Code_Cached( l.property_settings:code, l.font ) }">
			<MvREFERENCE NAME = "l.property_settings:font" VARIABLE = "l.font">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Typography" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:supports_legacy AND NOT l.property_settings:theme_mode }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvASSIGN NAME = "l.property_settings:theme_available"		VALUE = 0>
	<MvELSEIF EXPR = "{ NOT miva_array_search( l.theme:typographies, 1, l.typography, 'strcasecmp( l.typography:code, l.property_settings:code ) EQ 0' ) }">
		<MvASSIGN NAME = "l.property_settings:theme_available"		VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.property_settings:theme_available"		VALUE = 1>
		<MvASSIGN NAME = "l.property_settings:type"					VALUE = "{ l.typography:type }">

		<MvIF EXPR = "{ NOT ComponentModule_Initialize_Typography_Customizations_Enabled( l.property, l.property_settings, l.theme ) }">
			<MvASSIGN NAME = "l.property_settings:classname"		VALUE = "{ l.typography:classname }">
		<MvELSE>
			<MvASSIGN NAME = "l.custom_classname"					VALUE = "{ 'flex_' $ crypto_md5( l.item $ ':' $ l.property_path_prefix $ 'code' ) }">
			<MvASSIGN NAME = "l.property_settings:classname"		VALUE = "{ l.typography:classname $ ' ' $ l.custom_classname }">

			<MvASSIGN NAME = "l.data"								VALUE = "">
			<MvASSIGN NAME = "l.data:classpath"						VALUE = "{ '.' $ l.typography:classname $ '.' $ l.custom_classname }">
			<MvREFERENCE NAME = "l.data:theme"						VARIABLE = "l.theme">
			<MvREFERENCE NAME = "l.data:typography"					VARIABLE = "l.typography">

			<MvEVAL EXPR = "{ miva_struct_member_callback( l.property_settings, 'ComponentModule_Initialize_Typography_Stylesheet_Callback', l.data ) }">

			<MvCOMMENT>
			|
			| Load font reference
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.property_settings:customizations:styles:overwrite_font AND NOT ISNULL l.property_settings:customizations:styles:font:code }">
				<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Font_Load_Code_Cached( l.property_settings:customizations:styles:font:code, l.font ) }">
					<MvREFERENCE NAME = "l.property_settings:customizations:styles:font:font" VARIABLE = "l.font">
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Typography_Customizations_Enabled" PARAMETERS = "property_or_field var, settings var, theme var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.property_or_field:supports_customization }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_font		OR
					l.settings:customizations:styles:overwrite_color	OR
					l.settings:customizations:styles:overwrite_text_settings }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
		<MvREFERENCEARRAY NAME = "l.breakpoint_styles" VARIABLE = "l.settings:customizations:breakpoint_styles">
			<MvMEMBER NAME = "{ l.breakpoint:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.breakpoint_styles:overwrite_text_settings }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Typography_Stylesheet_Callback" PARAMETERS = "settings var, member, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.member NE 'stylesheet' }">
		<MvFUNCTIONRETURN VALUE = "">
	</MvIF>

	<MvCAPTURE VARIABLE = "l.settings:stylesheet">
		<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_font		OR
						l.settings:customizations:styles:overwrite_color	OR
						l.settings:customizations:styles:overwrite_text_settings }">
			<MvEVAL EXPR = "{ l.data:classpath $ asciichar( 10 ) }">
			<MvEVAL EXPR = "{ '{' $ asciichar( 10 ) }">
				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_font }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-size: '	$ ternary( NOT ISNULL l.settings:customizations:styles:font_size:value,	l.settings:customizations:styles:font_size:value $ l.settings:customizations:styles:font_size:unit,	'inherit' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-weight: '	$ ternary( NOT ISNULL l.settings:customizations:styles:font:weight,		l.settings:customizations:styles:font:weight,														'inherit' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-style: '	$ ternary( NOT ISNULL l.settings:customizations:styles:font:style,		l.settings:customizations:styles:font:style,														'inherit' ) $ ';' $ asciichar( 10 ) }">

					<MvIF EXPR = "{ ISNULL l.settings:customizations:styles:font:code }">																<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-family: inherit;' $ asciichar( 10 ) }">
					<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Font_Load_Code_Cached( l.settings:customizations:styles:font:code, l.font ) }">	<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-family: inherit;' $ asciichar( 10 ) }">
					<MvELSE>																															<MvEVAL EXPR = "{ asciichar( 9 ) $ 'font-family: ' $ l.font:family $ ';' $ asciichar( 10 ) }">
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_color }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'color: ' $ ternary( NOT ISNULL l.settings:customizations:styles:color:value, l.settings:customizations:styles:color:value, 'inherit' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>

				<MvIF EXPR = "{ l.settings:customizations:styles:overwrite_text_settings }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'line-height: '		$ ternary( NOT ISNULL l.settings:customizations:styles:line_height:value,		l.settings:customizations:styles:line_height:value $ l.settings:customizations:styles:line_height:unit,			'inherit' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'letter-spacing: '	$ ternary( NOT ISNULL l.settings:customizations:styles:letter_spacing:value,	l.settings:customizations:styles:letter_spacing:value $ l.settings:customizations:styles:letter_spacing:unit,	'inherit' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'text-transform: '	$ ternary( NOT ISNULL l.settings:customizations:styles:text_transform:value,	l.settings:customizations:styles:text_transform:value,															'inherit' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'overflow-wrap: '	$ ternary( NOT ISNULL l.settings:customizations:styles:overflow_wrap:value,		l.settings:customizations:styles:overflow_wrap:value,															'inherit' ) $ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'white-space: '		$ ternary( NOT ISNULL l.settings:customizations:styles:white_space:value,		l.settings:customizations:styles:white_space:value,																'inherit' ) $ ';' $ asciichar( 10 ) }">
				</MvIF>
			<MvEVAL EXPR = "{ '}' $ asciichar( 10 ) }">

			<MvIF EXPR = "{ l.data:typography:type EQ 'paragraph' AND l.settings:customizations:styles:overwrite_text_settings }">
				<MvEVAL EXPR = "{ l.data:classpath $ ' + ' $ l.data:classpath$ asciichar( 10 ) }">
				<MvEVAL EXPR = "{ '{' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ 'margin-top: ' $ ternary( NOT ISNULL l.settings:customizations:styles:paragraph_spacing:value, l.settings:customizations:styles:paragraph_spacing:value $ l.settings:customizations:styles:paragraph_spacing:unit, '0' ) $ ';' $ asciichar( 10 ) }">
				<MvEVAL EXPR = "{ '}' $ asciichar( 10 ) }">
			</MvIF>
		</MvIF>

		<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.data:theme:layout:breakpoints" COUNT = "{ l.data:theme:layout:breakpoint_count }">
			<MvREFERENCEARRAY NAME = "l.breakpoint_styles" VARIABLE = "l.settings:customizations:breakpoint_styles">
				<MvMEMBER NAME = "{ l.breakpoint:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ l.breakpoint_styles:overwrite_text_settings }">
				<MvIF EXPR = "{ ( l.breakpoint:start:value GT 0 ) AND ( l.breakpoint:end:value GT 0 ) }">
					<MvEVAL EXPR = "{ '@media screen and (min-width: ' $ l.breakpoint:start:value $ l.breakpoint:start:unit $ ') and (max-width: ' $ l.breakpoint:end:value $ l.breakpoint:end:unit $ ')' $ asciichar( 10 ) }">
				<MvELSEIF EXPR = "{ l.breakpoint:start:value GT 0 }">
					<MvEVAL EXPR = "{ '@media screen and (min-width: ' $ l.breakpoint:start:value $ l.breakpoint:start:unit $ ')' $ asciichar( 10 ) }">
				<MvELSEIF EXPR = "{ l.breakpoint:end:value GT 0 }">
					<MvEVAL EXPR = "{ '@media screen and (max-width: ' $ l.breakpoint:end:value $ l.breakpoint:end:unit $ ')' $ asciichar( 10 ) }">
				<MvELSE>
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvEVAL EXPR = "{ '{' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ l.data:classpath $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ '{' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'font-size: '		$ ternary( NOT ISNULL l.breakpoint_styles:font_size:value,		l.breakpoint_styles:font_size:value $ l.breakpoint_styles:font_size:unit,			'inherit' )	$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'line-height: '		$ ternary( NOT ISNULL l.breakpoint_styles:line_height:value,	l.breakpoint_styles:line_height:value $ l.breakpoint_styles:line_height:unit,		'inherit' )	$ ';' $ asciichar( 10 ) }">
						<MvEVAL EXPR = "{ asciichar( 9 ) $ asciichar( 9 ) $ 'letter-spacing: '	$ ternary( NOT ISNULL l.breakpoint_styles:letter_spacing:value,	l.breakpoint_styles:letter_spacing:value $ l.breakpoint_styles:letter_spacing:unit,	'inherit' )	$ ';' $ asciichar( 10 ) }">
					<MvEVAL EXPR = "{ asciichar( 9 ) $ '}' $ asciichar( 10 ) }">
				<MvEVAL EXPR = "{ '}' $ asciichar( 10 ) }">
			</MvIF>
		</MvFOREACH>
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ l.settings:stylesheet }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Image" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property var, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.property_settings:image }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.fullsize_image_loaded" VALUE = 0>

	<MvFOREACH ITERATOR = "l.responsive_image" ARRAY = "l.property:responsive_images">
		<MvREFERENCEARRAY NAME = "l.image" VARIABLE = "l.property_settings">
			<MvMEMBER NAME = "responsive_images">
			<MvMEMBER NAME = "{ l.responsive_image:code }">
		</MvREFERENCEARRAY>

		<MvREFERENCEARRAY NAME = "l.image_data" VARIABLE = "l.property_settings">
			<MvMEMBER NAME = "responsive_image_data">
			<MvMEMBER NAME = "{ l.responsive_image:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT ISNULL l.image }">
			<MvASSIGN NAME = "l.image_data:image" VALUE = "{ l.image }">

			<MvEVAL EXPR = "{ ComponentModule_Initialize_Image_Image_Dimensions( l.image_data:image, l.image_data:width, l.image_data:height ) }">

			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.responsive_image:width ) OR
							NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.responsive_image:height ) }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ ( '://' IN l.property_settings:image NE 0 )	OR
							( '/' IN l.property_settings:image EQ 1 ) }">
			<MvCOMMENT>
			|
			| Database loads are skipped if the image path is not a relative URL. The check above catches
			| the following: http:// https://, file://, // (protocol relative), and / (absolute paths)
			|
			</MvCOMMENT>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.fullsize_image_loaded EQ 0 }">
			<MvIF EXPR = "{ [ g.Module_Library_DB ].Image_Load_File( l.property_settings:image, l.fullsize_image ) }">
				<MvASSIGN NAME = "l.fullsize_image_loaded"			VALUE = 1>

				<MvASSIGN NAME = "l.property_settings:width"		VALUE = "{ l.fullsize_image:width }">
				<MvASSIGN NAME = "l.property_settings:height"		VALUE = "{ l.fullsize_image:height }">
			<MvELSEIF EXPR = "{ [ g.Module_Library_DB ].GeneratedImage_Load_File( l.property_settings:image, l.generated_image ) }">
				<MvIF EXPR = "{ [ g.Module_Library_DB ].Image_Load_ID( l.generated_image:image_id, l.fullsize_image ) }">
					<MvASSIGN NAME = "l.fullsize_image_loaded"		VALUE = 1>

					<MvASSIGN NAME = "l.property_settings:width"	VALUE = "{ l.generated_image:width }">
					<MvASSIGN NAME = "l.property_settings:height"	VALUE = "{ l.generated_image:height }">
				<MvELSE>
					<MvASSIGN NAME = "l.fullsize_image_loaded"		VALUE = -1>
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.fullsize_image_loaded"			VALUE = -1>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.fullsize_image_loaded EQ 1 }">
			<MvIF EXPR = "{ [ g.Module_Library_DB ].GeneratedImage_FindOrInsert_Image_Dimensions( l.fullsize_image, l.responsive_image:width, l.responsive_image:height, l.generatedimage ) }">
				<MvASSIGN NAME = "l.image" 				VALUE = "{ l.generatedimage:image }">
				<MvASSIGN NAME = "l.image_data:image" 	VALUE = "{ l.generatedimage:image }">
				<MvASSIGN NAME = "l.image_data:width"	VALUE = "{ l.generatedimage:width }">
				<MvASSIGN NAME = "l.image_data:height"	VALUE = "{ l.generatedimage:height }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.fullsize_image_loaded NE 1 }">
		<MvCOMMENT>
		|
		| Calculate image dimensions if we have not loaded from the images tables, or if those loads failed to find anything
		|
		</MvCOMMENT>

		<MvEVAL EXPR = "{ ComponentModule_Initialize_Image_Image_Dimensions( l.property_settings:image, l.property_settings:width, l.property_settings:height ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Image_Image_Dimensions" PARAMETERS = "image var, width var, height var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ '://' IN l.image NE 0 }">		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ '//' IN l.image EQ 1 }">	<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ '/' IN l.image EQ 1 }">	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].Image_Dimensions( l.image, 'script', l.width, l.height ) }">
	<MvELSE>								<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].Image_Dimensions( g.imageroot $ l.image, 'script', l.width, l.height ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize_Link" PARAMETERS = "module var, item, all_settings var, settings var, property_path_prefix, property_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.property_settings:value }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.property_settings:type EQ 'product' }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Runtime_Product_Load_Code_Cached( l.property_settings:value, l.product ) }">
			<MvASSIGN NAME = "l.property_settings:url"	VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Product_URL( l.product, l.null ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.property_settings:type EQ 'category' }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].Runtime_Category_Load_Code_Cached( l.property_settings:value, l.category ) }">
			<MvASSIGN NAME = "l.property_settings:url"	VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Category_URL( l.category, l.null ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.property_settings:type EQ 'page' }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code_Cached( l.property_settings:value, l.page ) }">
			<MvASSIGN NAME = "l.property_settings:url"	VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Page_URL( l.page, l.null ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.property_settings:type EQ 'screen' }">
		<MvASSIGN NAME = "l.property_settings:url"		VALUE = "{ [ g.Module_Feature_URI_UT ].Store_Screen_URL( l.property_settings:value, l.null ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.property_settings:url"		VALUE = "{ l.property_settings:value }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Assign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Unassign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Copy" PARAMETERS = "module var, item, source_branch var, source_page var, source_settings var, dest_branch var, dest_page var, dest_settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.dest_settings" VALUE = "{ l.source_settings }">

	<MvIF EXPR = "{ l.source_branch:id EQ l.dest_branch:id }">	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00006', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
	<MvELSE>													<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00352', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' from branch \'' $ l.source_branch:name $ '\' to branch \'' $ l.dest_branch:name $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Prerender" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Head" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Start" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.settings">
		<MvMEMBER NAME = "{ l.param }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ ISNULL l.flex_item }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Runtime_ManagedProperty_Load_Code( 'flex', l.flex_item:component_code, l.managedproperty ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:settings:type ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvCOMMENT>
	|
	| This function explicitly enables "compresswhitespace" to workaround MS-1133.  Once MS-1133 is fixed and
	| Miva Merchant has been updated to require the engine that MS-1133 was released in, "compresswhitespace"
	| can safely be removed.
	|
	</MvCOMMENT>

	<MIVA STANDARDOUTPUTLEVEL = "compresswhitespace">

	<MvIF EXPR = "{ NOT l.managedproperty:settings:initialization_template_disabled	AND
					NOT ISNULL l.managedproperty:settings:initialization_template_filename }">
		<MvREFERENCEARRAY NAME = "l.initialization_template_rendered" VARIABLE = "g.Session:cache:flex">
			<MvMEMBER NAME = "{ l.flex_item:component_code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT l.initialization_template_rendered }">
			<MvASSIGN NAME = "l.initialization_template_rendered" VALUE = 1>
			<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Render_Template( l.managedproperty:settings:initialization_template_filename, l.all_settings ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.managedproperty:settings:instance_template_disabled }">
		<MvREFERENCE NAME = "l.all_settings:instance"		VARIABLE = "l.flex_item:settings">
		<MvREFERENCE NAME = "l.all_settings:instance_item"	VARIABLE = "l.flex_item">

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:settings:instance_template_filename }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Render_Template( l.managedproperty:settings:instance_template_filename, l.all_settings ) }">
		<MvELSEIF EXPR = "{ l.managedproperty:templ_id }">
			<MvCOMMENT>
			|
			| Legacy Instance Template
			|
			</MvCOMMENT>

			<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Render_Template( l.managedproperty:template_filename, l.all_settings ) }">
		</MvIF>
	</MvIF>

	<MIVA STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_End" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvCOMMENT>
|
| Component Fragment Feature (component_frag)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Initialize_Fragment" PARAMETERS = "module var, item, page_all_settings var, page_item_settings var, fragment_all_settings var, fragment_item_settings var, merged_all_settings var, merged_item_settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.merged_item_settings" VALUE = "{ l.fragment_item_settings }">

	<MvFUNCTIONRETURN VALUE = "{ ComponentModule_Initialize( l.module, l.item, l.merged_all_settings, l.merged_item_settings ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Component Provision Feature (component_prov)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Provision" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag EQ 'flexitem_add' }">				<MvEVAL EXPR = "{ ComponentModule_Provision_FlexItem_Add( l.module, l.child_xml, l.settings ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'flexitem_update' }">		<MvEVAL EXPR = "{ ComponentModule_Provision_FlexItem_Update( l.module, l.child_xml, l.settings ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'flexitem_delete' }">		<MvEVAL EXPR = "{ ComponentModule_Provision_FlexItem_Delete( l.module, l.child_xml, l.settings ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'flexitem_delete_all' }">	<MvEVAL EXPR = "{ ComponentModule_Provision_FlexItem_Delete_All( l.module, l.child_xml, l.settings ) }">
		<MvELSE>
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Unknown tag \'' $ l.tag $ '\'' ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision_FlexItem_Add" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_settings" VALUE = "{ l.settings }">

	<MvASSIGN NAME = "l.flex_item" VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'R', l.provide_xml, 'Item_Code',		l.flex_item:item_code ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'R', l.provide_xml, 'Component_Code',	l.flex_item:component_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ miva_member_exists( l.working_settings, l.flex_item:item_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Item \'' $ l.flex_item:item_code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.flex_item:component_code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Component not found' ) }">
	<MvELSEIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Items may only use Flex Components' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
		<MvASSIGN NAME = "l.flex_item:settings" VALUE = "{ l.managedproperty:version:settings:defaults }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Settings', l.json_settings ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT miva_json_decode( l.json_settings, l.flex_item:settings ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, miva_json_decode_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.flex_item:settings:_flex:flex_version"		VALUE = "{ l.module:version }">
	<MvASSIGN NAME = "l.flex_item:settings:_flex:settings_version"	VALUE = "{ ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) }">

	<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible( l.managedproperty:version:settings, l.flex_item:settings, 1 ) }">

	<MvASSIGNARRAY NAME = "l.working_settings" VALUE = "{ l.flex_item }">
		<MvMEMBER NAME = "{ l.flex_item:item_code }">
	</MvASSIGNARRAY>

	<MvASSIGN NAME = "l.settings" VALUE = "{ l.working_settings }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision_FlexItem_Update" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_settings" VALUE = "{ l.settings }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'item_code', l.item_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT miva_member_exists( l.working_settings, l.item_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Item not found' ) }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.working_settings">
		<MvMEMBER NAME = "{ l.item_code }">
	</MvREFERENCEARRAY>

	<MvASSIGN NAME = "l.original_flex_item" VALUE = "{ l.flex_item }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'O', l.provide_xml, 'Item_Code',		l.flex_item:item_code ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'O', l.provide_xml, 'Component_Code',	l.flex_item:component_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.original_flex_item:item_code, l.flex_item:item_code ) NE 0 }">
		<MvIF EXPR = "{ miva_member_exists( l.working_settings, l.flex_item:item_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Item \'' $ l.flex_item:item_code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.flex_item:component_code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Component not found' ) }">
	<MvELSEIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Items may only use Flex Components' ) }">
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.original_flex_item:component_code, l.flex_item:component_code ) NE 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Missing required tag Settings' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Settings' ) }">
		<MvEVAL EXPR = "{ FlexItemSettings_Sanitize( l.module, l.managedproperty:version:settings, l.flex_item:settings ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Settings', l.json_settings ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT miva_json_decode( l.json_settings, l.flex_item:settings ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, miva_json_decode_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.flex_item:settings:_flex:flex_version"		VALUE = "{ l.module:version }">
		<MvASSIGN NAME = "l.flex_item:settings:_flex:settings_version"	VALUE = "{ ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) }">

		<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible( l.managedproperty:version:settings, l.flex_item:settings, 1 ) }">
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.original_flex_item:item_code, l.flex_item:item_code ) NE 0 }">
		<MvASSIGNARRAY NAME = "l.working_settings" VALUE = "{ l.flex_item }">
			<MvMEMBER NAME = "{ l.flex_item:item_code }">
		</MvASSIGNARRAY>

		<MvASSIGNARRAY NAME = "l.working_settings" VALUE = "">
			<MvMEMBER NAME = "{ l.original_flex_item:item_code }">
		</MvASSIGNARRAY>
	</MvIF>

	<MvASSIGN NAME = "l.settings" VALUE = "{ l.working_settings }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision_FlexItem_Delete" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.working_settings" VALUE = "{ l.settings }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'item_code', l.item_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT miva_member_exists( l.working_settings, l.item_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Item not found' ) }">
	</MvIF>

	<MvASSIGNARRAY NAME = "l.working_settings" VALUE = "">
		<MvMEMBER NAME = "{ l.item_code }">
	</MvASSIGNARRAY>

	<MvASSIGN NAME = "l.settings" VALUE = "{ l.working_settings }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision_FlexItem_Delete_All" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings" VALUE = "">
</MvFUNCTION>

<MvCOMMENT>
|
| Framework Support Feature (skins)
|
</MvCOMMENT>

<MvFUNCTION NAME = "SkinsComponentModule_Description" PARAMETERS = "module var, item var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "Exports Flex Components">
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item" PARAMETERS = "module var, item, output var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<MvASSIGN NAME = "l.managedproperty_count" VALUE = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersionList_Load_Type_Current( 'flex', l.managedproperties ) }">

		<Module code="{ encodeentities( l.module:code ) }" feature="component">
			<FlexComponent_Delete_All_Unmanaged />

			<MvFOREACH ITERATOR = "l.managedproperty" ARRAY = "l.managedproperties" COUNT = "{ l.managedproperty_count }">
				<MvIF EXPR = "{ l.managedproperty:version:settings:managed }">	<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_Managed( l.managedproperty ) }">
				<MvELSE>														<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_Unmanaged( l.managedproperty ) }">
				</MvIF>
			</MvFOREACH>
		</Module>

		<MvFOREACH ITERATOR = "l.managedproperty" ARRAY = "l.managedproperties" COUNT = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersionList_Load_Type_Current( 'flex', l.managedproperties ) }">
			<MvIF EXPR = "{ NOT l.managedproperty:version:settings:managed }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvFOREACH ITERATOR = "l.script" ARRAY = "l.managedproperty:version:settings:scripts">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.script:resource_code, l.scriptresource ) OR
								l.scriptresource:type NE 'Z' }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvFOREACH ITERATOR = "l.scriptcombinedresourcexresource" ARRAY = "l.scriptcombinedresourcexresources" COUNT = "{ [ g.Module_Feature_TUI_DB ].JavaScriptCombinedResourceXResourceList_Load_Resource( l.scriptresource:id, l.scriptcombinedresourcexresources ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_ID( l.scriptcombinedresourcexresource:comb_id, l.combinedresource ) OR
									l.combinedresource:type NE 'C' }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<JavaScriptCombinedResourceXResource_Assign combined_code="{ encodeentities( l.combinedresource:code ) }" resource_code="{ encodeentities( l.scriptresource:code ) }" />
				</MvFOREACH>

				<MvFOREACH ITERATOR = "l.scriptresourcexgroup" ARRAY = "l.scriptresourcexgroups" COUNT = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroupList_Load_Resource( l.scriptresource:id, l.scriptresourcexgroups ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_ID( l.scriptresourcexgroup:group_id, l.resourcegroup ) }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<JavaScriptResourceXGroup_Assign code="{ encodeentities( l.scriptresource:code ) }" group_code="{ encodeentities( l.resourcegroup:code ) }" />
				</MvFOREACH>

				<MvFOREACH ITERATOR = "l.scriptresourcexpage" ARRAY = "l.scriptresourcexpages" COUNT = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResourceXPageList_Load_Resource( l.scriptresource:id, l.scriptresourcexpages ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_ID( l.scriptresourcexpage:page_id, l.page ) }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<JavaScriptResourceXPage_Assign code="{ encodeentities( l.scriptresource:code ) }" page_code="{ encodeentities( l.page:code ) }" />
				</MvFOREACH>
			</MvFOREACH>
			
			<MvFOREACH ITERATOR = "l.style" ARRAY = "l.managedproperty:version:settings:styles">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.style:resource_code, l.cssresource ) OR
								l.cssresource:type NE 'Z' }">
					<MvFOREACHCONTINUE>
				</MvIF>

				<MvFOREACH ITERATOR = "l.csscombinedresourcexresource" ARRAY = "l.csscombinedresourcexresources" COUNT = "{ [ g.Module_Feature_TUI_DB ].CSSCombinedResourceXResourceList_Load_Resource( l.cssresource:id, l.csscombinedresourcexresources ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_ID( l.csscombinedresourcexresource:comb_id, l.combinedresource ) OR
									l.combinedresource:type NE 'C' }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<CSSCombinedResourceXResource_Assign combined_code="{ encodeentities( l.combinedresource:code ) }" resource_code="{ encodeentities( l.cssresource:code ) }" />
				</MvFOREACH>

				<MvFOREACH ITERATOR = "l.cssresourcexgroup" ARRAY = "l.cssresourcexgroups" COUNT = "{ [ g.Module_Feature_TUI_DB ].CSSResourceXGroupList_Load_Resource( l.cssresource:id, l.cssresourcexgroups ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_ID( l.cssresourcexgroup:group_id, l.resourcegroup ) }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<CSSResourceXGroup_Assign code="{ encodeentities( l.cssresource:code ) }" group_code="{ encodeentities( l.resourcegroup:code ) }" />
				</MvFOREACH>

				<MvFOREACH ITERATOR = "l.cssresourcexpage" ARRAY = "l.cssresourcexpages" COUNT = "{ [ g.Module_Feature_TUI_DB ].CSSResourceXPageList_Load_Resource( l.cssresource:id, l.cssresourcexpages ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_ID( l.cssresourcexpage:page_id, l.page ) }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<CSSResourceXPage_Assign code="{ encodeentities( l.cssresource:code ) }" page_code="{ encodeentities( l.page:code ) }" />
				</MvFOREACH>
			</MvFOREACH>
		</MvFOREACH>

		<MvASSIGN NAME = "l.images"			VALUE = "">
		<MvASSIGN NAME = "l.image_count"	VALUE = 0>
		<MvASSIGN NAME = "l.image_lookup"	VALUE = "">

		<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ [ g.Module_Feature_TUI_DB ].PageList_Load_Item_Runtime( l.item:id, l.pages ) }">
			<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.page:settings">
				<MvMEMBER NAME = "{ l.item:code }">
			</MvREFERENCEARRAY>

			<Page_Update code="{ encodeentities( l.page:code ) }">
				<Item code="{ encodeentities( l.item:code ) }">
					<FlexItem_Delete_All />

					<MvFOREACH ITERATOR = "l.item_code" ARRAY = "l.item_codes" COUNT = "{ miva_struct_members( l.settings, l.item_codes ) }">
						<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.settings">
							<MvMEMBER NAME = "{ l.item_code }">
						</MvREFERENCEARRAY>

						<MvIF EXPR = "{ miva_array_search( l.managedproperties, 1, l.managedproperty, 'strcasecmp( l.managedproperty:code, l.flex_item:component_code ) EQ 0' ) }">
							<MvEVAL EXPR = "{ FlexItemSettings_Sanitize( l.module, l.managedproperty:version:settings, l.flex_item:settings ) }">

							<FlexItem_Add>
								<Item_Code><MvEVAL EXPR = "{ miva_cdata_encode( l.flex_item:item_code ) }"></Item_Code>
								<Component_Code><MvEVAL EXPR = "{ miva_cdata_encode( l.flex_item:component_code ) }"></Component_Code>
								<Settings><MvEVAL EXPR = "{ miva_cdata_encode( miva_json_encode( l.flex_item:settings, 'pretty' ) ) }"></Settings>
							</FlexItem_Add>

							<MvCOMMENT>
							|
							| Find images referenced in this flex item and add to global list
							|
							</MvCOMMENT>

							<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_Images( l.managedproperty, l.flex_item, l.image_lookup, l.images, l.image_count ) }">
						</MvIF>
					</MvFOREACH>
				</Item>
			</Page_Update>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Output unique list of images found in flex components across all pages. This tag is not used anywhere
		| except by the framework export process, which scrapes the contents and includes each referenced image
		| file into the packaged framework.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.image_count }">
			<FlexFrameworkImages><![CDATA[
				<MvFOREACH ITERATOR = "l.image" ARRAY = "l.images" COUNT = "{ l.image_count }">
					<img src="{ encodeentities( l.image ) }" />
				</MvFOREACH>
			]]></FlexFrameworkImages>
		</MvIF>
	</MvCAPTURE>
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_FlexItem_Images" PARAMETERS = "managedproperty var, flex_item var, image_lookup var, images var, image_count var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages( l.managedproperty:version:settings:properties, l.flex_item:settings, l.image_lookup, l.images, l.image_count ) }">

	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:advanced_properties }">
		<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages( l.managedproperty:version:settings:advanced_properties, l.flex_item:settings:advanced, l.image_lookup, l.images, l.image_count ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_FlexItem_FindImages" PARAMETERS = "properties var, settings var, image_lookup var, images var, image_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.property" ARRAY = "l.properties">
		<MvIF EXPR = "{ ISNULL l.property:code }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.property_settings" VARIABLE = "l.settings">
			<MvMEMBER NAME = "{ l.property:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT ISNULL l.property:visibility_conditions AND NOT l.property_settings:visible }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.property:type EQ 'image' }">					<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages_Property_Image( l.property, l.property_settings, l.image_lookup, l.images, l.image_count ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'breakpointgroup' }">	<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages_Property_BreakpointGroup( l.property, l.property_settings, l.image_lookup, l.images, l.image_count ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'group' }">				<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages_Property_Group( l.property, l.property_settings, l.image_lookup, l.images, l.image_count ) }">
		<MvELSEIF EXPR = "{ l.property:type EQ 'list' }">				<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages_Property_List( l.property, l.property_settings, l.image_lookup, l.images, l.image_count ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_FlexItem_FindImages_Property_Image" PARAMETERS = "property var, property_settings var, image_lookup var, images var, image_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.property_settings:image }">
		<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages_AppendImage( l.property_settings:image, l.image_lookup, l.images, l.image_count ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.responsive_image" ARRAY = "l.property:responsive_images">
		<MvREFERENCEARRAY NAME = "l.image" VARIABLE = "l.property_settings">
			<MvMEMBER NAME = "responsive_images">
			<MvMEMBER NAME = "{ l.responsive_image:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT ISNULL l.image }">
			<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages_AppendImage( l.image, l.image_lookup, l.images, l.image_count ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_FlexItem_FindImages_Property_BreakpointGroup" PARAMETERS = "property var, property_settings var, image_lookup var, images var, image_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:include_default }">
		<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages( l.property:properties, l.property_settings:default, l.image_lookup, l.images, l.image_count ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Load_Theme( l.theme ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvFOREACH ITERATOR = "l.breakpoint" ARRAY = "l.theme:layout:breakpoints" COUNT = "{ l.theme:layout:breakpoint_count }">
		<MvREFERENCEARRAY NAME = "l.breakpoint_property_settings" VARIABLE = "l.property_settings">
			<MvMEMBER NAME = "{ l.breakpoint:code }">
		</MvREFERENCEARRAY>

		<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages( l.property:properties, l.breakpoint_property_settings, l.image_lookup, l.images, l.image_count ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_FlexItem_FindImages_Property_Group" PARAMETERS = "property var, property_settings var, image_lookup var, images var, image_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:can_disable }">
		<MvIF EXPR = "{ NOT l.property_settings:settings:enabled }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages( l.property:properties, l.property_settings, l.image_lookup, l.images, l.image_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_FlexItem_FindImages_Property_List" PARAMETERS = "property var, property_settings var, image_lookup var, images var, image_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.property:list_type EQ 'group' }">
		<MvFOREACH ITERATOR = "l.item_settings" ARRAY = "l.property_settings:children">
			<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages( l.property:properties, l.item_settings, l.image_lookup, l.images, l.image_count ) }">
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.property:list_type EQ 'image' }">
		<MvFOREACH ITERATOR = "l.item_settings" ARRAY = "l.property_settings:children">
			<MvIF EXPR = "{ NOT ISNULL l.item_settings:image }">
				<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages_AppendImage( l.item_settings:image, l.image_lookup, l.images, l.image_count ) }">
			</MvIF>

			<MvFOREACH ITERATOR = "l.responsive_image" ARRAY = "l.property:responsive_images">
				<MvREFERENCEARRAY NAME = "l.image" VARIABLE = "l.item_settings">
					<MvMEMBER NAME = "responsive_images">
					<MvMEMBER NAME = "{ l.responsive_image:code }">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ NOT ISNULL l.image }">
					<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_FlexItem_FindImages_AppendImage( l.image, l.image_lookup, l.images, l.image_count ) }">
				</MvIF>
			</MvFOREACH>
		</MvFOREACH>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_FlexItem_FindImages_AppendImage" PARAMETERS = "image, image_lookup var, images var, image_count var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.image_added" VARIABLE = "l.image_lookup">
		<MvMEMBER NAME = "{ l.image }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT l.image_added }">
		<MvASSIGN NAME = "l.image_added" VALUE = 1>
		<MvASSIGN NAME = "l.image_count" VALUE = "{ miva_array_insert_var( l.images, l.image, -1 ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_Managed" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<FlexComponent_Register>
		<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_Common( l.managedproperty ) }">

		<MvIF EXPR = "{ miva_array_elements( l.managedproperty:version:settings:scripts ) }">
			<Scripts>
				<MvFOREACH ITERATOR = "l.script" ARRAY = "l.managedproperty:version:settings:scripts">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.script:resource_code, l.scriptresource ) OR
									l.scriptresource:type NE 'Z' }">
						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedContent_Load_ID( l.scriptresource:content_id, l.managedcontent ) }">
						<MvFOREACHCONTINUE>
					</MvIF>
		
					<Script>
						<ResourceCode><MvEVAL EXPR = "{ miva_cdata_encode( l.scriptresource:code ) }"></ResourceCode>
						<Source><MvEVAL EXPR = "{ miva_cdata_encode( l.managedcontent:content ) }"></Source>
						<Attributes>
							<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.scriptresource:attributes">
								<Attribute>
									<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:name ) }"></Name>
									<Value><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:value ) }"></Value>
								</Attribute>
							</MvFOREACH>
						</Attributes>
					</Script>
				</MvFOREACH>
			</Scripts>
		</MvIF>
		
		<MvIF EXPR = "{ miva_array_elements( l.managedproperty:version:settings:styles ) }">
			<Styles>
				<MvFOREACH ITERATOR = "l.style" ARRAY = "l.managedproperty:version:settings:styles">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.style:resource_code, l.cssresource ) OR
									l.scriptresource:type NE 'Z' }">
						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedContent_Load_ID( l.cssresource:content_id, l.managedcontent ) }">
						<MvFOREACHCONTINUE>
					</MvIF>
		
					<Style>
						<ResourceCode><MvEVAL EXPR = "{ miva_cdata_encode( l.cssresource:code ) }"></ResourceCode>
						<Source><MvEVAL EXPR = "{ miva_cdata_encode( l.managedcontent:content ) }"></Source>
						<Attributes>
							<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.cssresource:attributes">
								<Attribute>
									<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:name ) }"></Name>
									<Value><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:value ) }"></Value>
								</Attribute>
							</MvFOREACH>
						</Attributes>
					</Style>
				</MvFOREACH>
			</Styles>
		</MvIF>
	</FlexComponent_Register>

	<FlexComponent_Apply code="{ encodeentities( l.managedproperty:code ) }" version="{ encodeentities( ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) ) }" />
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_Unmanaged" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<FlexComponent_Add>
		<MvEVAL EXPR = "{ SkinsComponentModule_Export_Item_Common( l.managedproperty ) }">

		<MvIF EXPR = "{ miva_array_elements( l.managedproperty:version:settings:scripts ) }">
			<Scripts>
				<MvFOREACH ITERATOR = "l.script" ARRAY = "l.managedproperty:version:settings:scripts">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.script:resource_code, l.scriptresource ) }">
						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'L' }">
						<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.scriptresource:file ), 'script', l.source ) LT 0 }">
							<MvFOREACHCONTINUE>
						</MvIF>
					<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'I' }">
						<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.scriptresource:templ_id, l.managedtemplateversion ) }">
							<MvFOREACHCONTINUE>
						</MvIF>

						<MvREFERENCE NAME = "l.source" VARIABLE = "l.managedtemplateversion:source">
					<MvELSE>
						<MvFOREACHCONTINUE>
					</MvIF>

					<Script>
						<ResourceCode><MvEVAL EXPR = "{ miva_cdata_encode( l.scriptresource:code ) }"></ResourceCode>
						<Source><MvEVAL EXPR = "{ miva_cdata_encode( l.source ) }"></Source>
						<Attributes>
							<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.scriptresource:attributes">
								<Attribute>
									<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:name ) }"></Name>
									<Value><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:value ) }"></Value>
								</Attribute>
							</MvFOREACH>
						</Attributes>
					</Script>
				</MvFOREACH>
			</Scripts>
		</MvIF>
		
		<MvIF EXPR = "{ miva_array_elements( l.managedproperty:version:settings:styles ) }">
			<Styles>
				<MvFOREACH ITERATOR = "l.style" ARRAY = "l.managedproperty:version:settings:styles">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.style:resource_code, l.cssresource ) }">
						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ l.cssresource:type EQ 'L' }">
						<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.cssresource:file ), 'script', l.source ) LT 0 }">
							<MvFOREACHCONTINUE>
						</MvIF>
					<MvELSEIF EXPR = "{ l.cssresource:type EQ 'I' }">
						<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.cssresource:templ_id, l.managedtemplateversion ) }">
							<MvFOREACHCONTINUE>
						</MvIF>

						<MvREFERENCE NAME = "l.source" VARIABLE = "l.managedtemplateversion:source">
					<MvELSE>
						<MvFOREACHCONTINUE>
					</MvIF>

					<Style>
						<ResourceCode><MvEVAL EXPR = "{ miva_cdata_encode( l.cssresource:code ) }"></ResourceCode>
						<Source><MvEVAL EXPR = "{ miva_cdata_encode( l.managedcontent:content ) }"></Source>
						<Attributes>
							<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.cssresource:attributes">
								<Attribute>
									<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:name ) }"></Name>
									<Value><MvEVAL EXPR = "{ miva_cdata_encode( l.attribute:value ) }"></Value>
								</Attribute>
							</MvFOREACH>
						</Attributes>
					</Style>
				</MvFOREACH>
			</Styles>
		</MvIF>
	</FlexComponent_Add>
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item_Common" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<Code><MvEVAL EXPR = "{ miva_cdata_encode( l.managedproperty:code ) }"></Code>
	<Name><MvEVAL EXPR = "{ miva_cdata_encode( l.managedproperty:version:settings:name ) }"></Name>
	<Version><MvEVAL EXPR = "{ miva_cdata_encode( ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) ) }"></Version>

	<MvIF EXPR = "{ ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<Type>Component</Type>
	<MvELSEIF EXPR = "{ ComponentManager_Validate_Type_Library( l.managedproperty:version:settings:type ) }">
		<Type>Library</Type>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:resourcegroup_code }">
		<ResourceGroupCode><MvEVAL EXPR = "{ miva_cdata_encode( l.managedproperty:version:settings:resourcegroup_code ) }"></ResourceGroupCode>
	</MvIF>

	<MvIF EXPR = "{ ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<Category><MvEVAL EXPR = "{ miva_cdata_encode( l.managedproperty:version:settings:category ) }"></Category>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:preview }">
			<Preview><MvEVAL EXPR = "{ miva_cdata_encode( l.managedproperty:version:settings:preview ) }"></Preview>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:detailed_preview }">
			<DetailedPreview><MvEVAL EXPR = "{ miva_cdata_encode( l.managedproperty:version:settings:detailed_preview ) }"></DetailedPreview>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:description }">
			<Description><MvEVAL EXPR = "{ miva_cdata_encode( l.managedproperty:version:settings:description ) }"></Description>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:preview_component_selector }">
			<PreviewComponentSelector><MvEVAL EXPR = "{ miva_cdata_encode( l.managedproperty:version:settings:preview_component_selector ) }"></PreviewComponentSelector>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:sample_data_types }">
			<SampleDataTypes><MvEVAL EXPR = "{ miva_cdata_encode( miva_json_encode( l.managedproperty:version:settings:sample_data_types, 'pretty' ) ) }"></SampleDataTypes>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:properties }">
			<Properties><MvEVAL EXPR = "{ miva_cdata_encode( miva_json_encode( l.managedproperty:version:settings:properties, 'pretty' ) ) }"></Properties>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:advanced_properties }">
			<AdvancedProperties><MvEVAL EXPR = "{ miva_cdata_encode( miva_json_encode( l.managedproperty:version:settings:advanced_properties, 'pretty' ) ) }"></AdvancedProperties>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:defaults }">
			<Defaults><MvEVAL EXPR = "{ miva_cdata_encode( miva_json_encode( l.managedproperty:version:settings:defaults, 'pretty' ) ) }"></Defaults>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:images }">
			<Images>
				<MvFOREACH ITERATOR = "l.image_filename" ARRAY = "l.managedproperty:version:settings:images">
					<MvIF EXPR = "{ NOT SanitizeComponentImage( l.image_filename, l.image ) }">
						<MvFOREACHCONTINUE>
					</MvIF>

					<Image filepath="{ encodeentities( l.image:filepath ) }" encoding="base64"><MvEVAL EXPR = "{ miva_cdata_encode( crypto_base64_encode( l.image:source ) ) }"></Image>
				</MvFOREACH>
			</Images>
		</MvIF>

		<MvIF EXPR = "{ NOT l.managedproperty:version:settings:upgrade_template_disabled AND
						NOT ISNULL l.managedproperty:version:settings:upgrade_template_filename }">
			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.managedproperty:version:settings:upgrade_template_filename, l.templateversion_upgrade ) }">
				<UpgradeTemplate><MvEVAL EXPR = "{ miva_cdata_encode( l.templateversion_upgrade:source ) }"></UpgradeTemplate>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT l.managedproperty:version:settings:initialization_template_disabled AND
						NOT ISNULL l.managedproperty:version:settings:initialization_template_filename }">
			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.managedproperty:version:settings:initialization_template_filename, l.templateversion_initialization ) }">
				<InitializationTemplate><MvEVAL EXPR = "{ miva_cdata_encode( l.templateversion_initialization:source ) }"></InitializationTemplate>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT l.managedproperty:version:settings:instance_template_disabled }">
			<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:instance_template_filename }">
				<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.managedproperty:version:settings:instance_template_filename, l.templateversion_instance ) }">
					<InstanceTemplate><MvEVAL EXPR = "{ miva_cdata_encode( l.templateversion_instance:source ) }"></InstanceTemplate>
				</MvIF>
			<MvELSEIF EXPR = "{ l.managedproperty:templ_id }">
				<MvCOMMENT>
				|
				| Legacy Instance Template
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_ID( l.managedproperty:templ_id, l.managedtemplate ) }">
					<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_ID( l.managedtemplate:current_id, l.templateversion_instance ) }">
						<InstanceTemplate><MvEVAL EXPR = "{ miva_cdata_encode( l.templateversion_instance:source ) }"></InstanceTemplate>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Page Builder Component Feature (pagebuilder_cmp)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Components" PARAMETERS = "module var, components var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.components"									VALUE = "">
	<MvASSIGN NAME = "l.component_count"							VALUE = 0>

	<MvFOREACH ITERATOR = "l.managedproperty" ARRAY = "l.managedproperties" COUNT = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersionList_Load_Type_Current( 'flex', l.managedproperties ) }">
		<MvIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.component"								VALUE = "">
		<MvASSIGN NAME = "l.component:code"							VALUE = "{ l.managedproperty:code }">
		<MvASSIGN NAME = "l.component:name"							VALUE = "{ l.managedproperty:version:settings:name }">
		<MvASSIGN NAME = "l.component:version"						VALUE = "{ ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) }">
		<MvASSIGN NAME = "l.component:preview"						VALUE = "{ l.managedproperty:version:settings:preview }">
		<MvASSIGN NAME = "l.component:detailed_preview"				VALUE = "{ l.managedproperty:version:settings:detailed_preview }">
		<MvASSIGN NAME = "l.component:preview_component_selector"	VALUE = "{ l.managedproperty:version:settings:preview_component_selector }">
		<MvASSIGN NAME = "l.component:sample_data_types"			VALUE = "{ l.managedproperty:version:settings:sample_data_types }">
		<MvASSIGN NAME = "l.component:category"						VALUE = "{ l.managedproperty:version:settings:category }">
		<MvASSIGN NAME = "l.component:item_code"					VALUE = "flex">
		<MvASSIGN NAME = "l.component:properties"					VALUE = "{ l.managedproperty:version:settings:properties }">
		<MvASSIGN NAME = "l.component:advanced_properties"			VALUE = "{ l.managedproperty:version:settings:advanced_properties }">
		<MvASSIGN NAME = "l.component:defaults"						VALUE = "{ l.managedproperty:version:settings:defaults }">

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:description AND [ g.Module_Feature_PGB_UT ].PageBuilder_CMark_Supported() }">	<MvASSIGN NAME = "l.component:description" VALUE = "{ cmark_markdown_to_html( l.managedproperty:version:settings:description, 'safe,hardbreaks' ) }">
		<MvELSE>																																	<MvASSIGN NAME = "l.component:description" VALUE = "">
		</MvIF>

		<MvASSIGN NAME = "l.component_count"						VALUE = "{ miva_array_insert_var( l.components, l.component, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.component_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Component" PARAMETERS = "module var, component_code, component var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.component_code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00070', 'Component not found' ) }">
	<MvELSEIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00243', 'Component not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.component"								VALUE = "">
	<MvASSIGN NAME = "l.component:code"							VALUE = "{ l.managedproperty:code }">
	<MvASSIGN NAME = "l.component:name"							VALUE = "{ l.managedproperty:version:settings:name }">
	<MvASSIGN NAME = "l.component:version"						VALUE = "{ ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) }">
	<MvASSIGN NAME = "l.component:preview"						VALUE = "{ l.managedproperty:version:settings:preview }">
	<MvASSIGN NAME = "l.component:detailed_preview"				VALUE = "{ l.managedproperty:version:settings:detailed_preview }">
	<MvASSIGN NAME = "l.component:preview_component_selector"	VALUE = "{ l.managedproperty:version:settings:preview_component_selector }">
	<MvASSIGN NAME = "l.component:sample_data_types"			VALUE = "{ l.managedproperty:version:settings:sample_data_types }">
	<MvASSIGN NAME = "l.component:category"						VALUE = "{ l.managedproperty:version:settings:category }">
	<MvASSIGN NAME = "l.component:item_code"					VALUE = "flex">
	<MvASSIGN NAME = "l.component:properties"					VALUE = "{ l.managedproperty:version:settings:properties }">
	<MvASSIGN NAME = "l.component:advanced_properties"			VALUE = "{ l.managedproperty:version:settings:advanced_properties }">
	<MvASSIGN NAME = "l.component:defaults"						VALUE = "{ l.managedproperty:version:settings:defaults }">

	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:description AND [ g.Module_Feature_PGB_UT ].PageBuilder_CMark_Supported() }">	<MvASSIGN NAME = "l.component:description" VALUE = "{ cmark_markdown_to_html( l.managedproperty:version:settings:description, 'safe,hardbreaks' ) }">
	<MvELSE>																																	<MvASSIGN NAME = "l.component:description" VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Elements" PARAMETERS = "module var, item, settings var, elements var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.elements"		VALUE = "">
	<MvASSIGN NAME = "l.element_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.item_code" ARRAY = "l.item_codes" COUNT = "{ miva_struct_members( l.settings, l.item_codes ) }">
		<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.settings">
			<MvMEMBER NAME = "{ l.item_code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.flex_item:component_code, l.managedproperty ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvEVAL EXPR = "{ FlexItemSettings_Sanitize( l.module, l.managedproperty:version:settings, l.flex_item:settings ) }">

		<MvASSIGN NAME = "l.element"				VALUE = "">
		<MvASSIGN NAME = "l.element:component_code"	VALUE = "{ l.flex_item:component_code }">
		<MvASSIGN NAME = "l.element:code"			VALUE = "{ l.flex_item:item_code }">
		<MvASSIGN NAME = "l.element:settings"		VALUE = "{ l.flex_item:settings }">

		<MvASSIGN NAME = "l.element_count"			VALUE = "{ miva_array_insert_var( l.elements, l.element, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.element_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Element" PARAMETERS = "module var, item, settings var, code, element var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.settings, l.code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00071', 'Element not found' ) }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.settings">
		<MvMEMBER NAME = "{ l.code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.flex_item:component_code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00100', 'Element not found' ) }">
	<MvELSEIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00244', 'Element not found' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexItemSettings_Sanitize( l.module, l.managedproperty:version:settings, l.flex_item:settings ) }">

	<MvASSIGN NAME = "l.element"				VALUE = "">
	<MvASSIGN NAME = "l.element:component_code"	VALUE = "{ l.flex_item:component_code }">
	<MvASSIGN NAME = "l.element:code"			VALUE = "{ l.flex_item:item_code }">
	<MvASSIGN NAME = "l.element:settings"		VALUE = "{ l.flex_item:settings }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Element_Insert" PARAMETERS = "module var, settings var, component var, element var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ miva_member_exists( l.settings, l.element:code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00072', 'Element \'' $ l.element:code $ '\' already exists' ) }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.settings">
		<MvMEMBER NAME = "{ l.element:code }">
	</MvREFERENCEARRAY>

	<MvASSIGN NAME = "l.flex_item:component_code"					VALUE = "{ l.element:component_code }">
	<MvASSIGN NAME = "l.flex_item:item_code"						VALUE = "{ l.element:code }">
	<MvASSIGN NAME = "l.flex_item:settings"							VALUE = "{ l.element:settings }">
	<MvASSIGN NAME = "l.flex_item:settings:_flex:flex_version"		VALUE = "{ l.module:version }">
	<MvASSIGN NAME = "l.flex_item:settings:_flex:settings_version"	VALUE = "{ ComponentManager_Sanitize_Version( l.component:version ) }">

	<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible( l.component, l.flex_item:settings, 1 ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00073', 'Inserted flex item \'' $ l.flex_item:item_code $ '\' using component \'' $ l.flex_item:component_code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Element_Update" PARAMETERS = "module var, settings var, original_component var, original_element var, component var, element var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.settings, l.original_element:code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00074', 'Element not found' ) }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.settings">
		<MvMEMBER NAME = "{ l.original_element:code }">
	</MvREFERENCEARRAY>

	<MvASSIGN NAME = "l.original_flex_item"							VALUE = "{ l.flex_item }">

	<MvASSIGN NAME = "l.flex_item:item_code"						VALUE = "{ l.element:code }">
	<MvASSIGN NAME = "l.flex_item:component_code"					VALUE = "{ l.element:component_code }">
	<MvASSIGN NAME = "l.flex_item:settings"							VALUE = "{ l.element:settings }">
	<MvASSIGN NAME = "l.flex_item:settings:_flex:flex_version"		VALUE = "{ l.module:version }">
	<MvASSIGN NAME = "l.flex_item:settings:_flex:settings_version"	VALUE = "{ ComponentManager_Sanitize_Version( l.component:version ) }">

	<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible( l.component, l.flex_item:settings, 1 ) }">

	<MvIF EXPR = "{ strcasecmp( l.original_flex_item:item_code, l.flex_item:item_code ) NE 0 }">
		<MvASSIGNARRAY NAME = "l.settings"			VALUE = "{ l.flex_item }">
			<MvMEMBER NAME = "{ l.flex_item:item_code }">
		</MvASSIGNARRAY>

		<MvASSIGNARRAY NAME = "l.settings"			VALUE = "">
			<MvMEMBER NAME = "{ l.original_flex_item:item_code }">
		</MvASSIGNARRAY>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00075', 'Updated flex item \'' $ l.flex_item:item_code $ '\' using component \'' $ l.flex_item:component_code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PageBuilder_Element_Delete" PARAMETERS = "module var, settings var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT miva_member_exists( l.settings, l.code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00076', 'Element not found' ) }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.settings">
		<MvMEMBER NAME = "{ l.code }">
	</MvREFERENCEARRAY>

	<MvEVAL EXPR = "{ miva_member_delete( l.settings, l.code ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00077', 'Deleted flex item \'' $ l.flex_item:item_code $ '\' using component \'' $ l.flex_item:component_code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Module JSON Changeset Feature (json_changeset)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON_Changeset_Validate_Change" PARAMETERS = "module var, operation, changeset_notes, items var, input_change_data var, change var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.operation EQ 'insert' }">		<MvFUNCTIONRETURN VALUE = "{ Module_JSON_Changeset_Validate_Change_Insert( l.module, l.changeset_notes, l.items, l.input_change_data, l.change ) }">
	<MvELSEIF EXPR = "{ l.operation EQ 'update' }">	<MvFUNCTIONRETURN VALUE = "{ Module_JSON_Changeset_Validate_Change_Update( l.module, l.changeset_notes, l.items, l.input_change_data, l.change ) }">
	<MvELSEIF EXPR = "{ l.operation EQ 'delete' }">	<MvFUNCTIONRETURN VALUE = "{ Module_JSON_Changeset_Validate_Change_Delete( l.module, l.changeset_notes, l.items, l.input_change_data, l.change ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Changeset_Validate_Change_Insert" PARAMETERS = "module var, changeset_notes, items var, input_change_data var, change var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.change"						VALUE = "">
	<MvASSIGN NAME = "l.change:notes"				VALUE = "{ l.changeset_notes }">
	<MvASSIGN NAME = "l.change:managed"				VALUE = 1>
	<MvASSIGN NAME = "l.change:scripts"				VALUE = "">
	<MvASSIGN NAME = "l.change:script_count"		VALUE = 0>
	<MvASSIGN NAME = "l.change:styles"				VALUE = "">
	<MvASSIGN NAME = "l.change:style_count"			VALUE = 0>
	<MvASSIGN NAME = "l.change:images"				VALUE = "">
	<MvASSIGN NAME = "l.change:image_count"			VALUE = 0>
	<MvASSIGN NAME = "l.change:type"				VALUE = "component">
	<MvASSIGN NAME = "l.change:depends"				VALUE = "">
	<MvASSIGN NAME = "l.change:conflicts"			VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code(		l.input_change_data, 'R', 'code',				l.change:code )					OR
					NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.input_change_data, 'R', 'name',				l.change:name )					OR
					NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.input_change_data, 'R', 'version',			l.change:version )				OR
					NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_change_data, 'o', 'managed',			l.change:managed )				OR
					NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.input_change_data, 'o', 'resourcegroup_code',	l.change:resourcegroup_code )	OR
					NOT [ g.Module_JSON ].JSON_Input_Element_List(		l.input_change_data, 'O', 'type',				l.change:type, 'component,library', 'component,library' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Code( 'flex', l.change:code, l.existing_managedproperty ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'code', 'A component with code \'' $ l.existing_managedproperty:code $ '\' is already installed on this branch' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.change:version" VALUE = "{ ComponentManager_Sanitize_Version( l.change:version ) }">

	<MvIF EXPR = "{ l.change:type NE 'component' }">
		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'category' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'category', 'Category is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'upgrade_template' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'upgrade_template', 'Upgrade template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'initialization_template' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'initialization_template', 'Initialization template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'instance_template' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'instance_template', 'Instance template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'properties' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'properties', 'Properties are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'advanced_properties' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'advanced_properties', 'Advanced properties are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'defaults' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'defaults', 'Defaults are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'preview' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'preview', 'Preview is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'detailed_preview' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'detailed_preview', 'Detailed preview is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'description' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'description', 'Description is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'preview_component_selector' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'preview_component_selector', 'Preview Component Selector is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'sample_data_types' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'sample_data_types', 'Sample Data Types is only supported in Flex Components' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'R', 'category', l.change:category ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'upgrade_template' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change_data, 'upgrade_template', l.change:upgrade_template_source ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.change:upgrade_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'upgrade_template', 'Failed to compile upgrade template: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'initialization_template' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change_data, 'initialization_template', l.change:initialization_template_source ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.change:initialization_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'initialization_template', 'Failed to compile initialization template: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'instance_template' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change_data, 'instance_template', l.change:instance_template_source ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.change:instance_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'instance_template', 'Failed to compile instance template: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'properties' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change_data, 'properties', l.change:properties ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'advanced_properties' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change_data, 'advanced_properties', l.change:advanced_properties ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'defaults' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change_data, 'defaults', l.change:defaults ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'preview' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'O', 'preview', l.change:preview ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT Value_Is_SVG( l.change:preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'preview', 'Invalid SVG preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'detailed_preview' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'O', 'detailed_preview', l.change:detailed_preview ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT Value_Is_SVG( l.change:detailed_preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'detailed_preview', 'Invalid SVG detailed preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'description' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'o', 'description', l.change:description ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'preview_component_selector' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'o', 'preview_component_selector', l.change:preview_component_selector ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'sample_data_types' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change_data, 'sample_data_types', l.change:sample_data_types ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'images' ) }">
		<MvFOREACH ITERATOR = "l.input_image" ARRAY = "l.input_images" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change_data, 'images', l.input_images ) }">
			<MvASSIGN NAME = "l.image" VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_image, 'R', 'filepath',	l.image:filepath )	OR
							NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_image, 'R', 'source',	l.image_source )	OR
							NOT [ g.Module_JSON ].JSON_Input_Element_List( l.input_image, 'R', 'encoding',	l.encoding, 'base64', 'base64' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ ( ':' IN l.image:filepath ) OR
							( ( '/' IN l.image:filepath ) EQ 1 ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_image, 'filepath', 'Image filepaths must be local and relative to the Base Directory for Graphics' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.image:create"		VALUE = 1>
			<MvASSIGN NAME = "l.image:source"		VALUE = "{ crypto_base64_decode( l.image_source ) }">
			<MvASSIGN NAME = "l.change:image_count"	VALUE = "{ miva_array_insert_var( l.change:images, l.image, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'scripts' ) }">
		<MvFOREACH ITERATOR = "l.input_script" ARRAY = "l.input_scripts" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change_data, 'scripts', l.input_scripts ) }">
			<MvASSIGN NAME = "l.script" VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_script, 'R', 'resource_code', l.script:resource_code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_script, 'source' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_script, 'source', l.script:source ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_script, 'attributes' ) }">
				<MvIF EXPR = "{ NOT Module_JSON_Changeset_Validate_Change_Resource_Attributes( l.input_script, l.script:attributes ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ l.change:managed }">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( 'Z', l.script:attributes ) }">
				<MvELSE>
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( 'L', l.script:attributes ) }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.change:script_count" VALUE = "{ miva_array_insert_var( l.change:scripts, l.script, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'styles' ) }">
		<MvFOREACH ITERATOR = "l.input_style" ARRAY = "l.input_styles" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change_data, 'styles', l.input_styles ) }">
			<MvASSIGN NAME = "l.style" VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_style, 'R', 'resource_code', l.style:resource_code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_style, 'source' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_style, 'source', l.style:source ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_style, 'attributes' ) }">
				<MvIF EXPR = "{ NOT Module_JSON_Changeset_Validate_Change_Resource_Attributes( l.input_style, l.style:attributes ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ l.change:managed }">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( 'Z', l.style:attributes ) }">
				<MvELSE>
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( 'L', l.style:attributes ) }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.change:style_count" VALUE = "{ miva_array_insert_var( l.change:styles, l.style, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'depends' ) }">
		<MvIF EXPR = "{ NOT Module_JSON_Changeset_Validate_Change_Dependencies( l.input_change_data, 'depends', l.change:depends ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'conflicts' ) }">
		<MvIF EXPR = "{ NOT Module_JSON_Changeset_Validate_Change_Dependencies( l.input_change_data, 'conflicts', l.change:conflicts ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Changeset_Validate_Change_Update" PARAMETERS = "module var, changeset_notes, items var, input_change_data var, change var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.change"											VALUE = "">
	<MvASSIGN NAME = "l.change:notes"									VALUE = "{ l.changeset_notes }">
	<MvASSIGN NAME = "l.change:update_upgrade_template"					VALUE = 0>
	<MvASSIGN NAME = "l.change:managedtemplate_upgrade"					VALUE = "">
	<MvASSIGN NAME = "l.change:update_initialization_template"			VALUE = 0>
	<MvASSIGN NAME = "l.change:managedtemplate_initialization"			VALUE = "">
	<MvASSIGN NAME = "l.change:update_instance_template"				VALUE = 0>
	<MvASSIGN NAME = "l.change:managedtemplate_instance"				VALUE = "">
	<MvASSIGN NAME = "l.change:update_scripts"							VALUE = 0>
	<MvASSIGN NAME = "l.change:scripts"									VALUE = "">
	<MvASSIGN NAME = "l.change:script_count"							VALUE = 0>
	<MvASSIGN NAME = "l.change:update_style"							VALUE = 0>
	<MvASSIGN NAME = "l.change:styles"									VALUE = "">
	<MvASSIGN NAME = "l.change:style_count"								VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_change_data, 'R', 'edit_component', l.change:original_code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.change:original_code, l.change:managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'edit_component', g.Error_Code $ ': ' $ g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'edit_component', 'Flex Component not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.change:code"									VALUE = "{ l.change:original_code }">
	<MvASSIGN NAME = "l.change:name"									VALUE = "{ l.change:managedproperty:version:settings:name }">
	<MvASSIGN NAME = "l.change:type"									VALUE = "{ ternary( ISNULL l.change:managedproperty:version:settings:type, 'component', l.change:managedproperty:version:settings:type ) }">
	<MvASSIGN NAME = "l.change:version"									VALUE = "{ l.change:managedproperty:version:settings:version }">
	<MvASSIGN NAME = "l.change:managed"									VALUE = "{ l.change:managedproperty:version:settings:managed }">
	<MvASSIGN NAME = "l.change:resourcegroup_code"						VALUE = "{ l.change:managedproperty:version:settings:resourcegroup_code }">
	<MvASSIGN NAME = "l.change:depends"									VALUE = "{ l.change:managedproperty:version:settings:depends }">
	<MvASSIGN NAME = "l.change:conflicts"								VALUE = "{ l.change:managedproperty:version:settings:conflicts }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code(		l.input_change_data, 'O', 'code',				l.change:code )		OR
					NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.input_change_data, 'O', 'name',				l.change:name )		OR
					NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.input_change_data, 'O', 'version',			l.change:version )	OR
					NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_change_data, 'O', 'managed',			l.change:managed )	OR
					NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.input_change_data, 'o', 'resourcegroup_code',	l.change:resourcegroup_code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Code( 'flex', l.change:code, l.managedproperty ) AND
					( l.change:managedproperty:id NE l.managedproperty:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'code', 'Component code already exists' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.change:version"									VALUE = "{ ComponentManager_Sanitize_Version( l.change:version ) }">
	<MvASSIGN NAME = "l.version_segment_count"							VALUE = "{ miva_splitstring( l.change:version, '.', l.version_segments, '' ) }">

	<MvIF EXPR = "{ l.version_segment_count LT 2 }">
		<MvASSIGN NAME = "l.change:version"								VALUE = "{ l.change:version $ '.local.1' }">
	<MvELSEIF EXPR = "{ l.version_segments[ l.version_segment_count - 1 ] NE 'local' }">
		<MvASSIGN NAME = "l.change:version"								VALUE = "{ l.change:version $ '.local.1' }">
	<MvELSE>
		<MvASSIGNARRAY NAME = "l.version_segments"						VALUE = "{ l.version_segments[ l.version_segment_count ] + 1 }">
			<MvDIMENSION INDEX = "{ l.version_segment_count }">
		</MvASSIGNARRAY>

		<MvASSIGN NAME = "l.change:version"								VALUE = "{ miva_joinstring( l.version_segments, '.', '' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.change:type NE 'component' }">
		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'category' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'category', 'Category is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'upgrade_template' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'upgrade_template', 'Upgrade template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'initialization_template' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'initialization_template', 'Initialization template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'instance_template' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'instance_template', 'Instance template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'properties' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'properties', 'Properties are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'advanced_properties' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'advanced_properties', 'Advanced properties are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'defaults' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'defaults', 'Defaults are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'preview' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'preview', 'Preview is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'detailed_preview' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'detailed_preview', 'Detailed preview is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'description' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'description', 'Description is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'preview_component_selector' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'preview_component_selector', 'Preview Component Selector is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'sample_data_types' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'sample_data_types', 'Sample Data Types is only supported in Flex Components' ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.change:category"							VALUE = "{ l.change:managedproperty:version:settings:category }">
		<MvASSIGN NAME = "l.change:preview"								VALUE = "{ l.change:managedproperty:version:settings:preview }">
		<MvASSIGN NAME = "l.change:detailed_preview"					VALUE = "{ l.change:managedproperty:version:settings:detailed_preview }">
		<MvASSIGN NAME = "l.change:description"							VALUE = "{ l.change:managedproperty:version:settings:description }">
		<MvASSIGN NAME = "l.change:preview_component_selector"			VALUE = "{ l.change:managedproperty:version:settings:preview_component_selector }">
		<MvASSIGN NAME = "l.change:sample_data_types"					VALUE = "{ l.change:managedproperty:version:settings:sample_data_types }">
		<MvASSIGN NAME = "l.change:properties"							VALUE = "{ l.change:managedproperty:version:settings:properties }">
		<MvASSIGN NAME = "l.change:advanced_properties"					VALUE = "{ l.change:managedproperty:version:settings:advanced_properties }">
		<MvASSIGN NAME = "l.change:defaults"							VALUE = "{ l.change:managedproperty:version:settings:defaults }">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'O', 'category', l.change:category ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'upgrade_template' ) }">
			<MvASSIGN NAME = "l.change:update_upgrade_template"	VALUE = 1>

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change_data, 'upgrade_template', l.change:upgrade_template_source ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.change:upgrade_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'upgrade_template', 'Failed to compile upgrade template: ' $ g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.change:managedproperty:version:settings:upgrade_template_filename }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_Filename( l.change:managedproperty:version:settings:upgrade_template_filename, l.change:managedtemplate_upgrade ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'upgrade_template', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'upgrade_template', 'Upgrade template not found' ) }">
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'initialization_template' ) }">
			<MvASSIGN NAME = "l.change:update_initialization_template"	VALUE = 1>

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change_data, 'initialization_template', l.change:initialization_template_source ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.change:initialization_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'initialization_template', 'Failed to compile initialization template: ' $ g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.change:managedproperty:version:settings:initialization_template_filename }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_Filename( l.change:managedproperty:version:settings:initialization_template_filename, l.change:managedtemplate_initialization ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'initialization_template', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'initialization_template', 'Initialization template not found' ) }">
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'instance_template' ) }">
			<MvASSIGN NAME = "l.change:update_instance_template"		VALUE = 1>

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_change_data, 'instance_template', l.change:instance_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'instance_template', g.Error_Code $ ': ' $ g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.change:instance_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'instance_template', 'Failed to compile instance template: ' $ g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.change:managedproperty:version:settings:instance_template_filename }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_Filename( l.change:managedproperty:version:settings:instance_template_filename, l.change:managedtemplate_instance ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'instance_template', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'instance_template', 'Instance template not found' ) }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.change:managedproperty:templ_id }">
				<MvCOMMENT>
				|
				| Legacy Instance Template
				|
				</MvCOMMENT>

				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_ID( l.change:managedproperty:templ_id, l.change:managedtemplate_instance ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'instance_template', g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'instance_template', 'Instance template not found' ) }">
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'properties' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change_data, 'properties', l.change:properties ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'advanced_properties' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change_data, 'advanced_properties', l.change:advanced_properties ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'defaults' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change_data, 'defaults', l.change:defaults ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'preview' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'O', 'preview', l.change:preview ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT Value_Is_SVG( l.change:preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'preview', 'Invalid SVG preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'detailed_preview' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'O', 'detailed_preview', l.change:detailed_preview ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT Value_Is_SVG( l.change:detailed_preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'detailed_preview', 'Invalid SVG detailed preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'description' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'o', 'description', l.change:description ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'preview_component_selector' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_change_data, 'o', 'preview_component_selector', l.change:preview_component_selector ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'sample_data_types' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Raw( l.input_change_data, 'sample_data_types', l.change:sample_data_types ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'images' ) }">
		<MvFOREACH ITERATOR = "l.input_image" ARRAY = "l.input_images" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change_data, 'images', l.input_images ) }">
			<MvASSIGN NAME = "l.image" VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_image, 'R', 'filepath',	l.image:filepath )	OR
							NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_image, 'R', 'source',	l.image_source )	OR
							NOT [ g.Module_JSON ].JSON_Input_Element_List( l.input_image, 'R', 'encoding',	l.encoding, 'base64', 'base64' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ ( ':' IN l.image:filepath ) OR
							( ( '/' IN l.image:filepath ) EQ 1 ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_image, 'filepath', 'Image filepaths must be local and relative to the Base Directory for Graphics' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.image:create"		VALUE = 1>
			<MvASSIGN NAME = "l.image:source"		VALUE = "{ crypto_base64_decode( l.image_source ) }">
			<MvASSIGN NAME = "l.change:image_count"	VALUE = "{ miva_array_insert_var( l.change:images, l.image, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'scripts' ) }">
		<MvASSIGN NAME = "l.change:update_scripts"		VALUE = 1>

		<MvFOREACH ITERATOR = "l.input_script" ARRAY = "l.input_scripts" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change_data, 'scripts', l.input_scripts ) }">
			<MvASSIGN NAME = "l.script"					VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_script, 'R', 'resource_code', l.script:resource_code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_script, 'source' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_script, 'source', l.script:source ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_script, 'attributes' ) }">
				<MvIF EXPR = "{ NOT Module_JSON_Changeset_Validate_Change_Resource_Attributes( l.input_script, l.script:attributes ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ l.change:managed }">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( 'Z', l.script:attributes ) }">
				<MvELSE>
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( 'L', l.script:attributes ) }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.change:script_count" VALUE = "{ miva_array_insert_var( l.change:scripts, l.script, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'styles' ) }">
		<MvASSIGN NAME = "l.change:update_styles"		VALUE = 1>

		<MvFOREACH ITERATOR = "l.input_style" ARRAY = "l.input_styles" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_change_data, 'styles', l.input_styles ) }">
			<MvASSIGN NAME = "l.style"					VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_style, 'R', 'resource_code', l.style:resource_code ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_style, 'source' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Retrieve_Binary( l.input_style, 'source', l.style:source ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_style, 'attributes' ) }">
				<MvIF EXPR = "{ NOT Module_JSON_Changeset_Validate_Change_Resource_Attributes( l.input_style, l.style:attributes ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ l.change:managed }">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( 'Z', l.style:attributes ) }">
				<MvELSE>
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( 'L', l.style:attributes ) }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.change:style_count" VALUE = "{ miva_array_insert_var( l.change:styles, l.style, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'depends' ) }">
		<MvIF EXPR = "{ NOT Module_JSON_Changeset_Validate_Change_Dependencies( l.input_change_data, 'depends', l.change:depends ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_change_data, 'conflicts' ) }">
		<MvIF EXPR = "{ NOT Module_JSON_Changeset_Validate_Change_Dependencies( l.input_change_data, 'conflicts', l.change:conflicts ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Changeset_Validate_Change_Delete" PARAMETERS = "module var, changeset_notes, items var, input_change_data var, change var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_change_data, 'R', 'edit_component', l.change:code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.change:code, l.change:managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'edit_component', g.Error_Code $ ': ' $ g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_change_data, 'edit_component', 'Flex Component not found' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Changeset_Validate_Change_Dependencies" PARAMETERS = "input_change_data var, param, dependencies var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.dependencies"			VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Structure(	l.input_change_data, 'R', l.param, l.input_dependencies ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFOREACH ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Structure_Members( l.input_dependencies, l.dependency_names ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_dependencies, 'R', l.dependency_name, l.dependency_value ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ( '>=' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.operator"		VALUE = ">=">
			<MvASSIGN NAME = "l.version"		VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
		<MvELSEIF EXPR = "{ ( '<=' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.operator"		VALUE = "<=">
			<MvASSIGN NAME = "l.version"		VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
		<MvELSEIF EXPR = "{ ( '>' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.operator"		VALUE = ">">
			<MvASSIGN NAME = "l.version"		VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
		<MvELSEIF EXPR = "{ ( '<' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.operator"		VALUE = "<">
			<MvASSIGN NAME = "l.version"		VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
		<MvELSEIF EXPR = "{ ( '!=' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.operator"		VALUE = "!=">
			<MvASSIGN NAME = "l.version"		VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
		<MvELSEIF EXPR = "{ ( '=' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.operator"		VALUE = "=">
			<MvASSIGN NAME = "l.version"		VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.operator"		VALUE = "=">
			<MvASSIGN NAME = "l.version"		VALUE = "{ ComponentManager_Sanitize_Version( l.dependency_value ) }">
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.version }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_dependencies, l.dependency_name, 'Invalid version' ) }">
		</MvIF>

		<MvASSIGNARRAY NAME = "l.dependencies"	VALUE = "{ l.operator $ l.version }">
			<MvMEMBER NAME = "{ l.dependency_name }">
		</MvASSIGNARRAY>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Changeset_Validate_Change_Resource_Attributes" PARAMETERS = "input_resource var, attributes var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attributes" VALUE = "">

	<MvFOREACH ITERATOR = "l.input_attribute" ARRAY = "l.input_attributes" COUNT = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_resource, 'attributes', l.input_attributes ) }">
		<MvASSIGN NAME = "l.attribute" VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_attribute, 'R', 'name',	l.attribute:name ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_attribute, 'o', 'value',	l.attribute:value ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.attribute_count" VALUE = "{ miva_array_insert_var( l.attributes, l.attribute, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Changeset_Process_Change" PARAMETERS = "module var, operation, items var, change var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.operation EQ 'insert' }">		<MvFUNCTIONRETURN VALUE = "{ Module_JSON_Changeset_Process_Change_Insert( l.module, l.items, l.change ) }">
	<MvELSEIF EXPR = "{ l.operation EQ 'update' }">	<MvFUNCTIONRETURN VALUE = "{ Module_JSON_Changeset_Process_Change_Update( l.module, l.items, l.change ) }">
	<MvELSEIF EXPR = "{ l.operation EQ 'delete' }">	<MvFUNCTIONRETURN VALUE = "{ Module_JSON_Changeset_Process_Change_Delete( l.module, l.items, l.change ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Changeset_Process_Change_Insert" PARAMETERS = "module var, items var, change var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Apply_Unregistered_Version( l.change ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00158', 'Flex Component \'' $ l.change:code $ '\' version \'' $ l.change:version $ '\' added to branch ' $ l.branch:name ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Changeset_Process_Change_Update" PARAMETERS = "module var, items var, change var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Update_Installed( l.change ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00101', 'Flex Component \'' $ l.change:code $ '\' updated' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Changeset_Process_Change_Delete" PARAMETERS = "module var, items var, change var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Remove_Installed( l.change:managedproperty ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00102', 'Flex Component \'' $ l.change:managedproperty:code $ '\' deleted' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Module Provisioning Feature (provision_store)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Provision_Store" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.deferred_actions"		VALUE = "">
	<MvASSIGN NAME = "l.deferred_action_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag EQ 'flexcomponent_add' }">						<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Add( l.module, l.child_xml, l.deferred_actions, l.deferred_action_count ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'flexcomponent_delete' }">					<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Delete( l.module, l.child_xml, l.deferred_actions, l.deferred_action_count ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'flexcomponent_delete_all_unmanaged' }">	<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Delete_All_Unmanaged( l.module, l.child_xml, l.deferred_actions, l.deferred_action_count ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'flexcomponent_register' }">				<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Register( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'flexcomponent_deregister' }">				<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Deregister( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'flexcomponent_apply' }">					<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Apply( l.module, l.child_xml, l.deferred_actions, l.deferred_action_count ) }">
		<MvELSE>
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Unknown tag \'' $ l.tag $ '\'' ) }">
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Validate Dependency State & Apply Deferred Actions
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.deferred_action_count }">
		<MvIF EXPR = "{ Module_Provision_Store_Validate_Dependencies( l.module, l.provide_xml, l.deferred_actions, l.deferred_action_count ) }">
			<MvEVAL EXPR = "{ Module_Provision_Store_Apply_Dependencies( l.module, l.deferred_actions, l.deferred_action_count ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Validate_Dependencies" PARAMETERS = "module var, provide_xml var, deferred_actions var, deferred_action_count var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ ComponentState_Initialize( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID(), l.lookup_depends, l.lookup_conflicts, l.componentstates, l.componentstate_count ) }">

	<MvFOREACH ITERATOR = "l.deferred_action" ARRAY = "l.deferred_actions" COUNT = "{ l.deferred_action_count }">
		<MvIF EXPR = "{ l.deferred_action:type EQ 'add' }">							<MvEVAL EXPR = "{ ComponentState_Append_Action_Add( l.deferred_action:data:componentversiondata, l.deferred_action:data:enforce_dependencies, 0, l.componentstates, l.componentstate_count ) }">
		<MvELSEIF EXPR = "{ l.deferred_action:type EQ 'delete' }">					<MvEVAL EXPR = "{ ComponentState_Append_Action_Delete( l.deferred_action:data:code, l.deferred_action:data:enforce_dependencies, l.componentstates, l.componentstate_count ) }">
		<MvELSEIF EXPR = "{ l.deferred_action:type EQ 'delete_all_unmanaged' }">	<MvEVAL EXPR = "{ ComponentState_Append_Action_DeleteAllUnmanaged( l.deferred_action:data:enforce_dependencies, l.componentstates, l.componentstate_count ) }">
		<MvELSEIF EXPR = "{ l.deferred_action:type EQ 'apply' }">					<MvEVAL EXPR = "{ ComponentState_Append_Action_Apply( l.deferred_action:data:component, l.deferred_action:data:componentversion, l.deferred_action:data:enforce_dependencies, l.componentstates, l.componentstate_count ) }">
		</MvIF>
	</MvFOREACH>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.componentstate" ARRAY = "l.componentstates" COUNT = "{ l.componentstate_count }">
		<MvIF EXPR = "{ NOT ComponentState_Should_Validate( l.componentstate ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvFOREACH ITERATOR = "l.dependency" ARRAY = "l.componentstate:depends" COUNT = "{ l.componentstate:depends_count }">
			<MvIF EXPR = "{ NOT ComponentState_Find_Dependency( l.pos, l.dependency, l.lookup_depends, l.componentstates, l.componentstate_count ) }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Component \'' $ l.componentstate:code $ '\' version \'' $ l.componentstate:version $ '\' depends on component \'' $ l.dependency:code $ '\' version \'' $ l.dependency:display_version $ '\'' ) }">

				<MvFOREACH ITERATOR = "l.deferred_action" ARRAY = "l.deferred_actions" COUNT = "{ l.deferred_action_count }">
					<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.deferred_action:provide_xml, 'Operation cannot be performed due to unmet dependencies' ) }">
				</MvFOREACH>

				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.conflict" ARRAY = "l.componentstate:conflicts" COUNT = "{ l.componentstate:conflicts_count }">
			<MvIF EXPR = "{ ComponentState_Find_Conflict( l.pos, l.conflict, l.lookup_conflicts, l.componentstates, l.componentstate_count, l.conflicting_componentstate ) }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Component \'' $ l.conflicting_componentstate:code $ '\' version \'' $ l.conflicting_componentstate:version $ '\' conflicts with \'' $ l.componentstate:code $ '\' version \'' $ l.componentstate:version $ '\'' ) }">

				<MvFOREACH ITERATOR = "l.deferred_action" ARRAY = "l.deferred_actions" COUNT = "{ l.deferred_action_count }">
					<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.deferred_action:provide_xml, 'Operation cannot be performed due to conflicts' ) }">
				</MvFOREACH>

				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Apply_Dependencies" PARAMETERS = "module var, deferred_actions var, deferred_action_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.deferred_action" ARRAY = "l.deferred_actions" COUNT = "{ l.deferred_action_count }">
		<MvIF EXPR = "{ l.deferred_action:type EQ 'add' }">							<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Add_Action( l.module, l.deferred_action:provide_xml, l.deferred_action:data:componentversiondata ) }">
		<MvELSEIF EXPR = "{ l.deferred_action:type EQ 'delete' }">					<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Delete_Action( l.module, l.deferred_action:provide_xml, l.deferred_action:data:code, l.deferred_action:data:enforce_dependencies ) }">
		<MvELSEIF EXPR = "{ l.deferred_action:type EQ 'delete_all_unmanaged' }">	<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Delete_All_Unmanaged_Action( l.module, l.deferred_action:provide_xml, l.deferred_action:data:enforce_dependencies ) }">
		<MvELSEIF EXPR = "{ l.deferred_action:type EQ 'apply' }">					<MvEVAL EXPR = "{ Module_Provision_Store_FlexComponent_Apply_Action( l.module, l.deferred_action:provide_xml, l.deferred_action:data:component, l.deferred_action:data:componentversion ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Add" PARAMETERS = "module var, provide_xml var, deferred_actions var, deferred_action_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversiondata"						VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:type"					VALUE = "component">
	<MvASSIGN NAME = "l.componentversiondata:managed"				VALUE = 0>
	<MvASSIGN NAME = "l.componentversiondata:scripts"				VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:script_count"			VALUE = 0>
	<MvASSIGN NAME = "l.componentversiondata:styles"				VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:style_count"			VALUE = 0>
	<MvASSIGN NAME = "l.componentversiondata:images"				VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:image_count"			VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'R', l.provide_xml, 'Code',					l.componentversiondata:code )							OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R', l.provide_xml, 'Name',					l.componentversiondata:name )							OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R', l.provide_xml, 'Version',				l.componentversiondata:version )						OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'ResourceGroupCode',		l.componentversiondata:resourcegroup_code )				OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_List( 'O', l.provide_xml, 'Type',					l.componentversiondata:type, 'Component,Library', 'component,library' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.componentversiondata:version"				VALUE = "{ ComponentManager_Sanitize_Version( l.componentversiondata:version ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.provide_xml, 'dependencies' ) }">
		<MvASSIGN NAME = "l.enforce_dependencies" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.provide_xml, 'dependencies', l.enforce_dependencies, 'enforce,ignore', '1,0' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.componentversiondata:type NE 'component' }">
		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Category' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Category is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'UpgradeTemplate' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Upgrade template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'InitializationTemplate' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Initialization template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'InstanceTemplate' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Instance template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Properties' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Properties are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'AdvancedProperties' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Advanced properties are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Defaults' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Defaults are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Preview' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Preview is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'DetailedPreview' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Detailed preview is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Description' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Description is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'PreviewComponentSelector' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Preview Component Selector is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'SampleDataTypes' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Sample Data Types is only supported in Flex Components' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R', l.provide_xml, 'Category',				l.componentversiondata:category )						OR
						NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'UpgradeTemplate',		l.componentversiondata:upgrade_template_source )		OR
						NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'InitializationTemplate',	l.componentversiondata:initialization_template_source )	OR
						NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'InstanceTemplate',		l.componentversiondata:instance_template_source ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:upgrade_template_source }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:upgrade_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:UpgradeTemplate[ 1 ], 'Failed to compile upgrade template: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:initialization_template_source }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:initialization_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:InitializationTemplate[ 1 ], 'Failed to compile initialization template: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:instance_template_source }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:instance_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:InstanceTemplate[ 1 ], 'Failed to compile instance template: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Properties' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Properties', l.json_properties ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_json_decode( l.json_properties, l.componentversiondata:properties ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:Properties[ 1 ], miva_json_decode_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'AdvancedProperties' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'AdvancedProperties', l.json_advanced_properties ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_json_decode( l.json_advanced_properties, l.componentversiondata:advanced_properties ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:AdvancedProperties[ 1 ], miva_json_decode_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Defaults' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Defaults', l.json_defaults ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_json_decode( l.json_defaults, l.componentversiondata:defaults ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:Defaults[ 1 ], miva_json_decode_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Preview' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Preview', l.componentversiondata:preview ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:preview AND NOT Value_Is_SVG( l.componentversiondata:preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:Preview[ 1 ], 'Invalid SVG preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'DetailedPreview' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'DetailedPreview', l.componentversiondata:detailed_preview ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:detailed_preview AND NOT Value_Is_SVG( l.componentversiondata:detailed_preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:DetailedPreview[ 1 ], 'Invalid SVG detailed preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Description' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'Description', l.componentversiondata:description ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'PreviewComponentSelector' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'PreviewComponentSelector', l.componentversiondata:preview_component_selector ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'SampleDataTypes' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'SampleDataTypes', l.json_sample_data_types ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_json_decode( l.json_sample_data_types, l.componentversiondata:sample_data_types ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:SampleDataTypes[ 1 ], miva_json_decode_last_error() ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Images' ) }">
		<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Images( l.provide_xml:tags:Images[ 1 ], l.componentversiondata ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Scripts' ) }">
		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Scripts[ 1 ]:children">
			<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

			<MvIF EXPR = "{ l.tag NE 'script' }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag \'' $ l.tag $ '\'' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.script" VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'R', l.child_xml, 'ResourceCode',	l.script:resource_code ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.child_xml, 'Source',		l.script:source ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.child_xml, 'Attributes' ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( 'L', l.script:attributes ) }">
			<MvELSE>
				<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Resource_Attributes( l.child_xml:tags:Attributes[ 1 ], l.script:attributes ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.componentversiondata:script_count" VALUE = "{ miva_array_insert_var( l.componentversiondata:scripts, l.script, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Styles' ) }">
		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Styles[ 1 ]:children">
			<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

			<MvIF EXPR = "{ l.tag NE 'style' }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag \'' $ l.tag $ '\'' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.style" VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'R', l.child_xml, 'ResourceCode',	l.style:resource_code ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.child_xml, 'Source',		l.style:source ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.child_xml, 'Attributes' ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( 'L', l.style:attributes ) }">
			<MvELSE>
				<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Resource_Attributes( l.child_xml:tags:Attributes[ 1 ], l.style:attributes ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.componentversiondata:style_count" VALUE = "{ miva_array_insert_var( l.componentversiondata:styles, l.style, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Dependencies' ) }">
		<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Dependencies( l.provide_xml:tags:Dependencies[ 1 ], 'Dependency', l.componentversiondata:depends ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Conflicts' ) }">
		<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Dependencies( l.provide_xml:tags:Conflicts[ 1 ], 'Conflict', l.componentversiondata:conflicts ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.deferred_action"								VALUE = "">
	<MvASSIGN NAME = "l.deferred_action:type"							VALUE = "add">
	<MvASSIGN NAME = "l.deferred_action:data:enforce_dependencies"		VALUE = "{ l.enforce_dependencies }">
	<MvREFERENCE NAME = "l.deferred_action:provide_xml"					VARIABLE = "l.provide_xml">
	<MvREFERENCE NAME = "l.deferred_action:data:componentversiondata"	VARIABLE = "l.componentversiondata">

	<MvASSIGN NAME = "l.deferred_action_count"							VALUE = "{ miva_array_insert_var( l.deferred_actions, l.deferred_action, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Add_Action" PARAMETERS = "module var, provide_xml var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Code( 'flex', l.componentversiondata:code, l.existing_managedproperty ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:Code[ 1 ], 'A component with code \'' $ l.existing_managedproperty:code $ '\' is already installed on this branch' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Begin( 'Flex Component \'' $ l.componentversiondata:code $ '\' version \'' $ l.componentversiondata:version $ '\' added' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Apply_Unregistered_Version( l.componentversiondata ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_End() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00249', 'Flex Component \'' $ l.componentversiondata:code $ '\' version \'' $ l.componentversiondata:version $ '\' added to branch ' $ g.Store:branch:name ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Delete" PARAMETERS = "module var, provide_xml var, deferred_actions var, deferred_action_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.provide_xml, 'dependencies' ) }">
		<MvASSIGN NAME = "l.enforce_dependencies" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.provide_xml, 'dependencies', l.enforce_dependencies, 'enforce,ignore', '1,0' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.deferred_action"							VALUE = "">
	<MvASSIGN NAME = "l.deferred_action:type"						VALUE = "delete">
	<MvASSIGN NAME = "l.deferred_action:data:code"					VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.deferred_action:data:enforce_dependencies"	VALUE = "{ l.enforce_dependencies }">
	<MvREFERENCE NAME = "l.deferred_action:provide_xml"				VARIABLE = "l.provide_xml">

	<MvASSIGN NAME = "l.deferred_action_count"						VALUE = "{ miva_array_insert_var( l.deferred_actions, l.deferred_action, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Delete_Action" PARAMETERS = "module var, provide_xml var, code, enforce_dependencies" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Component not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Remove_Installed( l.managedproperty ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00008', 'Flex Component \'' $ l.managedproperty:code $ '\' deleted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Delete_All_Unmanaged" PARAMETERS = "module var, provide_xml var, deferred_actions var, deferred_action_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.provide_xml, 'dependencies' ) }">
		<MvASSIGN NAME = "l.enforce_dependencies" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.provide_xml, 'dependencies', l.enforce_dependencies, 'enforce,ignore', '1,0' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.deferred_action"							VALUE = "">
	<MvASSIGN NAME = "l.deferred_action:type"						VALUE = "delete_all_unmanaged">
	<MvASSIGN NAME = "l.deferred_action:data:enforce_dependencies"	VALUE = "{ l.enforce_dependencies }">
	<MvREFERENCE NAME = "l.deferred_action:provide_xml"				VARIABLE = "l.provide_xml">

	<MvASSIGN NAME = "l.deferred_action_count"						VALUE = "{ miva_array_insert_var( l.deferred_actions, l.deferred_action, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Delete_All_Unmanaged_Action" PARAMETERS = "module var, provide_xml var, enforce_dependencies" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.managedproperty" ARRAY = "l.managedproperties" COUNT = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersionList_Load_Type_Current( 'flex', l.managedproperties ) }">
		<MvIF EXPR = "{ l.managedproperty:version:settings:managed }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT ComponentManager_Remove_Installed( l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00250', 'Unmanaged Flex Component \'' $ l.managedproperty:code $ '\' deleted from branch ' $ g.Store:branch:name ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Register" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversiondata"						VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:type"					VALUE = "component">
	<MvASSIGN NAME = "l.componentversiondata:managed"				VALUE = 1>
	<MvASSIGN NAME = "l.componentversiondata:scripts"				VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:script_count"			VALUE = 0>
	<MvASSIGN NAME = "l.componentversiondata:styles"				VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:style_count"			VALUE = 0>
	<MvASSIGN NAME = "l.componentversiondata:images"				VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:image_count"			VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'R', l.provide_xml, 'Code',					l.componentversiondata:code )							OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R', l.provide_xml, 'Name',					l.componentversiondata:name )							OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R', l.provide_xml, 'Version',				l.componentversiondata:version )						OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'ResourceGroupCode',		l.componentversiondata:resourcegroup_code )				OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_List( 'O', l.provide_xml, 'Type',					l.componentversiondata:type, 'Component,Library', 'component,library' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.componentversiondata:version"				VALUE = "{ ComponentManager_Sanitize_Version( l.componentversiondata:version ) }">
	<MvASSIGN NAME = "l.componentversiondata:component_exists"		VALUE = 0>

	<MvIF EXPR = "{ FlexComponent_Load_Code( l.componentversiondata:code, l.componentversiondata:component ) }">
		<MvASSIGN NAME = "l.componentversiondata:component_exists"	VALUE = 1>

		<MvIF EXPR = "{ FlexComponentVersion_Load_Version( l.componentversiondata:component:id, l.componentversiondata:version, l.existing_componentversion ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:Code[ 1 ], 'A Component with the specified version already exists' ) }">	
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.componentversiondata:type NE 'component' }">
		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Category' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Category is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'UpgradeTemplate' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Upgrade template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'InitializationTemplate' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Initialization template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'InstanceTemplate' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Instance template is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Properties' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Properties are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'AdvancedProperties' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Advanced properties are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Defaults' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Defaults are only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Preview' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Preview is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'DetailedPreview' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Detailed preview is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Description' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Description is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'PreviewComponentSelector' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Preview Component Selector is only supported in Flex Components' ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'SampleDataTypes' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Sample Data Types is only supported in Flex Components' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R', l.provide_xml, 'Category',				l.componentversiondata:category )						OR
						NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'UpgradeTemplate',		l.componentversiondata:upgrade_template_source )		OR
						NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'InitializationTemplate',	l.componentversiondata:initialization_template_source )	OR
						NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'InstanceTemplate',		l.componentversiondata:instance_template_source ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:upgrade_template_source }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:upgrade_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:UpgradeTemplate[ 1 ], 'Failed to compile upgrade template: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:initialization_template_source }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:initialization_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:InitializationTemplate[ 1 ], 'Failed to compile initialization template: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:instance_template_source }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:instance_template_source ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:InstanceTemplate[ 1 ], 'Failed to compile instance template: ' $ g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Properties' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Properties', l.json_properties ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_json_decode( l.json_properties, l.componentversiondata:properties ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:Properties[ 1 ], miva_json_decode_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'AdvancedProperties' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'AdvancedProperties', l.json_advanced_properties ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_json_decode( l.json_advanced_properties, l.componentversiondata:advanced_properties ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:AdvancedProperties[ 1 ], miva_json_decode_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Defaults' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Defaults', l.json_defaults ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_json_decode( l.json_defaults, l.componentversiondata:defaults ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:Defaults[ 1 ], miva_json_decode_last_error() ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Preview' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Preview', l.componentversiondata:preview ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT Value_Is_SVG( l.componentversiondata:preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:Preview[ 1 ], 'Invalid SVG preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'DetailedPreview' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'DetailedPreview', l.componentversiondata:detailed_preview ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT Value_Is_SVG( l.componentversiondata:detailed_preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:DetailedPreview[ 1 ], 'Invalid SVG detailed preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Description' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'Description', l.componentversiondata:description ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'PreviewComponentSelector' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'PreviewComponentSelector', l.componentversiondata:preview_component_selector ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'SampleDataTypes' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'SampleDataTypes', l.json_sample_data_types ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT miva_json_decode( l.json_sample_data_types, l.componentversiondata:sample_data_types ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml:tags:SampleDataTypes[ 1 ], miva_json_decode_last_error() ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Images' ) }">
		<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Images( l.provide_xml:tags:Images[ 1 ], l.componentversiondata ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Scripts' ) }">
		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Scripts[ 1 ]:children">
			<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

			<MvIF EXPR = "{ l.tag NE 'script' }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag \'' $ l.tag $ '\'' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.script" VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'R', l.child_xml, 'ResourceCode',	l.script:resource_code ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.child_xml, 'Source',		l.script:source ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.child_xml, 'Attributes' ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( 'Z', l.script:attributes ) }">
			<MvELSE>
				<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Resource_Attributes( l.child_xml:tags:Attributes[ 1 ], l.script:attributes ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.componentversiondata:script_count" VALUE = "{ miva_array_insert_var( l.componentversiondata:scripts, l.script, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Styles' ) }">
		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:Styles[ 1 ]:children">
			<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

			<MvIF EXPR = "{ l.tag NE 'style' }">
				<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag \'' $ l.tag $ '\'' ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.style" VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'R', l.child_xml, 'ResourceCode',	l.style:resource_code ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.child_xml, 'Source',		l.style:source ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.child_xml, 'Attributes' ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( 'Z', l.style:attributes ) }">
			<MvELSE>
				<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Resource_Attributes( l.child_xml:tags:Attributes[ 1 ], l.style:attributes ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.componentversiondata:style_count" VALUE = "{ miva_array_insert_var( l.componentversiondata:styles, l.style, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Dependencies' ) }">
		<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Dependencies( l.provide_xml:tags:Dependencies[ 1 ], 'Dependency', l.componentversiondata:depends ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Conflicts' ) }">
		<MvIF EXPR = "{ NOT Module_Provision_Store_FlexComponent_Dependencies( l.provide_xml:tags:Conflicts[ 1 ], 'Conflict', l.componentversiondata:conflicts ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Register_Version( l.componentversiondata ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00161', 'Flex Component \'' $ l.componentversiondata:code $ '\' version \'' $ l.componentversiondata:version $ '\' registered' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Deregister" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT FlexComponent_Load_Code( l.code, l.component ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Component not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.provide_xml, 'version' ) }">
		<MvIF EXPR = "{ NOT ComponentManager_Deregister_Component( l.component ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00162', 'Flex Component \'' $ l.component:code $ '\' deregistered' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'version', l.version ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.version" VALUE = "{ ComponentManager_Sanitize_Version( l.version ) }">

		<MvIF EXPR = "{ NOT FlexComponentVersion_Load_Version( l.component:id, l.version, l.componentversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Component version not found' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.componentversion_count" VALUE = "{ FlexComponentVersionList_Load_Component( l.component:id, l.null ) }">

		<MvIF EXPR = "{ l.componentversion_count EQ 1 }">
			<MvIF EXPR = "{ NOT ComponentManager_Deregister_Component( l.component ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT ComponentManager_Deregister_Version( l.componentversion ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
			</MvIF>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00163', 'Flex Component \'' $ l.code $ '\' version \'' $ l.version $ '\' deregistered' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Apply" PARAMETERS = "module var, provide_xml var, deferred_actions var, deferred_action_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'code',		l.code ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'version',	l.version ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.version" VALUE = "{ ComponentManager_Sanitize_Version( l.version ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.provide_xml, 'dependencies' ) }">
		<MvASSIGN NAME = "l.enforce_dependencies" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.provide_xml, 'dependencies', l.enforce_dependencies, 'enforce,ignore', '1,0' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT FlexComponent_Load_Code( l.code, l.component ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Component not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT FlexComponentVersion_Load_Version( l.component:id, l.version, l.componentversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Flex Component version not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.deferred_action"							VALUE = "">
	<MvASSIGN NAME = "l.deferred_action:type"						VALUE = "apply">
	<MvASSIGN NAME = "l.deferred_action:data:enforce_dependencies"	VALUE = "{ l.enforce_dependencies }">
	<MvREFERENCE NAME = "l.deferred_action:provide_xml"				VARIABLE = "l.provide_xml">
	<MvREFERENCE NAME = "l.deferred_action:data:component"			VARIABLE = "l.component">
	<MvREFERENCE NAME = "l.deferred_action:data:componentversion"	VARIABLE = "l.componentversion">

	<MvASSIGN NAME = "l.deferred_action:data:depends"				VALUE = "">
	<MvASSIGN NAME = "l.deferred_action:data:conflicts"				VALUE = "">

	<MvFOREACH ITERATOR = "l.componentversiondependency" ARRAY = "l.componentversiondependencies" COUNT = "{ FlexComponentVersionDependencyList_Load_Version_Depends( l.componentversion:id, l.componentversiondependencies ) }">
		<MvIF EXPR = "{ l.componentversiondependency:op EQ 'GE' }">			<MvASSIGN NAME = "l.comparison" VALUE = ">=">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'LE' }">		<MvASSIGN NAME = "l.comparison" VALUE = "<=">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'GT' }">		<MvASSIGN NAME = "l.comparison" VALUE = ">">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'LT' }">		<MvASSIGN NAME = "l.comparison" VALUE = "<">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'NE' }">		<MvASSIGN NAME = "l.comparison" VALUE = "!=">
		<MvELSE>															<MvASSIGN NAME = "l.comparison" VALUE = "=">
		</MvIF>

		<MvASSIGNARRAY NAME = "l.deferred_action:data:depends" VALUE = "{ l.comparison $ l.componentversiondependency:version }">
			<MvMEMBER NAME = "{ l.componentversiondependency:code }">
		</MvASSIGNARRAY>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.componentversiondependency" ARRAY = "l.componentversiondependencies" COUNT = "{ FlexComponentVersionDependencyList_Load_Version_Conflicts( l.componentversion:id, l.componentversiondependencies ) }">
		<MvIF EXPR = "{ l.componentversiondependency:op EQ 'GE' }">			<MvASSIGN NAME = "l.comparison" VALUE = ">=">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'LE' }">		<MvASSIGN NAME = "l.comparison" VALUE = "<=">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'GT' }">		<MvASSIGN NAME = "l.comparison" VALUE = ">">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'LT' }">		<MvASSIGN NAME = "l.comparison" VALUE = "<">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'NE' }">		<MvASSIGN NAME = "l.comparison" VALUE = "!=">
		<MvELSE>															<MvASSIGN NAME = "l.comparison" VALUE = "=">
		</MvIF>

		<MvASSIGNARRAY NAME = "l.deferred_action:data:conflicts" VALUE = "{ l.comparison $ l.componentversiondependency:version }">
			<MvMEMBER NAME = "{ l.componentversiondependency:code }">
		</MvASSIGNARRAY>
	</MvFOREACH>

	<MvASSIGN NAME = "l.deferred_action_count" VALUE = "{ miva_array_insert_var( l.deferred_actions, l.deferred_action, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Apply_Action" PARAMETERS = "module var, provide_xml var, component var, componentversion var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Branch_Load_ID( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID(), l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Begin_Branch( l.branch:id, 'Flex Component \'' $ l.component:code $ '\' version \'' $ l.componentversion:version $ '\' applied' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Apply_Version( l.branch, l.component, l.componentversion ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_End() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00164', 'Flex Component \'' $ l.component:code $ '\' version \'' $ l.componentversion:version $ '\' applied to branch ' $ l.branch:name ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Images" PARAMETERS = "provide_xml var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag NE 'image' }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag \'' $ l.tag $ '\'' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.image" VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'filepath', l.image:filepath ) }"> 
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.image:filepath }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'File path cannot be blank' ) }">
		<MvELSEIF EXPR = "{ ( ':' IN l.image:filepath ) OR
							( ( '/' IN l.image:filepath ) EQ 1 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Image filepaths must be local and relative to the Base Directory for Graphics' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'encoding' ) }">
			<MvASSIGN NAME = "l.image:create" VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List(	l.child_xml, 'encoding', l.null, 'base64', 'base64' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.image:create" VALUE = 1>
			<MvASSIGN NAME = "l.image:source" VALUE = "{ crypto_base64_decode( trim( l.child_xml:value ) ) }">
		</MvIF>

		<MvASSIGN NAME = "l.componentversiondata:image_count" VALUE = "{ miva_array_insert_var( l.componentversiondata:images, l.image, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Dependencies" PARAMETERS = "provide_xml var, tag_name, dependencies var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.tag_name"		VALUE = "{ tolower( l.tag_name ) }">
	<MvASSIGN NAME = "l.dependencies"	VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ l.tag_name }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'code',		l.code )														OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.child_xml, 'comparison',	l.comparison, 'EQ, NE, GE, LE, GT, LT', '=, !=, >=, <=, >, <' )	OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'version',		l.version ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.version" VALUE = "{ ComponentManager_Sanitize_Version( l.version ) }">

			<MvASSIGNARRAY NAME = "l.dependencies" VALUE = "{ l.comparison $ l.version }">
				<MvMEMBER NAME = "{ l.code }">
			</MvASSIGNARRAY>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_FlexComponent_Resource_Attributes" PARAMETERS = "provide_xml var, attributes var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attributes" VALUE = "">

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'attribute' }">
			<MvASSIGN NAME = "l.attribute" VALUE = "">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R', l.child_xml, 'Name',		l.attribute:name ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.child_xml, 'Value',	l.attribute:value ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.attribute_count" VALUE = "{ miva_array_insert_var( l.attributes, l.attribute, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Module JSON Upload Feature (json_upload)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON_Upload_ValidateFileUpload" PARAMETERS = "module var, field, filename, content_type" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'FlexComponent_Upload' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_FlexComponent_Upload_ValidateFileUpload( l.module, l.field, l.filename, l.content_type ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexRegisteredComponentVersion_Upload' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_FlexRegisteredComponentVersion_Upload_ValidateFileUpload( l.module, l.field, l.filename, l.content_type ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = -1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_JSON_Upload_ProcessFileUpload" PARAMETERS = "module var, field, filename, status, tempfile, content_type, size" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'FlexComponent_Upload' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_FlexComponent_Upload_ProcessFileUpload( l.module, l.field, l.filename, l.status, l.tempfile, l.content_type, l.size ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexRegisteredComponentVersion_Upload' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_FlexRegisteredComponentVersion_Upload_ProcessFileUpload( l.module, l.field, l.filename, l.status, l.tempfile, l.content_type, l.size ) }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Module JSON Feature (json)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'FlexComponentList_Load_Query' }">					<MvFUNCTIONRETURN VALUE = "{ JSON_FlexComponentList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexComponentList_Delete' }">					<MvFUNCTIONRETURN VALUE = "{ JSON_FlexComponentList_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexComponent_Upload' }">						<MvFUNCTIONRETURN VALUE = "{ JSON_FlexComponent_Upload( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexComponent_Download' }">					<MvFUNCTIONRETURN VALUE = "{ JSON_FlexComponent_Download( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexComponentList_Apply' }">					<MvFUNCTIONRETURN VALUE = "{ JSON_FlexComponentList_Apply( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexRegisteredComponentList_Load_Query' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_FlexRegisteredComponentList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexRegisteredComponent_Delete' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_FlexRegisteredComponent_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexRegisteredComponentVersion_Delete' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_FlexRegisteredComponentVersion_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexRegisteredComponentVersion_Upload' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_FlexRegisteredComponentVersion_Upload( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexRegisteredComponentVersion_Download' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_FlexRegisteredComponentVersion_Download( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexItemList_Load_Query' }">					<MvFUNCTIONRETURN VALUE = "{ JSON_FlexItemList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexItem_Insert' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_FlexItem_Insert( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexItem_Update' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_FlexItem_Update( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'FlexItem_Delete' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_FlexItem_Delete( l.module ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Load" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_FlexComponent', l.component_code ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.component_code, l.managedproperty ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00020', 'Flex Component not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'FlexComponent_Code', l.component_code ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.component_code, l.managedproperty ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00021', 'Flex Component not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00022', 'Unable to load page: One of Edit_FlexComponent, or FlexComponent_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponentList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'code',		'l.managedproperty:code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'name',		'l.managedproperty:version:settings:name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'type',		'l.managedproperty:version:settings:type' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'version',	'l.managedproperty:version:settings:version' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o',		'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o',		'Sort',		l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o:nonneg',	'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o',		'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.managedproperty_count" VALUE = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersionList_Load_Type_Current( 'flex', l.managedproperties ) }">

	<MvIF EXPR = "{ l.managedproperty_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.managedproperty" ARRAY = "l.managedproperties" COUNT = "{ l.managedproperty_count }">
		<MvIF EXPR = "{ ISNULL l.managedproperty:version:settings:type }">
			<MvASSIGN NAME = "l.managedproperty:version:settings:type" VALUE = "component">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.search_expression"	VALUE = "1 EQ 1">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_MivaScript_Callback( l.search_expression, l.filter, l.available_filters, g.Module_Root $ l.module:module, 'JSON_FlexComponentList_Load_Query_Filter', '', l.data ) }">

	<MvIF EXPR = "{ l.data:ondemandcolumns:dependency_errors }">
		<MvASSIGN NAME = "l.dependency_errors_lookup" VALUE = "">

		<MvFOREACH ITERATOR = "l.managedproperty" ARRAY = "l.managedproperties" COUNT = "{ l.managedproperty_count }">
			<MvREFERENCEARRAY NAME = "l.dependency_errors" VARIABLE = "l.dependency_errors_lookup">
				<MvMEMBER NAME = "{ l.managedproperty:code }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.depends_count"					VALUE = "{ ComponentManager_Convert_Dependencies( l.managedproperty:version:settings:depends, l.depends ) }">
			<MvASSIGN NAME = "l.conflicts_count"				VALUE = "{ ComponentManager_Convert_Dependencies( l.managedproperty:version:settings:conflicts, l.conflicts ) }">

			<MvFOREACH ITERATOR = "l.dependency" ARRAY = "l.depends" COUNT = "{ l.depends_count }">
				<MvASSIGN NAME = "l.dependency_found"			VALUE = 0>

				<MvFOREACH ITERATOR = "l.comparison_managedproperty" ARRAY = "l.managedproperties" COUNT = "{ l.managedproperty_count }">
					<MvIF EXPR = "{ ComponentManager_Validate_Dependency( l.dependency, l.comparison_managedproperty:code, l.comparison_managedproperty:version:settings:version ) }">
						<MvASSIGN NAME = "l.dependency_found"	VALUE = 1>
						<MvFOREACHSTOP>
					</MvIF>
				</MvFOREACH>

				<MvIF EXPR = "{ NOT l.dependency_found }">
					<MvASSIGNARRAY NAME = "l.dependency_errors" VALUE = "{ l.dependency:display_version }">
						<MvMEMBER NAME = "depends">
						<MvMEMBER NAME = "{ l.dependency:code }">
					</MvASSIGNARRAY>
				</MvIF>
			</MvFOREACH>

			<MvFOREACH ITERATOR = "l.conflict" ARRAY = "l.conflicts" COUNT = "{ l.conflicts_count }">
				<MvFOREACH ITERATOR = "l.comparison_managedproperty" ARRAY = "l.managedproperties" COUNT = "{ l.managedproperty_count }">
					<MvIF EXPR = "{ ComponentManager_Validate_Dependency( l.conflict, l.comparison_managedproperty:code, l.comparison_managedproperty:version:settings:version ) }">
						<MvASSIGNARRAY NAME = "l.dependency_errors" VALUE = "{ l.conflict:display_version }">
							<MvMEMBER NAME = "conflicts">
							<MvMEMBER NAME = "{ l.conflict:code }">
						</MvASSIGNARRAY>
					</MvIF>
				</MvFOREACH>
			</MvFOREACH>
		</MvFOREACH>
	</MvIF>

	<MvASSIGN NAME = "l.total_count"		VALUE = "{ miva_array_filter_ref( l.managedproperties, 1, l.managedproperty, l.search_expression, l.filtered_managedproperties ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_sort( l.filtered_managedproperties, 'FlexComponentList_Sort_Callback', l.sort ) }">

	<MvASSIGN NAME = "l.output_count"		VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.managedproperty" ARRAY = "l.filtered_managedproperties" FIRST = "{ l.offset + 1 }" LAST = "{ l.total_count }">
				<MvIF EXPR = "{ ( l.output_count LT l.count ) OR ( l.count EQ 0 ) }">
					<MvASSIGN NAME = "l.sanitized_version" VALUE = "{ ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) }">

					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
						"code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:code ) }">",
						"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:name ) }">",
						"type":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:type ) }">",
						"version":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.sanitized_version ) }">",
						"managed":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.managedproperty:version:settings:managed ) }">

						<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:resourcegroup_code }">
							, "resourcegroup_code": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:resourcegroup_code ) }">"
						</MvIF>

						<MvIF EXPR = "{ ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
							, "category": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:category ) }">"

							<MvIF EXPR = "{ ISNULL l.managedproperty:version:settings:preview }">
								, "preview": ""
							<MvELSE>
								, "preview": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( 'data:image/svg+xml;base64,' $ crypto_base64_encode( l.managedproperty:version:settings:preview ) ) }">"
							</MvIF>

							<MvIF EXPR = "{ ISNULL l.managedproperty:version:settings:detailed_preview }">
								, "detailed_preview": ""
							<MvELSE>
								, "detailed_preview": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( 'data:image/svg+xml;base64,' $ crypto_base64_encode( l.managedproperty:version:settings:detailed_preview ) ) }">"
							</MvIF>

							<MvIF EXPR = "{ l.data:ondemandcolumns:description }">
								<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:description AND [ g.Module_Feature_PGB_UT ].PageBuilder_CMark_Supported() }">	<MvASSIGN NAME = "l.description" VALUE = "{ cmark_markdown_to_html( l.managedproperty:version:settings:description, 'safe,hardbreaks' ) }">
								<MvELSE>																																	<MvASSIGN NAME = "l.description" VALUE = "">
								</MvIF>

								, "description": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.description ) }">"
							</MvIF>

							<MvIF EXPR = "{ ISNULL l.managedproperty:version:settings:preview_component_selector }">
								, "preview_component_selector": ""
							<MvELSE>
								, "preview_component_selector": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:preview_component_selector ) }">"
							</MvIF>

							<MvIF EXPR = "{ l.data:ondemandcolumns:upgrade_template }">
								<MvIF EXPR = "{ NOT l.managedproperty:version:settings:upgrade_template_disabled AND NOT ISNULL l.managedproperty:version:settings:upgrade_template_filename }">
									<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.managedproperty:version:settings:upgrade_template_filename, l.templateversion_upgrade ) }">
										, "upgrade_template": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.templateversion_upgrade:source ) }">"
									</MvIF>
								</MvIF>
							</MvIF>

							<MvIF EXPR = "{ l.data:ondemandcolumns:initialization_template }">
								<MvIF EXPR = "{ NOT l.managedproperty:version:settings:initialization_template_disabled AND NOT ISNULL l.managedproperty:version:settings:initialization_template_filename }">
									<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.managedproperty:version:settings:initialization_template_filename, l.templateversion_initialization ) }">
										, "initialization_template": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.templateversion_initialization:source ) }">"
									</MvIF>
								</MvIF>
							</MvIF>

							<MvIF EXPR = "{ l.data:ondemandcolumns:instance_template }">
								<MvIF EXPR = "{ NOT l.managedproperty:version:settings:instance_template_disabled }">
									<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:instance_template_filename }">
										<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.managedproperty:version:settings:instance_template_filename, l.templateversion_instance ) }">
											, "instance_template": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.templateversion_instance:source ) }">"
										</MvIF>
									<MvELSEIF EXPR = "{ l.managedproperty:templ_id }">
										<MvCOMMENT>
										|
										| Legacy Instance Template
										|
										</MvCOMMENT>

										<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.managedproperty:templ_id, l.managedtemplate ) }">
											, "instance_template": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.templateversion_instance:source ) }">"
										</MvIF>
									</MvIF>
								</MvIF>
							</MvIF>

							<MvIF EXPR = "{ l.data:ondemandcolumns:properties }">
								<MvIF EXPR = "{ miva_variable_type( l.managedproperty:version:settings:properties ) NE 'ARRAY' }">
									, "properties": []
								<MvELSE>
									, "properties": <MvEVAL EXPR = "{ miva_json_encode( l.managedproperty:version:settings:properties, 'pretty' ) }">
								</MvIF>
							</MvIF>

							<MvIF EXPR = "{ l.data:ondemandcolumns:advanced_properties }">
								<MvIF EXPR = "{ miva_variable_type( l.managedproperty:version:settings:advanced_properties ) NE 'ARRAY' }">
									, "advanced_properties": []
								<MvELSE>
									, "advanced_properties": <MvEVAL EXPR = "{ miva_json_encode( l.managedproperty:version:settings:advanced_properties, 'pretty' ) }">
								</MvIF>
							</MvIF>

							<MvIF EXPR = "{ l.data:ondemandcolumns:defaults }">
								<MvIF EXPR = "{ miva_variable_type( l.managedproperty:version:settings:defaults ) NE 'STRUCTURE' }">
									, "defaults": {}
								<MvELSE>
									, "defaults": <MvEVAL EXPR = "{ miva_json_encode( l.managedproperty:version:settings:defaults, 'pretty' ) }">
								</MvIF>
							</MvIF>

							<MvIF EXPR = "{ l.data:ondemandcolumns:sample_data_types }">
								<MvIF EXPR = "{ miva_variable_type( l.managedproperty:version:settings:sample_data_types ) NE 'ARRAY' }">
									, "sample_data_types": []
								<MvELSE>
									, "sample_data_types": <MvEVAL EXPR = "{ miva_json_encode( l.managedproperty:version:settings:sample_data_types, 'pretty' ) }">
								</MvIF>
							</MvIF>
						</MvIF>

						<MvIF EXPR = "{ l.data:ondemandcolumns:images }">
							<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:images }">
								, "images":
								[
									<MvFOREACH INDEX = "l.pos" ITERATOR = "l.image" ARRAY = "l.managedproperty:version:settings:images">
										<MvIF EXPR = "{ l.pos GT 1 }">
											,
										</MvIF>

										"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.image ) }">"
									</MvFOREACH>
								]
							</MvIF>
						</MvIF>

						<MvIF EXPR = "{ l.data:ondemandcolumns:dependencies }">
							<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:depends }">
								, "depends":
								{
									<MvFOREACH INDEX = "l.pos" ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ miva_struct_members( l.managedproperty:version:settings:depends, l.dependency_names ) }">
										<MvREFERENCEARRAY NAME = "l.dependency_value" VARIABLE = "l.managedproperty:version:settings:depends">
											<MvMEMBER NAME = "{ l.dependency_name }">
										</MvREFERENCEARRAY>

										<MvIF EXPR = "{ l.pos GT 1 }">
											,
										</MvIF>

										"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_value ) }">"
									</MvFOREACH>
								}
							</MvIF>

							<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:conflicts }">
								, "conflicts":
								{
									<MvFOREACH INDEX = "l.pos" ITERATOR = "l.conflict_name" ARRAY = "l.conflict_names" COUNT = "{ miva_struct_members( l.managedproperty:version:settings:conflicts, l.conflict_names ) }">
										<MvREFERENCEARRAY NAME = "l.conflict_value" VARIABLE = "l.managedproperty:version:settings:conflicts">
											<MvMEMBER NAME = "{ l.conflict_name }">
										</MvREFERENCEARRAY>

										<MvIF EXPR = "{ l.pos GT 1 }">
											,
										</MvIF>

										"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_value ) }">"
									</MvFOREACH>
								}
							</MvIF>
						</MvIF>

						<MvIF EXPR = "{ l.data:ondemandcolumns:dependency_errors }">
							<MvREFERENCEARRAY NAME = "l.dependency_errors" VARIABLE = "l.dependency_errors_lookup">
								<MvMEMBER NAME = "{ l.managedproperty:code }">
							</MvREFERENCEARRAY>

							<MvIF EXPR = "{ NOT ISNULL l.dependency_errors }">
								, "dependency_errors":
								{
									"depends":
									{
										<MvFOREACH INDEX = "l.pos" ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ miva_struct_members( l.dependency_errors:depends, l.dependency_names ) }">
											<MvREFERENCEARRAY NAME = "l.dependency_value" VARIABLE = "l.dependency_errors:depends">
												<MvMEMBER NAME = "{ l.dependency_name }">
											</MvREFERENCEARRAY>

											<MvIF EXPR = "{ l.pos GT 1 }">
												,
											</MvIF>

											"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_value ) }">"
										</MvFOREACH>
									},
									"conflicts":
									{
										<MvFOREACH INDEX = "l.pos" ITERATOR = "l.conflict_name" ARRAY = "l.conflict_names" COUNT = "{ miva_struct_members( l.dependency_errors:conflicts, l.conflict_names ) }">
											<MvREFERENCEARRAY NAME = "l.conflict_value" VARIABLE = "l.dependency_errors:conflicts">
												<MvMEMBER NAME = "{ l.conflict_name }">
											</MvREFERENCEARRAY>

											<MvIF EXPR = "{ l.pos GT 1 }">
												,
											</MvIF>

											"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_value ) }">"
										</MvFOREACH>
									}
								}
							</MvIF>
						</MvIF>

						<MvIF EXPR = "{ l.data:ondemandcolumns:installable_versions }">
							, "installable_versions":
							[
								<MvIF EXPR = "{ FlexComponent_Load_Code( l.managedproperty:code, l.component ) }">
									<MvFOREACH INDEX = "l.pos" ITERATOR = "l.componentversion" ARRAY = "l.componentversions" COUNT = "{ FlexComponentVersionList_Load_Component( l.component:id, l.componentversions ) }">
										<MvIF EXPR = "{ l.pos GT 1 }">
											,
										</MvIF>

										"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.componentversion:version ) }">"
									</MvFOREACH>
								</MvIF>
							]
						</MvIF>
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvIF>
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponentList_Load_Query_Filter" PARAMETERS = "expression var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data:ondemandcolumns" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponentList_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvASSIGN NAME = "l.processed" 				VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 			VALUE = 0>
	<MvASSIGN NAME = "l.errors" 				VALUE = "">
	<MvASSIGN NAME = "l.start_time" 			VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.ignore_dependencies"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text_Array(	'R', 'Component_Codes',		l.codes, l.code_count ) OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(		'O', 'Ignore_Dependencies',	l.ignore_dependencies ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.ignore_dependencies }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Branch_Load_ID( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID(), l.branch ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ ComponentState_Initialize( l.branch:id, l.lookup_depends, l.lookup_conflicts, l.componentstates, l.componentstate_count ) }">

		<MvFOREACH ITERATOR = "l.code" ARRAY = "l.codes" COUNT = "{ l.code_count }">
			<MvEVAL EXPR = "{ ComponentState_Append_Action_Delete( l.code, 1, l.componentstates, l.componentstate_count ) }">
		</MvFOREACH>

		<MvIF EXPR = "{ NOT ComponentState_Validate( l.lookup_depends, l.lookup_conflicts, l.componentstates, l.componentstate_count, l.combined_dependency_errors, l.combined_dependency_error_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_ComopnentState_Response_Errors( 'MER-CMP-MV-FLEX-00306', 'Failed to delete components', l.combined_dependency_errors, l.combined_dependency_error_count ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.code" ARRAY = "l.codes" COUNT = "{ l.code_count }">
		<MvASSIGN NAME = "l.processed"	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.code, l.managedproperty ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT ComponentManager_Remove_Installed( l.managedproperty ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.managedproperty:code, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00009', 'Flex Component \'' $ l.managedproperty:code $ '\' deleted' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload_ValidateFileUpload" PARAMETERS = "module var, field, filename, content_type" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN VALUE = -1> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN VALUE = -1> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = -1> </MvIF>

	<MvCOMMENT>
	|
	| If more than one uploaded file is present in a single call, just ignore it.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( NOT ISNULL g.Filename ) OR ( NOT ISNULL g.File_MD5 ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload_ProcessFileUpload" PARAMETERS = "module var, field, filename, status, tempfile, content_type, size" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_ProcessFileUpload( 'Flex Component Package', l.field, l.filename, l.status, l.tempfile, l.content_type, l.size ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_ValidateUploadedFile( l.uploaded_tempfile ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.result"		VALUE = "{ JSON_FlexComponent_Upload_LowLevel( l.uploaded_tempfile, l.extraction_dir ) }">
	<MvASSIGN NAME = "l.null"		VALUE = "{ fdelete( l.uploaded_tempfile ) }">

	<MvIF EXPR = "{ NOT ISNULL l.extraction_dir }">
		<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Library_Utilities ].Directory_Delete( l.extraction_dir, 'data' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload_LowLevel" PARAMETERS = "uploaded_tempfile, extraction_dir var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.ignore_dependencies"	VALUE = 0>
	<MvASSIGN NAME = "l.overwrite_registered"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'O', 'Ignore_Dependencies',	l.ignore_dependencies ) OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean( 'O', 'Overwrite_Registered',	l.overwrite_registered ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvCOMMENT>
	|
	| Extract
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( '.tar.bz2' EIN g.Filename ) NE len_var( g.Filename ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00023', 'Flex Component uploaded with an invalid extension for file \'' $ g.Filename $ '\' at path \'' $ l.uploaded_tempfile $ '\'' ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00024', '\'' $ [ g.Module_Library_Utilities ].Extension_NoDot( g.Filename ) $ '\' is not a valid Flex Component package extension' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.extraction_dir" VALUE = "{ MakeSessionID() }">

	<MvFOR INDEX = "l.pos" COUNT = 100>
		<MvIF EXPR = "{ NOT fexists( l.extraction_dir ) }">
			<MvFORSTOP>
		</MvIF>

		<MvASSIGN NAME = "l.extraction_dir" VALUE = "{ MakeSessionID() }">
	</MvFOR>

	<MvIF EXPR = "{ l.pos GT 100 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00025', 'Unable to generate unique extraction directory after 100 attempts' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT tar_extract( l.uploaded_tempfile, 'data', l.extraction_dir, 'data' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00026', 'Failed to unpack Flex Component package: ' $ tar_last_error() ) }">
	</MvIF>

	<MvASSIGN NAME = "l.flex_file" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, 'flex.json' ) }">

	<MvIF EXPR = "{ file_read( l.flex_file, 'data', l.json_package_data ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00027', 'Flex Component package does not contain required file.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT miva_json_decode( l.json_package_data, l.package_data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00028', 'Unable to parse flex.json: ' $ miva_json_decode_last_error() ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Build
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.componentversiondata" VALUE = "">

	<MvIF EXPR = "{ NOT JSON_FlexComponent_Upload_Build_Core( l.extraction_dir, l.package_data, l.componentversiondata ) }">			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Upload_Build_Images( l.extraction_dir, l.package_data, l.componentversiondata ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Upload_Build_Templates( l.extraction_dir, l.package_data, l.componentversiondata ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Upload_Build_Resources( l.extraction_dir, l.package_data, l.componentversiondata ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Validate Dependencies
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT l.ignore_dependencies }">
		<MvEVAL EXPR = "{ ComponentState_Initialize( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID(), l.lookup_depends, l.lookup_conflicts, l.componentstates, l.componentstate_count ) }">
		<MvEVAL EXPR = "{ ComponentState_Append_Action_Add( l.componentversiondata, 1, 0, l.componentstates, l.componentstate_count ) }">

		<MvIF EXPR = "{ NOT ComponentState_Validate( l.lookup_depends, l.lookup_conflicts, l.componentstates, l.componentstate_count, l.combined_dependency_errors, l.combined_dependency_error_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_ComopnentState_Response_Errors( 'MER-CMP-MV-FLEX-00307', 'Failed to upload component', l.combined_dependency_errors, l.combined_dependency_error_count ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Install
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.componentversiondata:managed }">
		<MvIF EXPR = "{ NOT JSON_FlexComponent_Upload_Install_Managed( l.overwrite_registered, l.componentversiondata ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT JSON_FlexComponent_Upload_Install_Unmanaged( l.componentversiondata ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload_Build_Core" PARAMETERS = "extraction_dir var, package_data var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.package_data:code"										VALUE = "{ trim( l.package_data:code ) }">
	<MvASSIGN NAME = "l.package_data:name"										VALUE = "{ trim( l.package_data:name ) }">
	<MvASSIGN NAME = "l.package_data:type"										VALUE = "{ trim( l.package_data:type ) }">
	<MvASSIGN NAME = "l.package_data:version"									VALUE = "{ ComponentManager_Sanitize_Version( l.package_data:version ) }">
	<MvASSIGN NAME = "l.package_data:preview"									VALUE = "{ trim( l.package_data:preview ) }">
	<MvASSIGN NAME = "l.package_data:detailed_preview"							VALUE = "{ trim( l.package_data:detailed_preview ) }">
	<MvASSIGN NAME = "l.package_data:description"								VALUE = "{ trim( l.package_data:description ) }">
	<MvASSIGN NAME = "l.package_data:preview_component_selector"				VALUE = "{ trim( l.package_data:preview_component_selector ) }">
	<MvASSIGN NAME = "l.package_data:category"									VALUE = "{ trim( l.package_data:category ) }">
	<MvASSIGN NAME = "l.package_data:resourcegroup_code"						VALUE = "{ trim( l.package_data:resourcegroup_code ) }">
	<MvASSIGN NAME = "l.package_data:managed"									VALUE = "{ [ g.Module_Admin ].Trim_Boolean( l.package_data:managed ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.package_data:code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00282', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.package_data:name }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00283', 'Invalid name' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.package_data:type }">
		<MvASSIGN NAME = "l.package_data:type"									VALUE = "component">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Value_In_List( l.package_data:type, 'component,library' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00284', 'Invalid type' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.package_data:version }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00285', 'Invalid version' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentversiondata:code"								VALUE = "{ l.package_data:code }">
	<MvASSIGN NAME = "l.componentversiondata:name"								VALUE = "{ l.package_data:name }">
	<MvASSIGN NAME = "l.componentversiondata:type"								VALUE = "{ l.package_data:type }">
	<MvASSIGN NAME = "l.componentversiondata:version"							VALUE = "{ l.package_data:version }">
	<MvASSIGN NAME = "l.componentversiondata:resourcegroup_code"				VALUE = "{ l.package_data:resourcegroup_code }">
	<MvASSIGN NAME = "l.componentversiondata:managed"							VALUE = "{ l.package_data:managed }">

	<MvIF EXPR = "{ l.componentversiondata:type EQ 'component' }">
		<MvASSIGN NAME = "l.componentversiondata:category"						VALUE = "{ l.package_data:category }">
		<MvASSIGN NAME = "l.componentversiondata:preview_component_selector"	VALUE = "{ l.package_data:preview_component_selector }">
		<MvASSIGN NAME = "l.componentversiondata:sample_data_types"				VALUE = "{ l.package_data:sample_data_types }">
		<MvASSIGN NAME = "l.componentversiondata:properties"					VALUE = "{ l.package_data:properties }">
		<MvASSIGN NAME = "l.componentversiondata:advanced_properties"			VALUE = "{ l.package_data:advanced_properties }">
		<MvASSIGN NAME = "l.componentversiondata:defaults"						VALUE = "{ l.package_data:defaults }">
		<MvASSIGN NAME = "l.componentversiondata:description"					VALUE = "{ l.package_data:description }">

		<MvIF EXPR = "{ NOT ISNULL l.package_data:preview }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Extension_ToLowerCase( l.package_data:preview, 'svg', l.svg_ext ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00078', 'The preview SVG extension \'.' $ l.svg_ext $ '\' is not valid' ) }">
			<MvELSEIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:preview ), 'data', l.componentversiondata:preview ) LT 0 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00079', 'Preview file \'' $ l.package_data:preview $ '\' not found' ) }">
			<MvELSEIF EXPR = "{ NOT Value_Is_SVG( l.componentversiondata:preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00286', 'Invalid SVG preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.package_data:detailed_preview }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Extension_ToLowerCase( l.package_data:detailed_preview, 'svg', l.svg_ext ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00369', 'The detailed preview SVG extension \'.' $ l.svg_ext $ '\' is not valid' ) }">
			<MvELSEIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:detailed_preview ), 'data', l.componentversiondata:detailed_preview ) LT 0 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00370', 'Detailed preview file \'' $ l.package_data:detailed_preview $ '\' not found' ) }">
			<MvELSEIF EXPR = "{ NOT Value_Is_SVG( l.componentversiondata:detailed_preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00371', 'Invalid SVG detailed preview image' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.componentversiondata:depends"							VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:conflicts"							VALUE = "">

	<MvIF EXPR = "{ NOT ISNULL l.package_data:depends }">
		<MvFOREACH ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ miva_struct_members( l.package_data:depends, l.dependency_names ) }">
			<MvREFERENCEARRAY NAME = "l.dependency_value" VARIABLE = "l.package_data:depends">
				<MvMEMBER NAME = "{ l.dependency_name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ( '>=' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = ">=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '<=' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "<=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '>' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = ">">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
			<MvELSEIF EXPR = "{ ( '<' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "<">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
			<MvELSEIF EXPR = "{ ( '!=' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "!=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '=' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.operator"									VALUE = "=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( l.dependency_value ) }">
			</MvIF>

			<MvASSIGNARRAY NAME = "l.componentversiondata:depends"				VALUE = "{ l.operator $ l.version }">
				<MvMEMBER NAME = "{ l.dependency_name }">
			</MvASSIGNARRAY>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.package_data:conflicts }">
		<MvFOREACH ITERATOR = "l.conflict_name" ARRAY = "l.conflict_names" COUNT = "{ miva_struct_members( l.package_data:conflicts, l.conflict_names ) }">
			<MvREFERENCEARRAY NAME = "l.conflict_value" VARIABLE = "l.package_data:conflicts">
				<MvMEMBER NAME = "{ l.conflict_name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ( '>=' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = ">=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 3, len_var( l.conflict_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '<=' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "<=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 3, len_var( l.conflict_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '>' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = ">">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 2, len_var( l.conflict_value ) - 1 ) ) }">
			<MvELSEIF EXPR = "{ ( '<' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "<">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 2, len_var( l.conflict_value ) - 1 ) ) }">
			<MvELSEIF EXPR = "{ ( '!=' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "!=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 3, len_var( l.conflict_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '=' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 2, len_var( l.conflict_value ) - 1 ) ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.operator"									VALUE = "=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( l.conflict_value ) }">
			</MvIF>

			<MvASSIGNARRAY NAME = "l.componentversiondata:conflicts"			VALUE = "{ l.operator $ l.version }">
				<MvMEMBER NAME = "{ l.conflict_name }">
			</MvASSIGNARRAY>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload_Build_Images" PARAMETERS = "extraction_dir var, package_data var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversiondata:images"			VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:image_count"		VALUE = 0>

	<MvFOREACH ITERATOR = "l.input_image" ARRAY = "l.package_data:images">
		<MvASSIGN NAME = "l.input_image:source_filepath"		VALUE = "{ trim( l.input_image:source_filepath ) }">
		<MvASSIGN NAME = "l.input_image:destination_filepath"	VALUE = "{ trim( l.input_image:destination_filepath ) }">

		<MvIF EXPR = "{ ISNULL l.input_image:source_filepath }">			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00082', 'Invalid source filepath' ) }">
		<MvELSEIF EXPR = "{ ISNULL l.input_image:destination_filepath }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00083', 'Invalid destination filepath' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Image_Type( l.input_image:source_filepath, 'data', l.null ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.image"								VALUE = "">
		<MvASSIGN NAME = "l.image:create"						VALUE = 1>
		<MvASSIGN NAME = "l.image:filepath"						VALUE = "{ DetokenizePath( l.input_image:destination_filepath ) }">

		<MvIF EXPR = "{ ( ':' IN l.image:filepath ) OR
						( ( '/' IN l.image:filepath ) EQ 1 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00287', 'Image filepaths must be local and relative to the Base Directory for Graphics' ) }">
		</MvIF>

		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.input_image:source_filepath ), 'data', l.image:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00084', 'Image file \'' $ l.input_image:source_filepath $ '\' not found: ' $ file_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.componentversiondata:image_count"	VALUE = "{ miva_array_insert_var( l.componentversiondata:images, l.image, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload_Build_Templates" PARAMETERS = "extraction_dir var, package_data var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.componentversiondata:type NE 'component' }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.package_data:upgrade_template"			VALUE = "{ trim( l.package_data:upgrade_template ) }">
	<MvASSIGN NAME = "l.package_data:initialization_template"	VALUE = "{ trim( l.package_data:initialization_template ) }">
	<MvASSIGN NAME = "l.package_data:instance_template"			VALUE = "{ trim( l.package_data:instance_template ) }">

	<MvIF EXPR = "{ NOT ISNULL l.package_data:upgrade_template }">
		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:upgrade_template ), 'data', l.componentversiondata:upgrade_template_source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00355', 'Upgrade template file \'' $ l.package_data:upgrade_template $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:upgrade_template_source ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00356', 'Failed to compile upgrade template: ' $ g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.package_data:initialization_template }">
		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:initialization_template ), 'data', l.componentversiondata:initialization_template_source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00029', 'Initialization template file \'' $ l.package_data:initialization_template $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:initialization_template_source ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00288', 'Failed to compile initialization template: ' $ g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.package_data:instance_template }">
		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:instance_template ), 'data', l.componentversiondata:instance_template_source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00030', 'Instance template file \'' $ l.package_data:instance_template $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:instance_template_source ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00289', 'Failed to compile instance template: ' $ g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload_Build_Resources" PARAMETERS = "extraction_dir var, package_data var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversiondata:scripts"			VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:script_count"		VALUE = 0>
	<MvASSIGN NAME = "l.componentversiondata:styles"			VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:style_count"		VALUE = 0>

	<MvFOREACH ITERATOR = "l.input_script" ARRAY = "l.package_data:scripts">
		<MvASSIGN NAME = "l.input_script:filepath"				VALUE = "{ trim( l.input_script:filepath ) }">
		<MvASSIGN NAME = "l.input_script:resource_code"			VALUE = "{ trim( l.input_script:resource_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.input_script:resource_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00290', g.Validation_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.script"								VALUE = "">
		<MvASSIGN NAME = "l.script:resource_code"				VALUE = "{ l.input_script:resource_code }">

		<MvIF EXPR = "{ ISNULL l.input_script:filepath }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00031', 'Invalid filepath' ) }">
		</MvIF>

		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.input_script:filepath ), 'data', l.script:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00032', 'Script file \'' $ l.input_script:filepath $ '\' not found: ' $ file_last_error() ) }">
		</MvIF>

		<MvIF EXPR = "{ l.componentversiondata:managed }">
			<MvIF EXPR = "{ NOT miva_member_exists( l.input_script, 'attributes' ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( 'Z', l.script:attributes ) }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.script:filepath"				VALUE = "{ l.input_script:filepath }">

			<MvIF EXPR = "{ NOT miva_member_exists( l.input_script, 'attributes' ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( 'L', l.script:attributes ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ miva_member_exists( l.input_script, 'attributes' ) }">
			<MvFOREACH ITERATOR = "l.input_attribute" ARRAY = "l.input_script:attributes">
				<MvASSIGN NAME = "l.input_attribute:name"		VALUE = "{ trim( l.input_attribute:name ) }">
				<MvASSIGN NAME = "l.input_attribute:value"		VALUE = "{ trim( l.input_attribute:value ) }">

				<MvASSIGN NAME = "l.attribute"					VALUE = "">
				<MvASSIGN NAME = "l.attribute:name"				VALUE = "{ l.input_attribute:name }">
				<MvASSIGN NAME = "l.attribute:value"			VALUE = "{ l.input_attribute:value }">

				<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert_var( l.script:attributes, l.attribute, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvASSIGN NAME = "l.componentversiondata:script_count"	VALUE = "{ miva_array_insert_var( l.componentversiondata:scripts, l.script, -1 ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.input_style" ARRAY = "l.package_data:styles">
		<MvASSIGN NAME = "l.input_style:filepath"				VALUE = "{ trim( l.input_style:filepath ) }">
		<MvASSIGN NAME = "l.input_style:resource_code"			VALUE = "{ trim( l.input_style:resource_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.input_style:resource_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00291', g.Validation_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.style"								VALUE = "">
		<MvASSIGN NAME = "l.style:resource_code"				VALUE = "{ l.input_style:resource_code }">

		<MvIF EXPR = "{ ISNULL l.input_style:filepath }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00033', 'Invalid filepath' ) }">
		</MvIF>

		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.input_style:filepath ), 'data', l.style:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00034', 'Style file \'' $ l.input_style:filepath $ '\' not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.componentversiondata:managed }">
			<MvIF EXPR = "{ NOT miva_member_exists( l.input_style, 'attributes' ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( 'Z', l.style:attributes ) }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.style:filepath"					VALUE = "{ l.input_style:filepath }">

			<MvIF EXPR = "{ NOT miva_member_exists( l.input_style, 'attributes' ) }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( 'L', l.style:attributes ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ miva_member_exists( l.input_style, 'attributes' ) }">
			<MvFOREACH ITERATOR = "l.input_attribute" ARRAY = "l.input_style:attributes">
				<MvASSIGN NAME = "l.input_attribute:name"		VALUE = "{ trim( l.input_attribute:name ) }">
				<MvASSIGN NAME = "l.input_attribute:value"		VALUE = "{ trim( l.input_attribute:value ) }">

				<MvASSIGN NAME = "l.attribute"					VALUE = "">
				<MvASSIGN NAME = "l.attribute:name"				VALUE = "{ l.input_attribute:name }">
				<MvASSIGN NAME = "l.attribute:value"			VALUE = "{ l.input_attribute:value }">

				<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert_var( l.style:attributes, l.attribute, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvASSIGN NAME = "l.componentversiondata:style_count"	VALUE = "{ miva_array_insert_var( l.componentversiondata:styles, l.style, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload_Install_Managed" PARAMETERS = "overwrite_registered, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Register Component
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.componentversiondata:component_exists"		VALUE = 0>

	<MvIF EXPR = "{ FlexComponent_Load_Code( l.componentversiondata:code, l.componentversiondata:component ) }">
		<MvASSIGN NAME = "l.componentversiondata:component_exists"	VALUE = 1>

		<MvIF EXPR = "{ FlexComponentVersion_Load_Version( l.componentversiondata:component:id, l.componentversiondata:version, l.existing_componentversion ) }">
			<MvIF EXPR = "{ NOT l.overwrite_registered }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00267', 'A component with code \'' $ l.componentversiondata:component:code $ '\' and version \'' $ l.existing_componentversion:version $ '\' is already registered' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT ComponentManager_Deregister_Version( l.existing_componentversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.componentversiondata:component:ctype NE l.componentversiondata:type }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00245', 'A component with code \'' $ l.componentversiondata:component:code $ '\' is already registered with a different type' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Register_Version( l.componentversiondata ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00166', 'Flex Component \'' $ l.componentversiondata:code $ '\' version \'' $ l.componentversiondata:version $ '\' registered' ) }">

	<MvCOMMENT>
	|
	| Apply Component
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT FlexComponent_Load_Code( l.componentversiondata:code, l.component ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00167', 'Flex Component not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT FlexComponentVersion_Load_Version( l.component:id, l.componentversiondata:version, l.componentversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00168', 'Flex Component version not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Branch_Load_ID( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID(), l.branch ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Begin_Branch( l.branch:id, 'Flex Component \'' $ l.component:code $ '\' version \'' $ l.componentversion:version $ '\' applied' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.component:code, l.existing_managedproperty ) }">
		<MvIF EXPR = "{ NOT ComponentManager_Remove_Installed( l.existing_managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00308', 'Flex Component \'' $ l.existing_managedproperty:code $ '\' version \'' $ l.existing_managedproperty:version:settings:version $ '\' deleted from branch ' $ l.branch:name ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Apply_Version( l.branch, l.component, l.componentversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00169', 'Flex Component \'' $ l.component:code $ '\' version \'' $ l.componentversion:version $ '\' applied to branch ' $ l.branch:name ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Upload_Install_Unmanaged" PARAMETERS = "componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Active() }">
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.end_changeset"	VALUE = 1>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Begin( 'Flex Component \'' $ l.component:code $ '\' version \'' $ l.componentversion:version $ '\' added' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.componentversiondata:code, l.existing_managedproperty ) }">
		<MvIF EXPR = "{ NOT ComponentManager_Remove_Installed( l.existing_managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00309', 'Flex Component \'' $ l.existing_managedproperty:code $ '\' version \'' $ l.existing_managedproperty:version:settings:version $ '\' deleted from branch ' $ g.Store:branch:name ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Apply_Unregistered_Version( l.componentversiondata ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.end_changeset }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_End() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00251', 'Flex Component \'' $ l.component:code $ '\' version \'' $ l.componentversion:version $ '\' added to branch ' $ g.Store:branch:name ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_FlexComponent_Load( l.managedproperty ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.result"			VALUE = "{ JSON_FlexComponent_Download_LowLevel( l.managedproperty, l.temp_package, l.temp_directory ) }">

	<MvIF EXPR = "{ l.result }">
		<MvIF EXPR = "{ file_read( l.temp_package, 'data', l.package_source ) LT 0 }">
			<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( 'MER-CMP-MV-FLEX-00050', 'Flex Component package not found' ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Content-Type',			'application/x-gtar' ) }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Content-Disposition',	'attachment; filename=' $ FilepathSafeString( l.managedproperty:code ) $ '.tar.bz2' ) }">

			<MvEVAL EXPR = "{ l.package_source }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.null"			VALUE = "{ fdelete( l.temp_package ) }">

	<MvIF EXPR = "{ NOT ISNULL l.temp_directory }">
		<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Module_Library_Utilities ].Directory_Delete( l.temp_directory, 'data' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_LowLevel" PARAMETERS = "managedproperty var, temp_package var, temp_directory var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Read
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.data" VALUE = "">

	<MvIF EXPR = "{ NOT JSON_FlexComponent_Download_Load_Images( l.managedproperty, l.data ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Download_Load_Templates( l.managedproperty, l.data ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Download_Load_Resources( l.managedproperty, l.data ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Write
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.temp_directory" VALUE = "{ MakeSessionID() }">

	<MvFOR INDEX = "l.pos" COUNT = 100>
		<MvIF EXPR = "{ NOT fexists( l.temp_directory ) }">
			<MvFORSTOP>
		</MvIF>

		<MvASSIGN NAME = "l.temp_directory" VALUE = "{ MakeSessionID() }">
	</MvFOR>

	<MvIF EXPR = "{ l.pos GT 100 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( 'MER-CMP-MV-FLEX-00036', 'Unable to generate unique extraction directory after 100 attempts' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.temp_package" VALUE = "{ l.temp_directory $ '.tar.bz2' }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.temp_directory ) }">						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.temp_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_FlexComponent_Download_Write_Config( l.managedproperty, l.temp_directory, l.data ) }">			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Download_Write_Preview( l.managedproperty, l.temp_directory, l.data ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Download_Write_Images( l.managedproperty, l.temp_directory, l.data ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Download_Write_Templates( l.managedproperty, l.temp_directory, l.data ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Download_Write_Resources( l.managedproperty, l.temp_directory, l.data ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT tar_create( l.temp_package, 'data', l.temp_directory, 'data', 'compress' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( 'MER-CMP-MV-FLEX-00049', 'Failed to create Flex Component package: ' $ tar_last_error() ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Load_Images" PARAMETERS = "managedproperty var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data:images"		VALUE = "">
	<MvASSIGN NAME = "l.data:image_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.image_filename" ARRAY = "l.managedproperty:version:settings:images">
		<MvIF EXPR = "{ NOT SanitizeComponentImage( l.image_filename, l.image ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.data:image_count" VALUE = "{ miva_array_insert_var( l.data:images, l.image, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Load_Templates" PARAMETERS = "managedproperty var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT l.managedproperty:version:settings:upgrade_template_disabled AND NOT ISNULL l.managedproperty:version:settings:upgrade_template_filename }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.managedproperty:version:settings:upgrade_template_filename, l.data:templateversion_upgrade ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00357', 'Upgrade template not found' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.managedproperty:version:settings:initialization_template_disabled AND NOT ISNULL l.managedproperty:version:settings:initialization_template_filename }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.managedproperty:version:settings:initialization_template_filename, l.data:templateversion_initialization ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00037', 'Initialization template not found' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.managedproperty:version:settings:instance_template_disabled }">
		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:instance_template_filename }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.managedproperty:version:settings:instance_template_filename, l.data:templateversion_instance ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00241', 'Instance template not found' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.managedproperty:templ_id }">
			<MvCOMMENT>
			|
			| Legacy Instance Template
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.managedproperty:templ_id, l.data:templateversion_instance ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00039', 'Instance template not found' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Load_Resources" PARAMETERS = "managedproperty var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data:scripts"		VALUE = "">
	<MvASSIGN NAME = "l.data:script_count"	VALUE = 0>
	<MvASSIGN NAME = "l.data:styles"		VALUE = "">
	<MvASSIGN NAME = "l.data:style_count"	VALUE = 0>

	<MvIF EXPR = "{ NOT JSON_FlexComponent_Download_Load_Resources_ManagedProperty( l.managedproperty, l.data ) }">		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT JSON_FlexComponent_Download_Load_Resources_ResourceGroup( l.managedproperty, l.data ) }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Load_Resources_ManagedProperty" PARAMETERS = "managedproperty var, data var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.script" ARRAY = "l.managedproperty:version:settings:scripts">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.script:resource_code, l.scriptresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.script"					VALUE = "">
		<MvASSIGN NAME = "l.script:resource_code"	VALUE = "{ l.scriptresource:code }">
		<MvASSIGN NAME = "l.script:attributes"		VALUE = "{ l.scriptresource:attributes }">
		<MvASSIGN NAME = "l.script:filepath"		VALUE = "{ 'src/js/' $ FilepathSafeString( l.scriptresource:code ) $ '.js' }">

		<MvIF EXPR = "{ l.scriptresource:type EQ 'L' }">
			<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.scriptresource:file ), 'script', l.script:source ) LT 0 }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'I' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.scriptresource:templ_id, l.managedtemplateversion ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.script:source"		VALUE = "{ l.managedtemplateversion:source }">
		<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'Z' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedContent_Load_ID( l.scriptresource:content_id, l.managedcontent ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.script:source"		VALUE = "{ l.managedcontent:content }">
		<MvELSE>
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.data:script_count"		VALUE = "{ miva_array_insert_var( l.data:scripts, l.script, -1 ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.style" ARRAY = "l.managedproperty:version:settings:styles">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.style:resource_code, l.cssresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.style"					VALUE = "">
		<MvASSIGN NAME = "l.style:resource_code"	VALUE = "{ l.cssresource:code }">
		<MvASSIGN NAME = "l.style:attributes"		VALUE = "{ l.cssresource:attributes }">
		<MvASSIGN NAME = "l.style:filepath"			VALUE = "{ 'src/css/' $ FilepathSafeString( l.cssresource:code ) $ '.css' }">

		<MvIF EXPR = "{ l.cssresource:type EQ 'L' }">
			<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.cssresource:file ), 'script', l.style:source ) LT 0 }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.cssresource:type EQ 'I' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.cssresource:templ_id, l.managedtemplateversion ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.style:source"		VALUE = "{ l.managedtemplateversion:source }">
		<MvELSEIF EXPR = "{ l.cssresource:type EQ 'Z' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedContent_Load_ID( l.cssresource:content_id, l.managedcontent ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.style:source"		VALUE = "{ l.managedcontent:content }">
		<MvELSE>
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.data:style_count"		VALUE = "{ miva_array_insert_var( l.data:styles, l.style, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Load_Resources_ResourceGroup" PARAMETERS = "managedproperty var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.managedproperty:version:settings:resourcegroup_code }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.managedproperty:version:settings:resourcegroup_code, l.resourcegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.scriptresource" ARRAY = "l.scriptresources" COUNT = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResourceList_Load_Group( l.resourcegroup:id, l.scriptresources ) }">
		<MvIF EXPR = "{ miva_array_search( l.data:scripts, 1, l.search_script, 'l.scriptresource:code EQ l.search_script:resource_code' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.script"					VALUE = "">
		<MvASSIGN NAME = "l.script:resource_code"	VALUE = "{ l.scriptresource:code }">
		<MvASSIGN NAME = "l.script:attributes"		VALUE = "{ l.scriptresource:attributes }">
		<MvASSIGN NAME = "l.script:filepath"		VALUE = "{ 'src/js/' $ FilepathSafeString( l.scriptresource:code ) $ '.js' }">

		<MvIF EXPR = "{ l.scriptresource:type EQ 'L' }">
			<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.scriptresource:file ), 'script', l.script:source ) LT 0 }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.scriptresource:type EQ 'I' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.scriptresource:templ_id, l.managedtemplateversion ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.script:source"		VALUE = "{ l.managedtemplateversion:source }">
		<MvELSE>
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.data:script_count"		VALUE = "{ miva_array_insert_var( l.data:scripts, l.script, -1 ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.cssresource" ARRAY = "l.cssresources" COUNT = "{ [ g.Module_Feature_TUI_DB ].CSSResourceList_Load_Group( l.resourcegroup:id, l.cssresources ) }">
		<MvIF EXPR = "{ miva_array_search( l.data:styles, 1, l.search_style, 'l.cssresource:code EQ l.search_style:resource_code' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.style"					VALUE = "">
		<MvASSIGN NAME = "l.style:resource_code"	VALUE = "{ l.cssresource:code }">
		<MvASSIGN NAME = "l.style:attributes"		VALUE = "{ l.cssresource:attributes }">
		<MvASSIGN NAME = "l.style:filepath"			VALUE = "{ 'src/css/' $ FilepathSafeString( l.cssresource:code ) $ '.css' }">

		<MvIF EXPR = "{ l.cssresource:type EQ 'L' }">
			<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenateResourcePath( g.imageroot, l.cssresource:file ), 'script', l.style:source ) LT 0 }">
				<MvFOREACHCONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.cssresource:type EQ 'I' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Template_Current( l.cssresource:templ_id, l.managedtemplateversion ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.style:source"		VALUE = "{ l.managedtemplateversion:source }">
		<MvELSE>
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.data:style_count"		VALUE = "{ miva_array_insert_var( l.data:styles, l.style, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Write_Config" PARAMETERS = "managedproperty var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sanitized_version" VALUE = "{ ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) }">

	<MvCAPTURE VARIABLE = "l.flex_file_source" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">{
		"code":								"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:code ) }">",
		"name":								"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:name ) }">",
		"type":								"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:type ) }">",
		"version":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.sanitized_version ) }">",
		"managed":							<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.managedproperty:version:settings:managed ) }">

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:resourcegroup_code }">
			, "resourcegroup_code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:resourcegroup_code ) }">"
		</MvIF>

		<MvIF EXPR = "{ ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
			, "category":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:category ) }">",
			"description":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:description ) }">",
			"preview_component_selector":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.managedproperty:version:settings:preview_component_selector ) }">",
			"sample_data_types":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.managedproperty:version:settings:sample_data_types ) }">,
			"properties":					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.managedproperty:version:settings:properties ) }">,
			"advanced_properties":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.managedproperty:version:settings:advanced_properties ) }">,
			"defaults":						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.managedproperty:version:settings:defaults ) }">

			<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_upgrade }">
				, "upgrade_template": "src/templates/upgrade.mvt"
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_initialization }">
				, "initialization_template": "src/templates/init.mvt"
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_instance }">
				, "instance_template": "src/templates/instance.mvt"
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:preview }">
				, "preview": "src/images/preview.svg"
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:detailed_preview }">
				, "detailed_preview": "src/images/detailed_preview.svg"
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.data:image_count }">
			, "images":
			[
				<MvASSIGN NAME = "l.output_image_count" VALUE = 0>

				<MvFOREACH ITERATOR = "l.image" ARRAY = "l.data:images" COUNT = "{ l.data:image_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_image_count ) }">
						"source_filepath":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.image:filepath ) }">",
						"destination_filepath":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.image:filepath ) }">"
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvFOREACH>
			]
		</MvIF>

		<MvIF EXPR = "{ l.data:script_count }">
			, "scripts":
			[
				<MvASSIGN NAME = "l.output_script_count" VALUE = 0>

				<MvFOREACH ITERATOR = "l.script" ARRAY = "l.data:scripts" COUNT = "{ l.data:script_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_script_count ) }">
						"filepath":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.script:filepath ) }">",
						"resource_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.script:resource_code ) }">",
						"attributes":
						[
							<MvASSIGN NAME = "l.attribute_count" VALUE = 0>

							<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.script:attributes">
								<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
									"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
									"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
								<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
							</MvFOREACH>
						]
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvFOREACH>
			]
		</MvIF>

		<MvIF EXPR = "{ l.data:style_count }">
			, "styles":
			[
				<MvASSIGN NAME = "l.output_style_count" VALUE = 0>

				<MvFOREACH ITERATOR = "l.style" ARRAY = "l.data:styles" COUNT = "{ l.data:style_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_style_count ) }">
						"filepath":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.style:filepath ) }">",
						"resource_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.style:resource_code ) }">",
						"attributes":
						[
							<MvASSIGN NAME = "l.attribute_count" VALUE = 0>

							<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.style:attributes">
								<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
									"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
									"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
								<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
							</MvFOREACH>
						]
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvFOREACH>
			]
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:depends }">
			, "depends":
			{
				<MvFOREACH INDEX = "l.pos" ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ miva_struct_members( l.managedproperty:version:settings:depends, l.dependency_names ) }">
					<MvREFERENCEARRAY NAME = "l.dependency_value" VARIABLE = "l.managedproperty:version:settings:depends">
						<MvMEMBER NAME = "{ l.dependency_name }">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ l.pos GT 1 }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_value ) }">"
				</MvFOREACH>
			}
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:conflicts }">
			, "conflicts":
			{
				<MvFOREACH INDEX = "l.pos" ITERATOR = "l.conflict_name" ARRAY = "l.conflict_names" COUNT = "{ miva_struct_members( l.managedproperty:version:settings:conflicts, l.conflict_names ) }">
					<MvREFERENCEARRAY NAME = "l.conflict_value" VARIABLE = "l.managedproperty:version:settings:conflicts">
						<MvMEMBER NAME = "{ l.conflict_name }">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ l.pos GT 1 }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_value ) }">"
				</MvFOREACH>
			}
		</MvIF>
	}
	</MvCAPTURE>

	<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'flex.json' ), 'data', l.flex_file_source ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00044', 'Failed to create file \'flex.json\': ' $ file_last_error() ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Write_Preview" PARAMETERS = "managedproperty var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) OR
					( ISNULL l.managedproperty:version:settings:preview AND ISNULL l.managedproperty:version:settings:detailed_preview ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.images_directory" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/images' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.images_directory ) }">					<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.images_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:preview }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/images/preview.svg' ), 'data', l.managedproperty:version:settings:preview ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00080', 'Failed to create file \'src/images/preview.svg\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:detailed_preview }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/images/detailed_preview.svg' ), 'data', l.managedproperty:version:settings:detailed_preview ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00372', 'Failed to create file \'src/images/detailed_preview.svg\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Write_Images" PARAMETERS = "managedproperty var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.image" ARRAY = "l.data:images" COUNT = "{ l.data:image_count }">
		<MvASSIGN NAME = "l.file_basepath"	VALUE = "{ [ g.Module_Library_Utilities ].BasePath( l.image:filepath ) }">
		<MvASSIGN NAME = "l.file_directory"	VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.file_basepath ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.file_directory ) }">						<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.file_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.image:filepath ), 'data', l.image:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00367', 'Failed to create file \'' $ l.image:filepath $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Write_Templates" PARAMETERS = "managedproperty var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) OR
					( ISNULL l.data:templateversion_upgrade AND ISNULL l.data:templateversion_initialization AND ISNULL l.data:templateversion_instance ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.template_directory" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/templates' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.template_directory ) }">						<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.template_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_upgrade }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/templates/upgrade.mvt' ), 'data', l.data:templateversion_upgrade:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00358', 'Failed to create file \'src/templates/upgrade.mvt\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_initialization }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/templates/init.mvt' ), 'data', l.data:templateversion_initialization:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00045', 'Failed to create file \'src/templates/init.mvt\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_instance }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/templates/instance.mvt' ), 'data', l.data:templateversion_instance:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00046', 'Failed to create file \'src/templates/instance.mvt\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponent_Download_Write_Resources" PARAMETERS = "managedproperty var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.script" ARRAY = "l.data:scripts" COUNT = "{ l.data:script_count }">
		<MvASSIGN NAME = "l.file_basepath"	VALUE = "{ [ g.Module_Library_Utilities ].BasePath( l.script:filepath ) }">
		<MvASSIGN NAME = "l.file_directory"	VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.file_basepath ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.file_directory ) }">						<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.file_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.script:filepath ), 'data', l.script:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00047', 'Failed to create file \'' $ l.script:filepath $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.style" ARRAY = "l.data:styles" COUNT = "{ l.data:style_count }">
		<MvASSIGN NAME = "l.file_basepath"	VALUE = "{ [ g.Module_Library_Utilities ].BasePath( l.style:filepath ) }">
		<MvASSIGN NAME = "l.file_directory"	VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.file_basepath ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.file_directory ) }">						<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.file_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.style:filepath ), 'data', l.style:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00048', 'Failed to create file \'' $ l.style:filepath $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexComponentList_Apply" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.changes"				VALUE = "">
	<MvASSIGN NAME = "l.change_count"			VALUE = 0>
	<MvASSIGN NAME = "l.ignore_dependencies"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'O', 'Ignore_Dependencies', l.ignore_dependencies ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.input_component" ARRAY = "l.input_components" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'Components', l.input_components ) }">
		<MvASSIGN NAME = "l.change" VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_component, 'R', 'code', 		l.code ) OR
						NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_component, 'R', 'version',	l.version ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT FlexComponent_Load_Code( l.code, l.change:component ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_component, 'code', 'Flex Component not found' ) }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT FlexComponentVersion_Load_Version( l.change:component:id, l.version, l.change:componentversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_component, 'version', 'Flex Component Version not found' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.change_count" VALUE = "{ miva_array_insert_var( l.changes, l.change, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Have_Input_Errors() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Branch_Load_ID( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID(), l.branch ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Validate Dependencies
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT l.ignore_dependencies }">
		<MvEVAL EXPR = "{ ComponentState_Initialize( l.branch:id, l.lookup_depends, l.lookup_conflicts, l.componentstates, l.componentstate_count ) }">

		<MvFOREACH ITERATOR = "l.change" ARRAY = "l.changes" COUNT = "{ l.change_count }">
			<MvEVAL EXPR = "{ ComponentState_Append_Action_Apply( l.change:component, l.change:componentversion, 1, l.componentstates, l.componentstate_count ) }">
		</MvFOREACH>

		<MvIF EXPR = "{ NOT ComponentState_Validate( l.lookup_depends, l.lookup_conflicts, l.componentstates, l.componentstate_count, l.combined_dependency_errors, l.combined_dependency_error_count ) }">
			<MvFUNCTIONRETURN VALUE = "{ JSON_ComopnentState_Response_Errors( 'MER-CMP-MV-FLEX-00303', 'Failed to apply components', l.combined_dependency_errors, l.combined_dependency_error_count ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Apply Components
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Begin_Branch( l.branch:id, 'Flex Component versions applied' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.change" ARRAY = "l.changes" COUNT = "{ l.change_count }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.change:component:code, l.managedproperty ) }">
			<MvIF EXPR = "{ NOT ComponentManager_Remove_Installed( l.managedproperty ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00304', 'Flex Component \'' $ l.managedproperty:code $ '\' version \'' $ l.managedproperty:version:settings:version $ '\' deleted from branch ' $ l.branch:name ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ComponentManager_Apply_Version( l.branch, l.change:component, l.change:componentversion ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00305', 'Flex Component \'' $ l.change:component:code $ '\' version \'' $ l.change:componentversion:version $ '\' applied to branch ' $ l.branch:name ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_End() }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponent_Load" PARAMETERS = "component var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_FlexComponent', l.component_code ) }">
		<MvIF EXPR = "{ NOT FlexComponent_Load_Code( l.component_code, l.component ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00292', 'Flex Component not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'FlexComponent_Code', l.component_code ) }">
		<MvIF EXPR = "{ NOT FlexComponent_Load_Code( l.component_code, l.component ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00293', 'Flex Component not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'FlexComponent_ID', l.component_id ) }">
		<MvIF EXPR = "{ NOT FlexComponent_Load_ID( l.component_id, l.component ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00294', 'Flex Component not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00295', 'Unable to load Flex Component: One of Edit_FlexComponent, FlexComponent_Code, or FlexComponent_ID must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Load" PARAMETERS = "component var, componentversion var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT JSON_FlexRegisteredComponent_Load( l.component ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_FlexComponentVersion', l.componentversion_version ) }">
		<MvIF EXPR = "{ NOT FlexComponentVersion_Load_Version( l.component:id, l.componentversion_version, l.componentversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00296', 'Flex Component Version not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'FlexComponentVersion_Version', l.componentversion_version ) }">
		<MvIF EXPR = "{ NOT FlexComponentVersion_Load_Version( l.component:id, l.componentversion_version, l.componentversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00297', 'Flex Component Version not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'FlexComponentVersion_ID', l.componentversion_id ) }">
		<MvIF EXPR = "{ NOT FlexComponentVersion_Load_ID( l.componentversion_id, l.componentversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00298', 'Flex Component Version not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00299', 'Unable to load Flex Component Version: One of Edit_FlexComponentVersion, FlexComponentVersion_Version, or FlexComponentVersion_ID must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.search_query"		VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters,	'fc.id',					'id' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'fc.code;fcv.version',		'code_version' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'fc.code',					'code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'fcv.version',				'version' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'fc.name',					'name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters,	'fc.ctype',					'ctype' ) }">

	<MvCOMMENT> MMList always sends Offset and Count, but this function does not use them </MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'fc.id				AS id,
																				 fc.code			AS code,
																				 fc.name			AS name,
																				 fc.ctype			AS ctype,
																				 fc.prop_id			AS prop_id,
																				 fc.upg_id			AS upg_id,
																				 fc.init_id			AS init_id,
																				 fc.inst_id			AS inst_id,
																				 fcv.id				AS version_id,
																				 fcv.fc_id			AS version_fc_id,
																				 fcv.version		AS version_version,
																				 fcv.propver_id		AS version_propver_id,
																				 fcv.upgver_id		AS version_upgver_id,
																				 fcv.initver_id		AS version_initver_id,
																				 fcv.instver_id		AS version_instver_id,
																				 mpv.settings		AS version_settings' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'FlexComponents', 'fc' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'fc', g.Store_Table_Prefix $ 'FlexComponentVersions', 'fcv', 'fcv.fc_id = fc.id', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'fc', g.Store_Table_Prefix $ 'ManagedPropertyVersions', 'mpv', 'mpv.id = fcv.propver_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.search_query, l.filter, l.available_filters, g.Module_Root $ l.module:module, 'JSON_FlexRegisteredComponentList_Load_Query_Filter', '', l.data ) }">

	<MvIF EXPR = "{ l.data:ondemandcolumns:upgrade_template }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv_upg.source AS version_upgrade_template' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'fc', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv_upg', 'mtv_upg.id = fcv.upgver_id', '' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:initialization_template }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv_init.source AS version_initialization_template' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'fc', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv_init', 'mtv_init.id = fcv.initver_id', '' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.data:ondemandcolumns:instance_template }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, 'mtv_inst.source AS version_instance_template' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'fc', g.Store_Table_Prefix $ 'ManagedTemplateVersions', 'mtv_inst', 'mtv_inst.id = fcv.instver_id', '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.search_query, l.sort,
													  'code_version:fc.code;fcv.version,name:fc.name,ctype:fc.ctype,version:fcv.version',
													  'fc.code;fcv.version' ) }">
																			
	<MvASSIGN NAME = "l.search_sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'FlexComponents', l.search_sql, l.search_fields, 0, 0 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00300', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.total_count"		VALUE = 0>
	<MvASSIGN NAME = "l.fc_count"			VALUE = 0>
	<MvASSIGN NAME = "l.fcv_count"			VALUE = 0>
	<MvASSIGN NAME = "l.last_fc_id"			VALUE = 0>
	<MvASSIGN NAME = "l.last_fcv_id"		VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
		<MvWHILE EXPR = "{ NOT FlexComponents.d.EOF }">
			<MvIF EXPR = "{ l.last_fc_id NE FlexComponents.d.id }">
				<MvIF EXPR = "{ l.fcv_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					]
				</MvIF>

				<MvIF EXPR = "{ l.fc_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.fc_count ) }">
				"id":			<MvEVAL EXPR = "{ int( FlexComponents.d.id ) }">,
				"code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( FlexComponents.d.code ) }">",
				"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( FlexComponents.d.name ) }">",
				"ctype":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( FlexComponents.d.ctype ) }">",
				"prop_id":		<MvEVAL EXPR = "{ int( FlexComponents.d.prop_id ) }">,
				"upg_id":		<MvEVAL EXPR = "{ int( FlexComponents.d.upg_id ) }">,
				"init_id":		<MvEVAL EXPR = "{ int( FlexComponents.d.init_id ) }">,
				"inst_id":		<MvEVAL EXPR = "{ int( FlexComponents.d.inst_id ) }">

				<MvASSIGN NAME = "l.total_count"	VALUE = "{ l.total_count + 1 }">
				<MvASSIGN NAME = "l.last_fc_id"		VALUE = "{ FlexComponents.d.id }">
				<MvASSIGN NAME = "l.last_fcv_id"	VALUE = 0>
				<MvASSIGN NAME = "l.fcv_count"		VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.last_fcv_id NE FlexComponents.d.version_id AND NOT ISNULL FlexComponents.d.version_id }">
				<MvASSIGN NAME = "l.version_settings" VALUE = "{ miva_array_deserialize( FlexComponents.d.version_settings ) }">

				<MvIF EXPR = "{ l.fcv_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvIF>

				<MvIF EXPR = "{ NOT l.fcv_count }">
					, "versions":
					[
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.fcv_count ) }">
				"id":			<MvEVAL EXPR = "{ int( FlexComponents.d.version_id ) }">,
				"fc_id":		<MvEVAL EXPR = "{ int( FlexComponents.d.version_fc_id ) }">,
				"version":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( FlexComponents.d.version_version ) }">",
				"propver_id":	<MvEVAL EXPR = "{ int( FlexComponents.d.version_propver_id ) }">,
				"upgver_id":	<MvEVAL EXPR = "{ int( FlexComponents.d.version_upgver_id ) }">,
				"initver_id":	<MvEVAL EXPR = "{ int( FlexComponents.d.version_initver_id ) }">,
				"instver_id":	<MvEVAL EXPR = "{ int( FlexComponents.d.version_instver_id ) }">

				<MvIF EXPR = "{ NOT ISNULL l.version_settings:resourcegroup_code }">
					, "resourcegroup_code": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.version_settings:resourcegroup_code ) }">"
				</MvIF>

				<MvIF EXPR = "{ ComponentManager_Validate_Type_Component( FlexComponents.d.ctype ) }">
					, "category": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.version_settings:category ) }">"

					<MvIF EXPR = "{ ISNULL l.version_settings:preview }">
						, "preview": ""
					<MvELSE>
						, "preview": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( 'data:image/svg+xml;base64,' $ crypto_base64_encode( l.version_settings:preview ) ) }">"
					</MvIF>

					<MvIF EXPR = "{ ISNULL l.version_settings:detailed_preview }">
						, "detailed_preview": ""
					<MvELSE>
						, "detailed_preview": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( 'data:image/svg+xml;base64,' $ crypto_base64_encode( l.version_settings:detailed_preview ) ) }">"
					</MvIF>

					<MvIF EXPR = "{ l.data:ondemandcolumns:description }">
						<MvIF EXPR = "{ NOT ISNULL l.version_settings:description AND [ g.Module_Feature_PGB_UT ].PageBuilder_CMark_Supported() }">	<MvASSIGN NAME = "l.description" VALUE = "{ cmark_markdown_to_html( l.version_settings:description, 'safe,hardbreaks' ) }">
						<MvELSE>																													<MvASSIGN NAME = "l.description" VALUE = "">
						</MvIF>

						, "description": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.description ) }">"
					</MvIF>

					<MvIF EXPR = "{ ISNULL l.version_settings:preview_component_selector }">
						, "preview_component_selector": ""
					<MvELSE>
						, "preview_component_selector": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.version_settings:preview_component_selector ) }">"
					</MvIF>

					<MvIF EXPR = "{ FlexComponents.d.version_upgver_id AND l.data:ondemandcolumns:upgrade_template }">
						, "upgrade_template": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( FlexComponents.d.version_upgrade_template ) }">"
					</MvIF>

					<MvIF EXPR = "{ FlexComponents.d.version_initver_id AND l.data:ondemandcolumns:initialization_template }">
						, "initialization_template": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( FlexComponents.d.version_initialization_template ) }">"
					</MvIF>

					<MvIF EXPR = "{ FlexComponents.d.version_instver_id AND l.data:ondemandcolumns:instance_template }">
						, "instance_template": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( FlexComponents.d.version_instance_template ) }">"
					</MvIF>

					<MvIF EXPR = "{ l.data:ondemandcolumns:properties }">
						<MvIF EXPR = "{ miva_variable_type( l.version_settings:properties ) NE 'ARRAY' }">
							, "properties": []
						<MvELSE>
							, "properties": <MvEVAL EXPR = "{ miva_json_encode( l.version_settings:properties, 'pretty' ) }">
						</MvIF>
					</MvIF>

					<MvIF EXPR = "{ l.data:ondemandcolumns:advanced_properties }">
						<MvIF EXPR = "{ miva_variable_type( l.version_settings:advanced_properties ) NE 'ARRAY' }">
							, "advanced_properties": []
						<MvELSE>
							, "advanced_properties": <MvEVAL EXPR = "{ miva_json_encode( l.version_settings:advanced_properties, 'pretty' ) }">
						</MvIF>
					</MvIF>

					<MvIF EXPR = "{ l.data:ondemandcolumns:defaults }">
						<MvIF EXPR = "{ miva_variable_type( l.version_settings:defaults ) NE 'STRUCTURE' }">
							, "defaults": {}
						<MvELSE>
							, "defaults": <MvEVAL EXPR = "{ miva_json_encode( l.version_settings:defaults, 'pretty' ) }">
						</MvIF>
					</MvIF>

					<MvIF EXPR = "{ l.data:ondemandcolumns:sample_data_types }">
						<MvIF EXPR = "{ miva_variable_type( l.version_settings:sample_data_types ) NE 'ARRAY' }">
							, "sample_data_types": []
						<MvELSE>
							, "sample_data_types": <MvEVAL EXPR = "{ miva_json_encode( l.version_settings:sample_data_types, 'pretty' ) }">
						</MvIF>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.data:ondemandcolumns:images }">
					<MvIF EXPR = "{ NOT ISNULL l.version_settings:images }">
						, "images":
						[
							<MvFOREACH INDEX = "l.pos" ITERATOR = "l.image" ARRAY = "l.version_settings:images">
								<MvIF EXPR = "{ l.pos GT 1 }">
									,
								</MvIF>

								"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.image ) }">"
							</MvFOREACH>
						]
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.data:ondemandcolumns:dependencies }">
					<MvIF EXPR = "{ NOT ISNULL l.version_settings:depends }">
						, "depends":
						{
							<MvFOREACH INDEX = "l.pos" ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ miva_struct_members( l.version_settings:depends, l.dependency_names ) }">
								<MvREFERENCEARRAY NAME = "l.dependency_value" VARIABLE = "l.version_settings:depends">
									<MvMEMBER NAME = "{ l.dependency_name }">
								</MvREFERENCEARRAY>

								<MvIF EXPR = "{ l.pos GT 1 }">
									,
								</MvIF>

								"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_value ) }">"
							</MvFOREACH>
						}
					</MvIF>

					<MvIF EXPR = "{ NOT ISNULL l.version_settings:conflicts }">
						, "conflicts":
						{
							<MvFOREACH INDEX = "l.pos" ITERATOR = "l.conflict_name" ARRAY = "l.conflict_names" COUNT = "{ miva_struct_members( l.version_settings:conflicts, l.conflict_names ) }">
								<MvREFERENCEARRAY NAME = "l.conflict_value" VARIABLE = "l.version_settings:conflicts">
									<MvMEMBER NAME = "{ l.conflict_name }">
								</MvREFERENCEARRAY>

								<MvIF EXPR = "{ l.pos GT 1 }">
									,
								</MvIF>

								"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_value ) }">"
							</MvFOREACH>
						}
					</MvIF>
				</MvIF>

				<MvASSIGN NAME = "l.total_count"	VALUE = "{ l.total_count + 1 }">
				<MvASSIGN NAME = "l.last_fcv_id"	VALUE = "{ FlexComponents.d.version_id }">
			</MvIF>

			<MvSKIP NAME = "Merchant" VIEW = "FlexComponents" ROWS = 1>
		</MvWHILE>

		<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponents">

		<MvIF EXPR = "{ l.fcv_count }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			]
		</MvIF>

		<MvIF EXPR = "{ l.fc_count }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvIF>
		],
		"start_offset": 0,
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">
	}

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentList_Load_Query_Filter" PARAMETERS = "expression var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data:ondemandcolumns" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponent_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_FlexRegisteredComponent_Load( l.component ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Deregister_Component( l.component ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00301', 'Flex Component \'' $ l.component:code $ '\' deregistered' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Load( l.component, l.componentversion ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Deregister_Version( l.componentversion ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentversion_count" VALUE = "{ FlexComponentVersionList_Load_Component( l.component:id, l.null ) }">

	<MvIF EXPR = "{ l.componentversion_count EQ 0 }">
		<MvIF EXPR = "{ NOT ComponentManager_Deregister_Component( l.component ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00302', 'Flex Component \'' $ l.component:code $ '\' version \'' $ l.componentversion:version $ '\' deregistered' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Upload_ValidateFileUpload" PARAMETERS = "module var, field, filename, content_type" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN VALUE = -1> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN VALUE = -1> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN VALUE = -1> </MvIF>

	<MvCOMMENT>
	|
	| If more than one uploaded file is present in a single call, just ignore it.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( NOT ISNULL g.Filename ) OR ( NOT ISNULL g.File_MD5 ) }">
		<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Upload_ProcessFileUpload" PARAMETERS = "module var, field, filename, status, tempfile, content_type, size" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_ProcessFileUpload( 'Flex Registered Component Package', l.field, l.filename, l.status, l.tempfile, l.content_type, l.size ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Upload" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_ValidateUploadedFile( l.uploaded_tempfile ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.result"		VALUE = "{ JSON_FlexRegisteredComponentVersion_Upload_LowLevel( l.uploaded_tempfile, l.extraction_dir ) }">
	<MvASSIGN NAME = "l.null"		VALUE = "{ fdelete( l.uploaded_tempfile ) }">

	<MvIF EXPR = "{ NOT ISNULL l.extraction_dir }">
		<MvASSIGN NAME = "l.null"	VALUE = "{ [ g.Module_Library_Utilities ].Directory_Delete( l.extraction_dir, 'data' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Upload_LowLevel" PARAMETERS = "uploaded_tempfile, extraction_dir var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.overwrite" VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'O', 'Overwrite', l.overwrite ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvCOMMENT>
	|
	| Extract
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( '.tar.bz2' EIN g.Filename ) NE len_var( g.Filename ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00310', 'Flex Component uploaded with an invalid extension for file \'' $ g.Filename $ '\' at path \'' $ l.uploaded_tempfile $ '\'' ) }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00311', '\'' $ [ g.Module_Library_Utilities ].Extension_NoDot( g.Filename ) $ '\' is not a valid Flex Component package extension' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.extraction_dir" VALUE = "{ MakeSessionID() }">

	<MvFOR INDEX = "l.pos" COUNT = 100>
		<MvIF EXPR = "{ NOT fexists( l.extraction_dir ) }">
			<MvFORSTOP>
		</MvIF>

		<MvASSIGN NAME = "l.extraction_dir" VALUE = "{ MakeSessionID() }">
	</MvFOR>

	<MvIF EXPR = "{ l.pos GT 100 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00312', 'Unable to generate unique extraction directory after 100 attempts' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT tar_extract( l.uploaded_tempfile, 'data', l.extraction_dir, 'data' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00313', 'Failed to unpack Flex Component package: ' $ tar_last_error() ) }">
	</MvIF>

	<MvASSIGN NAME = "l.flex_file" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, 'flex.json' ) }">

	<MvIF EXPR = "{ file_read( l.flex_file, 'data', l.json_package_data ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00314', 'Flex Component package does not contain required file.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT miva_json_decode( l.json_package_data, l.package_data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00315', 'Unable to parse flex.json: ' $ miva_json_decode_last_error() ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Build Component Version Data
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.componentversiondata" VALUE = "">

	<MvIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Upload_Build_Core( l.extraction_dir, l.package_data, l.componentversiondata ) }">			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Upload_Build_Images( l.extraction_dir, l.package_data, l.componentversiondata ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Upload_Build_Templates( l.extraction_dir, l.package_data, l.componentversiondata ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Upload_Build_Resources( l.extraction_dir, l.package_data, l.componentversiondata ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Register Component
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.componentversiondata:component_exists"		VALUE = 0>

	<MvIF EXPR = "{ FlexComponent_Load_Code( l.componentversiondata:code, l.componentversiondata:component ) }">
		<MvASSIGN NAME = "l.componentversiondata:component_exists"	VALUE = 1>

		<MvIF EXPR = "{ FlexComponentVersion_Load_Version( l.componentversiondata:component:id, l.componentversiondata:version, l.existing_componentversion ) }">
			<MvIF EXPR = "{ NOT l.overwrite }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00316', 'A component with code \'' $ l.componentversiondata:component:code $ '\' and version \'' $ l.existing_componentversion:version $ '\' is already registered' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT ComponentManager_Deregister_Version( l.existing_componentversion ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.componentversiondata:component:ctype NE l.componentversiondata:type }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00317', 'A component with code \'' $ l.componentversiondata:component:code $ '\' is already registered with a different type' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Register_Version( l.componentversiondata ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00318', 'Flex Component \'' $ l.componentversiondata:code $ '\' version \'' $ l.componentversiondata:version $ '\' registered' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Upload_Build_Core" PARAMETERS = "extraction_dir var, package_data var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.package_data:code"										VALUE = "{ trim( l.package_data:code ) }">
	<MvASSIGN NAME = "l.package_data:name"										VALUE = "{ trim( l.package_data:name ) }">
	<MvASSIGN NAME = "l.package_data:type"										VALUE = "{ trim( l.package_data:type ) }">
	<MvASSIGN NAME = "l.package_data:version"									VALUE = "{ ComponentManager_Sanitize_Version( l.package_data:version ) }">
	<MvASSIGN NAME = "l.package_data:preview"									VALUE = "{ trim( l.package_data:preview ) }">
	<MvASSIGN NAME = "l.package_data:detailed_preview"							VALUE = "{ trim( l.package_data:detailed_preview ) }">
	<MvASSIGN NAME = "l.package_data:description"								VALUE = "{ trim( l.package_data:description ) }">
	<MvASSIGN NAME = "l.package_data:preview_component_selector"				VALUE = "{ trim( l.package_data:preview_component_selector ) }">
	<MvASSIGN NAME = "l.package_data:category"									VALUE = "{ trim( l.package_data:category ) }">
	<MvASSIGN NAME = "l.package_data:resourcegroup_code"						VALUE = "{ trim( l.package_data:resourcegroup_code ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.package_data:code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00319', g.Validation_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.package_data:name }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00320', 'Invalid name' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.package_data:type }">
		<MvASSIGN NAME = "l.package_data:type"									VALUE = "component">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Value_In_List( l.package_data:type, 'component,library' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00321', 'Invalid type' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.package_data:version }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00322', 'Invalid version' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentversiondata:code"								VALUE = "{ l.package_data:code }">
	<MvASSIGN NAME = "l.componentversiondata:name"								VALUE = "{ l.package_data:name }">
	<MvASSIGN NAME = "l.componentversiondata:type"								VALUE = "{ l.package_data:type }">
	<MvASSIGN NAME = "l.componentversiondata:version"							VALUE = "{ l.package_data:version }">
	<MvASSIGN NAME = "l.componentversiondata:resourcegroup_code"				VALUE = "{ l.package_data:resourcegroup_code }">
	<MvASSIGN NAME = "l.componentversiondata:managed"							VALUE = 1>

	<MvIF EXPR = "{ l.componentversiondata:type EQ 'component' }">
		<MvASSIGN NAME = "l.componentversiondata:category"						VALUE = "{ l.package_data:category }">
		<MvASSIGN NAME = "l.componentversiondata:preview_component_selector"	VALUE = "{ l.package_data:preview_component_selector }">
		<MvASSIGN NAME = "l.componentversiondata:sample_data_types"				VALUE = "{ l.package_data:sample_data_types }">
		<MvASSIGN NAME = "l.componentversiondata:properties"					VALUE = "{ l.package_data:properties }">
		<MvASSIGN NAME = "l.componentversiondata:advanced_properties"			VALUE = "{ l.package_data:advanced_properties }">
		<MvASSIGN NAME = "l.componentversiondata:defaults"						VALUE = "{ l.package_data:defaults }">
		<MvASSIGN NAME = "l.componentversiondata:description"					VALUE = "{ l.package_data:description }">

		<MvIF EXPR = "{ NOT ISNULL l.package_data:preview }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Extension_ToLowerCase( l.package_data:preview, 'svg', l.svg_ext ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00323', 'The preview SVG extension \'.' $ l.svg_ext $ '\' is not valid' ) }">
			<MvELSEIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:preview ), 'data', l.componentversiondata:preview ) LT 0 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00324', 'Preview file \'' $ l.package_data:preview $ '\' not found' ) }">
			<MvELSEIF EXPR = "{ NOT Value_Is_SVG( l.componentversiondata:preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00325', 'Invalid SVG preview image' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.package_data:detailed_preview }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Extension_ToLowerCase( l.package_data:detailed_preview, 'svg', l.svg_ext ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00373', 'The detailed preview SVG extension \'.' $ l.svg_ext $ '\' is not valid' ) }">
			<MvELSEIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:detailed_preview ), 'data', l.componentversiondata:detailed_preview ) LT 0 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00374', 'Detailed preview file \'' $ l.package_data:detailed_preview $ '\' not found' ) }">
			<MvELSEIF EXPR = "{ NOT Value_Is_SVG( l.componentversiondata:detailed_preview ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00375', 'Invalid SVG detailed preview image' ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.componentversiondata:depends"							VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:conflicts"							VALUE = "">

	<MvIF EXPR = "{ NOT ISNULL l.package_data:depends }">
		<MvFOREACH ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ miva_struct_members( l.package_data:depends, l.dependency_names ) }">
			<MvREFERENCEARRAY NAME = "l.dependency_value" VARIABLE = "l.package_data:depends">
				<MvMEMBER NAME = "{ l.dependency_name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ( '>=' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = ">=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '<=' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "<=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '>' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = ">">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
			<MvELSEIF EXPR = "{ ( '<' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "<">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
			<MvELSEIF EXPR = "{ ( '!=' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "!=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '=' IN l.dependency_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.operator"									VALUE = "=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( l.dependency_value ) }">
			</MvIF>

			<MvASSIGNARRAY NAME = "l.componentversiondata:depends"				VALUE = "{ l.operator $ l.version }">
				<MvMEMBER NAME = "{ l.dependency_name }">
			</MvASSIGNARRAY>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.package_data:conflicts }">
		<MvFOREACH ITERATOR = "l.conflict_name" ARRAY = "l.conflict_names" COUNT = "{ miva_struct_members( l.package_data:conflicts, l.conflict_names ) }">
			<MvREFERENCEARRAY NAME = "l.conflict_value" VARIABLE = "l.package_data:conflicts">
				<MvMEMBER NAME = "{ l.conflict_name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ( '>=' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = ">=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 3, len_var( l.conflict_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '<=' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "<=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 3, len_var( l.conflict_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '>' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = ">">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 2, len_var( l.conflict_value ) - 1 ) ) }">
			<MvELSEIF EXPR = "{ ( '<' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "<">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 2, len_var( l.conflict_value ) - 1 ) ) }">
			<MvELSEIF EXPR = "{ ( '!=' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "!=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 3, len_var( l.conflict_value ) - 2 ) ) }">
			<MvELSEIF EXPR = "{ ( '=' IN l.conflict_value ) EQ 1 }">
				<MvASSIGN NAME = "l.operator"									VALUE = "=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.conflict_value, 2, len_var( l.conflict_value ) - 1 ) ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.operator"									VALUE = "=">
				<MvASSIGN NAME = "l.version"									VALUE = "{ ComponentManager_Sanitize_Version( l.conflict_value ) }">
			</MvIF>

			<MvASSIGNARRAY NAME = "l.componentversiondata:conflicts"			VALUE = "{ l.operator $ l.version }">
				<MvMEMBER NAME = "{ l.conflict_name }">
			</MvASSIGNARRAY>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Upload_Build_Images" PARAMETERS = "extraction_dir var, package_data var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversiondata:images"			VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:image_count"		VALUE = 0>

	<MvFOREACH ITERATOR = "l.input_image" ARRAY = "l.package_data:images">
		<MvASSIGN NAME = "l.input_image:source_filepath"		VALUE = "{ trim( l.input_image:source_filepath ) }">
		<MvASSIGN NAME = "l.input_image:destination_filepath"	VALUE = "{ trim( l.input_image:destination_filepath ) }">

		<MvIF EXPR = "{ ISNULL l.input_image:source_filepath }">			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00326', 'Invalid source filepath' ) }">
		<MvELSEIF EXPR = "{ ISNULL l.input_image:destination_filepath }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00327', 'Invalid destination filepath' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Image_Type( l.input_image:source_filepath, 'data', l.null ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.image"								VALUE = "">
		<MvASSIGN NAME = "l.image:create"						VALUE = 1>
		<MvASSIGN NAME = "l.image:filepath"						VALUE = "{ DetokenizePath( l.input_image:destination_filepath ) }">

		<MvIF EXPR = "{ ( ':' IN l.image:filepath ) OR
						( ( '/' IN l.image:filepath ) EQ 1 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00328', 'Image filepaths must be local and relative to the Base Directory for Graphics' ) }">
		</MvIF>

		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.input_image:source_filepath ), 'data', l.image:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00329', 'Image file \'' $ l.input_image:source_filepath $ '\' not found: ' $ file_last_error() ) }">
		</MvIF>

		<MvASSIGN NAME = "l.componentversiondata:image_count"	VALUE = "{ miva_array_insert_var( l.componentversiondata:images, l.image, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Upload_Build_Templates" PARAMETERS = "extraction_dir var, package_data var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.componentversiondata:type ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.package_data:upgrade_template"			VALUE = "{ trim( l.package_data:upgrade_template ) }">
	<MvASSIGN NAME = "l.package_data:initialization_template"	VALUE = "{ trim( l.package_data:initialization_template ) }">
	<MvASSIGN NAME = "l.package_data:instance_template"			VALUE = "{ trim( l.package_data:instance_template ) }">

	<MvIF EXPR = "{ NOT ISNULL l.package_data:upgrade_template }">
		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:upgrade_template ), 'data', l.componentversiondata:upgrade_template_source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00359', 'Upgrade template file \'' $ l.package_data:upgrade_template $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:upgrade_template_source ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00360', 'Failed to compile upgrade template: ' $ g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.package_data:initialization_template }">
		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:initialization_template ), 'data', l.componentversiondata:initialization_template_source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00330', 'Initialization template file \'' $ l.package_data:initialization_template $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:initialization_template_source ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00331', 'Failed to compile initialization template: ' $ g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.package_data:instance_template }">
		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.package_data:instance_template ), 'data', l.componentversiondata:instance_template_source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00332', 'Instance template file \'' $ l.package_data:instance_template $ '\' not found' ) }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.componentversiondata:instance_template_source ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00333', 'Failed to compile instance template: ' $ g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Upload_Build_Resources" PARAMETERS = "extraction_dir var, package_data var, componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversiondata:scripts"			VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:script_count"		VALUE = 0>
	<MvASSIGN NAME = "l.componentversiondata:styles"			VALUE = "">
	<MvASSIGN NAME = "l.componentversiondata:style_count"		VALUE = 0>

	<MvFOREACH ITERATOR = "l.input_script" ARRAY = "l.package_data:scripts">
		<MvASSIGN NAME = "l.input_script:filepath"				VALUE = "{ trim( l.input_script:filepath ) }">
		<MvASSIGN NAME = "l.input_script:resource_code"			VALUE = "{ trim( l.input_script:resource_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.input_script:resource_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00334', g.Validation_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.script"								VALUE = "">
		<MvASSIGN NAME = "l.script:resource_code"				VALUE = "{ l.input_script:resource_code }">

		<MvIF EXPR = "{ ISNULL l.input_script:filepath }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00335', 'Invalid filepath' ) }">
		</MvIF>

		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.input_script:filepath ), 'data', l.script:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00336', 'Script file \'' $ l.input_script:filepath $ '\' not found: ' $ file_last_error() ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT miva_member_exists( l.input_script, 'attributes' ) }">
			<MvASSIGN NAME = "l.null"							VALUE = "{ [ g.Module_Feature_TUI_UT ].JavaScriptResource_Default_Attributes( 'Z', l.script:attributes ) }">
		<MvELSE>
			<MvFOREACH ITERATOR = "l.input_attribute" ARRAY = "l.input_script:attributes">
				<MvASSIGN NAME = "l.input_attribute:name"		VALUE = "{ trim( l.input_attribute:name ) }">
				<MvASSIGN NAME = "l.input_attribute:value"		VALUE = "{ trim( l.input_attribute:value ) }">

				<MvASSIGN NAME = "l.attribute"					VALUE = "">
				<MvASSIGN NAME = "l.attribute:name"				VALUE = "{ l.input_attribute:name }">
				<MvASSIGN NAME = "l.attribute:value"			VALUE = "{ l.input_attribute:value }">

				<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert_var( l.script:attributes, l.attribute, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvASSIGN NAME = "l.componentversiondata:script_count"	VALUE = "{ miva_array_insert_var( l.componentversiondata:scripts, l.script, -1 ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.input_style" ARRAY = "l.package_data:styles">
		<MvASSIGN NAME = "l.input_style:filepath"				VALUE = "{ trim( l.input_style:filepath ) }">
		<MvASSIGN NAME = "l.input_style:resource_code"			VALUE = "{ trim( l.input_style:resource_code ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.input_style:resource_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00337', g.Validation_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.style"								VALUE = "">
		<MvASSIGN NAME = "l.style:resource_code"				VALUE = "{ l.input_style:resource_code }">

		<MvIF EXPR = "{ ISNULL l.input_style:filepath }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00338', 'Invalid filepath' ) }">
		</MvIF>

		<MvIF EXPR = "{ file_read( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.extraction_dir, l.input_style:filepath ), 'data', l.style:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00339', 'Style file \'' $ l.input_style:filepath $ '\' not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT miva_member_exists( l.input_style, 'attributes' ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_UT ].CSSResource_Default_Attributes( 'Z', l.style:attributes ) }">
		<MvELSE>
			<MvFOREACH ITERATOR = "l.input_attribute" ARRAY = "l.input_style:attributes">
				<MvASSIGN NAME = "l.input_attribute:name"		VALUE = "{ trim( l.input_attribute:name ) }">
				<MvASSIGN NAME = "l.input_attribute:value"		VALUE = "{ trim( l.input_attribute:value ) }">

				<MvASSIGN NAME = "l.attribute"					VALUE = "">
				<MvASSIGN NAME = "l.attribute:name"				VALUE = "{ l.input_attribute:name }">
				<MvASSIGN NAME = "l.attribute:value"			VALUE = "{ l.input_attribute:value }">

				<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert_var( l.style:attributes, l.attribute, -1 ) }">
			</MvFOREACH>
		</MvIF>

		<MvASSIGN NAME = "l.componentversiondata:style_count"	VALUE = "{ miva_array_insert_var( l.componentversiondata:styles, l.style, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Load( l.component, l.componentversion ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.result"			VALUE = "{ JSON_FlexRegisteredComponentVersion_Download_LowLevel( l.component, l.componentversion, l.temp_package, l.temp_directory ) }">

	<MvIF EXPR = "{ l.result }">
		<MvIF EXPR = "{ file_read( l.temp_package, 'data', l.package_source ) LT 0 }">
			<MvASSIGN NAME = "l.result" VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( 'MER-CMP-MV-FLEX-00340', 'Flex Component package not found' ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Content-Type',			'application/x-gtar' ) }">
			<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Content-Disposition',	'attachment; filename=' $ FilepathSafeString( l.component:code $ '_v' $ glosub( l.componentversion:version, '.', '_' ) ) $ '.tar.bz2' ) }">

			<MvEVAL EXPR = "{ l.package_source }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.null"			VALUE = "{ fdelete( l.temp_package ) }">

	<MvIF EXPR = "{ NOT ISNULL l.temp_directory }">
		<MvASSIGN NAME = "l.null"		VALUE = "{ [ g.Module_Library_Utilities ].Directory_Delete( l.temp_directory, 'data' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_LowLevel" PARAMETERS = "component var, componentversion var, temp_package var, temp_directory var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Read
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.data" VALUE = "">

	<MvIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Download_Load_ManagedPropertyVersion( l.component, l.componentversion, l.data ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Download_Load_Images( l.component, l.componentversion, l.data ) }">					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Download_Load_Templates( l.component, l.componentversion, l.data ) }">				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Download_Load_Resources( l.component, l.componentversion, l.data ) }">				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Write
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.temp_directory" VALUE = "{ MakeSessionID() }">

	<MvFOR INDEX = "l.pos" COUNT = 100>
		<MvIF EXPR = "{ NOT fexists( l.temp_directory ) }">
			<MvFORSTOP>
		</MvIF>

		<MvASSIGN NAME = "l.temp_directory" VALUE = "{ MakeSessionID() }">
	</MvFOR>

	<MvIF EXPR = "{ l.pos GT 100 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( 'MER-CMP-MV-FLEX-00341', 'Unable to generate unique extraction directory after 100 attempts' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.temp_package" VALUE = "{ l.temp_directory $ '.tar.bz2' }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.temp_directory ) }">						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.temp_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Download_Write_Config( l.component, l.componentversion, l.temp_directory, l.data ) }">			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Download_Write_Preview( l.component, l.componentversion, l.temp_directory, l.data ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Download_Write_Images( l.component, l.componentversion, l.temp_directory, l.data ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Download_Write_Templates( l.component, l.componentversion, l.temp_directory, l.data ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT JSON_FlexRegisteredComponentVersion_Download_Write_Resources( l.component, l.componentversion, l.temp_directory, l.data ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT tar_create( l.temp_package, 'data', l.temp_directory, 'data', 'compress' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_HTML_Error( 'MER-CMP-MV-FLEX-00342', 'Failed to create Flex Component package: ' $ tar_last_error() ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_Load_Images" PARAMETERS = "component var, componentversion var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data:images"		VALUE = "">
	<MvASSIGN NAME = "l.data:image_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.image_filename" ARRAY = "l.data:managedpropertyversion:settings:images">
		<MvIF EXPR = "{ NOT SanitizeComponentImage( l.image_filename, l.image ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.data:image_count" VALUE = "{ miva_array_insert_var( l.data:images, l.image, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_Load_Templates" PARAMETERS = "component var, componentversion var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.component:ctype ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT l.componentversion:upgver_id	AND
						NOT l.componentversion:initver_id	AND
						NOT l.componentversion:instver_id }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.componentversion:upgver_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_ID( l.componentversion:upgver_id, l.data:templateversion_upgrade ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00361', 'Upgrade template not found' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.componentversion:initver_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_ID( l.componentversion:initver_id, l.data:templateversion_initialization ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00343', 'Initialization template not found' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.componentversion:instver_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_ID( l.componentversion:instver_id, l.data:templateversion_instance ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00344', 'Instance template not found' ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_Load_Resources" PARAMETERS = "component var, componentversion var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data:scripts"				VALUE = "">
	<MvASSIGN NAME = "l.data:script_count"			VALUE = 0>
	<MvASSIGN NAME = "l.data:styles"				VALUE = "">
	<MvASSIGN NAME = "l.data:style_count"			VALUE = 0>

	<MvFOREACH ITERATOR = "l.componentversionscriptresource" ARRAY = "l.componentversionscriptresources" COUNT = "{ FlexComponentVersionJavaScriptResourceList_Load_Version( l.componentversion:id, l.componentversionscriptresources ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceVersion_Load_ID( l.componentversionscriptresource:resver_id, l.scriptresourceversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ l.scriptresourceversion:type NE 'Z' }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedContent_Load_ID( l.scriptresourceversion:content_id, l.managedcontent ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.script"					VALUE = "">
		<MvASSIGN NAME = "l.script:resource_code"	VALUE = "{ l.scriptresourceversion:code }">
		<MvASSIGN NAME = "l.script:attributes"		VALUE = "{ l.scriptresourceversion:attributes }">
		<MvASSIGN NAME = "l.script:filepath"		VALUE = "{ 'src/js/' $ FilepathSafeString( l.scriptresourceversion:code ) $ '.js' }">
		<MvASSIGN NAME = "l.script:source"			VALUE = "{ l.managedcontent:content }">

		<MvASSIGN NAME = "l.data:script_count"		VALUE = "{ miva_array_insert_var( l.data:scripts, l.script, -1 ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.componentversioncssresource" ARRAY = "l.componentversioncssresources" COUNT = "{ FlexComponentVersionCSSResourceList_Load_Version( l.componentversion:id, l.componentversioncssresources ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceVersion_Load_ID( l.componentversioncssresource:resver_id, l.cssresourceversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ l.cssresourceversion:type NE 'Z' }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedContent_Load_ID( l.cssresourceversion:content_id, l.managedcontent ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.style"					VALUE = "">
		<MvASSIGN NAME = "l.style:resource_code"	VALUE = "{ l.cssresourceversion:code }">
		<MvASSIGN NAME = "l.style:attributes"		VALUE = "{ l.cssresourceversion:attributes }">
		<MvASSIGN NAME = "l.style:filepath"			VALUE = "{ 'src/css/' $ FilepathSafeString( l.cssresourceversion:code ) $ '.css' }">
		<MvASSIGN NAME = "l.style:source"			VALUE = "{ l.managedcontent:content }">

		<MvASSIGN NAME = "l.data:style_count"		VALUE = "{ miva_array_insert_var( l.data:styles, l.style, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_Load_ManagedPropertyVersion" PARAMETERS = "component var, componentversion var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyVersion_Load_ID( l.componentversion:propver_id, l.data:managedpropertyversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00345', 'Managed property version not found' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_Write_Config" PARAMETERS = "component var, componentversion var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.sanitized_version" VALUE = "{ ComponentManager_Sanitize_Version( l.componentversion:version ) }">

	<MvCAPTURE VARIABLE = "l.flex_file_source" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">{
		"code":								"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.component:code ) }">",
		"name":								"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.data:managedpropertyversion:settings:name ) }">",
		"type":								"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.component:ctype ) }">",
		"version":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.sanitized_version ) }">",
		"managed":							true

		<MvIF EXPR = "{ NOT ISNULL l.data:managedpropertyversion:settings:resourcegroup_code }">
			, "resourcegroup_code":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.data:managedpropertyversion:settings:resourcegroup_code ) }">"
		</MvIF>

		<MvIF EXPR = "{ ComponentManager_Validate_Type_Component( l.data:managedpropertyversion:settings:type ) }">
			, "category":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.data:managedpropertyversion:settings:category ) }">",
			"description":					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.data:managedpropertyversion:settings:description ) }">",
			"preview_component_selector":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.data:managedpropertyversion:settings:preview_component_selector ) }">",
			"sample_data_types":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.data:managedpropertyversion:settings:sample_data_types ) }">,
			"properties":					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.data:managedpropertyversion:settings:properties ) }">,
			"advanced_properties":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.data:managedpropertyversion:settings:advanced_properties ) }">,
			"defaults":						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.data:managedpropertyversion:settings:defaults ) }">

			<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_upgrade }">
				, "upgrade_template": "src/templates/upgrade.mvt"
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_initialization }">
				, "initialization_template": "src/templates/init.mvt"
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_instance }">
				, "instance_template": "src/templates/instance.mvt"
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.data:managedpropertyversion:settings:preview }">
				, "preview": "src/images/preview.svg"
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.data:managedpropertyversion:settings:detailed_preview }">
				, "detailed_preview": "src/images/detailed_preview.svg"
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.data:image_count }">
			, "images":
			[
				<MvASSIGN NAME = "l.output_image_count" VALUE = 0>

				<MvFOREACH ITERATOR = "l.image" ARRAY = "l.data:images" COUNT = "{ l.data:image_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_image_count ) }">
						"source_filepath":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.image:filepath ) }">",
						"destination_filepath":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.image:filepath ) }">"
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvFOREACH>
			]
		</MvIF>

		<MvIF EXPR = "{ l.data:script_count }">
			, "scripts":
			[
				<MvASSIGN NAME = "l.output_script_count" VALUE = 0>

				<MvFOREACH ITERATOR = "l.script" ARRAY = "l.data:scripts" COUNT = "{ l.data:script_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_script_count ) }">
						"filepath":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.script:filepath ) }">",
						"resource_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.script:resource_code ) }">",
						"attributes":
						[
							<MvASSIGN NAME = "l.attribute_count" VALUE = 0>

							<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.script:attributes">
								<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
									"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
									"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
								<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
							</MvFOREACH>
						]
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvFOREACH>
			]
		</MvIF>

		<MvIF EXPR = "{ l.data:style_count }">
			, "styles":
			[
				<MvASSIGN NAME = "l.output_style_count" VALUE = 0>

				<MvFOREACH ITERATOR = "l.style" ARRAY = "l.data:styles" COUNT = "{ l.data:style_count }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_style_count ) }">
						"filepath":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.style:filepath ) }">",
						"resource_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.style:resource_code ) }">",
						"attributes":
						[
							<MvASSIGN NAME = "l.attribute_count" VALUE = 0>

							<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.style:attributes">
								<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.attribute_count ) }">
									"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:name ) }">",
									"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.attribute:value ) }">"
								<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
							</MvFOREACH>
						]
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvFOREACH>
			]
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.data:managedpropertyversion:settings:depends }">
			, "depends":
			{
				<MvFOREACH INDEX = "l.pos" ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ miva_struct_members( l.data:managedpropertyversion:settings:depends, l.dependency_names ) }">
					<MvREFERENCEARRAY NAME = "l.dependency_value" VARIABLE = "l.data:managedpropertyversion:settings:depends">
						<MvMEMBER NAME = "{ l.dependency_name }">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ l.pos GT 1 }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_value ) }">"
				</MvFOREACH>
			}
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.data:managedpropertyversion:settings:conflicts }">
			, "conflicts":
			{
				<MvFOREACH INDEX = "l.pos" ITERATOR = "l.conflict_name" ARRAY = "l.conflict_names" COUNT = "{ miva_struct_members( l.data:managedpropertyversion:settings:conflicts, l.conflict_names ) }">
					<MvREFERENCEARRAY NAME = "l.conflict_value" VARIABLE = "l.data:managedpropertyversion:settings:conflicts">
						<MvMEMBER NAME = "{ l.conflict_name }">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ l.pos GT 1 }">
						,
					</MvIF>

					"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_value ) }">"
				</MvFOREACH>
			}
		</MvIF>
	}
	</MvCAPTURE>

	<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'flex.json' ), 'data', l.flex_file_source ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00346', 'Failed to create file \'flex.json\': ' $ file_last_error() ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_Write_Preview" PARAMETERS = "component var, componentversion var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.component:ctype ) OR
					( ISNULL l.data:managedpropertyversion:settings:preview AND ISNULL l.data:managedpropertyversion:settings:detailed_preview ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.images_directory" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/images' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.images_directory ) }">					<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.images_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.data:managedpropertyversion:settings:preview }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/images/preview.svg' ), 'data', l.data:managedpropertyversion:settings:preview ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00347', 'Failed to create file \'src/images/preview.svg\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.data:managedpropertyversion:settings:detailed_preview }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/images/detailed_preview.svg' ), 'data', l.data:managedpropertyversion:settings:detailed_preview ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00376', 'Failed to create file \'src/images/detailed_preview.svg\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_Write_Images" PARAMETERS = "component var, componentversion var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.image" ARRAY = "l.data:images" COUNT = "{ l.data:image_count }">
		<MvASSIGN NAME = "l.file_basepath"	VALUE = "{ [ g.Module_Library_Utilities ].BasePath( l.image:filepath ) }">
		<MvASSIGN NAME = "l.file_directory"	VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.file_basepath ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.file_directory ) }">						<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.file_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.image:filepath ), 'data', l.image:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00368', 'Failed to create file \'' $ l.image:filepath $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_Write_Templates" PARAMETERS = "component var, componentversion var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.component:ctype ) OR
					( ISNULL l.data:templateversion_upgrade AND ISNULL l.data:templateversion_initialization AND ISNULL l.data:templateversion_instance ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.template_directory" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/templates' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.template_directory ) }">						<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.template_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_upgrade }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/templates/upgrade.mvt' ), 'data', l.data:templateversion_upgrade:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00362', 'Failed to create file \'src/templates/upgrade.mvt\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_initialization }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/templates/init.mvt' ), 'data', l.data:templateversion_initialization:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00348', 'Failed to create file \'src/templates/init.mvt\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.data:templateversion_instance }">
		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, 'src/templates/instance.mvt' ), 'data', l.data:templateversion_instance:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00349', 'Failed to create file \'src/templates/instance.mvt\': ' $ file_last_error() ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexRegisteredComponentVersion_Download_Write_Resources" PARAMETERS = "component var, componentversion var, temp_directory var, data var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.script" ARRAY = "l.data:scripts" COUNT = "{ l.data:script_count }">
		<MvASSIGN NAME = "l.file_basepath"	VALUE = "{ [ g.Module_Library_Utilities ].BasePath( l.script:filepath ) }">
		<MvASSIGN NAME = "l.file_directory"	VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.file_basepath ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.file_directory ) }">						<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.file_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.script:filepath ), 'data', l.script:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00350', 'Failed to create file \'' $ l.script:filepath $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.style" ARRAY = "l.data:styles" COUNT = "{ l.data:style_count }">
		<MvASSIGN NAME = "l.file_basepath"	VALUE = "{ [ g.Module_Library_Utilities ].BasePath( l.style:filepath ) }">
		<MvASSIGN NAME = "l.file_directory"	VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.file_basepath ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'data', l.file_directory ) }">						<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'data', l.file_directory, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ file_create( [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.temp_directory, l.style:filepath ), 'data', l.style:source ) LT 0 }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00351', 'Failed to create file \'' $ l.style:filepath $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexItem_Load" PARAMETERS = "page var, ref var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_FlexItem', l.item_code ) }">
		<MvIF EXPR = "{ NOT miva_member_exists( l.page:settings:flex, l.item_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00012', 'Flex Item not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'FlexItem_Code', l.item_code ) }">
		<MvIF EXPR = "{ NOT miva_member_exists( l.page:settings:flex, l.item_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00013', 'Flex Item not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00014', 'Unable to load flex item: One of Edit_FlexItem, or FlexItem_Code must be specified' ) }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.ref:flex_item" VARIABLE = "l.page:settings:flex">
		<MvMEMBER NAME = "{ l.item_code }">
	</MvREFERENCEARRAY>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexItemList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.available_filters"					VALUE = "">
	<MvASSIGN NAME = "l.filter"								VALUE = "">
	<MvASSIGN NAME = "l.sort"								VALUE = "">
	<MvASSIGN NAME = "l.offset"								VALUE = 0>
	<MvASSIGN NAME = "l.count"								VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'component_code',	'l.item:component_code' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'component_name',	'l.item:component_name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'item_code', 		'l.item:item_code' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o',		'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o',		'Sort',		l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o:nonneg',	'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o',		'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.items"								VALUE = "">

	<MvFOREACH ITERATOR = "l.item_code" ARRAY = "l.item_codes" COUNT = "{ miva_struct_members( l.page:settings:flex, l.item_codes ) }">
		<MvREFERENCEARRAY NAME = "l.flex_item" VARIABLE = "l.page:settings:flex">
			<MvMEMBER NAME = "{ l.item_code }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.item"							VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.flex_item:component_code, l.managedproperty ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.item:component_name"		VALUE = "<Not Available>">
		<MvELSE>
			<MvIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
				<MvASSIGN NAME = "l.item:component_name"	VALUE = "<Not Available>">
			<MvELSE>
				<MvEVAL EXPR = "{ FlexItemSettings_Sanitize( l.module, l.managedproperty:version:settings, l.flex_item:settings ) }">

				<MvASSIGN NAME = "l.item:component_name"	VALUE = "{ l.managedproperty:version:settings:name }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.item:component_code"			VALUE = "{ l.flex_item:component_code }">
		<MvASSIGN NAME = "l.item:item_code"					VALUE = "{ l.flex_item:item_code }">
		<MvASSIGN NAME = "l.item:settings"					VALUE = "{ l.flex_item:settings }">

		<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.items, l.item, -1 ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.search_expression"					VALUE = "1 EQ 1">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_MivaScript( l.search_expression, l.filter, l.available_filters ) }">

	<MvASSIGN NAME = "l.total_count"						VALUE = "{ miva_array_filter_ref( l.items, 1, l.item, l.search_expression, l.filtered_items ) }">
	<MvASSIGN NAME = "l.null"								VALUE = "{ miva_array_sort( l.filtered_items, 'FlexItemList_Sort_Callback', l.sort ) }">

	<MvASSIGN NAME = "l.output_count"						VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.item" ARRAY = "l.filtered_items" FIRST = "{ l.offset + 1 }" LAST = "{ l.total_count }">
				<MvIF EXPR = "{ ( l.output_count LT l.count ) OR ( l.count EQ 0 ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
						"component_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item:component_code ) }">",
						"component_name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item:component_name ) }">",
						"item_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item:item_code ) }">",

						<MvIF EXPR = "{ miva_variable_type( l.item:settings ) NE 'STRUCTURE' }">
							"settings":		{}
						<MvELSE>
							"settings":		<MvEVAL EXPR = "{ miva_json_encode( l.item:settings, 'pretty' ) }">
						</MvIF>
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvIF>
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexItem_Insert" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ FlexItem_Lockfile_Path( l.page:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_FlexItem_Insert_LowLevel( l.module, l.flex_item ) }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"item_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.flex_item:item_code ) }">",
		"component_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.flex_item:component_code ) }">",

		<MvIF EXPR = "{ miva_variable_type( l.flex_item:settings ) NE 'STRUCTURE' }">
			"settings":		{}
		<MvELSE>
			"settings":		<MvEVAL EXPR = "{ miva_json_encode( l.flex_item:settings, 'pretty' ) }">
		</MvIF>
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexItem_Insert_LowLevel" PARAMETERS = "module var, flex_item var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Create Item
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.flex_item" VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code( 'R', 'Item_Code',		l.flex_item:item_code ) OR
					NOT [ g.Module_JSON ].JSON_Input_Code( 'R', 'Component_Code',	l.flex_item:component_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ miva_member_exists( l.page:settings:flex, l.flex_item:item_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Item_Code', 'Flex Item \'' $ l.flex_item:item_code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Retrieve_Raw( 'Settings', l.flex_item:settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Settings', 'Missing required parameter' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.flex_item:component_code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Component_Code', 'Flex Component not found' ) }">
	<MvELSEIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Component_Code', 'Flex Items may only use Flex Components' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.flex_item:settings:_flex:flex_version"		VALUE = "{ l.module:version }">
	<MvASSIGN NAME = "l.flex_item:settings:_flex:settings_version"	VALUE = "{ ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) }">

	<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible( l.managedproperty:version:settings, l.flex_item:settings, 1 ) }">

	<MvASSIGNARRAY NAME = "l.page:settings:flex" VALUE = "{ l.flex_item }">
		<MvMEMBER NAME = "{ l.flex_item:item_code }">
	</MvASSIGNARRAY>

	<MvCOMMENT>
	|
	| Update Page Settings
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.page, 'Flex Item created' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00016', 'Inserted flex item \'' $ l.flex_item:item_code $ '\' using component \'' $ l.flex_item:component_code $ '\' on page \'' $ l.page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexItem_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ FlexItem_Lockfile_Path( l.page:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_FlexItem_Update_LowLevel( l.module, l.flex_item ) }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"item_code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.flex_item:item_code ) }">",
		"component_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.flex_item:component_code ) }">",

		<MvIF EXPR = "{ miva_variable_type( l.flex_item:settings ) NE 'STRUCTURE' }">
			"settings":		{}
		<MvELSE>
			"settings":		<MvEVAL EXPR = "{ miva_json_encode( l.flex_item:settings, 'pretty' ) }">
		</MvIF>
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexItem_Update_LowLevel" PARAMETERS = "module var, flex_item var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_FlexItem_Load( l.page, l.ref ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Update Flex Item
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.original_flex_item" VALUE = "{ l.ref:flex_item }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code( 'O', 'Item_Code',		l.ref:flex_item:item_code ) OR
					NOT [ g.Module_JSON ].JSON_Input_Code( 'O', 'Component_Code',	l.ref:flex_item:component_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.original_flex_item:item_code, l.ref:flex_item:item_code ) NE 0 }">
		<MvIF EXPR = "{ miva_member_exists( l.page:settings:flex, l.ref:flex_item:item_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Item_Code', 'Flex Item \'' $ l.ref:flex_item:item_code $ '\' already exists' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'flex', l.ref:flex_item:component_code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Component_Code', 'Flex Component not found' ) }">
	<MvELSEIF EXPR = "{ NOT ComponentManager_Validate_Type_Component( l.managedproperty:version:settings:type ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Component_Code', 'Flex Items may only use Flex Components' ) }">
	</MvIF>

	<MvIF EXPR = "{ strcasecmp( l.original_flex_item:component_code, l.ref:flex_item:component_code ) NE 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Exists( 'Settings' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Settings', 'Missing required parameter' ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Exists( 'Settings' ) }">
		<MvEVAL EXPR = "{ FlexItemSettings_Sanitize( l.module, l.managedproperty:version:settings, l.ref:flex_item:settings ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Raw( 'Settings', l.ref:flex_item:settings ) }">

		<MvEVAL EXPR = "{ FlexItemSettings_SanitizeVisible( l.managedproperty:version:settings, l.ref:flex_item:settings, 1 ) }">
	</MvIF>

	<MvASSIGN NAME = "l.ref:flex_item:settings:_flex:flex_version"		VALUE = "{ l.module:version }">
	<MvASSIGN NAME = "l.ref:flex_item:settings:_flex:settings_version"	VALUE = "{ ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) }">

	<MvIF EXPR = "{ strcasecmp( l.original_flex_item:item_code, l.ref:flex_item:item_code ) NE 0 }">
		<MvASSIGNARRAY NAME = "l.page:settings:flex" VALUE = "{ l.ref:flex_item }">
			<MvMEMBER NAME = "{ l.ref:flex_item:item_code }">
		</MvASSIGNARRAY>

		<MvREFERENCEARRAY NAME = "l.ref:flex_item" VARIABLE = "l.page:settings:flex">
			<MvMEMBER NAME = "{ l.ref:flex_item:item_code }">
		</MvREFERENCEARRAY>

		<MvASSIGNARRAY NAME = "l.page:settings:flex" VALUE = "">
			<MvMEMBER NAME = "{ l.original_flex_item:item_code }">
		</MvASSIGNARRAY>
	</MvIF>

	<MvCOMMENT>
	|
	| Update Page Settings
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.page, 'Flex Item updated' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00017', 'Updated flex item \'' $ l.ref:flex_item:item_code $ '\' using component \'' $ l.ref:flex_item:component_code $ '\' on page \'' $ l.page:code $ '\'' ) }">

	<MvASSIGN NAME = "l.flex_item" VALUE = "{ l.ref:flex_item }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexItem_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ FlexItem_Lockfile_Path( l.page:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_FlexItem_Delete_LowLevel() }">
	</MvLOCKFILE>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_FlexItem_Delete_LowLevel" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT JSON_FlexItem_Load( l.page, l.ref ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_flex_item" VALUE = "{ l.ref:flex_item }">

	<MvASSIGNARRAY NAME = "l.page:settings:flex" VALUE = "">
		<MvMEMBER NAME = "{ l.original_flex_item:item_code }">
	</MvASSIGNARRAY>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.page, 'Flex Item deleted' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-MV-FLEX-00018', 'Deleted flex item \'' $ l.original_flex_item:item_code $ '\' using component \'' $ l.original_flex_item:component_code $ '\' from page \'' $ l.page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Feature: clientside
|
</MvCOMMENT>

<MvINCLUDE FILE = "modules/component/cmp-mv-flex/combined.mv">

<MvFUNCTION NAME = "Module_Clientside" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( '.js' EIN g.Filename ) EQ len_var( g.Filename ) }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Filename EQ 'combined.js' }">									<MvFUNCTIONRETURN VALUE = "{ Element_FlexComponent_JavaScript_Combined( l.module ) }">
	<MvELSEIF EXPR = "{ Module_Clientside_Output_File( l.module, g.Filename ) }">	<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Output_File" PARAMETERS = "module var, filename" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/component/cmp-mv-flex/output.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_File_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/component/cmp-mv-flex/integrity.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Combined_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/component/cmp-mv-flex/combined_integrity.mv">
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_FlexComponents
|
</MvCOMMENT>

<MvFUNCTION NAME = "FlexComponent_Read" PARAMETERS = "component var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.component:id"		VALUE = "{ FlexComponents.d.id }">
	<MvASSIGN NAME = "l.component:code"		VALUE = "{ FlexComponents.d.code }">
	<MvASSIGN NAME = "l.component:name"		VALUE = "{ FlexComponents.d.name }">
	<MvASSIGN NAME = "l.component:ctype"	VALUE = "{ FlexComponents.d.ctype }">
	<MvASSIGN NAME = "l.component:prop_id"	VALUE = "{ FlexComponents.d.prop_id }">
	<MvASSIGN NAME = "l.component:upg_id"	VALUE = "{ FlexComponents.d.upg_id }">
	<MvASSIGN NAME = "l.component:init_id"	VALUE = "{ FlexComponents.d.init_id }">
	<MvASSIGN NAME = "l.component:inst_id"	VALUE = "{ FlexComponents.d.inst_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_Load_ID" PARAMETERS = "id, component var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponents"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponents WHERE id = ?' }"
				FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00170', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ FlexComponents.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponents">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-CMP-MV-FLEX-00171' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexComponent_Read( l.component ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponents">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_Load_Code" PARAMETERS = "code, component var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponents"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponents WHERE ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) }"
				FIELDS	= "l.code">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00172', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ FlexComponents.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponents">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-CMP-MV-FLEX-00173' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexComponent_Read( l.component ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponents">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentList_Load_All" PARAMETERS = "components var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponents"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponents ORDER BY id' }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00174', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.component_count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT FlexComponents.d.EOF }">
		<MvEVAL EXPR = "{ FlexComponent_Read( l.components[ ++l.component_count ] ) }">
		<MvSKIP NAME = "Merchant" VIEW = "FlexComponents" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponents">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-CMP-MV-FLEX-00175', l.component_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_Insert" PARAMETERS = "component var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.component:id" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'FlexComponents' ) }">

	<MvIF EXPR = "{ ISNULL l.component:prop_id }">	<MvASSIGN NAME = "l.component:prop_id"	VALUE = 0> </MvIF>
	<MvIF EXPR = "{ ISNULL l.component:upg_id }">	<MvASSIGN NAME = "l.component:upg_id"	VALUE = 0> </MvIF>
	<MvIF EXPR = "{ ISNULL l.component:init_id }">	<MvASSIGN NAME = "l.component:init_id"	VALUE = 0> </MvIF>
	<MvIF EXPR = "{ ISNULL l.component:inst_id }">	<MvASSIGN NAME = "l.component:inst_id"	VALUE = 0> </MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'FlexComponents
						  	( id, code, name, ctype, prop_id, upg_id, init_id, inst_id )
						  VALUES
						  	( ?, ?, ?, ?, ?, ?, ?, ? )' }"
			 FIELDS	= "l.component:id, l.component:code, l.component:name, l.component:ctype,
					   l.component:prop_id, l.component:upg_id, l.component:init_id, l.component:inst_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00176', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_Update" PARAMETERS = "component var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'FlexComponents
						  SET
							code	= ?,
							name	= ?,
							ctype	= ?,
							prop_id	= ?,
							upg_id	= ?,
							init_id	= ?,
							inst_id	= ?
						  WHERE
							id		= ?' }"
			 FIELDS	= "l.component:code, l.component:name, l.component:ctype, l.component:prop_id, l.component:upg_id, l.component:init_id, l.component:inst_id,
					   l.component:id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00177', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_Delete_ID" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponents WHERE id = ?' }"
			 FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00178', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_FlexComponentJavaScriptResources
|
</MvCOMMENT>

<MvFUNCTION NAME = "FlexComponentJavaScriptResource_Read" PARAMETERS = "componentscriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentscriptresource:fc_id"		VALUE = "{ FlexComponentJavaScriptResources.d.fc_id }">
	<MvASSIGN NAME = "l.componentscriptresource:code"		VALUE = "{ FlexComponentJavaScriptResources.d.code }">
	<MvASSIGN NAME = "l.componentscriptresource:res_id"		VALUE = "{ FlexComponentJavaScriptResources.d.res_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentJavaScriptResource_Load_ID" PARAMETERS = "fc_id, res_id, componentscriptresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentJavaScriptResources"
				QUERY	= "{ 'SELECT
								*
							  FROM
								' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources
							  WHERE
								fc_id	= ? AND
								res_id	= ?' }"
				FIELDS	= "l.fc_id, l.res_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00179', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ FlexComponentJavaScriptResources.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentJavaScriptResources">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-CMP-MV-FLEX-00180' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexComponentJavaScriptResource_Read( l.componentscriptresource ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentJavaScriptResources">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentJavaScriptResource_Load_Code" PARAMETERS = "fc_id, code, componentscriptresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentJavaScriptResources"
				QUERY	= "{ 'SELECT
								*
							  FROM
								' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources
							  WHERE
								fc_id	= ? AND
								' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) }"
				FIELDS	= "l.fc_id, l.code">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00181', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ FlexComponentJavaScriptResources.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentJavaScriptResources">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-CMP-MV-FLEX-00182' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexComponentJavaScriptResource_Read( l.componentscriptresource ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentJavaScriptResources">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentJavaScriptResourceList_Load_Component" PARAMETERS = "fc_id, componentscriptresources var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentJavaScriptResources"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources WHERE fc_id = ? ORDER BY id' }"
				FIELDS	= "l.fc_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00183', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentscriptresource_count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT FlexComponentJavaScriptResources.d.EOF }">
		<MvEVAL EXPR = "{ FlexComponentJavaScriptResource_Read( l.componentscriptresources[ ++l.componentscriptresource_count ] ) }">
		<MvSKIP NAME = "Merchant" VIEW = "FlexComponentJavaScriptResources" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentJavaScriptResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-CMP-MV-FLEX-00184', l.componentscriptresource_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentJavaScriptResource_Insert" PARAMETERS = "componentscriptresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentscriptresource:id"	VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'FlexComponentJavaScriptResources' ) }">

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources
						  	( fc_id, code, res_id )
						  VALUES
						 	( ?, ?, ? )' }"
			 FIELDS	= "l.componentscriptresource:fc_id, l.componentscriptresource:code, l.componentscriptresource:res_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00185', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentJavaScriptResource_Delete" PARAMETERS = "componentscriptresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources WHERE fc_id = ? AND ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) }"
			 FIELDS	= "l.componentscriptresource:fc_id, l.componentscriptresource:code">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00186', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentJavaScriptResource_Delete_All_Component" PARAMETERS = "fc_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentJavaScriptResources WHERE fc_id = ?' }"
			 FIELDS	= "l.fc_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00187', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_FlexComponentCSSResources
|
</MvCOMMENT>

<MvFUNCTION NAME = "FlexComponentCSSResource_Read" PARAMETERS = "componentcssresource var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentcssresource:fc_id"		VALUE = "{ FlexComponentCSSResources.d.fc_id }">
	<MvASSIGN NAME = "l.componentcssresource:code"		VALUE = "{ FlexComponentCSSResources.d.code }">
	<MvASSIGN NAME = "l.componentcssresource:res_id"	VALUE = "{ FlexComponentCSSResources.d.res_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentCSSResource_Load_ID" PARAMETERS = "fc_id, res_id, componentcssresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentCSSResources"
				QUERY	= "{ 'SELECT
								*
							  FROM
								' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources
							  WHERE
								fc_id	= ? AND
								res_id	= ?' }"
				FIELDS	= "l.fc_id, l.res_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00188', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ FlexComponentCSSResources.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentCSSResources">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-CMP-MV-FLEX-00189' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexComponentCSSResource_Read( l.componentcssresource ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentCSSResources">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentCSSResource_Load_Code" PARAMETERS = "fc_id, code, componentcssresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentCSSResources"
				QUERY	= "{ 'SELECT
								*
							  FROM
								' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources
							  WHERE
								fc_id	= ? AND
								' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) }"
				FIELDS	= "l.fc_id, l.code">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00190', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ FlexComponentCSSResources.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentCSSResources">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-CMP-MV-FLEX-00191' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexComponentCSSResource_Read( l.componentcssresource ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentCSSResources">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentCSSResourceList_Load_Component" PARAMETERS = "fc_id, componentcssresources var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentCSSResources"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources WHERE fc_id = ? ORDER BY id' }"
				FIELDS	= "l.fc_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00192', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentcssresource_count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT FlexComponentCSSResources.d.EOF }">
		<MvEVAL EXPR = "{ FlexComponentCSSResource_Read( l.componentcssresources[ ++l.componentcssresource_count ] ) }">
		<MvSKIP NAME = "Merchant" VIEW = "FlexComponentCSSResources" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentCSSResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-CMP-MV-FLEX-00193', l.componentcssresource_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentCSSResource_Insert" PARAMETERS = "componentcssresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentcssresource:id" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'FlexComponentCSSResources' ) }">

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources
						  	( fc_id, code, res_id )
						  VALUES
						 	( ?, ?, ? )' }"
			 FIELDS	= "l.componentcssresource:fc_id, l.componentcssresource:code, l.componentcssresource:res_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00194', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentCSSResource_Delete" PARAMETERS = "componentcssresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources WHERE fc_id = ? AND ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) }"
			 FIELDS	= "l.componentcssresource:fc_id, l.componentcssresource:code">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00195', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentCSSResource_Delete_All_Component" PARAMETERS = "fc_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentCSSResources WHERE fc_id = ?' }"
			 FIELDS	= "l.fc_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00196', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_FlexComponentVersions
|
</MvCOMMENT>

<MvFUNCTION NAME = "FlexComponentVersion_Read" PARAMETERS = "componentversion var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversion:id"			VALUE = "{ FlexComponentVersions.d.id }">
	<MvASSIGN NAME = "l.componentversion:fc_id"			VALUE = "{ FlexComponentVersions.d.fc_id }">
	<MvASSIGN NAME = "l.componentversion:version"		VALUE = "{ FlexComponentVersions.d.version }">
	<MvASSIGN NAME = "l.componentversion:propver_id"	VALUE = "{ FlexComponentVersions.d.propver_id }">
	<MvASSIGN NAME = "l.componentversion:upgver_id"		VALUE = "{ FlexComponentVersions.d.upgver_id }">
	<MvASSIGN NAME = "l.componentversion:initver_id"	VALUE = "{ FlexComponentVersions.d.initver_id }">
	<MvASSIGN NAME = "l.componentversion:instver_id"	VALUE = "{ FlexComponentVersions.d.instver_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersion_Load_ID" PARAMETERS = "id, componentversion var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentVersions"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersions WHERE id = ?' }"
				FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00197', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ FlexComponentVersions.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentVersions">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-CMP-MV-FLEX-00198' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexComponentVersion_Read( l.componentversion ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentVersions">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersion_Load_Version" PARAMETERS = "fc_id, version, componentversion var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentVersions"
				QUERY	= "{ 'SELECT
								*
							  FROM
								' $ g.Store_Table_Prefix $ 'FlexComponentVersions
							  WHERE
								fc_id	= ? AND
								' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'version' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) }"
				FIELDS	= "l.fc_id, l.version">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00199', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ FlexComponentVersions.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentVersions">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-CMP-MV-FLEX-00200' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ FlexComponentVersion_Read( l.componentversion ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentVersions">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionList_Load_Component" PARAMETERS = "fc_id, componentversions var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentVersions"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersions WHERE fc_id = ? ORDER BY id' }"
				FIELDS	= "l.fc_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00201', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentversion_count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT FlexComponentVersions.d.EOF }">
		<MvEVAL EXPR = "{ FlexComponentVersion_Read( l.componentversions[ ++l.componentversion_count ] ) }">
		<MvSKIP NAME = "Merchant" VIEW = "FlexComponentVersions" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentVersions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-CMP-MV-FLEX-00202', l.componentversion_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersion_Insert" PARAMETERS = "componentversion var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversion:id" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'FlexComponentVersions' ) }">

	<MvIF EXPR = "{ ISNULL l.componentversion:propver_id }">	<MvASSIGN NAME = "l.componentversion:propver_id"	VALUE = 0> </MvIF>
	<MvIF EXPR = "{ ISNULL l.componentversion:upgver_id }">		<MvASSIGN NAME = "l.componentversion:upgver_id"		VALUE = 0> </MvIF>
	<MvIF EXPR = "{ ISNULL l.componentversion:initver_id }">	<MvASSIGN NAME = "l.componentversion:initver_id"	VALUE = 0> </MvIF>
	<MvIF EXPR = "{ ISNULL l.componentversion:instver_id }">	<MvASSIGN NAME = "l.componentversion:instver_id"	VALUE = 0> </MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'FlexComponentVersions
						  	( id, fc_id, version, propver_id, upgver_id, initver_id, instver_id )
						  VALUES
						 	( ?, ?, ?, ?, ?, ?, ? )' }"
			 FIELDS	= "l.componentversion:id, l.componentversion:fc_id, l.componentversion:version,
			 		   l.componentversion:propver_id, l.componentversion:upgver_id, l.componentversion:initver_id, l.componentversion:instver_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00203', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersion_Delete_ID" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersions WHERE id = ?' }"
			 FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00204', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersion_Delete_Component" PARAMETERS = "fc_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersions WHERE fc_id = ?' }"
			 FIELDS	= "l.fc_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00205', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_FlexComponentVersionJavaScriptResources
|
</MvCOMMENT>

<MvFUNCTION NAME = "FlexComponentVersionJavaScriptResource_Read" PARAMETERS = "componentversionscriptresource var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversionscriptresource:fc_id"		VALUE = "{ FlexComponentVersionJavaScriptResources.d.fc_id }">
	<MvASSIGN NAME = "l.componentversionscriptresource:fcv_id"		VALUE = "{ FlexComponentVersionJavaScriptResources.d.fcv_id }">
	<MvASSIGN NAME = "l.componentversionscriptresource:res_id"		VALUE = "{ FlexComponentVersionJavaScriptResources.d.res_id }">
	<MvASSIGN NAME = "l.componentversionscriptresource:resver_id"	VALUE = "{ FlexComponentVersionJavaScriptResources.d.resver_id }">
	<MvASSIGN NAME = "l.componentversionscriptresource:xref_id"		VALUE = "{ FlexComponentVersionJavaScriptResources.d.xref_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionJavaScriptResourceList_Load_Version" PARAMETERS = "fcv_id, componentversionscriptresources var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentVersionJavaScriptResources"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionJavaScriptResources WHERE fcv_id = ? ORDER BY res_id' }"
				FIELDS	= "l.fcv_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00206', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentversionscriptresource_count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT FlexComponentVersionJavaScriptResources.d.EOF }">
		<MvEVAL EXPR = "{ FlexComponentVersionJavaScriptResource_Read( l.componentversionscriptresources[ ++l.componentversionscriptresource_count ] ) }">
		<MvSKIP NAME = "Merchant" VIEW = "FlexComponentVersionJavaScriptResources" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentVersionJavaScriptResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-CMP-MV-FLEX-00207', l.componentversionscriptresource_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionJavaScriptResource_Insert" PARAMETERS = "componentversionscriptresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversionscriptresource:id" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'FlexComponentVersionJavaScriptResources' ) }">

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'FlexComponentVersionJavaScriptResources
						  	( fc_id, fcv_id, res_id, resver_id, xref_id )
						  VALUES
						 	( ?, ?, ?, ?, ? )' }"
			 FIELDS	= "l.componentversionscriptresource:fc_id, l.componentversionscriptresource:fcv_id, l.componentversionscriptresource:res_id, l.componentversionscriptresource:resver_id, l.componentversionscriptresource:xref_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00208', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionJavaScriptResource_Delete_All_Version" PARAMETERS = "fcv_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionJavaScriptResources WHERE fcv_id = ?' }"
			 FIELDS	= "l.fcv_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00209', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionJavaScriptResource_Delete_All_Component" PARAMETERS = "fc_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionJavaScriptResources WHERE fc_id = ?' }"
			 FIELDS	= "l.fc_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00210', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_FlexComponentVersionCSSResources
|
</MvCOMMENT>

<MvFUNCTION NAME = "FlexComponentVersionCSSResource_Read" PARAMETERS = "componentversioncssresource var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversioncssresource:fc_id"		VALUE = "{ FlexComponentVersionCSSResources.d.fc_id }">
	<MvASSIGN NAME = "l.componentversioncssresource:fcv_id"		VALUE = "{ FlexComponentVersionCSSResources.d.fcv_id }">
	<MvASSIGN NAME = "l.componentversioncssresource:res_id"		VALUE = "{ FlexComponentVersionCSSResources.d.res_id }">
	<MvASSIGN NAME = "l.componentversioncssresource:resver_id"	VALUE = "{ FlexComponentVersionCSSResources.d.resver_id }">
	<MvASSIGN NAME = "l.componentversioncssresource:xref_id"	VALUE = "{ FlexComponentVersionCSSResources.d.xref_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionCSSResourceList_Load_Version" PARAMETERS = "fcv_id, componentversioncssresources var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentVersionCSSResources"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionCSSResources WHERE fcv_id = ? ORDER BY res_id' }"
				FIELDS	= "l.fcv_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00211', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentversioncssresource_count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT FlexComponentVersionCSSResources.d.EOF }">
		<MvEVAL EXPR = "{ FlexComponentVersionCSSResource_Read( l.componentversioncssresources[ ++l.componentversioncssresource_count ] ) }">
		<MvSKIP NAME = "Merchant" VIEW = "FlexComponentVersionCSSResources" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentVersionCSSResources">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-CMP-MV-FLEX-00212', l.componentversioncssresource_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionCSSResource_Insert" PARAMETERS = "componentversioncssresource var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversioncssresource:id"	VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'FlexComponentVersionCSSResources' ) }">

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'FlexComponentVersionCSSResources
						  	( fc_id, fcv_id, res_id, resver_id, xref_id )
						  VALUES
						 	( ?, ?, ?, ?, ? )' }"
			 FIELDS	= "l.componentversioncssresource:fc_id, l.componentversioncssresource:fcv_id, l.componentversioncssresource:res_id, l.componentversioncssresource:resver_id, l.componentversioncssresource:xref_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00213', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionCSSResource_Delete_All_Version" PARAMETERS = "fcv_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionCSSResources WHERE fcv_id = ?' }"
			 FIELDS	= "l.fcv_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00214', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionCSSResource_Delete_All_Component" PARAMETERS = "fc_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionCSSResources WHERE fc_id = ?' }"
			 FIELDS	= "l.fc_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00215', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_FlexComponentVersionDependencies
|
</MvCOMMENT>

<MvFUNCTION NAME = "FlexComponentVersionDependency_Read" PARAMETERS = "componentversiondependency var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.componentversiondependency:fc_id"		VALUE = "{ FlexComponentVersionDependencies.d.fc_id }">
	<MvASSIGN NAME = "l.componentversiondependency:fcv_id"		VALUE = "{ FlexComponentVersionDependencies.d.fcv_id }">
	<MvASSIGN NAME = "l.componentversiondependency:type"		VALUE = "{ FlexComponentVersionDependencies.d.type }">
	<MvASSIGN NAME = "l.componentversiondependency:code"		VALUE = "{ FlexComponentVersionDependencies.d.code }">
	<MvASSIGN NAME = "l.componentversiondependency:op"			VALUE = "{ FlexComponentVersionDependencies.d.op }">
	<MvASSIGN NAME = "l.componentversiondependency:version"		VALUE = "{ FlexComponentVersionDependencies.d.version }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionDependencyList_Load_Version_Depends" PARAMETERS = "fcv_id, componentversiondependencies var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentVersionDependencies"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies WHERE fcv_id = ? AND type = \'depends\' ORDER BY code' }"
				FIELDS	= "l.fcv_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00275', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentversiondependency_count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT FlexComponentVersionDependencies.d.EOF }">
		<MvEVAL EXPR = "{ FlexComponentVersionDependency_Read( l.componentversiondependencies[ ++l.componentversiondependency_count ] ) }">
		<MvSKIP NAME = "Merchant" VIEW = "FlexComponentVersionDependencies" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentVersionDependencies">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-CMP-MV-FLEX-00276', l.componentversiondependency_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionDependencyList_Load_Version_Conflicts" PARAMETERS = "fcv_id, componentversiondependencies var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "FlexComponentVersionDependencies"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies WHERE fcv_id = ? AND type = \'conflicts\' ORDER BY code' }"
				FIELDS	= "l.fcv_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00277', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.componentversiondependency_count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT FlexComponentVersionDependencies.d.EOF }">
		<MvEVAL EXPR = "{ FlexComponentVersionDependency_Read( l.componentversiondependencies[ ++l.componentversiondependency_count ] ) }">
		<MvSKIP NAME = "Merchant" VIEW = "FlexComponentVersionDependencies" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "FlexComponentVersionDependencies">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-CMP-MV-FLEX-00278', l.componentversiondependency_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionDependency_Insert" PARAMETERS = "componentversiondependency var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies
						  	( fc_id, fcv_id, type, code, op, version )
						  VALUES
						 	( ?, ?, ?, ?, ?, ? )' }"
			 FIELDS	= "l.componentversiondependency:fc_id, l.componentversiondependency:fcv_id, l.componentversiondependency:type, l.componentversiondependency:code, l.componentversiondependency:op, l.componentversiondependency:version">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00279', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionDependency_Delete_All_Version" PARAMETERS = "fcv_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies WHERE fcv_id = ?' }"
			 FIELDS	= "l.fcv_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00280', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponentVersionDependency_Delete_All_Component" PARAMETERS = "fc_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'FlexComponentVersionDependencies WHERE fc_id = ?' }"
			 FIELDS	= "l.fc_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00281', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Component Manager Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentManager_Register_Version" PARAMETERS = "componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings"											VALUE = "">
	<MvASSIGN NAME = "l.settings:name"										VALUE = "{ l.componentversiondata:name }">
	<MvASSIGN NAME = "l.settings:type"										VALUE = "{ l.componentversiondata:type }">
	<MvASSIGN NAME = "l.settings:version"									VALUE = "{ l.componentversiondata:version }">
	<MvASSIGN NAME = "l.settings:resourcegroup_code"						VALUE = "{ l.componentversiondata:resourcegroup_code }">
	<MvASSIGN NAME = "l.settings:managed"									VALUE = 1>
	<MvASSIGN NAME = "l.settings:depends"									VALUE = "{ l.componentversiondata:depends }">
	<MvASSIGN NAME = "l.settings:conflicts"									VALUE = "{ l.componentversiondata:conflicts }">

	<MvIF EXPR = "{ l.componentversiondata:type NE 'component' }">
		<MvASSIGN NAME = "l.settings:category"								VALUE = "">
		<MvASSIGN NAME = "l.settings:preview"								VALUE = "">
		<MvASSIGN NAME = "l.settings:detailed_preview"						VALUE = "">
		<MvASSIGN NAME = "l.settings:description"							VALUE = "">
		<MvASSIGN NAME = "l.settings:preview_component_selector"			VALUE = "">
		<MvASSIGN NAME = "l.settings:sample_data_types"						VALUE = "">
		<MvASSIGN NAME = "l.settings:properties"							VALUE = "">
		<MvASSIGN NAME = "l.settings:advanced_properties"					VALUE = "">
		<MvASSIGN NAME = "l.settings:defaults"								VALUE = "">
	<MvELSE>
		<MvASSIGN NAME = "l.settings:category"								VALUE = "{ l.componentversiondata:category }">
		<MvASSIGN NAME = "l.settings:preview"								VALUE = "{ l.componentversiondata:preview }">
		<MvASSIGN NAME = "l.settings:detailed_preview"						VALUE = "{ l.componentversiondata:detailed_preview }">
		<MvASSIGN NAME = "l.settings:description"							VALUE = "{ l.componentversiondata:description }">
		<MvASSIGN NAME = "l.settings:preview_component_selector"			VALUE = "{ l.componentversiondata:preview_component_selector }">
		<MvASSIGN NAME = "l.settings:sample_data_types"						VALUE = "{ l.componentversiondata:sample_data_types }">
		<MvASSIGN NAME = "l.settings:properties"							VALUE = "{ l.componentversiondata:properties }">
		<MvASSIGN NAME = "l.settings:advanced_properties"					VALUE = "{ l.componentversiondata:advanced_properties }">
		<MvASSIGN NAME = "l.settings:defaults"								VALUE = "{ l.componentversiondata:defaults }">
	</MvIF>

	<MvCOMMENT>
	|
	| Create Managed Property / Upgrade Template / Initialization Template / Instance Template / Flex Component If Necessary
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT l.componentversiondata:component_exists }">
		<MvASSIGN NAME = "l.managedproperty"								VALUE = "">
		<MvASSIGN NAME = "l.managedproperty:sync"							VALUE = 1>
		<MvASSIGN NAME = "l.managedproperty:templ_id"						VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedProperty_Insert_LowLevel( l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| Create placeholder branch version on the immutable branch 1
		| to prevent orphaned record cleanup of this property.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyBranchVersion_Insert( 1, l.managedproperty:id, 0 ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.componentversiondata:component"					VALUE = "">
		<MvASSIGN NAME = "l.componentversiondata:component:code"			VALUE = "{ l.componentversiondata:code }">
		<MvASSIGN NAME = "l.componentversiondata:component:name"			VALUE = "{ l.componentversiondata:name }">
		<MvASSIGN NAME = "l.componentversiondata:component:ctype"			VALUE = "{ l.componentversiondata:type }">
		<MvASSIGN NAME = "l.componentversiondata:component:prop_id"			VALUE = "{ l.managedproperty:id }">

		<MvIF EXPR = "{ l.componentversiondata:type NE 'component' }">
			<MvASSIGN NAME = "l.componentversiondata:component:upg_id"		VALUE = 0>
			<MvASSIGN NAME = "l.componentversiondata:component:init_id"		VALUE = 0>
			<MvASSIGN NAME = "l.componentversiondata:component:inst_id"		VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.upgradetemplate:sync"						VALUE = 1>
			<MvASSIGN NAME = "l.upgradetemplate:filename"					VALUE = "{ [ g.Module_Feature_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( 'flex-upgrade-template-' $ tolower( l.componentversiondata:code ) $ '.mvc' ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Insert( l.upgradetemplate ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.initializationtemplate:sync"				VALUE = 1>
			<MvASSIGN NAME = "l.initializationtemplate:filename"			VALUE = "{ [ g.Module_Feature_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( 'flex-initialization-template-' $ tolower( l.componentversiondata:code ) $ '.mvc' ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Insert( l.initializationtemplate ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.instancetemplate:sync"						VALUE = 1>
			<MvASSIGN NAME = "l.instancetemplate:filename"					VALUE = "{ [ g.Module_Feature_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( 'flex-instance-template-' $ tolower( l.componentversiondata:code ) $ '.mvc' ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Insert( l.instancetemplate ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.componentversiondata:component:upg_id"		VALUE = "{ l.upgradetemplate:id }">
			<MvASSIGN NAME = "l.componentversiondata:component:init_id"		VALUE = "{ l.initializationtemplate:id }">
			<MvASSIGN NAME = "l.componentversiondata:component:inst_id"		VALUE = "{ l.instancetemplate:id }">

			<MvCOMMENT>
			|
			| Create placeholder branch versions on the immutable branch 1
			| to prevent orphaned record cleanup of upgrade, initialization, and instance templates.
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateBranchVersion_Insert( 1, l.upgradetemplate:id, 0 )			OR
							NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateBranchVersion_Insert( 1, l.initializationtemplate:id, 0 )	OR
							NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateBranchVersion_Insert( 1, l.instancetemplate:id, 0 ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT FlexComponent_Insert( l.componentversiondata:component ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.componentversiondata:type NE 'component' }">
		<MvASSIGN NAME = "l.settings:upgrade_template_disabled"					VALUE = 1>
		<MvASSIGN NAME = "l.settings:upgrade_template_filename"					VALUE = "">

		<MvASSIGN NAME = "l.upgradetemplateversion"								VALUE = "">
		<MvASSIGN NAME = "l.upgradetemplateversion:id"							VALUE = 0>

		<MvASSIGN NAME = "l.settings:initialization_template_disabled"			VALUE = 1>
		<MvASSIGN NAME = "l.settings:initialization_template_filename"			VALUE = "">

		<MvASSIGN NAME = "l.initializationtemplateversion"						VALUE = "">
		<MvASSIGN NAME = "l.initializationtemplateversion:id"					VALUE = 0>

		<MvASSIGN NAME = "l.settings:instance_template_disabled"				VALUE = 1>
		<MvASSIGN NAME = "l.settings:instance_template_filename"				VALUE = "">

		<MvASSIGN NAME = "l.instancetemplateversion"							VALUE = "">
		<MvASSIGN NAME = "l.instancetemplateversion:id"							VALUE = 0>
	<MvELSE>
		<MvCOMMENT>
		|
		| Create Upgrade Template Version
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_ID( l.componentversiondata:component:upg_id, l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.settings:upgrade_template_filename"					VALUE = "{ l.managedtemplate:filename }">

		<MvIF EXPR = "{ ISNULL l.componentversiondata:upgrade_template_source }">
			<MvASSIGN NAME = "l.settings:upgrade_template_disabled"				VALUE = 1>

			<MvASSIGN NAME = "l.upgradetemplateversion"							VALUE = "">
			<MvASSIGN NAME = "l.upgradetemplateversion:id"						VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.settings:upgrade_template_disabled"				VALUE = 0>

			<MvASSIGN NAME = "l.upgradetemplateversion"							VALUE = "">
			<MvASSIGN NAME = "l.upgradetemplateversion:templ_id"				VALUE = "{ l.componentversiondata:component:upg_id }">
			<MvASSIGN NAME = "l.upgradetemplateversion:user_id"					VALUE = "{ int( g.User:id ) }">
			<MvASSIGN NAME = "l.upgradetemplateversion:immutable"				VALUE = 1>
			<MvASSIGN NAME = "l.upgradetemplateversion:dtstamp"					VALUE = "{ s.dyn_time_t }">
			<MvASSIGN NAME = "l.upgradetemplateversion:source"					VALUE = "{ l.componentversiondata:upgrade_template_source }">
			<MvASSIGN NAME = "l.upgradetemplateversion:settings"				VALUE = "">
			<MvASSIGN NAME = "l.upgradetemplateversion:notes"					VALUE = "Flex Component Registered">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Insert( l.upgradetemplateversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Create Initialization Template Version
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_ID( l.componentversiondata:component:init_id, l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.settings:initialization_template_filename"			VALUE = "{ l.managedtemplate:filename }">

		<MvIF EXPR = "{ ISNULL l.componentversiondata:initialization_template_source }">
			<MvASSIGN NAME = "l.settings:initialization_template_disabled"		VALUE = 1>

			<MvASSIGN NAME = "l.initializationtemplateversion"					VALUE = "">
			<MvASSIGN NAME = "l.initializationtemplateversion:id"				VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.settings:initialization_template_disabled"		VALUE = 0>

			<MvASSIGN NAME = "l.initializationtemplateversion"					VALUE = "">
			<MvASSIGN NAME = "l.initializationtemplateversion:templ_id"			VALUE = "{ l.componentversiondata:component:init_id }">
			<MvASSIGN NAME = "l.initializationtemplateversion:user_id"			VALUE = "{ int( g.User:id ) }">
			<MvASSIGN NAME = "l.initializationtemplateversion:immutable"		VALUE = 1>
			<MvASSIGN NAME = "l.initializationtemplateversion:dtstamp"			VALUE = "{ s.dyn_time_t }">
			<MvASSIGN NAME = "l.initializationtemplateversion:source"			VALUE = "{ l.componentversiondata:initialization_template_source }">
			<MvASSIGN NAME = "l.initializationtemplateversion:settings"			VALUE = "">
			<MvASSIGN NAME = "l.initializationtemplateversion:notes"			VALUE = "Flex Component Registered">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Insert( l.initializationtemplateversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Create Instance Template Version
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_ID( l.componentversiondata:component:inst_id, l.managedtemplate ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.settings:instance_template_filename"				VALUE = "{ l.managedtemplate:filename }">

		<MvIF EXPR = "{ ISNULL l.componentversiondata:instance_template_source }">
			<MvASSIGN NAME = "l.settings:instance_template_disabled"			VALUE = 1>

			<MvASSIGN NAME = "l.instancetemplateversion"						VALUE = "">
			<MvASSIGN NAME = "l.instancetemplateversion:id"						VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.settings:instance_template_disabled"			VALUE = 0>

			<MvASSIGN NAME = "l.instancetemplateversion"						VALUE = "">
			<MvASSIGN NAME = "l.instancetemplateversion:templ_id"				VALUE = "{ l.componentversiondata:component:inst_id }">
			<MvASSIGN NAME = "l.instancetemplateversion:user_id"				VALUE = "{ int( g.User:id ) }">
			<MvASSIGN NAME = "l.instancetemplateversion:immutable"				VALUE = 1>
			<MvASSIGN NAME = "l.instancetemplateversion:dtstamp"				VALUE = "{ s.dyn_time_t }">
			<MvASSIGN NAME = "l.instancetemplateversion:source"					VALUE = "{ l.componentversiondata:instance_template_source }">
			<MvASSIGN NAME = "l.instancetemplateversion:settings"				VALUE = "">
			<MvASSIGN NAME = "l.instancetemplateversion:notes"					VALUE = "Flex Component Registered">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Insert( l.instancetemplateversion ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Create Managed Property Version
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.managedpropertyversion"								VALUE = "">
	<MvASSIGN NAME = "l.managedpropertyversion:prop_id"						VALUE = "{ l.componentversiondata:component:prop_id }">
	<MvASSIGN NAME = "l.managedpropertyversion:user_id"						VALUE = "{ int( g.User:id ) }">
	<MvASSIGN NAME = "l.managedpropertyversion:type"						VALUE = "flex">
	<MvASSIGN NAME = "l.managedpropertyversion:code"						VALUE = "{ l.componentversiondata:code }">
	<MvASSIGN NAME = "l.managedpropertyversion:product_id"					VALUE = 0>
	<MvASSIGN NAME = "l.managedpropertyversion:cat_id"						VALUE = 0>
	<MvASSIGN NAME = "l.managedpropertyversion:immutable"					VALUE = 1>
	<MvASSIGN NAME = "l.managedpropertyversion:settings"					VALUE = "{ l.settings }">
	<MvASSIGN NAME = "l.managedpropertyversion:image_id" 					VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyVersion_Insert_LowLevel( l.managedpropertyversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Create Flex Component Version
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.componentversion"									VALUE = "">
	<MvASSIGN NAME = "l.componentversion:fc_id"								VALUE = "{ l.componentversiondata:component:id }">
	<MvASSIGN NAME = "l.componentversion:version"							VALUE = "{ l.componentversiondata:version }">
	<MvASSIGN NAME = "l.componentversion:propver_id"						VALUE = "{ l.managedpropertyversion:id }">
	<MvASSIGN NAME = "l.componentversion:upgver_id"							VALUE = "{ l.upgradetemplateversion:id }">
	<MvASSIGN NAME = "l.componentversion:initver_id"						VALUE = "{ l.initializationtemplateversion:id }">
	<MvASSIGN NAME = "l.componentversion:instver_id"						VALUE = "{ l.instancetemplateversion:id }">

	<MvIF EXPR = "{ NOT FlexComponentVersion_Insert( l.componentversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Create Images
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.image" ARRAY = "l.componentversiondata:images" COUNT = "{ l.componentversiondata:image_count }">
		<MvIF EXPR = "{ l.image:create }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_FindOrInsert_CreateFile( l.image:filepath, l.image:source, l.null ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.settings:images, l.image:filepath, -1 ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Create/Update JavaScript Resources
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.script" ARRAY = "l.componentversiondata:scripts" COUNT = "{ l.componentversiondata:script_count }">
		<MvIF EXPR = "{ NOT FlexComponentJavaScriptResource_Load_Code( l.componentversiondata:component:id, l.script:resource_code, l.componentscriptresource ) }">
			<MvASSIGN NAME = "l.scriptresource:id"						VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'JavaScriptResources' ) }">
			<MvASSIGN NAME = "l.scriptresource:templ_id"				VALUE = 0>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Insert_LowLevel( l.scriptresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.componentscriptresource:fc_id"			VALUE = "{ l.componentversiondata:component:id }">
			<MvASSIGN NAME = "l.componentscriptresource:code"			VALUE = "{ l.script:resource_code }">
			<MvASSIGN NAME = "l.componentscriptresource:res_id"			VALUE = "{ l.scriptresource:id }">

			<MvIF EXPR = "{ NOT FlexComponentJavaScriptResource_Insert( l.componentscriptresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvCOMMENT>
			|
			| Create placeholder branch version on the immutable branch 1
			| to prevent orphaned record cleanup of this resource.
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceBranchVersion_Insert( 1, l.scriptresource:id, 0 ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedContent_FindOrInsert( l.script:source, l.managedcontent ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_UT ].ManagedContent_Generate_SRI_Attributes( l.managedcontent:id, l.script:attributes ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.scriptresourceversion:code"					VALUE = "{ l.script:resource_code }">
		<MvASSIGN NAME = "l.scriptresourceversion:res_id"				VALUE = "{ l.componentscriptresource:res_id }">
		<MvASSIGN NAME = "l.scriptresourceversion:user_id"				VALUE = "{ int( g.User:id ) }">
		<MvASSIGN NAME = "l.scriptresourceversion:content_id"			VALUE = "{ l.managedcontent:id }">
		<MvASSIGN NAME = "l.scriptresourceversion:immutable"			VALUE = 1>
		<MvASSIGN NAME = "l.scriptresourceversion:type"					VALUE = "Z">
		<MvASSIGN NAME = "l.scriptresourceversion:is_global"			VALUE = 0>
		<MvASSIGN NAME = "l.scriptresourceversion:active"				VALUE = 1>
		<MvASSIGN NAME = "l.scriptresourceversion:file"					VALUE = "">
		<MvASSIGN NAME = "l.scriptresourceversion:mod_code"				VALUE = "cmp-mv-flex">
		<MvASSIGN NAME = "l.scriptresourceversion:mod_data"				VALUE = "">
		<MvASSIGN NAME = "l.scriptresourceversion:attributes"			VALUE = "{ l.script:attributes }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceVersion_Insert( l.scriptresourceversion ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.componentversionscriptresource:fc_id"		VALUE = "{ l.componentversiondata:component:id }">
		<MvASSIGN NAME = "l.componentversionscriptresource:fcv_id"		VALUE = "{ l.componentversion:id }">
		<MvASSIGN NAME = "l.componentversionscriptresource:res_id"		VALUE = "{ l.scriptresourceversion:res_id }">
		<MvASSIGN NAME = "l.componentversionscriptresource:resver_id"	VALUE = "{ l.scriptresourceversion:id }">
		<MvASSIGN NAME = "l.componentversionscriptresource:xref_id"		VALUE = "{ l.scriptresourceversion:xref_id }">

		<MvIF EXPR = "{ NOT FlexComponentVersionJavaScriptResource_Insert( l.componentversionscriptresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.stored_script"								VALUE = "">
		<MvASSIGN NAME = "l.stored_script:resource_code"				VALUE = "{ l.script:resource_code }">

		<MvASSIGN NAME = "l.null"										VALUE = "{ miva_array_insert_var( l.settings:scripts, l.stored_script, -1 ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Create CSS Resources
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.style" ARRAY = "l.componentversiondata:styles" COUNT = "{ l.componentversiondata:style_count }">
		<MvIF EXPR = "{ NOT FlexComponentCSSResource_Load_Code( l.componentversiondata:component:id, l.style:resource_code, l.componentcssresource ) }">
			<MvASSIGN NAME = "l.cssresource:id"							VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'CSSResources' ) }">
			<MvASSIGN NAME = "l.cssresource:templ_id"					VALUE = 0>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Insert_LowLevel( l.cssresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.componentcssresource:fc_id"				VALUE = "{ l.componentversiondata:component:id }">
			<MvASSIGN NAME = "l.componentcssresource:code"				VALUE = "{ l.style:resource_code }">
			<MvASSIGN NAME = "l.componentcssresource:res_id"			VALUE = "{ l.cssresource:id }">

			<MvIF EXPR = "{ NOT FlexComponentCSSResource_Insert( l.componentcssresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvCOMMENT>
			|
			| Create placeholder branch version on the immutable branch 1
			| to prevent orphaned record cleanup of this resource.
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceBranchVersion_Insert( 1, l.cssresource:id, 0 ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedContent_FindOrInsert( l.style:source, l.managedcontent ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_UT ].ManagedContent_Generate_SRI_Attributes( l.managedcontent:id, l.style:attributes ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.cssresourceversion:code"					VALUE = "{ l.style:resource_code }">
		<MvASSIGN NAME = "l.cssresourceversion:res_id"					VALUE = "{ l.componentcssresource:res_id }">
		<MvASSIGN NAME = "l.cssresourceversion:user_id"					VALUE = "{ int( g.User:id ) }">
		<MvASSIGN NAME = "l.cssresourceversion:content_id"				VALUE = "{ l.managedcontent:id }">
		<MvASSIGN NAME = "l.cssresourceversion:immutable"				VALUE = 1>
		<MvASSIGN NAME = "l.cssresourceversion:type"					VALUE = "Z">
		<MvASSIGN NAME = "l.cssresourceversion:is_global"				VALUE = 0>
		<MvASSIGN NAME = "l.cssresourceversion:active"					VALUE = 1>
		<MvASSIGN NAME = "l.cssresourceversion:file"					VALUE = "">
		<MvASSIGN NAME = "l.cssresourceversion:mod_code"				VALUE = "cmp-mv-flex">
		<MvASSIGN NAME = "l.cssresourceversion:mod_data"				VALUE = "">
		<MvASSIGN NAME = "l.cssresourceversion:attributes"				VALUE = "{ l.style:attributes }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceVersion_Insert( l.cssresourceversion ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.componentversioncssresource:fc_id"			VALUE = "{ l.componentversiondata:component:id }">
		<MvASSIGN NAME = "l.componentversioncssresource:fcv_id"			VALUE = "{ l.componentversion:id }">
		<MvASSIGN NAME = "l.componentversioncssresource:res_id"			VALUE = "{ l.cssresourceversion:res_id }">
		<MvASSIGN NAME = "l.componentversioncssresource:resver_id"		VALUE = "{ l.cssresourceversion:id }">
		<MvASSIGN NAME = "l.componentversioncssresource:xref_id"		VALUE = "{ l.cssresourceversion:xref_id }">

		<MvIF EXPR = "{ NOT FlexComponentVersionCSSResource_Insert( l.componentversioncssresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.stored_style"								VALUE = "">
		<MvASSIGN NAME = "l.stored_style:resource_code"					VALUE = "{ l.style:resource_code }">

		<MvASSIGN NAME = "l.null"										VALUE = "{ miva_array_insert_var( l.settings:styles, l.stored_style, -1 ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Insert Dependencies / Conflicts
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.dependency" ARRAY = "l.depends" COUNT = "{ ComponentManager_Convert_Dependencies( l.componentversiondata:depends, l.depends ) }">
		<MvASSIGN NAME = "l.componentversiondependency"				VALUE = "">
		<MvASSIGN NAME = "l.componentversiondependency:fc_id"		VALUE = "{ l.componentversiondata:component:id }">
		<MvASSIGN NAME = "l.componentversiondependency:fcv_id"		VALUE = "{ l.componentversion:id }">
		<MvASSIGN NAME = "l.componentversiondependency:type"		VALUE = "depends">
		<MvASSIGN NAME = "l.componentversiondependency:code"		VALUE = "{ l.dependency:code }">
		<MvASSIGN NAME = "l.componentversiondependency:op"			VALUE = "{ l.dependency:operator }">
		<MvASSIGN NAME = "l.componentversiondependency:version"		VALUE = "{ l.dependency:version }">

		<MvIF EXPR = "{ NOT FlexComponentVersionDependency_Insert( l.componentversiondependency ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.conflict" ARRAY = "l.conflicts" COUNT = "{ ComponentManager_Convert_Dependencies( l.componentversiondata:conflicts, l.conflicts ) }">
		<MvASSIGN NAME = "l.componentversiondependency"				VALUE = "">
		<MvASSIGN NAME = "l.componentversiondependency:fc_id"		VALUE = "{ l.componentversiondata:component:id }">
		<MvASSIGN NAME = "l.componentversiondependency:fcv_id"		VALUE = "{ l.componentversion:id }">
		<MvASSIGN NAME = "l.componentversiondependency:type"		VALUE = "conflicts">
		<MvASSIGN NAME = "l.componentversiondependency:code"		VALUE = "{ l.conflict:code }">
		<MvASSIGN NAME = "l.componentversiondependency:op"			VALUE = "{ l.conflict:operator }">
		<MvASSIGN NAME = "l.componentversiondependency:version"		VALUE = "{ l.conflict:version }">

		<MvIF EXPR = "{ NOT FlexComponentVersionDependency_Insert( l.componentversiondependency ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Update Managed Property Version settings after assigning resources.
	|
	| Flex Component Version XXX Resource requires the Component Version to
	| have been created, which in turn requires the Managed Property Version
	| to have been created. Therefore, we must first insert, then assign the
	| scripts/styles to the settings, then update.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.managedpropertyversion:settings" VALUE = "{ l.settings }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyVersion_Update( l.managedpropertyversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Deregister_Component" PARAMETERS = "component var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ FlexComponent_Delete_ID( l.component:id )								AND
								 FlexComponentVersion_Delete_Component( l.component:id )				AND
								 FlexComponentVersionDependency_Delete_All_Component( l.component:id )	AND
								 FlexComponentCSSResource_Delete_All_Component( l.component:id )		AND
								 FlexComponentVersionCSSResource_Delete_All_Component( l.component:id )	AND
								 FlexComponentJavaScriptResource_Delete_All_Component( l.component:id )	AND
								 FlexComponentVersionJavaScriptResource_Delete_All_Component( l.component:id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Deregister_Version" PARAMETERS = "componentversion var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ FlexComponentVersion_Delete_ID( l.componentversion:id )						AND
								 FlexComponentVersionDependency_Delete_All_Version( l.componentversion:id )		AND
								 FlexComponentVersionCSSResource_Delete_All_Version( l.componentversion:id )	AND
								 FlexComponentVersionJavaScriptResource_Delete_All_Version( l.componentversion:id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Apply_Version" PARAMETERS = "branch var, component var, componentversion var" STANDARDOUTPUTLEVEL = "">	
	<MvASSIGN NAME = "l.existing_componentversioncssresources"					VALUE = "">
	<MvASSIGN NAME = "l.existing_componentversioncssresource_count"				VALUE = 0>

	<MvASSIGN NAME = "l.existing_componentversionscriptresources"				VALUE = "">
	<MvASSIGN NAME = "l.existing_componentversionscriptresource_count"			VALUE = 0>

	<MvASSIGN NAME = "l.componentversioncssresource_count"						VALUE = "{ FlexComponentVersionCSSResourceList_Load_Version( l.componentversion:id, l.componentversioncssresources ) }">
	<MvASSIGN NAME = "l.componentversionscriptresource_count"					VALUE = "{ FlexComponentVersionJavaScriptResourceList_Load_Version( l.componentversion:id, l.componentversionscriptresources ) }">

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Branch_Code( l.branch:id, 'flex', l.component:code, l.managedproperty ) }">
		<MvIF EXPR = "{ FlexComponentVersion_Load_Version( l.component:id, l.managedproperty:version:settings:version, l.existing_componentversion ) }">
			<MvASSIGN NAME = "l.existing_componentversionscriptresource_count"	VALUE = "{ FlexComponentVersionJavaScriptResourceList_Load_Version( l.existing_componentversion:id, l.existing_componentversionscriptresources ) }">
			<MvASSIGN NAME = "l.existing_componentversioncssresource_count"		VALUE = "{ FlexComponentVersionCSSResourceList_Load_Version( l.existing_componentversion:id, l.existing_componentversioncssresources ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ComponentManager_Apply_Version_ManagedProperty( l.branch, l.component, l.componentversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT ComponentManager_Apply_Version_ManagedTemplates( l.branch, l.component, l.componentversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT ComponentManager_Apply_Version_Resources( l.branch, l.component, l.componentversion,
																	  l.existing_componentversioncssresources, l.existing_componentversioncssresource_count, l.existing_componentversionscriptresources, l.existing_componentversionscriptresource_count,
																	  l.componentversioncssresources, l.componentversioncssresource_count, l.componentversionscriptresources, l.componentversionscriptresource_count ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Apply_Version_ManagedProperty" PARAMETERS = "branch var, component var, componentversion var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| If the property already exists on the branch, retain the version id as the old_id for the changeset
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyVersion_Load_Branch_Head( l.branch:id, l.component:prop_id, l.existing_managedpropertyversion ) }">
		<MvASSIGN NAME = "l.old_id" VALUE = "{ l.existing_managedpropertyversion:id }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.old_id" VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| If a different property exists on the branch with the same code, delete it
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Branch_Code( l.branch:id, 'flex', l.component:code, l.existing_managedproperty ) AND
					l.existing_managedproperty:id NE l.component:prop_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_ManagedProperty_Branch( l.branch:id, l.existing_managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyBranchVersion_Insert( l.branch:id, l.component:prop_id, l.componentversion:propver_id ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyBranchVersion_Update_Head( l.branch:id, l.component:prop_id, l.componentversion:propver_id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Record_ManagedPropertyVersion_Branch( l.branch:id, l.component:prop_id, l.old_id, l.componentversion:propver_id, '' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Apply_Version_ManagedTemplates" PARAMETERS = "branch var, component var, componentversion var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.component:ctype NE 'component' }">
		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT l.componentversion:upgver_id	AND
						NOT l.componentversion:initver_id	AND
						NOT l.componentversion:instver_id }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.template_dir" VALUE = "{ g.Module_Root $ 'templates/s' $ padl( g.Store:id, 2, '0' ) $ '/' $ l.branch:tmpldir }">

	<MvIF EXPR = "{ l.componentversion:upgver_id }">
		<MvCOMMENT>
		|
		| If the template already exists on the branch, retain the version id as the old_id for the changeset
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Branch_Head( l.branch:id, l.component:upg_id, l.existing_managedtemplateversion ) }">
			<MvASSIGN NAME = "l.old_id" VALUE = "{ l.existing_managedtemplateversion:id }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.old_id" VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| Load template data and insert a new branch version
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_ID( l.component:upg_id, l.managedtemplate ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00363', 'Failed to load template' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_ID( l.componentversion:upgver_id, l.managedtemplateversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00364', 'Failed to load template version' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.managedtemplateversion:source, l.null, l.template_dir $ l.managedtemplate:filename, l.compile_error ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00365', 'Error compiling template \'' $ l.managedtemplate:filename $ '\': ' $ l.compile_error ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch:id, l.component:upg_id, l.componentversion:upgver_id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch:id, l.component:upg_id, l.componentversion:upgver_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Record_ManagedTemplateVersion_Branch( l.branch:id, l.component:upg_id, l.old_id, l.componentversion:upgver_id, '' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.componentversion:initver_id }">
		<MvCOMMENT>
		|
		| If the template already exists on the branch, retain the version id as the old_id for the changeset
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Branch_Head( l.branch:id, l.component:init_id, l.existing_managedtemplateversion ) }">
			<MvASSIGN NAME = "l.old_id" VALUE = "{ l.existing_managedtemplateversion:id }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.old_id" VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| Load template data and insert a new branch version
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_ID( l.component:init_id, l.managedtemplate ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00233', 'Failed to load template' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_ID( l.componentversion:initver_id, l.managedtemplateversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00234', 'Failed to load template version' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.managedtemplateversion:source, l.null, l.template_dir $ l.managedtemplate:filename, l.compile_error ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00235', 'Error compiling template \'' $ l.managedtemplate:filename $ '\': ' $ l.compile_error ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch:id, l.component:init_id, l.componentversion:initver_id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch:id, l.component:init_id, l.componentversion:initver_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Record_ManagedTemplateVersion_Branch( l.branch:id, l.component:init_id, l.old_id, l.componentversion:initver_id, '' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.componentversion:instver_id }">
		<MvCOMMENT>
		|
		| If the template already exists on the branch, retain the version id as the old_id for the changeset
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Branch_Head( l.branch:id, l.component:inst_id, l.existing_managedtemplateversion ) }">
			<MvASSIGN NAME = "l.old_id" VALUE = "{ l.existing_managedtemplateversion:id }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.old_id" VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| Load template data and insert a new branch version
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_ID( l.component:inst_id, l.managedtemplate ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00236', 'Failed to load template' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_ID( l.componentversion:instver_id, l.managedtemplateversion ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00237', 'Failed to load template version' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT miva_template_compile_itemlist( g.Store:license, l.managedtemplateversion:source, l.null, l.template_dir $ l.managedtemplate:filename, l.compile_error ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-MV-FLEX-00238', 'Error compiling template \'' $ l.managedtemplate:filename $ '\': ' $ l.compile_error ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateBranchVersion_Insert( l.branch:id, l.component:inst_id, l.componentversion:instver_id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateBranchVersion_Update_Head( l.branch:id, l.component:inst_id, l.componentversion:instver_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Record_ManagedTemplateVersion_Branch( l.branch:id, l.component:inst_id, l.old_id, l.componentversion:instver_id, '' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Apply_Version_Resources" PARAMETERS = "branch var, component var, componentversion var,
																			existing_componentversioncssresources var, existing_componentversioncssresource_count var, existing_componentversionscriptresources var, existing_componentversionscriptresource_count var,
																			componentversioncssresources var, componentversioncssresource_count var, componentversionscriptresources var, componentversionscriptresource_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyVersion_Load_ID( l.componentversion:propver_id, l.managedpropertyversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00230', 'Managed property version not found' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Load or Create Resource Group
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.resourcegroup" VALUE = "">

	<MvIF EXPR = "{ NOT ISNULL l.managedpropertyversion:settings:resourcegroup_code }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.managedpropertyversion:settings:resourcegroup_code, l.resourcegroup ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Delete_All_Group( l.resourcegroup:id ) OR
							NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Delete_All_Group( l.resourcegroup:id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.resourcegroup:code" VALUE = "{ l.managedpropertyversion:settings:resourcegroup_code }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Insert( l.resourcegroup ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Process CSS Resources
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.existing_componentversioncssresource" ARRAY = "l.existing_componentversioncssresources" COUNT = "{ l.existing_componentversioncssresource_count }">
		<MvIF EXPR = "{ NOT miva_array_search( l.componentversioncssresources, 1, l.componentversioncssresource, 'l.existing_componentversioncssresource:res_id EQ l.componentversioncssresource:res_id' ) }">
			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CSSResource_Load_Branch_ID( l.branch:id, l.existing_componentversioncssresource:res_id, l.cssresource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_CSSResource_Branch( l.branch:id, l.cssresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.componentversioncssresource" ARRAY = "l.componentversioncssresources" COUNT = "{ l.componentversioncssresource_count }">
		<MvIF EXPR = "{ NOT FlexComponentCSSResource_Load_ID( l.componentversioncssresource:fc_id, l.componentversioncssresource:res_id, l.flexcomponentcssresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| If this resource is on the branch already, retain its xref_id
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CSSResourceVersion_Load_Branch_Head( l.branch:id, l.componentversioncssresource:res_id, l.head_cssresourceversion ) }">
			<MvASSIGN NAME = "l.old_id"		VALUE = "{ l.head_cssresourceversion:id }">
			<MvASSIGN NAME = "l.xref_id"	VALUE = "{ l.head_cssresourceversion:xref_id }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.old_id"		VALUE = 0>
			<MvASSIGN NAME = "l.xref_id"	VALUE = "{ l.componentversioncssresource:xref_id }">
		</MvIF>

		<MvCOMMENT>
		|
		| If there is a different resource on the branch with the same code, delete it
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Load_Branch_Code( l.branch:id, l.flexcomponentcssresource:code, l.cssresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.cssresource:id NE l.componentversioncssresource:res_id }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_CSSResource_Branch( l.branch:id, l.cssresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Fork the cross references if necessary
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceVersion_Load_ID( l.componentversioncssresource:resver_id, l.cssresourceversion ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.cssresourceversion:xref_id NE l.xref_id OR NOT ISNULL l.resourcegroup }">
			<MvIF EXPR = "{ NOT FlexComponent_CSSResourceVersion_Fork_CrossReferences_ID( l.cssresourceversion, l.xref_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceBranchVersion_Insert( l.branch:id, l.cssresourceversion:res_id, l.cssresourceversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceBranchVersion_Update_Head( l.branch:id, l.cssresourceversion:res_id, l.cssresourceversion:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Record_CSSResourceVersion_Branch( l.branch:id, l.cssresourceversion:res_id, l.old_id, l.cssresourceversion:id, l.xref_id, '' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.resourcegroup }">
			<MvASSIGN NAME = "l.cssresourcexgroup"				VALUE = "">
			<MvASSIGN NAME = "l.cssresourcexgroup:css_id"		VALUE = "{ l.cssresourceversion:res_id }">
			<MvASSIGN NAME = "l.cssresourcexgroup:xref_id"		VALUE = "{ l.cssresourceversion:xref_id }">
			<MvASSIGN NAME = "l.cssresourcexgroup:group_id"		VALUE = "{ l.resourcegroup:id }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Insert_LowLevel( l.cssresourcexgroup ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Process JavaScript Resources
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.existing_componentversionscriptresource" ARRAY = "l.existing_componentversionscriptresources" COUNT = "{ l.existing_componentversionscriptresource_count }">
		<MvIF EXPR = "{ NOT miva_array_search( l.componentversionscriptresources, 1, l.componentversionscriptresource, 'l.existing_componentversionscriptresource:res_id EQ l.componentversionscriptresource:res_id' ) }">
			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Branch_ID( l.branch:id, l.existing_componentversionscriptresource:res_id, l.scriptresource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_JavaScriptResource_Branch( l.branch:id, l.scriptresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.componentversionscriptresource" ARRAY = "l.componentversionscriptresources" COUNT = "{ l.componentversionscriptresource_count }">
		<MvIF EXPR = "{ NOT FlexComponentJavaScriptResource_Load_ID( l.componentversionscriptresource:fc_id, l.componentversionscriptresource:res_id, l.flexcomponentscriptresource ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| If this resource is on the branch already, retain its xref_id
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResourceVersion_Load_Branch_Head( l.branch:id, l.componentversionscriptresource:res_id, l.head_scriptresourceversion ) }">
			<MvASSIGN NAME = "l.old_id"		VALUE = "{ l.head_scriptresourceversion:id }">
			<MvASSIGN NAME = "l.xref_id"	VALUE = "{ l.head_scriptresourceversion:xref_id }">
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.old_id"		VALUE = 0>
			<MvASSIGN NAME = "l.xref_id"	VALUE = "{ l.componentversionscriptresource:xref_id }">
		</MvIF>

		<MvCOMMENT>
		|
		| If there is a different resource on the branch with the same code, delete it
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Branch_Code( l.branch:id, l.flexcomponentscriptresource:code, l.scriptresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ l.scriptresource:id NE l.componentversionscriptresource:res_id }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_JavaScriptResource_Branch( l.branch:id, l.scriptresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Fork the cross references if necessary
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceVersion_Load_ID( l.componentversionscriptresource:resver_id, l.scriptresourceversion ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.scriptresourceversion:xref_id NE l.xref_id OR NOT ISNULL l.resourcegroup }">
			<MvIF EXPR = "{ NOT FlexComponent_JavaScriptResourceVersion_Fork_CrossReferences_ID( l.scriptresourceversion, l.xref_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceBranchVersion_Insert( l.branch:id, l.scriptresourceversion:res_id, l.scriptresourceversion:id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceBranchVersion_Update_Head( l.branch:id, l.scriptresourceversion:res_id, l.scriptresourceversion:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Changeset_Record_JavaScriptResourceVersion_Branch( l.branch:id, l.scriptresourceversion:res_id, l.old_id, l.scriptresourceversion:id, l.xref_id, '' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.resourcegroup }">
			<MvASSIGN NAME = "l.scriptresourcexgroup"			VALUE = "">
			<MvASSIGN NAME = "l.scriptresourcexgroup:script_id"	VALUE = "{ l.scriptresourceversion:res_id }">
			<MvASSIGN NAME = "l.scriptresourcexgroup:xref_id"	VALUE = "{ l.scriptresourceversion:xref_id }">
			<MvASSIGN NAME = "l.scriptresourcexgroup:group_id"	VALUE = "{ l.resourcegroup:id }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Insert_LowLevel( l.scriptresourcexgroup ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Apply_Unregistered_Version" PARAMETERS = "componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings"												VALUE = "">
	<MvASSIGN NAME = "l.settings:name"											VALUE = "{ l.componentversiondata:name }">
	<MvASSIGN NAME = "l.settings:type"											VALUE = "{ l.componentversiondata:type }">
	<MvASSIGN NAME = "l.settings:version"										VALUE = "{ l.componentversiondata:version }">
	<MvASSIGN NAME = "l.settings:managed"										VALUE = "{ l.componentversiondata:managed }">
	<MvASSIGN NAME = "l.settings:resourcegroup_code"							VALUE = "{ l.componentversiondata:resourcegroup_code }">
	<MvASSIGN NAME = "l.settings:depends"										VALUE = "{ l.componentversiondata:depends }">
	<MvASSIGN NAME = "l.settings:conflicts"										VALUE = "{ l.componentversiondata:conflicts }">

	<MvIF EXPR = "{ l.componentversiondata:type EQ 'component' }">
		<MvASSIGN NAME = "l.settings:preview"									VALUE = "{ l.componentversiondata:preview }">
		<MvASSIGN NAME = "l.settings:detailed_preview"							VALUE = "{ l.componentversiondata:detailed_preview }">
		<MvASSIGN NAME = "l.settings:description"								VALUE = "{ l.componentversiondata:description }">
		<MvASSIGN NAME = "l.settings:preview_component_selector"				VALUE = "{ l.componentversiondata:preview_component_selector }">
		<MvASSIGN NAME = "l.settings:sample_data_types"							VALUE = "{ l.componentversiondata:sample_data_types }">
		<MvASSIGN NAME = "l.settings:category"									VALUE = "{ l.componentversiondata:category }">
		<MvASSIGN NAME = "l.settings:properties"								VALUE = "{ l.componentversiondata:properties }">
		<MvASSIGN NAME = "l.settings:advanced_properties"						VALUE = "{ l.componentversiondata:advanced_properties }">
		<MvASSIGN NAME = "l.settings:defaults"									VALUE = "{ l.componentversiondata:defaults }">

		<MvCOMMENT>
		|
		| Create Upgrade Template
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ISNULL l.componentversiondata:upgrade_template_source }">
			<MvASSIGN NAME = "l.settings:upgrade_template_disabled"				VALUE = 1>
			<MvASSIGN NAME = "l.settings:upgrade_template_filename"				VALUE = "">
		<MvELSE>
			<MvASSIGN NAME = "l.settings:upgrade_template_disabled"				VALUE = 0>
			<MvASSIGN NAME = "l.settings:upgrade_template_filename"				VALUE = "">

			<MvIF EXPR = "{ NOT FlexComponent_UpgradeTemplate_Create_ManagedTemplate_NoDuplicates( l.componentversiondata:code, l.componentversiondata:upgrade_template_source, l.null, l.settings:upgrade_template_filename ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Create Initialization Template
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ISNULL l.componentversiondata:initialization_template_source }">
			<MvASSIGN NAME = "l.settings:initialization_template_disabled"		VALUE = 1>
			<MvASSIGN NAME = "l.settings:initialization_template_filename"		VALUE = "">
		<MvELSE>
			<MvASSIGN NAME = "l.settings:initialization_template_disabled"		VALUE = 0>
			<MvASSIGN NAME = "l.settings:initialization_template_filename"		VALUE = "">

			<MvIF EXPR = "{ NOT FlexComponent_InitializationTemplate_Create_ManagedTemplate_NoDuplicates( l.componentversiondata:code, l.componentversiondata:initialization_template_source, l.null, l.settings:initialization_template_filename ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Create Instance Template
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ ISNULL l.componentversiondata:instance_template_source }">
			<MvASSIGN NAME = "l.settings:instance_template_disabled"			VALUE = 1>
			<MvASSIGN NAME = "l.settings:instance_template_filename"			VALUE = "">
		<MvELSE>
			<MvASSIGN NAME = "l.settings:instance_template_disabled"			VALUE = 0>
			<MvASSIGN NAME = "l.settings:instance_template_filename"			VALUE = "">

			<MvIF EXPR = "{ NOT FlexComponent_InstanceTemplate_Create_ManagedTemplate_NoDuplicates( l.componentversiondata:code, l.componentversiondata:instance_template_source, l.null, l.settings:instance_template_filename ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Create Images
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.image" ARRAY = "l.componentversiondata:images" COUNT = "{ l.componentversiondata:image_count }">
		<MvIF EXPR = "{ l.image:create }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_FindOrInsert_CreateFile( l.image:filepath, l.image:source, l.null ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.settings:images, l.image:filepath, -1 ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Load or Create Resource Group
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.resourcegroup" VALUE = "">

	<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:resourcegroup_code }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.componentversiondata:resourcegroup_code, l.resourcegroup ) }">
			<MvIF EXPR = "{ l.componentversiondata:managed }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Delete_All_Group( l.resourcegroup:id ) OR
								NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Delete_All_Group( l.resourcegroup:id ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.resourcegroup:code" VALUE = "{ l.componentversiondata:resourcegroup_code }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Insert( l.resourcegroup ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Create JavaScript Resources
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.scripts_filedir_rel"				VALUE = "{ 'scripts/' $ padl( g.Store:id, 8, '0' ) $ '/' $ g.Store:branch:tmpldir $ 'flex/' $ FilepathSafeString( l.componentversiondata:code ) $ '/' }">
	<MvASSIGN NAME = "l.scripts_filedir_abs"				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.scripts_filedir_rel ) }">

	<MvFOREACH ITERATOR = "l.script" ARRAY = "l.componentversiondata:scripts" COUNT = "{ l.componentversiondata:script_count }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.script:resource_code, l.existing_scriptresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_JavaScriptResource( l.existing_scriptresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.componentversiondata:managed }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_ModuleManaged( l.script:resource_code, l.script:attributes, 0, 1, 'cmp-mv-flex', l.script:source, l.scriptresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.scripts_filedir_abs ) }">					<MvFUNCTIONRETURN VALUE = 0>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.scripts_filedir_abs, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.file_safe_resource_code"	VALUE = "{ FilepathSafeString( l.script:resource_code ) }">
			<MvASSIGN NAME = "l.filepath_rel" 				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.scripts_filedir_rel, l.file_safe_resource_code $ '.js' ) }">
			<MvASSIGN NAME = "l.filepath_abs" 				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.filepath_rel ) }">

			<MvASSIGN NAME = "l.null"						VALUE = "{ sdelete( l.filepath_abs ) }">

			<MvIF EXPR = "{ file_create( l.filepath_abs, 'script', l.script:source ) EQ -1 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00262', 'Unable to create file \'' $ l.filepath_rel $ '\': ' $ file_last_error() ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null"						VALUE = "{ schmod( l.filepath_abs, '0644' ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_LocalFile( l.script:resource_code, l.script:attributes, 0, 1, l.filepath_rel, l.scriptresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.stored_script"					VALUE = "">
		<MvASSIGN NAME = "l.stored_script:resource_code"	VALUE = "{ l.scriptresource:code }">

		<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.settings:scripts, l.stored_script, -1 ) }">

		<MvIF EXPR = "{ NOT ISNULL l.resourcegroup }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Insert( l.scriptresource:id, l.resourcegroup:id ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Create CSS Resources
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.styles_filedir_rel"					VALUE = "{ 'css/' $ padl( g.Store:id, 8, '0' ) $ '/' $ g.Store:branch:tmpldir $ 'flex/' $ FilepathSafeString( l.componentversiondata:code ) $ '/' }">
	<MvASSIGN NAME = "l.styles_filedir_abs"					VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.styles_filedir_rel ) }">

	<MvFOREACH ITERATOR = "l.style" ARRAY = "l.componentversiondata:styles" COUNT = "{ l.componentversiondata:style_count }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.style:resource_code, l.existing_cssresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_CSSResource( l.existing_cssresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.componentversiondata:managed }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_ModuleManaged( l.style:resource_code, l.style:attributes, 0, 1, 'cmp-mv-flex', l.style:source, l.cssresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.styles_filedir_abs ) }">					<MvFUNCTIONRETURN VALUE = 0>
			<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.styles_filedir_abs, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.file_safe_resource_code"	VALUE = "{ FilepathSafeString( l.style:resource_code ) }">
			<MvASSIGN NAME = "l.filepath_rel"				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.styles_filedir_rel, l.file_safe_resource_code $ '.css' ) }">
			<MvASSIGN NAME = "l.filepath_abs"				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.filepath_rel ) }">

			<MvASSIGN NAME = "l.null"						VALUE = "{ sdelete( l.filepath_abs ) }">

			<MvIF EXPR = "{ file_create( l.filepath_abs, 'script', l.style:source ) EQ -1 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00263', 'Unable to create file \'' $ l.filepath_rel $ '\': ' $ file_last_error() ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null"						VALUE = "{ schmod( l.filepath_abs, '0644' ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_LocalFile( l.style:resource_code, l.style:attributes, 0, 1, l.filepath_rel, l.cssresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.stored_style"					VALUE = "">
		<MvASSIGN NAME = "l.stored_style:resource_code"		VALUE = "{ l.cssresource:code }">

		<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.settings:styles, l.stored_style, -1 ) }">

		<MvIF EXPR = "{ NOT ISNULL l.resourcegroup }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Insert( l.cssresource:id, l.resourcegroup:id ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Create Managed Property
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedProperty( 'flex', l.componentversiondata:code, 'notemplate', l.null_source, l.settings, l.managedproperty ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Update_Installed" PARAMETERS = "componentversiondata var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings"														VALUE = "{ l.componentversiondata:managedproperty:version:settings }">
	<MvASSIGN NAME = "l.settings:name"													VALUE = "{ l.componentversiondata:name }">
	<MvASSIGN NAME = "l.settings:type"													VALUE = "{ l.componentversiondata:type }">
	<MvASSIGN NAME = "l.settings:version"												VALUE = "{ l.componentversiondata:version }">
	<MvASSIGN NAME = "l.settings:managed"												VALUE = "{ l.componentversiondata:managed }">
	<MvASSIGN NAME = "l.settings:resourcegroup_code"									VALUE = "{ l.componentversiondata:resourcegroup_code }">
	<MvASSIGN NAME = "l.settings:depends"												VALUE = "{ l.componentversiondata:depends }">
	<MvASSIGN NAME = "l.settings:conflicts"												VALUE = "{ l.componentversiondata:conflicts }">

	<MvIF EXPR = "{ l.componentversiondata:type NE 'component' }">
		<MvASSIGN NAME = "l.settings:category"											VALUE = "">
		<MvASSIGN NAME = "l.settings:preview"											VALUE = "">
		<MvASSIGN NAME = "l.settings:detailed_preview"									VALUE = "">
		<MvASSIGN NAME = "l.settings:description"										VALUE = "">
		<MvASSIGN NAME = "l.settings:preview_component_selector"						VALUE = "">
		<MvASSIGN NAME = "l.settings:sample_data_types"									VALUE = "">
		<MvASSIGN NAME = "l.settings:properties"										VALUE = "">
		<MvASSIGN NAME = "l.settings:advanced_properties"								VALUE = "">
		<MvASSIGN NAME = "l.settings:defaults"											VALUE = "">
		<MvASSIGN NAME = "l.settings:upgrade_template_disabled"							VALUE = 1>
		<MvASSIGN NAME = "l.settings:upgrade_template_filename"							VALUE = "">
		<MvASSIGN NAME = "l.settings:initialization_template_disabled"					VALUE = 1>
		<MvASSIGN NAME = "l.settings:initialization_template_filename"					VALUE = "">
		<MvASSIGN NAME = "l.settings:instance_template_disabled"						VALUE = 1>
		<MvASSIGN NAME = "l.settings:instance_template_filename"						VALUE = "">
	<MvELSE>
		<MvASSIGN NAME = "l.settings:category"											VALUE = "{ l.componentversiondata:category }">
		<MvASSIGN NAME = "l.settings:preview"											VALUE = "{ l.componentversiondata:preview }">
		<MvASSIGN NAME = "l.settings:detailed_preview"									VALUE = "{ l.componentversiondata:detailed_preview }">
		<MvASSIGN NAME = "l.settings:description"										VALUE = "{ l.componentversiondata:description }">
		<MvASSIGN NAME = "l.settings:preview_component_selector"						VALUE = "{ l.componentversiondata:preview_component_selector }">
		<MvASSIGN NAME = "l.settings:sample_data_types"									VALUE = "{ l.componentversiondata:sample_data_types }">
		<MvASSIGN NAME = "l.settings:properties"										VALUE = "{ l.componentversiondata:properties }">
		<MvASSIGN NAME = "l.settings:advanced_properties"								VALUE = "{ l.componentversiondata:advanced_properties }">
		<MvASSIGN NAME = "l.settings:defaults"											VALUE = "{ l.componentversiondata:defaults }">

		<MvCOMMENT>
		|
		| Create/Update/Delete Upgrade Template
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.componentversiondata:update_upgrade_template }">
			<MvIF EXPR = "{ ISNULL l.componentversiondata:upgrade_template_source }">
				<MvASSIGN NAME = "l.settings:upgrade_template_disabled"					VALUE = 1>
			<MvELSE>
				<MvASSIGN NAME = "l.settings:upgrade_template_disabled"					VALUE = 0>

				<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:managedtemplate_upgrade }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplateVersion( l.componentversiondata:managedtemplate_upgrade, l.componentversiondata:notes, l.componentversiondata:upgrade_template_source, l.null, l.compile_error ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00366', 'Template compilation error: ' $ l.compile_error ) }">
					</MvIF>
				<MvELSE>
					<MvASSIGN NAME = "l.settings:upgrade_template_filename"				VALUE = "{ [ g.Module_Feature_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( 'flex-upgrade-template-' $ tolower( l.componentversiondata:code ) $ '.mvc' ) }">

					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplate_NoDuplicates( l.componentversiondata:upgrade_template_source, l.null, l.settings:upgrade_template_filename ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Create/Update/Delete Initialization Template
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.componentversiondata:update_initialization_template }">
			<MvIF EXPR = "{ ISNULL l.componentversiondata:initialization_template_source }">
				<MvASSIGN NAME = "l.settings:initialization_template_disabled"			VALUE = 1>
			<MvELSE>
				<MvASSIGN NAME = "l.settings:initialization_template_disabled"			VALUE = 0>

				<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:managedtemplate_initialization }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplateVersion( l.componentversiondata:managedtemplate_initialization, l.componentversiondata:notes, l.componentversiondata:initialization_template_source, l.null, l.compile_error ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00126', 'Template compilation error: ' $ l.compile_error ) }">
					</MvIF>
				<MvELSE>
					<MvASSIGN NAME = "l.settings:initialization_template_filename"		VALUE = "{ [ g.Module_Feature_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( 'flex-initialization-template-' $ tolower( l.componentversiondata:code ) $ '.mvc' ) }">

					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplate_NoDuplicates( l.componentversiondata:initialization_template_source, l.null, l.settings:initialization_template_filename ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Create/Update/Delete Instance Template
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.componentversiondata:update_instance_template }">
			<MvIF EXPR = "{ ISNULL l.componentversiondata:instance_template_source }">
				<MvASSIGN NAME = "l.settings:instance_template_disabled"				VALUE = 1>
			<MvELSE>
				<MvASSIGN NAME = "l.settings:instance_template_disabled"				VALUE = 0>

				<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:managedtemplate_instance }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplateVersion( l.componentversiondata:managedtemplate_instance, l.componentversiondata:notes, l.componentversiondata:instance_template_source, l.null, l.compile_error ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00127', 'Template compilation error: ' $ l.compile_error ) }">
					</MvIF>
				<MvELSE>
					<MvASSIGN NAME = "l.settings:instance_template_filename"			VALUE = "{ [ g.Module_Feature_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( 'flex-instance-template-' $ tolower( l.componentversiondata:code ) $ '.mvc' ) }">

					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplate_NoDuplicates( l.componentversiondata:instance_template_source, l.null, l.settings:instance_template_filename ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.componentversiondata:code NE l.componentversiondata:original_code }">
		<MvASSIGN NAME = "l.update_managedproperty"										VALUE = 1>
		<MvASSIGN NAME = "l.componentversiondata:managedproperty:code"					VALUE = "{ l.componentversiondata:code }">
	</MvIF>

	<MvCOMMENT>
	|
	| Update Managed Property
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.update_managedproperty }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedProperty_Update( l.componentversiondata:managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Create Images
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.image" ARRAY = "l.componentversiondata:images" COUNT = "{ l.componentversiondata:image_count }">
		<MvIF EXPR = "{ l.image:create }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_FindOrInsert_CreateFile( l.image:filepath, l.image:source, l.null ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.settings:images, l.image:filepath, -1 ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Load or Create Resource Group
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.resourcegroup" VALUE = "">

	<MvIF EXPR = "{ NOT ISNULL l.componentversiondata:resourcegroup_code }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ResourceGroup_Load_Code( l.componentversiondata:resourcegroup_code, l.resourcegroup ) }">
			<MvIF EXPR = "{ l.componentversiondata:managed }">
				<MvIF EXPR = "{ l.componentversiondata:update_scripts }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Delete_All_Group( l.resourcegroup:id ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.componentversiondata:update_styles }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Delete_All_Group( l.resourcegroup:id ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvIF>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSE>
			<MvASSIGN NAME = "l.resourcegroup:code" VALUE = "{ l.componentversiondata:resourcegroup_code }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ResourceGroup_Insert( l.resourcegroup ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Update Resources
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.componentversiondata:update_scripts }">
		<MvCOMMENT>
		|
		| Delete Managed Property JavaScript Resources
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.script" ARRAY = "l.componentversiondata:managedproperty:version:settings:scripts">
			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.script:resource_code, l.scriptresource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_JavaScriptResource( l.scriptresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Create JavaScript Resources
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.settings:scripts"					VALUE = "">

		<MvASSIGN NAME = "l.scripts_filedir_rel"				VALUE = "{ 'scripts/' $ padl( g.Store:id, 8, '0' ) $ '/' $ g.Store:branch:tmpldir $ 'flex/' $ FilepathSafeString( l.componentversiondata:code ) $ '/' }">
		<MvASSIGN NAME = "l.scripts_filedir_abs"				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.scripts_filedir_rel ) }">

		<MvFOREACH ITERATOR = "l.script" ARRAY = "l.componentversiondata:scripts" COUNT = "{ l.componentversiondata:script_count }">
			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.script:resource_code, l.existing_scriptresource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_JavaScriptResource( l.existing_scriptresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.componentversiondata:managed }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_ModuleManaged( l.script:resource_code, l.script:attributes, 0, 1, 'cmp-mv-flex', l.script:source, l.scriptresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.scripts_filedir_abs ) }">					<MvFUNCTIONRETURN VALUE = 0>
				<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.scripts_filedir_abs, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvASSIGN NAME = "l.file_safe_resource_code"	VALUE = "{ FilepathSafeString( l.script:resource_code ) }">
				<MvASSIGN NAME = "l.filepath_rel" 				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.scripts_filedir_rel, l.file_safe_resource_code $ '.js' ) }">
				<MvASSIGN NAME = "l.filepath_abs" 				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.filepath_rel ) }">

				<MvASSIGN NAME = "l.null"						VALUE = "{ sdelete( l.filepath_abs ) }">

				<MvIF EXPR = "{ file_create( l.filepath_abs, 'script', l.script:source ) EQ -1 }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00264', 'Unable to create file \'' $ l.filepath_rel $ '\': ' $ file_last_error() ) }">
				</MvIF>

				<MvASSIGN NAME = "l.null"						VALUE = "{ schmod( l.filepath_abs, '0644' ) }">

				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResource_Create_Type_LocalFile( l.script:resource_code, l.script:attributes, 0, 1, l.filepath_rel, l.scriptresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.stored_script"					VALUE = "">
			<MvASSIGN NAME = "l.stored_script:resource_code"	VALUE = "{ l.scriptresource:code }">

			<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.settings:scripts, l.stored_script, -1 ) }">

			<MvIF EXPR = "{ NOT ISNULL l.resourcegroup }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceXGroup_Insert( l.scriptresource:id, l.resourcegroup:id ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ l.componentversiondata:update_styles }">
		<MvCOMMENT>
		|
		| Delete Managed Property CSS Resources
		|
		</MvCOMMENT>

		<MvFOREACH ITERATOR = "l.style" ARRAY = "l.componentversiondata:managedproperty:version:settings:styles">
			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.style:resource_code, l.cssresource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_CSSResource( l.cssresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Create CSS Resources
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.settings:styles"					VALUE = "">

		<MvASSIGN NAME = "l.styles_filedir_rel"					VALUE = "{ 'css/' $ padl( g.Store:id, 8, '0' ) $ '/' $ g.Store:branch:tmpldir $ 'flex/' $ FilepathSafeString( l.componentversiondata:code ) $ '/' }">
		<MvASSIGN NAME = "l.styles_filedir_abs"					VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.styles_filedir_rel ) }">

		<MvFOREACH ITERATOR = "l.style" ARRAY = "l.componentversiondata:styles" COUNT = "{ l.componentversiondata:style_count }">
			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.style:resource_code, l.existing_cssresource ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_CSSResource( l.existing_cssresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.componentversiondata:managed }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_ModuleManaged( l.style:resource_code, l.style:attributes, 0, 1, 'cmp-mv-flex', l.style:source, l.cssresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', l.styles_filedir_abs ) }">					<MvFUNCTIONRETURN VALUE = 0>
				<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathPermissions( 'script', l.styles_filedir_abs, '0755' ) }">	<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvASSIGN NAME = "l.file_safe_resource_code"	VALUE = "{ FilepathSafeString( l.style:resource_code ) }">
				<MvASSIGN NAME = "l.filepath_rel"				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( l.styles_filedir_rel, l.file_safe_resource_code $ '.css' ) }">
				<MvASSIGN NAME = "l.filepath_abs"				VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.filepath_rel ) }">

				<MvASSIGN NAME = "l.null"						VALUE = "{ sdelete( l.filepath_abs ) }">

				<MvIF EXPR = "{ file_create( l.filepath_abs, 'script', l.style:source ) EQ -1 }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00265', 'Unable to create file \'' $ l.filepath_rel $ '\': ' $ file_last_error() ) }">
				</MvIF>

				<MvASSIGN NAME = "l.null"						VALUE = "{ schmod( l.filepath_abs, '0644' ) }">

				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResource_Create_Type_LocalFile( l.style:resource_code, l.style:attributes, 0, 1, l.filepath_rel, l.cssresource ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.stored_style"					VALUE = "">
			<MvASSIGN NAME = "l.stored_style:resource_code"		VALUE = "{ l.cssresource:code }">

			<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.settings:styles, l.stored_style, -1 ) }">

			<MvIF EXPR = "{ NOT ISNULL l.resourcegroup }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceXGroup_Insert( l.cssresource:id, l.resourcegroup:id ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvIF>

	<MvCOMMENT>
	|
	| Do not create a new version if none of the settings have changed
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ crypto_md5( miva_array_serialize( l.componentversiondata:managedproperty:version:settings ) ) NE crypto_md5( miva_array_serialize( l.settings ) ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedPropertyVersion( l.componentversiondata:managedproperty, l.settings ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Remove_Installed" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_ManagedProperty( l.managedproperty ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:upgrade_template_filename }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_ManagedTemplate_Filename( l.managedproperty:version:settings:upgrade_template_filename ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:initialization_template_filename }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_ManagedTemplate_Filename( l.managedproperty:version:settings:initialization_template_filename ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.managedproperty:version:settings:instance_template_filename }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_ManagedTemplate_Filename( l.managedproperty:version:settings:instance_template_filename ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ ComponentManager_Remove_Installed_Resources( l.managedproperty ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Remove_Installed_Resources" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.script" ARRAY = "l.managedproperty:version:settings:scripts">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].JavaScriptResource_Load_Code( l.script:resource_code, l.scriptresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_JavaScriptResource( l.scriptresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.style" ARRAY = "l.managedproperty:version:settings:styles">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].CSSResource_Load_Code( l.style:resource_code, l.cssresource ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_CSSResource( l.cssresource ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Validate_Type_Component" PARAMETERS = "type" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ ( ISNULL l.type ) OR ( l.type EQ 'component' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Validate_Type_Library" PARAMETERS = "type" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.type EQ 'library' }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Sanitize_Version" PARAMETERS = "version" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_splitstring( l.version, '.', l.version_segments, 'trim' ) }">

	<MvFUNCTIONRETURN VALUE = "{ miva_joinstring( l.version_segments, '.', '' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Convert_Dependencies" PARAMETERS = "input_dependencies var, output_dependencies var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.output_dependencies"						VALUE = "">
	<MvASSIGN NAME = "l.output_dependency_count"					VALUE = 0>

	<MvFOREACH ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ miva_struct_members( l.input_dependencies, l.dependency_names ) }">
		<MvREFERENCEARRAY NAME = "l.dependency_value" VARIABLE = "l.input_dependencies">
			<MvMEMBER NAME = "{ l.dependency_name }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.output_dependency"						VALUE = "">
		<MvASSIGN NAME = "l.output_dependency:code"					VALUE = "{ l.dependency_name }">

		<MvIF EXPR = "{ ( '>=' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.output_dependency:operator"			VALUE = "GE">
			<MvASSIGN NAME = "l.output_dependency:version"			VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
			<MvASSIGN NAME = "l.output_dependency:display_version"	VALUE = "{ '>=' $ l.output_dependency:version }">
		<MvELSEIF EXPR = "{ ( '<=' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.output_dependency:operator"			VALUE = "LE">
			<MvASSIGN NAME = "l.output_dependency:version"			VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
			<MvASSIGN NAME = "l.output_dependency:display_version"	VALUE = "{ '<=' $ l.output_dependency:version }">
		<MvELSEIF EXPR = "{ ( '>' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.output_dependency:operator"			VALUE = "GT">
			<MvASSIGN NAME = "l.output_dependency:version"			VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
			<MvASSIGN NAME = "l.output_dependency:display_version"	VALUE = "{ '>' $ l.output_dependency:version }">
		<MvELSEIF EXPR = "{ ( '<' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.output_dependency:operator"			VALUE = "LT">
			<MvASSIGN NAME = "l.output_dependency:version"			VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
			<MvASSIGN NAME = "l.output_dependency:display_version"	VALUE = "{ '<' $ l.output_dependency:version }">
		<MvELSEIF EXPR = "{ ( '!=' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.output_dependency:operator"			VALUE = "NE">
			<MvASSIGN NAME = "l.output_dependency:version"			VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 3, len_var( l.dependency_value ) - 2 ) ) }">
			<MvASSIGN NAME = "l.output_dependency:display_version"	VALUE = "{ '!=' $ l.output_dependency:version }">
		<MvELSEIF EXPR = "{ ( '=' IN l.dependency_value ) EQ 1 }">
			<MvASSIGN NAME = "l.output_dependency:operator"			VALUE = "EQ">
			<MvASSIGN NAME = "l.output_dependency:version"			VALUE = "{ ComponentManager_Sanitize_Version( substring_var( l.dependency_value, 2, len_var( l.dependency_value ) - 1 ) ) }">
			<MvASSIGN NAME = "l.output_dependency:display_version"	VALUE = "{ '=' $ l.output_dependency:version }">
		<MvELSE>
			<MvASSIGN NAME = "l.output_dependency:operator"			VALUE = "EQ">
			<MvASSIGN NAME = "l.output_dependency:version"			VALUE = "{ l.dependency_value }">
			<MvASSIGN NAME = "l.output_dependency:display_version"	VALUE = "{ '=' $ l.output_dependency:version }">
		</MvIF>

		<MvASSIGN NAME = "l.output_dependency_count"				VALUE = "{ miva_array_insert_var( l.output_dependencies, l.output_dependency, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.output_dependency_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Validate_Dependency" PARAMETERS = "dependency var, comparison_code, comparison_version" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ strcasecmp( l.dependency:code, l.comparison_code ) NE 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.dependency_version_segment_count"	VALUE = "{ miva_splitstring( l.dependency:version, '.', l.dependency_version_segments, 'trim' ) }">
	<MvASSIGN NAME = "l.comparison_version_segment_count"	VALUE = "{ miva_splitstring( l.comparison_version, '.', l.comparison_version_segments, 'trim' ) }">

	<MvIF EXPR = "{ ( l.dependency:operator EQ 'NE' ) AND ( l.dependency_version_segment_count NE l.comparison_version_segment_count ) }">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.dependency_version_segment_count NE l.comparison_version_segment_count }">										<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.dependency:operator EQ 'GE' }">		<MvFUNCTIONRETURN VALUE = "{ ComponentManager_Validate_Dependency_GE( l.dependency_version_segments, l.dependency_version_segment_count, l.comparison_version_segments, l.comparison_version_segment_count ) }">
	<MvELSEIF EXPR = "{ l.dependency:operator EQ 'LE' }">	<MvFUNCTIONRETURN VALUE = "{ ComponentManager_Validate_Dependency_LE( l.dependency_version_segments, l.dependency_version_segment_count, l.comparison_version_segments, l.comparison_version_segment_count ) }">
	<MvELSEIF EXPR = "{ l.dependency:operator EQ 'GT' }">	<MvFUNCTIONRETURN VALUE = "{ ComponentManager_Validate_Dependency_GT( l.dependency_version_segments, l.dependency_version_segment_count, l.comparison_version_segments, l.comparison_version_segment_count ) }">
	<MvELSEIF EXPR = "{ l.dependency:operator EQ 'LT' }">	<MvFUNCTIONRETURN VALUE = "{ ComponentManager_Validate_Dependency_LT( l.dependency_version_segments, l.dependency_version_segment_count, l.comparison_version_segments, l.comparison_version_segment_count ) }">
	<MvELSEIF EXPR = "{ l.dependency:operator EQ 'NE' }">	<MvFUNCTIONRETURN VALUE = "{ ComponentManager_Validate_Dependency_NE( l.dependency_version_segments, l.dependency_version_segment_count, l.comparison_version_segments, l.comparison_version_segment_count ) }">
	<MvELSE>												<MvFUNCTIONRETURN VALUE = "{ ComponentManager_Validate_Dependency_EQ( l.dependency_version_segments, l.dependency_version_segment_count, l.comparison_version_segments, l.comparison_version_segment_count ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Validate_Dependency_GE" PARAMETERS = "dependency_version_segments var, dependency_version_segment_count var, comparison_version_segments var, comparison_version_segment_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.version_segment" ARRAY = "l.dependency_version_segments" COUNT = "{ l.dependency_version_segment_count }">
		<MvIF EXPR = "{ l.comparison_version_segments[ l.pos ] LT l.version_segment }">														<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.comparison_version_segments[ l.pos ] GT l.version_segment }">													<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ l.pos EQ l.dependency_version_segment_count AND l.comparison_version_segments[ l.pos ] GE l.version_segment }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Validate_Dependency_LE" PARAMETERS = "dependency_version_segments var, dependency_version_segment_count var, comparison_version_segments var, comparison_version_segment_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.version_segment" ARRAY = "l.dependency_version_segments" COUNT = "{ l.dependency_version_segment_count }">
		<MvIF EXPR = "{ l.comparison_version_segments[ l.pos ] GT l.version_segment }">														<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.comparison_version_segments[ l.pos ] LT l.version_segment }">													<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ l.pos EQ l.dependency_version_segment_count AND l.comparison_version_segments[ l.pos ] LE l.version_segment }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Validate_Dependency_GT" PARAMETERS = "dependency_version_segments var, dependency_version_segment_count var, comparison_version_segments var, comparison_version_segment_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.version_segment" ARRAY = "l.dependency_version_segments" COUNT = "{ l.dependency_version_segment_count }">
		<MvIF EXPR = "{ l.comparison_version_segments[ l.pos ] LT l.version_segment }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.comparison_version_segments[ l.pos ] GT l.version_segment }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Validate_Dependency_LT" PARAMETERS = "dependency_version_segments var, dependency_version_segment_count var, comparison_version_segments var, comparison_version_segment_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.version_segment" ARRAY = "l.dependency_version_segments" COUNT = "{ l.dependency_version_segment_count }">
		<MvIF EXPR = "{ l.comparison_version_segments[ l.pos ] GT l.version_segment }">		<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ l.comparison_version_segments[ l.pos ] LT l.version_segment }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Validate_Dependency_NE" PARAMETERS = "dependency_version_segments var, dependency_version_segment_count var, comparison_version_segments var, comparison_version_segment_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.version_segment" ARRAY = "l.dependency_version_segments" COUNT = "{ l.dependency_version_segment_count }">
		<MvIF EXPR = "{ l.version_segment NE l.comparison_version_segments[ l.pos ] }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentManager_Validate_Dependency_EQ" PARAMETERS = "dependency_version_segments var, dependency_version_segment_count var, comparison_version_segments var, comparison_version_segment_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.version_segment" ARRAY = "l.dependency_version_segments" COUNT = "{ l.dependency_version_segment_count }">
		<MvIF EXPR = "{ l.version_segment NE l.comparison_version_segments[ l.pos ] }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Component State Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentState_Initialize" PARAMETERS = "branch_id, lookup_depends var, lookup_conflicts var, componentstates var, componentstate_count var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Build current component state list for installed components
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.componentstates"							VALUE = "">
	<MvASSIGN NAME = "l.componentstate_count"						VALUE = 0>

	<MvFOREACH ITERATOR = "l.managedproperty" ARRAY = "l.managedproperties" COUNT = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersionList_Load_Branch_Type( l.branch_id, 'flex', l.managedproperties ) }">
		<MvASSIGN NAME = "l.componentstate"							VALUE = "">
		<MvASSIGN NAME = "l.componentstate:original"				VALUE = 1>
		<MvASSIGN NAME = "l.componentstate:code"					VALUE = "{ l.managedproperty:code }">
		<MvASSIGN NAME = "l.componentstate:version"					VALUE = "{ ComponentManager_Sanitize_Version( l.managedproperty:version:settings:version ) }">
		<MvASSIGN NAME = "l.componentstate:managed"					VALUE = "{ l.managedproperty:version:settings:managed }">
		<MvASSIGN NAME = "l.componentstate:enforce_dependencies"	VALUE = 1>
		<MvASSIGN NAME = "l.componentstate:depends_count"			VALUE = "{ ComponentManager_Convert_Dependencies( l.managedproperty:version:settings:depends, l.componentstate:depends ) }">
		<MvASSIGN NAME = "l.componentstate:conflicts_count"			VALUE = "{ ComponentManager_Convert_Dependencies( l.managedproperty:version:settings:conflicts, l.componentstate:conflicts ) }">

		<MvASSIGN NAME = "l.componentstate_count"					VALUE = "{ miva_array_insert_var( l.componentstates, l.componentstate, -1 ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Build lookup table for existing dependencies / conflicts (these will be ignored)
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.lookup_depends"								VALUE = "">
	<MvASSIGN NAME = "l.lookup_conflicts"							VALUE = "">

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.componentstate" ARRAY = "l.componentstates" COUNT = "{ l.componentstate_count }">
		<MvFOREACH ITERATOR = "l.dependency" ARRAY = "l.componentstate:depends" COUNT = "{ l.componentstate:depends_count }">
			<MvASSIGN NAME = "l.dependency_found"					VALUE = 0>

			<MvFOREACH ITERATOR = "l.comparison_componentstate" ARRAY = "l.componentstates" COUNT = "{ l.componentstate_count }">
				<MvIF EXPR = "{ ComponentManager_Validate_Dependency( l.dependency, l.comparison_componentstate:code, l.comparison_componentstate:version ) }">
					<MvASSIGN NAME = "l.dependency_found"			VALUE = 1>
					<MvFOREACHSTOP>
				</MvIF>
			</MvFOREACH>

			<MvIF EXPR = "{ NOT l.dependency_found }">
				<MvASSIGNARRAY NAME = "l.lookup_depends"			VALUE = 1>
					<MvDIMENSION INDEX = "{ l.pos }">
					<MvMEMBER NAME = "{ l.dependency:code }">
					<MvMEMBER NAME = "{ l.dependency:operator }">
					<MvMEMBER NAME = "{ l.dependency:version }">
				</MvASSIGNARRAY>
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.conflict" ARRAY = "l.componentstate:conflicts" COUNT = "{ l.componentstate:conflicts_count }">
			<MvFOREACH ITERATOR = "l.comparison_componentstate" ARRAY = "l.componentstates" COUNT = "{ l.componentstate_count }">
				<MvIF EXPR = "{ ComponentManager_Validate_Dependency( l.conflict, l.comparison_componentstate:code, l.comparison_componentstate:version ) }">
					<MvASSIGNARRAY NAME = "l.lookup_conflicts"		VALUE = 1>
						<MvDIMENSION INDEX = "{ l.pos }">
						<MvMEMBER NAME = "{ l.conflict:code }">
						<MvMEMBER NAME = "{ l.conflict:operator }">
						<MvMEMBER NAME = "{ l.conflict:version }">
						<MvMEMBER NAME = "{ l.comparison_componentstate:code }">
						<MvMEMBER NAME = "{ l.comparison_componentstate:version }">
					</MvASSIGNARRAY>
				</MvIF>
			</MvFOREACH>
		</MvFOREACH>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentState_Append_Action_Add" PARAMETERS = "componentversiondata var, enforce_dependencies, overwrite, componentstates var, componentstate_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ miva_array_search( l.componentstates, 1, l.search_componentstate, '( strcasecmp( l.search_componentstate:code, l.componentversiondata:code ) EQ 0 ) AND ( NOT l.search_componentstate:deleted )' ) }">
		<MvIF EXPR = "{ l.search_componentstate:original AND NOT l.overwrite }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.search_componentstate:deleted"		VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.componentstate"							VALUE = "">
	<MvASSIGN NAME = "l.componentstate:original"				VALUE = 0>
	<MvASSIGN NAME = "l.componentstate:code"					VALUE = "{ l.componentversiondata:code }">
	<MvASSIGN NAME = "l.componentstate:version"					VALUE = "{ l.componentversiondata:version }">
	<MvASSIGN NAME = "l.componentstate:managed"					VALUE = "{ l.componentversiondata:managed }">
	<MvASSIGN NAME = "l.componentstate:enforce_dependencies"	VALUE = "{ l.enforce_dependencies }">
	<MvASSIGN NAME = "l.componentstate:depends_count"			VALUE = "{ ComponentManager_Convert_Dependencies( l.componentversiondata:depends, l.componentstate:depends ) }">
	<MvASSIGN NAME = "l.componentstate:conflicts_count"			VALUE = "{ ComponentManager_Convert_Dependencies( l.componentversiondata:conflicts, l.componentstate:conflicts ) }">

	<MvASSIGN NAME = "l.componentstate_count"					VALUE = "{ miva_array_insert_var( l.componentstates, l.componentstate, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentState_Append_Action_Delete" PARAMETERS = "code, enforce_dependencies, componentstates var, componentstate_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ miva_array_search( l.componentstates, 1, l.search_componentstate, '( strcasecmp( l.search_componentstate:code, l.code ) EQ 0 ) AND ( NOT l.search_componentstate:deleted )' ) }">
		<MvASSIGN NAME = "l.search_componentstate:deleted"				VALUE = 1>
		<MvASSIGN NAME = "l.search_componentstate:enforce_dependencies"	VALUE = "{ l.enforce_dependencies }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentState_Append_Action_DeleteAllUnmanaged" PARAMETERS = "enforce_dependencies, componentstates var, componentstate_count var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.componentstate" ARRAY = "l.componentstates" COUNT = "{ l.componentstate_count }">
		<MvIF EXPR = "{ l.componentstate:managed }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.componentstate:deleted"					VALUE = 1>
		<MvASSIGN NAME = "l.componentstate:enforce_dependencies"	VALUE = "{ l.enforce_dependencies }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentState_Append_Action_Apply" PARAMETERS = "component var, componentversion var, enforce_dependencies, componentstates var, componentstate_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ miva_array_search( l.componentstates, 1, l.search_componentstate, '( strcasecmp( l.search_componentstate:code, l.component:code ) EQ 0 ) AND ( NOT l.search_componentstate:deleted )' ) }">
		<MvASSIGN NAME = "l.search_componentstate:deleted"		VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.depends"								VALUE = "">
	<MvASSIGN NAME = "l.conflicts"								VALUE = "">

	<MvFOREACH ITERATOR = "l.componentversiondependency" ARRAY = "l.componentversiondependencies" COUNT = "{ FlexComponentVersionDependencyList_Load_Version_Depends( l.componentversion:id, l.componentversiondependencies ) }">
		<MvIF EXPR = "{ l.componentversiondependency:op EQ 'GE' }">			<MvASSIGN NAME = "l.comparison" VALUE = ">=">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'LE' }">		<MvASSIGN NAME = "l.comparison" VALUE = "<=">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'GT' }">		<MvASSIGN NAME = "l.comparison" VALUE = ">">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'LT' }">		<MvASSIGN NAME = "l.comparison" VALUE = "<">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'NE' }">		<MvASSIGN NAME = "l.comparison" VALUE = "!=">
		<MvELSE>															<MvASSIGN NAME = "l.comparison" VALUE = "=">
		</MvIF>

		<MvASSIGNARRAY NAME = "l.depends" VALUE = "{ l.comparison $ l.componentversiondependency:version }">
			<MvMEMBER NAME = "{ l.componentversiondependency:code }">
		</MvASSIGNARRAY>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.componentversiondependency" ARRAY = "l.componentversiondependencies" COUNT = "{ FlexComponentVersionDependencyList_Load_Version_Conflicts( l.componentversion:id, l.componentversiondependencies ) }">
		<MvIF EXPR = "{ l.componentversiondependency:op EQ 'GE' }">			<MvASSIGN NAME = "l.comparison" VALUE = ">=">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'LE' }">		<MvASSIGN NAME = "l.comparison" VALUE = "<=">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'GT' }">		<MvASSIGN NAME = "l.comparison" VALUE = ">">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'LT' }">		<MvASSIGN NAME = "l.comparison" VALUE = "<">
		<MvELSEIF EXPR = "{ l.componentversiondependency:op EQ 'NE' }">		<MvASSIGN NAME = "l.comparison" VALUE = "!=">
		<MvELSE>															<MvASSIGN NAME = "l.comparison" VALUE = "=">
		</MvIF>

		<MvASSIGNARRAY NAME = "l.conflicts" VALUE = "{ l.comparison $ l.componentversiondependency:version }">
			<MvMEMBER NAME = "{ l.componentversiondependency:code }">
		</MvASSIGNARRAY>
	</MvFOREACH>

	<MvASSIGN NAME = "l.componentstate"							VALUE = "">
	<MvASSIGN NAME = "l.componentstate:original"				VALUE = 0>
	<MvASSIGN NAME = "l.componentstate:code"					VALUE = "{ l.component:code }">
	<MvASSIGN NAME = "l.componentstate:version"					VALUE = "{ l.componentversion:version }">
	<MvASSIGN NAME = "l.componentstate:managed"					VALUE = 1>
	<MvASSIGN NAME = "l.componentstate:enforce_dependencies"	VALUE = "{ l.enforce_dependencies }">
	<MvASSIGN NAME = "l.componentstate:depends_count"			VALUE = "{ ComponentManager_Convert_Dependencies( l.depends, l.componentstate:depends ) }">
	<MvASSIGN NAME = "l.componentstate:conflicts_count"			VALUE = "{ ComponentManager_Convert_Dependencies( l.conflicts, l.componentstate:conflicts ) }">

	<MvASSIGN NAME = "l.componentstate_count"					VALUE = "{ miva_array_insert_var( l.componentstates, l.componentstate, -1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentState_Should_Validate" PARAMETERS = "componentstate var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.componentstate:enforce_dependencies }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ l.componentstate:deleted }">				<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentState_Find_Dependency" PARAMETERS = "pos var, dependency var, lookup_depends var, componentstates var, componentstate_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.dependency_found" VALUE = 0>

	<MvFOREACH ITERATOR = "l.componentstate" ARRAY = "l.componentstates" COUNT = "{ l.componentstate_count }">
		<MvIF EXPR = "{ l.componentstate:deleted AND l.componentstate:enforce_dependencies }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ ComponentManager_Validate_Dependency( l.dependency, l.componentstate:code, l.componentstate:version ) }">
			<MvASSIGN NAME = "l.dependency_found" VALUE = 1>
			<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT l.dependency_found }">
		<MvREFERENCEARRAY NAME = "l.existing_dependency_error" VARIABLE = "l.lookup_depends">
			<MvDIMENSION INDEX = "{ l.pos }">
			<MvMEMBER NAME = "{ l.dependency:code }">
			<MvMEMBER NAME = "{ l.dependency:operator }">
			<MvMEMBER NAME = "{ l.dependency:version }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT l.existing_dependency_error }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentState_Find_Conflict" PARAMETERS = "pos var, conflict var, lookup_conflicts var, componentstates var, componentstate_count var, conflicting_componentstate var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.componentstate" ARRAY = "l.componentstates" COUNT = "{ l.componentstate_count }">
		<MvIF EXPR = "{ l.componentstate:deleted OR NOT l.componentstate:enforce_dependencies }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ ComponentManager_Validate_Dependency( l.conflict, l.componentstate:code, l.componentstate:version ) }">
			<MvREFERENCEARRAY NAME = "l.existing_conflict_error" VARIABLE = "l.lookup_conflicts">
				<MvDIMENSION INDEX = "{ l.pos }">
				<MvMEMBER NAME = "{ l.conflict:code }">
				<MvMEMBER NAME = "{ l.conflict:operator }">
				<MvMEMBER NAME = "{ l.conflict:version }">
				<MvMEMBER NAME = "{ l.componentstate:code }">
				<MvMEMBER NAME = "{ l.componentstate:version }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT l.existing_conflict_error }">
				<MvASSIGN NAME = "l.conflicting_componentstate" VALUE = "{ l.componentstate }">
				<MvFUNCTIONRETURN VALUE = 1>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentState_Validate" PARAMETERS = "lookup_depends var, lookup_conflicts var, componentstates var, componentstate_count var, combined_dependency_errors var, combined_dependency_error_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.combined_dependency_errors"			VALUE = "">
	<MvASSIGN NAME = "l.combined_dependency_error_count"	VALUE = 0>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.componentstate" ARRAY = "l.componentstates" COUNT = "{ l.componentstate_count }">
		<MvIF EXPR = "{ NOT ComponentState_Should_Validate( l.componentstate ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.dependency_errors"				VALUE = "">
		<MvASSIGN NAME = "l.dependency_errors:code"			VALUE = "{ l.componentstate:code }">
		<MvASSIGN NAME = "l.dependency_errors:version"		VALUE = "{ l.componentstate:version }">
		<MvASSIGN NAME = "l.dependency_errors:depends"		VALUE = "">
		<MvASSIGN NAME = "l.dependency_errors:conflicts"	VALUE = "">

		<MvFOREACH ITERATOR = "l.dependency" ARRAY = "l.componentstate:depends" COUNT = "{ l.componentstate:depends_count }">
			<MvIF EXPR = "{ NOT ComponentState_Find_Dependency( l.pos, l.dependency, l.lookup_depends, l.componentstates, l.componentstate_count ) }">
				<MvASSIGNARRAY NAME = "l.dependency_errors" VALUE = "{ l.dependency:display_version }">
					<MvMEMBER NAME = "depends">
					<MvMEMBER NAME = "{ l.dependency:code }">
				</MvASSIGNARRAY>
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.conflict" ARRAY = "l.componentstate:conflicts" COUNT = "{ l.componentstate:conflicts_count }">
			<MvIF EXPR = "{ ComponentState_Find_Conflict( l.pos, l.conflict, l.lookup_conflicts, l.componentstates, l.componentstate_count, l.conflicting_componentstate ) }">
				<MvASSIGNARRAY NAME = "l.dependency_errors" VALUE = "{ l.conflict:display_version }">
					<MvMEMBER NAME = "conflicts">
					<MvMEMBER NAME = "{ l.conflict:code }">
				</MvASSIGNARRAY>
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ ( NOT ISNULL l.dependency_errors:depends ) OR
						( NOT ISNULL l.dependency_errors:conflicts ) }">
			<MvASSIGN NAME = "l.combined_dependency_error_count" VALUE = "{ miva_array_insert_var( l.combined_dependency_errors, l.dependency_errors, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.combined_dependency_error_count }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ComopnentState_Response_Errors" PARAMETERS = "error_code, error_message, combined_dependency_errors var, combined_dependency_error_count var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Error_WithData_Start( l.error_code, l.error_message ) }">
	[
		<MvASSIGN NAME = "l.output_count" VALUE = 0>

		<MvFOREACH ITERATOR = "l.dependency_errors" ARRAY = "l.combined_dependency_errors" COUNT = "{ l.combined_dependency_error_count }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
				"code":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_errors:code ) }">",
				"version":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_errors:version ) }">"

				<MvIF EXPR = "{ NOT ISNULL l.dependency_errors:depends }">
					, "depends":
					{
						<MvFOREACH INDEX = "l.pos" ITERATOR = "l.dependency_name" ARRAY = "l.dependency_names" COUNT = "{ miva_struct_members( l.dependency_errors:depends, l.dependency_names ) }">
							<MvREFERENCEARRAY NAME = "l.dependency_value" VARIABLE = "l.dependency_errors:depends">
								<MvMEMBER NAME = "{ l.dependency_name }">
							</MvREFERENCEARRAY>

							<MvIF EXPR = "{ l.pos GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.dependency_value ) }">"
						</MvFOREACH>
					}
				</MvIF>

				<MvIF EXPR = "{ NOT ISNULL l.dependency_errors:conflicts }">
					, "conflicts":
					{
						<MvFOREACH INDEX = "l.pos" ITERATOR = "l.conflict_name" ARRAY = "l.conflict_names" COUNT = "{ miva_struct_members( l.dependency_errors:conflicts, l.conflict_names ) }">
							<MvREFERENCEARRAY NAME = "l.conflict_value" VARIABLE = "l.dependency_errors:conflicts">
								<MvMEMBER NAME = "{ l.conflict_name }">
							</MvREFERENCEARRAY>

							<MvIF EXPR = "{ l.pos GT 1 }">
								,
							</MvIF>

							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_name ) }">": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.conflict_value ) }">"
						</MvFOREACH>
					}
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error_WithData_End() }">
</MvFUNCTION>

<MvCOMMENT>
|
| Helper Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "FlexComponentList_Sort_Callback" PARAMETERS = "left var, right var, sort var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.sort EQ 'code' }">			<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:code, l.right:code ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-code' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:code, l.left:code ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'name' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:version:settings:name, l.right:version:settings:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-name' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:version:settings:name, l.left:version:settings:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'type' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:version:settings:type, l.right:version:settings:type ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-type' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:version:settings:type, l.left:version:settings:type ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'version' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( ComponentManager_Sanitize_Version( l.left:version:settings:version ), ComponentManager_Sanitize_Version( l.right:version:settings:version ) ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-version' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( ComponentManager_Sanitize_Version( l.right:version:settings:version ), ComponentManager_Sanitize_Version( l.left:version:settings:version ) ) }">
	</MvIF>

	<MvIF EXPR = "{ l.result NE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.result }">
	</MvIF>

	<MvCOMMENT>
	|
	| Break ties using the item
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ substring_var( l.sort, 1, 1 ) NE '-' }">
		<MvIF EXPR = "{ strcasecmp( l.left:code, l.right:code ) LT 0 }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:code, l.right:code ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ strcasecmp( l.right:code, l.left:code ) LT 0 }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.right:code, l.left:code ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItemList_Sort_Callback" PARAMETERS = "left var, right var, sort var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.sort EQ 'component_code' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:component_code, l.right:component_code ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-component_code' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:component_code, l.left:component_code ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'component_name' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:component_name, l.right:component_name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-component_name' }">	<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:component_name, l.left:component_name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'item_code' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.left:item_code, l.right:item_code ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-item_code' }">		<MvASSIGN NAME = "l.result" VALUE = "{ strcasecmp( l.right:item_code, l.left:item_code ) }">
	</MvIF>

	<MvIF EXPR = "{ l.result NE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.result }">
	</MvIF>

	<MvCOMMENT>
	|
	| Break ties using the item
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ substring_var( l.sort, 1, 1 ) NE '-' }">
		<MvIF EXPR = "{ strcasecmp( l.left:item_code, l.right:item_code ) LT 0 }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.left:item_code, l.right:item_code ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ strcasecmp( l.right:item_code, l.left:item_code ) LT 0 }">		<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ strcasecmp( l.right:item_code, l.left:item_code ) GT 0 }">	<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexItem_Lockfile_Path" PARAMETERS = "page_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.MerchantPath $ 'flexitem_' $  l.page_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "SanitizeCSSStyle" PARAMETERS = "name, prefix, value, suffix" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.value }">														<MvFUNCTIONRETURN VALUE = "">
	<MvELSEIF EXPR = "{ '</' IN l.value }">													<MvFUNCTIONRETURN VALUE = "">
	<MvELSEIF EXPR = "{ '/*' IN l.value }">													<MvFUNCTIONRETURN VALUE = "">
	<MvELSEIF EXPR = "{ '}' IN l.value }">													<MvFUNCTIONRETURN VALUE = "">
	<MvELSEIF EXPR = "{ ';' IN l.value }">													<MvFUNCTIONRETURN VALUE = "">
	<MvELSEIF EXPR = "{ '\'' IN l.value AND ( '\'' IN l.prefix OR '\'' IN l.suffix ) }">	<MvFUNCTIONRETURN VALUE = "">
	<MvELSEIF EXPR = "{ '"' IN l.value AND ( '"' IN l.prefix OR '"' IN l.suffix ) }">		<MvFUNCTIONRETURN VALUE = "">
	<MvELSEIF EXPR = "{ asciichar( 0 ) IN l.value }">										<MvFUNCTIONRETURN VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.name $ ': ' $ l.prefix $ l.value $ l.suffix $ ';' }">
</MvFUNCTION>

<MvFUNCTION NAME = "FilepathSafeString" PARAMETERS = "string" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.allowed_characters" INDEX = 1	VALUE = "-">
	<MvASSIGN NAME = "l.allowed_characters" INDEX = 2	VALUE = "_">
	<MvASSIGN NAME = "l.allowed_characters" INDEX = 3	VALUE = " ">

	<MvASSIGN NAME = "l.stripped_string"				VALUE = "{ glosub_array( l.string, l.allowed_characters, l.null ) }">

	<MvIF EXPR = "{ isalnum( l.stripped_string ) }">
		<MvFUNCTIONRETURN VALUE = "{ l.string }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ crypto_md5( l.string ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DetokenizePath" PARAMETERS = "source var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ glosub( l.source, '%STORE_ID%', padl( g.Store:id, 8, '0' ) ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SanitizeComponentImage" PARAMETERS = "image_filename var, image var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Export_ExternalSource_SanitizeOutputPath( l.image_filename, g.imageroot, '', l.null, l.destination_file ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.source_file"	VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ConcatenatePath( g.imageroot, l.image_filename ) }">

	<MvASSIGN NAME = "l.image"			VALUE = "">
	<MvASSIGN NAME = "l.image:filepath"	VALUE = "{ substring_var( l.destination_file, len( '/%STORE_BASEHREF%/' ) + 1, len_var( l.destination_file ) - len( '/%STORE_BASEHREF%/' ) ) }">

	<MvIF EXPR = "{ file_read( l.source_file, 'script', l.image:source ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_JavaScriptResourceVersion_Fork_CrossReferences_ID" PARAMETERS = "scriptresourceversion var, xref_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceVersion_Fork_CrossReferences_LowLevel( l.scriptresourceversion, l.xref_id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.scriptresourceversion:xref_id"	VALUE = "{ l.xref_id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].JavaScriptResourceVersion_Insert( l.scriptresourceversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_CSSResourceVersion_Fork_CrossReferences_ID" PARAMETERS = "cssresourceversion var, xref_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceVersion_Fork_CrossReferences_LowLevel( l.cssresourceversion, l.xref_id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.cssresourceversion:xref_id"	VALUE = "{ l.xref_id }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].CSSResourceVersion_Insert( l.cssresourceversion ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_UpgradeTemplate_Create_ManagedTemplate_NoDuplicates" PARAMETERS = "flex_code, source var, settings var, output_file var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This function attempts to use the specified filename when creating the managed template.  This is possible only in the following scenarios:
	|	1. No managed template exists with the filename already
	|	2. A managed template with the filename exists in the deleted state AND the flex managed property also exists in the deleted state AND
	|	   its most recent settings referenced the upgrade template filename.
	|
	| If neither of those 2 scenarios exist a unique filename must be generated.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.output_file" VALUE = "{ 'flex-upgrade-template-' $ tolower( l.flex_code ) $ '.mvc' }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_Filename( l.output_file, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Reuse( l.output_file, 0, 0, 0, 1, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Reuse( 'flex', l.flex_code, 0, 0, 1, 0, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT FlexComponent_ManagedPropertyVersion_Load_Reuse( 'flex', l.flex_code, 0, 0, 1, 0, l.managedpropertyversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 1>
	<MvELSE>
		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = "{ strcmp( l.managedpropertyversion:settings:upgrade_template_filename, l.output_file ) NE 0 }">
	</MvIF>

	<MvIF EXPR = "{ l.generate_unique_filename }">
		<MvASSIGN NAME = "l.output_file" VALUE = "{ [ g.Module_Feature_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( l.output_file ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplate_NoDuplicates( l.source, l.settings, l.output_file ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_InitializationTemplate_Create_ManagedTemplate_NoDuplicates" PARAMETERS = "flex_code, source var, settings var, output_file var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This function attempts to use the specified filename when creating the managed template.  This is possible only in the following scenarios:
	|	1. No managed template exists with the filename already
	|	2. A managed template with the filename exists in the deleted state AND the flex managed property also exists in the deleted state AND
	|	   its most recent settings referenced the initialization template filename.
	|
	| If neither of those 2 scenarios exist a unique filename must be generated.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.output_file" VALUE = "{ 'flex-initialization-template-' $ tolower( l.flex_code ) $ '.mvc' }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_Filename( l.output_file, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Reuse( l.output_file, 0, 0, 0, 1, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Reuse( 'flex', l.flex_code, 0, 0, 1, 0, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT FlexComponent_ManagedPropertyVersion_Load_Reuse( 'flex', l.flex_code, 0, 0, 1, 0, l.managedpropertyversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 1>
	<MvELSE>
		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = "{ strcmp( l.managedpropertyversion:settings:initialization_template_filename, l.output_file ) NE 0 }">
	</MvIF>

	<MvIF EXPR = "{ l.generate_unique_filename }">
		<MvASSIGN NAME = "l.output_file" VALUE = "{ [ g.Module_Feature_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( l.output_file ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplate_NoDuplicates( l.source, l.settings, l.output_file ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_InstanceTemplate_Create_ManagedTemplate_NoDuplicates" PARAMETERS = "flex_code, source var, settings var, output_file var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This function attempts to use the specified filename when creating the managed template.  This is possible only in the following scenarios:
	|	1. No managed template exists with the filename already
	|	2. A managed template with the filename exists in the deleted state AND the flex managed property also exists in the deleted state AND
	|	   its most recent settings referenced the instance template filename.
	|
	| If neither of those 2 scenarios exist a unique filename must be generated.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.output_file" VALUE = "{ 'flex-instance-template-' $ tolower( l.flex_code ) $ '.mvc' }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Branchless_Filename( l.output_file, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Reuse( l.output_file, 0, 0, 0, 1, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedProperty_Load_Reuse( 'flex', l.flex_code, 0, 0, 1, 0, l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 1>
	<MvELSEIF EXPR = "{ NOT FlexComponent_ManagedPropertyVersion_Load_Reuse( 'flex', l.flex_code, 0, 0, 1, 0, l.managedpropertyversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = 1>
	<MvELSE>
		<MvASSIGN NAME = "l.generate_unique_filename" VALUE = "{ strcmp( l.managedpropertyversion:settings:instance_template_filename, l.output_file ) NE 0 }">
	</MvIF>

	<MvIF EXPR = "{ l.generate_unique_filename }">
		<MvASSIGN NAME = "l.output_file" VALUE = "{ [ g.Module_Feature_TUI_UT ].GenerateBranchlessUniqueManagedTemplateFilename_FromFilename( l.output_file ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplate_NoDuplicates( l.source, l.settings, l.output_file ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "FlexComponent_ManagedPropertyVersion_Load_Reuse" PARAMETERS = "type, code, product_id, cat_id, sync, has_template, managedpropertyversion var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.has_template }">	<MvASSIGN NAME = "l.where_template" VALUE = "mp.templ_id <> 0">
	<MvELSE>							<MvASSIGN NAME = "l.where_template" VALUE = "mp.templ_id = 0">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ManagedPropertyVersions',
																			 'SELECT
																				mpv.*
																			  FROM
																				' $ g.Store_Table_Prefix $ 'ManagedPropertyBranchVersions mpbv,
																				' $ g.Store_Table_Prefix $ 'ManagedPropertyChanges mpc,
																				' $ g.Store_Table_Prefix $ 'ManagedPropertyVersions mpv,
																				' $ g.Store_Table_Prefix $ 'ManagedProperties mp
																			  WHERE
																				mpbv.head			= 1					AND
																				mpbv.version_id		= 0					AND
																				mpc.branch_id		= mpbv.branch_id	AND
																				mpc.prop_id			= mpbv.prop_id		AND
																				mpc.new_id			= 0					AND
																				mpv.id				= mpc.old_id		AND
																				' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'mpv.type' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) $ ' AND
																				' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'mpv.code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) $ ' AND
																				mpv.product_id		= ?					AND
																				mpv.cat_id			= ?					AND
																				mp.id				= mpv.prop_id		AND
																				mp.sync				= ?					AND
																				' $ l.where_template $ '
																			  ORDER BY
																				mpc.prop_id ASC, mpc.set_id DESC',
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.type )			$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.code )			$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.product_id )	$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.cat_id )		$ ',' $
																			 [ g.Module_Library_DB ].SQL_Query_Field( l.sync ),
																			 0, 1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-MV-FLEX-00353', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ ManagedPropertyVersions.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedPropertyVersions">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-CMP-MV-FLEX-00354' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyVersion_Read( l.managedpropertyversion ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ManagedPropertyVersions">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Value_Is_SVG" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ strcasecmp( substring_var( l.value, 1, 4 ), '<svg' ) EQ 0 }">
</MvFUNCTION>

<MvINCLUDE FILE = "modules/component/cmp-mv-flex/functions.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/registeredcomponentlist.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/registeredcomponentdialog.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/registeredcomponentuploaddialog.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/componentbaseinvaliddependenciesdialog.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/componentinvaliddependenciesdialog.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/componentapplyinvaliddependenciesdialog.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/componentdeleteinvaliddependenciesdialog.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/componentuploaddialog.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/componentlist.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/itemaddeditdialog.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-flex/itemlist.mv">

<MvINCLUDE FILE = "json/mivascript.mv">
