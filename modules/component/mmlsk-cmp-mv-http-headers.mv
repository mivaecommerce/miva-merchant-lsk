<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2023 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-CMP-HTHD-
| Next Error Code: 23    
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-cmp-mv-http-headers">
	<MvASSIGN NAME = "l.module:name"		VALUE = "HTTP Headers">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Miva Merchant">
	<MvASSIGN NAME = "l.module:version"		VALUE = "10.0800">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "10.08">
	<MvASSIGN NAME = "l.module:features"	VALUE = "component, data_store, vis_store, provision_store, component_prov, json, clientside, clientside_sri, skins">
</MvFUNCTION>

<MvCOMMENT>
|
| Store-level Module Data Support Feature (data_store)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Install_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ItemExtension( 'store', l.module:code ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Upgrade_Store" PARAMETERS = "module var, version" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.module:version EQ l.version }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-HTHD-00004', 'Module \'' $ l.module:name $ '\' does not support manual upgrade.  New versions may only be obtained through the streaming update system.' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Uninstall_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Edit Store Screen Feature (vis_store)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Store_Validate" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Store_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Store_Tabs" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.module:code $ ':HTTP Headers' }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Store_Head" PARAMETERS = "module var, tab" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ l.module:code }">
		<MvEVAL EXPR = "{ Element_GlobalHTTPHeaderList_CSS( l.module ) }">

		<MvIF EXPR = "{ Element_HTTPHeader_JavaScript_Combined_Begin( l.module ) }">
			<MvEVAL EXPR = "{ Element_GlobalHTTPHeaderList_JavaScript( l.module ) }">
			<MvEVAL EXPR = "{ Element_HTTPHeader_JavaScript_Combined_End( l.module ) }">
		</MvIF>

		<script type="text/javascript">
			MMScreen_LoadFinished( function() { new GlobalHTTPHeaderList(); } );
		</script>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Store_Content" PARAMETERS = "module var, tab, load_fields" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.tab EQ l.module:code }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawButtons_Suppress( '[UPDATE]' ) }">
		<MvEVAL EXPR = "{ Element_GlobalHTTPHeaderList_HTML( l.module ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Component Feature (component)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Tabs" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.item $ ':HTTP Headers' }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Validate" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update_Requires_Version" PARAMETERS = "module var, page var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PostUpdate" PARAMETERS = "module var, page var, item, field_prefix, fields var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Content" PARAMETERS = "module var, item, tab, load_fields, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ l.item }">
		<MvEVAL EXPR = "{ Element_PageHTTPHeaderList_CSS( l.module ) }">

		<MvIF EXPR = "{ Element_HTTPHeader_JavaScript_Combined_Begin( l.module ) }">
			<MvEVAL EXPR = "{ Element_PageHTTPHeaderList_JavaScript( l.module ) }">
			<MvEVAL EXPR = "{ Element_HTTPHeader_JavaScript_Combined_End( l.module ) }">
		</MvIF>

		<script language="JavaScript">
			MMScreen_LoadFinished( function() { new PageHTTPHeaderList( MMScreenContext.page.id ); } );
		</script>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawButtons_Suppress( '[UPDATE]' ) }">
		<MvEVAL EXPR = "{ Element_PageHTTPHeaderList_HTML( l.module ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Defaults" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings" VALUE = "none">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Assign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Unassign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Copy" PARAMETERS = "module var, item, source_branch var, source_page var, source_settings var, dest_branch var, dest_page var, dest_settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.dest_settings" VALUE = "{ l.source_settings }">

	<MvIF EXPR = "{ l.source_branch:id EQ l.dest_branch:id }">	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00003', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
	<MvELSE>													<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00022', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' from branch \'' $ l.source_branch:name $ '\' to branch \'' $ l.dest_branch:name $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.have_cookies"				VALUE = 0>
	<MvASSIGN NAME = "l.headers_lookup"				VALUE = "">
	<MvASSIGN NAME = "l.headers"					VALUE = "">
	<MvASSIGN NAME = "l.header_count"				VALUE = 0>

	<MvIF EXPR = "{ NOT l.all_settings:page:admin }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Reference_Cache( l.all_settings, l.module:code, l.cache ) }">

		<MvIF EXPR = "{ NOT l.cache:data:global_headers_output }">
			<MvASSIGN NAME = "l.cache:data:global_headers_output" VALUE = 1>

			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Runtime_ManagedProperty_Load_Code( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
				<MvASSIGN NAME = "l.header_count"	VALUE = "{ miva_array_filter_ref( l.managedproperty:settings, 1, l.global_header, 'NOT miva_array_search( l.settings, 1, l.page_header, \'strcasecmp( l.global_header:name, l.page_header:name ) EQ 0\' )', l.headers ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.header_count"				VALUE = "{ miva_array_copy_ref( l.settings, 1, -1, l.headers, -1 ) }">

	<MvFOREACH ITERATOR = "l.header" ARRAY = "l.headers" COUNT = "{ l.header_count }">
		<MvIF EXPR = "{ strcasecmp( l.header:name, 'set-cookie' ) EQ 0 }">
			<MvCOMMENT>
			|
			| Cookies must be output using the cookie management code in util.mv to avoid disturbing session cookies
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.have_cookies"		VALUE = 1>
			<MvASSIGN NAME = "l.attribute_count"	VALUE = "{ miva_splitstring( l.header:value, ';', l.attributes, 'noempty' ) }">

			<MvASSIGN NAME = "l.cookie_name"		VALUE = "{ trim( gettoken( l.attributes[ 1 ], '=', 1 ) ) }">
			<MvASSIGN NAME = "l.cookie_value"		VALUE = "{ trim( gettoken( l.attributes[ 1 ], '=', 2 ) ) }">
			<MvASSIGN NAME = "l.cookie_domain"		VALUE = "">
			<MvASSIGN NAME = "l.cookie_expires"		VALUE = "">
			<MvASSIGN NAME = "l.cookie_path"		VALUE = "">
			<MvASSIGN NAME = "l.cookie_secure"		VALUE = 0>
			<MvASSIGN NAME = "l.cookie_samesite"	VALUE = "">

			<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" FIRST = 2 LAST = "{ l.attribute_count }">
				<MvASSIGN NAME = "l.attr_name"		VALUE = "{ trim( gettoken( l.attribute, '=', 1 ) ) }">
				<MvASSIGN NAME = "l.attr_value"		VALUE = "{ trim( gettoken( l.attribute, '=', 2 ) ) }">

				<MvIF EXPR = "{ l.attr_name EQ 'domain' }">			<MvASSIGN NAME = "l.cookie_domain"		VALUE = "{ l.attr_value }">
				<MvELSEIF EXPR = "{ l.attr_name EQ 'expires' }">	<MvASSIGN NAME = "l.cookie_expires"		VALUE = "{ l.attr_value }">
				<MvELSEIF EXPR = "{ l.attr_name EQ 'path' }">		<MvASSIGN NAME = "l.cookie_path"		VALUE = "{ l.attr_value }">
				<MvELSEIF EXPR = "{ l.attr_name EQ 'secure' }">		<MvASSIGN NAME = "l.cookie_secure"		VALUE = 1>
				<MvELSEIF EXPR = "{ l.attr_name EQ 'samesite' }">	<MvASSIGN NAME = "l.cookie_samesite"	VALUE = "{ l.attr_value }">
				</MvIF>
			</MvFOREACH>

			<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].v10_SetCookie( g.Output_Cookies, l.cookie_name, l.cookie_value, l.cookie_domain, l.cookie_expires, l.cookie_path, l.cookie_secure, l.cookie_samesite ) }">
		<MvELSE>
			<MvCOMMENT>
			|
			| Duplicate header names are combined into a single header entry separated by \r\n followed by the header name and value.
			| This is necessary because the miva_output_header builtin function replaces duplicate headers, but RFC 2616 states duplicate
			| headers are accepted as long as they are in a comma separated list.  The web server will then convert the duplicate headers
			| to a comma separated list before they are ultimately output.
			|
			</MvCOMMENT>

			<MvREFERENCEARRAY NAME = "l.header_lookup" VARIABLE = "l.headers_lookup">
				<MvMEMBER NAME = "{ l.header:name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ ISNULL l.header_lookup }">	<MvASSIGN NAME = "l.header_value"	VALUE = "{ l.header:value }">
			<MvELSE>									<MvASSIGN NAME = "l.header_value"	VALUE = "{ l.header_lookup $ asciichar( 13 ) $ asciichar( 10 ) $ l.header:name $ ': ' $ l.header:value }">
			</MvIF>

			<MvASSIGN NAME = "l.header_lookup"	VALUE = "{ l.header_value }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Output_Header( l.header:name, l.header_value ) }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.have_cookies }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].OutputCookies( g.Output_Cookies ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Prerender" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Head" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Start" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_End" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvCOMMENT>
|
| Component Provision Feature (component_prov)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Provision" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag EQ 'headeraddlist' }">		<MvEVAL EXPR = "{ ComponentModule_Provision_HeaderAddList( l.child_xml, l.settings ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'headerdeletelist' }">	<MvEVAL EXPR = "{ ComponentModule_Provision_HeaderDeleteList( l.child_xml, l.settings ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'deleteallheaders' }">	<MvEVAL EXPR = "{ ComponentModule_Provision_DeleteAllHeaders( l.child_xml, l.settings ) }">
		<MvELSE>											<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Unknown tag \'' $ l.tag $ '\'' ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision_HeaderAddList" PARAMETERS = "provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag NE 'header' }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT HTTPHeader_Provision_Header( l.child_xml, l.header ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.settings, l.header, -1 ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision_HeaderDeleteList" PARAMETERS = "provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag NE 'header' }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT HTTPHeader_Provision_Header( l.child_xml, l.header ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT HTTPHeader_Pos( l.settings, l.header:name, l.header:value, l.pos ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Header name/value pair does not exist' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_delete( l.settings, l.pos, 1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ miva_array_collapse( l.settings ) EQ 0 }">
		<MvASSIGN NAME = "l.settings" VALUE = "none">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision_DeleteAllHeaders" PARAMETERS = "provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings" VALUE = "none">
</MvFUNCTION>

<MvCOMMENT>
|
| Module JSON Feature (json)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'GlobalHTTPHeaderList_Load_Query' }">		<MvFUNCTIONRETURN VALUE = "{ JSON_GlobalHTTPHeaderList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'GlobalHTTPHeader_Insert' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_GlobalHTTPHeader_Insert( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'GlobalHTTPHeader_Update' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_GlobalHTTPHeader_Update( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'GlobalHTTPHeader_Delete' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_GlobalHTTPHeader_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'PageHTTPHeaderList_Load_Query' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_PageHTTPHeaderList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'PageHTTPHeader_Insert' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_PageHTTPHeader_Insert( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'PageHTTPHeader_Update' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_PageHTTPHeader_Update( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'PageHTTPHeader_Delete' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_PageHTTPHeader_Delete( l.module ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_HTTPHeader" PARAMETERS = "header var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"name":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.header:name ) }">",
	"value":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.header:value ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GlobalHTTPHeaderList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.available_filters"		VALUE = "">
	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = 0>
	<MvASSIGN NAME = "l.count"					VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'name',	'l.http_header:name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'value',	'l.http_header:value' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o',		'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o',		'Sort',		l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o:nonneg',	'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o',		'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvREFERENCE NAME = "l.http_headers" VARIABLE = "l.managedproperty:version:settings">

	<MvASSIGN NAME = "l.search_expression" 	VALUE = "1 EQ 1">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_MivaScript( l.search_expression, l.filter, l.available_filters ) }">

	<MvASSIGN NAME = "l.total_count"		VALUE = "{ miva_array_filter_ref( l.http_headers, 1, l.http_header, l.search_expression, l.filtered_array ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_sort( l.filtered_array, 'HTTPHeaderList_Sort_Callback', l.sort ) }">
	<MvASSIGN NAME = "l.output_count" 		VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.http_header" ARRAY = "l.filtered_array" FIRST = "{ l.offset + 1 }" LAST = "{ l.total_count }">
				<MvIF EXPR = "{ ( l.output_count LT l.count ) OR ( l.count EQ 0 ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
						<MvEVAL EXPR = "{ JSON_HTTPHeader( l.http_header ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvIF>
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GlobalHTTPHeader_Insert" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedProperty( 'cmp-mv-http-headers', 'global_headers', 'notemplate', l.null, l.null, l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ManagedProperty_LockFile( l.managedproperty ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_GlobalHTTPHeader_Insert_LowLevel( l.managedproperty ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GlobalHTTPHeader_Insert_LowLevel" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( l.managedproperty:type, l.managedproperty:code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-HTHD-00008', 'HTTP Headers not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Name',		l.name ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Value',	l.value ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.header" 		VALUE = "">
	<MvASSIGN NAME = "l.header:name" 	VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.header:value" 	VALUE = "{ l.value }">
	<MvASSIGN NAME = "l.null" 			VALUE = "{ miva_array_insert_var( l.managedproperty:version:settings, l.header, -1 ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedPropertyVersion( l.managedproperty, l.managedproperty:version:settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00009', 'HTTP Header \'' $ l.header:name $ ': ' $ l.header:value $ '\' added' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GlobalHTTPHeader_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-HTHD-00010', 'Failed to load HTTP Header name/value pair' ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ManagedProperty_LockFile( l.managedproperty ) }">	
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_GlobalHTTPHeader_Update_LowLevel( l.managedproperty ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GlobalHTTPHeader_Update_LowLevel" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( l.managedproperty:type, l.managedproperty:code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-HTHD-00011', 'HTTP Headers not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Edit_Name',	l.edit_name )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Edit_Value',	l.edit_value )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Name',			l.name )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Value',		l.value ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.existing_settings"	VALUE = "{ l.managedproperty:version:settings }">

	<MvREFERENCE NAME = "l.http_headers" VARIABLE = "l.managedproperty:version:settings">

	<MvIF EXPR = "{ NOT HTTPHeader_Pos( l.http_headers, l.edit_name, l.edit_value, l.pos ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.http_headers" INDEX = "{ l.pos }" MEMBER = "name" 	VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.http_headers" INDEX = "{ l.pos }" MEMBER = "value" 	VALUE = "{ l.value }">

	<MvIF EXPR = "{ strcmp( miva_array_serialize( l.existing_settings ), miva_array_serialize( l.http_headers ) ) NE 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedPropertyVersion( l.managedproperty, l.managedproperty:version:settings ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00012', 'HTTP Header \'' $ l.edit_name $ ': ' $ l.edit_value $ '\' updated to \'' $ l.name $ ': ' $ l.value $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GlobalHTTPHeader_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-HTHD-00013', 'Failed to load HTTP Header name/value pair' ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_ManagedProperty_LockFile( l.managedproperty ) }">	
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_GlobalHTTPHeader_Delete_LowLevel( l.managedproperty ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_GlobalHTTPHeader_Delete_LowLevel" PARAMETERS = "managedproperty var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( l.managedproperty:type, l.managedproperty:code, l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-CMP-HTHD-00014', 'HTTP Headers not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Edit_Name',	l.name ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Edit_Value',	l.value ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.existing_settings"	VALUE = "{ l.managedproperty:version:settings }">

	<MvREFERENCE NAME = "l.http_headers" VARIABLE = "l.managedproperty:version:settings">

	<MvIF EXPR = "{ NOT HTTPHeader_Pos( l.http_headers, l.name, l.value, l.pos ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_array_delete( l.http_headers, l.pos, 1 ) EQ 0 }">
		<MvASSIGN NAME = "l.http_headers"	VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedPropertyVersion( l.managedproperty, l.managedproperty:version:settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00015', 'HTTP Header \'' $ l.name $ ': ' $ l.value $ '\' deleted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageHTTPHeaderList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.available_filters"		VALUE = "">
	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = 0>
	<MvASSIGN NAME = "l.count"					VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'name',	'l.http_header:name' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_MivaScript_CHAR( l.available_filters, 'value',	'l.http_header:value' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o',		'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o',		'Sort',		l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o:nonneg',	'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o',		'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvREFERENCE NAME = "l.http_headers" VARIABLE = "l.page:settings:http_headers">

	<MvASSIGN NAME = "l.search_expression" 	VALUE = "1 EQ 1">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_MivaScript( l.search_expression, l.filter, l.available_filters ) }">

	<MvASSIGN NAME = "l.total_count"		VALUE = "{ miva_array_filter_ref( l.http_headers, 1, l.http_header, l.search_expression, l.filtered_array ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_sort( l.filtered_array, 'HTTPHeaderList_Sort_Callback', l.sort ) }">
	<MvASSIGN NAME = "l.output_count" 		VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
			<MvFOREACH ITERATOR = "l.http_header" ARRAY = "l.filtered_array" FIRST = "{ l.offset + 1 }" LAST = "{ l.total_count }">
				<MvIF EXPR = "{ ( l.output_count LT l.count ) OR ( l.count EQ 0 ) }">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
							<MvEVAL EXPR = "{ JSON_HTTPHeader( l.http_header ) }">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					</MvIF>
			</MvFOREACH>
		],
		"total_count": 	<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageHTTPHeader_Insert" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_LockFile( l.page ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_PageHTTPHeader_Insert_LowLevel( l.page:id ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageHTTPHeader_Insert_LowLevel" PARAMETERS = "page_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_ID( l.page_id, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>
	
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Name',		l.name ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Value',	l.value ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.header" 		VALUE = "">
	<MvASSIGN NAME = "l.header:name" 	VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.header:value" 	VALUE = "{ l.value }">
	<MvASSIGN NAME = "l.null" 			VALUE = "{ miva_array_insert( l.page:settings:http_headers, l.header, -1 ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.page, 'HTTP Header Addition' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00019', 'HTTP Header \'' $ l.header:name $ ': ' $ l.header:value $ '\' added to page \'' $ l.page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageHTTPHeader_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_LockFile( l.page ) }">	
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_PageHTTPHeader_Update_LowLevel( l.page:id ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageHTTPHeader_Update_LowLevel" PARAMETERS = "page_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_ID( l.page_id, l.page ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Edit_Name',	l.edit_name )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Edit_Value',	l.edit_value )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Name',			l.name )		OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Value',		l.value ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvREFERENCE NAME = "l.http_headers" VARIABLE = "l.page:settings:http_headers">

	<MvIF EXPR = "{ NOT HTTPHeader_Pos( l.http_headers, l.edit_name, l.edit_value, l.pos ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.http_headers" INDEX = "{ l.pos }" MEMBER = "name" 	VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.http_headers" INDEX = "{ l.pos }" MEMBER = "value" 	VALUE = "{ l.value }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.page, 'HTTP Header Update' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00020', 'HTTP Header \'' $ l.edit_name $ ': ' $ l.edit_value $ '\' updated to \'' $ l.name $ ': ' $ l.value $ '\' on page \'' $ l.page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageHTTPHeader_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'PAGE', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_JSON ].JSON_Page_Load( l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvLOCKFILE FILE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_LockFile( l.page ) }">	
		<MvASSIGN NAME = "l.result" VALUE = "{ JSON_PageHTTPHeader_Delete_LowLevel( l.page:id ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_PageHTTPHeader_Delete_LowLevel" PARAMETERS = "page_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_ID( l.page_id, l.page ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Edit_Name',	l.name ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Edit_Value',	l.value ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvREFERENCE NAME = "l.http_headers" VARIABLE = "l.page:settings:http_headers">

	<MvIF EXPR = "{ NOT HTTPHeader_Pos( l.http_headers, l.name, l.value, l.pos ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ miva_array_delete( l.http_headers, l.pos, 1 ) EQ 0 }">
		<MvASSIGN NAME = "l.http_headers" VALUE = "none">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Update_Settings( l.page, 'HTTP Header Removal' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00021', 'HTTP Header \'' $ l.name $ ': ' $ l.value $ '\' deleted from page \'' $ l.page:code $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvCOMMENT>
|
| Module Provisioning Feature (provision_store)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Provision_Store" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag EQ 'globalheaderaddlist' }">			<MvEVAL EXPR = "{ Module_Provision_Store_GlobalHeaderAddList( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'globalheaderdeletelist' }">	<MvEVAL EXPR = "{ Module_Provision_Store_GlobalHeaderDeleteList( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'globaldeleteallheaders' }">	<MvEVAL EXPR = "{ Module_Provision_Store_GlobalDeleteAllHeaders( l.module, l.child_xml ) }">
		<MvELSE>													<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Unknown tag \'' $ l.tag $ '\'' ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_GlobalHeaderAddList" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedProperty( 'cmp-mv-http-headers', 'global_headers', 'notemplate', l.null, l.null, l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag NE 'header' }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT HTTPHeader_Provision_Header( l.child_xml, l.header ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.managedproperty:version:settings, l.header, -1 ) }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00016', 'HTTP Header \'' $ l.header:name $ ': ' $ l.header:value $ '\' added' ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedPropertyVersion( l.managedproperty, l.managedproperty:version:settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_GlobalHeaderDeleteList" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Failed to load HTTP Header name/value pair' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag NE 'header' }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT HTTPHeader_Provision_Header( l.child_xml, l.header ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ NOT HTTPHeader_Pos( l.managedproperty:version:settings, l.header:name, l.header:value, l.pos ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Header name/value pair does not exist' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_delete( l.managedproperty:version:settings, l.pos, 1 ) }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00017', 'HTTP Header \'' $ l.header:name $ ': ' $ l.header:value $ '\' deleted' ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedPropertyVersion( l.managedproperty, l.managedproperty:version:settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_GlobalDeleteAllHeaders" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.managedproperty:version:settings" VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedPropertyVersion( l.managedproperty, l.managedproperty:version:settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-HTHD-00018', 'Global HTTP Headers deleted' ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Module Client Side Feature (clientside)
|
</MvCOMMENT>

<MvINCLUDE FILE = "modules/component/cmp-mv-http-headers/combined.mv">

<MvFUNCTION NAME = "Module_Clientside" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( '.js' EIN g.Filename ) EQ len_var( g.Filename ) }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Filename EQ 'combined.js' }">									<MvFUNCTIONRETURN VALUE = "{ Element_HTTPHeader_JavaScript_Combined( l.module ) }">
	<MvELSEIF EXPR = "{ Module_Clientside_Output_File( l.module, g.Filename ) }">	<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Output_File" PARAMETERS = "module var, filename" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/component/cmp-mv-http-headers/output.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_File_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/component/cmp-mv-http-headers/integrity.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Combined_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/component/cmp-mv-http-headers/combined_integrity.mv">
</MvFUNCTION>

<MvCOMMENT>
|
| Framework Support Feature (skins)
|
</MvCOMMENT>

<MvFUNCTION NAME = "SkinsComponentModule_Description" PARAMETERS = "module var, item var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pages" VALUE = "{ [ g.Module_Feature_TUI_DB ].Item_Load_PageList( l.item ) }">

	<MvFUNCTIONRETURN VALUE = "{ 'Exports HTTP Headers from pages: ' $ l.pages }">
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item" PARAMETERS = "module var, item, output var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedPropertyAndVersion_Load_Code_Current( 'cmp-mv-http-headers', 'global_headers', l.managedproperty ) }">
			<Module code="cmp-mv-http-headers" feature="component">
				<GlobalDeleteAllHeaders />

				<GlobalHeaderAddList>
					<MvFOREACH ITERATOR = "l.header" ARRAY = "l.managedproperty:version:settings">
						<Header name="{ encodeentities( l.header:name ) }" value="{ encodeentities( l.header:value ) }" />
					</MvFOREACH>
				</GlobalHeaderAddList>
			</Module>
		</MvIF>

		<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ [ g.Module_Feature_TUI_DB ].PageList_Load_Item_Runtime( l.item:id, l.pages ) }">
			<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.page:settings">
				<MvMEMBER NAME = "{ l.item:code }">
			</MvREFERENCEARRAY>

			<Page_Update code="{ l.page:code }">
				<Item code="{ l.item:code }">
					<DeleteAllHeaders />
					<HeaderAddList>
						<MvFOREACH ITERATOR = "l.header" ARRAY = "l.settings">
							<Header name="{ encodeentities( l.header:name ) }" value="{ encodeentities( l.header:value ) }" />
						</MvFOREACH>
					</HeaderAddList>
				</Item>
			</Page_Update>
		</MvFOREACH>
	</MvCAPTURE>
</MvFUNCTION>

<MvCOMMENT>
|
| Helper Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "HTTPHeader_Provision_Header" PARAMETERS = "provide_xml var, header var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.header"			VALUE = "">
	<MvASSIGN NAME = "l.header:name"	VALUE = "">
	<MvASSIGN NAME = "l.header:value"	VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'name',	l.header:name ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'value',	l.header:value ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.header:name }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Header name cannot be blank' ) }">
	<MvELSEIF EXPR = "{ ISNULL l.header:value }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Header value cannot be blank' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "HTTPHeaderList_Sort_Callback" PARAMETERS = "left var, right var, sort var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.sort EQ 'name' }">		<MvASSIGN NAME = "l.left_data"	VALUE = "{ 'x' $ toupper( l.left:name ) }">		<MvASSIGN NAME = "l.right_data" VALUE = "{ 'x' $ toupper( l.right:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-name' }">	<MvASSIGN NAME = "l.left_data"	VALUE = "{ 'x' $ toupper( l.right:name ) }">	<MvASSIGN NAME = "l.right_data" VALUE = "{ 'x' $ toupper( l.left:name ) }">
	<MvELSEIF EXPR = "{ l.sort EQ 'value' }">	<MvASSIGN NAME = "l.left_data"	VALUE = "{ 'x' $ toupper( l.left:value ) }">	<MvASSIGN NAME = "l.right_data"	VALUE = "{ 'x' $ toupper( l.right:value ) }">
	<MvELSEIF EXPR = "{ l.sort EQ '-value' }">	<MvASSIGN NAME = "l.left_data"	VALUE = "{ 'x' $ toupper( l.right:value ) }">	<MvASSIGN NAME = "l.right_data"	VALUE = "{ 'x' $ toupper( l.left:value ) }">
	</MvIF>

	<MvIF EXPR = "{ l.left_data LT l.right_data }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left_data GT l.right_data }">		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "HTTPHeader_Pos" PARAMETERS = "http_headers var, name, value, pos var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pos" VALUE = "{ miva_array_search( l.http_headers, 1, l.http_header, 'trim( l.http_header:name ) EQ trim( l.name ) AND trim( l.http_header:value ) EQ trim( l.value )' ) }">

	<MvIF EXPR = "{ NOT l.pos }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-CMP-HTHD-00002', 'Failed to load HTTP Header name/value pair' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvINCLUDE FILE = "modules/component/cmp-mv-http-headers/functions.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-http-headers/baselist.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-http-headers/globallist.mv">
<MvINCLUDE FILE = "modules/component/cmp-mv-http-headers/pagelist.mv">
<MvINCLUDE FILE = "json/mivascript.mv">
