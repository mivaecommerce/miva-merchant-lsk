<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2025 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-CMP-CSSUI-MVP-
| Next Error Code: 14    
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-cmp-cssui-mivapay">
	<MvASSIGN NAME = "l.module:name"		VALUE = "CSSUI MivaPay Vault">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Miva Merchant">
	<MvASSIGN NAME = "l.module:version"		VALUE = "10.1203">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "10.08">
	<MvASSIGN NAME = "l.module:features"	VALUE = "component, component_prov, json, skins">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Tabs" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.tab_count"		VALUE = "{ miva_array_insert( l.tabs, 'GT_PAGE/' $ l.item $ ':MivaPay Vault Settings', -1 ) }">
	<MvASSIGN NAME = "l.tab_count"		VALUE = "{ miva_array_insert( l.tabs, 'GT_PAGE/' $ l.item $ '_css:MivaPay Vault CSS', -1 ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.tabs }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Validate" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT MivaPay_Load_Templates( l.fields:paymentcardfields:template_filename, l.managedtemplate,
												l.fields:paymentcardfields_css:template_filename, l.css_managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.fields:paymentcardfields:mode"							VALUE = "{ trim( l.fields:paymentcardfields:mode ) }">
	<MvASSIGN NAME = "l.fields:paymentcardfields:cardtype_prompt_hidden"		VALUE = "{ [ g.Module_Admin ].Trim_Boolean( l.fields:paymentcardfields:cardtype_prompt_hidden ) }">
	<MvASSIGN NAME = "l.fields:paymentcardfields:cardtype_prompt"				VALUE = "{ trim( l.fields:paymentcardfields:cardtype_prompt ) }">
	<MvASSIGN NAME = "l.fields:paymentcardfields:storecard_prompt"				VALUE = "{ trim( l.fields:paymentcardfields:storecard_prompt ) }">
	<MvASSIGN NAME = "l.fields:paymentcardfields:storecard_checkedbydefault"	VALUE = "{ [ g.Module_Admin ].Trim_Boolean( l.fields:paymentcardfields:storecard_checkedbydefault ) }">

	<MvEVAL EXPR = "{ ModeToSettings_Convert( l.fields:paymentcardfields:mode, l.mode_settings ) }">

	<MvIF EXPR = "{ l.mode_settings:paymentcardfields:mode EQ l.settings:paymentcardfields:mode }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.fields:paymentcardfields:template_code ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( l.item, l.field_prefix $ 'paymentcardfields:template_code', g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.fields:paymentcardfields_css:template_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( l.item, l.field_prefix $ 'paymentcardfields_css:template_code', g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT MivaPay_Load_Templates( l.settings:paymentcardfields:template_filename, l.managedtemplate,
												l.settings:paymentcardfields_css:template_filename, l.css_managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.settings:paymentcardfields:cardtype_prompt_hidden"		VALUE = "{ l.fields:paymentcardfields:cardtype_prompt_hidden }">
	<MvASSIGN NAME = "l.settings:paymentcardfields:cardtype_prompt"				VALUE = "{ l.fields:paymentcardfields:cardtype_prompt }">
	<MvASSIGN NAME = "l.settings:paymentcardfields:storecard_prompt"			VALUE = "{ l.fields:paymentcardfields:storecard_prompt }">
	<MvASSIGN NAME = "l.settings:paymentcardfields:storecard_checkedbydefault"	VALUE = "{ l.fields:paymentcardfields:storecard_checkedbydefault }">

	<MvEVAL EXPR = "{ ModeToSettings_Convert( l.fields:paymentcardfields:mode, l.mode_settings ) }">

	<MvIF EXPR = "{ l.mode_settings:paymentcardfields:mode NE l.settings:paymentcardfields:mode }">
		<MvASSIGN NAME = "l.settings:paymentcardfields:mode" 					VALUE = "{ l.mode_settings:paymentcardfields:mode }">

		<MvEVAL EXPR = "{ Generate_Code( l.settings, l.fields:paymentcardfields:template_code ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_CreateIfModified_ManagedTemplateVersion( l.managedtemplate, '', l.fields:paymentcardfields:template_code, l.settings:paymentcardfields ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Admin ].FieldError( l.item, l.field_prefix $ 'paymentcardfields:template_code', g.Error_Message ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_CreateIfModified_ManagedTemplateVersion( l.css_managedtemplate, '', l.fields:paymentcardfields_css:template_code, l.settings:paymentcardfields_css ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Admin ].FieldError( l.item, l.field_prefix $ 'paymentcardfields_css:template_code', g.Error_Message ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Content" PARAMETERS = "module var, item, tab, load_fields, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT MivaPay_Load_TemplateVersions( l.settings:paymentcardfields:template_filename, l.templateversion,
													   l.settings:paymentcardfields_css:template_filename, l.css_templateversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.load_fields }">
		<MvASSIGN NAME = "l.fields:paymentcardfields" 								VALUE = "{ l.settings:paymentcardfields }">
		<MvASSIGN NAME = "l.fields:paymentcardfields:cardtype_prompt_hidden"		VALUE = "{ l.settings:paymentcardfields:cardtype_prompt_hidden }">
		<MvASSIGN NAME = "l.fields:paymentcardfields:cardtype_prompt"				VALUE = "{ l.settings:paymentcardfields:cardtype_prompt }">
		<MvASSIGN NAME = "l.fields:paymentcardfields:storecard_prompt"				VALUE = "{ l.settings:paymentcardfields:storecard_prompt }">
		<MvASSIGN NAME = "l.fields:paymentcardfields:storecard_checkedbydefault"	VALUE = "{ l.settings:paymentcardfields:storecard_checkedbydefault }">
		<MvASSIGN NAME = "l.fields:paymentcardfields:template_code"					VALUE = "{ l.templateversion:source }">
		<MvASSIGN NAME = "l.fields:paymentcardfields:template_filename"				VALUE = "{ l.settings:paymentcardfields:template_filename }">

		<MvEVAL EXPR = "{ SettingsToMode_Convert( l.settings, l.fields:paymentcardfields:mode ) }">

		<MvASSIGN NAME = "l.fields:paymentcardfields_css" 							VALUE = "{ l.settings:paymentcardfields_css }">
		<MvASSIGN NAME = "l.fields:paymentcardfields_css:template_code"				VALUE = "{ l.css_templateversion:source }">
		<MvASSIGN NAME = "l.fields:paymentcardfields_css:template_filename"			VALUE = "{ l.settings:paymentcardfields_css:template_filename }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Admin ].Tab_Visible( l.tab, l.item ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawGroupTabEntry_Start( 'GT_PAGE', l.item ) }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_AD ].TUI_Hide_ComponentFields( l.field_prefix, 'paymentcardfields:template_filename' ) }">
		<table border="0" cellpadding="2" cellspacing="0" width="100%">
		<tr><td colspan="2" width="100%">
			<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawTemplateTextArea_WithRecall( l.field_prefix $ 'paymentcardfields:template_code', l.fields:paymentcardfields:template_code, 20, 100, l.templateversion:templ_id ) }">
		</td></tr>

		<tr><td colspan="2">&nbsp;</td></tr>

		<MvIF EXPR = "{ l.fields:paymentcardfields:mode NE 'paymentcard_add' AND l.fields:paymentcardfields:mode NE 'paymentcard_edit' }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_AD ].TUI_Hide_ComponentFields( l.field_prefix, 'paymentcardfields:cardtype_prompt_hidden,paymentcardfields:cardtype_prompt' ) }">
		<MvELSE>
			<tr><td nowrap valign="top">
				Card Type Prompt:
			</td><td width="100%">
				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawRadio( l.field_prefix $ 'paymentcardfields:cardtype_prompt_hidden', 1, l.fields:paymentcardfields:cardtype_prompt_hidden, 'Hidden' ) }"><br />
				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawRadio( l.field_prefix $ 'paymentcardfields:cardtype_prompt_hidden', 0, l.fields:paymentcardfields:cardtype_prompt_hidden, 'Visible: ' ) }"> <input type="text" name="{ encodeentities( l.field_prefix ) $ 'paymentcardfields:cardtype_prompt' }" value="{ encodeentities( l.fields:paymentcardfields:cardtype_prompt ) }" size="40" /> (empty = MivaPay Vault default prompt)<br />
			</td></tr>
		</MvIF>

		<MvIF EXPR = "{ l.fields:paymentcardfields:mode NE 'checkout' }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_AD ].TUI_Hide_ComponentFields( l.field_prefix, 'paymentcardfields:storecard_prompt,paymentcardfields:storecard_checkedbydefault' ) }">
		<MvELSE>
			<tr><td nowrap>
				Store Card Prompt:
			</td><td width="100%">
				<input type="text" name="{ encodeentities( l.field_prefix ) $ 'paymentcardfields:storecard_prompt' }" value="{ encodeentities( l.fields:paymentcardfields:storecard_prompt ) }" size="40" />
			</td></tr>
			<tr><td nowrap>
				&nbsp;
			</td><td width="100%">
				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawCheckbox_With_Label( l.fields:paymentcardfields:storecard_checkedbydefault, l.field_prefix $ 'paymentcardfields:storecard_checkedbydefault', 'Yes', 'Checked By Default' ) }">
			</td></tr>

			<tr><td colspan="2">&nbsp;</td></tr>
		</MvIF>

		<tr><td nowrap>
			Mode:
		</td><td width="100%">
			<select name="{ encodeentities( l.field_prefix ) $ 'paymentcardfields:mode' }">
				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'paymentcard_add',		l.fields:paymentcardfields:mode, 'Payment Card: Add' ) }">
				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'paymentcard_edit',	l.fields:paymentcardfields:mode, 'Payment Card: Edit' ) }">
				<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'checkout',			l.fields:paymentcardfields:mode, 'Checkout' ) }">
			</select>
		</td></tr>
		</table>
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawGroupTabEntry_End() }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_AD ].TUI_Hide_ComponentFields( l.field_prefix, 'paymentcardfields' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Admin ].Tab_Visible( l.tab, l.item $ '_css' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawGroupTabEntry_Start( 'GT_PAGE', l.item $ '_css' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_AD ].TUI_Hide_ComponentFields( l.field_prefix, 'paymentcardfields_css:template_filename' ) }">
		<table border="0" cellpadding="2" cellspacing="0" width="100%">
		<tr><td colspan="2" width="100%">
			<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawTemplateTextArea_WithRecall( l.field_prefix $ 'paymentcardfields_css:template_code', l.fields:paymentcardfields_css:template_code, 20, 100, l.css_templateversion:templ_id ) }">
		</td></tr>
		</table>
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawGroupTabEntry_End() }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_AD ].TUI_Hide_ComponentFields( l.field_prefix, 'paymentcardfields_css' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Defaults" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings:paymentcardfields:mode" 						VALUE = "paymentcard_add">
	<MvASSIGN NAME = "l.settings:paymentcardfields:cardtype_prompt"				VALUE = "Card Type:">
	<MvASSIGN NAME = "l.settings:paymentcardfields:storecard_prompt"			VALUE = "Store This Card For Future Use">
	<MvASSIGN NAME = "l.settings:paymentcardfields:storecard_checkedbydefault"	VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Assign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ Generate_Code( l.settings, l.template_source ) }">
	<MvEVAL EXPR = "{ Generate_Code_CSS( l.settings, l.css_template_source ) }">

	<MvASSIGN NAME = "l.settings:paymentcardfields:template_filename"		VALUE = "{ tolower( l.page:code ) $ '-' $ tolower( l.item ) $ '.mvc' }">
	<MvASSIGN NAME = "l.settings:paymentcardfields_css:template_filename"	VALUE = "{ tolower( l.page:code ) $ '-' $ tolower( l.item ) $ '_css.mvc' }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplate_NoDuplicates( l.template_source, l.settings:paymentcardfields, l.settings:paymentcardfields:template_filename ) OR
					NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplate_NoDuplicates( l.css_template_source, l.settings:paymentcardfields_css, l.settings:paymentcardfields_css:template_filename ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Assign_Item( l.page, 'paymentsettings' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Unassign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_ManagedTemplate_Filename( l.settings:paymentcardfields:template_filename ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_ManagedTemplate_Filename( l.settings:paymentcardfields_css:template_filename ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Copy" PARAMETERS = "module var, item, source_branch var, source_page var, source_settings var, dest_branch var, dest_page var, dest_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT MivaPay_Load_TemplateVersions_Branch( l.source_branch:id, l.source_settings:paymentcardfields:template_filename, l.source_templateversion, l.source_settings:paymentcardfields_css:template_filename, l.source_css_templateversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT MivaPay_Load_Templates_Branch( l.dest_branch:id, l.dest_settings:paymentcardfields:template_filename, l.dest_managedtemplate, l.dest_settings:paymentcardfields_css:template_filename, l.dest_css_managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.dest_template_filename" 								VALUE = "{ l.dest_settings:paymentcardfields:template_filename }">
	<MvASSIGN NAME = "l.dest_css_template_filename" 							VALUE = "{ l.dest_settings:paymentcardfields_css:template_filename }">

	<MvASSIGN NAME = "l.dest_settings"											VALUE = "{ l.source_settings }">

	<MvASSIGN NAME = "l.dest_settings:paymentcardfields:template_filename"		VALUE = "{ l.dest_template_filename }">
	<MvASSIGN NAME = "l.dest_settings:paymentcardfields_css:template_filename"	VALUE = "{ l.dest_css_template_filename }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_CreateIfModified_ManagedTemplateVersion( l.dest_managedtemplate, '', l.source_templateversion:source, l.dest_settings:paymentcardfields ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_CreateIfModified_ManagedTemplateVersion( l.dest_css_managedtemplate, '', l.source_css_templateversion:source, l.dest_settings:paymentcardfields_css ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.source_branch:id EQ l.dest_branch:id }">	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-CSSUI-MVP-00012', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
	<MvELSE>													<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-CMP-CSSUI-MVP-00013', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' from branch \'' $ l.source_branch:name $ '\' to branch \'' $ l.dest_branch:name $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_URI_DB ].URISettings_Load_Cached( l.uri_settings ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Initialize_Item( l.all_settings, 'paymentsettings' ) OR
					NOT l.all_settings:paymentsettings:mivapay:enabled }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Initialize_Item( l.all_settings, 'urls' ) }">

	<MvIF EXPR = "{ ( l.settings:paymentcardfields:mode EQ 'checkout' ) OR ( l.settings:paymentcardfields:mode EQ 'paymentcard_edit' ) }">
		<MvIF EXPR = "{ g.Basket:cust_id AND g.Customer_Session_Verified }">	<MvASSIGN NAME = "l.customer_id" VALUE = "{ g.Basket:cust_id }">
		<MvELSE>																<MvASSIGN NAME = "l.customer_id" VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_UT ].PaymentMethod_Parse_Runtime_WithModule( g.PaymentMethod, l.customer_id, l.settings:module, l.settings:module_data, l.settings:paymentcard, l.settings:paymentcardtype ) }">
			<MvIF EXPR = "{ l.settings:paymentcardfields:mode EQ 'checkout' }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Throw_Exception( 'invalid_payment_method' ) }">
			<MvELSE>															<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Throw_Exception( 'customer_invalid_card' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ ( l.settings:paymentcardfields:mode EQ 'paymentcard_edit' ) AND NOT l.settings:paymentcard:id }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Throw_Exception( 'customer_invalid_card' ) }">
		<MvELSEIF EXPR = "{ ( l.settings:paymentcardfields:mode EQ 'checkout' ) AND NOT l.settings:paymentcard:id AND NOT l.settings:paymentcardtype:id }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ ( l.settings:paymentcardfields:mode EQ 'checkout' )	AND
						( NOT l.settings:paymentcardtype:id ) AND
						( NOT l.settings:paymentcard:id ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvCAPTURE VARIABLE = "l.css_template">
		<MvEVAL EXPR = "[">
		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Render_Template( l.settings:paymentcardfields_css:template_filename, l.all_settings ) }">
		<MvEVAL EXPR = "]">
	</MvCAPTURE>

	<MvIF EXPR = "{ l.settings:paymentcardfields:mode EQ 'checkout' }">
		<MvIF EXPR = "{ l.settings:paymentcard:id }">
			<MvASSIGN NAME = "l.cvv_setting"	VALUE = "{ l.all_settings:paymentsettings:mivapay:cvv_co_pc }">
		<MvELSE>
			<MvASSIGN NAME = "l.cvv_setting"	VALUE = "{ l.all_settings:paymentsettings:mivapay:cvv_co_pct }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.cvv_setting"		VALUE = "hidden">
	</MvIF>

	<MvCAPTURE VARIABLE = "l.request_xml">
		<MIVA STANDARDOUTPUTLEVEL = "text, html, compresswhitespace"><PaymentFormRequest>
			<Merchant><MvEVAL EXPR = "{ miva_cdata_encode( l.all_settings:paymentsettings:mivapay:merchant ) }"></Merchant>

			<MvIF EXPR = "{ l.settings:paymentcardfields:mode EQ 'checkout' }">
				<SessionData><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Module_Feature_PAY_UT ].MivaPay_SessionData( l.settings:paymentcardfields:mode, g.Basket:chksess_id ) ) }"></SessionData>
			<MvELSE>
				<SessionData><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Module_Feature_PAY_UT ].MivaPay_SessionData( l.settings:paymentcardfields:mode, g.Basket:cussess_id ) ) }"></SessionData>
			</MvIF>

			<MvIF EXPR = "{ g.Secure }">	<Origin><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Module_Feature_URI_UT ].URL_Base_Secure( l.uri_settings ) ) }"></Origin>
			<MvELSE>						<Origin><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Module_Feature_URI_UT ].URL_Base( l.uri_settings ) ) }"></Origin>
			</MvIF>

			<StyleSheet>
				<MvEVAL EXPR = "{ miva_cdata_encode( l.css_template ) }">
			</StyleSheet>

			<MvIF EXPR = "{ ( l.settings:paymentcardfields:mode EQ 'checkout' ) AND l.settings:paymentcard:id }">
				<Prompts showaddressfields="new_only">
			<MvELSE>
				<Prompts>
			</MvIF>

				<MvIF EXPR = "{ ( ( l.settings:paymentcardfields:mode EQ 'paymentcard_add' ) OR ( l.settings:paymentcardfields:mode EQ 'paymentcard_edit' ) ) AND ( NOT l.settings:paymentcardfields:cardtype_prompt_hidden ) }">
			 		<CardType><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcardfields:cardtype_prompt ) }"></CardType>
				</MvIF>

				<FirstName />
				<LastName />
				<CardNumber />
				<ExpirationDate />

				<MvIF EXPR = "{ ( l.settings:paymentcardfields:mode EQ 'paymentcard_add' )	OR
								( l.settings:paymentcardfields:mode EQ 'paymentcard_edit' )	OR
								(
									( l.settings:paymentcardfields:mode EQ 'checkout' ) AND
									l.settings:paymentcard:id
								) }">
					<Addresses />
					<Address1 />
					<Address2 />
					<City />
					<StateSelect />
					<State />
					<Zip />
					<Country default="{ encodeentities( g.Store:country ) }" />
				</MvIF>

				<MvIF EXPR = "{ l.cvv_setting NE 'hidden' }">
					<CVV />
				</MvIF>

				<MvIF EXPR = "{ l.settings:paymentcardfields:mode NE 'checkout' }">
					<StoreToken default="yes" hidden="yes" />
				<MvELSE>
					<MvIF EXPR = "{ NOT g.Basket:cust_id OR NOT g.Customer_Session_Verified }">
						<StoreToken default="no" hidden="yes" />
					<MvELSE>
						<MvIF EXPR = "{ l.settings:paymentcard:id }">
							<StoreToken default="no" hidden="yes" />
						<MvELSEIF EXPR = "{ g.Basket:sub_count }">
							<StoreToken default="yes" hidden="yes" />
						<MvELSE>
							<MvIF EXPR = "{ l.settings:paymentcardfields:storecard_checkedbydefault }">	<MvASSIGN NAME = "l.storetoken_default" VALUE = "yes">
							<MvELSE>																	<MvASSIGN NAME = "l.storetoken_default" VALUE = "no">
							</MvIF>

							<StoreToken default="{ encodeentities( l.storetoken_default ) }" hidden="no"><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcardfields:storecard_prompt ) }"></StoreToken>
						</MvIF>
					</MvIF>
				</MvIF>
			</Prompts>

			<PermittedCardTypes>
				<MvIF EXPR = "{ ( l.settings:paymentcardfields:mode EQ 'checkout' ) AND l.settings:paymentcard:id }">
					<PermittedCardType prefixes="{ encodeentities( l.settings:paymentcard:prefixes ) }" lengths="{ encodeentities( l.settings:paymentcard:lengths ) }" cvv="{ encodeentities( [ g.Module_Feature_PAY_UT ].MivaPay_Map_CVV_Setting( l.cvv_setting, l.settings:paymentcard:cvv ) ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:type ) }"></PermittedCardType>
				<MvELSEIF EXPR = "{ ( l.settings:paymentcardfields:mode EQ 'checkout' ) AND ( l.settings:paymentcardtype:id GT 0 ) }">
					<PermittedCardType prefixes="{ encodeentities( l.settings:paymentcardtype:prefixes ) }" lengths="{ encodeentities( l.settings:paymentcardtype:lengths ) }" cvv="{ encodeentities( [ g.Module_Feature_PAY_UT ].MivaPay_Map_CVV_Setting( l.cvv_setting, l.settings:paymentcardtype:cvv ) ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcardtype:type ) }"></PermittedCardType>
				<MvELSE>
					<MvFOREACH ITERATOR = "l.cardtype" ARRAY = "l.all_settings:paymentsettings:mivapay:cardtypes" COUNT = "{ l.all_settings:paymentsettings:mivapay:cardtype_count }">
						<PermittedCardType prefixes="{ encodeentities( l.cardtype:prefixes ) }" lengths="{ encodeentities( l.cardtype:lengths ) }" cvv="{ encodeentities( [ g.Module_Feature_PAY_UT ].MivaPay_Map_CVV_Setting( l.cvv_setting, l.cardtype:cvv ) ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.cardtype:type ) }"></PermittedCardType>
					</MvFOREACH>
				</MvIF>
			</PermittedCardTypes>

			<PermittedStates>
				<MvFOREACH ITERATOR = "l.state" ARRAY = "l.states" COUNT = "{ [ g.Module_Library_DB ].StateList_Load_All( l.states ) }">
					<PermittedState code="{ encodeentities( l.state:code ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.state:name ) }"></PermittedState>
				</MvFOREACH>
			</PermittedStates>

			<PermittedCountries>
				<MvFOREACH ITERATOR = "l.country" ARRAY = "l.countries" COUNT = "{ [ g.Module_Library_DB ].StoreCountryList_Load_All( l.countries ) }">
					<PermittedCountry alpha="{ encodeentities( l.country:alpha ) }"><MvEVAL EXPR = "{ miva_cdata_encode( l.country:name ) }"></PermittedCountry>
				</MvFOREACH>
			</PermittedCountries>

			<MvIF EXPR = "{ g.Basket:cust_id AND g.Customer_Session_Verified }">
				<MvIF EXPR = "{ [ g.Module_Feature_CUS_DB ].Customer_Load_ID( g.Basket:cust_id, l.customer ) }">
					<SavedAddresses>
						<MvFOREACH ITERATOR = "l.address" ARRAY = "l.addresses" COUNT = "{ [ g.Module_Feature_CUS_DB ].CustomerAddressList_Load_Customer( g.Basket:cust_id, l.addresses ) }">
							<MvIF EXPR = "{ len_var( l.address:state ) }">
								<MvIF EXPR = "{ [ g.Module_Library_DB ].State_Load_Code( l.address:state, l.state ) }">
									<MvASSIGN NAME = "l.state_code"			VALUE = "">
									<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "{ l.state:code }">
								<MvELSE>
									<MvASSIGN NAME = "l.state_code"			VALUE = "{ l.address:state }">
									<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "">
								</MvIF>
							</MvIF>

							<Address>
								<ID><MvEVAL EXPR = "{ int( l.address:id ) }"></ID>
								<Description><MvEVAL EXPR = "{ miva_cdata_encode( l.address:descrip ) }"></Description>
								<Address1><MvEVAL EXPR = "{ miva_cdata_encode( l.address:addr1 ) }"></Address1>
								<Address2><MvEVAL EXPR = "{ miva_cdata_encode( l.address:addr2 ) }"></Address2>
								<City><MvEVAL EXPR = "{ miva_cdata_encode( l.address:city ) }"></City>
								<State><MvEVAL EXPR = "{ miva_cdata_encode( l.state_code ) }"></State>
								<StateSelect><MvEVAL EXPR = "{ miva_cdata_encode( l.stateselect_code ) }"></StateSelect>
								<Zip><MvEVAL EXPR = "{ miva_cdata_encode( l.address:zip ) }"></Zip>
								<Country><MvEVAL EXPR = "{ miva_cdata_encode( l.address:cntry ) }"></Country>
								<Default><MvEVAL EXPR = "{ l.customer:bill_id EQ l.address:id }"></Default>
							</Address>
						</MvFOREACH>
					</SavedAddresses>
				</MvIF>
			</MvIF>

			<ExistingCard>
				<MvIF EXPR = "{ l.settings:paymentcardtype:id GT 0 }">
					<CardType><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcardtype:type ) }"></CardType>
				<MvELSEIF EXPR = "{ l.settings:paymentcard:id }">
					<CardType><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:type ) }"></CardType>
					<FirstName><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:fname ) }"></FirstName>
					<LastName><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:lname ) }"></LastName>
					<CardPlaceholder><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:type $ ' ending in ' $ l.settings:paymentcard:lastfour ) }"></CardPlaceholder>
					<Token><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:token ) }"></Token>
					<ExpirationMonth><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:exp_month ) }"></ExpirationMonth>
					<ExpirationYear><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:exp_year ) }"></ExpirationYear>
				</MvIF>

				<MvIF EXPR = "{ l.settings:paymentcard:id }">
					<MvIF EXPR = "{ len_var( l.settings:paymentcard:state ) }">
						<MvIF EXPR = "{ [ g.Module_Library_DB ].State_Load_Code( l.settings:paymentcard:state, l.state ) }">
							<MvASSIGN NAME = "l.state_code"			VALUE = "">
							<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "{ l.state:code }">
						<MvELSE>
							<MvASSIGN NAME = "l.state_code"			VALUE = "{ l.settings:paymentcard:state }">
							<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "">
						</MvIF>
					</MvIF>

					<Address1><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:addr1 ) }"></Address1>
					<Address2><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:addr2 ) }"></Address2>
					<City><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:city ) }"></City>
					<State><MvEVAL EXPR = "{ miva_cdata_encode( l.state_code ) }"></State>
					<StateSelect><MvEVAL EXPR = "{ miva_cdata_encode( l.stateselect_code ) }"></StateSelect>
					<Zip><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:zip ) }"></Zip>
					<Country><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcard:cntry ) }"></Country>
				<MvELSEIF EXPR = "{ l.settings:paymentcardfields:mode EQ 'checkout' }">
					<MvIF EXPR = "{ len_var( g.Basket:bill_state ) }">
						<MvIF EXPR = "{ [ g.Module_Library_DB ].State_Load_Code( g.Basket:bill_state, l.state ) }">
							<MvASSIGN NAME = "l.state_code"			VALUE = "">
							<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "{ l.state:code }">
						<MvELSE>
							<MvASSIGN NAME = "l.state_code"			VALUE = "{ g.Basket:bill_state }">
							<MvASSIGN NAME = "l.stateselect_code" 	VALUE = "">
						</MvIF>
					</MvIF>

					<MvIF EXPR = "{ NOT ISNULL g.Basket:bill_addr1 }"><Address1><MvEVAL EXPR = "{ miva_cdata_encode( g.Basket:bill_addr1 ) }"></Address1></MvIF>
					<MvIF EXPR = "{ NOT ISNULL g.Basket:bill_addr2 }"><Address2><MvEVAL EXPR = "{ miva_cdata_encode( g.Basket:bill_addr2 ) }"></Address2></MvIF>
					<MvIF EXPR = "{ NOT ISNULL g.Basket:bill_city }"><City><MvEVAL EXPR = "{ miva_cdata_encode( g.Basket:bill_city ) }"></City></MvIF>
					<MvIF EXPR = "{ NOT ISNULL g.Basket:bill_zip }"><Zip><MvEVAL EXPR = "{ miva_cdata_encode( g.Basket:bill_zip ) }"></Zip></MvIF>
					<MvIF EXPR = "{ NOT ISNULL g.Basket:bill_cntry }"><Country><MvEVAL EXPR = "{ miva_cdata_encode( g.Basket:bill_cntry ) }"></Country></MvIF>

					<MvIF EXPR = "{ NOT ISNULL g.Basket:bill_state }">
						<State><MvEVAL EXPR = "{ miva_cdata_encode( l.state_code ) }"></State>
						<StateSelect><MvEVAL EXPR = "{ miva_cdata_encode( l.stateselect_code ) }"></StateSelect>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.cvv_setting NE 'hidden' }">
					<TokenCVVNonce><MvEVAL EXPR = "{ miva_cdata_encode( [ g.Module_Feature_PAY_UT ].MivaPay_Generate_CVV_Nonce() ) }"></TokenCVVNonce>
				</MvIF>
			</ExistingCard>

			<MvIF EXPR = "{ l.all_settings:paymentsettings:mivapay:ordr_cards }">
				<UnstoredTokenExpiration><MvEVAL EXPR = "{ l.all_settings:paymentsettings:mivapay:ordr_days * 60 * 60 * 24 }"></UnstoredTokenExpiration>
			<MvELSE>
				<UnstoredTokenExpiration><MvEVAL EXPR = "{ g.Store:baskexp * 60 }"></UnstoredTokenExpiration>
			</MvIF>
		</PaymentFormRequest><MIVA STANDARDOUTPUTLEVEL = "">
	</MvCAPTURE>

	<MvASSIGN NAME = "l.null" 											VALUE = "{ crypto_hmac_sha256( l.request_xml, crypto_base64_decode( [ g.Module_Library_Crypto ].Decrypt_Payment_Password( l.all_settings:paymentsettings:mivapay:signkey ) ), 'binary', l.signature ) }">
	<MvASSIGN NAME = "l.settings:paymentcardfields:request_xml" 		VALUE = "{ crypto_base64_encode( l.request_xml ) }">
	<MvASSIGN NAME = "l.settings:paymentcardfields:request_signature"	VALUE = "{ crypto_base64_encode( l.signature ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Head" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.settings:paymentcardtype:id OR l.settings:paymentcard:id }">
		<MvEVAL EXPR = "{ MivaPay_Guardian_JavaScript( l.module, l.item, l.all_settings, l.settings ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Start" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Render_Template( l.settings:paymentcardfields:template_filename, l.all_settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_End" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Prerender" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update_Requires_Version" PARAMETERS = "module var, page var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PostUpdate" PARAMETERS = "module var, page var, item, field_prefix, fields var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Generate_Code" PARAMETERS = "settings var, code var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.code">
		<MIVA STANDARDOUTPUTLEVEL = "text, html"><input type="hidden" id="mivapay_response_xml" name="ResponseXML" value="" />
<input type="hidden" id="mivapay_response_signature" name="ResponseSignature" value="" />

<iframe src="" id="mivapay_frame" name="MivaPay_Frame" marginheight="0" frameborder="0" style="width: 100%; height: 0; visibility: hidden;"></iframe>

<script type="text/javascript">
function stoi( value )
{
	return parseInt( value, 10 );
}

function stoi_def_nonneg( value, default_value )
{
	value = stoi( value );

	return ( ( isNaN( value ) || ( value < 0 ) || value == Number.POSITIVE_INFINITY || value == Number.NEGATIVE_INFINITY ) ? default_value : value );
}

function AddEvent( obj, eventType, fn  )
{
	if ( obj.addEventListener )
	{
		obj.addEventListener( eventType, fn, false );
		return true;
	}
	else if ( obj.attachEvent )
	{
		var r = obj.attachEvent( 'on' + eventType, fn );
		return r;
	}
	else
	{
		return false;
	}
}

function parentForm( element )
{
	while ( element.nodeName.toLowerCase() != 'form' && element.parentNode )
	{
		element = element.parentNode;
	}

	if ( element.nodeName.toLowerCase() != 'form' )
	{
		return;
	}

	return element;
}

function MivaPay()
{
	var self = this;

	this.submitting									= false;
	this.request_xml								= '&mvtj:mivapay:paymentcardfields:request_xml;';
	this.request_signature							= '&mvtj:mivapay:paymentcardfields:request_signature;';
	this.event_receivemessage 						= function( event ) { self.Receive_Message( event ); };

	AddEvent( window, 'message', this.event_receivemessage );

	this.element_frame								= document.getElementById( 'mivapay_frame' );
	this.element_response_xml						= document.getElementById( 'mivapay_response_xml' );
	this.element_response_signature					= document.getElementById( 'mivapay_response_signature' );

	if ( this.element_form = document.getElementById( 'mivapay_form' ) )
	{
		this.element_form_request_xml				= document.getElementById( 'mivapay_form_request_xml' );
		this.element_form_request_signature			= document.getElementById( 'mivapay_form_request_signature' );
	}
	else
	{
		this.element_form							= document.createElement( 'form' );
		this.element_form.id						= 'mivapay_form';
		this.element_form.target					= 'MivaPay_Frame';
		this.element_form.method					= 'POST';
		this.element_form.action					= '&mvtj:paymentsettings:mivapay:payment_url_sep;';

		this.element_form_request_xml 				= document.createElement( 'input' );
		this.element_form_request_xml.id			= 'mivapay_form_request_xml';
		this.element_form_request_xml.type			= 'hidden';
		this.element_form_request_xml.name			= 'RequestXML';

		this.element_form_request_signature			= document.createElement( 'input' );
		this.element_form_request_signature.id		= 'mivapay_form_request_signature';
		this.element_form_request_signature.type	= 'hidden';
		this.element_form_request_signature.name	= 'RequestSignature';

		this.element_form.appendChild( this.element_form_request_xml );
		this.element_form.appendChild( this.element_form_request_signature );
		document.body.appendChild( this.element_form );
	}

	this.element_form_request_xml.value				= this.request_xml;
	this.element_form_request_signature.value		= this.request_signature;

	this.element_form.submit();
}

MivaPay.prototype.Submit = function( callback )
{
	this.submit_callback = callback;

	if ( this.element_frame && !this.submitting )
	{
		this.submitting = true;
		this.element_frame.contentWindow.postMessage( 'submit', '&mvtj:paymentsettings:mivapay:base_url;' );
	}
}

MivaPay.prototype.Receive_Message = function( event )
{
	var origin, response, signature;

	origin 				= event.origin || event.originalEvent.origin;
	this.submitting 	= false;

	if ( '&mvtj:paymentsettings:mivapay:base_url;/'.indexOf( origin + '/' ) != 0 )
	{
		return;
	}

	if ( event && ( typeof event.data === 'string' ) )
	{
		if ( event.data.indexOf( 'dimensions:' ) == 0 )
		{
			if ( this.element_frame )
			{
				this.element_frame.style.width 			= '100%';
				this.element_frame.style.height 		= stoi_def_nonneg( event.data.split( ':' )[ 2 ], 0 ) + 'px';
				this.element_frame.style.visibility		= 'visible';
			}
		}
		else if ( event.data.indexOf( 'response:' ) == 0 )
		{
			response									= event.data.split( ':' )[ 1 ];
			signature									= event.data.split( ':' )[ 2 ];

			this.element_response_xml.value				= response;
			this.element_response_signature.value		= signature;

			if ( typeof this.submit_callback === 'function' )
			{
				this.submit_callback();
			}
		}<MIVA STANDARDOUTPUTLEVEL = "">

		<MvIF EXPR = "{ l.settings:paymentcardfields:mode EQ 'checkout' }"><MIVA STANDARDOUTPUTLEVEL = "text, html">
		else if ( event.data.indexOf( 'error:' ) == 0 )
		{
			this.element_response_xml.value				= '';
			this.element_response_signature.value		= '';

			if ( typeof this.submit_callback === 'function' )
			{
				this.submit_callback();
			}
		}<MIVA STANDARDOUTPUTLEVEL = "">
		</MvIF><MIVA STANDARDOUTPUTLEVEL = "text, html">
	}
}

var MivaPay = new MivaPay();
</script><MIVA STANDARDOUTPUTLEVEL = "">
	</MvCAPTURE>
</MvFUNCTION>

<MvFUNCTION NAME = "Generate_Code_CSS" PARAMETERS = "settings var, code var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.code">
		<MIVA STANDARDOUTPUTLEVEL = "text, html"><MvEVAL EXPR = "{ [ g.Module_Feature_PAY_UT ].MivaPay_Default_CSS() }"><MIVA STANDARDOUTPUTLEVEL = "">

		<MvIF EXPR = "{ l.settings:paymentcardfields:mode EQ 'checkout' }">
<MIVA STANDARDOUTPUTLEVEL = "text, html">,
{
	"selector": "#mvp_addressfields_container.mvp_addressfields_hide",
	"properties":
	{
		"display": "none"
	}
}<MIVA STANDARDOUTPUTLEVEL = "">
		</MvIF>
	</MvCAPTURE>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name" VALUE = "{ tolower( l.child:name ) }">

		<MvIF EXPR = "{ l.name EQ 'paymentcardfields' }">			<MvEVAL EXPR = "{ ComponentModule_Provision_PaymentCardFields_Update( l.module, l.child, l.settings ) }">
		<MvELSEIF EXPR = "{ l.name EQ 'paymentcardfields_css' }">	<MvEVAL EXPR = "{ ComponentModule_Provision_PaymentCardFields_CSS_Update( l.module, l.child, l.settings ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision_PaymentCardFields_Update" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateAndVersion_Load_Filename( l.settings:paymentcardfields:template_filename, l.managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Unable to load template' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.working_settings" VALUE = "{ l.settings }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text(		'o', l.provide_xml,	'Template',							l.template )														OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text(		'O', l.provide_xml,	'Notes',							l.notes )															OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Boolean(	'o', l.provide_xml, 'CardTypePromptHidden',				l.working_settings:paymentcardfields:cardtype_prompt_hidden )		OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text(		'O', l.provide_xml,	'CardTypePrompt',					l.working_settings:paymentcardfields:cardtype_prompt )				OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text(		'O', l.provide_xml,	'StoreCardPrompt',					l.working_settings:paymentcardfields:storecard_prompt )				OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Boolean(	'O', l.provide_xml,	'StoreCardPromptCheckedByDefault',	l.working_settings:paymentcardfields:storecard_checkedbydefault )	OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_List(		'O', l.provide_xml,	'Mode',								l.mode,
																							'paymentcard_add, paymentcard_edit, checkout',
																							'paymentcard_add, paymentcard_edit, checkout' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.mode }">
		<MvEVAL EXPR = "{ ModeToSettings_Convert( l.mode, l.working_settings ) }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Template' ) }">
			<MvEVAL EXPR = "{ Generate_Code( l.settings, l.template ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Template' ) }">
		<MvASSIGN NAME = "l.template" VALUE = "{ l.managedtemplate:version:source }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_CreateIfModified_ManagedTemplateVersion( l.managedtemplate, l.notes, l.template, l.working_settings:paymentcardfields ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvASSIGN NAME = "l.settings" VALUE = "{ l.working_settings }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Provision_PaymentCardFields_CSS_Update" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'r', l.provide_xml, 'Template',	l.template ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Notes',		l.notes ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Filename( l.settings:paymentcardfields_css:template_filename, l.managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Unable to load template' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_CreateIfModified_ManagedTemplateVersion( l.managedtemplate, l.notes, l.template, l.settings:paymentcardfields_css ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Module JSON Feature (json)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'Log' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Log() }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Log" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This function always outputs a 1x1 pixel, do not make a normal security preamble. Logging should only occur in runtime.
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ JSON_Log_LowLevel() }">

	<MvASSIGN NAME = "l.null" 	VALUE = "{ miva_output_header( 'Content-Type',	'image/gif' ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Pragma', 		'nocache' ) }">
	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Cache-Control',	'no-store' ) }">

	<MvEVAL EXPR = "{ crypto_base64_decode( 'R0lGODdhAQABAIAAAAAAAAAAACwAAAAAAQABAAACAkQBADs=' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Log_LowLevel" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'runtime' }">				<MvFUNCTIONRETURN> </MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">	<MvFUNCTIONRETURN> </MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'LoggingToken',	l.logging_token ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'MessageCode',	l.message_code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PAY_DB ].MivaPaySettings_Load_Cached( l.mivapay_settings ) }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT crypto_hmac_sha256( g.Basket:chksess_id, crypto_base64_decode( [ g.Module_Library_Crypto ].Decrypt_Payment_Password( l.mivapay_settings:signkey ) ), 'hex', l.computed_logging_token ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.logging_token EQ l.computed_logging_token }">
		<MvIF EXPR = "{ l.message_code EQ 'MER-CMP-CSSUI-MVP-00005' }">		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Runtime_Log_Action( l.message_code, 'MivaPay Vault Guardian Warning: MivaPay Vault frame not loaded in expected timeframe' ) }">
		<MvELSEIF EXPR = "{ l.message_code EQ 'MER-CMP-CSSUI-MVP-00006' }">	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Runtime_Log_Action( l.message_code, 'MivaPay Vault Guardian Warning: Frame not found or DOM ID hijacked' ) }">
		<MvELSEIF EXPR = "{ l.message_code EQ 'MER-CMP-CSSUI-MVP-00007' }">	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Runtime_Log_Action( l.message_code, 'MivaPay Vault Guardian Warning: Frame not visible - dimensions collapsed' ) }">
		<MvELSEIF EXPR = "{ l.message_code EQ 'MER-CMP-CSSUI-MVP-00008' }">	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Runtime_Log_Action( l.message_code, 'MivaPay Vault Guardian Warning: Frame not visible - moved out of viewport' ) }">
		<MvELSEIF EXPR = "{ l.message_code EQ 'MER-CMP-CSSUI-MVP-00009' }">	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Runtime_Log_Action( l.message_code, 'MivaPay Vault Guardian Warning: Frame not visible - visibility has been disabled' ) }">
		<MvELSEIF EXPR = "{ l.message_code EQ 'MER-CMP-CSSUI-MVP-00010' }">	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Runtime_Log_Action( l.message_code, 'MivaPay Vault Guardian Warning: Frame not visible - hidden behind another element' ) }">
		<MvELSEIF EXPR = "{ l.message_code EQ 'MER-CMP-CSSUI-MVP-00011' }">	<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].Runtime_Log_Action( l.message_code, 'MivaPay Vault Guardian Warning: Frame loaded but no dimensions received' ) }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Description" PARAMETERS = "module var, item var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pages" VALUE = "{ [ g.Module_Feature_TUI_DB ].Item_Load_PageList( l.item ) }">

	<MvFUNCTIONRETURN VALUE = "{ 'Exports MivaPay Vault Card Checkout/Add/Edit Content template from pages: ' $ l.pages }">
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item" PARAMETERS = "module var, item, output var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ [ g.Module_Feature_TUI_DB ].PageList_Load_Item_Runtime( l.item:id, l.pages ) }">
			<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.page:settings">
				<MvMEMBER NAME = "{ l.item:code }">
			</MvREFERENCEARRAY>

			<MvEVAL EXPR = "{ SettingsToMode_Convert( l.settings, l.mode ) }">

			<Page_Update code="{ l.page:code }">
				<Item code="{ l.item:code }">
					<PaymentCardFields>
						<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.settings:paymentcardfields:template_filename, l.templateversion ) }">
							<Template><MvEVAL EXPR = "{ miva_cdata_encode( l.templateversion:source ) }"></Template>
						</MvIF>

						<Mode><MvEVAL EXPR = "{ miva_cdata_encode( l.mode ) }"></Mode>
						<CardTypePromptHidden><MvIF EXPR = "{ l.settings:paymentcardfields:cardtype_prompt_hidden }">Yes<MvELSE>No</MvIF></CardTypePromptHidden>
						<CardTypePrompt><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcardfields:cardtype_prompt ) }"></CardTypePrompt>
						<StoreCardPrompt><MvEVAL EXPR = "{ miva_cdata_encode( l.settings:paymentcardfields:storecard_prompt ) }"></StoreCardPrompt>
						<StoreCardPromptCheckedByDefault><MvIF EXPR = "{ l.settings:paymentcardfields:storecard_checkedbydefault }">Yes<MvELSE>No</MvIF></StoreCardPromptCheckedByDefault>
						<Notes>#Set_Current_Time#</Notes>
					</PaymentCardFields>

					<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.settings:paymentcardfields_css:template_filename, l.css_templateversion ) }">
						<PaymentCardFields_CSS>
							<Template><MvEVAL EXPR = "{ miva_cdata_encode( l.css_templateversion:source ) }"></Template>
							<Notes>#Set_Current_Time#</Notes>
						</PaymentCardFields_CSS>
					</MvIF>
				</Item>
			</Page_Update>
		</MvFOREACH>
	</MvCAPTURE>
</MvFUNCTION>

<MvFUNCTION NAME = "SettingsToMode_Convert" PARAMETERS = "settings var, mode var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.settings:paymentcardfields:mode EQ 'paymentcard_add' }">       	<MvASSIGN NAME = "l.mode" VALUE = "paymentcard_add">
	<MvELSEIF EXPR = "{ l.settings:paymentcardfields:mode EQ 'paymentcard_edit' }">     <MvASSIGN NAME = "l.mode" VALUE = "paymentcard_edit">
	<MvELSEIF EXPR = "{ l.settings:paymentcardfields:mode EQ 'checkout' }">				<MvASSIGN NAME = "l.mode" VALUE = "checkout">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ModeToSettings_Convert" PARAMETERS = "mode var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.mode EQ 'paymentcard_add' }">				<MvASSIGN NAME = "l.settings:paymentcardfields:mode" VALUE = "paymentcard_add">
	<MvELSEIF EXPR = "{ l.mode EQ 'paymentcard_edit' }">		<MvASSIGN NAME = "l.settings:paymentcardfields:mode" VALUE = "paymentcard_edit">
	<MvELSEIF EXPR = "{ l.mode EQ 'checkout' }">				<MvASSIGN NAME = "l.settings:paymentcardfields:mode" VALUE = "checkout">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "MivaPay_Load_Templates" PARAMETERS = "template_filename, managedtemplate var, css_template_filename, css_managedtemplate var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ MivaPay_Load_Templates_Branch( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID(), l.template_filename, l.managedtemplate, l.css_template_filename, l.css_managedtemplate ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "MivaPay_Load_Templates_Branch" PARAMETERS = "branch_id, template_filename, managedtemplate var, css_template_filename, css_managedtemplate var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateAndVersion_Load_Branch_Filename( l.branch_id, l.template_filename, l.managedtemplate ) }">				<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateAndVersion_Load_Branch_Filename( l.branch_id, l.css_template_filename, l.css_managedtemplate ) }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "MivaPay_Load_TemplateVersions" PARAMETERS = "template_filename, templateversion var, css_template_filename,	css_templateversion var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ MivaPay_Load_TemplateVersions_Branch( [ g.Module_Feature_TUI_MGR ].TemplateManager_Working_Branch_ID(), l.template_filename, l.templateversion, l.css_template_filename, l.css_templateversion ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "MivaPay_Load_TemplateVersions_Branch" PARAMETERS = "branch_id, template_filename, templateversion var, css_template_filename,	css_templateversion var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Branch_Head( l.branch_id, l.template_filename, l.templateversion ) }">					<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Branch_Head( l.branch_id, l.css_template_filename, l.css_templateversion ) }">		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "MivaPay_Guardian_JavaScript" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.null" VALUE = "{ crypto_hmac_sha256( g.Basket:chksess_id, crypto_base64_decode( [ g.Module_Library_Crypto ].Decrypt_Payment_Password( l.all_settings:paymentsettings:mivapay:signkey ) ), 'hex', l.logging_token ) }">

	<script id="mvp_guardian" type="text/javascript">
		<MvCOMMENT>
		|
		| Wrapped in anonymous function to avoid the class being altered
		|
		</MvCOMMENT>

		(function()
		{
			function MivaPay_Guardian()
			{
				var self = this;
				var element_script;

				<MvCOMMENT>
				|
				| Remove script tag from document. Contents will already be parsed
				|
				</MvCOMMENT>

				element_script							= document.getElementById( 'mvp_guardian' );

				if ( element_script.parentNode )
				{
					element_script.parentNode.removeChild( element_script );
				}

				this.element_image						= document.createElement( 'img' );

				this._random							= Math.random;
				this._floor								= Math.floor;
				this._ceil								= Math.ceil;
				this._parseint							= parseInt;
				this._parsefloat						= parseFloat;
				this._isnan								= isNaN;
				this._cleartimeout						= clearTimeout;
				this._settimeout						= setTimeout;
				this._requestanimationframe				= requestAnimationFrame;
				this._cancelanimationframe				= cancelAnimationFrame;

				this.frameguardian_active				= false;
				this.frameguardian_dimensions_received	= false;
				this.frameguardian_frame				= null;
				this.frameguardian_frameloaded_timeout	= null;
				this.frameguardian_check_overlay_count	= 0;
				this.frameguardian_contentloaded		= function( event ) { self.FrameGuardian_SiphonCleanFunctions(); };
				this.frameguardian_message				= function( event ) { self.Receive_Message( event ); };
				this.frameguardian_render				= function()
				{
					self.FrameGuardian_Render();

					if ( self.frameguardian_active )
					{
						self.frameguardian_render_id = self.requestAnimationFrame( self.frameguardian_render );
					}
				};

				this.FrameGuardian_SetFrameLoadTimeout( 'MER-CMP-CSSUI-MVP-00005', 15000 );

				this.AddEvent( window,		'message',			this.frameguardian_message );
				this.AddEvent( document,	'DOMContentLoaded',	this.frameguardian_contentloaded );
			}

			MivaPay_Guardian.prototype.FrameGuardian_SiphonCleanFunctions = function()
			{
				var element_frame;

				this.initializeScrollBarDimensions();

				element_frame				= document.createElement( 'iframe' );
				document.body.appendChild( element_frame );

				this._random				= element_frame.contentWindow.Math.random;
				this._floor					= element_frame.contentWindow.Math.floor;
				this._ceil					= element_frame.contentWindow.Math.ceil;
				this._parseint				= element_frame.contentWindow.parseInt;
				this._parsefloat			= element_frame.contentWindow.parseFloat;
				this._isnan					= element_frame.contentWindow.isNaN;
				this._cleartimeout			= element_frame.contentWindow.clearTimeout;
				this._settimeout			= element_frame.contentWindow.setTimeout;
				this._requestanimationframe	= element_frame.contentWindow.requestAnimationFrame;
				this._cancelanimationframe	= element_frame.contentWindow.cancelAnimationFrame;

				element_frame.parentNode.removeChild( element_frame );
			}

			MivaPay_Guardian.prototype.FrameGuardian_SetFrameLoadTimeout = function( code, timeout )
			{
				var self = this;
				this.frameguardian_frameloaded_timeout = this.setTimeout( function() { self.Log( code ); }, timeout );
			}

			MivaPay_Guardian.prototype.Receive_Message = function( event )
			{
				var self = this;
				var origin, mivapay_submit, mivapay_context;

				origin = event.origin || event.originalEvent.origin;

				if ( !this.frameguardian_frame )
				{
					this.frameguardian_frame = document.getElementById( 'mivapay_frame' );
				}

				if ( ( ( '<MvEVAL EXPR = "{ encodejavascriptstring( l.all_settings:paymentsettings:mivapay:base_url ) }">/' ).indexOf( origin + '/' ) !== 0 ) )		return;
				else if ( !this.frameguardian_frame || ( event.source !== this.frameguardian_frame.contentWindow ) )												return this.Log( 'MER-CMP-CSSUI-MVP-00006' );

				if ( event && ( typeof event.data === 'string' ) )
				{
					if ( event.data === 'document_loaded' )
					{
						if ( !this.frameguardian_dimensions_received )
						{
							this.clearTimeout( this.frameguardian_frameloaded_timeout );
							this.FrameGuardian_SetFrameLoadTimeout( 'MER-CMP-CSSUI-MVP-00011', 0 );
						}
					}
					else if ( event.data.indexOf( 'dimensions:' ) === 0 )
					{
						this.frameguardian_dimensions_received = true;

						this.clearTimeout( this.frameguardian_frameloaded_timeout );
						this.FrameGuardian_Enable();

						if ( window.MivaPay )
						{
							mivapay_context			= window.MivaPay;
							mivapay_submit			= window.MivaPay.Submit;
							window.MivaPay.Submit	= function( callback )
							{
								self.FrameGuardian_Disable();
								mivapay_submit.call( mivapay_context, callback );
							}
						}
					}
					else if ( event.data.indexOf( 'field_error:' ) === 0 )
					{
						this.FrameGuardian_Enable();
					}
				}
			}

			MivaPay_Guardian.prototype.FrameGuardian_Enable = function()
			{
				if ( this.frameguardian_active )
				{
					return;
				}

				this.frameguardian_active		= true;
				this.frameguardian_render_id	= this.requestAnimationFrame( this.frameguardian_render );
			}

			MivaPay_Guardian.prototype.FrameGuardian_Disable = function()
			{
				if ( !this.frameguardian_active )
				{
					return;
				}

				this.frameguardian_active = false;
				this.cancelAnimationFrame( this.frameguardian_render_id );
			}

			MivaPay_Guardian.prototype.FrameGuardian_Render = function()
			{
				var data;

				data					= new Object();
				data.rect				= this.frameguardian_frame.getBoundingClientRect();
				data.scroll_top			= this.getScrollTop();
				data.scroll_left		= this.getScrollLeft();
				data.window_dimensions	= this.windowDimensions();

				if ( !this.FrameGuardian_Render_Check_Dimensions( data )	||
					 !this.FrameGuardian_Render_Check_Position( data )		||
					 !this.FrameGuardian_Render_Check_Visibility( data )	||
					 !this.FrameGuardian_Render_Check_Overlay( data ) )
				{
					return;
				}
			}

			MivaPay_Guardian.prototype.FrameGuardian_Render_Check_Dimensions = function( data )
			{
				if ( data.rect.width === 0 || data.rect.height === 0 )
				{
					return this.Log( 'MER-CMP-CSSUI-MVP-00007' );
				}

				return true;
			}

			MivaPay_Guardian.prototype.FrameGuardian_Render_Check_Position = function( data )
			{
				if ( data.rect.top + data.scroll_top < 0 || data.rect.left + data.scroll_left < 0 )
				{
					return this.Log( 'MER-CMP-CSSUI-MVP-00008' );
				}

				return true;
			}

			MivaPay_Guardian.prototype.FrameGuardian_Render_Check_Visibility = function( data )
			{
				if ( ( this.computedStyleValue( this.frameguardian_frame, 'display' ) === 'none' ) ||
					 ( this.computedStyleValue( this.frameguardian_frame, 'visibility' ) === 'hidden' ) ||
					 ( this.parseFloat( this.computedStyleValue( this.frameguardian_frame, 'opacity' ) ) == 0 ) )
				{
					return this.Log( 'MER-CMP-CSSUI-MVP-00009' );
				}

				return true;
			}

			MivaPay_Guardian.prototype.FrameGuardian_Render_Check_Overlay_BuildRows = function( top, bottom )
			{
				var i, spacing, rows;

				rows = new Array();
				rows.push( top );

				for ( i = this.stoi( top + this.RandomIntFromRange( 7, 18 ) ); i < bottom; i += this.RandomIntFromRange( 7, 18 ) )
				{
					rows.push( i );
				}

				rows.push( bottom );

				return rows;
			}

			MivaPay_Guardian.prototype.FrameGuardian_Render_Check_Overlay_BuildCols = function( left, right )
			{
				var i, spacing, cols;

				cols = new Array();
				cols.push( left );

				for ( i = this.stoi( left + this.RandomIntFromRange( 37, 52 ) ); i < right; i += this.RandomIntFromRange( 37, 52 ) )
				{
					cols.push( i );
				}

				cols.push( right );

				return cols;
			}

			MivaPay_Guardian.prototype.FrameGuardian_Render_Check_Overlay = function( data )
			{
				var x, y, element, col_checks, row_checks, offset_width, offset_height, scroll_element, viewable_frame_top, viewable_frame_left, viewable_frame_right, viewable_frame_bottom;

				<MvCOMMENT>
				|
				| Check roughly once every second as this call is more expensive
				|
				| Spot check frame to make sure nothing is covering it. We're specifically checking to make sure
				| a.) the entire field is not covered, and
				| b.) the fields themselves are not covered with elements sitting on top of them
				|
				</MvCOMMENT>

				if ( ++this.frameguardian_check_overlay_count % 60 !== 0 )
				{
					return true;
				}

				this.frameguardian_check_overlay_count = 0;

				scroll_element			= document.scrollingElement || document.documentElement;
				offset_width			= ( scroll_element.scrollHeight > scroll_element.clientHeight ? this.scrollbar_width : 0 );
				offset_height			= ( scroll_element.scrollWidth > scroll_element.clientWidth ? this.scrollbar_height : 0 );

				viewable_frame_top		= this.stod_max( this.stod_min( this._ceil( data.rect.top ) + 1, 0 ), data.window_dimensions.y - ( offset_height + 1 ) );
				viewable_frame_right	= this.stod_max( this.stod_min( this._floor( data.rect.right ) - 1, 0 ), data.window_dimensions.x - ( offset_width + 1 ) );
				viewable_frame_bottom	= this.stod_max( this.stod_min( this._floor( data.rect.bottom ) - 1, 0 ), data.window_dimensions.y - ( offset_height + 1 ) );
				viewable_frame_left		= this.stod_max( this.stod_min( this._ceil( data.rect.left ) + 1, 0 ), data.window_dimensions.x - ( offset_width + 1 ) );

				if ( viewable_frame_top === viewable_frame_bottom || viewable_frame_left === viewable_frame_right )
				{
					return;
				}

				row_checks				= this.FrameGuardian_Render_Check_Overlay_BuildRows( viewable_frame_top, viewable_frame_bottom );
				col_checks				= this.FrameGuardian_Render_Check_Overlay_BuildCols( viewable_frame_left, viewable_frame_right );

				for ( y in row_checks )
				{
					if ( !row_checks.hasOwnProperty( y ) )
					{
						continue;
					}

					for ( x in col_checks )
					{
						if ( !col_checks.hasOwnProperty( x ) )
						{
							continue;
						}

						element = document.elementFromPoint( col_checks[ x ], row_checks[ y ] );

						if ( element !== this.frameguardian_frame && !this.containsChild( element, this.frameguardian_frame ) )
						{
							return this.Log( 'MER-CMP-CSSUI-MVP-00010' );
						}
					}
				}

				return true;
			}

			MivaPay_Guardian.prototype.Log = function( code )
			{
				this.element_image.src = '<MvEVAL EXPR = "{ encodejavascriptstring( g.json_nosessionurl ) }">' + 'Store_Code=<MvEVAL EXPR = "{ encodejavascriptstring( encodeattribute( g.Store_Code ) ) }">&Function=Module&Module_Code=cmp-cssui-mivapay&Module_Function=Log&Session_Type=runtime&LoggingToken=<MvEVAL EXPR = "{ encodejavascriptstring( encodeattribute( l.logging_token ) ) }">&MessageCode=' + encodeURIComponent( code ) + '&v=' + encodeURIComponent( ( new Date() ).getTime() );

				this.Terminate();

				return false;
			}

			MivaPay_Guardian.prototype.Terminate = function()
			{
				this.clearTimeout( this.frameguardian_frameloaded_timeout );
				this.RemoveEvent( window, 'message', this.frameguardian_message );
				this.FrameGuardian_Disable();
			}

			<MvCOMMENT>
			|
			| Helper functions (avoids dependencies on other files)
			|
			</MvCOMMENT>

			MivaPay_Guardian.prototype.AddEvent = function( obj, eventType, fn  )
			{
				try
				{
					obj.addEventListener( eventType, fn, false );
					return true;
				}
				catch ( e )
				{
					try
					{
						return obj.attachEvent( 'on' + eventType, fn );
					}
					catch ( e )
					{
						return false;
					}
				}
			}

			MivaPay_Guardian.prototype.RemoveEvent = function( obj, eventType, fn  )
			{
				try
				{
					obj.removeEventListener( eventType, fn, false );
					return true;
				}
				catch ( e )
				{
					try
					{
						return obj.detachEvent( 'on' + eventType, fn );
					}
					catch ( e )
					{
						return false;
					}
				}
			}

			MivaPay_Guardian.prototype.containsChild = function( parent_elem, element )
			{
				if ( element )
				{
					while ( ( element = element.parentNode ) != null )
					{
						if ( element === parent_elem )
						{
							return true;
						}
					}
				}

				return false;
			}

			MivaPay_Guardian.prototype.computedStyleValue = function( element, property )
			{
				if ( element instanceof Element )
				{
					return window.getComputedStyle( element, null ).getPropertyValue( property )
				}
				else if ( element.ownerDocument && element.ownerDocument.defaultView && element instanceof element.ownerDocument.defaultView.Element )
				{
					return element.ownerDocument.defaultView.getComputedStyle( element, null ).getPropertyValue( property );
				}

				return this.returnUndefined()
			}

			MivaPay_Guardian.prototype.initializeScrollBarDimensions = function()
			{
				var element_scrollbar;

				element_scrollbar					= document.createElement( 'div' );
				element_scrollbar.style.position	= 'absolute';
				element_scrollbar.style.top			= '-9999px';
				element_scrollbar.style.width		= '100px';
				element_scrollbar.style.height		= '100px';
				element_scrollbar.style.overflow	= 'scroll';

				document.body.appendChild( element_scrollbar );

				this.scrollbar_width				= element_scrollbar.offsetWidth - element_scrollbar.clientWidth;
				this.scrollbar_height				= element_scrollbar.offsetHeight - element_scrollbar.clientHeight;

				element_scrollbar.parentNode.removeChild( element_scrollbar );
			}

			MivaPay_Guardian.prototype.returnUndefined = function()
			{
				return;
			}

			MivaPay_Guardian.prototype.testBoxModel = function()
			{
				var div;

				div							= document.createElement( 'div' );
				div.style.width				= '1px';
				div.style.paddingLeft		= '1px';

				document.body.appendChild( div );

				window.boxModelSupported	= div.offsetWidth === 2;
				window.boxModelTested		= true;

				document.body.removeChild( div ).style.display = 'none';
			}

			MivaPay_Guardian.prototype.getScrollTop = function()
			{
				if ( !window.boxModelTested )
				{
					this.testBoxModel();
				}

				if ( 'pageYOffset' in window )			return window.pageYOffset;
				else if ( window.boxModelSupported )	return document.documentElement.scrollTop;
				else									return document.body.scrollTop;
			}

			MivaPay_Guardian.prototype.getScrollLeft = function()
			{
				if ( !window.boxModelTested )
				{
					this.testBoxModel();
				}

				if ( 'pageXOffset' in window )			return window.pageXOffset;
				else if ( window.boxModelSupported )	return document.documentElement.scrollLeft;
				else									return document.body.scrollLeft;
			}

			MivaPay_Guardian.prototype.windowDimensions = function()
			{
				var winW, winH;

				if ( window.innerWidth && window.innerHeight )
				{
					winW = window.innerWidth;
					winH = window.innerHeight;
				}
				else if ( document.compatMode == 'CSS1Compat'	&&
						  document.documentElement				&&
						  document.documentElement.offsetWidth )
				{
					winW = document.documentElement.offsetWidth;
					winH = document.documentElement.offsetHeight;
				}
				else if ( document.body && document.body.offsetWidth )
				{
					winW = document.body.offsetWidth;
					winH = document.body.offsetHeight;
				}

				return { x : winW, y : winH }
			}

			MivaPay_Guardian.prototype.parseInt = function( string, radix )
			{
				return this._parseint.call( window, string, radix );
			}

			MivaPay_Guardian.prototype.parseFloat = function( string )
			{
				return this._parsefloat.call( window, string );
			}

			MivaPay_Guardian.prototype.isNaN = function( value )
			{
				return this._isnan.call( window, value );
			}

			MivaPay_Guardian.prototype.clearTimeout = function( timeoutID )
			{
				return this._cleartimeout.call( window, timeoutID );
			}

			MivaPay_Guardian.prototype.setTimeout = function( fn, delay )
			{
				return this._settimeout.call( window, fn, delay );
			}

			MivaPay_Guardian.prototype.requestAnimationFrame = function( callback )
			{
				return this._requestanimationframe.call( window, callback );
			}

			MivaPay_Guardian.prototype.cancelAnimationFrame = function( requestID )
			{
				return this._cancelanimationframe.call( window, requestID );
			}

			MivaPay_Guardian.prototype.RandomIntFromRange = function( min, max )
			{
				return this._floor( this._random() * ( max - min ) + min );
			}

			MivaPay_Guardian.prototype.stoi = function( value )
			{
				return this.parseInt( value, 10 );
			}

			MivaPay_Guardian.prototype.stod = function( value )
			{
				return this.parseFloat( value );
			}

			MivaPay_Guardian.prototype.stoi_min = function( value, min_value )
			{
				value = stoi( value );

				return ( ( this.isNaN( value ) || ( value < min_value ) || value == Number.POSITIVE_INFINITY || value == Number.NEGATIVE_INFINITY ) ? min_value : value );
			}

			MivaPay_Guardian.prototype.stoi_max = function( value, max_value )
			{
				value = stoi( value );

				return ( ( this.isNaN( value ) || ( value > max_value ) || value == Number.POSITIVE_INFINITY || value == Number.NEGATIVE_INFINITY ) ? max_value : value );
			}

			MivaPay_Guardian.prototype.stod_min = function( value, min_value )
			{
				value = stod( value );

				return ( ( this.isNaN( value ) || ( value < min_value ) || value == Number.POSITIVE_INFINITY || value == Number.NEGATIVE_INFINITY ) ? min_value : value );
			}

			MivaPay_Guardian.prototype.stod_max = function( value, max_value )
			{
				value = stod( value );

				return ( ( this.isNaN( value ) || ( value > max_value ) || value == Number.POSITIVE_INFINITY || value == Number.NEGATIVE_INFINITY ) ? max_value : value );
			}

			new MivaPay_Guardian();
		})();
	</script>
</MvFUNCTION>
