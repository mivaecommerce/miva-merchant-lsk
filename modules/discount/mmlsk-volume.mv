<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-DSC-VOL-
| Next Error Code: 21
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-discount_volume">
	<MvASSIGN NAME = "l.module:name"		VALUE = "Volume Pricing">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Miva Merchant">
	<MvASSIGN NAME = "l.module:version"		VALUE = "10.1100">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "10.08">
	<MvASSIGN NAME = "l.module:features"	VALUE = "data_store, discount, vis_product, not_prod, import, provision_store, component, component_prov, skins, json, clientside, clientside_sri, copy_prod">
</MvFUNCTION>

<MvCOMMENT>
|
| data_store
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Install_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides
						  (
							pgrp_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()			$ ',
							product_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()			$ ',
							low			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()			$ ',
							high		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()			$ ',
							type		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 1 )			$ ',
							amount		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 16, 8 )	$ '
						  )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00001', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides_1 ON ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides ( pgrp_id, product_id, low )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00002', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Upgrade_Store" PARAMETERS = "module var, version" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Uninstall_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides' }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscountOverride_Read" PARAMETERS = "override var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.override:pgrp_id"		VALUE = "{ VolumeDiscountOverrides.d.pgrp_id }">
	<MvASSIGN NAME = "l.override:product_id"	VALUE = "{ VolumeDiscountOverrides.d.product_id }">
	<MvASSIGN NAME = "l.override:low"			VALUE = "{ VolumeDiscountOverrides.d.low }">
	<MvASSIGN NAME = "l.override:high"			VALUE = "{ VolumeDiscountOverrides.d.high }">
	<MvASSIGN NAME = "l.override:type"			VALUE = "{ VolumeDiscountOverrides.d.type }">
	<MvASSIGN NAME = "l.override:amount"		VALUE = "{ VolumeDiscountOverrides.d.amount }">
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscountOverride_Insert" PARAMETERS = "override var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides
						  ( pgrp_id, product_id, low, high, type, amount )
						  VALUES
						  ( ?, ?, ?, ?, ?, ? )' }"
			 FIELDS	= "l.override:pgrp_id, l.override:product_id, l.override:low,
					   l.override:high, l.override:type, l.override:amount">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00003', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscountOverride_Delete_All_PriceGroup" PARAMETERS = "pgrp_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides
						  WHERE
							pgrp_id		= ?' }"
			 FIELDS	= "l.pgrp_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00004', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscountOverride_Delete_All_Product" PARAMETERS = "product_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides
						  WHERE
							product_id	= ?' }"
			 FIELDS	= "l.product_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00005', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscountOverride_Delete_All_PriceGroup_Product" PARAMETERS = "pgrp_id, product_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides
						  WHERE
							pgrp_id		= ?	AND
							product_id	= ?' }"
			 FIELDS	= "l.pgrp_id, l.product_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00006', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscountOverride_Copy_All_PriceGroup" PARAMETERS = "source_pgrp_id, dest_pgrp_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides ( pgrp_id, product_id, low, high, type, amount )
			 			  SELECT ?, product_id, low, high, type, amount FROM ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides WHERE pgrp_id = ?' }"
			 FIELDS = "l.dest_pgrp_id, l.source_pgrp_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00016', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscountOverrideLookup_Load_Product" PARAMETERS = "product_id, overrides var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "VolumeDiscountOverrides"
				QUERY	= "{ 'SELECT
								*
							  FROM
								' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides
							  WHERE
								product_id	= ?
							  ORDER BY
								pgrp_id, product_id, low' }"
			    FIELDS	= "l.product_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00007', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.overrides"							VALUE = "">
	<MvASSIGN NAME = "l.last_pgrp_id"						VALUE = 0>

	<MvWHILE EXPR = "{ NOT VolumeDiscountOverrides.d.EOF }">
		<MvIF EXPR = "{ VolumeDiscountOverrides.d.pgrp_id GT 0 }">
			<MvIF EXPR = "{ VolumeDiscountOverrides.d.pgrp_id NE l.last_pgrp_id }">
				<MvASSIGN NAME = "l.group_override_count"	VALUE = 0>
				<MvASSIGN NAME = "l.last_pgrp_id"			VALUE = "{ VolumeDiscountOverrides.d.pgrp_id }">
			</MvIF>

			<MvEVAL EXPR = "{ VolumeDiscountOverride_Read( l.overrides[ VolumeDiscountOverrides.d.pgrp_id ][ ++l.group_override_count ] ) }">
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "VolumeDiscountOverrides" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "VolumeDiscountOverrides">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscountOverrideLookup_Load_PriceGroup_Eligible_Products" PARAMETERS = "pgrp_id, eligible_products var, eligible_product_count, overrides var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.overrides"	VALUE = "">

	<MvIF EXPR = "{ l.eligible_product_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCAPTURE VARIABLE = "l.query_products">
		<MvEVAL EXPR = "( ">

		<MvFOR INDEX = "l.pos" COUNT = "{ l.eligible_product_count }">
			<MvIF EXPR = "{ l.pos GT 1 }">
				<MvEVAL EXPR = " OR ">
			</MvIF>

			<MvEVAL EXPR = "product_id = ?">

			<MvASSIGN NAME = "l.null"	VALUE = "{ miva_array_insert( l.query_fields, 'l.eligible_products[' $ l.pos $ ']:product_id', -1 ) }">
		</MvFOR>

		<MvEVAL EXPR = " )">
	</MvCAPTURE>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "VolumeDiscountOverrides"
				QUERY	= "{ 'SELECT
								*
							  FROM
								' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides
							  WHERE
								pgrp_id = ? AND
								' $ l.query_products $ '
							  ORDER BY
								pgrp_id, product_id, low' }"
			    FIELDS	= "{ 'l.pgrp_id,' $ l.query_fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00008', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.last_product_id"					VALUE = 0>

	<MvWHILE EXPR = "{ NOT VolumeDiscountOverrides.d.EOF }">
		<MvIF EXPR = "{ VolumeDiscountOverrides.d.product_id GT 0 }">
			<MvIF EXPR = "{ VolumeDiscountOverrides.d.product_id NE l.last_product_id }">
				<MvASSIGN NAME = "l.product_override_count"	VALUE = 0>
				<MvASSIGN NAME = "l.last_product_id"		VALUE = "{ VolumeDiscountOverrides.d.product_id }">
			</MvIF>

			<MvEVAL EXPR = "{ VolumeDiscountOverride_Read( l.overrides[ VolumeDiscountOverrides.d.product_id ][ ++l.product_override_count ] ) }">
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "VolumeDiscountOverrides" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "VolumeDiscountOverrides">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "PriceGroupList_Load_VolumeDiscount_Product" PARAMETERS = "module_id, product_id, pricegroups var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pricegroup_count"	VALUE = 0>
	<MvASSIGN NAME = "l.pricegroups"		VALUE = "">
	<MvASSIGN NAME = "l.inclusion_ids"		VALUE = "">
	<MvASSIGN NAME = "l.exclusion_ids"		VALUE = "">

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "PriceGroups"
				QUERY	= "{ 'SELECT
								pg.*
							  FROM
								' $ g.Store_Table_Prefix $ 'PriceGroups pg,
								' $ g.Store_Table_Prefix $ 'PriceGroupXProduct pgxp
							  WHERE
								pg.module_id	= ?		AND
								pg.exclusion	= 0		AND
								pgxp.pgrp_id	= pg.id	AND
								pgxp.product_id	= ?
							  UNION ALL
							  SELECT
								pg.*
							  FROM
								' $ g.Store_Table_Prefix $ 'PriceGroups pg
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'PriceGroupXExcludedProduct pgxep ON pgxep.pgrp_id = pg.id AND pgxep.product_id = ?
							  WHERE
								pg.module_id	= ?		AND
								pg.exclusion	= 1		AND
								pgxep.pgrp_id IS NULL' }"
				FIELDS	= "l.module_id, l.product_id,
						   l.product_id, l.module_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00009', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT PriceGroups.d.EOF }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroup_Read( l.pricegroup ) }">

		<MvIF EXPR = "{ l.pricegroup:exclusion }">
			<MvASSIGN NAME = "l.exclusion_ids" INDEX ="{ l.pricegroup:id }" VALUE = 1>
		<MvELSE>
			<MvASSIGN NAME = "l.inclusion_ids" INDEX ="{ l.pricegroup:id }" VALUE = 1>
			<MvASSIGN NAME = "l.pricegroup_count"							VALUE = "{ miva_array_insert_var( l.pricegroups, l.pricegroup, -1 ) }">
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "PriceGroups" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "PriceGroups">

	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "PriceGroups"
				QUERY 	= "{ 'SELECT
								pg.*
							  FROM
							  	' $ g.Store_Table_Prefix $ 'PriceGroups pg,
							  	' $ g.Store_Table_Prefix $ 'PriceGroupXCategory pgxc,
							  	' $ g.Store_Table_Prefix $ 'CategoryXProduct cxp
							  WHERE
							  	pg.module_id	= ?				AND
							  	pg.exclusion	= 0				AND
							  	pg.id			= pgxc.pgrp_id	AND
							  	cxp.product_id	= ?				AND
							  	cxp.cat_id		= pgxc.cat_id
							  UNION
							  SELECT
							  	pg.*
							  FROM
							  	' $ g.Store_Table_Prefix $ 'PriceGroups pg
							  	LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'PriceGroupXExcludedCategory pgxec ON pgxec.pgrp_id = pg.id
							  	LEFT OUTER JOIN	' $ g.Store_Table_Prefix $ 'CategoryXProduct cxp ON cxp.cat_id = pgxec.cat_id AND cxp.product_id = ?
							  WHERE
							  	pg.module_id	= ? AND
							  	pg.exclusion	= 1 AND
							  	cxp.product_id IS NULL' }"
				FIELDS	= "l.module_id, l.product_id,
						   l.product_id, l.module_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00015', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT PriceGroups.d.EOF }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroup_Read( l.pricegroup ) }">

		<MvIF EXPR = "{ l.pricegroup:exclusion }">
			<MvIF EXPR = "{ l.exclusion_ids[ l.pricegroup:id ] }">
				<MvASSIGN NAME = "l.pricegroup_count" VALUE = "{ miva_array_insert_var( l.pricegroups, l.pricegroup, -1 ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT l.inclusion_ids[ l.pricegroup:id ] }">
				<MvASSIGN NAME = "l.pricegroup_count" VALUE = "{ miva_array_insert_var( l.pricegroups, l.pricegroup, -1 ) }">
			</MvIF>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "PriceGroups" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "PriceGroups">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-DSC-VOL-00010', l.pricegroup_count ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| discount
|
</MvCOMMENT>

<MvFUNCTION NAME = "DiscountModule_Capabilities" PARAMETERS = "module var, capabilities var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.capabilities:items"					VALUE = 1>
	<MvASSIGN NAME = "l.capabilities:basket"				VALUE = 0>
	<MvASSIGN NAME = "l.capabilities:shipping"				VALUE = 0>
	<MvASSIGN NAME = "l.capabilities:tax"					VALUE = 0>
	<MvASSIGN NAME = "l.capabilities:provision_settings"	VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_Fields" PARAMETERS = "module var, pricegroup var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Volume_Discount_Quantity"				VALUE = "">
	<MvASSIGN NAME = "g.Volume_Discount_Type"					VALUE = "">
	<MvASSIGN NAME = "g.Volume_Discount_Amount"					VALUE = "">

	<MvIF EXPR = "{ l.pricegroup:id }">
		<MvASSIGN NAME = "g.Volume_Discount_Grouping"			VALUE = "{ l.pricegroup:config:grouping }">
		<MvASSIGN NAME = "g.Volume_Discount_Method"				VALUE = "{ l.pricegroup:config:method }">
		<MvASSIGN NAME = "g.Volume_Discount_ProgressiveMode"	VALUE = "{ l.pricegroup:config:progmode }">

		<MvFOREACH INDEX = "l.pos" ITERATOR = "l.table_entry" ARRAY = "l.pricegroup:config:table">
			<MvASSIGN NAME = "g.Volume_Discounts"	INDEX = "{ l.pos }"	MEMBER = "quantity"	VALUE = "{ l.table_entry:low }">
			<MvASSIGN NAME = "g.Volume_Discounts"	INDEX = "{ l.pos }"	MEMBER = "type"		VALUE = "{ l.table_entry:type }">
			<MvASSIGN NAME = "g.Volume_Discounts"	INDEX = "{ l.pos }"	MEMBER = "amount"	VALUE = "{ [ g.Module_Library_Utilities ].Price_Pad( l.table_entry:amount ) }">
		</MvFOREACH>
	<MvELSE>
		<MvASSIGN NAME = "g.Volume_Discount_Grouping"			VALUE = "same_product">
		<MvASSIGN NAME = "g.Volume_Discount_Method"				VALUE = "cumulative">
		<MvASSIGN NAME = "g.Volume_Discount_ProgressiveMode"	VALUE = "highest_first">

		<MvASSIGN NAME = "g.Volume_Discounts"		INDEX = 1			MEMBER = "quantity"	VALUE = "1">
		<MvASSIGN NAME = "g.Volume_Discounts"		INDEX = 1			MEMBER = "type"		VALUE = "P">
		<MvASSIGN NAME = "g.Volume_Discounts"		INDEX = 1			MEMBER = "amount"	VALUE = "0.00">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "grouping,method,progmode,table">
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_Invalid" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_Prompt" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.field_id EQ 'grouping' }">		<MvFUNCTIONRETURN VALUE = "<b>Grouping:</b>">
	<MvELSEIF EXPR = "{ l.field_id EQ 'method' }">		<MvFUNCTIONRETURN VALUE = "<b>Pricing Method:</b>">
	<MvELSEIF EXPR = "{ l.field_id EQ 'progmode' }">	<MvFUNCTIONRETURN VALUE = "<b>Progressive Mode:</b>">
	<MvELSEIF EXPR = "{ l.field_id EQ 'table' }">		<MvFUNCTIONRETURN VALUE = "Pricing Table:">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_Field" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.field_id EQ 'grouping' }">
		<select name="Volume_Discount_Grouping">
		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'all',				g.Volume_Discount_Grouping, 'All Eligible Products' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'same_product',	g.Volume_Discount_Grouping, 'Same Product' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'same_variant',	g.Volume_Discount_Grouping, 'Same Product Variant' ) }">
		</select>
	<MvELSEIF EXPR = "{ l.field_id EQ 'method' }">
		<select name="Volume_Discount_Method" onchange="Volume_Discount_Enable_ProgressiveMode( this.value === 'progressive' ? true : false );">
		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'cumulative',	g.Volume_Discount_Method, 'Apply Single Pricing Table Entry Using Total Quantity' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'progressive',	g.Volume_Discount_Method, 'Apply Pricing Table Progressively' ) }">
		</select>
	<MvELSEIF EXPR = "{ l.field_id EQ 'progmode' }">
		<MvIF EXPR = "{ g.Volume_Discount_Method EQ 'progressive' }">
			<select name="Volume_Discount_ProgressiveMode" id="volume_discount_progressivemode">
		<MvELSE>
			<select name="Volume_Discount_ProgressiveMode" id="volume_discount_progressivemode" disabled>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'highest_first',	g.Volume_Discount_ProgressiveMode, 'Higher Priced Items are Priced Using Earlier Pricing Table Entries' ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'lowest_first',	g.Volume_Discount_ProgressiveMode, 'Lower Priced Items are Priced Using Earlier Pricing Table Entries' ) }">
		</select>
	<MvELSEIF EXPR = "{ l.field_id EQ 'table' }">
		<table id="volume_discount_table">
		<thead>
			<tr>
				<th>Quantity</th>
				<th>Type</th>
				<th align="right">Amount</th>
				<th>&nbsp;</th>
			</tr>
		</thead>

		<tbody id="volume_discount_data">
			<MvASSIGN NAME = "l.discount_count"			VALUE = 0>

			<MvFOREACH ITERATOR = "l.discount" ARRAY = "g.Volume_Discounts">
				<MvASSIGN NAME = "l.discount_count"		VALUE = "{ l.discount_count + 1 }">

				<tr class="volume_discount_row"><td>
					<input type="text" size="5" name="{ 'Volume_Discounts[' $ l.discount_count $ ']:quantity' }" value="{ encodeentities( l.discount:quantity ) }">
				</td><td>
					<select name="{ 'Volume_Discounts[' $ l.discount_count $ ']:type' }">
					<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'P', l.discount:type, 'Percent' ) }">
					<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'F', l.discount:type, 'Fixed' ) }">
					</select>
				</td><td align="right">
					<input type="text" size="10" name="{ 'Volume_Discounts[' $ l.discount_count $ ']:amount' }" value="{ encodeentities( l.discount:amount ) }">
				</td><td>
					<span onclick="this.parentNode.parentNode.parentNode.removeChild( this.parentNode.parentNode )">X</span>
				</td></tr>
			</MvFOREACH>

			<MvIF EXPR = "{ ( l.discount_count EQ 0 ) OR ( l.discount_count MOD 5 ) }">
				<MvFOR COUNT = "{ 5 - ( l.discount_count MOD 5 ) }">
					<MvASSIGN NAME = "l.discount_count"	VALUE = "{ l.discount_count + 1 }">

					<tr class="volume_discount_row"><td>
						<input type="text" size="5" name="{ 'Volume_Discounts[' $ l.discount_count $ ']:quantity' }" value="">
					</td><td>
						<select name="{ 'Volume_Discounts[' $ l.discount_count $ ']:type' }">
						<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'P', 'P', 'Percent' ) }">
						<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'F', 'P', 'Fixed' ) }">
						</select>
					</td><td align="right">
						<input type="text" size="10" name="{ 'Volume_Discounts[' $ l.discount_count $ ']:amount' }" value="0.00">
					</td><td>
						<span onclick="this.parentNode.parentNode.parentNode.removeChild( this.parentNode.parentNode )">X</span>
					</td></tr>
				</MvFOR>
			</MvIF>

			<input id="volume_discount_count" type="hidden" name="Volume_Discount_Count" value="{ encodeentities( l.discount_count ) }">
		</tbody>

		<tbody>
			<tr><td colspan="3" align="center">
				<a href="JavaScript:Volume_Discount_More();">More Entries</a>
			</td><td>
				&nbsp;
			</td></tr>
		</tbody>
		</table>
	</MvIF>

	<MvIF EXPR = "{ ( NOT g.Session:cache:discount_volume:script_output ) AND
					(
						( l.field_id EQ 'table' ) OR
						( l.field_id EQ 'method' )
					) }">
		<MvASSIGN NAME = "g.Session:cache:discount_volume:script_output"	VALUE = 1>
		<MvASSIGN NAME = "l.integrity"										VALUE = "{ Module_Clientside_File_Integrity( l.module, 'functions.js', g.Session:clientside_minified ) }">

		<img src="{ g.AdminGraphics_Path $ 'blank.gif' }" onload="{ 'var u = \'' $ [ g.Module_Admin ].JavaScriptEncode( g.clientside_url $ 'Module_Code=' $ encodeattribute( l.module:code ) $ '&Filename=' ) $ '\'; if ( document.createStyleSheet ) { var s = document.createStyleSheet( u + \'styles.css\' ); } else { var s = document.createElement( \'link\' ); s.setAttribute( \'rel\', \'stylesheet\' ); s.setAttribute( \'href\', u + \'styles.css\' ); this.parentNode.appendChild( s ); } var js = document.createElement( \'script\' ); js.setAttribute( \'src\', u + \'functions.js\' ); js.setAttribute( \'integrity\', \'' $ encodejavascriptstring( l.integrity ) $ '\' ); js.setAttribute( \'crossorigin\', \'anonymous\' ); this.parentNode.appendChild( js );' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_Validate" PARAMETERS = "module var, pricegroup var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Volume_Discount_ApplyTo"			VALUE = "{ trim( g.Volume_Discount_ApplyTo ) }">
	<MvASSIGN NAME = "g.Volume_Discount_Method"				VALUE = "{ trim( g.Volume_Discount_Method ) }">
	<MvASSIGN NAME = "g.Volume_Discount_ProgressiveMode"	VALUE = "{ trim( g.Volume_Discount_ProgressiveMode ) }">

	<MvIF EXPR = "{ ( g.Volume_Discount_Grouping NE 'all' )				AND
					( g.Volume_Discount_Grouping NE 'same_product' )	AND
					( g.Volume_Discount_Grouping NE 'same_variant' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( '', '', 'Please select how products are grouped for quantity determination' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( g.Volume_Discount_Method NE 'progressive' )	AND
					( g.Volume_Discount_Method NE 'cumulative' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( '', '', 'Please select a pricing method' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( g.Volume_Discount_ProgressiveMode NE 'highest_first' )	AND
					( g.Volume_Discount_ProgressiveMode NE 'lowest_first' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( '', '', 'Please select a progressive calculation mode' ) }">
	</MvIF>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.discount" ARRAY = "g.Volume_Discounts">
		<MvASSIGN NAME = "l.discount:quantity"				VALUE = "{ trim( l.discount:quantity ) }">
		<MvASSIGN NAME = "l.discount:type"					VALUE = "{ trim( l.discount:type ) }">
		<MvASSIGN NAME = "l.discount:amount"				VALUE = "{ trim( l.discount:amount ) }">

		<MvIF EXPR = "{ NOT ISNULL l.discount:quantity }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.discount:quantity ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( '', 'Volume_Discounts[' $ l.pos $ ']:quantity', g.Validation_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ miva_array_search( g.Volume_Discounts, l.pos + 1, l.duplicate_discount, 'l.duplicate_discount:quantity EQ l.discount:quantity' ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( '', 'Volume_Discounts[' $ l.pos $ ']:quantity', 'Duplicate quantity' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.discount:type EQ 'P' }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Currency_Optional( l.discount:amount ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( '', 'Volume_Discounts[' $ l.pos $ ']:amount', g.Validation_Message ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.discount:type EQ 'F' }">
			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Price_Optional( l.discount:amount ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( '', 'Volume_Discounts[' $ l.pos $ ']:amount', g.Validation_Message ) }">
			</MvIF>	
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( '', '', 'Please select a discount type' ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_Update" PARAMETERS = "module var, pricegroup var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Copy non-empty quantity breaks into an output array of discounts
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.discount" ARRAY = "g.Volume_Discounts">
		<MvASSIGN NAME = "l.table_entry:low"		VALUE = "{ l.discount:quantity }">
		<MvASSIGN NAME = "l.table_entry:type"		VALUE = "{ l.discount:type }">
		<MvASSIGN NAME = "l.table_entry:amount"		VALUE = "{ l.discount:amount }">

		<MvIF EXPR = "{ NOT ISNULL l.table_entry:low }">
			<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.table, l.table_entry, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.entry_count"				VALUE = "{ miva_array_sort( l.table, 'Volume_Discount_Table_Sort', l.null ) }">
	<MvIF EXPR = "{ l.entry_count }">
		<MvCOMMENT>
		|
		| Assign upper bounds
		|
		</MvCOMMENT>

		<MvFOREACH INDEX = "l.pos" ITERATOR = "l.table_entry" ARRAY = "l.table" COUNT = "{ l.entry_count - 1 }">
			<MvASSIGN NAME = "l.table_entry:high"		VALUE = "{ l.table[ l.pos + 1 ]:low - 1 }">
		</MvFOREACH>

		<MvCOMMENT>
		|
		| The last entry in the table always has an unlimited upper bound
		|
		</MvCOMMENT>

		<MvASSIGNARRAY NAME = "l.table" VALUE = 0>
			<MvDIMENSION INDEX = "{ l.entry_count }">
			<MvMEMBER NAME = "high">
		</MvASSIGNARRAY>
	</MvIF>

	<MvASSIGN NAME = "l.pricegroup:config:grouping"	VALUE = "{ g.Volume_Discount_Grouping }">
	<MvASSIGN NAME = "l.pricegroup:config:method"	VALUE = "{ g.Volume_Discount_Method }">
	<MvASSIGN NAME = "l.pricegroup:config:progmode"	VALUE = "{ g.Volume_Discount_ProgressiveMode }">
	<MvASSIGN NAME = "l.pricegroup:config:table"	VALUE = "{ l.table }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_Provision_Settings" PARAMETERS = "module var, pricegroup var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.pricegroup:module_id NE l.module:id }">
		<MvASSIGN NAME = "l.pricegroup:config:grouping"	VALUE = "same_product">
		<MvASSIGN NAME = "l.pricegroup:config:method"	VALUE = "cumulative">
		<MvASSIGN NAME = "l.pricegroup:config:progmode"	VALUE = "highest_first">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_List( 'o', l.provide_xml, 'Grouping',			l.pricegroup:config:grouping,	'All,SameProduct,SameVariant',	'all,same_product,same_variant' )	OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_List( 'o', l.provide_xml, 'Method',				l.pricegroup:config:method,		'Cumulative,Progressive',		'cumulative,progressive' )			OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_List( 'o', l.provide_xml, 'ProgressiveMode',	l.pricegroup:config:progmode,	'HighestFirst,LowestFirst',		'highest_first,lowest_first' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'DefaultPricingTable' ) }">
		<MvASSIGN NAME = "l.table"			VALUE = "">

		<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:tags:DefaultPricingTable[ 1 ]:children">
			<MvASSIGN NAME = "l.name"		VALUE = "{ tolower( l.child_xml:name ) }">
			<MvASSIGN NAME = "l.entry"		VALUE = "">

			<MvIF EXPR = "{ l.name EQ 'entry' }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Integer(	l.child_xml, 'quantity',	l.entry:low ) OR
								NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List(		l.child_xml, 'type',		l.entry:type, 'fixed,percent', 'F,P' ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ l.entry:type EQ 'P' }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Number( l.child_xml, 'amount', l.entry:amount, 10, 2 ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				<MvELSE>
					<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Number( l.child_xml, 'amount', l.entry:amount, 16, 8 ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.entry:low LE 0 }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'quantity must be greater than 0' ) }">
				</MvIF>

				<MvIF EXPR = "{ miva_element_exists( l.table, l.entry:low ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'quantity ' $ l.entry:low $ ' specified more than once' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.table" INDEX = "{ l.entry:low }" VALUE = "{ l.entry }">
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.entry_count"				VALUE = "{ miva_array_sort( l.table, 'Volume_Discount_Table_Sort', l.null ) }">
		<MvIF EXPR = "{ l.entry_count }">
			<MvCOMMENT>
			|
			| Assign upper bounds
			|
			</MvCOMMENT>

			<MvFOREACH INDEX = "l.pos" ITERATOR = "l.entry" ARRAY = "l.table" COUNT = "{ l.entry_count - 1 }">
				<MvASSIGN NAME = "l.entry:high"			VALUE = "{ l.table[ l.pos + 1 ]:low - 1 }">
			</MvFOREACH>

			<MvCOMMENT>
			|
			| The last entry in the table always has an unlimited upper bound
			|
			</MvCOMMENT>

			<MvASSIGNARRAY NAME = "l.table" VALUE = 0>
				<MvDIMENSION INDEX = "{ l.entry_count }">
				<MvMEMBER NAME = "high">
			</MvASSIGNARRAY>
		</MvIF>

		<MvASSIGN NAME = "l.pricegroup:config:table"	VALUE = "{ l.table }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_PriceGroup_Copy" PARAMETERS = "module var, source_pricegroup var, dest_pricegroup var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT VolumeDiscountOverride_Delete_All_PriceGroup( l.dest_pricegroup:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ VolumeDiscountOverride_Copy_All_PriceGroup( l.source_pricegroup:id, l.dest_pricegroup:id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_PriceGroup_Delete" PARAMETERS = "module var, pricegroup var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ VolumeDiscountOverride_Delete_All_PriceGroup( l.pricegroup:id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Discount_Table_Sort" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.left:low LT l.right:low }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:low GT l.right:low }">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvCOMMENT>
|
| These sort functions differ from the ones in features/pgr/pgr_ut.mv in that they break ties by
| product_id then variant_id, and finally, put items with higher line_ids later in the output array,
| to guarantee that those items receive the highest quantity volume discount.  This ensures that
| predicted discounts are calculated correctly.
|
</MvCOMMENT>

<MvFUNCTION NAME = "Volume_Item_Sort_TotalPriceDescending" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.left:total_price GT l.right:total_price }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:total_price LT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:product_id LT l.right:product_id }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:product_id GT l.right:product_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:variant_id LT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:variant_id GT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:line_id LT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:line_id GT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Item_Sort_TotalPriceAscending" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.left:total_price LT l.right:total_price }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:total_price GT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:product_id LT l.right:product_id }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:product_id GT l.right:product_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:variant_id LT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:variant_id GT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:line_id LT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:line_id GT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Item_Sort_Product_TotalPriceDescending" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.left:product_id LT l.right:product_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:product_id GT l.right:product_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:total_price GT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:total_price LT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:variant_id LT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:variant_id GT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:line_id LT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:line_id GT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Item_Sort_Product_TotalPriceAscending" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.left:product_id LT l.right:product_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:product_id GT l.right:product_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:total_price LT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:total_price GT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:variant_id LT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:variant_id GT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:line_id LT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:line_id GT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Item_Sort_Variant_TotalPriceDescending" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.left:product_id LT l.right:product_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:product_id GT l.right:product_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:variant_id LT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:variant_id GT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:total_price GT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:total_price LT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:line_id LT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:line_id GT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Item_Sort_Variant_TotalPriceAscending" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.left:product_id LT l.right:product_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:product_id GT l.right:product_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:variant_id LT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:variant_id GT l.right:variant_id }">		<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:total_price LT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:total_price GT l.right:total_price }">	<MvFUNCTIONRETURN VALUE = 1>

	<MvELSEIF EXPR = "{ l.left:line_id LT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:line_id GT l.right:line_id }">			<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "DiscountModule_Discount_Items" PARAMETERS = "module var, pricegroup var, discount_state var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.eligible_product_count"		VALUE = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Eligible_Products( l.discount_state, l.eligible_products ) }">
	<MvASSIGN NAME = "l.item_count"					VALUE = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Eligible_Items( l.discount_state, l.items ) }">

	<MvCOMMENT>
	|
	| Items with overridden pricing are always grouped by that particular product and priced separately
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT VolumeDiscountOverrideLookup_Load_PriceGroup_Eligible_Products( l.pricegroup:id, l.eligible_products, l.eligible_product_count, l.overrides ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ miva_array_elements( l.overrides ) }">
		<MvCOMMENT>
		|
		| Check for variant part product overrides for sum-of-parts variants
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.clear_items"								VALUE = "">

		<MvIF EXPR = "{ l.pricegroup:config:progmode EQ 'highest_first' }">			<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_TotalPriceDescending', l.null ) }">
		<MvELSEIF EXPR = "{ l.pricegroup:config:progmode EQ 'lowest_first' }">		<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_TotalPriceAscending', l.null ) }">
		</MvIF>

		<MvFOREACH INDEX = "l.product_id" ITERATOR = "l.product_table" ARRAY = "l.overrides">
			<MvASSIGN NAME = "l.item_pos"								VALUE = "{ miva_array_search( l.items, 1, l.item, 'Volume_Search_PartProducts( l.item, l.product_id )' ) }">
			<MvIF EXPR = "{ l.item_pos }">
				<MvASSIGN NAME = "l.discountable_item_count"			VALUE = 0>

				<MvWHILE EXPR = "{ l.item_pos }">
					<MvASSIGN NAME = "l.part_product_pos"				VALUE = "{ miva_array_search( l.item:part_products, 1, l.part_product, 'l.part_product:id EQ l.product_id' ) }">

					<MvREFERENCEARRAY NAME = "l.discountable_item" VARIABLE = "l.discountable_items">
						<MvDIMENSION INDEX = "{ ++l.discountable_item_count }">
					</MvREFERENCEARRAY>

					<MvASSIGN NAME = "l.discountable_item:price"		VALUE = "{ l.part_product:price }">

					<MvREFERENCEARRAY NAME = "l.discountable_item:item" VARIABLE = "l.items">
						<MvDIMENSION INDEX = "{ l.item_pos }">
					</MvREFERENCEARRAY>

					<MvASSIGN NAME = "l.discountable_item:quantity"		VALUE = "{ l.discountable_item:item:quantity }">
					<MvASSIGN NAME = "l.discountable_item:multiplier"	VALUE = 0>

					<MvWHILE EXPR = "{ l.part_product_pos }">
						<MvASSIGN NAME = "l.discountable_item:multiplier"	VALUE = "{ l.discountable_item:multiplier + l.part_product:quantity }">
						<MvASSIGN NAME = "l.part_product_pos"				VALUE = "{ miva_array_search( l.item:part_products, l.part_product_pos + 1, l.part_product, 'l.part_product:id EQ l.product_id' ) }">
					</MvWHILE>

					<MvCOMMENT>
					|
					| Unless the master product is explicitly eligible, mark the item to be removed from the eligible item array to prevent
					| additional volume discounts from being applied.
					|
					</MvCOMMENT>

					<MvIF EXPR = "{ NOT l.item:master_eligible }">
						<MvASSIGNARRAY NAME = "l.clear_items" VALUE = "{ l.item_pos }">
							<MvDIMENSION INDEX = "{ l.item:product_id }">
							<MvDIMENSION INDEX = "{ l.item:variant_id + 1 }">
						</MvASSIGNARRAY>
					</MvIF>

					<MvASSIGN NAME = "l.item_pos"						VALUE = "{ miva_array_search( l.items, l.item_pos + 1, l.item, 'Volume_Search_PartProducts( l.item, l.product_id )' ) }">
				</MvWHILE>

				<MvEVAL EXPR = "{ Volume_Discount( l.pricegroup, l.discount_state, l.product_table, l.discountable_items, l.discountable_item_count ) }">

				<MvCOMMENT>
				|
				| Items must be reloaded if we apply any discounts because the discounting operation may
				| split items, which would otherwise not be picked up by future passes.
				|
				</MvCOMMENT>

				<MvASSIGN NAME = "l.item_count"							VALUE = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Eligible_Items( l.discount_state, l.items ) }">

				<MvIF EXPR = "{ l.pricegroup:config:progmode EQ 'highest_first' }">			<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_TotalPriceDescending', l.null ) }">
				<MvELSEIF EXPR = "{ l.pricegroup:config:progmode EQ 'lowest_first' }">		<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_TotalPriceAscending', l.null ) }">
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Remove items that had part discounts applied
		|
		</MvCOMMENT>

		<MvFOREACH INDEX = "l.product_id" ITERATOR = "l.clear_product" ARRAY = "l.clear_items">
			<MvFOREACH INDEX = "l.variant_id_plusone" ITERATOR = "l.clear_variant" ARRAY = "l.clear_product">
				<MvASSIGN NAME = "l.item_pos"		VALUE = "{ miva_array_search( l.items, 1, l.item, '( l.item:product_id EQ l.product_id ) AND ( l.item:variant_id EQ ( l.variant_id_plusone - 1 ) )' ) }">
				<MvWHILE EXPR = "{ l.item_pos }">
					<MvASSIGN NAME = "l.item_count"	VALUE = "{ miva_array_delete( l.items, l.item_pos, 1 ) }">
					<MvASSIGN NAME = "l.item_pos"	VALUE = "{ miva_array_search( l.items, l.item_pos, l.item, '( l.item:product_id EQ l.product_id ) AND ( l.item:variant_id EQ ( l.variant_id_plusone - 1 ) )' ) }">
				</MvWHILE>
			</MvFOREACH>
		</MvFOREACH>

		<MvCOMMENT>
		|
		| Apply master product (and non-variant) overrides
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.pricegroup:config:grouping EQ 'same_variant' }">
			<MvIF EXPR = "{ l.pricegroup:config:progmode EQ 'highest_first' }">		<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_Variant_TotalPriceDescending', l.null ) }">
			<MvELSEIF EXPR = "{ l.pricegroup:config:progmode EQ 'lowest_first' }">	<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_Variant_TotalPriceAscending', l.null ) }">
			</MvIF>

			<MvASSIGN NAME = "l.search"				VALUE = "( l.next_item:product_id NE l.item:product_id ) OR ( l.next_item:variant_id NE l.item:variant_id )">
		<MvELSE>
			<MvIF EXPR = "{ l.pricegroup:config:progmode EQ 'highest_first' }">		<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_Product_TotalPriceDescending', l.null ) }">
			<MvELSEIF EXPR = "{ l.pricegroup:config:progmode EQ 'lowest_first' }">	<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_Product_TotalPriceAscending', l.null ) }">
			</MvIF>

			<MvASSIGN NAME = "l.search"				VALUE = "l.next_item:product_id NE l.item:product_id">
		</MvIF>

		<MvFOREACH INDEX = "l.product_id" ITERATOR = "l.product_table" ARRAY = "l.overrides">
			<MvASSIGN NAME = "l.start_pos"		VALUE = "{ miva_array_search( l.items, 1, l.item, 'l.item:product_id EQ l.product_id' ) }">
			<MvWHILE EXPR = "{ l.start_pos }">
				<MvASSIGN NAME = "l.end_pos"	VALUE = "{ miva_array_search( l.items, l.start_pos + 1, l.next_item, l.search ) }">

				<MvIF EXPR = "{ l.end_pos EQ 0 }">	<MvASSIGN NAME = "l.count"	VALUE = "{ l.item_count - l.start_pos + 1 }">
				<MvELSE>							<MvASSIGN NAME = "l.count"	VALUE = "{ l.end_pos - l.start_pos }">
				</MvIF>

				<MvEVAL EXPR = "{ Volume_Discount_Items( l.pricegroup, l.discount_state, l.product_table, l.items, l.start_pos, l.count ) }">

				<MvASSIGN NAME = "l.item_count"	VALUE = "{ miva_array_delete( l.items, l.start_pos, l.count ) }">
				<MvASSIGN NAME = "l.start_pos"	VALUE = "{ miva_array_search( l.items, l.start_pos, l.item, 'l.item:product_id EQ l.product_id' ) }">
			</MvWHILE>
		</MvFOREACH>

		<MvIF EXPR = "{ l.item_count EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Break the remaining items into chunks depending on the grouping setting, discounting each chunk
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.pricegroup:config:grouping EQ 'all' }">
		<MvIF EXPR = "{ l.pricegroup:config:progmode EQ 'highest_first' }">			<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_TotalPriceDescending', l.null ) }">
		<MvELSEIF EXPR = "{ l.pricegroup:config:progmode EQ 'lowest_first' }">		<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_TotalPriceAscending', l.null ) }">
		</MvIF>

		<MvEVAL EXPR = "{ Volume_Discount_Items( l.pricegroup, l.discount_state, l.pricegroup:config:table, l.items, 1, l.item_count ) }">
	<MvELSE>
		<MvIF EXPR = "{ l.pricegroup:config:grouping EQ 'same_product' }">
			<MvIF EXPR = "{ l.pricegroup:config:progmode EQ 'highest_first' }">		<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_Product_TotalPriceDescending', l.null ) }">
			<MvELSEIF EXPR = "{ l.pricegroup:config:progmode EQ 'lowest_first' }">	<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_Product_TotalPriceAscending', l.null ) }">
			</MvIF>

			<MvASSIGN NAME = "l.search"				VALUE = "l.next_item:product_id NE l.item:product_id">
		<MvELSEIF EXPR = "{ l.pricegroup:config:grouping EQ 'same_variant' }">
			<MvIF EXPR = "{ l.pricegroup:config:progmode EQ 'highest_first' }">		<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_Variant_TotalPriceDescending', l.null ) }">
			<MvELSEIF EXPR = "{ l.pricegroup:config:progmode EQ 'lowest_first' }">	<MvASSIGN NAME = "l.item_count" VALUE = "{ miva_array_sort( l.items, 'Volume_Item_Sort_Variant_TotalPriceAscending', l.null ) }">
			</MvIF>

			<MvASSIGN NAME = "l.search"				VALUE = "( l.next_item:product_id NE l.item:product_id ) OR ( l.next_item:variant_id NE l.item:variant_id )">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.item_pos"				VALUE = 1>

		<MvWHILE EXPR = "{ l.item_pos LT l.item_count }">
			<MvREFERENCEARRAY NAME = "l.item" VARIABLE = "l.items">
				<MvDIMENSION INDEX = "{ l.item_pos }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.end_pos"			VALUE = "{ miva_array_search( l.items, l.item_pos + 1, l.next_item, l.search ) }">
			<MvIF EXPR = "{ l.end_pos EQ 0 }">
				<MvWHILESTOP>
			</MvIF>

			<MvEVAL EXPR = "{ Volume_Discount_Items( l.pricegroup, l.discount_state, l.pricegroup:config:table, l.items, l.item_pos, l.end_pos - l.item_pos ) }">

			<MvASSIGN NAME = "l.item_pos"			VALUE = "{ l.end_pos }">
		</MvWHILE>

		<MvIF EXPR = "{ l.item_pos LE l.item_count }">
			<MvEVAL EXPR = "{ Volume_Discount_Items( l.pricegroup, l.discount_state, l.pricegroup:config:table, l.items, l.item_pos, l.item_count - l.item_pos + 1 ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Search_PartProducts" PARAMETERS = "item var, product_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( l.item:productvariantpricing:method NE 2 ) OR
					( l.item:product_id LE 0 ) OR
					( l.item:variant_id LT 0 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFOREACH ITERATOR = "l.part_product" ARRAY = "l.item:part_products" COUNT = "{ l.item:part_product_count }">
		<MvIF EXPR = "{ l.part_product:id EQ l.product_id }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Discount_Items" PARAMETERS = "pricegroup var, discount_state var, table var, items var, start, item_count" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH INDEX = "l.item_pos" ITERATOR = "l.item" ARRAY = "l.items" FIRST = "{ l.start }" LAST = "{ l.start + l.item_count - 1 }">
		<MvASSIGN NAME = "l.discountable_item:quantity"		VALUE = "{ l.item:quantity }">
		<MvASSIGN NAME = "l.discountable_item:price"		VALUE = "{ l.item:eligible_price }">
		<MvASSIGN NAME = "l.discountable_item:multiplier"	VALUE = 1>
		<MvASSIGN NAME = "l.discountable_item_count"		VALUE = "{ miva_array_insert( l.discountable_items, l.discountable_item, -1 ) }">

		<MvCOMMENT>
		|
		| This crazy looking code is necessary to ensure that the item reference within the array element points to the actual discount state item
		|
		</MvCOMMENT>

		<MvREFERENCE NAME = "{ 'l.discountable_items[' $ l.discountable_item_count $ ']:item' }" VARIABLE = "{ 'l.items[' $ l.item_pos $ ']' }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ Volume_Discount( l.pricegroup, l.discount_state, l.table, l.discountable_items, l.discountable_item_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Discount" PARAMETERS = "pricegroup var, discount_state var, table var, discountable_items var, discountable_item_count" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.pricegroup:config:method EQ 'progressive' }">		<MvFUNCTIONRETURN VALUE = "{ Volume_Discount_Progressive( l.pricegroup, l.discount_state, l.table, l.discountable_items, l.discountable_item_count ) }">
	<MvELSEIF EXPR = "{ l.pricegroup:config:method EQ 'cumulative' }">	<MvFUNCTIONRETURN VALUE = "{ Volume_Discount_Cumulative( l.pricegroup, l.discount_state, l.table, l.discountable_items, l.discountable_item_count ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Discount_Progressive" PARAMETERS = "pricegroup var, discount_state var, table var, discountable_items var, discountable_item_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.discount_pos"					VALUE = 1>
	<MvASSIGN NAME = "l.discount_count"					VALUE = "{ miva_array_elements( l.table ) }">
	<MvASSIGN NAME = "l.running_quantity"				VALUE = 0>

	<MvREFERENCEARRAY NAME = "l.discount" VARIABLE = "l.table">
		<MvDIMENSION INDEX = "{ l.discount_pos }">
	</MvREFERENCEARRAY>

	<MvFOREACH ITERATOR = "l.discountable_item" ARRAY = "l.discountable_items" COUNT = "{ l.discountable_item_count }">
		<MvASSIGN NAME = "l.remaining_quantity"			VALUE = "{ l.discountable_item:quantity * l.discountable_item:multiplier }">
		<MvWHILE EXPR = "{ l.remaining_quantity }">
			<MvCOMMENT>
			|
			| Skip items below the threshold
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ ( l.running_quantity + l.remaining_quantity ) LT l.discount:low }">
				<MvASSIGN NAME = "l.running_quantity"	VALUE = "{ l.running_quantity + l.remaining_quantity }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.running_quantity LT l.discount:low }">
				<MvASSIGN NAME = "l.delta"				VALUE = "{ l.discount:low - l.running_quantity - 1 }">
				<MvASSIGN NAME = "l.remaining_quantity"	VALUE = "{ l.remaining_quantity - l.delta }">
				<MvASSIGN NAME = "l.running_quantity"	VALUE = "{ l.running_quantity + l.delta }">
			</MvIF>

			<MvCOMMENT>
			|
			| Calculate how many items are discounted at this rate
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ ( l.discount:high EQ 0 ) OR ( ( l.running_quantity + l.remaining_quantity ) LE l.discount:high ) }">
				<MvASSIGN NAME = "l.discount_quantity"	VALUE = "{ l.remaining_quantity }">
			<MvELSE>
				<MvASSIGN NAME = "l.discount_quantity"	VALUE = "{ l.discount:high - l.running_quantity }">
			</MvIF>

			<MvCOMMENT>
			|
			| Calculate how many whole items are discounted and any remainder, which will be applied to a single quantity
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.discount_item_quantity"	VALUE = "{ int( l.discount_quantity / l.discountable_item:multiplier ) }">
			<MvASSIGN NAME = "l.discount_remainder"		VALUE = "{ l.discount_quantity - ( l.discount_item_quantity * l.discountable_item:multiplier ) }">

			<MvCOMMENT>
			|
			| Discount the item
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.discount_item_quantity }">
				<MvIF EXPR = "{ l.discount:type EQ 'F' }">		<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Item_Fixed( l.discount_state, l.discountable_item:item, l.discount_item_quantity, l.discount:amount * l.discountable_item:multiplier ) }">
				<MvELSEIF EXPR = "{ l.discount:type EQ 'A' }">	<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Item_Fixed( l.discount_state, l.discountable_item:item, l.discount_item_quantity, ( l.discountable_item:price - l.discount:amount ) * l.discountable_item:multiplier ) }">
				<MvELSEIF EXPR = "{ l.discount:type EQ 'P' }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Price_IsHighPrecision( l.discountable_item:price ) }">	<MvASSIGN NAME = "l.scale" VALUE = 2>
					<MvELSE>																									<MvASSIGN NAME = "l.scale" VALUE = 8>
					</MvIF>

					<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Item_Fixed( l.discount_state, l.discountable_item:item, l.discount_item_quantity, ( ( l.discountable_item:price * ( l.discount:amount / 100.00 ) ) * l.discountable_item:multiplier ) ROUND l.scale ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.discount_remainder }">
				<MvIF EXPR = "{ l.discount:type EQ 'F' }">		<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Item_Fixed( l.discount_state, l.discountable_item:item, 1, l.discount:amount * l.discount_remainder ) }">
				<MvELSEIF EXPR = "{ l.discount:type EQ 'A' }">	<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Item_Fixed( l.discount_state, l.discountable_item:item, 1, ( l.discountable_item:price - l.discount:amount ) * l.discount_remainder ) }">
				<MvELSEIF EXPR = "{ l.discount:type EQ 'P' }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Price_IsHighPrecision( l.discountable_item:price ) }">	<MvASSIGN NAME = "l.scale" VALUE = 2>
					<MvELSE>																									<MvASSIGN NAME = "l.scale" VALUE = 8>
					</MvIF>

					<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Item_Fixed( l.discount_state, l.discountable_item:item, 1, ( ( l.discountable_item:price * ( l.discount:amount / 100.00 ) ) * l.discount_remainder ) ROUND l.scale ) }">
				</MvIF>
			</MvIF>

			<MvCOMMENT>
			|
			| Skip to the next discount if we have leftover quantity from this item
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.running_quantity"		VALUE = "{ l.running_quantity + l.discount_quantity }">
			<MvASSIGN NAME = "l.remaining_quantity"		VALUE = "{ l.remaining_quantity - l.discount_quantity }">

			<MvIF EXPR = "{ ( l.discount:high NE 0 ) AND ( l.running_quantity GE l.discount:high ) }">
				<MvIF EXPR = "{ l.discount_pos EQ l.discount_count }">
					<MvFOREACHSTOP>
				</MvIF>

				<MvREFERENCEARRAY NAME = "l.discount" VARIABLE = "l.table">
					<MvDIMENSION INDEX = "{ ++l.discount_pos }">
				</MvREFERENCEARRAY>
			</MvIF>
		</MvWHILE>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Volume_Discount_Cumulative" PARAMETERS = "pricegroup var, discount_state var, table var, discountable_items var, discountable_item_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.total_quantity"		VALUE = 0>

	<MvFOREACH ITERATOR = "l.discountable_item" ARRAY = "l.discountable_items" COUNT = "{ l.discountable_item_count }">
		<MvASSIGN NAME = "l.total_quantity"	VALUE = "{ l.total_quantity + ( l.discountable_item:quantity * l.discountable_item:multiplier ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ miva_array_search( l.table, 1, l.discount, '( l.discount:low LE l.total_quantity ) AND ( ( l.discount:high EQ 0 ) OR ( l.discount:high GE l.total_quantity ) )' ) }">
		<MvFOREACH ITERATOR = "l.discountable_item" ARRAY = "l.discountable_items" COUNT = "{ l.discountable_item_count }">
			<MvIF EXPR = "{ l.discount:type EQ 'F' }">		<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Item_Fixed( l.discount_state, l.discountable_item:item, l.discountable_item:quantity, l.discount:amount * l.discountable_item:multiplier ) }">
			<MvELSEIF EXPR = "{ l.discount:type EQ 'A' }">	<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Item_Fixed( l.discount_state, l.discountable_item:item, l.discountable_item:quantity, ( l.discountable_item:price - l.discount:amount ) * l.discountable_item:multiplier ) }">
			<MvELSEIF EXPR = "{ l.discount:type EQ 'P' }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Price_IsHighPrecision( l.discountable_item:price ) }">	<MvASSIGN NAME = "l.scale" VALUE = 2>
				<MvELSE>																									<MvASSIGN NAME = "l.scale" VALUE = 8>
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Item_Fixed( l.discount_state, l.discountable_item:item, l.discountable_item:quantity, ( ( l.discountable_item:price * ( l.discount:amount / 100.0 ) ) * l.discountable_item:multiplier ) ROUND l.scale ) }">
			</MvIF>
		</MvFOREACH>
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| vis_product
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Product_Head" PARAMETERS = "module var, tab, product var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ [ g.Module_Admin ].CanI( 'PROD', 0, 0, 1, 0 ) }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Output_Module_Link_JavaScript( l.module, 'functions.js' ) }">
	</MvIF>

	<style type="text/css">
	#volume_discount_override_table
	{
		border-collapse: collapse;
	}

	.volume_discount_override_row td
	{
		padding: 2px;
	}

	.volume_discount_override_row span
	{
		font-size: 16px;
		display: none;
	}

	.volume_discount_override_row:hover span
	{
		display: inline;
		cursor: pointer;
	}
	</style>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Tabs" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.product:id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "">
	</MvIF>

	<MvASSIGN NAME = "l.pricegroup_count"	VALUE = "{ PriceGroupList_Load_VolumeDiscount_Product( l.module:id, l.product:id, l.pricegroups ) }">
	<MvIF EXPR = "{ l.pricegroup_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "">
	</MvIF>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.pricegroup" ARRAY = "l.pricegroups" COUNT = "{ l.pricegroup_count }">
		<MvASSIGN NAME = "l.tabs" INDEX = "{ l.pos }"	VALUE = "{ 'GT_PROD/VPGRP(' $ l.pricegroup:id $ '):Volume Pricing - ' $ l.pricegroup:name }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.tabs }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Content" PARAMETERS = "module var, tab, load_fields, product var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.product:id EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.load_fields }">
		<MvIF EXPR = "{ NOT VolumeDiscountOverrideLookup_Load_Product( l.product:id, l.override_lookup ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "g.Volume_Discount_Overrides"		VALUE = "">

		<MvFOREACH INDEX = "l.pgrp_id" ITERATOR = "l.pricegroup_overrides" ARRAY = "l.override_lookup">
			<MvFOREACH INDEX = "l.pos" ITERATOR = "l.override" ARRAY = "l.pricegroup_overrides">
				<MvREFERENCEARRAY NAME = "l.discount" VARIABLE= "g.Volume_Discount_Overrides">
					<MvDIMENSION INDEX = "{ l.pgrp_id }">
					<MvDIMENSION INDEX = "{ l.pos }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.discount:quantity"		VALUE = "{ l.override:low }">
				<MvASSIGN NAME = "l.discount:type"			VALUE = "{ l.override:type }">
				<MvASSIGN NAME = "l.discount:amount"		VALUE = "{ [ g.Module_Library_Utilities ].Price_Pad( l.override:amount ) }">
			</MvFOREACH>
		</MvFOREACH>
	</MvIF>

	<MvFOREACH ITERATOR = "l.pricegroup" ARRAY = "l.pricegroups" COUNT = "{ PriceGroupList_Load_VolumeDiscount_Product( l.module:id, l.product:id, l.pricegroups ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Tab_Visible( g.Tab, 'VPGRP(' $ l.pricegroup:id $ ')' ) }">
			<MvHIDE FIELDS = "{ 'g.Volume_Discount_Overrides[' $ l.pricegroup:id $ ']' }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawGroupTabEntry_Start( 'GT_PROD', 'VPGRP(' $ l.pricegroup:id $ ')' ) }">

		<MvREFERENCEARRAY NAME = "l.pricegroup_overrides" VARIABLE = "g.Volume_Discount_Overrides">
			<MvDIMENSION INDEX = "{ l.pricegroup:id }">
		</MvREFERENCEARRAY>

		<table border="0" cellspacing="0" cellpadding="2" width="100%">
		<tr><td nowrap>
			<b>Grouping:</b>
		</td><td width="100%">
			<MvIF EXPR = "{ l.pricegroup:config:grouping EQ 'all' }">				All Eligible Products
			<MvELSEIF EXPR = "{ l.pricegroup:config:grouping EQ 'same_product' }">	Same Product
			<MvELSEIF EXPR = "{ l.pricegroup:config:grouping EQ 'same_variant' }">	Same Product Variant
			<MvELSE>																Unknown (<MvEVAL EXPR = "{ encodeentities( l.pricegroup:config:grouping ) }">)
			</MvIF>
		</td></tr>

		<tr><td nowrap>
			<b>Pricing Method:</b>
		</td><td width="100%">
			<MvIF EXPR = "{ l.pricegroup:config:method EQ 'cumulative' }">		Apply Single Pricing Table Entry Using Total Quantity
			<MvELSEIF EXPR = "{ l.pricegroup:config:method EQ 'progressive' }">	Apply Pricing Table Progressively
			<MvELSE>															Unknown (<MvEVAL EXPR = "{ encodeentities( l.pricegroup:config:method ) }">)
			</MvIF>
		</td></tr>

		<tr><td nowrap>
			<b>Progressive Mode:</b>
		</td><td width="100%">
			<MvIF EXPR = "{ l.pricegroup:config:progmode EQ 'highest_first' }">		Higher Priced Items are Priced Using Earlier Pricing Table Entries
			<MvELSEIF EXPR = "{ l.pricegroup:config:progmode EQ 'lowest_first' }">	Lower Priced Items are Priced Using Earlier Pricing Table Entries
			<MvELSE>																Unknown (<MvEVAL EXPR = "{ encodeentities( l.pricegroup:config:progmode ) }">)
			</MvIF>
		</td></tr>

		<tr><td colspan="2">
			&nbsp;
		</td></tr>

		<tr><td valign="top" nowrap>
			Pricing Table:
		</td><td width="100%">
			<MvASSIGN NAME = "l.can_modify_product"			VALUE = "{ [ g.Module_Admin ].CanI( 'PROD', 0, 0, 1, 0 ) }">

			<table id="volume_discount_override_table">
			<thead>
				<tr>
					<th>Quantity</th>
					<th>Type</th>
					<th align="right">Amount</th>
					<th>&nbsp;</th>
				</tr>
			</thead>

			<tbody id="{ 'volume_discount_override_data_' $ int( l.pricegroup:id ) }">
				<MvASSIGN NAME = "l.override_count"			VALUE = 0>

				<MvFOREACH ITERATOR = "l.override" ARRAY = "l.pricegroup_overrides">
					<MvASSIGN NAME = "l.override_count"		VALUE = "{ l.override_count + 1 }">

					<tr class="volume_discount_override_row"><td>
						<input type="text" size="5" name="{ 'Volume_Discount_Overrides[' $ l.pricegroup:id $ '][' $ l.override_count $ ']:quantity' }" value="{ encodeentities( l.override:quantity ) }">
					</td><td>
						<select name="{ 'Volume_Discount_Overrides[' $ l.pricegroup:id $ '][' $ l.override_count $ ']:type' }">
						<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'P', l.override:type, 'Percent' ) }">
						<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'F', l.override:type, 'Fixed' ) }">
						<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'A', l.override:type, 'Absolute' ) }">
						</select>
					</td><td align="right">
						<input type="text" size="10" name="{ 'Volume_Discount_Overrides[' $ l.pricegroup:id $ '][' $ l.override_count $ ']:amount' }" value="{ encodeentities( l.override:amount ) }">
					</td><td>
						<MvIF EXPR = "{ l.can_modify_product }">
							<span onclick="this.parentNode.parentNode.parentNode.removeChild( this.parentNode.parentNode )">X</span>
						<MvELSE>
							&nbsp;
						</MvIF>
					</td></tr>
				</MvFOREACH>

				<MvIF EXPR = "{ ( l.override_count EQ 0 ) OR ( l.override_count MOD 5 ) }">
					<MvFOR COUNT = "{ 5 - ( l.override_count MOD 5 ) }">
						<MvASSIGN NAME = "l.override_count"	VALUE = "{ l.override_count + 1 }">

						<tr class="volume_discount_override_row"><td>
							<input type="text" size="5" name="{ 'Volume_Discount_Overrides[' $ l.pricegroup:id $ '][' $ l.override_count $ ']:quantity' }" value="">
						</td><td>
							<select name="{ 'Volume_Discount_Overrides[' $ l.pricegroup:id $ '][' $ l.override_count $ ']:type' }">
							<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'P', 'P', 'Percent' ) }">
							<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'F', 'P', 'Fixed' ) }">
							<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawOption( 'A', 'P', 'Absolute' ) }">
							</select>
						</td><td align="right">
							<input type="text" size="10" name="{ 'Volume_Discount_Overrides[' $ l.pricegroup:id $ '][' $ l.override_count $ ']:amount' }" value="0.00">
						</td><td>
							<MvIF EXPR = "{ l.can_modify_product }">
								<span onclick="this.parentNode.parentNode.parentNode.removeChild( this.parentNode.parentNode )">X</span>
							<MvELSE>
								&nbsp;
							</MvIF>
						</td></tr>
					</MvFOR>
				</MvIF>

				<input id="{ 'volume_discount_override_count_' $ int( l.pricegroup:id ) }" type="hidden" name="Volume_Discount_Override_Count" value="{ encodeentities( l.override_count ) }">
			</tbody>

			<MvIF EXPR = "{ l.can_modify_product }">
				<tbody>
					<tr><td colspan="3" align="center">
						<a href="{ 'JavaScript:Volume_Discount_Override_More( ' $ int( l.pricegroup:id ) $ ' );' }">More Entries</a>
					</td><td>
						&nbsp;
					</td></tr>
				</tbody>
			</MvIF>
			</table>
		</td></tr>
		</table>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawGroupTabEntry_End() }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Validate" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH INDEX = "l.pgrp_id" ITERATOR = "l.pricegroup_overrides" ARRAY = "g.Volume_Discount_Overrides">
		<MvFOREACH INDEX = "l.pos" ITERATOR = "l.override_data" ARRAY = "l.pricegroup_overrides">
			<MvASSIGN NAME = "l.override_data:quantity"	VALUE = "{ trim( l.override_data:quantity ) }">
			<MvASSIGN NAME = "l.override_data:type"		VALUE = "{ trim( l.override_data:type ) }">
			<MvASSIGN NAME = "l.override_data:amount"	VALUE = "{ trim( l.override_data:amount ) }">

			<MvIF EXPR = "{ NOT ISNULL l.override_data:quantity }">
				<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.override_data:quantity ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( 'VPGRP(' $ l.pgrp_id $ ')', 'Volume_Discount_Overrides[' $ l.pgrp_id $ '][' $ l.pos $ ']:quantity', g.Validation_Message ) }">
				</MvIF>

				<MvIF EXPR = "{ miva_array_search( l.pricegroup_overrides, l.pos + 1, l.duplicate_override_data, 'l.duplicate_override_data:quantity EQ l.override_data:quantity' ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( 'VPGRP(' $ l.pgrp_id $ ')', 'Volume_Discount_Overrides[' $ l.pgrp_id $ '][' $ l.pos $ ']:quantity', 'Duplicate quantity' ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.override_data:type EQ 'P' }">
				<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Currency_Optional( l.override_data:amount ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( 'VPGRP(' $ l.pgrp_id $ ')', 'Volume_Discount_Overrides[' $ l.pgrp_id $ '][' $ l.pos $ ']:amount', g.Validation_Message ) }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.override_data:type EQ 'F' OR l.override_data:type EQ 'A' }">
				<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Price_Optional( l.override_data:amount ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( 'VPGRP(' $ l.pgrp_id $ ')', 'Volume_Discount_Overrides[' $ l.pgrp_id $ '][' $ l.pos $ ']:amount', g.Validation_Message ) }">
				</MvIF>
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( 'VPGRP(' $ l.pgrp_id $ ')', '', 'Please select an override_data type' ) }">
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Insert" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Product_Update" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT VolumeDiscountOverride_Delete_All_Product( l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.override:product_id"		VALUE = "{ l.product:id }">

	<MvFOREACH INDEX = "l.pgrp_id" ITERATOR = "l.pricegroup_overrides" ARRAY = "g.Volume_Discount_Overrides">
		<MvCOMMENT>
		|
		| Copy non-empty quantity breaks into an output array of overrides
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.overrides"				VALUE = "">
		<MvASSIGN NAME = "l.override:pgrp_id"		VALUE = "{ l.pgrp_id }">

		<MvFOREACH INDEX = "l.pos" ITERATOR = "l.override_data" ARRAY = "l.pricegroup_overrides">
			<MvASSIGN NAME = "l.override:low"		VALUE = "{ l.override_data:quantity }">
			<MvASSIGN NAME = "l.override:type"		VALUE = "{ l.override_data:type }">
			<MvASSIGN NAME = "l.override:amount"	VALUE = "{ l.override_data:amount }">

			<MvIF EXPR = "{ NOT ISNULL l.override:low }">
				<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert( l.overrides, l.override, -1 ) }">
			</MvIF>
		</MvFOREACH>

		<MvASSIGN NAME = "l.override_count"			VALUE = "{ miva_array_sort( l.overrides, 'Volume_Discount_Table_Sort', l.null ) }">
		<MvIF EXPR = "{ l.override_count }">
			<MvCOMMENT>
			|
			| Assign upper bounds
			|
			</MvCOMMENT>

			<MvFOREACH INDEX = "l.pos" ITERATOR = "l.override" ARRAY = "l.overrides" COUNT = "{ l.override_count - 1 }">
				<MvASSIGN NAME = "l.override:high"	VALUE = "{ l.overrides[ l.pos + 1 ]:low - 1 }">
			</MvFOREACH>

			<MvCOMMENT>
			|
			| The last entry in the table always has an unlimited upper bound
			|
			</MvCOMMENT>

			<MvASSIGNARRAY NAME = "l.overrides" VALUE = 0>
				<MvDIMENSION INDEX = "{ l.override_count }">
				<MvMEMBER NAME = "high">
			</MvASSIGNARRAY>

			<MvFOREACH ITERATOR = "l.override" ARRAY = "l.overrides" COUNT = "{ l.override_count }">
				<MvIF EXPR = "{ NOT VolumeDiscountOverride_Insert( l.override ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvFOREACH>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| not_prod
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Product_Delete" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Product_Insert" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Product_Update" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Product_Delete" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ VolumeDiscountOverride_Delete_All_Product( l.product:id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Product_Copy" PARAMETERS = "module var, source_product var, dest_product var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Product_LowStock" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Product_OutOfStock" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| import
|
</MvCOMMENT>

<MvFUNCTION NAME = "ImportModule_Capabilities" PARAMETERS = "module var, capabilities var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.capabilities:screen"				VALUE = 0>
	<MvASSIGN NAME = "l.capabilities:persistent"			VALUE = 1>
	<MvASSIGN NAME = "l.capabilities:format"				VALUE = "delimited">
	<MvASSIGN NAME = "l.capabilities:persistent_provision"	VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Delimited_Columns" PARAMETERS = "module var, import var, columns var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.price_group:field"		VALUE = "pricegroup_name">
	<MvASSIGN NAME = "l.price_group:name"		VALUE = "Price Group">
	<MvASSIGN NAME = "l.price_group:header"		VALUE = "PRICE_GROUP">
	<MvASSIGN NAME = "l.column_count"			VALUE = "{ miva_array_insert_var( l.columns, l.price_group, -1 ) }">

	<MvASSIGN NAME = "l.product_code:field"		VALUE = "product_code">
	<MvASSIGN NAME = "l.product_code:name"		VALUE = "Product Code">
	<MvASSIGN NAME = "l.product_code:header"	VALUE = "PRODUCT_CODE">
	<MvASSIGN NAME = "l.column_count"			VALUE = "{ miva_array_insert_var( l.columns, l.product_code, -1 ) }">

	<MvFOR INDEX = "l.pos" FIRST = 1 NEXT = "{ l.next }" LAST = 10000>
		<MvIF EXPR = "{ l.pos LT 1000 }">	<MvASSIGN NAME = "l.next" VALUE = "{ l.pos + 1 }">
		<MvELSE>							<MvASSIGN NAME = "l.next" VALUE = "{ l.pos + 100 }">
		</MvIF>

		<MvASSIGN NAME = "l.break:field"		VALUE = "{ 'quantity_' $ l.pos }">
		<MvASSIGN NAME = "l.break:name"			VALUE = "{ l.pos }">
		<MvASSIGN NAME = "l.break:header"		VALUE = "{ l.pos }">
		<MvASSIGN NAME = "l.column_count"		VALUE = "{ miva_array_insert_var( l.columns, l.break, -1 ) }">
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = "{ l.column_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_StatusFields" PARAMETERS = "module var, import var, fields var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Delimited_Import_Begin" PARAMETERS = "module var, import var, session var, run_data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.import:automap }">
		<MvIF EXPR = "{ NOT Import_Validate_Columns( l.import ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Build a skeleton set of breaks from this import for use when processing records
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.import:map">
		<MvIF EXPR = "{ ( 'quantity_' IN l.field ) NE 1 }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.break:low"			VALUE = "{ int( substring_var( l.field, 10, len_var( l.field ) - 9 ) ) }">
		<MvIF EXPR = "{ l.break:low LE 0 }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.break:field"		VALUE = "{ l.field }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ miva_array_insert( l.run_data:breaks, l.break, -1 ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.run_data:break_count"	VALUE = "{ miva_array_sort( l.run_data:breaks, 'Volume_Discount_Table_Sort', l.null ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Delimited_Import_Record" PARAMETERS = "module var, import var, session var, record var, run_data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.record:pricegroup_name }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Delimited_Log( l.session, 'Skipped - Missing Price Group Name' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.record:product_code }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Delimited_Log( l.session, 'Skipped - Missing Product Code' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ tolower( l.record:pricegroup_name ) NE tolower( l.run_data:pricegroup:name ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.record:pricegroup_name, l.run_data:pricegroup ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Delimited_Log( l.session, 'Skipped - Price Group \'' $ l.record:pricegroup_name $ '\' not found' ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.run_data:pricegroup:module_id NE l.module:id }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Delimited_Log( l.session, 'Skipped - Price Group \'' $ l.record:pricegroup_name $ '\' does not apply volume pricing' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.record:product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Feature_IMP_UT ].Import_Session_Delimited_Log( l.session, 'Skipped - Product \'' $ l.record:product_code $ '\' not found' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.run_data:pricegroup:exclusion }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedProduct_Delete( l.run_data:pricegroup:id, l.product:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXProduct_Load( l.run_data:pricegroup:id, l.product:id, l.pricegroupxproduct ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXProduct_Insert( l.run_data:pricegroup:id, l.product:id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Determine the specified overrides -- the break list is already sorted
	| so there is no need to sort this array after processing.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.overrides"					VALUE = "">
	<MvASSIGN NAME = "l.override_count"				VALUE = 0>

	<MvASSIGN NAME = "l.override:pgrp_id"			VALUE = "{ l.run_data:pricegroup:id }">
	<MvASSIGN NAME = "l.override:product_id"		VALUE = "{ l.product:id }">

	<MvFOREACH ITERATOR = "l.break" ARRAY = "l.run_data:breaks" COUNT = "{ l.run_data:break_count }">
		<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.record">
			<MvMEMBER NAME = "{ l.break:field }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ISNULL l.value }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.override:low"			VALUE = "{ l.break:low }">

		<MvIF EXPR = "{ ( '%' IN l.value ) EQ len_var( l.value ) }">
			<MvASSIGN NAME = "l.override:type"		VALUE = "P">
			<MvASSIGN NAME = "l.override:amount"	VALUE = "{ substring_var( l.value, 1, len_var( l.value ) - 1 ) ROUND 2 }">
		<MvELSE>
			<MvASSIGN NAME = "l.value"				VALUE = "{ l.value ROUND 8 }">

			<MvIF EXPR = "{ l.value GE 0 }">
				<MvASSIGN NAME = "l.override:type"	VALUE = "A">
			<MvELSE>
				<MvASSIGN NAME = "l.override:type"	VALUE = "F">
				<MvASSIGN NAME = "l.value"			VALUE = "{ abs( l.value ) }">
			</MvIF>

			<MvASSIGN NAME = "l.override:amount"	VALUE = "{ l.value }">
		</MvIF>

		<MvIF EXPR = "{ l.override:amount OR ( l.override:type EQ 'P' AND l.override:amount GE 0 ) }">
			<MvASSIGN NAME = "l.override_count"		VALUE = "{ miva_array_insert_var( l.overrides, l.override, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.override_count }">
		<MvCOMMENT>
		|
		| Assign upper bounds
		|
		</MvCOMMENT>

		<MvFOREACH INDEX = "l.pos" ITERATOR = "l.override" ARRAY = "l.overrides" COUNT = "{ l.override_count - 1 }">
			<MvASSIGN NAME = "l.override:high"		VALUE = "{ l.overrides[ l.pos + 1 ]:low - 1 }">
		</MvFOREACH>

		<MvCOMMENT>
		|
		| The last entry always has an unlimited upper bound
		|
		</MvCOMMENT>

		<MvASSIGNARRAY NAME = "l.overrides" VALUE = 0>
			<MvDIMENSION INDEX = "{ l.override_count }">
			<MvMEMBER NAME = "high">
		</MvASSIGNARRAY>
	</MvIF>

	<MvCOMMENT>
	|
	| Replace any existing overrides with the new set
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT VolumeDiscountOverride_Delete_All_PriceGroup_Product( l.run_data:pricegroup:id, l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFOREACH ITERATOR = "l.override" ARRAY = "l.overrides" COUNT = "{ l.override_count }">
		<MvIF EXPR = "{ NOT VolumeDiscountOverride_Insert( l.override ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Delimited_Import_End" PARAMETERS = "module var, import var, session var, run_data var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Fields" PARAMETERS = "module var, import var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Invalid" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Prompt" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Field" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Validate" PARAMETERS = "module var, import var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.import:automap EQ 0 }">
		<MvIF EXPR = "{ NOT Import_Validate_Columns( l.import ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( '', '', g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Update" PARAMETERS = "module var, import var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Persistent_Provision" PARAMETERS = "module var, import var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImportModule_Delete" PARAMETERS = "module var, import var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Import_Validate_Columns" PARAMETERS = "import var" STANDARDOUTPUTLEVEL = "">
    <MvFOREACH INDEX = "l.pos" ITERATOR = "l.field" ARRAY = "l.import:map">
        <MvIF EXPR = "{ NOT ISNULL l.field }">
            <MvASSIGN NAME = "l.columns_present" MEMBER = "{ l.field }" VALUE = "{ l.pos }">
        </MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT l.columns_present:pricegroup_name }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00011', 'The Price Group field must be assigned to an import file column' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.columns_present:product_code }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00012', 'The Product Code field must be assigned to an import file column' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| provision_store
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Provision_Store" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name"		VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.name EQ 'productpricingtable' }">	<MvEVAL EXPR = "{ Module_Provision_Store_ProductPricingTable( l.module, l.child_xml ) }">
		<MvELSE>											<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.child_pos"	VALUE = "{ l.child_pos + 1 }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_ProductPricingTable" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'product_code',	l.product_code ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'group_name',	l.pricegroup_name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product_code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.pricegroup_name, l.pricegroup ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Price group \'' $ l.pricegroup_name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.pricegroup:module_id NE l.module:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Price group \'' $ l.pricegroup:name $ '\' does not apply volume pricing' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.pricegroup:exclusion }">
		<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXExcludedProduct_Load( l.pricegroup:id, l.product:id, l.pricegroupxproduct ) }">
			<MvASSIGN NAME = "l.assigned" VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroup_Product_In_PriceGroupXExcludedCategory( l.pricegroup:id, l.product:id ) }">
			<MvASSIGN NAME = "l.assigned" VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.assigned" VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ NOT l.assigned }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product:code $ '\' is excluded from price group \'' $ l.pricegroup:name $ '\'' ) }">
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroupXProduct_Load( l.pricegroup:id, l.product:id, l.pricegroupxproduct ) }">
			<MvASSIGN NAME = "l.assigned" VALUE = 1>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		<MvELSEIF EXPR = "{ [ g.Module_Feature_PGR_DB ].PriceGroup_Product_In_PriceGroupXCategory( l.pricegroup:id, l.product:id ) }">
			<MvASSIGN NAME = "l.assigned" VALUE = 1>
		<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.assigned" VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT l.assigned }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Product \'' $ l.product:code $ '\' is not assigned to price group \'' $ l.pricegroup:name $ '\'' ) }">
		</MvIF>
	</MvIF>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.name"					VALUE = "{ tolower( l.child_xml:name ) }">
		<MvASSIGN NAME = "l.override"				VALUE = "">
		<MvASSIGN NAME = "l.override:product_id"	VALUE = "{ l.product:id }">
		<MvASSIGN NAME = "l.override:pgrp_id"		VALUE = "{ l.pricegroup:id }">

		<MvIF EXPR = "{ l.name EQ 'entry' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Integer(	l.child_xml, 'quantity',	l.override:low ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List(		l.child_xml, 'type',		l.override:type, 'fixed,percent,absolute', 'F,P,A' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ l.override:type EQ 'P' }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Number(	l.child_xml, 'amount', l.override:amount, 10, 2 ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Number(	l.child_xml, 'amount', l.override:amount, 16, 8 ) }">
					<MvFUNCTIONRETURN>
				</MvIF>	
			</MvIF>

			<MvIF EXPR = "{ l.override:low LE 0 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'quantity must be greater than 0' ) }">
			</MvIF>

			<MvIF EXPR = "{ miva_element_exists( l.table, l.override:low ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'quantity ' $ l.override:low $ ' specified more than once' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.overrides" INDEX = "{ l.override:low }" VALUE = "{ l.override }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.override_count"				VALUE = "{ miva_array_sort( l.overrides, 'Volume_Discount_Table_Sort', l.null ) }">
	<MvIF EXPR = "{ l.override_count }">
		<MvCOMMENT>
		|
		| Assign upper bounds
		|
		</MvCOMMENT>

		<MvFOREACH INDEX = "l.pos" ITERATOR = "l.override" ARRAY = "l.overrides" COUNT = "{ l.override_count - 1 }">
			<MvASSIGN NAME = "l.override:high"		VALUE = "{ l.overrides[ l.pos + 1 ]:low - 1 }">
		</MvFOREACH>

		<MvCOMMENT>
		|
		| The last entry in the table always has an unlimited upper bound
		|
		</MvCOMMENT>

		<MvASSIGNARRAY NAME = "l.overrides" VALUE = 0>
			<MvDIMENSION INDEX = "{ l.override_count }">
			<MvMEMBER NAME = "high">
		</MvASSIGNARRAY>
	</MvIF>

	<MvIF EXPR = "{ NOT VolumeDiscountOverride_Delete_All_PriceGroup_Product( l.pricegroup:id, l.product:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.override" ARRAY = "l.overrides" COUNT = "{ l.override_count }">
		<MvIF EXPR = "{ NOT VolumeDiscountOverride_Insert( l.override ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvCOMMENT>
|
| component
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Tabs" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'GT_PAGE/' $ l.item $ ':Volume Pricing Table' }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Validate" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Validate_Compilation( l.fields:template_code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Admin ].FieldError( l.item, l.field_prefix $ 'template_code', g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Filename( l.settings:template_filename, l.managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_CreateIfModified_ManagedTemplateVersion( l.managedtemplate, '', l.fields:template_code, l.settings ) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Admin ].FieldError( l.item, l.field_prefix $ 'template_code', g.Error_Message ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update_Requires_Version" PARAMETERS = "module var, page var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_PostUpdate" PARAMETERS = "module var, page var, item, field_prefix, fields var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Content" PARAMETERS = "module var, item, tab, load_fields, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.settings:template_filename, l.templateversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.load_fields }">
		<MvASSIGN NAME = "l.fields:template_code" VALUE = "{ l.templateversion:source }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Tab_Visible( l.tab, l.item ) }">
		<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_AD ].TUI_Hide_ComponentFields( l.field_prefix, '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawGroupTabEntry_Start( 'GT_PAGE', l.item ) }">
		<table border="0" cellpadding="2" cellspacing="0" width="100%">
		<tr><td colspan="2" width="100%">
			<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawTemplateTextArea_WithRecall( l.field_prefix $ 'template_code', l.fields:template_code, 20, 100, l.templateversion:templ_id ) }">
		</td></tr>
		</table>
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawGroupTabEntry_End() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Defaults" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Assign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ Generate_Code( l.item, l.settings, l.code ) }">

	<MvASSIGN NAME = "l.settings:template_filename" VALUE = "{ tolower( l.page:code ) $ '-' $ tolower( l.item ) $ '.mvc' }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_ManagedTemplate_NoDuplicates( l.code, l.settings, l.settings:template_filename ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Unassign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_ManagedTemplate_Filename( l.settings:template_filename ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Copy" PARAMETERS = "module var, item, source_branch var, source_page var, source_settings var, dest_branch var, dest_page var, dest_settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Branch_Head( l.source_branch:id, l.source_settings:template_filename, l.source_templateversion ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplateAndVersion_Load_Branch_Filename( l.dest_branch:id, l.dest_settings:template_filename, l.dest_managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.dest_settings"						VALUE = "{ l.source_settings }">
	<MvASSIGN NAME = "l.dest_settings:template_filename"	VALUE = "{ l.dest_managedtemplate:version:settings:template_filename }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_CreateIfModified_ManagedTemplateVersion( l.dest_managedtemplate, '', l.source_templateversion:source, l.dest_settings ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.source_branch:id EQ l.dest_branch:id }">	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-DSC-VOL-00019', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' on branch \'' $ l.dest_branch:name $ '\'' ) }">
	<MvELSE>													<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-DSC-VOL-00020', l.module:name $ ' settings copied from page \'' $ l.source_page:code $ '\' to page \'' $ l.dest_page:code $ '\' for item \'' $ l.item $ '\' from branch \'' $ l.source_branch:name $ '\' to branch \'' $ l.dest_branch:name $ '\'' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Initialize" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Prerender" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.settings:table"					VALUE = "">
	<MvASSIGN NAME = "l.param_len"						VALUE = "{ len_var( l.param ) }">

	<MvIF EXPR = "{ ( ':id' IN l.param ) EQ ( l.param_len - 2 ) }">
		<MvREFERENCEARRAY NAME = "l.product" VARIABLE = "l.all_settings">
			<MvMEMBER NAME = "{ substring_var( l.param, 1, l.param_len - 3 ) }">
		</MvREFERENCEARRAY>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_ID( miva_variable_value( 'l.all_settings:' $ l.param ), l.product ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ VolumeDiscount_Populate_PricingTable( l.module, l.product, 0, l.settings:table ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Head" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Start" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Render_Template( l.settings:template_filename, l.all_settings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_End" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "Generate_Code" PARAMETERS = "item, settings var, code var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.code">
<MIVA STANDARDOUTPUTLEVEL = "text, html"><mvt:if expr="{ 'NOT ISNULL l.settings:' $ l.item $ ':table' }">
	<table border="0" cellspacing="0" cellpadding="2">
	<tr>
		<th>Quantity</th>
		<th>Price</th>
	</tr>

	<mvt:foreach iterator="entry" array="{ l.item $ ':table' }">
		<tr>
			<td>
				<mvt:if expr="l.settings:entry:low EQ l.settings:entry:high">
					&mvte:entry:low;
				<mvt:elseif expr="l.settings:entry:high">
					&mvte:entry:low;-&mvte:entry:high;
				<mvt:else>
					&mvte:entry:low;+
				</mvt:if>
			</td>
			<td>
				&mvt:entry:formatted_price;
			</td>
		</tr>
	</mvt:foreach>
	</table>
</mvt:if><MIVA STANDARDOUTPUTLEVEL = ""></MvCAPTURE>
</MvFUNCTION>

<MvCOMMENT>
|
| component_prov
|
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Provision" PARAMETERS = "module var, provide_xml var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml, 'Template',	l.source ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O', l.provide_xml, 'Notes',		l.notes ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_Filename( l.settings:template_filename, l.managedtemplate ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Unable to load template' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_CreateIfModified_ManagedTemplateVersion( l.managedtemplate, l.notes, l.source, l.settings ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| skins
|
</MvCOMMENT>

<MvFUNCTION NAME = "SkinsComponentModule_Description" PARAMETERS = "module var, item var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pages" VALUE = "{ [ g.Module_Feature_TUI_DB ].Item_Load_PageList( l.item ) }">

	<MvFUNCTIONRETURN VALUE = "{ 'Exports volume pricing table template for: ' $ l.pages }">
</MvFUNCTION>

<MvFUNCTION NAME = "SkinsComponentModule_Export_Item" PARAMETERS = "module var, item, output var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.output" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		<MvFOREACH ITERATOR = "l.page" ARRAY = "l.pages" COUNT = "{ [ g.Module_Feature_TUI_DB ].PageList_Load_Item_Runtime( l.item:id, l.pages ) }">
			<MvREFERENCEARRAY NAME = "l.settings" VARIABLE = "l.page">
				<MvMEMBER NAME = "settings">
				<MvMEMBER NAME = "{ l.item:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplateVersion_Load_Filename_Current( l.settings:template_filename, l.templateversion ) }">
				<Page_Update code="{ l.page:code }">
					<Item code="{ l.item:code }">
						<Template><MvEVAL EXPR = "{ miva_cdata_encode( l.templateversion:source ) }"></Template>
						<Notes>#Set_Current_Time#</Notes>
					</Item>
				</Page_Update>
			</MvIF>
		</MvFOREACH>
	</MvCAPTURE>
</MvFUNCTION>

<MvCOMMENT>
|
| json
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'Runtime_VolumePricing_Load_Product_Variant' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_Runtime_VolumePricing_Load_Product_Variant( l.module ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Runtime_VolumePricing_Load_Product_Variant" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'runtime' }">					<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">		<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.table"			VALUE = "">
	<MvASSIGN NAME = "l.product_code"	VALUE = "">
	<MvASSIGN NAME = "l.variant_id"		VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code(		'R', 'Product_Code',	l.product_code ) OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Variant_ID',		l.variant_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Runtime_Product_Load_Code( l.product_code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-DSC-VOL-00017', 'Product not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_INV_RT ].Inventory_Adjust_VariantPricing( l.product, l.variant_id, l.null ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ VolumeDiscount_Populate_PricingTable( l.module, l.product, l.variant_id, l.table ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvASSIGN NAME = "l.count"		VALUE = 0>

		<MvFOREACH ITERATOR = "l.entry" ARRAY = "l.table">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.count ) }">
				"low":				<MvEVAL EXPR = "{ int( l.entry:low ) }">,
				"high":				<MvEVAL EXPR = "{ int( l.entry:high ) }">,
				"price":			<MvEVAL EXPR = "{ encodejavascriptnumber( l.entry:price ) }">,
				"formatted_price":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.entry:formatted_price ) }">"
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvCOMMENT>
|
| clientside
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Clientside" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.len"	VALUE = "{ len_var( g.Filename ) }">

	<MvIF EXPR = "{ ( '.js' EIN g.Filename ) EQ l.len }">		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
	<MvELSEIF EXPR = "{ ( '.css' EIN g.Filename ) EQ l.len }">	<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/css' ) }">
	</MvIF>

	<MvIF EXPR = "{ Module_Clientside_Output_File( l.module, g.Filename ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Output_File" PARAMETERS = "module var, filename" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/discount/volume/output.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_File_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/discount/volume/integrity.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Combined_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvCOMMENT>
|
| Copy Product Feature (copy_prod)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Copy_Product" PARAMETERS = "module var, source_product var, dest_product var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT VolumeDiscountOverride_Delete_All_Product( l.dest_product:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'VolumeDiscountOverrides ( pgrp_id, product_id, low, high, type, amount )
						  SELECT
							pgrp_id, ?, low, high, type, amount
						  FROM ' $
							g.Store_Table_Prefix $ 'VolumeDiscountOverrides
						  WHERE
							product_id = ?' }"
			 FIELDS = "l.dest_product:id,
					   l.source_product:id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DSC-VOL-00018', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Helper Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "VolumeDiscount_Populate_PricingTable" PARAMETERS = "module var, product var, variant_id, pricing_table var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.product:base_price }">
		<MvASSIGN NAME = "l.base_price" VALUE = "{ l.product:base_price }">
	<MvELSE>
		<MvASSIGN NAME = "l.base_price" VALUE = "{ [ g.Module_Library_Utilities ].Adjusted_Price( l.product, l.product:price, l.product:cost ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Load and cache a list of all applicable Volume Pricing price groups and create a
	| discount state that will be used to populate the pricing table.
	|
	</MvCOMMENT>

	<MvREFERENCE NAME = "l.cache_data" VARIABLE = "g.Session:cache:discount_volume:pricegroups">

	<MvIF EXPR = "{ NOT l.cache_data:initialized }">
		<MvASSIGN NAME = "l.pricegroup_count"							VALUE = "{ [ g.Module_Feature_PGR_UT ].ResolvedPriceGroupAndModuleList_Load_Basket( g.Basket, l.pricegroups ) }">
		<MvASSIGN NAME = "l.cache_data:volume_pricegroup_count"			VALUE = 0>

		<MvFOREACH ITERATOR = "l.pricegroup" ARRAY = "l.pricegroups" COUNT = "{ l.pricegroup_count }">
			<MvIF EXPR = "{ l.pricegroup:module_id EQ l.module:id }">
				<MvCOMMENT>
				|
				| For prediction purposes, force all price groups to be calculated non-progressively, so that discounted prices
				| can properly be picked up on a single item.
				|
				</MvCOMMENT>

				<MvASSIGN NAME = "l.pricegroup:config:method"			VALUE = "cumulative">
				<MvASSIGN NAME = "l.cache_data:volume_pricegroup_count"	VALUE = "{ miva_array_insert_var( l.cache_data:volume_pricegroups, l.pricegroup, -1 ) }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ l.cache_data:volume_pricegroup_count }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_CreateEmpty( l.cache_data:discount_state ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Set_PriceGroups( l.cache_data:discount_state, l.cache_data:volume_pricegroups, l.cache_data:volume_pricegroup_count ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Predict_Baseline_Discounts( l.cache_data:discount_state ) }">
				<MvFUNCTIONRETURN>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.cache_data:initialized"	VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.cache_data:volume_pricegroup_count EQ 0 }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvCOMMENT>
	|
	| Create an array of all possible quantity breaks for this product, given the list
	| of Volume Pricing price groups.  Overlap and conflict rules will be handled by
	| the underlying discounting system, and duplicate entries combined below.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.part_count" VALUE = "{ [ g.Module_Library_DB ].ProductList_Load_Variant( l.product:id, l.variant_id, l.parts ) }">

	<MvIF EXPR = "{ NOT VolumeDiscount_Populate_PricingTable_GenerateBreaks( l.cache_data:volume_pricegroups, l.cache_data:volume_pricegroup_count, l.product, l.parts, l.part_count, l.breaks ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.breaks }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.breaks" INDEX = 1			VALUE = 1>

	<MvCOMMENT>
	|
	| Predict the sale price of the product for each configured quantity break
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.predicted_price_count"		VALUE = 0>

	<MvFOREACH ITERATOR = "l.break" ARRAY = "l.breaks">
		<MvASSIGN NAME = "l.predicted_price:low"	VALUE = "{ l.break }">
		<MvASSIGN NAME = "l.discounts"				VALUE = "">
		<MvASSIGN NAME = "l.discount_count"			VALUE = 0>

		<MvASSIGN NAME = "l.temp_product"			VALUE = "{ l.product }">
		<MvASSIGN NAME = "l.temp_product:price"		VALUE = "{ l.base_price }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Predict_Product_Discounts( l.cache_data:discount_state, l.temp_product, l.variant_id, l.break, l.predicted_price:price, l.discounts, l.discount_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvASSIGN NAME = "l.predicted_price_count"	VALUE = "{ miva_array_insert_var( l.predicted_prices, l.predicted_price, -1 ) }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Eliminate adjacent duplicates (that have the same predicted price) and calculate the high value of the resulting ranges
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.predicted_price_count }">
		<MvASSIGN NAME = "l.pos"									VALUE = 1>
		<MvWHILE EXPR = "{ l.pos LT l.predicted_price_count }">
			<MvASSIGNARRAY NAME = "l.predicted_prices"				VALUE = "{ l.predicted_prices[ l.pos + 1 ]:low - 1 }">
				<MvDIMENSION INDEX = "{ l.pos }">
				<MvMEMBER NAME = "high">
			</MvASSIGNARRAY>

			<MvIF EXPR = "{ l.predicted_prices[ l.pos ]:price EQ l.predicted_prices[ l.pos + 1 ]:price }">	<MvASSIGN NAME = "l.predicted_price_count"	VALUE = "{ miva_array_delete( l.predicted_prices, l.pos + 1, 1 ) }">
			<MvELSE>																						<MvASSIGN NAME = "l.pos"					VALUE = "{ l.pos + 1 }">
			</MvIF>
		</MvWHILE>

		<MvASSIGNARRAY NAME = "l.predicted_prices"					VALUE = 0>
			<MvDIMENSION INDEX = "{ l.predicted_price_count }">
			<MvMEMBER NAME = "high">
		</MvASSIGNARRAY>

		<MvFOREACH ITERATOR = "l.predicted_price" ARRAY = "l.predicted_prices" COUNT = "{ l.predicted_price_count }">
			<MvASSIGN NAME = "l.predicted_price:formatted_price"	VALUE = "{ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.predicted_price:price ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.pricing_table"							VALUE = "{ l.predicted_prices }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscount_Populate_PricingTable_GenerateBreaks" PARAMETERS = "volume_pricegroups var, volume_pricegroup_count, product var, parts var, part_count, breaks var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.breaks" VALUE = "">

	<MvCOMMENT>
	|
	| Generate breaks for master product
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT VolumeDiscount_Populate_PricingTable_GenerateBreaks_LowLevel( l.volume_pricegroups, l.volume_pricegroup_count, l.product, l.breaks ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Generate breaks for variant part products
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.part" ARRAY = "l.parts" COUNT = "{ l.part_count }">
		<MvIF EXPR = "{ NOT VolumeDiscount_Populate_PricingTable_GenerateBreaks_LowLevel( l.volume_pricegroups, l.volume_pricegroup_count, l.part, l.breaks ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "VolumeDiscount_Populate_PricingTable_GenerateBreaks_LowLevel" PARAMETERS = "volume_pricegroups var, volume_pricegroup_count, product var, breaks var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupLookup_Load_Product_Cached( l.product:id, l.pricegroup_lookup ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT VolumeDiscountOverrideLookup_Load_Product( l.product:id, l.overrides ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFOREACH ITERATOR = "l.pricegroup" ARRAY = "l.volume_pricegroups" COUNT = "{ l.volume_pricegroup_count }">
		<MvIF EXPR = "{ NOT l.pricegroup_lookup[ l.pricegroup:id ] }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.entries" VARIABLE = "l.overrides">
			<MvDIMENSION INDEX = "{ l.pricegroup:id }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ISNULL l.entries }">
			<MvREFERENCE NAME = "l.entries"	VARIABLE = "l.pricegroup:config:table">
		</MvIF>

		<MvFOREACH ITERATOR = "l.entry" ARRAY = "l.entries">
			<MvASSIGN NAME = "l.breaks" INDEX = "{ l.entry:low }" VALUE = "{ l.entry:low }">
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>
