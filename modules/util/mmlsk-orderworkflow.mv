<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-UTIL-ORWF-
| Next Error Code: 192   
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-orderworkflow">
	<MvASSIGN NAME = "l.module:name"		VALUE = "Order Workflow">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Miva Merchant">
	<MvASSIGN NAME = "l.module:version"		VALUE = "10.1000">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "9.12">
	<MvASSIGN NAME = "l.module:description"	VALUE = "Use this module to create workflows that allow automated tasks to be performed when orders meet configured criteria.">
	<MvASSIGN NAME = "l.module:features"	VALUE = "data_store, util, json, json_api, clientside, clientside_sri, scheduledtask, provision_store, vis_util, vis_order, not_order, not_ordershpmnt, not_orderitem, not_orderreturn, fields_ordr, fields_ordr_map">
</MvFUNCTION>

<MvCOMMENT>
|
| Store-level Module Data Support Feature (data_store)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Install_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].DomainPrivilege_Load_Privilege( 'OWFP', l.null ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].DomainPrivilege_Insert( 'OWFP', 'Order Workflow' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| sNN_OWFQueues
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreKey_Insert( 'OWFQueues', 1 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'OWFQueues
						  (
							id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							code		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 50 )	$ ',
							name		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 254 )	$ '
						  )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00001', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFQueues_1 ON ' $ g.Store_Table_Prefix $ 'OWFQueues ( id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00002', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFQueues_2 ON ' $ g.Store_Table_Prefix $ 'OWFQueues ( code )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00003', g.MvQUERY_Error ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| sNN_OWFWorkflows
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreKey_Insert( 'OWFWorkflows', 1 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'OWFWorkflows
						  (
							id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							enabled		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_BOOL()		$ ',
							name		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 254 )	$ ',
							cond		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_MEMO()		$ ',
							wait_for	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_BOOL()		$ ',
							wait_int	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							wait_max	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ '
						  )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00004', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFWorkflows_1 ON ' $ g.Store_Table_Prefix $ 'OWFWorkflows ( id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00005', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFWorkflows_2 ON ' $ g.Store_Table_Prefix $ 'OWFWorkflows ( name )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00104', g.MvQUERY_Error ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| sNN_OWFWorkflowTriggers
	|
	</MvCOMMENT>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers
						  (
							flow_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							trig_code	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 50 )	$ '
						  )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00006', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers_1 ON ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers ( flow_id, trig_code )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00007', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers_2 ON ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers ( trig_code )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00008', g.MvQUERY_Error ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| sNN_OWFWorkflowActions
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreKey_Insert( 'OWFWorkflowActions', 1 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions
						  (
							id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							flow_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							act			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 50 )	$ ',
							act_data	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_MEMO()		$ '
						  )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00009', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions_1 ON ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions ( id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00010', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions_2 ON ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions ( flow_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00011', g.MvQUERY_Error ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| sNN_OWFQueueXOrder
	|
	</MvCOMMENT>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE TABLE ' $  g.Store_Table_Prefix $ 'OWFQueueXOrder
						  (
							queue_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER() $ ',
							order_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER() $ '
						  )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00012', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder_1 ON ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder ( queue_id, order_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00013', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder_2 ON ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder ( order_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00014', g.MvQUERY_Error ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| sNN_OWFWaitQueue
	|
	</MvCOMMENT>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'OWFWaitQueue
						  (
							flow_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER() $ ',
							order_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER() $ ',
							firstcheck	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER() $ ',
							lastcheck	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER() $ ',
							nextcheck	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER() $ '
						  )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00015', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFWaitQueue_1 ON ' $ g.Store_Table_Prefix $ 'OWFWaitQueue ( flow_id, order_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00016', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'OWFWaitQueue_2 ON ' $ g.Store_Table_Prefix $ 'OWFWaitQueue ( order_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00017', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'CREATE INDEX ' $ g.Store_Table_Prefix $ 'OWFWaitQueue_3 ON ' $ g.Store_Table_Prefix $ 'OWFWaitQueue ( nextcheck )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00018', g.MvQUERY_Error ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| sNN_OWFAuthenticationCredentials
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreKey_Insert( 'OWFAuthenticationCredentials', 1 ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials
						  (
							id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ ',
							descrip		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 254 )	$ ',
							auth_type	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 20 )	$ ',
							auth_data	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_MEMO()		$ ',
							refcount	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()		$ '
						  )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00119', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials_1 ON ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials ( id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00120', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials_2 ON ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials ( descrip )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00121', g.MvQUERY_Error ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| sNN_OWFAuditLog
	|
	</MvCOMMENT>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'OWFAuditLog
						  (
							order_id	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_INTEGER()	$ ',
							log_data	' $ [ g.Module_Library_Native_DBAPI ].DB_Type_MEMO()	$ '
						  )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00163', g.MvQUERY_Error ) }">
	</MvIF>

	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'CREATE UNIQUE INDEX ' $ g.Store_Table_Prefix $ 'OWFAuditLog_1 ON ' $ g.Store_Table_Prefix $ 'OWFAuditLog ( order_id )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00164', g.MvQUERY_Error ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Scheduled Tasks
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.task"				VALUE = "">
	<MvASSIGN NAME = "l.task:descrip"		VALUE = "Process Order Workflow Wait Queue">
	<MvASSIGN NAME = "l.task:enabled"		VALUE = 1>
	<MvASSIGN NAME = "l.task:loglevel"		VALUE = "WE">
	<MvASSIGN NAME = "l.task:trig"			VALUE = "">
	<MvASSIGN NAME = "l.task:trig_delay"	VALUE = 0>
	<MvASSIGN NAME = "l.task:runint"		VALUE = 60>
	<MvASSIGN NAME = "l.task:runonce"		VALUE = 0>
	<MvASSIGN NAME = "l.task:mnt_mode"		VALUE = 0>
	<MvASSIGN NAME = "l.task:mnt_advnce"	VALUE = 0>
	<MvASSIGN NAME = "l.task:lastrun"		VALUE = 0>
	<MvASSIGN NAME = "l.task:nextrun"		VALUE = 0>
	<MvASSIGN NAME = "l.task:module_id"		VALUE = "{ l.module:id }">
	<MvASSIGN NAME = "l.task:operation"		VALUE = "process_wait_queue">
	<MvASSIGN NAME = "l.task:config"		VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_SCH_DB ].ScheduledTask_Insert( l.task ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Default Group Privilege
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].Group_Load_Name( 'Order Processing & Fulfillment', l.group ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GroupPrivilege_Load_Group_Privilege( l.group:id, 'OWFP', l.group_priv ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.group_priv:group_id"	VALUE = "{ l.group:id }">
			<MvASSIGN NAME = "l.group_priv:privilege"	VALUE = "OWFP">
			<MvASSIGN NAME = "l.group_priv:viewpriv"	VALUE = 1>
			<MvASSIGN NAME = "l.group_priv:addpriv"		VALUE = 1>
			<MvASSIGN NAME = "l.group_priv:modifypriv"	VALUE = 1>
			<MvASSIGN NAME = "l.group_priv:deletepriv"	VALUE = 1>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GroupPrivilege_Insert( l.group_priv ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00116', 'Privilege \'OWFP\' assigned to group \'' $ l.group:id $ '\' view=1, add=1, modify=1, delete=1' ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Default Queues
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.queue" ARRAY = "l.queues" COUNT = "{ QueueList_Load_Default( l.queues ) }">
		<MvIF EXPR = "{ NOT OWFQueue_Insert( l.queue ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Default Workflows
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ WorkflowList_Load_Default( l.workflows ) }">
		<MvIF EXPR = "{ NOT OWFWorkflow_Insert( l.workflow ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFOREACH ITERATOR = "l.trigger" ARRAY = "l.workflow:triggers">
			<MvIF EXPR = "{ NOT OWFWorkflowTrigger_Insert( l.workflow:id, l.trigger ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.action" ARRAY = "l.workflow:actions">
			<MvASSIGN NAME = "l.action:flow_id" VALUE = "{ l.workflow:id }">

			<MvIF EXPR = "{ NOT OWFWorkflowAction_Insert( l.action ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ ( l.action:act EQ 'webhook_get' OR l.action:act EQ 'webhook_post_order' ) AND l.action:act_data:cred_id }">
				<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Increment_ReferenceCount( l.action:act_data:cred_id ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Upgrade_Store" PARAMETERS = "module var, version" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.module:version EQ l.version }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00019', 'Module \'' $ l.module:name $ '\' does not support manual upgrade.  New versions may only be obtained through the streaming update system.' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Uninstall_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Delete( 'OWFQueues' ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Delete( 'OWFWorkflows' ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Delete( 'OWFWorkflowActions' ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Delete( 'OWFAuthenticationCredentials' ) }">

	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'OWFQueues' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'OWFAuditLog' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'OWFWaitQueue' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'OWFWorkflows' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials' }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Store Utilities Feature (util)
|
</MvCOMMENT>

<MvFUNCTION NAME = "StoreUtilityModule_Action" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_LeftNavigation" PARAMETERS = "module var, indent" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Screen" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Validate" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Action_Privileges" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = -1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Screen_Privileges" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = -1>
</MvFUNCTION>

<MvCOMMENT>
|
| Utility Screen Feature (vis_util)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Utility_Tabs" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Admin ].CanI( 'OWFP', 1, 0, 0, 0 ) }">
		<MvFUNCTIONRETURN VALUE = "{ l.module:code $ '_RULES:Order Workflows,' $ l.module:code $ '_QUEUES:Order Workflow Queues,' $ l.module:code $ '_CREDENTIALS:Order Workflow Authentication Credentials' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Head" PARAMETERS = "module var, tab" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab NE ( l.module:code $ '_RULES' ) AND l.tab NE ( l.module:code $ '_QUEUES' ) AND l.tab NE ( l.module:code $ '_CREDENTIALS' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 1, 0, 0, 0 ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_SetVariables( 'g', 'adminurl,sessionurl,clientside_url,AdminGraphics_Path,Store_Code' ) }">

	<MvIF EXPR = "{ [ g.Module_Admin ].Element_Admin_Core_JavaScript_Combined_Begin() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_AJAX_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_UI_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_Functions_JavaScript() }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_Admin_Core_JavaScript_Combined_End() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_AdminUI_CSS() }">

	<MvIF EXPR = "{ l.tab EQ ( l.module:code $ '_RULES' ) }">
		<MvEVAL EXPR = "{ Element_OWFWorkflow_List_CSS( l.module ) }">

		<MvIF EXPR = "{ Element_OWF_JavaScript_Combined_Begin( l.module ) }">
			<MvEVAL EXPR = "{ Element_OWFWorkflow_List_JavaScript( l.module ) }">
			<MvEVAL EXPR = "{ Element_OWF_JavaScript_Combined_End( l.module ) }">
		</MvIF>

		<script type="text/javascript">
			MMScreen_LoadFinished( function() { new OWFWorkflow_List(); } );
		</script>
	<MvELSEIF EXPR = "{ l.tab EQ ( l.module:code $ '_QUEUES' ) }">
		<MvEVAL EXPR = "{ Element_OWFQueue_List_CSS( l.module ) }">

		<MvIF EXPR = "{ Element_OWF_JavaScript_Combined_Begin( l.module ) }">
			<MvEVAL EXPR = "{ Element_OWFQueue_List_JavaScript( l.module ) }">
			<MvEVAL EXPR = "{ Element_OWF_JavaScript_Combined_End( l.module ) }">
		</MvIF>

		<script type="text/javascript">
			MMScreen_LoadFinished( function() { new OWFQueue_List(); } );
		</script>
	<MvELSEIF EXPR = "{ l.tab EQ ( l.module:code $ '_CREDENTIALS' ) }">
		<MvEVAL EXPR = "{ Element_OWFAuthenticationCredentialsList_CSS( l.module ) }">

		<MvIF EXPR = "{ Element_OWF_JavaScript_Combined_Begin( l.module ) }">
			<MvEVAL EXPR = "{ Element_OWFAuthenticationCredentialsList_JavaScript( l.module ) }">
			<MvEVAL EXPR = "{ Element_OWF_JavaScript_Combined_End( l.module ) }">
		</MvIF>

		<script type="text/javascript">
			MMScreen_LoadFinished( function() { new OWFAuthenticationCredentialsList(); } );
		</script>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Content" PARAMETERS = "module var, tab, load_fields" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.tab NE ( l.module:code $ '_RULES' ) AND l.tab NE ( l.module:code $ '_QUEUES' ) AND l.tab NE ( l.module:code $ '_CREDENTIALS' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 1, 0, 0, 0 ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.tab EQ ( l.module:code $ '_RULES' ) }">
		<MvEVAL EXPR = "{ Element_OWFWorkflow_List_HTML( l.module ) }">
	<MvELSEIF EXPR = "{ l.tab EQ ( l.module:code $ '_QUEUES' ) }">
		<MvEVAL EXPR = "{ Element_OWFQueue_List_HTML( l.module ) }">
	<MvELSEIF EXPR = "{ l.tab EQ ( l.module:code $ '_CREDENTIALS' ) }">
		<MvEVAL EXPR = "{ Element_OWFAuthenticationCredentialsList_HTML( l.module ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawButtons_Suppress( '[UPDATE]' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Validate" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Order Status Change Notification Feature (not_order)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Notify_Order_Insert" PARAMETERS = "module var, order var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'order_created', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.order:id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Order_Delete" PARAMETERS = "module var, order var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ OWFAuditLog_Delete_Order_ID( l.order:id ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ OWFQueueXOrder_Delete_All_Order( l.order:id ) }">
	<MvASSIGN NAME = "l.null" VALUE = "{ OWFWaitQueue_Delete_All_Order_ID( l.order:id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Order_StatusChange" PARAMETERS = "module var, original_status, order var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'order_status_change', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.order:id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvREFERENCE NAME = "l.data" MEMBER = "original_status" VARIABLE = "l.original_status">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Order_BatchChange" PARAMETERS = "module var, order_count, original_orders var, orders var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Order_TotalChange" PARAMETERS = "module var, original_total, order var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'order_total_change', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.order:id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvREFERENCE NAME = "l.data" MEMBER = "original_total" VARIABLE = "l.original_total">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvCOMMENT>
|
| Order Shipment Status Change Notification Feature (not_ordershpmnt)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Notify_OrderShipment_Insert" PARAMETERS = "module var, ordershipment var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'ordershipment_created', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.ordershipment:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvREFERENCE NAME = "l.data" MEMBER = "created_ordershipment" VARIABLE = "l.ordershipment">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_OrderShipment_Delete" PARAMETERS = "module var, ordershipment var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'ordershipment_deleted', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.ordershipment:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvREFERENCE NAME = "l.data" MEMBER = "deleted_ordershipment" VARIABLE = "l.ordershipment">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_OrderShipment_StatusChange" PARAMETERS = "module var, ordershipment_count, original_ordershipments var, ordershipments var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.ordershipment_count EQ 0 }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'ordershipment_status_change', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.ordershipments[ 1 ]:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.combined_ordershipments"		VALUE = "">
	<MvASSIGN NAME = "l.combined_ordershipment_count"	VALUE = 0>

	<MvFOR INDEX = "l.ordershipment_pos" COUNT = "{ l.ordershipment_count }">
		<MvREFERENCEARRAY NAME = "l.ordershipment" VARIABLE = "l.ordershipments">
			<MvDIMENSION INDEX = "{ l.ordershipment_pos }">
		</MvREFERENCEARRAY>

		<MvREFERENCEARRAY NAME = "l.original_ordershipment" VARIABLE = "l.original_ordershipments">
			<MvDIMENSION INDEX = "{ l.ordershipment_pos }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.combined_ordershipment"							VALUE = "">
		<MvASSIGN NAME = "l.combined_ordershipment:id"						VALUE = "{ l.ordershipment:id }">
		<MvASSIGN NAME = "l.combined_ordershipment:batch_id"				VALUE = "{ l.ordershipment:batch_id }">
		<MvASSIGN NAME = "l.combined_ordershipment:code"					VALUE = "{ l.ordershipment:code }">
		<MvASSIGN NAME = "l.combined_ordershipment:code"					VALUE = "{ l.ordershipment:code }">
		<MvASSIGN NAME = "l.combined_ordershipment:order_id"				VALUE = "{ l.ordershipment:order_id }">
		<MvASSIGN NAME = "l.combined_ordershipment:status"					VALUE = "{ l.ordershipment:status }">
		<MvASSIGN NAME = "l.combined_ordershipment:labelcount"				VALUE = "{ l.ordershipment:labelcount }">
		<MvASSIGN NAME = "l.combined_ordershipment:ship_date"				VALUE = "{ l.ordershipment:ship_date }">
		<MvASSIGN NAME = "l.combined_ordershipment:tracknum"				VALUE = "{ l.ordershipment:tracknum }">
		<MvASSIGN NAME = "l.combined_ordershipment:tracktype"				VALUE = "{ l.ordershipment:tracktype }">
		<MvASSIGN NAME = "l.combined_ordershipment:weight"					VALUE = "{ l.ordershipment:weight }">
		<MvASSIGN NAME = "l.combined_ordershipment:cost"					VALUE = "{ l.ordershipment:cost }">
		<MvASSIGN NAME = "l.combined_ordershipment:label_id"				VALUE = "{ l.ordershipment:label_id }">
		<MvASSIGN NAME = "l.combined_ordershipment:label_type"				VALUE = "{ l.ordershipment:label_type }">
		<MvASSIGN NAME = "l.combined_ordershipment:label_data"				VALUE = "{ l.ordershipment:label_data }">

		<MvASSIGN NAME = "l.combined_ordershipment:original_id"				VALUE = "{ l.original_ordershipment:id }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_batch_id"		VALUE = "{ l.original_ordershipment:batch_id }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_code"			VALUE = "{ l.original_ordershipment:code }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_code"			VALUE = "{ l.original_ordershipment:code }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_order_id"		VALUE = "{ l.original_ordershipment:order_id }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_status"			VALUE = "{ l.original_ordershipment:status }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_labelcount"		VALUE = "{ l.original_ordershipment:labelcount }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_ship_date"		VALUE = "{ l.original_ordershipment:ship_date }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_tracknum"		VALUE = "{ l.original_ordershipment:tracknum }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_tracktype"		VALUE = "{ l.original_ordershipment:tracktype }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_weight"			VALUE = "{ l.original_ordershipment:weight }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_cost"			VALUE = "{ l.original_ordershipment:cost }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_label_id"		VALUE = "{ l.original_ordershipment:label_id }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_label_type"		VALUE = "{ l.original_ordershipment:label_type }">
		<MvASSIGN NAME = "l.combined_ordershipment:original_label_data"		VALUE = "{ l.original_ordershipment:label_data }">

		<MvFOREACH ITERATOR = "l.orderitem" ARRAY = "l.orderitems" COUNT = "{ [ g.Module_Library_DB ].OrderItemList_Load_Shipment( l.combined_ordershipment:id, l.combined_ordershipment:orderitems ) }">
			<MvASSIGN NAME = "l.orderitem:option_count"						VALUE = "{ [ g.Module_Library_DB ].OrderOptionList_Load_Line( l.orderitem:line_id, l.orderitem:options ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.combined_ordershipment_count" VALUE = "{ miva_array_insert( l.combined_ordershipments, l.combined_ordershipment, -1 ) }">
	</MvFOR>

	<MvREFERENCE NAME = "l.data" MEMBER = "updated_ordershipments"			VARIABLE = "l.combined_ordershipments">
	<MvREFERENCE NAME = "l.data" MEMBER = "updated_ordershipment_count"		VARIABLE = "l.combined_ordershipment_count">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvCOMMENT>
|
| OrderItem Status Change Notification Feature (not_orderitem)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Notify_OrderItem_Insert" PARAMETERS = "module var, orderitem var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'orderitem_created', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.orderitem:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvREFERENCE NAME = "l.data" MEMBER = "created_orderitem" VARIABLE = "l.orderitem">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_OrderItem_Update" PARAMETERS = "module var, original_orderitem var, orderitem var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'orderitem_updated', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.orderitem:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.combined_orderitem"							VALUE = "">
	<MvASSIGN NAME = "l.combined_orderitem:order_id"				VALUE = "{ l.orderitem:order_id }">
	<MvASSIGN NAME = "l.combined_orderitem:line_id"					VALUE = "{ l.orderitem:line_id }">
	<MvASSIGN NAME = "l.combined_orderitem:group_id"				VALUE = "{ l.orderitem:group_id }">
	<MvASSIGN NAME = "l.combined_orderitem:status"					VALUE = "{ l.orderitem:status }">
	<MvASSIGN NAME = "l.combined_orderitem:subscrp_id"				VALUE = "{ l.orderitem:subscrp_id }">
	<MvASSIGN NAME = "l.combined_orderitem:subterm_id"				VALUE = "{ l.orderitem:subterm_id }">
	<MvASSIGN NAME = "l.combined_orderitem:shpmnt_id"				VALUE = "{ l.orderitem:shpmnt_id }">
	<MvASSIGN NAME = "l.combined_orderitem:rma_id"					VALUE = "{ l.orderitem:rma_id }">
	<MvASSIGN NAME = "l.combined_orderitem:dt_instock"				VALUE = "{ l.orderitem:dt_instock }">
	<MvASSIGN NAME = "l.combined_orderitem:product_id"				VALUE = "{ l.orderitem:product_id }">
	<MvASSIGN NAME = "l.combined_orderitem:code"					VALUE = "{ l.orderitem:code }">
	<MvASSIGN NAME = "l.combined_orderitem:name"					VALUE = "{ l.orderitem:name }">
	<MvASSIGN NAME = "l.combined_orderitem:sku"						VALUE = "{ l.orderitem:sku }">
	<MvASSIGN NAME = "l.combined_orderitem:retail"					VALUE = "{ l.orderitem:retail }">
	<MvASSIGN NAME = "l.combined_orderitem:base_price"				VALUE = "{ l.orderitem:base_price }">
	<MvASSIGN NAME = "l.combined_orderitem:price"					VALUE = "{ l.orderitem:price }">
	<MvASSIGN NAME = "l.combined_orderitem:weight"					VALUE = "{ l.orderitem:weight }">
	<MvASSIGN NAME = "l.combined_orderitem:taxable"					VALUE = "{ l.orderitem:taxable }">
	<MvASSIGN NAME = "l.combined_orderitem:upsold"					VALUE = "{ l.orderitem:upsold }">
	<MvASSIGN NAME = "l.combined_orderitem:quantity"				VALUE = "{ l.orderitem:quantity }">
	<MvASSIGN NAME = "l.combined_orderitem:option_count"			VALUE = "{ [ g.Module_Library_DB ].OrderOptionList_Load_Line( l.combined_orderitem:line_id, l.combined_orderitem:options ) }">

	<MvASSIGN NAME = "l.combined_orderitem:original_order_id"		VALUE = "{ l.original_orderitem:order_id }">
	<MvASSIGN NAME = "l.combined_orderitem:original_line_id"		VALUE = "{ l.original_orderitem:line_id }">
	<MvASSIGN NAME = "l.combined_orderitem:original_group_id"		VALUE = "{ l.original_orderitem:group_id }">
	<MvASSIGN NAME = "l.combined_orderitem:original_status"			VALUE = "{ l.original_orderitem:status }">
	<MvASSIGN NAME = "l.combined_orderitem:original_subscrp_id"		VALUE = "{ l.original_orderitem:subscrp_id }">
	<MvASSIGN NAME = "l.combined_orderitem:original_subterm_id"		VALUE = "{ l.original_orderitem:subterm_id }">
	<MvASSIGN NAME = "l.combined_orderitem:original_shpmnt_id"		VALUE = "{ l.original_orderitem:shpmnt_id }">
	<MvASSIGN NAME = "l.combined_orderitem:original_rma_id"			VALUE = "{ l.original_orderitem:rma_id }">
	<MvASSIGN NAME = "l.combined_orderitem:original_dt_instock"		VALUE = "{ l.original_orderitem:dt_instock }">
	<MvASSIGN NAME = "l.combined_orderitem:original_product_id"		VALUE = "{ l.original_orderitem:product_id }">
	<MvASSIGN NAME = "l.combined_orderitem:original_code"			VALUE = "{ l.original_orderitem:code }">
	<MvASSIGN NAME = "l.combined_orderitem:original_name"			VALUE = "{ l.original_orderitem:name }">
	<MvASSIGN NAME = "l.combined_orderitem:original_sku"			VALUE = "{ l.original_orderitem:sku }">
	<MvASSIGN NAME = "l.combined_orderitem:original_retail"			VALUE = "{ l.original_orderitem:retail }">
	<MvASSIGN NAME = "l.combined_orderitem:original_base_price"		VALUE = "{ l.original_orderitem:base_price }">
	<MvASSIGN NAME = "l.combined_orderitem:original_price"			VALUE = "{ l.original_orderitem:price }">
	<MvASSIGN NAME = "l.combined_orderitem:original_weight"			VALUE = "{ l.original_orderitem:weight }">
	<MvASSIGN NAME = "l.combined_orderitem:original_taxable"		VALUE = "{ l.original_orderitem:taxable }">
	<MvASSIGN NAME = "l.combined_orderitem:original_upsold"			VALUE = "{ l.original_orderitem:upsold }">
	<MvASSIGN NAME = "l.combined_orderitem:original_quantity"		VALUE = "{ l.original_orderitem:quantity }">

	<MvREFERENCE NAME = "l.data" MEMBER = "updated_orderitem"		VARIABLE = "l.combined_orderitems">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_OrderItem_Delete" PARAMETERS = "module var, count, original_orderitems var, orderitems var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.count EQ 0 }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'orderitem_deleted', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.orderitems[ 1 ]:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvREFERENCE NAME = "l.data" MEMBER = "deleted_orderitems"		VARIABLE = "l.orderitems">
	<MvREFERENCE NAME = "l.data" MEMBER = "deleted_orderitem_count"	VARIABLE = "l.count">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_OrderItem_StatusChange" PARAMETERS = "module var, orderitem_count, original_orderitems var, orderitems var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.orderitem_count EQ 0 }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'orderitem_status_change', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.orderitems[ 1 ]:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.combined_orderitems"		VALUE = "">
	<MvASSIGN NAME = "l.combined_orderitem_count"	VALUE = 0>

	<MvFOR INDEX = "l.orderitem_pos" COUNT = "{ l.orderitem_count }">
		<MvREFERENCEARRAY NAME = "l.orderitem" VARIABLE = "l.orderitems">
			<MvDIMENSION INDEX = "{ l.orderitem_pos }">
		</MvREFERENCEARRAY>

		<MvREFERENCEARRAY NAME = "l.original_orderitem" VARIABLE = "l.original_orderitems">
			<MvDIMENSION INDEX = "{ l.orderitem_pos }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.combined_orderitem"							VALUE = "">
		<MvASSIGN NAME = "l.combined_orderitem:order_id"				VALUE = "{ l.orderitem:order_id }">
		<MvASSIGN NAME = "l.combined_orderitem:line_id"					VALUE = "{ l.orderitem:line_id }">
		<MvASSIGN NAME = "l.combined_orderitem:group_id"				VALUE = "{ l.orderitem:group_id }">
		<MvASSIGN NAME = "l.combined_orderitem:status"					VALUE = "{ l.orderitem:status }">
		<MvASSIGN NAME = "l.combined_orderitem:subscrp_id"				VALUE = "{ l.orderitem:subscrp_id }">
		<MvASSIGN NAME = "l.combined_orderitem:subterm_id"				VALUE = "{ l.orderitem:subterm_id }">
		<MvASSIGN NAME = "l.combined_orderitem:shpmnt_id"				VALUE = "{ l.orderitem:shpmnt_id }">
		<MvASSIGN NAME = "l.combined_orderitem:rma_id"					VALUE = "{ l.orderitem:rma_id }">
		<MvASSIGN NAME = "l.combined_orderitem:dt_instock"				VALUE = "{ l.orderitem:dt_instock }">
		<MvASSIGN NAME = "l.combined_orderitem:product_id"				VALUE = "{ l.orderitem:product_id }">
		<MvASSIGN NAME = "l.combined_orderitem:code"					VALUE = "{ l.orderitem:code }">
		<MvASSIGN NAME = "l.combined_orderitem:name"					VALUE = "{ l.orderitem:name }">
		<MvASSIGN NAME = "l.combined_orderitem:sku"						VALUE = "{ l.orderitem:sku }">
		<MvASSIGN NAME = "l.combined_orderitem:retail"					VALUE = "{ l.orderitem:retail }">
		<MvASSIGN NAME = "l.combined_orderitem:base_price"				VALUE = "{ l.orderitem:base_price }">
		<MvASSIGN NAME = "l.combined_orderitem:price"					VALUE = "{ l.orderitem:price }">
		<MvASSIGN NAME = "l.combined_orderitem:weight"					VALUE = "{ l.orderitem:weight }">
		<MvASSIGN NAME = "l.combined_orderitem:taxable"					VALUE = "{ l.orderitem:taxable }">
		<MvASSIGN NAME = "l.combined_orderitem:upsold"					VALUE = "{ l.orderitem:upsold }">
		<MvASSIGN NAME = "l.combined_orderitem:quantity"				VALUE = "{ l.orderitem:quantity }">
		<MvASSIGN NAME = "l.combined_orderitem:option_count"			VALUE = "{ [ g.Module_Library_DB ].OrderOptionList_Load_Line( l.combined_orderitem:line_id, l.combined_orderitem:options ) }">

		<MvASSIGN NAME = "l.combined_orderitem:original_order_id"		VALUE = "{ l.original_orderitem:order_id }">
		<MvASSIGN NAME = "l.combined_orderitem:original_line_id"		VALUE = "{ l.original_orderitem:line_id }">
		<MvASSIGN NAME = "l.combined_orderitem:original_group_id"		VALUE = "{ l.original_orderitem:group_id }">
		<MvASSIGN NAME = "l.combined_orderitem:original_status"			VALUE = "{ l.original_orderitem:status }">
		<MvASSIGN NAME = "l.combined_orderitem:original_subscrp_id"		VALUE = "{ l.original_orderitem:subscrp_id }">
		<MvASSIGN NAME = "l.combined_orderitem:original_subterm_id"		VALUE = "{ l.original_orderitem:subterm_id }">
		<MvASSIGN NAME = "l.combined_orderitem:original_shpmnt_id"		VALUE = "{ l.original_orderitem:shpmnt_id }">
		<MvASSIGN NAME = "l.combined_orderitem:original_rma_id"			VALUE = "{ l.original_orderitem:rma_id }">
		<MvASSIGN NAME = "l.combined_orderitem:original_dt_instock"		VALUE = "{ l.original_orderitem:dt_instock }">
		<MvASSIGN NAME = "l.combined_orderitem:original_product_id"		VALUE = "{ l.original_orderitem:product_id }">
		<MvASSIGN NAME = "l.combined_orderitem:original_code"			VALUE = "{ l.original_orderitem:code }">
		<MvASSIGN NAME = "l.combined_orderitem:original_name"			VALUE = "{ l.original_orderitem:name }">
		<MvASSIGN NAME = "l.combined_orderitem:original_sku"			VALUE = "{ l.original_orderitem:sku }">
		<MvASSIGN NAME = "l.combined_orderitem:original_retail"			VALUE = "{ l.original_orderitem:retail }">
		<MvASSIGN NAME = "l.combined_orderitem:original_base_price"		VALUE = "{ l.original_orderitem:base_price }">
		<MvASSIGN NAME = "l.combined_orderitem:original_price"			VALUE = "{ l.original_orderitem:price }">
		<MvASSIGN NAME = "l.combined_orderitem:original_weight"			VALUE = "{ l.original_orderitem:weight }">
		<MvASSIGN NAME = "l.combined_orderitem:original_taxable"		VALUE = "{ l.original_orderitem:taxable }">
		<MvASSIGN NAME = "l.combined_orderitem:original_upsold"			VALUE = "{ l.original_orderitem:upsold }">
		<MvASSIGN NAME = "l.combined_orderitem:original_quantity"		VALUE = "{ l.original_orderitem:quantity }">

		<MvASSIGN NAME = "l.combined_orderitem_count" VALUE = "{ miva_array_insert( l.combined_orderitems, l.combined_orderitem, -1 ) }">
	</MvFOR>

	<MvREFERENCE NAME = "l.data" MEMBER = "updated_orderitems"			VARIABLE = "l.combined_orderitems">
	<MvREFERENCE NAME = "l.data" MEMBER = "updated_orderitem_count"		VARIABLE = "l.combined_orderitem_count">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvCOMMENT>
|
| OrderReturn Status Change Notification Feature (not_orderreturn)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Notify_OrderReturn_Insert" PARAMETERS = "module var, orderreturn var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'orderreturn_created', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.orderreturn:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvREFERENCE NAME = "l.data" MEMBER = "created_orderreturn" VARIABLE = "l.orderreturn">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_OrderReturn_Delete" PARAMETERS = "module var, orderreturn var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'orderreturn_deleted', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.orderreturn:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvREFERENCE NAME = "l.data" MEMBER = "deleted_orderreturn" VARIABLE = "l.orderreturn">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_OrderReturn_StatusChange" PARAMETERS = "module var, orderreturn_count, original_orderreturns var, orderreturns var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.orderreturn_count EQ 0 }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.workflow_count" VALUE = "{ OWFWorkflowList_Load_Trigger( 'orderreturn_status_change', l.workflows ) }">

	<MvIF EXPR = "{ l.workflow_count EQ 0 }">
		<MvFUNCTIONRETURN>
	<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.orderreturns[ 1 ]:order_id, l.data ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.combined_orderreturns"		VALUE = "">
	<MvASSIGN NAME = "l.combined_orderreturn_count"	VALUE = 0>

	<MvFOR INDEX = "l.orderreturn_pos" COUNT = "{ l.orderreturn_count }">
		<MvREFERENCEARRAY NAME = "l.orderreturn" VARIABLE = "l.orderreturns">
			<MvDIMENSION INDEX = "{ l.orderreturn_pos }">
		</MvREFERENCEARRAY>

		<MvREFERENCEARRAY NAME = "l.original_orderreturn" VARIABLE = "l.original_orderreturns">
			<MvDIMENSION INDEX = "{ l.orderreturn_pos }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.combined_orderreturn"						VALUE = "">
		<MvASSIGN NAME = "l.combined_orderreturn:id"					VALUE = "{ l.orderreturn:id }">
		<MvASSIGN NAME = "l.combined_orderreturn:batch_id"				VALUE = "{ l.orderreturn:batch_id }">
		<MvASSIGN NAME = "l.combined_orderreturn:code"					VALUE = "{ l.orderreturn:code }">
		<MvASSIGN NAME = "l.combined_orderreturn:code"					VALUE = "{ l.orderreturn:code }">
		<MvASSIGN NAME = "l.combined_orderreturn:order_id"				VALUE = "{ l.orderreturn:order_id }">
		<MvASSIGN NAME = "l.combined_orderreturn:status"				VALUE = "{ l.orderreturn:status }">
		<MvASSIGN NAME = "l.combined_orderreturn:labelcount"			VALUE = "{ l.orderreturn:labelcount }">
		<MvASSIGN NAME = "l.combined_orderreturn:ship_date"				VALUE = "{ l.orderreturn:ship_date }">
		<MvASSIGN NAME = "l.combined_orderreturn:tracknum"				VALUE = "{ l.orderreturn:tracknum }">
		<MvASSIGN NAME = "l.combined_orderreturn:tracktype"				VALUE = "{ l.orderreturn:tracktype }">
		<MvASSIGN NAME = "l.combined_orderreturn:weight"				VALUE = "{ l.orderreturn:weight }">
		<MvASSIGN NAME = "l.combined_orderreturn:cost"					VALUE = "{ l.orderreturn:cost }">
		<MvASSIGN NAME = "l.combined_orderreturn:label_id"				VALUE = "{ l.orderreturn:label_id }">
		<MvASSIGN NAME = "l.combined_orderreturn:label_type"			VALUE = "{ l.orderreturn:label_type }">
		<MvASSIGN NAME = "l.combined_orderreturn:label_data"			VALUE = "{ l.orderreturn:label_data }">

		<MvASSIGN NAME = "l.combined_orderreturn:original_id"			VALUE = "{ l.original_orderreturn:id }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_batch_id"		VALUE = "{ l.original_orderreturn:batch_id }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_code"			VALUE = "{ l.original_orderreturn:code }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_code"			VALUE = "{ l.original_orderreturn:code }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_order_id"		VALUE = "{ l.original_orderreturn:order_id }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_status"		VALUE = "{ l.original_orderreturn:status }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_labelcount"	VALUE = "{ l.original_orderreturn:labelcount }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_ship_date"	VALUE = "{ l.original_orderreturn:ship_date }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_tracknum"		VALUE = "{ l.original_orderreturn:tracknum }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_tracktype"	VALUE = "{ l.original_orderreturn:tracktype }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_weight"		VALUE = "{ l.original_orderreturn:weight }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_cost"			VALUE = "{ l.original_orderreturn:cost }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_label_id"		VALUE = "{ l.original_orderreturn:label_id }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_label_type"	VALUE = "{ l.original_orderreturn:label_type }">
		<MvASSIGN NAME = "l.combined_orderreturn:original_label_data"	VALUE = "{ l.original_orderreturn:label_data }">

		<MvFOREACH ITERATOR = "l.orderitem" ARRAY = "l.orderitems" COUNT = "{ [ g.Module_Library_DB ].OrderItemList_Load_Return( l.combined_orderreturn:id, l.combined_orderreturn:orderitems ) }">
			<MvASSIGN NAME = "l.orderitem:option_count"					VALUE = "{ [ g.Module_Library_DB ].OrderOptionList_Load_Line( l.orderitem:line_id, l.orderitem:options ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.combined_orderreturn_count" VALUE = "{ miva_array_insert( l.combined_orderreturns, l.combined_orderreturn, -1 ) }">
	</MvFOR>

	<MvREFERENCE NAME = "l.data" MEMBER = "updated_orderreturns"			VARIABLE = "l.combined_orderreturns">
	<MvREFERENCE NAME = "l.data" MEMBER = "updated_orderreturn_count"		VARIABLE = "l.combined_orderreturn_count">

	<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
		<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvCOMMENT>
|
| Scheduled Task Feature (scheduledtask)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ScheduledTaskModule_Capabilities" PARAMETERS = "module var, capabilities var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.capabilities:provision"				VALUE = 1>
	<MvASSIGN NAME = "l.capabilities:provision_settings"	VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Operations" PARAMETERS = "module var, operations var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.operations" INDEX = 1 MEMBER = "code"		VALUE = "process_wait_queue">
	<MvASSIGN NAME = "l.operations" INDEX = 1 MEMBER = "descrip"	VALUE = "Process Order Workflow Wait Queue">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Fields" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Prompt" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Field" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Invalid" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Validate" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Update" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Delete" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Execute" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.task:operation NE 'process_wait_queue' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00020', 'Unsupported operation' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.entry" ARRAY = "l.entries" COUNT = "{ OWFWaitQueueList_Load_Pending( s.dyn_time_t, l.entries ) }">
		<MvASSIGN NAME = "l.data" VALUE = "">

		<MvIF EXPR = "{ NOT OWFWorkflow_Load_ID( l.entry:flow_id, l.workflow ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ NOT OWFOrder_Load_ID( l.entry:order_id, l.data ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT OWFWorkflow_Check_Condition( l.workflow:cond, 'AND', l.data ) }">
				<MvIF EXPR = "{ ( s.dyn_time_t - l.entry:firstcheck ) LT ( l.workflow:wait_max * 60 ) }">
					<MvASSIGN NAME = "l.entry:lastcheck"	VALUE = "{ s.dyn_time_t }">
					<MvASSIGN NAME = "l.entry:nextcheck"	VALUE = "{ s.dyn_time_t + ( l.workflow:wait_int * 60 ) }">

					<MvIF EXPR = "{ NOT OWFWaitQueue_Update( l.entry ) }">
						<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Log( l.task, 'W', 'Wait Queue entry was not updated: ' $ g.Error_Code $ ': ' $ g.Error_Message ) }">
					</MvIF>

					<MvIF EXPR = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_RecycleRecommended() }">
						<MvFUNCTIONRETURN VALUE = -1>
					</MvIF>

					<MvFOREACHCONTINUE>
				</MvIF>
			<MvELSE>
				<MvFOREACH ITERATOR = "l.action" ARRAY = "l.actions" COUNT = "{ OWFWorkflowActionList_Load_Workflow( l.workflow:id, l.actions ) }">
					<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action( l.workflow, l.action, l.data ) }">
						<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Log( l.task, 'W', 'Action was not applied for order #' $ l.entry:order_id $ ', workflow: \'' $ l.workflow:name $ '\', and action \'' $ l.action:id $ '\': ' $ g.Error_Code $ ': ' $ g.Error_Message ) }">
						<MvFOREACHSTOP>
					</MvIF>
				</MvFOREACH>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ NOT OWFWaitQueue_Delete( l.entry:flow_id, l.entry:order_id ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_Log( l.task, 'W', 'Wait Queue entry was not deleted for order #' $ l.entry:order_id $ ' and workflow: \'' $ l.workflow:name $ '\': ' $ g.Error_Code $ ': ' $ g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_RecycleRecommended() }">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Provision_Settings" PARAMETERS = "module var, task var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Feature: clientside
|
</MvCOMMENT>

<MvINCLUDE FILE = "modules/util/orderworkflow/combined.mv">

<MvFUNCTION NAME = "Module_Clientside" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( '.js' EIN g.Filename ) EQ len_var( g.Filename ) }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Filename EQ 'combined.js' }">									<MvFUNCTIONRETURN VALUE = "{ Element_OWF_JavaScript_Combined( l.module ) }">
	<MvELSEIF EXPR = "{ Module_Clientside_Output_File( l.module, g.Filename ) }">	<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.null" VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Output_File" PARAMETERS = "module var, filename" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/util/orderworkflow/output.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_File_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/util/orderworkflow/integrity.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Combined_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/util/orderworkflow/combined_integrity.mv">
</MvFUNCTION>

<MvCOMMENT>
|
| Module JSON Feature (json)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'OWFWorkflowList_Load_Query' }">						<MvFUNCTIONRETURN VALUE = "{ JSON_OWFWorkflowList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFWorkflowList_Delete' }">						<MvFUNCTIONRETURN VALUE = "{ JSON_OWFWorkflowList_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFWorkflowTriggerList_Load_Workflow' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_OWFWorkflowTriggerList_Load_Workflow( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFWorkflowConditionList_Load_Workflow' }">		<MvFUNCTIONRETURN VALUE = "{ JSON_OWFWorkflowConditionList_Load_Workflow( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFWorkflowActionList_Load_Workflow' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_OWFWorkflowActionList_Load_Workflow( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFWorkflow_Insert' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_OWFWorkflow_Insert( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFWorkflow_Update' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_OWFWorkflow_Update( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFWorkflow_Update_Enabled' }">					<MvFUNCTIONRETURN VALUE = "{ JSON_OWFWorkflow_Update_Enabled( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFWorkflow_Delete' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_OWFWorkflow_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFQueueList_Load_Query' }">						<MvFUNCTIONRETURN VALUE = "{ JSON_OWFQueueList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFQueueList_Delete' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_OWFQueueList_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFQueue_Insert' }">								<MvFUNCTIONRETURN VALUE = "{ JSON_OWFQueue_Insert( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFQueue_Update' }">								<MvFUNCTIONRETURN VALUE = "{ JSON_OWFQueue_Update( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFQueue_Delete' }">								<MvFUNCTIONRETURN VALUE = "{ JSON_OWFQueue_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFAuthenticationCredentialsList_Load_Query' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_OWFAuthenticationCredentialsList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFAuthenticationCredentials_Insert' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_OWFAuthenticationCredentials_Insert( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFAuthenticationCredentials_Update' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_OWFAuthenticationCredentials_Update( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'OWFAuthenticationCredentials_Delete' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_OWFAuthenticationCredentials_Delete( l.module ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Module JSON API Feature (json_api)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON_API" PARAMETERS = "module var, function" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.function EQ 'QueueOrderList_Load_Query' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_API_QueueOrderList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ l.function EQ 'OrderList_Acknowledge' }">	<MvFUNCTIONRETURN VALUE = "{ JSON_API_OrderList_Acknowledge( l.module ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-UTIL-ORWF-00117', 'Invalid function' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_API_QueueOrderList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'ORDR', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFQueue_Load( l.queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.filter"					VALUE = "">
	<MvASSIGN NAME = "l.sort"					VALUE = "">
	<MvASSIGN NAME = "l.offset"					VALUE = 0>
	<MvASSIGN NAME = "l.count"					VALUE = 0>
	<MvASSIGN NAME = "l.search_query"			VALUE = "">
	<MvASSIGN NAME = "l.count_query"			VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.workflow_count"			VALUE = "{ OWFWorkflowList_Load_Trigger( 'order_retrieved', l.workflows ) }">
	<MvASSIGN NAME = "l.workflow_orders"		VALUE = "">
	<MvASSIGN NAME = "l.workflow_order_count"	VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_BaseOrderList_Load_Query( l.filter, l.sort, 'ord.id', l.search_query, l.count_query, l.ondemandcolumns ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'OWFQueueXOrder', 'owqxo' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 'owqxo.queue_id = ? AND
																				owqxo.order_id = ord.id', [ g.Module_Library_DB ].SQL_Query_Field( l.queue:id ) ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.count_query, g.Store_Table_Prefix $ 'OWFQueueXOrder', 'owqxo' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.count_query,  'owqxo.queue_id = ? AND
																				owqxo.order_id = ord.id', [ g.Module_Library_DB ].SQL_Query_Field( l.queue:id ) ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.count_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Orders', l.sql, l.fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-UTIL-ORWF-00021', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.order_count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Order_CustomFields_Initialize( l.filter, l.customfield_state ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Orders.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.order_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_BaseOrderList_Order_Read( l.order, l.ondemandcolumns ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.order_count ) }">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Order_OnDemandColumns( l.order, l.ondemandcolumns ) }">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Order_CustomFields_With_Query( l.search_query, l.customfield_state, Orders.d.id, 'Orders' ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvIF EXPR = "{ l.workflow_count }">
				<MvASSIGN NAME = "l.workflow_order_count"	VALUE = "{ miva_array_insert_var( l.workflow_orders, Orders.d.id, -1 ) }">
			</MvIF>

			<MvSKIP NAME = "Merchant" VIEW = "Orders" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Orders">

	<MvCOMMENT>
	|
	| Process 'order_retrieved' workflows
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.workflow_order_id" ARRAY = "l.workflow_orders" COUNT = "{ l.workflow_order_count }">
		<MvIF EXPR = "{ OWFOrder_Load_ID( l.workflow_order_id, l.data ) }">
			<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
				<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
			</MvFOREACH>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_API_OrderList_Acknowledge" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">					<MvFUNCTIONRETURN>																	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'ORDR', 1, 0, 0, 0 ) }">		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Access_Denied() }">	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array(	'R', 'Order_IDs', l.order_ids, l.order_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.warnings" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.workflow_count"	VALUE = "{ OWFWorkflowList_Load_Trigger( 'order_acknowledged', l.workflows ) }">

	<MvFOREACH ITERATOR = "l.order_id" ARRAY = "l.order_ids" COUNT = "{ l.order_id_count }">
		<MvASSIGN NAME = "l.data"		VALUE = "">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT OWFOrder_Load_ID( l.order_id, l.data ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">	<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.order_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>														<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Warning( l.order_id, 'MER-UTIL-ORWF-00180', 'Order not found', l.warnings ) }">
			</MvIF>

			<MvFOREACHCONTINUE>
		</MvIF>

		<MvFOREACH ITERATOR = "l.workflow" ARRAY = "l.workflows" COUNT = "{ l.workflow_count }">
			<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply( l.workflow, l.data ) }">
		</MvFOREACH>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed( l.processed, l.errors, l.warnings ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflow" PARAMETERS = "workflow var, ondemandcolumns var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.workflow:id ) }">,
	"enabled":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.workflow:enabled ) }">,
	"name":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.workflow:name ) }">",
	"wait_for":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.workflow:wait_for ) }">,
	"wait_int":		<MvEVAL EXPR = "{ int( l.workflow:wait_int ) }">,
	"wait_max":		<MvEVAL EXPR = "{ int( l.workflow:wait_max ) }">

	<MvIF EXPR = "{ l.ondemandcolumns:triggers }">
		, "triggers":
		[
			<MvFOREACH INDEX = "l.workflowtrigger_pos" ITERATOR = "l.workflowtrigger" ARRAY = "l.workflowtriggers" COUNT = "{ OWFWorkflowTriggerList_Load_Workflow( l.workflow:id, l.workflowtriggers ) }">
				<MvIF EXPR = "{ l.workflowtrigger_pos GT 1 }">, </MvIF>

				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.workflowtrigger:trig_code ) }">"
			</MvFOREACH>
		]
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:cond }">
		, "cond": 
		[
			<MvFOREACH INDEX = "l.condition_pos" ITERATOR = "l.condition" ARRAY = "l.workflow:cond">
				<MvIF EXPR = "{ l.condition_pos GT 1 }">, </MvIF>

				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.condition ) }">
			</MvFOREACH>
		]
	</MvIF>

	<MvIF EXPR = "{ l.ondemandcolumns:actions }">
		, "actions": <MvEVAL EXPR = "{ JSON_OWFWorkflowActionList_Output_Workflow( l.workflow ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflow_Load" PARAMETERS = "workflow var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'Workflow_ID', l.workflow_id ) }">
		<MvIF EXPR = "{ NOT OWFWorkflow_Load_ID( l.workflow_id, l.workflow ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00022', 'Workflow not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_Workflow', l.workflow_name ) }">
		<MvIF EXPR = "{ NOT OWFWorkflow_Load_Name( l.workflow_name, l.workflow ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00105', 'Workflow not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Workflow_Name', l.workflow_name ) }">
		<MvIF EXPR = "{ NOT OWFWorkflow_Load_Name( l.workflow_name, l.workflow ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00023', 'Workflow not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00024', 'Unable to load workflow: One of Workflow_ID, Edit_Workflow, or Workflow_Name must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflowTriggerList_Load_Workflow" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Load( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH INDEX = "l.workflowtrigger_pos" ITERATOR = "l.workflowtrigger" ARRAY = "l.workflowtriggers" COUNT = "{ OWFWorkflowTriggerList_Load_Workflow( l.workflow:id, l.workflowtriggers ) }">
			<MvIF EXPR = "{ l.workflowtrigger_pos GT 1 }">, </MvIF>

			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.workflowtrigger:trig_code ) }">"
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflowConditionList_Load_Workflow" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Load( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH INDEX = "l.condition_pos" ITERATOR = "l.condition" ARRAY = "l.workflow:cond">
			<MvIF EXPR = "{ l.condition_pos GT 1 }">, </MvIF>

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Output( l.condition ) }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflowActionList_Load_Workflow" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Load( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
		<MvEVAL EXPR = "{ JSON_OWFWorkflowActionList_Output_Workflow( l.workflow ) }">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflowActionList_Output_Workflow" PARAMETERS = "workflow var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.action_count" VALUE = 0>

	[
	<MvFOREACH ITERATOR = "l.action" ARRAY = "l.actions" COUNT = "{ OWFWorkflowActionList_Load_Workflow( l.workflow:id, l.actions ) }">
		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.action_count ) }">
			"act": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act ) }">",

			<MvIF EXPR = "{ l.action:act EQ 'webhook_get' OR l.action:act EQ 'webhook_post_order' }">
				"act_data":
				{
					"url":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:url ) }">",
					"cred_id":	<MvEVAL EXPR = "{ int( l.action:act_data:cred_id ) }">
				}
			<MvELSEIF EXPR = "{ l.action:act EQ 'payment' }">
				"act_data":
				{
					"capture_enabled":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:capture_enabled ) }">,
					"capture_includes":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:capture_includes ) }">",
					"capture_nontax_charges":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:capture_nontax_charges ) }">",
					"capture_dollars_within":	<MvEVAL EXPR = "{ l.action:act_data:capture_dollars_within ROUND 2 }">,
					"refund_enabled":			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:refund_enabled ) }">,
					"refund_includes":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:refund_includes ) }">",
					"refund_shipping_charges":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:refund_shipping_charges ) }">,
					"refund_handling_charges":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:refund_handling_charges ) }">,
					"refund_payment_charges":	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:refund_payment_charges ) }">,
					"refund_tax_charges":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:refund_tax_charges ) }">,
					"refund_other_charges":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:refund_other_charges ) }">,
					"prorate_discounts":		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:prorate_discounts ) }">,
					"add_notes":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:add_notes ) }">
				}
			<MvELSEIF EXPR = "{ l.action:act EQ 'void' }">
				"act_data":
				{
					"add_notes": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:add_notes ) }">
				}
			<MvELSEIF EXPR = "{ l.action:act NE 'customfield_set' }">
				"act_data": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data ) }">"
			<MvELSE>
				"act_data":
				{
					"module_code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:module_code ) }">",
					"field":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:field ) }">",

					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.action:act_data:module_code, l.customfield_module ) }">
						"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:value ) }">"
					<MvELSEIF EXPR = "{ NOT l.customfield_module:active }">
						"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:value ) }">"
					<MvELSEIF EXPR = "{ NOT l.customfield_module:feature_hash:fields_ordr }">
						"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:value ) }">"
					<MvELSEIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.customfield_module:id ) }">
						"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:value ) }">"
					<MvELSE>
						<MvASSIGN NAME = "l.modulefield_count"	VALUE = "{ [ g.Module_Root $ l.customfield_module:module ].Module_Order_Fields( l.customfield_module, l.module_fields ) }">
						<MvASSIGN NAME = "l.customfield_found"	VALUE = "{ miva_array_search( l.module_fields, 1, l.search_field, 'l.search_field:code EQ l.action:act_data:field' ) }">

						<MvIF EXPR = "{ l.customfield_found EQ 0 OR ISNULL l.search_field:type }">
							"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:value ) }">"
						<MvELSE>
							<MvASSIGN NAME = "l.type"			VALUE = "{ gettoken( l.search_field:type, ':', 1 ) }">
							<MvASSIGN NAME = "l.float_value"	VALUE = "{ int( gettoken( l.search_field:type, ':', 2 ) ) }">

							<MvIF EXPR = "{ l.type EQ 'checkbox' }">		"value": <MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.action:act_data:value ) }">
							<MvELSEIF EXPR = "{ l.type EQ 'numeric' }">		"value": <MvEVAL EXPR = "{ l.action:act_data:value ROUND l.float_value }">
							<MvELSEIF EXPR = "{ l.type EQ 'currency' }">	"value": <MvEVAL EXPR = "{ l.action:act_data:value ROUND 2 }">
							<MvELSEIF EXPR = "{ l.type EQ 'date' }">		"value": <MvEVAL EXPR = "{ int( l.action:act_data:value ) }">
							<MvELSEIF EXPR = "{ l.type EQ 'datetime' }">	"value": <MvEVAL EXPR = "{ int( l.action:act_data:value ) }">
							<MvELSEIF EXPR = "{ l.type EQ 'multitext' }">
								"value":
								[
									<MvFOREACH INDEX = "l.value_pos" ITERATOR = "l.value" ARRAY = "l.action:act_data:value">
										<MvIF EXPR = "{ l.value_pos GT 1 }">
											,
										</MvIF>

										"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.value ) }">"
									</MvFOREACH>
								]
							<MvELSE>
								<MvCOMMENT>
								|
								| 'text', 'code', 'name', 'choice', 'textarea', 'imageupload', or 'customupload'
								|
								</MvCOMMENT>

								"value": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.action:act_data:value ) }">"
							</MvIF>
						</MvIF>
					</MvIF>
				}
			</MvIF>
		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
	</MvFOREACH>
	]
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflowList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>
	<MvASSIGN NAME = "l.query"				VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'id',			'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters, 'enabled',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'name',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_BOOL(		l.available_filters, 'wait_for',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'wait_int',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'wait_max',	'' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'OWFWorkflows', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter_Callback( l.query, l.filter, l.available_filters, g.Module_Root $ l.module:module, 'JSON_OWFWorkflowList_Load_Query_Filter', '', l.ondemandcolumns ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields( l.query, l.sort, 'id,enabled,name,wait:wait_for;wait_int;wait_max', 'id' ) }">

	<MvASSIGN NAME = "l.sql"				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'OWFWorkflows', l.sql, l.fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-UTIL-ORWF-00025', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.workflow_count"		VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT OWFWorkflows.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.workflow_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ OWFWorkflow_Read( l.workflow ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.workflow_count ) }">
				<MvEVAL EXPR = "{ JSON_OWFWorkflow( l.workflow, l.ondemandcolumns ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "OWFWorkflows" ROWS = 1>
		</MvWHILE>
		],
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflows">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflowList_Load_Query_Filter" PARAMETERS = "query var, field_count var, filter_name, filter_value, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.filter_name EQ 'ondemandcolumns' }">
		<MvFOREACH ITERATOR = "l.column_code" ARRAY = "l.filter_value">
			<MvIF EXPR = "{ ISNULL l.column_code }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.data" MEMBER = "{ l.column_code }" VALUE = 1>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflowList_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">
	
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'Workflow_IDs', l.flow_ids, l.flow_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.flow_id" ARRAY = "l.flow_ids" COUNT = "{ l.flow_id_count }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT OWFWorkflow_Load_ID( l.flow_id, l.workflow ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT OWFWorkflow_Delete( l.workflow ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.flow_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00026', 'Workflow \'' $ l.workflow:name $ '\' deleted' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflow_Validate_Condition" PARAMETERS = "input_conditions var, input_condition_count var, output var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.input_condition" ARRAY = "l.input_conditions" COUNT = "{ l.input_condition_count }">
		<MvASSIGN NAME = "l.condition" VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_condition, 'R', 'operator', l.condition:operator ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Library_Utilities ].Value_In_List( l.condition:operator, 'AND, OR' ) }">
			<MvCOMMENT>
			|
			| Group
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.input_child_condition_count" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_condition, 'value', l.input_child_conditions ) }">

			<MvIF EXPR = "{ l.input_child_condition_count EQ 0 }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_condition, 'value', 'Group must contain at least one child' ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
			</MvIF>

			<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Validate_Condition( l.input_child_conditions, l.input_child_condition_count, l.condition:value ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.output_count" VALUE = "{ miva_array_insert_var( l.output, l.condition, -1 ) }">
		<MvELSEIF EXPR = "{ [ g.Module_Library_Utilities ].Value_In_List( l.condition:operator, 'ALL, ANY, FIRST, LAST' ) OR
							[ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.input_condition:operator ) }">
			<MvCOMMENT>
			|
			| List Condition
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_condition, 'R', 'field', l.condition:field ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
			</MvIF>

			<MvASSIGN NAME = "l.input_child_condition_count" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Array( l.input_condition, 'value', l.input_child_conditions ) }">

			<MvIF EXPR = "{ l.input_child_condition_count EQ 0 }">
				<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_condition, 'value', 'List Condition must contain at least one child' ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
			</MvIF>

			<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Validate_Condition( l.input_child_conditions, l.input_child_condition_count, l.condition:value ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.output_count" VALUE = "{ miva_array_insert_var( l.output, l.condition, -1 ) }">
		<MvELSEIF EXPR = "{ [ g.Module_Library_Utilities ].Value_In_List( l.condition:operator, 'EQ, GT, GE, LT, LE, CO, NC, LIKE, NOTLIKE, NE, IN, NOT_IN, NULL, NOTNULL, TRUE, FALSE' ) }">
			<MvCOMMENT>
			|
			| Condition
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_condition, 'R', 'field', l.condition:field ) OR
							NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_condition, 'o', 'value', l.condition:value ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
			</MvIF>

			<MvASSIGN NAME = "l.output_count" VALUE = "{ miva_array_insert_var( l.output, l.condition, -1 ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_condition, 'operator', 'Invalid operator' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflow_Validate_Triggers" PARAMETERS = "triggers var, trigger_count var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_List_Array( 'R', 'Workflow_Triggers', l.unfiltered_triggers, l.unfiltered_trigger_count, 'order_retrieved, order_acknowledged, order_created, order_status_change, order_total_change, ordershipment_created, ordershipment_deleted, ordershipment_status_change, orderitem_created, orderitem_updated, orderitem_status_change, orderitem_deleted, orderreturn_created, orderreturn_deleted, orderreturn_status_change',
																																			  'order_retrieved, order_acknowledged, order_created, order_status_change, order_total_change, ordershipment_created, ordershipment_deleted, ordershipment_status_change, orderitem_created, orderitem_updated, orderitem_status_change, orderitem_deleted, orderreturn_created, orderreturn_deleted, orderreturn_status_change' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.unfiltered_trigger_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_Triggers', 'Please specify at least one trigger' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.trigger_count" VALUE = "{ miva_array_filter_ref( l.unfiltered_triggers, 1, l.unfiltered_trigger, 'NOT miva_array_search( l.triggers, 1, l.trigger, \'l.trigger EQ l.unfiltered_trigger\' )', l.triggers ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflow_Validate_Actions" PARAMETERS = "actions var, action_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.actions"		VALUE = "">
	<MvASSIGN NAME = "l.action_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.input_action" ARRAY = "l.input_actions" COUNT = "{ [ g.Module_JSON ].JSON_Input_Array( 'Workflow_Actions', l.input_actions ) }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_List( l.input_action, 'R', 'act', l.action:act, 'queue_add, queue_move, queue_remove, queue_remove_all, note_add, customfield_set, webhook_get, webhook_post_order, payment, void',
																												 'queue_add, queue_move, queue_remove, queue_remove_all, note_add, customfield_set, webhook_get, webhook_post_order, payment, void' ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ l.action:act EQ 'queue_remove_all' }">
			<MvCOMMENT>
			|
			| act_data (Empty)
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.action:act_data" VALUE = "">
		<MvELSEIF EXPR = "{ l.action:act EQ 'queue_add'		OR
							l.action:act EQ 'queue_move'	OR
							l.action:act EQ 'queue_remove'	OR
							l.action:act EQ 'note_add' }">
			<MvCOMMENT>
			|
			| act_data (Non-Structure)
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.action:act EQ 'note_add' }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_action, 'R', 'act_data',	l.action:act_data ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.action:act EQ 'queue_add' OR l.action:act EQ 'queue_move' OR l.action:act EQ 'queue_remove' }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Code( l.input_action, 'R', 'act_data', l.queue_code ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>

				<MvIF EXPR = "{ NOT OWFQueue_Load_Code( l.queue_code, l.queue ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_action, 'act_data', 'Queue with code \'' $ l.queue_code $ '\' not found' ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>

				<MvASSIGN NAME = "l.action:act_data" VALUE = "{ l.queue:code }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.action:act EQ 'webhook_get'			OR
							l.action:act EQ 'webhook_post_order'	OR
							l.action:act EQ 'payment'				OR
							l.action:act EQ 'void'					OR
							l.action:act EQ 'customfield_set' }">
			<MvCOMMENT>
			|
			| act_data (Structure)
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Structure( l.input_action, 'R', 'act_data', l.input_action_data ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
			</MvIF>

			<MvIF EXPR = "{ l.action:act EQ 'webhook_get' OR l.action:act EQ 'webhook_post_order' }">
				<MvASSIGN NAME = "l.action:act_data:cred_id" VALUE = 0>

				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text(		l.input_action_data, 'R', 'url',		l.action:act_data:url ) OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Integer(	l.input_action_data, 'O', 'cred_id',	l.action:act_data:cred_id ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>

				<MvIF EXPR = "{ l.action:act_data:cred_id }">
					<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Load_ID_Cached( l.action:act_data:cred_id, l.null ) }">
						<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_action_data, 'cred_id', 'Unable to load credentials' ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
					</MvIF>
				</MvIF>
			<MvELSEIF EXPR = "{ l.action:act EQ 'payment' }">
				<MvASSIGN NAME = "l.action:act_data:capture_enabled"			VALUE = 0>
				<MvASSIGN NAME = "l.action:act_data:capture_nontax_charges"		VALUE = "first">
				<MvASSIGN NAME = "l.action:act_data:capture_dollars_within"		VALUE = 0.00>
				<MvASSIGN NAME = "l.action:act_data:refund_enabled"				VALUE = 0>
				<MvASSIGN NAME = "l.action:act_data:refund_shipping_charges"	VALUE = 0>
				<MvASSIGN NAME = "l.action:act_data:refund_handling_charges"	VALUE = 0>
				<MvASSIGN NAME = "l.action:act_data:refund_payment_charges"		VALUE = 0>
				<MvASSIGN NAME = "l.action:act_data:refund_tax_charges"			VALUE = 0>
				<MvASSIGN NAME = "l.action:act_data:refund_other_charges"		VALUE = 0>
				<MvASSIGN NAME = "l.action:act_data:prorate_discounts"			VALUE = 0>
				<MvASSIGN NAME = "l.action:act_data:add_notes"					VALUE = 0>

				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_List(		l.input_action_data, 'R', 'capture_includes',			l.action:act_data:capture_includes,	'all, created_shipments, shipped_shipments',	'all, created_shipments, shipped_shipments' )	OR
								NOT [ g.Module_JSON ].JSON_Input_Element_List(		l.input_action_data, 'R', 'refund_includes',			l.action:act_data:refund_includes,	'created_returns, received_returns',			'created_returns, received_returns' )			OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_action_data, 'O', 'capture_enabled',			l.action:act_data:capture_enabled )																									OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_action_data, 'O', 'refund_enabled',				l.action:act_data:refund_enabled )																									OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_action_data, 'O', 'refund_shipping_charges',	l.action:act_data:refund_shipping_charges )																							OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_action_data, 'O', 'refund_handling_charges',	l.action:act_data:refund_handling_charges )																							OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_action_data, 'O', 'refund_payment_charges',		l.action:act_data:refund_payment_charges )																							OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_action_data, 'O', 'refund_tax_charges',			l.action:act_data:refund_tax_charges )																								OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_action_data, 'O', 'refund_other_charges',		l.action:act_data:refund_other_charges )																							OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_action_data, 'O', 'prorate_discounts',			l.action:act_data:prorate_discounts )																								OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Boolean(	l.input_action_data, 'O', 'add_notes',					l.action:act_data:add_notes ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>

				<MvIF EXPR = "{ l.action:act_data:capture_includes NE 'all' }">
					<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_List(		l.input_action_data, 'R',			'capture_nontax_charges',	l.action:act_data:capture_nontax_charges, 'first, last', 'first, last' ) OR
									NOT [ g.Module_JSON ].JSON_Input_Element_Currency(	l.input_action_data, 'R:nonneg',	'capture_dollars_within',	l.action:act_data:capture_dollars_within ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
					</MvIF>
				</MvIF>
			<MvELSEIF EXPR = "{ l.action:act EQ 'void' }">
				<MvASSIGN NAME = "l.action:act_data:add_notes" VALUE = 0>

				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Boolean( l.input_action_data, 'O', 'add_notes', l.action:act_data:add_notes ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.action:act EQ 'customfield_set' }">
				<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_action_data, 'R', 'module_code',	l.customfield_module_code )	OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_action_data, 'R', 'field',		l.customfield_field )		OR
								NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_action_data, 'o', 'value',		l.customfield_value ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.customfield_module_code, l.customfield_module ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
					</MvIF>

					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_action_data, 'module_code', 'Module \'' $ l.customfield_module_code $ '\' not found' ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>

				<MvIF EXPR = "{ NOT l.customfield_module:active }">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_action_data, 'module_code', 'Module \'' $ l.customfield_module:code $ '\' is deactivated' ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>

				<MvIF EXPR = "{ NOT l.customfield_module:feature_hash:fields_ordr }">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_action_data, 'module_code', 'Module \'' $ l.customfield_module:code $ '\' does not provide feature \'fields_ordr\'' ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.customfield_module:id ) }">
					<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_JSON ].JSON_Input_Element_Error( l.input_action_data, 'module_code', 'Module \'' $ l.customfield_module:code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
				</MvIF>

				<MvASSIGN NAME = "l.action:act_data:module_code"	VALUE = "{ l.customfield_module:code }">
				<MvASSIGN NAME = "l.action:act_data:field"			VALUE = "{ l.customfield_field }">
				<MvASSIGN NAME = "l.action:act_data:value"			VALUE = "{ l.customfield_value }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.action_count" VALUE = "{ miva_array_insert_var( l.actions, l.action, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.action_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_Actions', 'Please specify at least one action' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflow_Insert" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.workflow:enabled"	VALUE = 1>
	<MvASSIGN NAME = "l.workflow:wait_for"	VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Workflow_Enabled',			l.workflow:enabled )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Workflow_WaitUntilTrue',	l.workflow:wait_for )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'R:254',	'Workflow_Name',			l.workflow:name ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ OWFWorkflow_Load_Name( l.workflow:name, l.existing_workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_Name', 'A workflow with the name \'' $ l.existing_workflow:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Exists( 'Workflow_Triggers' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_Triggers', 'Missing required parameter' ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.workflow:triggers"		VALUE = "">
		<MvASSIGN NAME = "l.workflow:trigger_count"	VALUE = "">

		<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Validate_Triggers( l.workflow:triggers, l.workflow:trigger_count ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Workflow_Conditions' ) }">
		<MvASSIGN NAME = "l.workflow:cond"			VALUE = "">
		<MvASSIGN NAME = "l.input_condition_count"	VALUE = "{ [ g.Module_JSON ].JSON_Input_Array( 'Workflow_Conditions', l.input_conditions ) }">

		<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Validate_Condition( l.input_conditions, l.input_condition_count, l.workflow:cond ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Exists( 'Workflow_Actions' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_Actions', 'Missing required parameter' ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.workflow:actions"		VALUE = "">
		<MvASSIGN NAME = "l.workflow:action_count"	VALUE = "">

		<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Validate_Actions( l.workflow:actions, l.workflow:action_count ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.workflow:wait_for }">
		<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'Workflow_WaitUntilTrue_Interval',	l.workflow:wait_int ) OR
						NOT [ g.Module_JSON ].JSON_Input_Integer( 'R', 'Workflow_WaitUntilTrue_Maximum',	l.workflow:wait_max ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.workflow:wait_int ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_WaitUntilTrue_Interval', 'Invalid value of WaitUntilTrue \'interval\': ' $ g.Validation_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.workflow:wait_max ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_WaitUntilTrue_Maximum', 'Invalid value of WaitUntilTrue \'maximum\': ' $ g.Validation_Message ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.workflow:wait_int" VALUE = 0>
		<MvASSIGN NAME = "l.workflow:wait_max" VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT OWFWorkflow_Insert( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.trigger" ARRAY = "l.workflow:triggers" COUNT = "{ l.workflow:trigger_count }">
		<MvIF EXPR = "{ NOT OWFWorkflowTrigger_Insert( l.workflow:id, l.trigger ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.action" ARRAY = "l.workflow:actions" COUNT = "{ l.workflow:action_count }">
		<MvASSIGN NAME = "l.action:flow_id" VALUE = "{ l.workflow:id }">

		<MvIF EXPR = "{ NOT OWFWorkflowAction_Insert( l.action ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ ( l.action:act EQ 'webhook_get' OR l.action:act EQ 'webhook_post_order' ) AND l.action:act_data:cred_id }">
			<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Increment_ReferenceCount( l.action:act_data:cred_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00027', 'Module: \'' $ l.module:code $ '\': Order Workflow \'' $ l.workflow:name $ '\' inserted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflow_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Load( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Workflow_Enabled',					l.workflow:enabled )	OR
					NOT [ g.Module_JSON ].JSON_Input_Boolean(	'O',		'Workflow_WaitUntilTrue',			l.workflow:wait_for )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'O',		'Workflow_WaitUntilTrue_Interval',	l.workflow:wait_int )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'O',		'Workflow_WaitUntilTrue_Maximum',	l.workflow:wait_max )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'O:254',	'Workflow_Name',					l.workflow:name ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ OWFWorkflow_Load_Name( l.workflow:name, l.existing_workflow ) AND
					l.workflow:id NE l.existing_workflow:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_Name', 'A workflow with the name \'' $ l.existing_workflow:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Workflow_Triggers' ) }">
		<MvASSIGN NAME = "l.workflow:triggers"		VALUE = "">
		<MvASSIGN NAME = "l.workflow:trigger_count"	VALUE = "">

		<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Validate_Triggers( l.workflow:triggers, l.workflow:trigger_count ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Workflow_Conditions' ) }">
		<MvASSIGN NAME = "l.workflow:cond"			VALUE = "">
		<MvASSIGN NAME = "l.input_condition_count"	VALUE = "{ [ g.Module_JSON ].JSON_Input_Array( 'Workflow_Conditions', l.input_conditions ) }">

		<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Validate_Condition( l.input_conditions, l.input_condition_count, l.workflow:cond ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Workflow_Actions' ) }">
		<MvASSIGN NAME = "l.workflow:actions"		VALUE = "">
		<MvASSIGN NAME = "l.workflow:action_count"	VALUE = "">

		<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Validate_Actions( l.workflow:actions, l.workflow:action_count ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.workflow:wait_for }">
		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.workflow:wait_int ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_WaitUntilTrue_Interval', 'Invalid value of WaitUntilTrue \'interval\': ' $ g.Validation_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.workflow:wait_max ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Workflow_WaitUntilTrue_Maximum', 'Invalid value of WaitUntilTrue \'maximum\': ' $ g.Validation_Message ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.workflow:wait_int" VALUE = 0>
		<MvASSIGN NAME = "l.workflow:wait_max" VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT OWFWorkflow_Update( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Workflow_Triggers' ) }">
		<MvIF EXPR = "{ NOT OWFWorkflowTrigger_Delete_All_Workflow( l.workflow:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFOREACH ITERATOR = "l.trigger" ARRAY = "l.workflow:triggers" COUNT = "{ l.workflow:trigger_count }">
			<MvIF EXPR = "{ NOT OWFWorkflowTrigger_Insert( l.workflow:id, l.trigger ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Exists( 'Workflow_Actions' ) }">
		<MvFOREACH ITERATOR = "l.action" ARRAY = "l.original_actions" COUNT = "{ OWFWorkflowActionList_Load_Workflow( l.workflow:id, l.original_actions ) }">
			<MvIF EXPR = "{ NOT OWFWorkflowAction_Delete_ID( l.action:id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ ( l.action:act EQ 'webhook_get' OR l.action:act EQ 'webhook_post_order' ) AND l.action:act_data:cred_id }">
				<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Decrement_ReferenceCount( l.action:act_data:cred_id ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.action" ARRAY = "l.workflow:actions" COUNT = "{ l.workflow:action_count }">
			<MvASSIGN NAME = "l.action:flow_id" VALUE = "{ l.workflow:id }">

			<MvIF EXPR = "{ NOT OWFWorkflowAction_Insert( l.action ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.action:act EQ 'webhook_get' OR l.action:act EQ 'webhook_post_order' ) AND l.action:act_data:cred_id }">
				<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Increment_ReferenceCount( l.action:act_data:cred_id ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00028', 'Module: \'' $ l.module:code $ '\': Order Workflow \'' $ l.workflow:name $ '\' updated' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflow_Update_Enabled" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Load( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Boolean( 'R', 'Workflow_Enabled', l.workflow:enabled ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFWorkflow_Update( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFWorkflow_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFWorkflow_Load( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFWorkflow_Delete( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFQueue" PARAMETERS = "queue var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":	<MvEVAL EXPR = "{ int( l.queue:id ) }">,
	"code":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.queue:code ) }">",
	"name":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.queue:name ) }">"
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFQueue_Load" PARAMETERS = "queue var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'Queue_ID', l.queue_id ) }">
		<MvIF EXPR = "{ NOT OWFQueue_Load_ID( l.queue_id, l.queue ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00029', 'Queue not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_Queue', l.queue_code ) }">
		<MvIF EXPR = "{ NOT OWFQueue_Load_Code( l.queue_code, l.queue ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00106', 'Queue not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Queue_Code', l.queue_code ) }">
		<MvIF EXPR = "{ NOT OWFQueue_Load_Code( l.queue_code, l.queue ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00030', 'Queue not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00031', 'Unable to load queue: One of Queue_ID, Edit_Queue, or Queue_Code must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFQueueList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'code',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'name',	'' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'OWFQueues', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields( l.query, l.sort, 'id,code,name', 'id' ) }">

	<MvASSIGN NAME = "l.sql"			VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'OWFQueues', l.sql, l.fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-UTIL-ORWF-00032', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.queue_count"	VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT OWFQueues.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.queue_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ OWFQueue_Read( l.queue ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.queue_count ) }">
				<MvEVAL EXPR = "{ JSON_OWFQueue( l.queue ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "OWFQueues" ROWS = 1>
		</MvWHILE>
		],
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueues">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFQueueList_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.processed" 		VALUE = 0>
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.start_time" 	VALUE = "{ s.dyn_time_t }">
	
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer_Array( 'R', 'Queue_IDs', l.queue_ids, l.queue_id_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.queue_id" ARRAY = "l.queue_ids" COUNT = "{ l.queue_id_count }">
		<MvASSIGN NAME = "l.processed" 	VALUE = "{ l.processed + 1 }">

		<MvIF EXPR = "{ NOT OWFQueue_Load_ID( l.queue_id, l.queue ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT OWFQueue_Delete( l.queue ) }">
				<MvASSIGN NAME = "l.error_count" VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Error( l.queue_id, g.Error_Code, g.Error_Message, l.errors ) }">
			<MvELSE>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00033', 'Queue \'' $ l.queue:code $ '\' deleted' ) }">
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t - l.start_time ) GE 60 }">								<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( s.dyn_time_remaining GE 0 ) AND ( s.dyn_time_remaining LE 3 ) }">	<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.error_count }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Errors( l.processed, l.errors ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_ListProcessed_Success( l.processed ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFQueue_Insert" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code( 'R',		'Queue_Code', l.queue:code ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'R:254',	'Queue_Name', l.queue:name ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ OWFQueue_Load_Code( l.queue:code, l.existing_queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Queue_Code', 'A queue with the code \'' $ l.existing_queue:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFQueue_Insert( l.queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFQueue_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFQueue_Load( l.queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Code( 'O',		'Queue_Code', l.queue:code ) OR
					NOT [ g.Module_JSON ].JSON_Input_Text( 'O:254',	'Queue_Name', l.queue:name ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ OWFQueue_Load_Code( l.queue:code, l.existing_queue ) AND
					l.existing_queue:id NE l.queue:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'Queue_Code', 'A queue with the code \'' $ l.existing_queue:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFQueue_Update( l.queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFQueue_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFQueue_Load( l.queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFQueue_Delete( l.queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFAuthenticationCredentials" PARAMETERS = "credentials var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":			<MvEVAL EXPR = "{ int( l.credentials:id ) }">,
	"descrip":		"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.credentials:descrip ) }">",
	"auth_type":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.credentials:auth_type ) }">",
	"auth_data":
	{
		<MvIF EXPR = "{ l.credentials:auth_type EQ 'basic' }">
			<MvASSIGN NAME = "l.decrypted_username" VALUE = "{ [ g.Module_Library_Crypto ].Decrypt_Payment_Password( l.credentials:auth_data:username ) }">

			"username": "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.decrypted_username ) }">"
		</MvIF>
	},
	"refcount":		<MvEVAL EXPR = "{ int( l.credentials:refcount ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFAuthenticationCredentials_Load" PARAMETERS = "credentials var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve_Integer( 'AuthenticationCredentials_ID', l.id ) }">
		<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Load_ID( l.id, l.credentials ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00122', 'Credentials not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'Edit_AuthenticationCredentials', l.descrip ) }">
		<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Load_Description( l.descrip, l.credentials ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00137', 'Credentials not found' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Retrieve( 'AuthenticationCredentials_Description', l.descrip ) }">
		<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Load_Description( l.descrip, l.credentials ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00138', 'Credentials not found' ) }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00123', 'Unable to load credentials: One of AuthenticationCredentials_ID, Edit_AuthenticationCredentials or AuthenticationCredentials_Description must be specified' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFAuthenticationCredentialsList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 1, 0, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.available_filters"	VALUE = "">
	<MvASSIGN NAME = "l.filter"				VALUE = "">
	<MvASSIGN NAME = "l.sort"				VALUE = "">
	<MvASSIGN NAME = "l.offset"				VALUE = 0>
	<MvASSIGN NAME = "l.count"				VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'id',			'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'descrip',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_CHAR(		l.available_filters, 'auth_type',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_AvailableFilter_INTEGER(	l.available_filters, 'refcount',	'' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',	l.filter )	OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',	l.sort )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Offset',	l.offset )	OR
					NOT [ g.Module_JSON ].JSON_Input_Integer(	'o', 'Count',	l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'OWFAuthenticationCredentials', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.query, l.filter, l.available_filters ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_OrderBy( l.query, l.sort, 'id,descrip,auth_type,refcount', 'id' ) }">

	<MvASSIGN NAME = "l.sql"				VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'OWFAuthenticationCredentials', l.sql, l.fields, l.offset, l.count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-UTIL-ORWF-00124', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.output_count"		VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( l.offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT OWFAuthenticationCredentials.d.EOF ) AND ( ( l.count EQ 0 ) OR ( l.output_count LT l.count ) ) }">
			<MvEVAL EXPR = "{ OWFAuthenticationCredentials_Read( l.credentials ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_count ) }">
				<MvEVAL EXPR = "{ JSON_OWFAuthenticationCredentials( l.credentials ) }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "OWFAuthenticationCredentials" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFAuthenticationCredentials">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFAuthenticationCredentials_Insert" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 1, 0, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.credentials:refcount" VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R:254',	'AuthenticationCredentials_Description',	l.credentials:descrip ) OR
					NOT [ g.Module_JSON ].JSON_Input_List( 'R',		'AuthenticationCredentials_Type',			l.credentials:auth_type, 'basic', 'basic' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.credentials:auth_type EQ 'basic' }">
		<MvIF EXPR = "{ NOT JSON_OWFAuthenticationCredentials_InsertOrUpdate_BasicAuthentication_Required( l.credentials:auth_data ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ OWFAuthenticationCredentials_Load_Description( l.credentials:descrip, l.existing_credentials ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'AuthenticationCredentials_Description', 'Credentials with the description \'' $ l.existing_credentials:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Insert( l.credentials ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00184', 'Authentication Credentials \'' $ l.credentials:descrip $ '\' created' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_OWFAuthenticationCredentials( l.credentials ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFAuthenticationCredentials_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 0, 1, 0 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFAuthenticationCredentials_Load( l.credentials ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_credentials" VALUE = "{ l.credentials }">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'O:254',	'AuthenticationCredentials_Description',	l.credentials:descrip ) OR
					NOT [ g.Module_JSON ].JSON_Input_List( 'O',		'AuthenticationCredentials_Type',			l.credentials:auth_type, 'basic', 'basic' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvIF EXPR = "{ l.credentials:auth_type NE l.original_credentials:auth_type }">
		<MvASSIGN NAME = "l.credentials:auth_data" VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ l.credentials:auth_type EQ 'basic' }">
		<MvIF EXPR = "{ l.credentials:auth_type EQ l.original_credentials:auth_type }">	<MvIF EXPR = "{ NOT JSON_OWFAuthenticationCredentials_InsertOrUpdate_BasicAuthentication_Optional( l.credentials:auth_data ) }"> <MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }"> </MvIF>
		<MvELSE>																		<MvIF EXPR = "{ NOT JSON_OWFAuthenticationCredentials_InsertOrUpdate_BasicAuthentication_Required( l.credentials:auth_data ) }"> <MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }"> </MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ OWFAuthenticationCredentials_Load_Description( l.credentials:descrip, l.existing_credentials ) AND
					l.existing_credentials:id NE l.credentials:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'AuthenticationCredentials_Description', 'Credentials with the description \'' $ l.existing_credentials:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Update( l.credentials ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ strcmp( l.original_credentials:descrip, l.credentials:descrip ) NE 0 }">	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00185', 'Authentication Credentials \'' $ l.original_credentials:descrip $ '\' updated with new description \'' $ l.credentials:descrip $ '\'' ) }">
	<MvELSE>																					<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00186', 'Authentication Credentials \'' $ l.original_credentials:descrip $ '\' updated' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvEVAL EXPR = "{ JSON_OWFAuthenticationCredentials( l.credentials ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFAuthenticationCredentials_InsertOrUpdate_BasicAuthentication_Required" PARAMETERS = "auth_data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Structure( 'R', 'AuthenticationCredentials_Data', l.input_data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.password" VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_data, 'R', 'username', l.username ) OR
					NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_data, 'o', 'password', l.password ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.auth_data:username" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.username ) }">

	<MvIF EXPR = "{ NOT ISNULL l.password }">	<MvASSIGN NAME = "l.auth_data:password" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.password ) }">
	<MvELSE>									<MvASSIGN NAME = "l.auth_data:password" VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFAuthenticationCredentials_InsertOrUpdate_BasicAuthentication_Optional" PARAMETERS = "auth_data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Structure( 'o', 'AuthenticationCredentials_Data', l.input_data ) }">
		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_data, 'username' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_data, 'R', 'username', l.username ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.auth_data:username"		VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.username ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_JSON ].JSON_Input_Element_Exists( l.input_data, 'password' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Element_Text( l.input_data, 'r', 'password', l.password ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.password }">	<MvASSIGN NAME = "l.auth_data:password" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.password ) }">
			<MvELSE>									<MvASSIGN NAME = "l.auth_data:password" VALUE = "">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_OWFAuthenticationCredentials_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_Admin ].CanI( 'OWFP', 0, 0, 0, 1 ) }">	<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT JSON_OWFAuthenticationCredentials_Load( l.credentials ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvIF EXPR = "{ l.credentials:refcount }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-UTIL-ORWF-00125', 'Credentials are in use by one or more workflows and cannot be deleted' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Delete_ID( l.credentials:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00187', 'Authentication Credentials \'' $ l.credentials:descrip $ '\' deleted' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvCOMMENT>
|
| Module Provisioning Feature (provision_store)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Provision_Store" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag EQ 'authenticationcredentials_add' }">			<MvEVAL EXPR = "{ Module_Provision_Store_AuthenticationCredentials_Add( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'authenticationcredentials_update' }">		<MvEVAL EXPR = "{ Module_Provision_Store_AuthenticationCredentials_Update( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'authenticationcredentials_delete' }">		<MvEVAL EXPR = "{ Module_Provision_Store_AuthenticationCredentials_Delete( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'queue_add' }">							<MvEVAL EXPR = "{ Module_Provision_Store_Queue_Add( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'queue_delete' }">							<MvEVAL EXPR = "{ Module_Provision_Store_Queue_Delete( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'workflow_add' }">							<MvEVAL EXPR = "{ Module_Provision_Store_Workflow_Add( l.module, l.child_xml ) }">
		<MvELSEIF EXPR = "{ l.tag EQ 'workflow_delete' }">						<MvEVAL EXPR = "{ Module_Provision_Store_Workflow_Delete( l.module, l.child_xml ) }">
		<MvELSE>																<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_AuthenticationCredentials_Add" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.credentials:refcount" VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R:254',	l.provide_xml, 'Description',	l.credentials:descrip ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_List( 'R',		l.provide_xml, 'Type',			l.credentials:auth_type, 'Basic', 'basic' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.credentials:auth_type EQ 'basic' }">
		<MvIF EXPR = "{ NOT Module_Provision_Store_AuthenticationCredentials_AddOrUpdate_BasicAuthentication_Required( l.provide_xml, l.credentials:auth_data ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ OWFAuthenticationCredentials_Load_Description( l.credentials:descrip, l.existing_credentials ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Credentials with the description \'' $ l.existing_credentials:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Insert( l.credentials ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00188', 'Authentication Credentials \'' $ l.credentials:descrip $ '\' created' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_AuthenticationCredentials_Update" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'descrip', l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Load_Description( l.descrip, l.credentials ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Authentication Credentials with description \'' $ l.descrip $ '\' not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.original_credentials" VALUE = "{ l.credentials }">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'O:254',	l.provide_xml, 'Description',	l.credentials:descrip ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_List( 'O',		l.provide_xml, 'Type',			l.credentials:auth_type, 'Basic', 'basic' ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ l.credentials:auth_type NE l.original_credentials:auth_type }">
		<MvASSIGN NAME = "l.credentials:auth_data" VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ l.credentials:auth_type EQ 'basic' }">
		<MvIF EXPR = "{ l.credentials:auth_type EQ l.original_credentials:auth_type }">	<MvIF EXPR = "{ NOT Module_Provision_Store_AuthenticationCredentials_AddOrUpdate_BasicAuthentication_Optional( l.provide_xml, l.credentials:auth_data ) }"> <MvFUNCTIONRETURN> </MvIF>
		<MvELSE>																		<MvIF EXPR = "{ NOT Module_Provision_Store_AuthenticationCredentials_AddOrUpdate_BasicAuthentication_Required( l.provide_xml, l.credentials:auth_data ) }"> <MvFUNCTIONRETURN> </MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ OWFAuthenticationCredentials_Load_Description( l.credentials:descrip, l.existing_credentials ) AND
					l.existing_credentials:id NE l.credentials:id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Credentials with the description \'' $ l.existing_credentials:descrip $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Update( l.credentials ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvIF EXPR = "{ strcmp( l.original_credentials:descrip, l.credentials:descrip ) NE 0 }">	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00189', 'Authentication Credentials \'' $ l.original_credentials:descrip $ '\' updated with new description \'' $ l.credentials:descrip $ '\'' ) }">
	<MvELSE>																					<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00190', 'Authentication Credentials \'' $ l.original_credentials:descrip $ '\' updated' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_AuthenticationCredentials_AddOrUpdate_BasicAuthentication_Required" PARAMETERS = "provide_xml var, auth_data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'AuthenticationData' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Missing required tag: \'AuthenticationData\'' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.password" VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R', l.provide_xml:tags:AuthenticationData[ 1 ], 'Username', l.username ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'o', l.provide_xml:tags:AuthenticationData[ 1 ], 'Password', l.password ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.auth_data:username" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.username ) }">

	<MvIF EXPR = "{ NOT ISNULL l.password }">	<MvASSIGN NAME = "l.auth_data:password" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.password ) }">
	<MvELSE>									<MvASSIGN NAME = "l.auth_data:password" VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_AuthenticationCredentials_AddOrUpdate_BasicAuthentication_Optional" PARAMETERS = "provide_xml var, auth_data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'AuthenticationData' ) }">
		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml:tags:AuthenticationData[ 1 ], 'Username' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R', l.provide_xml:tags:AuthenticationData[ 1 ], 'Username', l.username ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.auth_data:username" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.username ) }">
		</MvIF>

		<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml:tags:AuthenticationData[ 1 ], 'Password' ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'r', l.provide_xml:tags:AuthenticationData[ 1 ], 'Password', l.password ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT ISNULL l.password }">	<MvASSIGN NAME = "l.auth_data:password" VALUE = "{ [ g.Module_Library_Crypto ].Encrypt_Payment_Password( l.password ) }">
			<MvELSE>									<MvASSIGN NAME = "l.auth_data:password" VALUE = "">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_AuthenticationCredentials_Delete" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'descrip', l.descrip ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Load_Description( l.descrip, l.credentials ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Authentication Credentials with description \'' $ l.descrip $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.credentials:refcount }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Credentials are in use by one or more workflows and cannot be deleted' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Delete_ID( l.credentials:id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00191', 'Authentication Credentials \'' $ l.credentials:descrip $ '\' deleted' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Queue_Add" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Code( 'R',		l.provide_xml, 'Code', l.queue:code ) OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text( 'R:254',	l.provide_xml, 'Name', l.queue:name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ OWFQueue_Load_Code( l.queue:code, l.existing_queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Queue with code \'' $ l.queue:code $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFQueue_Insert( l.queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Queue_Delete" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'code', l.code ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT OWFQueue_Load_Code( l.code, l.queue ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Queue with code \'' $ l.code $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFQueue_Delete( l.queue ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Workflow_Add" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Boolean(	'R', l.provide_xml, 'Enabled',	l.workflow:enabled )	OR
					NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Text(		'R', l.provide_xml, 'Name',		l.workflow:name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ OWFWorkflow_Load_Name( l.workflow:name, l.existing_workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Workflow with name \'' $ l.workflow:name $ '\' already exists' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'WaitUntilTrue' ) }">
		<MvASSIGN NAME = "l.workflow:wait_for"		VALUE = 0>
		<MvASSIGN NAME = "l.workflow:wait_int"		VALUE = 0>
		<MvASSIGN NAME = "l.workflow:wait_max"		VALUE = 0>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Boolean( 'R', l.provide_xml, 'WaitUntilTrue', l.workflow:wait_for ) }">
			<MvFUNCTIONRETURN>
		</MvIF>

		<MvIF EXPR = "{ NOT l.workflow:wait_for }">
			<MvASSIGN NAME = "l.workflow:wait_int"	VALUE = 0>
			<MvASSIGN NAME = "l.workflow:wait_max"	VALUE = 0>
		<MvELSE>
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml:tags:WaitUntilTrue[ 1 ], 'interval', l.workflow:wait_int ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml:tags:WaitUntilTrue[ 1 ], 'maximum', l.workflow:wait_max ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_NonNegative_Required( l.workflow:wait_int ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Invalid value of WaitUntilTrue \'interval\': ' $ g.Validation_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_WholeNumber_Positive_Required( l.workflow:wait_max ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Invalid value of WaitUntilTrue \'maximum\': ' $ g.Validation_Message ) }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Triggers' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Missing required tag: \'Triggers\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT Module_Provision_Store_Workflow_Add_Triggers( l.module, l.provide_xml:tags:Triggers[ 1 ], l.triggers, l.trigger_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Actions' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Missing required tag: \'Actions\'' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT Module_Provision_Store_Workflow_Add_Actions( l.module, l.provide_xml:tags:Actions[ 1 ], l.actions, l.action_count ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.provide_xml, 'Condition' ) }">
		<MvIF EXPR = "{ NOT Module_Provision_Store_Workflow_Add_Condition( l.module, l.provide_xml:tags:Condition[ 1 ], l.workflow:cond ) }">
			<MvFUNCTIONRETURN>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT OWFWorkflow_Insert( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.trigger" ARRAY = "l.triggers" COUNT = "{ l.trigger_count }">
		<MvIF EXPR = "{ NOT OWFWorkflowTrigger_Insert( l.workflow:id, l.trigger ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.action" ARRAY = "l.actions" COUNT = "{ l.action_count }">
		<MvASSIGN NAME = "l.action:flow_id" VALUE = "{ l.workflow:id }">

		<MvIF EXPR = "{ NOT OWFWorkflowAction_Insert( l.action ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvIF EXPR = "{ ( l.action:act EQ 'webhook_get' OR l.action:act EQ 'webhook_post_order' ) AND l.action:act_data:cred_id }">
			<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Increment_ReferenceCount( l.action:act_data:cred_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Workflow_Add_Condition" PARAMETERS = "module var, provide_xml var, condition var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag EQ 'conditiongroup' }">
			<MvREFERENCEARRAY NAME = "l.conditiongroup" VARIABLE = "l.condition">
				<MvDIMENSION INDEX = "{ miva_array_elements( l.condition ) + 1 }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.child_xml, 'operator',	l.conditiongroup:operator,
																				'AND, OR',
																				'AND, OR' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT Module_Provision_Store_Workflow_Add_Condition( l.module, l.child_xml, l.conditiongroup:value ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ miva_array_elements( l.conditiongroup:value ) EQ 0 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Group must contain at least one child' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.tag EQ 'conditionarraygroup' }">
			<MvREFERENCEARRAY NAME = "l.conditionarraygroup" VARIABLE = "l.condition">
				<MvDIMENSION INDEX = "{ miva_array_elements( l.condition ) + 1 }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'field',		l.conditionarraygroup:field ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'operator',	l.conditionarraygroup:operator ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ ISNULL l.conditionarraygroup:field }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Field cannot be empty' ) }">
			</MvIF>

			<MvIF EXPR = "{ ( ISNULL l.conditionarraygroup:operator ) OR ( NOT isdigit( l.conditionarraygroup:operator ) ) OR l.conditionarraygroup:operator LE 0 }">
				<MvASSIGN NAME = "l.conditionarraygroup:operator" VALUE = "{ toupper( l.conditionarraygroup:operator ) }">

				<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Value_In_List( l.conditionarraygroup:operator, 'ALL, ANY, FIRST, LAST' ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'operator must be one of: ALL, ANY, FIRST, LAST, [1-N]' ) }">
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT Module_Provision_Store_Workflow_Add_Condition( l.module, l.child_xml, l.conditionarraygroup:value ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ miva_array_elements( l.conditionarraygroup:value ) EQ 0 }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'List Condition must contain at least one child' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.tag EQ 'conditionexpression' }">
			<MvREFERENCEARRAY NAME = "l.conditionexpression" VARIABLE = "l.condition">
				<MvDIMENSION INDEX = "{ miva_array_elements( l.condition ) + 1 }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'field',		l.conditionexpression:field ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.child_xml, 'operator',	l.conditionexpression:operator,
																				'EQ, GT, GE, LT, LE, CO, NC, LIKE, NOTLIKE, NE, IN, NOT_IN, NULL, NOTNULL, TRUE, FALSE',
																				'EQ, GT, GE, LT, LE, CO, NC, LIKE, NOTLIKE, NE, IN, NOT_IN, NULL, NOTNULL, TRUE, FALSE' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ ISNULL l.conditionexpression:field }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Field cannot be empty' ) }">
			</MvIF>

			<MvIF EXPR = "{ ( l.conditionexpression:operator NE 'NULL' )	AND
							( l.conditionexpression:operator NE 'NOTNULL' )	AND
							( l.conditionexpression:operator NE 'TRUE' )	AND
							( l.conditionexpression:operator NE 'FALSE' ) }">
				<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'value' ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'value', l.conditionexpression:value ) }">
						<MvFUNCTIONRETURN>
					</MvIF>
				</MvIF>
			</MvIF>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Workflow_Add_Triggers" PARAMETERS = "module var, provide_xml var, triggers var, trigger_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.triggers"		VALUE = "">
	<MvASSIGN NAME = "l.trigger_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag"		VALUE = "{ tolower( l.child_xml:name ) }">

		<MvIF EXPR = "{ l.tag EQ 'trigger' }">
			<MvASSIGN NAME = "l.trigger" VALUE = "{ tolower( trim( l.child_xml:value ) ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.child_xml, 'event', l.trigger,
																							 'order_retrieved, order_acknowledged, order_created, order_status_change, order_total_change, ordershipment_created, ordershipment_deleted, ordershipment_status_change, orderitem_created, orderitem_updated, orderitem_status_change, orderitem_deleted, orderreturn_created, orderreturn_deleted, orderreturn_status_change',
																							 'order_retrieved, order_acknowledged, order_created, order_status_change, order_total_change, ordershipment_created, ordershipment_deleted, ordershipment_status_change, orderitem_created, orderitem_updated, orderitem_status_change, orderitem_deleted, orderreturn_created, orderreturn_deleted, orderreturn_status_change' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.trigger_count" VALUE = "{ miva_array_insert( l.triggers, l.trigger, -1 ) }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.trigger_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Please specify at least one trigger' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Workflow_Add_Actions" PARAMETERS = "module var, provide_xml var, actions var, action_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.actions"		VALUE = "">
	<MvASSIGN NAME = "l.action_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.child_xml" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag"		VALUE = "{ tolower( l.child_xml:name ) }">
		<MvASSIGN NAME = "l.value"		VALUE = "{ trim( l.child_xml:value ) }">
		<MvASSIGN NAME = "l.action"		VALUE = "">

		<MvIF EXPR = "{ l.tag EQ 'addtoqueue'	OR
						l.tag EQ 'movetoqueue'	OR
						l.tag EQ 'removefromqueue' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'queue', l.code ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ NOT OWFQueue_Load_Code( l.code, l.queue ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.child_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Queue with code \'' $ l.code $ '\' not found' ) }">
			</MvIF>

			<MvIF EXPR = "{ l.tag EQ 'addtoqueue' }">			<MvASSIGN NAME = "l.action:act" VALUE = "queue_add">
			<MvELSEIF EXPR = "{ l.tag EQ 'movetoqueue' }">		<MvASSIGN NAME = "l.action:act" VALUE = "queue_move">
			<MvELSEIF EXPR = "{ l.tag EQ 'removefromqueue' }">	<MvASSIGN NAME = "l.action:act" VALUE = "queue_remove">
			</MvIF>

			<MvASSIGN NAME = "l.action:act_data"	VALUE = "{ l.queue:code }">
		<MvELSEIF EXPR = "{ l.tag EQ 'removefromallqueues' }">
			<MvASSIGN NAME = "l.action:act"			VALUE = "queue_remove_all">
			<MvASSIGN NAME = "l.action:act_data"	VALUE = "">
		<MvELSEIF EXPR = "{ l.tag EQ 'note_add' }">
			<MvASSIGN NAME = "l.action:act"			VALUE = "note_add">
			<MvASSIGN NAME = "l.action:act_data"	VALUE = "{ trim( l.child_xml:value ) }">

			<MvIF EXPR = "{ ISNULL l.value }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'The value of Note_Add may not be blank' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.tag EQ 'customfield_set' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml,	'module',	l.customfield_module_code ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml,	'field',	l.customfield_field ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvASSIGN NAME = "l.customfield_value"	VALUE = "{ trim( l.child_xml:value ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.customfield_module_code, l.customfield_module ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.child_xml ) }">
				</MvIF>

				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Module \'' $ l.customfield_module_code $ '\' not found' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.customfield_module:active }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Module \'' $ l.customfield_module:code $ '\' is deactivated' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT l.customfield_module:feature_hash:fields_ordr }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Module \'' $ l.customfield_module:code $ '\' does not provide feature \'fields_ordr\'' ) }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.customfield_module:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Module \'' $ l.customfield_module:code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.action:act"						VALUE = "customfield_set">
			<MvASSIGN NAME = "l.action:act_data"				VALUE = "">
			<MvASSIGN NAME = "l.action:act_data:module_code"	VALUE = "{ l.customfield_module:code }">
			<MvASSIGN NAME = "l.action:act_data:field"			VALUE = "{ l.customfield_field }">
			<MvASSIGN NAME = "l.action:act_data:value"			VALUE = "{ l.customfield_value }">
		<MvELSEIF EXPR = "{ l.tag EQ 'webhook' }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List(	l.child_xml, 'method',	l.action:act, 'GET,POST', 'webhook_get,webhook_post_order' ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml, 'url',		l.action:act_data:url ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ ISNULL l.action:act_data:url }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Please specify a valid URL' ) }">
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Tag_Exists( l.child_xml, 'Credentials' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.child_xml:tags:Credentials[ 1 ], 'descrip', l.credentials_descip ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Load_Description( l.credentials_descip, l.credentials ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.child_xml ) }">
					</MvIF>

					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Authentication Credentials with description \'' $ l.credentials_descip $ '\' not found' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.action:act_data:cred_id" VALUE = "{ l.credentials:id }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.tag EQ 'payment' }">
			<MvASSIGN NAME = "l.action:act"									VALUE = "payment">
			<MvASSIGN NAME = "l.action:act_data:capture_enabled"			VALUE = 0>
			<MvASSIGN NAME = "l.action:act_data:capture_nontax_charges"		VALUE = "first">
			<MvASSIGN NAME = "l.action:act_data:capture_dollars_within"		VALUE = 0.00>
			<MvASSIGN NAME = "l.action:act_data:refund_enabled"				VALUE = 0>
			<MvASSIGN NAME = "l.action:act_data:refund_shipping_charges"	VALUE = 0>
			<MvASSIGN NAME = "l.action:act_data:refund_handling_charges"	VALUE = 0>
			<MvASSIGN NAME = "l.action:act_data:refund_payment_charges"		VALUE = 0>
			<MvASSIGN NAME = "l.action:act_data:refund_tax_charges"			VALUE = 0>
			<MvASSIGN NAME = "l.action:act_data:refund_other_charges"		VALUE = 0>
			<MvASSIGN NAME = "l.action:act_data:add_notes"					VALUE = 0>
			<MvASSIGN NAME = "l.action:act_data:prorate_discounts"			VALUE = 0>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'capture_enabled' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'capture_enabled', l.action:act_data:capture_enabled ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'refund_enabled' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'refund_enabled', l.action:act_data:refund_enabled ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.child_xml, 'capture_includes', l.action:act_data:capture_includes, 'all,created_shipments,shipped_shipments', 'all,created_shipments,shipped_shipments' ) OR
							NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.child_xml, 'refund_includes', l.action:act_data:refund_includes, 'created_returns,received_returns', 'created_returns,received_returns' ) }">
				<MvFUNCTIONRETURN>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'refund_shipping_charges' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'refund_shipping_charges', l.action:act_data:refund_shipping_charges ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'refund_handling_charges' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'refund_handling_charges', l.action:act_data:refund_handling_charges ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'refund_payment_charges' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'refund_payment_charges', l.action:act_data:refund_payment_charges ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'refund_tax_charges' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'refund_tax_charges', l.action:act_data:refund_tax_charges ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'refund_other_charges' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'refund_other_charges', l.action:act_data:refund_other_charges ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'prorate_discounts' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'prorate_discounts', l.action:act_data:prorate_discounts ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'add_notes' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'add_notes', l.action:act_data:add_notes ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.action:act_data:capture_includes NE 'all' }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_List( l.child_xml, 'capture_nontax_charges', l.action:act_data:capture_nontax_charges, 'first,last', 'first,last' ) }">
					<MvFUNCTIONRETURN>
				</MvIF>

				<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'capture_dollars_within' ) }">
					<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Number( l.child_xml, 'capture_dollars_within', l.action:act_data:capture_dollars_within, 10, 2 ) }">
						<MvFUNCTIONRETURN>
					</MvIF>

					<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Currency_NonNegative_Required( l.action:act_data:capture_dollars_within ) }">
						<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, g.Validation_Message ) }">
					</MvIF>
				</MvIF>
			</MvIF>
		<MvELSEIF EXPR = "{ l.tag EQ 'void' }">
			<MvASSIGN NAME = "l.action:act"					VALUE = "void">
			<MvASSIGN NAME = "l.action:act_data:add_notes"	VALUE = 0>

			<MvIF EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_Attribute_Exists( l.child_xml, 'add_notes' ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Boolean( l.child_xml, 'add_notes', l.action:act_data:add_notes ) }">
					<MvFUNCTIONRETURN>
				</MvIF>
			</MvIF>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child_xml, 'Unknown tag' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.action_count" VALUE = "{ miva_array_insert( l.actions, l.action, -1 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ l.action_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Please specify at least one action' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Workflow_Delete" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PRV_AD ].PRV_Attribute_Text( l.provide_xml, 'name', l.name ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvIF EXPR = "{ NOT OWFWorkflow_Load_Name( l.name, l.workflow ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, 'Workflow with name \'' $ l.name $ '\' not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFWorkflow_Delete( l.workflow ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Order Custom Fields Feature (fields_ordr)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Order_Fields" PARAMETERS = "module var, fields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.field:code"			VALUE = "auditlog">
	<MvASSIGN NAME = "l.field:name"			VALUE = "Audit Log">
	<MvASSIGN NAME = "l.field:type"			VALUE = "textarea">
	<MvASSIGN NAME = "l.field:readonly"		VALUE = 1>

	<MvASSIGN NAME = "l.field_count"		VALUE = "{ miva_array_insert_var( l.fields, l.field, -1 ) }">

	<MvFOREACH ITERATOR = "l.queue" ARRAY = "l.queues" COUNT = "{ OWFQueueList_Load_All( l.queues ) }">
		<MvASSIGN NAME = "l.field:code"		VALUE = "{ l.queue:code }">
		<MvASSIGN NAME = "l.field:name"		VALUE = "{ l.queue:name }">
		<MvASSIGN NAME = "l.field:type"		VALUE = "checkbox">
		<MvASSIGN NAME = "l.field:readonly"	VALUE = 0>

		<MvASSIGN NAME = "l.field_count"	VALUE = "{ miva_array_insert_var( l.fields, l.field, -1 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.field_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Name" PARAMETERS = "module var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'auditlog' }">	<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Name_AuditLog( l.module, l.code ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Name_Queue( l.module, l.code ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Name_AuditLog" PARAMETERS = "module var, code" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "Audit Log">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Name_Queue" PARAMETERS = "module var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.Session:cache:orderworkflow:queues OR NOT miva_member_exists( g.Session:cache:orderworkflow:queues, l.code ) }">
		<MvFOREACH ITERATOR = "l.queue" ARRAY = "l.queues" COUNT = "{ OWFQueueList_Load_All( l.queues ) }">
			<MvREFERENCEARRAY NAME = "l.field" VARIABLE = "g.Session:cache:orderworkflow:queues">
				<MvMEMBER NAME = "{ l.queue:code }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.field:code" VALUE = "{ l.queue:code }">
			<MvASSIGN NAME = "l.field:name" VALUE = "{ l.queue:name }">
			<MvASSIGN NAME = "l.field:type" VALUE = "checkbox">
		</MvFOREACH>
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.field" VARIABLE = "g.Session:cache:orderworkflow:queues">
		<MvMEMBER NAME = "{ l.code }">
	</MvREFERENCEARRAY>

	<MvFUNCTIONRETURN VALUE = "{ l.field:name }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Value" PARAMETERS = "module var, order_id, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'auditlog' }">	<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Value_AuditLog( l.module, l.order_id, l.code ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Value_Queue( l.module, l.order_id, l.code ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Value_AuditLog" PARAMETERS = "module var, order_id, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFAuditLogUndecodedData_Load_Order_ID( l.order_id, l.unencoded_log_data ) }">
		<MvFUNCTIONRETURN VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.unencoded_log_data }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Value_Queue" PARAMETERS = "module var, order_id, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFQueue_Load_Code_Cached( l.code, l.queue ) }">				<MvFUNCTIONRETURN VALUE = "">
	<MvELSEIF EXPR = "{ NOT OWFQueueXOrder_Load( l.queue:id, l.order_id, l.null ) }">	<MvFUNCTIONRETURN VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Value_Array" PARAMETERS = "module var, order_id, code, values var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Set_Field" PARAMETERS = "module var, order_id, code, value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'auditlog' }">	<MvFUNCTIONRETURN VALUE = "{ Module_Order_Set_Field_AuditLog( l.module, l.order_id, l.code, l.value ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Module_Order_Set_Field_Queue( l.module, l.order_id, l.code, l.value ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Set_Field_AuditLog" PARAMETERS = "module var, order_id, code, value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Set_Field_Queue" PARAMETERS = "module var, order_id, code, value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFQueue_Load_Code( l.code, l.queue ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.value }">
		<MvIF EXPR = "{ NOT OWFQueueXOrder_Insert( l.queue:id, l.order_id ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00034', 'Order Workflow: Order ID \'' $ l.order_id $ '\', Queue ID \'' $ l.queue:id $ '\' created' ) }">
	<MvELSE>
		<MvIF EXPR = "{ NOT OWFQueueXOrder_Delete( l.queue:id, l.order_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00035', 'Order Workflow: Order ID \'' $ l.order_id $ '\', Queue ID \'' $ l.queue:id $ '\' deleted' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Set_Field_Array" PARAMETERS = "module var, order_id, code, values var, value_count" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00036', 'Custom field code \'' $ l.code $ '\' does not support arrays' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Capabilities" PARAMETERS = "module var, code, capabilities var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'auditlog' }">
		<MvASSIGN NAME = "l.capabilities:query"		VALUE = 1>
		<MvASSIGN NAME = "l.capabilities:search"	VALUE = 1>
		<MvASSIGN NAME = "l.capabilities:orderby"	VALUE = 0>
	<MvELSEIF EXPR = "{ NOT OWFQueue_Load_Code( l.code, l.null ) }">
		<MvASSIGN NAME = "l.capabilities:query"		VALUE = 0>
		<MvASSIGN NAME = "l.capabilities:search"	VALUE = 0>
		<MvASSIGN NAME = "l.capabilities:orderby"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.capabilities:query"		VALUE = 1>
		<MvASSIGN NAME = "l.capabilities:search"	VALUE = 1>
		<MvASSIGN NAME = "l.capabilities:orderby"	VALUE = 1>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query" PARAMETERS = "module var, query var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'auditlog' }">	<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_AuditLog( l.module, l.query, l.code ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_Queue( l.module, l.query, l.code ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_AuditLog" PARAMETERS = "module var, query var, code" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Data_Reference( l.query, 'orderworkflow_auditlog', l.ref ) }">

	<MvREFERENCE NAME = "l.queried" VARIABLE = "l.ref:data:queried">

	<MvIF EXPR = "{ l.queried }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.queried" VALUE = 1>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'owfal.log_data AS owfal_log_data' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'ord', g.Store_Table_Prefix $ 'OWFAuditLog', 'owfal', 'owfal.order_id = ord.id', '' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_Queue" PARAMETERS = "module var, query var, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFCustomFields_Generic_Data_Order( l.code, l.data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ OWFCustomFields_Generic_Query( l.data, l.query, l.code ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_Search" PARAMETERS = "module var, query var, code, operator, value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'auditlog' }">	<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_Search_AuditLog( l.module, l.query, l.code, l.operator, l.value ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_Search_Queue( l.module, l.query, l.code, l.operator, l.value ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_Search_AuditLog" PARAMETERS = "module var, query var, code, operator, value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Module_Order_Field_Query( l.module, l.query, l.code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Search_Operator_Conversion( l.query, 'owfal.log_data', l.operator, l.value, 'OR', 'OR' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_Search_Queue" PARAMETERS = "module var, query var, code, operator, value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFCustomFields_Generic_Data_Order( l.code, l.data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Data_Reference( l.query, 'orderworkflow', l.ref ) }">

	<MvIF EXPR = "{ NOT OWFCustomFields_Generic_Query( l.data, l.query, l.code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT miva_array_search( l.ref:data:orderworkflow_codes, 1, l.element, 'l.element:code EQ l.code' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.operator EQ 'TRUE' }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, l.element:alias $ '.order_id IS NOT NULL', '' ) }">
	<MvELSEIF EXPR = "{ l.operator EQ 'FALSE' }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, l.element:alias $ '.order_id IS NULL', '' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_OrderBy" PARAMETERS = "module var, query var, code, direction" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'auditlog' }">	<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_OrderBy_AuditLog( l.module, l.query, l.code, l.direction ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_OrderBy_Queue( l.module, l.query, l.code, l.direction ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_OrderBy_AuditLog" PARAMETERS = "module var, query var, code, direction" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_OrderBy_Queue" PARAMETERS = "module var, query var, code, direction" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFCustomFields_Generic_Data_Order( l.code, l.data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Data_Reference( l.query, 'orderworkflow', l.ref ) }">

	<MvIF EXPR = "{ NOT OWFCustomFields_Generic_Query( l.data, l.query, l.code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT miva_array_search( l.ref:data:orderworkflow_codes, 1, l.element, 'l.element:code EQ l.code' ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_ORDER_BY_Flag_With_Alias_And_Member( l.query,
																				 			 l.element:alias $ '.order_id',	
																							 l.element:alias $ '_value',
																			 				 l.element:alias $ ':value',
																			 				 l.direction,
																			 				 'null_integer' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_OrderBy_LoadIndexRecord" PARAMETERS = "module var, loaded_record var, order_id, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'auditlog' }">	<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_OrderBy_LoadIndexRecord_AuditLog( l.module, l.loaded_record, l.order_id, l.code ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_OrderBy_LoadIndexRecord_Queue( l.module, l.loaded_record, l.order_id, l.code ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_OrderBy_LoadIndexRecord_AuditLog" PARAMETERS = "module var, loaded_record var, order_id, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFAuditLogUndecodedData_Load_Order_ID( l.order_id, l.loaded_record:owfal:log_data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_OrderBy_LoadIndexRecord_Queue" PARAMETERS = "module var, loaded_record var, order_id, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFCustomFields_Generic_Data_Order( l.code, l.data ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.alias" VALUE = "{ OWFCustomFields_Generic_Query_Field_Alias( l.data:queue ) }">

	<MvREFERENCEARRAY NAME = "l.owqxo" VARIABLE = "l.loaded_record">
		<MvMEMBER NAME = "{ l.alias }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ OWFQueueXOrder_Load( l.data:queue:id, l.order_id, l.null ) }"> 	<MvASSIGN NAME = "l.owqxo:value" VALUE = "{ l.order_id }">
	<MvELSE>																		<MvASSIGN NAME = "l.owqxo:value" VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_Value" PARAMETERS = "module var, view_name, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.code EQ 'auditlog' }">	<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_Value_AuditLog( l.module, l.view_name, l.code ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Module_Order_Field_Query_Value_Queue( l.module, l.view_name, l.code ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_Value_AuditLog" PARAMETERS = "module var, view_name, code" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ miva_variable_value( l.view_name $ '.d.owfal_log_data' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Query_Value_Queue" PARAMETERS = "module var, view_name, code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFQueue_Load_Code_Cached( l.code, l.queue ) }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.alias" VALUE = "{ OWFCustomFields_Generic_Query_Field_Alias( l.queue ) }">

	<MvIF EXPR = "{ miva_variable_value( l.view_name $ '.d.' $ l.alias $ '_value' ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Field_Choices" PARAMETERS = "module var, code, choices var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvCOMMENT>
|
| Multiple Order Custom Fields Feature (fields_ordr_map)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Order_Fields_Mapped" PARAMETERS = "module var, order_id, field_map var, output_fields var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ Module_Order_Fields_Mapped_AuditLog( l.module, l.order_id, l.field_map, l.output_fields ) }">
	<MvEVAL EXPR = "{ Module_Order_Fields_Mapped_Queue( l.module, l.order_id, l.field_map, l.output_fields ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Fields_Mapped_AuditLog" PARAMETERS = "module var, order_id, field_map var, output_fields var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.mapped_member"	VARIABLE = "l.field_map">
		<MvMEMBER NAME = "auditlog">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ NOT ISNULL l.mapped_member }">
		<MvIF EXPR = "{ OWFAuditLogUndecodedData_Load_Order_ID( l.order_id, l.unencoded_log_data ) }">
			<MvASSIGN NAME = "l.output_fields" MEMBER = "{ l.mapped_member }" VALUE = "{ l.unencoded_log_data }">
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Fields_Mapped_Queue" PARAMETERS = "module var, order_id, field_map var, output_fields var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.queue" ARRAY = "l.queues" COUNT = "{ OWFQueueList_Load_Order( l.order_id, l.queues ) }">
		<MvREFERENCEARRAY NAME = "l.mapped_member"	VARIABLE = "l.field_map">
			<MvMEMBER NAME = "{ l.queue:code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ NOT ISNULL l.mapped_member }">
			<MvASSIGN NAME = "l.output_fields" MEMBER = "{ l.mapped_member }" VALUE = 1>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvCOMMENT>
|
| Order Tabs Feature (vis_order)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Order_Head" PARAMETERS = "module var, tab, order var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Tabs" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "OWCF:Order Workflows">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Content" PARAMETERS = "module var, tab, load_fields" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.load_fields }">
		<MvIF EXPR = "{ NOT OWFQueueList_Load_All( g.OWFQueues ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ g.Tab NE 'OWCF' }">
		<MvHIDE FIELDS = "g.OWFQueues">
	<MvELSE>
		<table border="0" cellpadding="2" cellspacing="0" width="100%">
		<MvFOREACH INDEX = "l.index" ITERATOR = "l.queue" ARRAY = "g.OWFQueues">
			<tr>
				<td width="100%" valign="middle">
					<MvIF EXPR = "{ OWFQueueXOrder_Load( l.queue:id, g.Order_ID, l.null ) }">	<MvASSIGN NAME = "l.checked" VALUE = 1>
					<MvELSE>																	<MvASSIGN NAME = "l.checked" VALUE = 0>
					</MvIF>

					<MvEVAL EXPR = "{ [ g.Module_Library_Utilities ].DrawCheckbox_With_Label( l.checked, 'OWFQueues[' $ l.index $ ']:assigned', 'Yes', encodeentities( l.queue:name ) ) }">

					<input type="hidden" name="{ 'OWFQueues[' $ l.index $ ']:id' }" 	value="{ encodeentities( l.queue:id ) }">
					<input type="hidden" name="{ 'OWFQueues[' $ l.index $ ']:code' }" 	value="{ encodeentities( l.queue:code ) }">
					<input type="hidden" name="{ 'OWFQueues[' $ l.index $ ']:name' }" 	value="{ encodeentities( l.queue:name ) }">
				</td>
			</tr>			
		</MvFOREACH>
		</table>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Validate" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.queue" ARRAY = "g.OWFQueues">		
		<MvASSIGN NAME = "l.queue:assigned" VALUE = "{ [ g.Module_Admin ].Trim_Boolean( l.queue:assigned ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.queue" ARRAY = "g.OWFQueues">
		<MvIF EXPR = "{ l.queue:assigned }">
			<MvIF EXPR = "{ NOT OWFQueueXOrder_Load( l.queue:id, g.Order_ID, l.null ) }">
				<MvIF EXPR = "{ NOT OWFQueueXOrder_Insert( l.queue:id, g.Order_ID ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00037', 'Order Workflow: Order ID \'' $ g.Order_ID $ '\', Queue ID \'' $ l.queue:id $ '\' created' ) }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ OWFQueueXOrder_Load( l.queue:id, g.Order_ID, l.null ) }">
				<MvIF EXPR = "{ NOT OWFQueueXOrder_Delete( l.queue:id, g.Order_ID ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00038', 'Order Workflow: Order ID \'' $ g.Order_ID $ '\', Queue ID \'' $ l.queue:id $ '\' deleted' ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Order_Delete_Order" PARAMETERS = "module var, order var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Helper Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "QueueList_Load_Default" PARAMETERS = "queues var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.count"											VALUE = 0>
	<MvASSIGN NAME = "l.queues" INDEX = "{ ++l.count }"	MEMBER = "code" VALUE = "new_and_updated">
	<MvASSIGN NAME = "l.queues" INDEX = "{ l.count }"	MEMBER = "name" VALUE = "New & Updated Orders">

	<MvASSIGN NAME = "l.queues" INDEX = "{ ++l.count }"	MEMBER = "code" VALUE = "successfully_retrieved_orders">
	<MvASSIGN NAME = "l.queues" INDEX = "{ l.count }"	MEMBER = "name" VALUE = "Successfully Retrieved Orders">

	<MvFUNCTIONRETURN VALUE = "{ l.count }">
</MvFUNCTION>

<MvFUNCTION NAME = "WorkflowList_Load_Default" PARAMETERS = "workflows var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.count"													VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ ++l.count }"	MEMBER = "enabled"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "name"		VALUE = "Process New & Updated Orders">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "cond"		VALUE = "{ miva_array_deserialize( '[01]:field=length%28order%3Apayments%29,[01]:operator=GT,[01]:value=0' ) }">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_for"	VALUE = 1>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_int"	VALUE = 5>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_max"	VALUE = 60>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "triggers"	VALUE = "{ miva_array_deserialize( '[01]=order_created,[02]=order_total_change,[03]=orderitem_created,[04]=orderitem_updated,[05]=orderitem_deleted' ) }">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "actions"	VALUE = "{ miva_array_deserialize( '[01]:act=note_add,[01]:act_data=Automated+Workflow%3A+Order+moved+to+queue+%22New+%26+Updated+Orders%22.,
																													[02]:act=queue_add,[02]:act_data=new_and_updated' ) }">

	<MvASSIGN NAME = "l.workflows" INDEX = "{ ++l.count }"	MEMBER = "enabled"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "name"		VALUE = "Process Retrieved Orders">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "cond"		VALUE = "">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_for"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_int"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_max"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "triggers"	VALUE = "{ miva_array_deserialize( '[01]=order_retrieved' ) }">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "actions"	VALUE = "{ miva_array_deserialize( '[01]:act=note_add,[01]:act_data=Automated+Workflow%3A+Order+retrieved.+Moved+to+queue+%22Successfully+Retrieved+Orders%22.,
																													[02]:act=queue_add,[02]:act_data=successfully_retrieved_orders' ) }">

	<MvASSIGN NAME = "l.workflows" INDEX = "{ ++l.count }"	MEMBER = "enabled"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "name"		VALUE = "Process Retrieved Orders with Order Acknowledgement">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "cond"		VALUE = "">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_for"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_int"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_max"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "triggers"	VALUE = "{ miva_array_deserialize( '[01]=order_retrieved' ) }">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "actions"	VALUE = "{ miva_array_deserialize( '[01]:act=note_add,[01]:act_data=Automated+Workflow%3A+Order+retrieved+but+left+in+queue+%22New+%26+Updated+Orders%22.' ) }">

	<MvASSIGN NAME = "l.workflows" INDEX = "{ ++l.count }"	MEMBER = "enabled"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "name"		VALUE = "Process Order Acknowledgement">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "cond"		VALUE = "">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_for"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_int"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "wait_max"	VALUE = 0>
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "triggers"	VALUE = "{ miva_array_deserialize( '[01]=order_acknowledged' ) }">
	<MvASSIGN NAME = "l.workflows" INDEX = "{ l.count }"	MEMBER = "actions"	VALUE = "{ miva_array_deserialize( '[01]:act=note_add,[01]:act_data=Automated+Workflow%3A+Order+Acknowledgement+received.+Order+Moved+to+queue+%22Successfully+Retrieved+Orders%22.,
																													[02]:act=queue_move,[02]:act_data=successfully_retrieved_orders' ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.count }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply" PARAMETERS = "workflow var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFWorkflow_Check_Condition( l.workflow:cond, 'AND', l.data ) }">
		<MvIF EXPR = "{ l.workflow:wait_for }">
			<MvASSIGN NAME = "l.entry:flow_id"		VALUE = "{ l.workflow:id }">
			<MvASSIGN NAME = "l.entry:order_id"		VALUE = "{ l.data:order:id }">
			<MvASSIGN NAME = "l.entry:firstcheck"	VALUE = "{ s.dyn_time_t }">
			<MvASSIGN NAME = "l.entry:lastcheck"	VALUE = "{ s.dyn_time_t }">
			<MvASSIGN NAME = "l.entry:nextcheck"	VALUE = "{ s.dyn_time_t + ( l.workflow:wait_int * 60 ) }">

			<MvASSIGN NAME = "l.null"				VALUE = "{ OWFWaitQueue_Insert( l.entry ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFOREACH ITERATOR = "l.action" ARRAY = "l.actions" COUNT = "{ OWFWorkflowActionList_Load_Workflow( l.workflow:id, l.actions ) }">
		<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action( l.workflow, l.action, l.data ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Check_Condition" PARAMETERS = "condition var, group_operator, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.Session:orderworkflow:owfworkflow_apply_condition }">
		<MvASSIGN NAME = "g.Session:orderworkflow:owfworkflow_apply_condition:group_count"			VALUE = "{ miva_splitstring( 'AND, OR', ',', g.Session:orderworkflow:owfworkflow_apply_condition:groups, 'trim,upper' ) }">
		<MvASSIGN NAME = "g.Session:orderworkflow:owfworkflow_apply_condition:array_count"			VALUE = "{ miva_splitstring( 'ALL, ANY, FIRST, LAST', ',', g.Session:orderworkflow:owfworkflow_apply_condition:arrays, 'trim,upper' ) }">
		<MvASSIGN NAME = "g.Session:orderworkflow:owfworkflow_apply_condition:expression_count"		VALUE = "{ miva_splitstring( 'EQ, GT, GE, LT, LE, CO, NC, LIKE, NOTLIKE, NE, IN, NOT_IN, NULL, NOTNULL, TRUE, FALSE', ',', g.Session:orderworkflow:owfworkflow_apply_condition:expressions, 'trim,upper' ) }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.comparison_condition" ARRAY = "l.condition">
		<MvIF EXPR = "{ miva_array_search( g.Session:orderworkflow:owfworkflow_apply_condition:groups, 1, l.operator, 'l.operator EQ l.comparison_condition:operator' ) }">
			<MvIF EXPR = "{ l.group_operator EQ 'AND' }">
				<MvIF EXPR = "{ NOT OWFWorkflow_Check_Condition( l.comparison_condition:value, l.comparison_condition:operator, l.data ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.group_operator EQ 'OR' }">
				<MvIF EXPR = "{ OWFWorkflow_Check_Condition( l.comparison_condition:value, l.comparison_condition:operator, l.data ) }">
					<MvFUNCTIONRETURN VALUE = 1>
				</MvIF>
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ miva_array_search( g.Session:orderworkflow:owfworkflow_apply_condition:expressions, 1, l.operator, 'l.operator EQ l.comparison_condition:operator' ) }">
			<MvIF EXPR = "{ ISNULL l.comparison_condition:field }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ ( indexofi( 'length(', l.comparison_condition:field, 1 ) EQ 1 )									AND
							( indexofi( ')', l.comparison_condition:field, 1 ) EQ len_var( l.comparison_condition:field ) ) AND
							( len_var( l.comparison_condition:field ) GT 8 ) }"> <MvCOMMENT> 8 = "length()" </MvCOMMENT>
				<MvASSIGN NAME = "l.value"			VALUE = "{ OWFWorkflow_Check_Condition_ValueFromPath( l.data, trim( substring_var( l.comparison_condition:field, 8, len_var( l.comparison_condition:field ) - 8 ) ) ) }">
				<MvASSIGN NAME = "l.field_type"		VALUE = "{ miva_variable_type( l.value ) }">

				<MvIF EXPR = "{ l.field_type EQ 'ARRAY' }">			<MvASSIGN NAME = "l.value" VALUE = "{ miva_array_elements( l.value ) }">
				<MvELSEIF EXPR = "{ l.field_type EQ 'STRING' }">	<MvASSIGN NAME = "l.value" VALUE = "{ len_var( l.value ) }">
				<MvELSE>											<MvASSIGN NAME = "l.value" VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.value"			VALUE = "{ OWFWorkflow_Check_Condition_ValueFromPath( l.data, l.comparison_condition:field ) }">
				<MvASSIGN NAME = "l.field_type"		VALUE = "{ miva_variable_type( l.value ) }">

				<MvIF EXPR = "{ l.field_type NE 'NONE'		AND
								l.field_type NE 'STRING'	AND
								l.field_type NE 'INTEGER'	AND
								l.field_type NE 'DOUBLE' }">
					<MvIF EXPR = "{ l.group_operator EQ 'OR' }">
						<MvFUNCTIONRETURN VALUE = 1>
					<MvELSE>
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvIF>

			<MvIF EXPR = "{ l.group_operator EQ 'AND' }">
				<MvIF EXPR = "{ NOT OWFWorkflow_Check_Condition_Expression( l.comparison_condition:operator, l.value, l.comparison_condition:value ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.group_operator EQ 'OR' }">
				<MvIF EXPR = "{ OWFWorkflow_Check_Condition_Expression( l.comparison_condition:operator, l.value, l.comparison_condition:value ) }">
					<MvFUNCTIONRETURN VALUE = 1>
				</MvIF>
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSEIF EXPR = "{ miva_array_search( g.Session:orderworkflow:owfworkflow_apply_condition:arrays, 1, l.operator, 'l.operator EQ l.comparison_condition:operator' ) OR
							( ( NOT ISNULL l.comparison_condition:operator ) AND isdigit( l.comparison_condition:operator ) ) }">
			<MvASSIGN NAME = "l.array" VALUE = "{ OWFWorkflow_Check_Condition_ValueFromPath( l.data, l.comparison_condition:field ) }">

			<MvIF EXPR = "{ miva_variable_type( l.array ) NE 'ARRAY' }">
				<MvFUNCTIONRETURN VALUE = 0>
			<MvELSEIF EXPR = "{ miva_array_elements( l.array ) EQ 0 }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.comparison_condition:operator EQ 'ALL' }">
				<MvIF EXPR = "{ l.group_operator EQ 'AND' }">
					<MvFOREACH ITERATOR = "l.item" ARRAY = "l.array">
						<MvIF EXPR = "{ NOT OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.item ) }">
							<MvFUNCTIONRETURN VALUE = 0>
						</MvIF>
					</MvFOREACH>
				<MvELSEIF EXPR = "{ l.group_operator EQ 'OR' }">
					<MvFOREACH INDEX = "l.item_pos" ITERATOR = "l.item" ARRAY = "l.array">
						<MvIF EXPR = "{ NOT OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.item ) }">
							<MvFOREACHSTOP>
						</MvIF>
					</MvFOREACH>

					<MvIF EXPR = "{ l.item_pos GT miva_array_max( l.array ) }">
						<MvFUNCTIONRETURN VALUE = 1>
					</MvIF>
				<MvELSE>
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.comparison_condition:operator EQ 'ANY' }">
				<MvIF EXPR = "{ l.group_operator EQ 'AND' }">
					<MvFOREACH INDEX = "l.item_pos" ITERATOR = "l.item" ARRAY = "l.array">
						<MvIF EXPR = "{ OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.item ) }">
							<MvFOREACHSTOP>
						</MvIF>
					</MvFOREACH>

					<MvIF EXPR = "{ l.item_pos GT miva_array_max( l.array ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				<MvELSEIF EXPR = "{ l.group_operator EQ 'OR' }">
					<MvFOREACH INDEX = "l.item_pos" ITERATOR = "l.item" ARRAY = "l.array">
						<MvIF EXPR = "{ OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.item ) }">
							<MvFUNCTIONRETURN VALUE = 1>
						</MvIF>
					</MvFOREACH>
				<MvELSE>
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.comparison_condition:operator EQ 'FIRST' }">
				<MvASSIGN NAME = "l.first_index" VALUE = "{ miva_array_min( l.array ) }">

				<MvIF EXPR = "{ l.first_index EQ 0 }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ l.group_operator EQ 'AND' }">
					<MvIF EXPR = "{ NOT OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.array[ l.first_index ] ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				<MvELSEIF EXPR = "{ l.group_operator EQ 'OR' }">
					<MvIF EXPR = "{ OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.array[ l.first_index ] ) }">
						<MvFUNCTIONRETURN VALUE = 1>
					</MvIF>
				<MvELSE>
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.comparison_condition:operator EQ 'LAST' }">
				<MvASSIGN NAME = "l.last_index" VALUE = "{ miva_array_max( l.array ) }">

				<MvIF EXPR = "{ l.last_index EQ 0 }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ l.group_operator EQ 'AND' }">
					<MvIF EXPR = "{ NOT OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.array[ l.last_index ] ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				<MvELSEIF EXPR = "{ l.group_operator EQ 'OR' }">
					<MvIF EXPR = "{ OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.array[ l.last_index ] ) }">
						<MvFUNCTIONRETURN VALUE = 1>
					</MvIF>
				<MvELSE>
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ ( NOT ISNULL l.comparison_condition:operator ) AND isdigit( l.comparison_condition:operator ) AND ( l.comparison_condition:operator GT 0 ) }">
				<MvIF EXPR = "{ l.group_operator EQ 'AND' }">
					<MvIF EXPR = "{ NOT OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.array[ l.comparison_condition:operator ] ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				<MvELSEIF EXPR = "{ l.group_operator EQ 'OR' }">
					<MvIF EXPR = "{ OWFWorkflow_Check_Condition( l.comparison_condition:value, 'AND', l.array[ l.comparison_condition:operator ] ) }">
						<MvFUNCTIONRETURN VALUE = 1>
					</MvIF>
				<MvELSE>
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.group_operator EQ 'AND' }">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSE>										<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Check_Condition_Expression" PARAMETERS = "operator, value var, comparison_value var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.value_upper"			VALUE = "{ toupper( l.value ) }">
	<MvASSIGN NAME = "l.comparison_value_upper"	VALUE = "{ toupper( l.comparison_value ) }">

	<MvIF EXPR = "{ l.operator EQ 'EQ' }">				<MvIF EXPR = "{ l.value_upper EQ l.comparison_value_upper }">											<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'GT' }">			<MvIF EXPR = "{ l.value_upper GT l.comparison_value_upper }">											<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'GE' }">			<MvIF EXPR = "{ l.value_upper GE l.comparison_value_upper }">											<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'LT' }">			<MvIF EXPR = "{ l.value_upper LT l.comparison_value_upper }">											<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'LE' }">			<MvIF EXPR = "{ l.value_upper LE l.comparison_value_upper }">											<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'CO' }">			<MvIF EXPR = "{ l.comparison_value_upper CIN l.value_upper }">											<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'NC' }">			<MvIF EXPR = "{ NOT ( l.comparison_value_upper CIN l.value_upper ) }">									<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'LIKE' }">		<MvIF EXPR = "{ JSON_Search_Filter_MivaScript_LIKE( l.value_upper, l.comparison_value_upper ) }">		<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'NOTLIKE' }">		<MvIF EXPR = "{ NOT JSON_Search_Filter_MivaScript_LIKE( l.value_upper, l.comparison_value_upper ) }">	<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'NE' }">			<MvIF EXPR = "{ l.value_upper NE toupper( l.comparison_value  ) }">										<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'NULL' }">		<MvIF EXPR = "{ ISNULL l.value }">																		<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'NOTNULL' }">		<MvIF EXPR = "{ NOT ISNULL l.value }">																	<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'TRUE' }">		<MvIF EXPR = "{ l.value EQ 1 }">																		<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'FALSE' }">		<MvIF EXPR = "{ 'x' $ l.value EQ 'x0' }">																<MvFUNCTIONRETURN VALUE = 1> </MvIF>
	<MvELSEIF EXPR = "{ l.operator EQ 'IN' }">
		<MvFOREACH ITERATOR = "l.element" ARRAY = "l.elements" COUNT = "{ miva_splitstring( l.comparison_value, ',', l.elements, 'trim,upper' ) }">
			<MvIF EXPR = "{ l.element EQ l.value_upper }">
				<MvFUNCTIONRETURN VALUE = 1>
			</MvIF>
		</MvFOREACH>
	<MvELSEIF EXPR = "{ l.operator EQ 'NOT_IN' }">
		<MvFOREACH ITERATOR = "l.element" ARRAY = "l.elements" COUNT = "{ miva_splitstring( l.comparison_value, ',', l.elements, 'trim,upper' ) }">
			<MvIF EXPR = "{ l.element EQ l.value_upper }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Check_Condition_ValueFromPath" PARAMETERS = "data var, field_path_string" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCE NAME = "l.value" VARIABLE = "l.data">

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.field_pathlist" COUNT = "{ miva_splitstring( l.field_path_string, ':', l.field_pathlist, 'trim' ) }">
		<MvIF EXPR = "{ ISNULL l.field }">
			<MvFUNCTIONRETURN VALUE = "{ l.null }">
		</MvIF>

		<MvIF EXPR = "{ indexof( '[', l.field, 1 ) EQ 0 }">
			<MvIF EXPR = "{ NOT miva_member_exists( l.value, l.field ) }">
				<MvFUNCTIONRETURN VALUE = "{ l.null }">
			</MvIF>

			<MvREFERENCEARRAY NAME = "l.value"	VARIABLE = "l.value">
				<MvMEMBER NAME = "{ l.field }">
			</MvREFERENCEARRAY>
		<MvELSE>
			<MvCOMMENT>
			|
			| Parse array structure. If invalid path, return null.
			|
			| Valid values include:
			| [N]
			| [N][N]
			| field[N]
			| field[N][N]
			|
			| Invalid values include:
			| [-N]
			| [0]
			| [N > Integer.MAX_VALUE]
			| [[N]]
			| [N
			| [N]field
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.field"					VALUE = "{ glosub( l.field, ' ', '' ) }">
			<MvASSIGN NAME = "l.open_bracket_count"		VALUE = "{ ( len_var( l.field ) - len( glosub( l.field, '[', '' ) ) ) }">
			<MvASSIGN NAME = "l.close_bracket_count"	VALUE = "{ ( len_var( l.field ) - len( glosub( l.field, ']', '' ) ) ) }">

			<MvIF EXPR = "{ l.open_bracket_count NE l.close_bracket_count }">
				<MvFUNCTIONRETURN VALUE = "{ l.null }">
			<MvELSEIF EXPR = "{ substring_var( l.field, len_var( l.field ), 1 ) NE ']' }">
				<MvFUNCTIONRETURN VALUE = "{ l.null }">
			</MvIF>

			<MvASSIGN NAME = "l.open_bracket_pos" VALUE = "{ indexof( '[', l.field, 1 ) }">

			<MvIF EXPR = "{ l.open_bracket_pos GT 1 }">
				<MvASSIGN NAME = "l.member_name" VALUE = "{ substring_var( l.field, 1, l.open_bracket_pos - 1 ) }">

				<MvIF EXPR = "{ NOT miva_member_exists( l.value, l.member_name ) }">
					<MvFUNCTIONRETURN VALUE = "{ l.null }">
				</MvIF>

				<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.value">
					<MvMEMBER NAME = "{ l.member_name }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.field" VALUE = "{ substring_var( l.field, l.open_bracket_pos, len_var( l.field ) - l.open_bracket_pos + 1 ) }">
			</MvIF>

			<MvWHILE EXPR = "{ indexof( '[', l.field, 1 ) EQ 1 }">
				<MvASSIGN NAME = "l.close_bracket_pos"		VALUE = "{ indexof( ']', l.field, 1 ) }">
				<MvASSIGN NAME = "l.next_open_bracket_pos"	VALUE = "{ indexof( '[', l.field, 2 ) }">

				<MvIF EXPR = "{ ( l.next_open_bracket_pos NE 0 ) AND ( l.next_open_bracket_pos NE ( l.close_bracket_pos + 1 ) ) }">
					<MvFUNCTIONRETURN VALUE = "{ l.null }">
				</MvIF>

				<MvASSIGN NAME = "l.index" VALUE = "{ substring_var( l.field, 2, l.close_bracket_pos - 2 ) }">

				<MvIF EXPR = "{ NOT miva_element_exists( l.value, l.index ) }">
					<MvFUNCTIONRETURN VALUE = "{ l.null }">
				</MvIF>

				<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.value">
					<MvDIMENSION INDEX = "{ l.index }">
				</MvREFERENCEARRAY>

				<MvASSIGN NAME = "l.field" VALUE = "{ substring_var( l.field, l.close_bracket_pos + 1, len_var( l.field ) - l.close_bracket_pos ) }">
			</MvWHILE>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action" PARAMETERS = "workflow var, action var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.orderdata_modified" VALUE = 0>

	<MvIF EXPR = "{ l.action:act EQ 'queue_add'		OR
					l.action:act EQ 'queue_move'	OR
					l.action:act EQ 'queue_remove' }">
		<MvIF EXPR = "{ NOT OWFQueue_Load_Code( l.action:act_data, l.queue ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00039', 'Queue with code \'' $ l.action:act_data $ '\' not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ l.action:act EQ 'queue_add' }">
			<MvIF EXPR = "{ NOT OWFQueueXOrder_Load( l.queue:id, l.data:order:id, l.null ) }">
				<MvIF EXPR = "{ NOT OWFQueueXOrder_Insert( l.queue:id, l.data:order:id ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvASSIGN NAME = "l.orderdata_modified" VALUE = 1>
				<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00107', 'Order Workflow \'' $ l.workflow:name $ '\': Order #' $ l.data:order:id $ ' added to queue \'' $ l.queue:code $ '\'' ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.action:act EQ 'queue_move' }">
			<MvIF EXPR = "{ NOT OWFQueueXOrder_Delete_All_Order( l.data:order:id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT OWFQueueXOrder_Insert( l.queue:id, l.data:order:id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.orderdata_modified" VALUE = 1>
			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00108', 'Order Workflow \'' $ l.workflow:name $ '\': Order #' $ l.data:order:id $ ' moved to queue \'' $ l.queue:code $ '\'' ) }">
		<MvELSEIF EXPR = "{ l.action:act EQ 'queue_remove' }">
			<MvIF EXPR = "{ NOT OWFQueueXOrder_Delete( l.queue:id, l.data:order:id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.orderdata_modified" VALUE = 1>
			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00109', 'Order Workflow \'' $ l.workflow:name $ '\': Order #' $ l.data:order:id $ ' removed from queue \'' $ l.queue:code $ '\'' ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.action:act EQ 'queue_remove_all' }">
		<MvIF EXPR = "{ NOT OWFQueueXOrder_Delete_All_Order( l.data:order:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.orderdata_modified" VALUE = 1>
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00110', 'Order Workflow \'' $ l.workflow:name $ '\': Order #' $ l.data:order:id $ ' removed from all queues' ) }">
	<MvELSEIF EXPR = "{ l.action:act EQ 'note_add' }">
		<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Add_Note( l.workflow, l.action, l.data, l.orderdata_modified, l.action:act_data ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.action:act EQ 'customfield_set' }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ModuleAndFeatures_Load_Code_Cached( l.action:act_data:module_code, l.customfield_module ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00041', 'Module \'' $ l.action:act_data:module_code $ '\' not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.customfield_module:active }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00042', 'Module \'' $ l.customfield_module:code $ '\' is deactivated' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.customfield_module:feature_hash:fields_ordr }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00043', 'Module \'' $ l.customfield_module:code $ '\' does not provide feature \'fields_ordr\'' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreModule_Count_Module_Cached( l.customfield_module:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00044', 'Module \'' $ l.customfield_module:code $ '\' is not installed in store \'' $ g.Store:code $ '\'' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Root $ l.customfield_module:module ].Module_Order_Set_Field( l.customfield_module, l.data:order:id, l.action:act_data:field, l.action:act_data:value ) }">

		<MvASSIGN NAME = "l.orderdata_modified" VALUE = 1>
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00111', 'Order Workflow \'' $ l.workflow:name $ '\': Custom Field value set on Order #' $ l.data:order:id $ ' for module \'' $ l.customfield_module:code $ '\', field \'' $ l.action:act_data:field $ '\'' ) }">
	<MvELSEIF EXPR = "{ l.action:act EQ 'webhook_get' }">
		<MvIF EXPR = "{ substring_var( l.action:act_data:url, len_var( l.action:act_data:url ), 1 ) EQ '?' }">		<MvASSIGN NAME = "l.url" VALUE = "{ l.action:act_data:url $ 'Order_ID=' $ encodeattribute( l.data:order:id ) }">
		<MvELSEIF EXPR = "{ substring_var( l.action:act_data:url, len_var( l.action:act_data:url ), 1 ) EQ '&' }">	<MvASSIGN NAME = "l.url" VALUE = "{ l.action:act_data:url $ 'Order_ID=' $ encodeattribute( l.data:order:id ) }">
		<MvELSEIF EXPR = "{ indexof( '?', l.action:act_data:url, 1 ) GT 0 }">										<MvASSIGN NAME = "l.url" VALUE = "{ l.action:act_data:url $ '&Order_ID=' $ encodeattribute( l.data:order:id ) }">
		<MvELSE>																									<MvASSIGN NAME = "l.url" VALUE = "{ l.action:act_data:url $ '?Order_ID=' $ encodeattribute( l.data:order:id ) }">
		</MvIF>

		<MvEVAL EXPR = "{ OWFWorkflow_Apply_Action_Webhook_Build_Headers( l.action, l.headers ) }">

		<MIVA MvCALL_ERROR = "nonfatal, nodisplay">

		<MvCALL METHOD	= "GET"
				ACTION	= "{ l.url }"
				HEADERS	= "{ l.headers }"
				FLAGS	= "noparse">
		</MvCALL>

		<MIVA MvCALL_ERROR = "fatal, display">

		<MvIF EXPR = "{ g.MvCALL_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00045', g.MvCALL_Error ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00112', 'Order Workflow \'' $ l.workflow:name $ '\': Order #' $ l.data:order:id $ ' transmitted as GET request to \'' $ l.url $ '\'' ) }">
	<MvELSEIF EXPR = "{ l.action:act EQ 'webhook_post_order' }">
		<MvEVAL EXPR = "{ OWFWorkflow_Apply_Action_Webhook_Build_Headers( l.action, l.headers ) }">

		<MIVA MvCALL_ERROR = "nonfatal, nodisplay">

		<MvCALL METHOD			= "RAW"
				ACTION			= "{ l.action:act_data:url }"
				HEADERS			= "{ l.headers }"
				CONTENT-TYPE	= "application/json"
				FIELDS			= "l.data:json_order"
				FLAGS			= "noparse">
		</MvCALL>

		<MIVA MvCALL_ERROR = "fatal, display">

		<MvIF EXPR = "{ g.MvCALL_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00046', g.MvCALL_Error ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00113', 'Order Workflow \'' $ l.workflow:name $ '\': Order #' $ l.data:order:id $ ' transmitted as POST request to \'' $ l.action:act_data:url $ '\'' ) }">
	<MvELSEIF EXPR = "{ l.action:act EQ 'payment' }">
		<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Payment( l.workflow, l.action, l.data, l.orderdata_modified ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.action:act EQ 'void' }">
		<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_VOID( l.workflow, l.action, l.data, l.orderdata_modified ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.orderdata_modified }">
		<MvIF EXPR = "{ NOT OWFOrder_Load_ID( l.data:order:id, l.data ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00118', 'Order not found' ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_LastUpdated( l.data:order:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Webhook_Build_Headers" PARAMETERS = "action var, headers var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.headers" VALUE = "">

	<MvIF EXPR = "{ l.action:act_data:cred_id }">
		<MvIF EXPR = "{ OWFAuthenticationCredentials_Load_ID_Cached( l.action:act_data:cred_id, l.credentials ) }">
			<MvIF EXPR = "{ l.credentials:auth_type EQ 'basic' }">
				<MvASSIGN NAME = "l.decrypted_username"	VALUE = "{ [ g.Module_Library_Crypto ].Decrypt_Payment_Password( l.credentials:auth_data:username ) }">
				<MvASSIGN NAME = "l.decrypted_password"	VALUE = "{ [ g.Module_Library_Crypto ].Decrypt_Payment_Password( l.credentials:auth_data:password ) }">

				<MvASSIGN NAME = "l.headers"			VALUE = "{ 'Authorization: Basic ' $ crypto_base64_encode( l.decrypted_username $ ':' $ l.decrypted_password ) $ asciichar( 13 ) $ asciichar( 10 ) }">
			</MvIF>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment" PARAMETERS = "workflow var, action var, data var, orderdata_modified var" STANDARDOUTPUTLEVEL = "">
	<MvLOCKFILE FILE = "{ [ g.Module_Feature_PAY_UT ].Order_Payment_LockFile( l.data:order:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ OWFWorkflow_Apply_Action_Payment_LowLevel( l.workflow, l.action, l.data, l.orderdata_modified ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_LowLevel" PARAMETERS = "workflow var, action var, data var, orderdata_modified var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Reload order data inside lock file
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT OWFOrder_Load_ID( l.data:order:id, l.data ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00181', 'Order not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.state"						VALUE = "">
	<MvASSIGN NAME = "l.state:orderitem_count"		VALUE = "{ miva_array_elements( l.data:order:items ) }">
	<MvASSIGN NAME = "l.state:orderpayment_count"	VALUE = "{ [ g.Module_Library_DB ].OrderPaymentList_Load_Order( l.data:order:id, l.state:orderpayments ) }">

	<MvCOMMENT>
	|
	| Ensure no legacy authorizations exist in this order
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_ValidateOrderPayments( l.workflow, l.action, l.data, l.orderdata_modified, l.state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Calculate target capture amount and process
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Payment_Calculate_ChargesAmount( l.workflow, l.action, l.data, l.state ) }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Payment_Calculate_ProrateAmount( l.action, l.data, l.state ) }">			<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Payment_Calculate_ItemsAmount( l.action, l.data, l.state ) }">				<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Payment_Calculate_TargetCaptureAmount( l.action, l.state ) }">				<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ OWFWorkflow_Apply_Action_Payment_Process( l.workflow, l.action, l.data, l.orderdata_modified, l.state ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Calculate_ChargesAmount" PARAMETERS = "workflow var, action var, data var, state var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.state:charge"							VALUE = "">
	<MvASSIGN NAME = "l.state:charge:positive_charges"			VALUE = 0.00>
	<MvASSIGN NAME = "l.state:charge:negative_charges"			VALUE = 0.00>
	<MvASSIGN NAME = "l.state:charge:shipping_charges"			VALUE = 0.00>
	<MvASSIGN NAME = "l.state:charge:handling_charges"			VALUE = 0.00>
	<MvASSIGN NAME = "l.state:charge:payment_charges"			VALUE = 0.00>
	<MvASSIGN NAME = "l.state:charge:tax_charges"				VALUE = 0.00>
	<MvASSIGN NAME = "l.state:charge:item_tax_charges"			VALUE = 0.00>
	<MvASSIGN NAME = "l.state:charge:other_charges"				VALUE = 0.00>

	<MvFOREACH ITERATOR = "l.charge" ARRAY = "l.data:order:charges">
		<MvIF EXPR = "{ l.charge:amount LT 0 }">				<MvASSIGN NAME = "l.state:charge:negative_charges"	VALUE = "{ l.state:charge:negative_charges + l.charge:amount }">
		<MvELSEIF EXPR = "{ l.charge:type EQ 'SHIPPING' }">		<MvASSIGN NAME = "l.state:charge:shipping_charges"	VALUE = "{ l.state:charge:shipping_charges + l.charge:amount }">
		<MvELSEIF EXPR = "{ l.charge:type EQ 'HANDLING' }">		<MvASSIGN NAME = "l.state:charge:handling_charges"	VALUE = "{ l.state:charge:handling_charges + l.charge:amount }">
		<MvELSEIF EXPR = "{ l.charge:type EQ 'PAYMENT' }">		<MvASSIGN NAME = "l.state:charge:payment_charges"	VALUE = "{ l.state:charge:payment_charges + l.charge:amount }">
		<MvELSEIF EXPR = "{ l.charge:type EQ 'TAX' }">			<MvASSIGN NAME = "l.state:charge:tax_charges"		VALUE = "{ l.state:charge:tax_charges + l.charge:amount }">
		<MvELSE>												<MvASSIGN NAME = "l.state:charge:other_charges"		VALUE = "{ l.state:charge:other_charges + l.charge:amount }">
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Calculate tax amount across all items and subtract that
	| from the positive charge to avoid double tax calculation
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.data:order:items">
		<MvASSIGN NAME = "l.state:charge:item_tax_charges"		VALUE = "{ l.state:charge:item_tax_charges + l.item:tax }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.state:charge:tax_charges"				VALUE = "{ l.state:charge:tax_charges - l.state:charge:item_tax_charges }">
	<MvASSIGN NAME = "l.state:charge:positive_charges"			VALUE = "{ l.state:charge:shipping_charges + l.state:charge:handling_charges + l.state:charge:payment_charges + l.state:charge:tax_charges + l.state:charge:other_charges }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Calculate_ProrateAmount" PARAMETERS = "action var, data var, state var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.state:prorate"						VALUE = "">
	<MvASSIGN NAME = "l.state:prorate:amount"				VALUE = "">
	<MvASSIGN NAME = "l.state:prorate:lookup"				VALUE = "">

	<MvIF EXPR = "{ NOT l.action:act_data:prorate_discounts }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.proratable_items"					VALUE = "">
	<MvASSIGN NAME = "l.proratable_item_count"				VALUE = 0>
	<MvASSIGN NAME = "l.proratable_items_total"				VALUE = 0.00>
	<MvASSIGN NAME = "l.proratable_items_prorate_total"		VALUE = 0.00>

	<MvCOMMENT>
	|
	| Build total of all (non-cancelled) items
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.data:order:items" COUNT = "{ l.state:orderitem_count }">
		<MvIF EXPR = "{ l.item:status EQ 100 }">			<MvCOMMENT> Picking </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.item:status EQ 200 }">		<MvCOMMENT> Shipped </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.item:status EQ 210 }">		<MvCOMMENT> Gift Certificate: Not Redeemed </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.item:status EQ 211 }">		<MvCOMMENT> Gift Certificate: Redeemed </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.item:status EQ 220 }">		<MvCOMMENT> Digital: Not Downloaded </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.item:status EQ 221 }">		<MvCOMMENT> Digital: Downloaded </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.item:status EQ 300 }">		<MvCOMMENT> Cancelled </MvCOMMENT>
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ l.item:status EQ 400 }">		<MvCOMMENT> Backordered </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.item:status EQ 500 }">		<MvCOMMENT> RMA Issued </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.item:status EQ 600 }">		<MvCOMMENT> Returned </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.item:status EQ 999 }">		<MvCOMMENT> Adjustment </MvCOMMENT>
			<MvFOREACHCONTINUE>
		<MvELSE>											<MvCOMMENT> Pending </MvCOMMENT>
		</MvIF>

		<MvASSIGN NAME = "l.proratable_item_count"			VALUE = "{ miva_array_insert_var( l.proratable_items, l.item, -1 ) }">
		<MvASSIGN NAME = "l.proratable_items_total"			VALUE = "{ l.proratable_items_total + ( l.item:price * l.item:quantity ) + l.item:tax }">

		<MvFOREACH ITERATOR = "l.option" ARRAY = "l.item:options">
			<MvASSIGN NAME = "l.proratable_items_total"		VALUE = "{ l.proratable_items_total + ( l.option:price * l.item:quantity ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Calculate prorated amounts for each proratable item on a dollar scale
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.proratable_items" COUNT = "{ l.proratable_item_count }">
		<MvREFERENCEARRAY NAME = "l.proratable_item_total" VARIABLE = "l.state:prorate:lookup">
			<MvDIMENSION INDEX = "{ l.item:line_id }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.item_subtotal"					VALUE = "{ ( l.item:price * l.item:quantity ) + l.item:tax }">

		<MvFOREACH ITERATOR = "l.option" ARRAY = "l.item:options">
			<MvASSIGN NAME = "l.item_subtotal"				VALUE = "{ l.item_subtotal + ( l.option:price * l.item:quantity ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.proratable_item_total"			VALUE = "{ miva_ieee754_normalize( 2, ( l.item_subtotal / l.proratable_items_total ) * l.state:charge:negative_charges ) ROUND 2 }">
		<MvASSIGN NAME = "l.proratable_items_prorate_total"	VALUE = "{ l.proratable_items_prorate_total + l.proratable_item_total }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Adjust last item to pick up any rounding error
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.proratable_item_total"				VALUE = "{ miva_ieee754_normalize( 2, l.proratable_item_total + ( l.state:charge:negative_charges - l.proratable_items_prorate_total ) ) ROUND 2 }">

	<MvCOMMENT>
	|
	| Calculate prorate adjustment total for specified items
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.data:order:items" COUNT = "{ l.state:orderitem_count }">
		<MvIF EXPR = "{ OWFWorkflow_Apply_Action_Payment_Calculate_ShouldCaptureItem( l.action:act_data:capture_includes, l.action:act_data:refund_includes, l.item ) }">
			<MvREFERENCEARRAY NAME = "l.prorate_item_amount" VARIABLE = "l.state:prorate:lookup">
				<MvDIMENSION INDEX = "{ l.item:line_id }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.state:prorate:amount"		VALUE = "{ l.state:prorate:amount + l.prorate_item_amount }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Calculate_ItemsAmount" PARAMETERS = "action var, data var, state var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.state:item"					VALUE = "">
	<MvASSIGN NAME = "l.state:item:total_amount"	VALUE = "{ OWFWorkflow_Apply_Action_Payment_Calculate_ItemsAmount_LowLevel( 'all', l.action:act_data:refund_includes, l.data:order:items, l.state:orderitem_count ) }">

	<MvIF EXPR = "{ l.action:act_data:capture_includes EQ 'all' }">
		<MvASSIGN NAME = "l.state:item:amount"		VALUE = "{ l.state:item:total_amount }">
	<MvELSE>
		<MvASSIGN NAME = "l.state:item:amount"		VALUE = "{ OWFWorkflow_Apply_Action_Payment_Calculate_ItemsAmount_LowLevel( l.action:act_data:capture_includes, l.action:act_data:refund_includes, l.data:order:items, l.state:orderitem_count ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Calculate_ItemsAmount_LowLevel" PARAMETERS = "capture_includes, refund_includes, items var, item_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.item_amount"				VALUE = 0.00>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items" COUNT = "{ l.item_count }">
		<MvIF EXPR = "{ OWFWorkflow_Apply_Action_Payment_Calculate_ShouldCaptureItem( l.capture_includes, l.refund_includes, l.item ) }">
			<MvASSIGN NAME = "l.item_amount"		VALUE = "{ l.item_amount + ( l.item:price * l.item:quantity ) + l.item:tax }">

			<MvFOREACH ITERATOR = "l.option" ARRAY = "l.item:options">
				<MvASSIGN NAME = "l.item_amount"	VALUE = "{ l.item_amount + ( l.option:price * l.item:quantity ) }">
			</MvFOREACH>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.item_amount }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Calculate_ShouldCaptureItem" PARAMETERS = "capture_includes, refund_includes, item var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.item:status EQ 100 }">
		<MvIF EXPR = "{ l.capture_includes EQ 'all' OR
						l.capture_includes EQ 'created_shipments' }">	<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Picking </MvCOMMENT>
		<MvELSE>														<MvFUNCTIONRETURN VALUE = 0>	<MvCOMMENT> Picking </MvCOMMENT>
		</MvIF>
	<MvELSEIF EXPR = "{ l.item:status EQ 200 }">						<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Shipped </MvCOMMENT>
	<MvELSEIF EXPR = "{ l.item:status EQ 210 }">						<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Gift Certificate: Not Redeemed </MvCOMMENT>
	<MvELSEIF EXPR = "{ l.item:status EQ 211 }">						<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Gift Certificate: Redeemed </MvCOMMENT>
	<MvELSEIF EXPR = "{ l.item:status EQ 220 }">						<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Digital: Not Downloaded </MvCOMMENT>
	<MvELSEIF EXPR = "{ l.item:status EQ 221 }">						<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Digital: Downloaded </MvCOMMENT>
	<MvELSEIF EXPR = "{ l.item:status EQ 300 }">						<MvFUNCTIONRETURN VALUE = 0>	<MvCOMMENT> Cancelled </MvCOMMENT>
	<MvELSEIF EXPR = "{ l.item:status EQ 400 }">
		<MvIF EXPR = "{ l.capture_includes EQ 'all' }">					<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Backordered </MvCOMMENT>
		<MvELSE>														<MvFUNCTIONRETURN VALUE = 0>	<MvCOMMENT> Backordered </MvCOMMENT>
		</MvIF>
	<MvELSEIF EXPR = "{ l.item:status EQ 500 }">
		<MvIF EXPR = "{ l.refund_includes EQ 'received_returns' }">		<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> RMA Issued </MvCOMMENT>
		<MvELSE>														<MvFUNCTIONRETURN VALUE = 0>	<MvCOMMENT> RMA Issued </MvCOMMENT>
		</MvIF>
	<MvELSEIF EXPR = "{ l.item:status EQ 600 }">						<MvFUNCTIONRETURN VALUE = 0>	<MvCOMMENT> Returned </MvCOMMENT>
	<MvELSEIF EXPR = "{ l.item:status EQ 999 }">
		<MvIF EXPR = "{ l.capture_includes EQ 'all' }">					<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Adjustment </MvCOMMENT>
		<MvELSE>														<MvFUNCTIONRETURN VALUE = 0>	<MvCOMMENT> Adjustment </MvCOMMENT>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.capture_includes EQ 'all' }">					<MvFUNCTIONRETURN VALUE = 1>	<MvCOMMENT> Pending </MvCOMMENT>
		<MvELSE>														<MvFUNCTIONRETURN VALUE = 0>	<MvCOMMENT> Pending </MvCOMMENT>
		</MvIF>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Calculate_TargetCaptureAmount" PARAMETERS = "action var, state var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Calculate capture amount. We will determine whether or not a capture or a refund is
	| necessary by comparing the calculated capture amount with the net amount captured
	| for the order. If the calculated capture amount is greater than net_capt, then a
	| capture order payment transaction is necessary. If the calculated capture amount is
	| less than we've already captured, then a refund order payment transaction is necessary.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.state:target"						VALUE = "">
	<MvASSIGN NAME = "l.state:target:item_amount"			VALUE = 0.00>
	<MvASSIGN NAME = "l.state:target:total_amount"			VALUE = 0.00>
	<MvASSIGN NAME = "l.state:target:amount"				VALUE = 0.00>

	<MvIF EXPR = "{ l.state:item:total_amount LE 0 }">
		<MvCOMMENT>
		|
		| All capturable items have been cancelled or returned. All non-refundable order
		| charges (based on workflow settings) should be added to the transaction amount
		| to avoid refunding those charges.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT l.action:act_data:refund_shipping_charges }">	<MvASSIGN NAME = "l.state:target:amount"	VALUE = "{ l.state:target:amount + l.state:charge:shipping_charges }">	</MvIF>
		<MvIF EXPR = "{ NOT l.action:act_data:refund_handling_charges }">	<MvASSIGN NAME = "l.state:target:amount"	VALUE = "{ l.state:target:amount + l.state:charge:handling_charges }">	</MvIF>
		<MvIF EXPR = "{ NOT l.action:act_data:refund_payment_charges }">	<MvASSIGN NAME = "l.state:target:amount"	VALUE = "{ l.state:target:amount + l.state:charge:payment_charges }">	</MvIF>
		<MvIF EXPR = "{ NOT l.action:act_data:refund_tax_charges }">		<MvASSIGN NAME = "l.state:target:amount"	VALUE = "{ l.state:target:amount + l.state:charge:tax_charges }">		</MvIF>
		<MvIF EXPR = "{ NOT l.action:act_data:refund_other_charges }">		<MvASSIGN NAME = "l.state:target:amount"	VALUE = "{ l.state:target:amount + l.state:charge:other_charges }">		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ l.action:act_data:prorate_discounts }">	<MvASSIGN NAME = "l.charge_amount" VALUE = "{ l.state:charge:positive_charges }">
		<MvELSE>												<MvASSIGN NAME = "l.charge_amount" VALUE = "{ l.state:charge:positive_charges + l.state:charge:negative_charges }">
		</MvIF>

		<MvASSIGN NAME = "l.state:target:total_amount"		VALUE = "{ l.state:item:total_amount + l.state:prorate:amount + l.charge_amount }">
		<MvASSIGN NAME = "l.state:target:item_amount"		VALUE = "{ l.state:item:amount + l.state:prorate:amount }">

		<MvIF EXPR = "{ l.action:act_data:capture_includes EQ 'all' OR l.action:act_data:capture_nontax_charges EQ 'first' }">
			<MvASSIGN NAME = "l.state:target:item_amount"	VALUE = "{ l.state:target:item_amount + l.charge_amount }">
		</MvIF>

		<MvIF EXPR = "{ l.state:item:amount LE 0 }">																					<MvASSIGN NAME = "l.state:target:amount" VALUE = 0.00>
		<MvELSEIF EXPR = "{ l.state:item:amount GE l.state:item:total_amount }">														<MvASSIGN NAME = "l.state:target:amount" VALUE = "{ l.state:target:total_amount }">
		<MvELSEIF EXPR = "{ l.state:target:item_amount + l.action:act_data:capture_dollars_within GE l.state:target:total_amount }">	<MvASSIGN NAME = "l.state:target:amount" VALUE = "{ l.state:target:total_amount }">
		<MvELSE>																														<MvASSIGN NAME = "l.state:target:amount" VALUE = "{ l.state:target:item_amount }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Process" PARAMETERS = "workflow var, action var, data var, orderdata_modified var, state var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Calculate amount to process. If the resulting value is positive, a capture is necessary.
	| If the resulting value is negative, a refund is necessary. By normalizing the difference
	| between target capture amount and net captured, we cancel out any floating point error
	| that could occur by direct comparison.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.state:process"									VALUE = "">
	<MvASSIGN NAME = "l.state:process:amount"							VALUE = "{ miva_ieee754_normalize( 2, l.state:target:amount - l.data:order:net_capt ) }">

	<MvIF EXPR = "{ l.state:process:amount EQ 0 }">													<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.state:process:amount GT 0 AND NOT l.action:act_data:capture_enabled }">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.state:process:amount LT 0 AND NOT l.action:act_data:refund_enabled }">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Payment transactions
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.state:process:starting_orderpayments"			VALUE = "{ l.state:orderpayments }">
	<MvASSIGN NAME = "l.state:process:starting_orderpayment_count"		VALUE = "{ l.state:orderpayment_count }">

	<MvIF EXPR = "{ l.state:process:amount GT 0 }">	<MvASSIGN NAME = "l.state:process:result" VALUE = "{ OWFWorkflow_Apply_Action_Payment_Capture_OrderPayments( l.state ) }">
	<MvELSE>										<MvASSIGN NAME = "l.state:process:result" VALUE = "{ OWFWorkflow_Apply_Action_Payment_Refund_OrderPayments( l.state ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.state:process:result }">
		<MvASSIGN NAME = "l.state:process:error_code"					VALUE = "{ g.Error_Code }">
		<MvASSIGN NAME = "l.state:process:error_message"				VALUE = "{ g.Error_Message }">
	</MvIF>

	<MvASSIGN NAME = "l.state:process:ending_orderpayment_count"		VALUE = "{ [ g.Module_Library_DB ].OrderPaymentList_Load_Order( l.data:order:id, l.state:process:ending_orderpayments ) }">

	<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Payment_GenerateAuditLog( l.workflow, l.action, l.data, l.state ) }">								<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Payment_GenerateOrderNote( l.workflow, l.action, l.data, l.orderdata_modified, l.state ) }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT l.state:process:result }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.state:process:error_code, l.state:process:error_message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Capture_OrderPayments" PARAMETERS = "state var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.state:capture"										VALUE = "">
	<MvASSIGN NAME = "l.state:capture:amount"								VALUE = "{ l.state:process:amount }">
	<MvASSIGN NAME = "l.state:capture:available"							VALUE = 0.00>
	<MvASSIGN NAME = "l.state:capture:captured"								VALUE = 0.00>
	<MvASSIGN NAME = "l.state:capture:orderpayments"						VALUE = "">
	<MvASSIGN NAME = "l.state:capture:orderpayment_count"					VALUE = 0>

	<MvASSIGN NAME = "l.result"												VALUE = 1>
	<MvASSIGN NAME = "l.amount_to_capture"									VALUE = "{ l.state:capture:amount }">

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:orderpayments" COUNT = "{ l.state:orderpayment_count }">
		<MvIF EXPR = "{ ( l.orderpayment:type NE 1 ) AND ( l.orderpayment:type NE 3 ) }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ l.orderpayment:available EQ 0 }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.state:capture:available"						VALUE = "{ l.state:capture:available + l.orderpayment:available }">

		<MvIF EXPR = "{ l.amount_to_capture GT 0 }">
			<MvASSIGN NAME = "l.original_available"							VALUE = "{ l.orderpayment:available }">

			<MvIF EXPR = "{ l.amount_to_capture GE l.orderpayment:available }">	<MvASSIGN NAME = "l.amount" VALUE = "{ l.orderpayment:available }">
			<MvELSE>															<MvASSIGN NAME = "l.amount" VALUE = "{ l.amount_to_capture }">
			</MvIF>

			<MvASSIGN NAME = "l.result"										VALUE = "{ OWFWorkflow_Apply_Action_Payment_Capture_OrderPayment( l.orderpayment, l.amount ) }">

			<MvIF EXPR = "{ NOT l.result }">
				<MvFOREACHSTOP>
			</MvIF>

			<MvASSIGN NAME = "l.captured_orderpayment"						VALUE = "">
			<MvASSIGN NAME = "l.captured_orderpayment:id"					VALUE = "{ l.orderpayment:id }">
			<MvASSIGN NAME = "l.captured_orderpayment:available"			VALUE = "{ l.original_available }">
			<MvASSIGN NAME = "l.captured_orderpayment:captured"				VALUE = "{ l.amount }">

			<MvASSIGN NAME = "l.state:capture:orderpayment_count"			VALUE = "{ miva_array_insert_var( l.state:capture:orderpayments, l.captured_orderpayment, -1 ) }">

			<MvASSIGN NAME = "l.amount_to_capture"							VALUE = "{ l.amount_to_capture - l.amount }">
			<MvASSIGN NAME = "l.state:capture:captured"						VALUE = "{ l.state:capture:captured + l.amount }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Capture_OrderPayment" PARAMETERS = "orderpayment var, amount" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.orderpayment:order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00139', 'Order not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.orderpayment:pay_id, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00140', 'Module not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.orderpayment:available - l.amount LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00141', 'The entered value exceeds the uncaptured authorization amount of this transaction' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.orderpayment:type NE 1 ) AND ( l.orderpayment:type NE 3 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00142', 'Invalid transaction type' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.data" VALUE = "{ miva_array_deserialize( l.orderpayment:pay_data ) }">

	<MvIF EXPR = "{ l.orderpayment:pay_secid EQ 0 }">	<MvASSIGN NAME = "l.secure_data" VALUE = "{ miva_array_deserialize( l.orderpayment:pay_secdat ) }">
	<MvELSE>											<MvASSIGN NAME = "l.secure_data" VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ l.module:api_ver GE 5.60 }">
		<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].PaymentModule_OrderPayment_Capture( l.module, l.order, l.orderpayment, l.data, l.secure_data, l.amount ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	<MvELSEIF EXPR = "{ l.orderpayment:available EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00143', 'Legacy authorization has already been processed' ) }">
	<MvELSE>
		<MvASSIGN NAME = "g.Error_Code"			VALUE = "">
		<MvASSIGN NAME = "g.Error_Message"		VALUE = "">

		<MvIF EXPR = "{ [ g.Module_Root $ l.module:module ].PaymentModule_Process( l.module, l.data, l.secure_data, l.order ) LE 0 }">
			<MvASSIGN NAME = "l.error_code"		VALUE = "{ g.Error_Code }">
			<MvASSIGN NAME = "l.error_message"	VALUE = "{ g.Error_Message }">

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderPayment_Update( l.orderpayment, l.data, l.secure_data ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ ( ISNULL l.error_code ) AND ( ISNULL l.error_message ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00144', 'Information regarding the failure may be found in the payment details.' ) }">
			<MvELSE>
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.error_code, l.error_message $ asciichar( 10 ) $ 'Additional information regarding the failure may be found in the payment details.' ) }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.orderpayment:available"	VALUE = 0>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].OrderPayment_Update_Amounts( l.orderpayment ) OR
							NOT [ g.Module_Library_DB ].OrderPayment_Create( l.order:id,
																			 l.orderpayment:id,
																			 2, 
																			 l.order:id,
																			 l.orderpayment:amount, 0,
																			 l.module:id,
																			 l.data,
																			 l.secure_data ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.secure_data" VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_PaymentTotals( l.order ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00145', 'Payment captured order_id=' $ l.order:id $ ' pay_id=' $ l.module:id $ ' amount=' $ ( l.amount ROUND 2 ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_PaymentOperation( 'MER-UTIL-ORWF-00146', 'Capture', l.order:id, l.module:code, l.amount ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Refund_OrderPayments" PARAMETERS = "state var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.state:refund"										VALUE = "">
	<MvASSIGN NAME = "l.state:refund:amount"								VALUE = "{ 0 - l.state:process:amount }">
	<MvASSIGN NAME = "l.state:refund:available"								VALUE = 0.00>
	<MvASSIGN NAME = "l.state:refund:refunded"								VALUE = 0.00>
	<MvASSIGN NAME = "l.state:refund:orderpayments"							VALUE = "">
	<MvASSIGN NAME = "l.state:refund:orderpayment_count"					VALUE = 0>

	<MvASSIGN NAME = "l.result"												VALUE = 1>
	<MvASSIGN NAME = "l.amount_to_refund"									VALUE = "{ l.state:refund:amount }">

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:orderpayments" COUNT = "{ l.state:orderpayment_count }">
		<MvIF EXPR = "{ ( l.orderpayment:type NE 4 ) AND ( l.orderpayment:type NE 5 ) }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ l.orderpayment:available EQ 0 }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.state:refund:available"							VALUE = "{ l.state:refund:available + l.orderpayment:available }">

		<MvIF EXPR = "{ l.amount_to_refund GT 0 }">
			<MvASSIGN NAME = "l.original_available"							VALUE = "{ l.orderpayment:available }">

			<MvIF EXPR = "{ l.amount_to_refund GE l.orderpayment:available }">	<MvASSIGN NAME = "l.amount" VALUE = "{ l.orderpayment:available }">
			<MvELSE>															<MvASSIGN NAME = "l.amount" VALUE = "{ l.amount_to_refund }">
			</MvIF>

			<MvASSIGN NAME = "l.result"										VALUE = "{ OWFWorkflow_Apply_Action_Payment_Refund_OrderPayment( l.orderpayment, l.amount ) }">

			<MvIF EXPR = "{ NOT l.result }">
				<MvFOREACHSTOP>
			</MvIF>

			<MvASSIGN NAME = "l.refunded_orderpayment"						VALUE = "">
			<MvASSIGN NAME = "l.refunded_orderpayment:id"					VALUE = "{ l.orderpayment:id }">
			<MvASSIGN NAME = "l.refunded_orderpayment:available"			VALUE = "{ l.original_available }">
			<MvASSIGN NAME = "l.refunded_orderpayment:refunded"				VALUE = "{ l.amount }">

			<MvASSIGN NAME = "l.state:refund:orderpayment_count"			VALUE = "{ miva_array_insert_var( l.state:refund:orderpayments, l.refunded_orderpayment, -1 ) }">

			<MvASSIGN NAME = "l.amount_to_refund"							VALUE = "{ l.amount_to_refund - l.amount }">
			<MvASSIGN NAME = "l.state:refund:refunded"						VALUE = "{ l.state:refund:refunded + l.amount }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_Refund_OrderPayment" PARAMETERS = "orderpayment, amount" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.orderpayment:order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00147', 'Order not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.orderpayment:pay_id, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00148', 'Module not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.orderpayment:available - l.amount LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00149', 'The entered value exceeds the total captured for this transaction' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.orderpayment:type NE 4 ) AND ( l.orderpayment:type NE 5 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00150', 'Invalid transaction type' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.module:api_ver LT 5.60 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00151', 'Legacy modules do not support refund operations' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.data"			VALUE = "{ miva_array_deserialize( l.orderpayment:pay_data ) }">

	<MvIF EXPR = "{ l.orderpayment:pay_secid EQ 0 }">	<MvASSIGN NAME = "l.secure_data" VALUE = "{ miva_array_deserialize( l.orderpayment:pay_secdat ) }">
	<MvELSE>											<MvASSIGN NAME = "l.secure_data" VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].PaymentModule_OrderPayment_Refund( l.module, l.order, l.orderpayment, l.data, l.secure_data, l.amount ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.secure_data"	VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_PaymentTotals( l.order ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00152', 'Payment refunded order_id=' $ l.order:id $ ' pay_id=' $ l.module:id $ ' amount=' $ ( l.amount ROUND 2 ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_PaymentOperation( 'MER-UTIL-ORWF-00153', 'Refund', l.order:id, l.module:code, l.amount ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_GenerateAuditLog" PARAMETERS = "workflow var, action var, data var, state var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFAuditLog_Load_Order_ID( l.data:order:id, l.auditlog ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.auditlog"												VALUE = "">
		<MvASSIGN NAME = "l.auditlog:order_id" 										VALUE = "{ l.data:order:id }">
		<MvASSIGN NAME = "l.auditlog:log_data"										VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ l.state:item:amount LE 0 }">																					<MvASSIGN NAME = "l.capture_includes" VALUE = "{ l.action:act_data:capture_includes }">
	<MvELSEIF EXPR = "{ l.state:item:amount GE l.state:item:total_amount }">														<MvASSIGN NAME = "l.capture_includes" VALUE = "all">
	<MvELSEIF EXPR = "{ l.state:target:item_amount + l.action:act_data:capture_dollars_within GE l.state:target:total_amount }">	<MvASSIGN NAME = "l.capture_includes" VALUE = "all">
	<MvELSE>																														<MvASSIGN NAME = "l.capture_includes" VALUE = "{ l.action:act_data:capture_includes }">
	</MvIF>

	<MvASSIGN NAME = "l.state:log"													VALUE = "">
	<MvASSIGN NAME = "l.state:log:workflow_id"										VALUE = "{ l.workflow:id }">
	<MvASSIGN NAME = "l.state:log:workflow_name"									VALUE = "{ l.workflow:name }">
	<MvASSIGN NAME = "l.state:log:action:capture_enabled"							VALUE = "{ l.action:act_data:capture_enabled }">
	<MvASSIGN NAME = "l.state:log:action:capture_includes"							VALUE = "{ l.action:act_data:capture_includes }">
	<MvASSIGN NAME = "l.state:log:action:capture_nontax_charges"					VALUE = "{ l.action:act_data:capture_nontax_charges }">
	<MvASSIGN NAME = "l.state:log:action:capture_dollars_within"					VALUE = "{ l.action:act_data:capture_dollars_within }">
	<MvASSIGN NAME = "l.state:log:action:refund_enabled"							VALUE = "{ l.action:act_data:refund_enabled }">
	<MvASSIGN NAME = "l.state:log:action:refund_includes"							VALUE = "{ l.action:act_data:refund_includes }">
	<MvASSIGN NAME = "l.state:log:action:refund_shipping_charges"					VALUE = "{ l.action:act_data:refund_shipping_charges }">
	<MvASSIGN NAME = "l.state:log:action:refund_handling_charges"					VALUE = "{ l.action:act_data:refund_handling_charges }">
	<MvASSIGN NAME = "l.state:log:action:refund_payment_charges"					VALUE = "{ l.action:act_data:refund_payment_charges }">
	<MvASSIGN NAME = "l.state:log:action:refund_tax_charges"						VALUE = "{ l.action:act_data:refund_tax_charges }">
	<MvASSIGN NAME = "l.state:log:action:refund_other_charges"						VALUE = "{ l.action:act_data:refund_other_charges }">
	<MvASSIGN NAME = "l.state:log:action:prorate_discounts"							VALUE = "{ l.action:act_data:prorate_discounts }">
	<MvASSIGN NAME = "l.state:log:log_type"											VALUE = "payment">
	<MvASSIGN NAME = "l.state:log:charges"											VALUE = "">
	<MvASSIGN NAME = "l.state:log:items"											VALUE = "">
	<MvASSIGN NAME = "l.state:log:calculated_capture_amount"						VALUE = "{ l.state:target:amount }">
	<MvASSIGN NAME = "l.state:log:net_capt"											VALUE = "{ l.data:order:net_capt }">

	<MvIF EXPR = "{ l.state:process:amount GT 0 }">
		<MvASSIGN NAME = "l.state:log:operation_type"								VALUE = "capture">
		<MvASSIGN NAME = "l.state:log:capture:amount"								VALUE = "{ l.state:capture:amount }">
		<MvASSIGN NAME = "l.state:log:capture:available"							VALUE = "{ l.state:capture:available }">
		<MvASSIGN NAME = "l.state:log:capture:captured"								VALUE = "{ l.state:capture:captured }">

		<MvASSIGN NAME = "l.state:log:capture:orderpayments"						VALUE = "">

		<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:capture:orderpayments" COUNT = "{ l.state:capture:orderpayment_count }">
			<MvASSIGN NAME = "l.log_orderpayment"									VALUE = "">
			<MvASSIGN NAME = "l.log_orderpayment:id"								VALUE = "{ l.orderpayment:id }">
			<MvASSIGN NAME = "l.log_orderpayment:available"							VALUE = "{ l.orderpayment:available }">
			<MvASSIGN NAME = "l.log_orderpayment:captured"							VALUE = "{ l.orderpayment:captured }">

			<MvASSIGN NAME = "l.null"												VALUE = "{ miva_array_insert_var( l.state:log:capture:orderpayments, l.log_orderpayment, -1 ) }">
		</MvFOREACH>
	<MvELSE>
		<MvASSIGN NAME = "l.state:log:operation_type"								VALUE = "refund">
		<MvASSIGN NAME = "l.state:log:refund:amount"								VALUE = "{ l.state:refund:amount }">
		<MvASSIGN NAME = "l.state:log:refund:available"								VALUE = "{ l.state:refund:available }">
		<MvASSIGN NAME = "l.state:log:refund:refunded"								VALUE = "{ l.state:refund:refunded }">

		<MvASSIGN NAME = "l.state:log:refund:orderpayments"							VALUE = "">

		<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:refund:orderpayments" COUNT = "{ l.state:refund:orderpayment_count }">
			<MvASSIGN NAME = "l.log_orderpayment"									VALUE = "">
			<MvASSIGN NAME = "l.log_orderpayment:id"								VALUE = "{ l.orderpayment:id }">
			<MvASSIGN NAME = "l.log_orderpayment:available"							VALUE = "{ l.orderpayment:available }">
			<MvASSIGN NAME = "l.log_orderpayment:refunded"							VALUE = "{ l.orderpayment:refunded }">

			<MvASSIGN NAME = "l.null"												VALUE = "{ miva_array_insert_var( l.state:log:refund:orderpayments, l.log_orderpayment, -1 ) }">
		</MvFOREACH>
	</MvIF>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.data:order:items" COUNT = "{ l.state:orderitem_count }">
		<MvREFERENCEARRAY NAME = "l.prorate_item_amount" VARIABLE = "l.state:prorate:lookup">
			<MvDIMENSION INDEX = "{ l.item:line_id }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.log_item"												VALUE = "">
		<MvASSIGN NAME = "l.log_item:code"											VALUE = "{ l.item:code }">
		<MvASSIGN NAME = "l.log_item:name"											VALUE = "{ l.item:name }">
		<MvASSIGN NAME = "l.log_item:sku"											VALUE = "{ l.item:sku }">
		<MvASSIGN NAME = "l.log_item:quantity"										VALUE = "{ l.item:quantity }">
		<MvASSIGN NAME = "l.log_item:tax"											VALUE = "{ l.item:tax }">
		<MvASSIGN NAME = "l.log_item:item_discount"									VALUE = 0.00>

		<MvIF EXPR = "{ ISNULL l.prorate_item_amount }">	<MvASSIGN NAME = "l.log_item:prorated_order_discount" VALUE = 0.00>
		<MvELSE>											<MvASSIGN NAME = "l.log_item:prorated_order_discount" VALUE = "{ l.prorate_item_amount }">
		</MvIF>

		<MvASSIGN NAME = "l.log_item:subtotal"										VALUE = "{ l.item:base_price * l.item:quantity }">	<MvCOMMENT> Undiscounted Item Total Based on base_price </MvCOMMENT>
		<MvASSIGN NAME = "l.log_item:calculated_capture_amount"						VALUE = 0.00>										<MvCOMMENT> Total amount if this is a capturable item </MvCOMMENT>

		<MvFOREACH ITERATOR = "l.discount" ARRAY = "l.item:discounts">
			<MvASSIGN NAME = "l.log_item:item_discount"								VALUE = "{ l.log_item:item_discount + ( l.log_item:quantity * ( 0 - l.discount:discount ) ) }">
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.option" ARRAY = "l.item:options">
			<MvFOREACH ITERATOR = "l.discount" ARRAY = "l.option:discounts">
				<MvASSIGN NAME = "l.log_item:item_discount"							VALUE = "{ l.log_item:item_discount + ( l.log_item:quantity * ( 0 - l.discount:discount ) ) }">
			</MvFOREACH>

			<MvASSIGN NAME = "l.log_item:subtotal"									VALUE = "{ l.log_item:subtotal + ( l.log_item:quantity * l.option:base_price ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.log_item:total"											VALUE = "{ l.log_item:subtotal + l.log_item:item_discount + l.log_item:prorated_order_discount }">

		<MvIF EXPR = "{ OWFWorkflow_Apply_Action_Payment_Calculate_ShouldCaptureItem( l.capture_includes, l.action:act_data:refund_includes, l.item ) }">
			<MvASSIGN NAME = "l.log_item:calculated_capture_amount"					VALUE = "{ l.log_item:total }">
		</MvIF>

		<MvASSIGN NAME = "l.null"													VALUE = "{ miva_array_insert_var( l.state:log:items, l.log_item, -1 ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.charge" ARRAY = "l.data:order:charges">
		<MvASSIGN NAME = "l.log_charge"												VALUE = "">
		<MvASSIGN NAME = "l.log_charge:charge_id"									VALUE = "{ l.charge:charge_id }">
		<MvASSIGN NAME = "l.log_charge:type"										VALUE = "{ l.charge:type }">
		<MvASSIGN NAME = "l.log_charge:descrip"										VALUE = "{ l.charge:descrip }">
		<MvASSIGN NAME = "l.log_charge:amount"										VALUE = "{ l.charge:amount }">
		<MvASSIGN NAME = "l.log_charge:tax"											VALUE = "{ l.charge:tax }">
		<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"					VALUE = 0.00>

		<MvIF EXPR = "{ l.state:item:total_amount LE 0 }">
			<MvCOMMENT>
			|
			| All items are in a refundable state. Only include non-negative order charges
			| in the target capture amount if they cannot be refunded
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.charge:amount LT 0 }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.charge:type EQ 'SHIPPING' }">
				<MvIF EXPR = "{ NOT l.action:act_data:refund_shipping_charges }">
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.charge:type EQ 'HANDLING' }">
				<MvIF EXPR = "{ NOT l.action:act_data:refund_handling_charges }">
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.charge:type EQ 'PAYMENT' }">
				<MvIF EXPR = "{ NOT l.action:act_data:refund_payment_charges }">
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }">
				</MvIF>
			<MvELSEIF EXPR = "{ l.charge:type EQ 'TAX' }">
				<MvIF EXPR = "{ NOT l.action:act_data:refund_tax_charges }">
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }"> <MvCOMMENT> Item Level Tax is not filtered out here </MvCOMMENT>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ NOT l.action:act_data:refund_other_charges }">
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }">
				</MvIF>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ l.capture_includes EQ 'all' OR l.action:act_data:capture_nontax_charges EQ 'first' }">
				<MvIF EXPR = "{ l.charge:amount LT 0 }">
					<MvIF EXPR = "{ NOT l.action:act_data:prorate_discounts }">
						<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"	VALUE = "{ l.charge:amount }">
					</MvIF>
				<MvELSEIF EXPR = "{ l.charge:type EQ 'SHIPPING' }">
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }">
				<MvELSEIF EXPR = "{ l.charge:type EQ 'HANDLING' }">
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }">
				<MvELSEIF EXPR = "{ l.charge:type EQ 'PAYMENT' }">
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }">
				<MvELSEIF EXPR = "{ l.charge:type EQ 'TAX' }">
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }"> <MvCOMMENT> Item Level Tax is not filtered out here </MvCOMMENT>
				<MvELSE>
					<MvASSIGN NAME = "l.log_charge:calculated_capture_amount"		VALUE = "{ l.charge:amount }">
				</MvIF>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.null"													VALUE = "{ miva_array_insert_var( l.state:log:charges, l.log_charge, -1 ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.state:log:starting_orderpayments"							VALUE = "">

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:process:starting_orderpayments" COUNT = "{ l.state:process:starting_orderpayment_count }">
		<MvASSIGN NAME = "l.log_orderpayment"										VALUE = "">
		<MvASSIGN NAME = "l.log_orderpayment:id"									VALUE = "{ l.orderpayment:id }">
		<MvASSIGN NAME = "l.log_orderpayment:type"									VALUE = "{ l.orderpayment:type }">
		<MvASSIGN NAME = "l.log_orderpayment:refnum"								VALUE = "{ l.orderpayment:refnum }">
		<MvASSIGN NAME = "l.log_orderpayment:amount"								VALUE = "{ l.orderpayment:amount }">
		<MvASSIGN NAME = "l.log_orderpayment:available"								VALUE = "{ l.orderpayment:available }">
		<MvASSIGN NAME = "l.log_orderpayment:pay_id"								VALUE = "{ l.orderpayment:pay_id }">

		<MvASSIGN NAME = "l.null"													VALUE = "{ miva_array_insert_var( l.state:log:starting_orderpayments, l.log_orderpayment, -1 ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.state:log:ending_orderpayments"								VALUE = "">

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:process:ending_orderpayments" COUNT = "{ l.state:process:ending_orderpayment_count }">
		<MvASSIGN NAME = "l.log_orderpayment"										VALUE = "">
		<MvASSIGN NAME = "l.log_orderpayment:id"									VALUE = "{ l.orderpayment:id }">
		<MvASSIGN NAME = "l.log_orderpayment:type"									VALUE = "{ l.orderpayment:type }">
		<MvASSIGN NAME = "l.log_orderpayment:refnum"								VALUE = "{ l.orderpayment:refnum }">
		<MvASSIGN NAME = "l.log_orderpayment:amount"								VALUE = "{ l.orderpayment:amount }">
		<MvASSIGN NAME = "l.log_orderpayment:available"								VALUE = "{ l.orderpayment:available }">
		<MvASSIGN NAME = "l.log_orderpayment:pay_id"								VALUE = "{ l.orderpayment:pay_id }">

		<MvASSIGN NAME = "l.null"													VALUE = "{ miva_array_insert_var( l.state:log:ending_orderpayments, l.log_orderpayment, -1 ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.null"														VALUE = "{ miva_array_insert_var( l.auditlog:log_data, l.state:log, -1 ) }">

	<MvIF EXPR = "{ NOT OWFAuditLog_InsertOrUpdate( l.auditlog ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>	

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Payment_GenerateOrderNote" PARAMETERS = "workflow var, action var, data var, orderdata_modified var, state var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.action:act_data:add_notes }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.note"			VALUE = "{ 'Order workflow: \''						$ l.workflow:name $ '\''																														$ asciichar( 13 ) $ asciichar( 10 ) $ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.note"			VALUE = "{ l.note $ 'Action: Payment'																																								$ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.note"			VALUE = "{ l.note $ 'Calculated Capture Amount: '	$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:calculated_capture_amount )		$ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.note"			VALUE = "{ l.note $ 'Net Captured Amount: '			$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:net_capt )						$ asciichar( 13 ) $ asciichar( 10 ) }">

	<MvIF EXPR = "{ l.state:log:operation_type EQ 'capture' }">
		<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Operation Type: Capture'																																						$ asciichar( 13 ) $ asciichar( 10 ) }">
		<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Amount To Capture: '			$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:capture:amount )				$ asciichar( 13 ) $ asciichar( 10 ) }">
		<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Amount Available To Capture: '	$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:capture:available )				$ asciichar( 13 ) $ asciichar( 10 ) }">
		<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Amount Captured: '				$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:capture:captured )				$ asciichar( 13 ) $ asciichar( 10 ) }">

		<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:log:capture:orderpayments">
			<MvASSIGN NAME = "l.note"	VALUE = "{ l.note $ 'Captured ' $ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderpayment:captured ) $ ' of ' $ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderpayment:available ) $ ' for Payment ID ' $ l.orderpayment:id $ asciichar( 13 ) $ asciichar( 10 ) }">
		</MvFOREACH>
	<MvELSE>
		<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Operation Type: Refund'																																						$ asciichar( 13 ) $ asciichar( 10 ) }">
		<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Amount To Refund: '			$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:refund:amount )					$ asciichar( 13 ) $ asciichar( 10 ) }">
		<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Amount Available To Refund: '	$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:refund:available )				$ asciichar( 13 ) $ asciichar( 10 ) }">
		<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Amount Refunded: '				$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:refund:refunded )				$ asciichar( 13 ) $ asciichar( 10 ) }">

		<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:log:refund:orderpayments">
			<MvASSIGN NAME = "l.note"	VALUE = "{ l.note $ 'Refunded ' $ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderpayment:refunded ) $ ' of ' $ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderpayment:available ) $ ' for Payment ID ' $ l.orderpayment:id $ asciichar( 13 ) $ asciichar( 10 ) }">
		</MvFOREACH>
	</MvIF>

	<MvIF EXPR = "{ NOT l.state:process:result }">
		<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ asciichar( 13 ) $ asciichar( 10 ) $ 'Error: transaction failed: ' $ l.state:process:error_code $ ': ' $ l.state:process:error_message }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Add_Note( l.workflow, l.action, l.data, l.orderdata_modified, l.note ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_VOID" PARAMETERS = "workflow var, action var, data var, orderdata_modified var" STANDARDOUTPUTLEVEL = "">
	<MvLOCKFILE FILE = "{ [ g.Module_Feature_PAY_UT ].Order_Payment_LockFile( l.data:order:id ) }">
		<MvASSIGN NAME = "l.result" VALUE = "{ OWFWorkflow_Apply_Action_VOID_LowLevel( l.workflow, l.action, l.data, l.orderdata_modified ) }">
	</MvLOCKFILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_VOID_LowLevel" PARAMETERS = "workflow var, action var, data var, orderdata_modified var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Reload order data inside lock file
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT OWFOrder_Load_ID( l.data:order:id, l.data ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00182', 'Order not found' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.state"										VALUE = "">
	<MvASSIGN NAME = "l.state:orderpayment_count"					VALUE = "{ [ g.Module_Library_DB ].OrderPaymentList_Load_Order( l.data:order:id, l.state:orderpayments ) }">

	<MvCOMMENT>
	|
	| Ensure no legacy authorizations exist in this order
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_ValidateOrderPayments( l.workflow, l.action, l.data, l.orderdata_modified, l.state ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.state:process"								VALUE = "">
	<MvASSIGN NAME = "l.state:process:amount"						VALUE = 0.00>

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:orderpayments" COUNT = "{ l.state:orderpayment_count }">
		<MvIF EXPR = "{ l.orderpayment:type EQ 3 }">
			<MvASSIGN NAME = "l.state:process:amount"				VALUE = "{ l.state:process:amount + l.orderpayment:available }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.state:process:amount LE 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Payment transactions
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.state:process:starting_orderpayments"		VALUE = "{ l.state:orderpayments }">
	<MvASSIGN NAME = "l.state:process:starting_orderpayment_count"	VALUE = "{ l.state:orderpayment_count }">

	<MvASSIGN NAME = "l.state:process:result"						VALUE = "{ OWFWorkflow_Apply_Action_VOID_OrderPayments( l.state ) }">

	<MvIF EXPR = "{ NOT l.state:process:result }">
		<MvASSIGN NAME = "l.state:process:error_code"				VALUE = "{ g.Error_Code }">
		<MvASSIGN NAME = "l.state:process:error_message"			VALUE = "{ g.Error_Message }">
	</MvIF>

	<MvASSIGN NAME = "l.state:process:ending_orderpayment_count"	VALUE = "{ [ g.Module_Library_DB ].OrderPaymentList_Load_Order( l.data:order:id, l.state:process:ending_orderpayments ) }">

	<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_VOID_GenerateAuditLog( l.workflow, l.action, l.data, l.state ) }">								<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ NOT OWFWorkflow_Apply_Action_VOID_GenerateOrderNote( l.workflow, l.action, l.data, l.orderdata_modified, l.state ) }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT l.state:process:result }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.state:process:error_code, l.state:process:error_message ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_VOID_OrderPayments" PARAMETERS = "state var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.state:void"								VALUE = "">
	<MvASSIGN NAME = "l.state:void:amount"						VALUE = "{ l.state:process:amount }">
	<MvASSIGN NAME = "l.state:void:available"					VALUE = 0.00>
	<MvASSIGN NAME = "l.state:void:voided"						VALUE = 0.00>
	<MvASSIGN NAME = "l.state:void:orderpayments"				VALUE = "">
	<MvASSIGN NAME = "l.state:void:orderpayment_count"			VALUE = 0>

	<MvASSIGN NAME = "l.result"									VALUE = 1>
	<MvASSIGN NAME = "l.amount_to_void"							VALUE = "{ l.state:void:amount }">

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:orderpayments" COUNT = "{ l.state:orderpayment_count }">
		<MvIF EXPR = "{ l.orderpayment:type NE 3 }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ l.orderpayment:available EQ 0 }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.state:void:available"				VALUE = "{ l.state:void:available + l.orderpayment:available }">

		<MvIF EXPR = "{ l.amount_to_void GT 0 }">
			<MvASSIGN NAME = "l.original_available"				VALUE = "{ l.orderpayment:available }">

			<MvIF EXPR = "{ l.amount_to_void GE l.orderpayment:available }">	<MvASSIGN NAME = "l.amount" VALUE = "{ l.orderpayment:available }">
			<MvELSE>															<MvASSIGN NAME = "l.amount" VALUE = "{ l.amount_to_void }">
			</MvIF>

			<MvASSIGN NAME = "l.result"							VALUE = "{ OWFWorkflow_Apply_Action_VOID_OrderPayment( l.orderpayment, l.amount ) }">

			<MvIF EXPR = "{ NOT l.result }">
				<MvFOREACHSTOP>
			</MvIF>

			<MvASSIGN NAME = "l.voided_orderpayment"			VALUE = "">
			<MvASSIGN NAME = "l.voided_orderpayment:id"			VALUE = "{ l.orderpayment:id }">
			<MvASSIGN NAME = "l.voided_orderpayment:available"	VALUE = "{ l.original_available }">
			<MvASSIGN NAME = "l.voided_orderpayment:voided"		VALUE = "{ l.amount }">

			<MvASSIGN NAME = "l.state:void:orderpayment_count"	VALUE = "{ miva_array_insert_var( l.state:void:orderpayments, l.voided_orderpayment, -1 ) }">

			<MvASSIGN NAME = "l.amount_to_void"					VALUE = "{ l.amount_to_void - l.amount }">
			<MvASSIGN NAME = "l.state:void:voided"				VALUE = "{ l.state:void:voided + l.amount }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_VOID_OrderPayment" PARAMETERS = "orderpayment, amount" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Load_ID( l.orderpayment:order_id, l.order ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00173', 'Order not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_ID( l.orderpayment:pay_id, l.module ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00174', 'Module not found' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.orderpayment:available - l.amount LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00175', 'The entered value exceeds the uncaptured authorization amount of this transaction' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.orderpayment:type NE 3 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00176', 'Invalid transaction type' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.module:api_ver LT 5.60 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00177', 'Legacy modules do not support void operations' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.data"			VALUE = "{ miva_array_deserialize( l.orderpayment:pay_data ) }">
	<MvASSIGN NAME = "l.secure_data"	VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Root $ l.module:module ].PaymentModule_OrderPayment_VOID( l.module, l.order, l.orderpayment, l.data, l.secure_data, l.amount ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.secure_data"	VALUE = "">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Order_Update_PaymentTotals( l.order ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00178', 'Payment voided order_id=' $ l.order:id $ ' pay_id=' $ l.module:id $ ' amount=' $ ( l.amount ROUND 2 ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_PaymentOperation( 'MER-UTIL-ORWF-00179', 'Void', l.order:id, l.module:code, l.amount ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_VOID_GenerateAuditLog" PARAMETERS = "workflow var, action var, data var, state var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFAuditLog_Load_Order_ID( l.data:order:id, l.auditlog ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.auditlog"						VALUE = "">
		<MvASSIGN NAME = "l.auditlog:order_id" 				VALUE = "{ l.data:order:id }">
		<MvASSIGN NAME = "l.auditlog:log_data"				VALUE = "">
	</MvIF>

	<MvASSIGN NAME = "l.state:log"							VALUE = "">
	<MvASSIGN NAME = "l.state:log:workflow_id"				VALUE = "{ l.workflow:id }">
	<MvASSIGN NAME = "l.state:log:workflow_name"			VALUE = "{ l.workflow:name }">
	<MvASSIGN NAME = "l.state:log:log_type"					VALUE = "void">
	<MvASSIGN NAME = "l.state:log:void:amount"				VALUE = "{ l.state:void:amount }">
	<MvASSIGN NAME = "l.state:log:void:available"			VALUE = "{ l.state:void:available }">
	<MvASSIGN NAME = "l.state:log:void:voided"				VALUE = "{ l.state:void:voided }">

	<MvASSIGN NAME = "l.state:log:void:orderpayments"		VALUE = "">

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:void:orderpayments" COUNT = "{ l.state:void:orderpayment_count }">
		<MvASSIGN NAME = "l.log_orderpayment"				VALUE = "">
		<MvASSIGN NAME = "l.log_orderpayment:id"			VALUE = "{ l.orderpayment:id }">
		<MvASSIGN NAME = "l.log_orderpayment:available"		VALUE = "{ l.orderpayment:available }">
		<MvASSIGN NAME = "l.log_orderpayment:voided"		VALUE = "{ l.orderpayment:voided }">

		<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.state:log:void:orderpayments, l.log_orderpayment, -1 ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.state:log:starting_orderpayments"	VALUE = "">

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:process:starting_orderpayments" COUNT = "{ l.state:process:starting_orderpayment_count }">
		<MvASSIGN NAME = "l.log_orderpayment"				VALUE = "">
		<MvASSIGN NAME = "l.log_orderpayment:id"			VALUE = "{ l.orderpayment:id }">
		<MvASSIGN NAME = "l.log_orderpayment:type"			VALUE = "{ l.orderpayment:type }">
		<MvASSIGN NAME = "l.log_orderpayment:refnum"		VALUE = "{ l.orderpayment:refnum }">
		<MvASSIGN NAME = "l.log_orderpayment:amount"		VALUE = "{ l.orderpayment:amount }">
		<MvASSIGN NAME = "l.log_orderpayment:available"		VALUE = "{ l.orderpayment:available }">
		<MvASSIGN NAME = "l.log_orderpayment:pay_id"		VALUE = "{ l.orderpayment:pay_id }">

		<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.state:log:starting_orderpayments, l.log_orderpayment, -1 ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.state:log:ending_orderpayments"		VALUE = "">

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:process:ending_orderpayments" COUNT = "{ l.state:process:ending_orderpayment_count }">
		<MvASSIGN NAME = "l.log_orderpayment"				VALUE = "">
		<MvASSIGN NAME = "l.log_orderpayment:id"			VALUE = "{ l.orderpayment:id }">
		<MvASSIGN NAME = "l.log_orderpayment:type"			VALUE = "{ l.orderpayment:type }">
		<MvASSIGN NAME = "l.log_orderpayment:refnum"		VALUE = "{ l.orderpayment:refnum }">
		<MvASSIGN NAME = "l.log_orderpayment:amount"		VALUE = "{ l.orderpayment:amount }">
		<MvASSIGN NAME = "l.log_orderpayment:available"		VALUE = "{ l.orderpayment:available }">
		<MvASSIGN NAME = "l.log_orderpayment:pay_id"		VALUE = "{ l.orderpayment:pay_id }">

		<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert_var( l.state:log:ending_orderpayments, l.log_orderpayment, -1 ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.null"								VALUE = "{ miva_array_insert_var( l.auditlog:log_data, l.state:log, -1 ) }">

	<MvIF EXPR = "{ NOT OWFAuditLog_InsertOrUpdate( l.auditlog ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>	

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_VOID_GenerateOrderNote" PARAMETERS = "workflow var, action var, data var, orderdata_modified var, state var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT l.action:act_data:add_notes }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.note"		VALUE = "{ 'Order workflow: \''						$ l.workflow:name $ '\''																											$ asciichar( 13 ) $ asciichar( 10 ) $ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Action: VOID'																																						$ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Amount To VOID: '				$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:void:amount )		$ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Amount Available To VOID: '	$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:void:available )	$ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.note"		VALUE = "{ l.note $ 'Amount VOIDED: '				$ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.state:log:void:voided )		$ asciichar( 13 ) $ asciichar( 10 ) }">

	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:log:void:orderpayments">
		<MvASSIGN NAME = "l.note"	VALUE = "{ l.note $ 'VOIDED ' $ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderpayment:voided ) $ ' of ' $ [ g.Module_Root $ g.Store:currncy_mod:module ].CurrencyModule_AddFormatting( g.Store:currncy_mod, l.orderpayment:available ) $ ' for Payment ID ' $ l.orderpayment:id $ asciichar( 13 ) $ asciichar( 10 ) }">
	</MvFOREACH>

	<MvIF EXPR = "{ NOT l.state:process:result }">
		<MvASSIGN NAME = "l.note"	VALUE = "{ l.note $ asciichar( 13 ) $ asciichar( 10 ) $ 'Error: transaction failed: ' $ l.state:process:error_code $ ': ' $ l.state:process:error_message }">
	</MvIF>

	<MvIF EXPR = "{ NOT OWFWorkflow_Apply_Action_Add_Note( l.workflow, l.action, l.data, l.orderdata_modified, l.note ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_ValidateOrderPayments" PARAMETERS = "workflow var, action var, data var, orderdata_modified var, state var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.state:orderpayments" COUNT = "{ l.state:orderpayment_count }">
		<MvIF EXPR = "{ l.orderpayment:type EQ 0 }">		<MvCOMMENT> Declined </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.orderpayment:type EQ 1 }">	<MvCOMMENT> Legacy Authorization </MvCOMMENT>
			<MvFUNCTIONRETURN VALUE = "{ OWFWorkflow_Apply_Action_ValidateOrderPayments_Error( l.workflow, l.action, l.data, l.orderdata_modified ) }">
		<MvELSEIF EXPR = "{ l.orderpayment:type EQ 2 }">	<MvCOMMENT> Legacy Capture </MvCOMMENT>
			<MvFUNCTIONRETURN VALUE = "{ OWFWorkflow_Apply_Action_ValidateOrderPayments_Error( l.workflow, l.action, l.data, l.orderdata_modified ) }">
		<MvELSEIF EXPR = "{ l.orderpayment:type EQ 3 }">	<MvCOMMENT> Authorization </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.orderpayment:type EQ 4 }">	<MvCOMMENT> Capture </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.orderpayment:type EQ 5 }">	<MvCOMMENT> Authorization + Capture </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.orderpayment:type EQ 6 }">	<MvCOMMENT> Refund </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.orderpayment:type EQ 7 }">	<MvCOMMENT> VOID </MvCOMMENT>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_ValidateOrderPayments_Error" PARAMETERS = "workflow var, action var, data var, orderdata_modified var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ OWFWorkflow_Apply_Action_Add_Note( l.workflow, l.action, l.data, l.orderdata_modified, 'Order workflow rule \'' $ l.workflow:name $ '\'' $ asciichar( 13 ) $ asciichar( 10 ) $ 'Error: Legacy payment transactions are not supported in workflow payment operations' ) }">

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00162', 'Legacy payment transactions are not supported in workflow payment operations' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Apply_Action_Add_Note" PARAMETERS = "workflow var, action var, data var, orderdata_modified var, notetext" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.note"				VALUE = "">
	<MvASSIGN NAME = "l.note:user_id"		VALUE = 0>
	<MvASSIGN NAME = "l.note:order_id" 		VALUE = "{ l.data:order:id }">
	<MvASSIGN NAME = "l.note:cust_id" 		VALUE = "{ l.data:order:cust_id }">
	<MvASSIGN NAME = "l.note:notetext"		VALUE = "{ l.notetext }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Note_Insert( l.note ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.orderdata_modified" VALUE = 1>
	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTIL-ORWF-00161', 'Order Workflow \'' $ l.workflow:name $ '\': Action \'' $ l.action:act $ '\': Note inserted for order \'' $ l.data:order:id $ '\'' ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFOrder_Load_ID" PARAMETERS = "order_id, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.ondemandcolumn_count"				VALUE = "{ miva_array_insert( l.ondemandcolumns, 'CustomField_Values:*',	-1 ) }">

	<MvASSIGN NAME = "l.filter"								VALUE = "">
	<MvASSIGN NAME = "l.filter" INDEX = 1 MEMBER = "name"	VALUE = "ondemandcolumns">
	<MvASSIGN NAME = "l.filter" INDEX = 1 MEMBER = "value"	VALUE = "{ l.ondemandcolumns }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.query, 'ord.*,
																		  cust.login	AS cust_login,
																		  cust.pw_email	AS cust_pw_email,
																		  ba.title		AS business_title,
																		  opm.name		AS payment_module' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.query, g.Store_Table_Prefix $ 'Orders', 'ord' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'ord', g.Store_Table_Prefix $ 'Customers',		'cust', 'cust.id = ord.cust_id',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'ord', g.Store_Table_Prefix $ 'BusinessAccounts',	'ba',	'cust.account_id = ba.id',	'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'ord', 'Modules',									'opm',	'opm.id = ord.pay_id',		'' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.query, 'ord.id = ?', [ g.Module_Library_DB ].SQL_Query_Field( l.order_id ) ) }">
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Query_Callback_With_CustomFields( l.query, l.filter, g.Module_JSON, 'JSON_Order_CustomFields_Query' ) }">

	<MvASSIGN NAME = "l.sql" VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.query, l.fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Orders', l.sql, l.fields, 0, 1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00047', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ Orders.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "Orders">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00183' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Order_CustomFields_Initialize( l.filter, l.customfield_state ) }">

	<MvCAPTURE VARIABLE = "l.data:json_order" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	{
		<MvASSIGN NAME = "l.ondemandcolumns:ship_method"			VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:cust_login"				VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:cust_pw_email"			VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:business_title"			VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:payment_module"			VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:customer"				VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:items"					VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:charges"				VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:coupons"				VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:discounts"				VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:payments"				VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:payment_data"			VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:notes"					VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:shipments"				VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:returns"				VALUE = 1>
		<MvASSIGN NAME = "l.ondemandcolumns:CustomField_Values:*"	VALUE = 1>

		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].v56_Order_Read( l.order ) }">

		<MvASSIGN NAME = "l.order:cust_login"						VALUE = "{ Orders.d.cust_login }">
		<MvASSIGN NAME = "l.order:cust_pw_email"					VALUE = "{ Orders.d.cust_pw_email }">
		<MvASSIGN NAME = "l.order:business_title"					VALUE = "{ Orders.d.business_title }">
		<MvASSIGN NAME = "l.order:payment_module"					VALUE = "{ Orders.d.payment_module }">

		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Order_OnDemandColumns( l.order, l.ondemandcolumns ) }">
		<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Order_CustomFields_With_Query( l.query, l.customfield_state, Orders.d.id, 'Orders' ) }">
	}
	</MvCAPTURE>

	<MvIF EXPR = "{ NOT miva_json_decode( l.data:json_order, l.data:order ) }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "Orders">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00048', miva_json_decode_last_error() ) }">
	</MvIF>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Orders">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFCustomFields_Generic_Query_Field_Alias" PARAMETERS = "queue var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'owqxo_' $ int( l.queue:id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFCustomFields_Generic_Data_Order" PARAMETERS = "code, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data"					VALUE = "">
	<MvASSIGN NAME = "l.data:queue"				VALUE = "">

	<MvFUNCTIONRETURN VALUE = "{ OWFQueue_Load_Code_Cached( l.code, l.data:queue ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFCustomFields_Generic_Alias_In_Use" PARAMETERS = "query var, alias" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Data_Reference( l.query, 'orderworkflow_tables', l.ref ) }">

	<MvREFERENCEARRAY NAME = "l.in_use" VARIABLE = "l.ref:data">
		<MvMEMBER NAME = "{ l.alias }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.in_use }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.in_use" VALUE = 1>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFCustomFields_Generic_Query" PARAMETERS = "data var, query var, code" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_Data_Reference( l.query, 'orderworkflow', l.ref ) }">

	<MvREFERENCEARRAY NAME = "l.queried" VARIABLE = "l.ref:data:queried_codes">
		<MvMEMBER NAME = "{ l.code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ l.queried }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.queried"		VALUE = 1>
	<MvASSIGN NAME = "l.alias"			VALUE = "{ OWFCustomFields_Generic_Query_Field_Alias( l.data:queue ) }">
	<MvASSIGN NAME = "l.record"			VALUE = "">
	<MvASSIGN NAME = "l.record:alias"	VALUE = "{ l.alias }">
	<MvASSIGN NAME = "l.record:code"	VALUE = "{ l.code }">
	<MvASSIGN NAME = "l.record:field"	VALUE = "{ l.data:queue }">
	<MvASSIGN NAME = "l.null"			VALUE = "{ miva_array_insert_ref( l.ref:data:orderworkflow_codes, l.record, -1 ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT_NULL_INTEGER( l.query, l.alias $ '.order_id', l.alias $ '_value' ) }">

	<MvIF EXPR = "{ NOT OWFCustomFields_Generic_Alias_In_Use( l.query, l.alias ) }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.query, 'ord', g.Store_Table_Prefix $ 'OWFQueueXOrder', l.alias, l.alias $ '.queue_id = ? AND ' $ l.alias $ '.order_id = ord.id', [ g.Module_Library_DB ].SQL_Query_Field( l.data:queue:id ) ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_OrderWorkFlowQueues
|
</MvCOMMENT>

<MvFUNCTION NAME = "OWFQueue_Read" PARAMETERS = "queue var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.queue:id"	VALUE = "{ OWFQueues.d.id }">
	<MvASSIGN NAME = "l.queue:code"	VALUE = "{ OWFQueues.d.code }">
	<MvASSIGN NAME = "l.queue:name"	VALUE = "{ OWFQueues.d.name }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueue_Insert" PARAMETERS = "queue var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.queue:id" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'OWFQueues' ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'OWFQueues
						  ( id, code, name )
						  VALUES
						  ( ?, ?, ? )' }"
			 FIELDS	= "l.queue:id, l.queue:code, l.queue:name">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00049', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueue_Update" PARAMETERS = "queue var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'OWFQueues
			 			  SET
			 			  	code	= ?,
			 			  	name	= ?
			 			  WHERE
			 			  	id		= ?' }"
			 FIELDS = "l.queue:code, l.queue:name,
			 		   l.queue:id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00050', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueue_Delete" PARAMETERS = "queue var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFQueueXOrder_Delete_All_Queue( l.queue:id ) OR
					NOT OWFQueue_Delete_ID( l.queue:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueue_Delete_ID" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFQueues WHERE id = ?' }"
			 FIELDS = "l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00051', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueue_Load_ID" PARAMETERS = "id, queue var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFQueues"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFQueues WHERE id = ?' }"
				FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00052', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFQueues.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueues">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00053' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFQueue_Read( l.queue ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueues">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueue_Load_Code_Cached" PARAMETERS = "code, queue var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.cache" VARIABLE = "g.Session:cache:orderworkflow:owfqueue_load_code">
		<MvMEMBER NAME = "{ l.code }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ ISNULL l.cache:result }">
		<MvASSIGN NAME = "l.cache:result"				VALUE = "{ OWFQueue_Load_Code( l.code, l.cache:queue ) }">

		<MvIF EXPR = "{ NOT l.cache:result }">
			<MvASSIGN NAME = "l.cache:error_code"		VALUE = "{ g.Error_Code }">
			<MvASSIGN NAME = "l.cache:error_message"	VALUE = "{ g.Error_Message }">
			<MvASSIGN NAME = "l.cache:error_db_eof"		VALUE = "{ g.Error_DB_EOF }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.cache:result }">
		<MvIF EXPR = "{ l.cache:error_db_eof }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( l.cache:error_code ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.cache:error_code, l.cache:error_message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.queue"							VALUE = "{ l.cache:queue }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueue_Load_Code" PARAMETERS = "code, queue var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFQueues"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFQueues WHERE ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'code' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) }"
				FIELDS	= "l.code">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00054', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFQueues.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueues">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00055' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFQueue_Read( l.queue ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueues">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueueList_Load_All" PARAMETERS = "queues var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFQueues"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFQueues ORDER BY id' }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00056', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT OWFQueues.d.EOF }">
		<MvEVAL EXPR = "{ OWFQueue_Read( l.queues[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFQueues" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueues">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00057', l.count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueueList_Load_Order" PARAMETERS = "order_id, queues var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFQueues"
				QUERY 	= "{ 'SELECT
								owq.*
							  FROM ' $ 
							  	g.Store_Table_Prefix $ 'OWFQueues owq, ' $ 
							  	g.Store_Table_Prefix $ 'OWFQueueXOrder owqxo
							  WHERE
							  	owq.id			= owqxo.queue_id AND
							  	owqxo.order_id	= ?
							  ORDER BY owq.id' }"
				FIELDS	= "l.order_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00058', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT OWFQueues.d.EOF }">
		<MvEVAL EXPR = "{ OWFQueue_Read( l.queues[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFQueues" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueues">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00059', l.count ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_OWFAuthenticationCredentials
|
</MvCOMMENT>

<MvFUNCTION NAME = "OWFAuthenticationCredentials_Read" PARAMETERS = "credentials var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.credentials:id"			VALUE = "{ OWFAuthenticationCredentials.d.id }">
	<MvASSIGN NAME = "l.credentials:descrip"	VALUE = "{ OWFAuthenticationCredentials.d.descrip }">
	<MvASSIGN NAME = "l.credentials:auth_type"	VALUE = "{ OWFAuthenticationCredentials.d.auth_type }">
	<MvASSIGN NAME = "l.credentials:auth_data"	VALUE = "{ miva_array_deserialize( OWFAuthenticationCredentials.d.auth_data ) }">
	<MvASSIGN NAME = "l.credentials:refcount"	VALUE = "{ OWFAuthenticationCredentials.d.refcount }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuthenticationCredentials_Insert" PARAMETERS = "credentials var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.credentials:id"	VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'OWFAuthenticationCredentials' ) }">
	<MvASSIGN NAME = "l.auth_data"		VALUE = "{ miva_array_serialize( l.credentials:auth_data ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials
						  ( id, descrip, auth_type, auth_data, refcount )
						  VALUES
						  ( ?, ?, ?, ?, ? )' }"
			 FIELDS	= "l.credentials:id, l.credentials:descrip, l.credentials:auth_type, l.auth_data, l.credentials:refcount">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00127', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuthenticationCredentials_Update" PARAMETERS = "credentials var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.auth_data" VALUE = "{ miva_array_serialize( l.credentials:auth_data ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials
			 			  SET
			 			  	descrip		= ?,
			 			  	auth_type	= ?,
			 			  	auth_data	= ?,
			 			  	refcount	= ?
			 			  WHERE
			 			  	id			= ?' }"
			 FIELDS = "l.credentials:descrip, l.credentials:auth_type, l.auth_data, l.credentials:refcount,
			 		   l.credentials:id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00128', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuthenticationCredentials_Increment_ReferenceCount" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials SET refcount = refcount + 1 WHERE id = ?' }"
			 FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvASSIGN NAME = "l.error_message" VALUE = "{ g.MvQUERY_Error }">

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00129', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuthenticationCredentials_Decrement_ReferenceCount" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials SET refcount = refcount - 1 WHERE id = ?' }"
			 FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00130', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuthenticationCredentials_Delete_ID" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials WHERE id = ?' }"
			 FIELDS = "l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00131', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuthenticationCredentials_Load_ID" PARAMETERS = "id, credentials var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFAuthenticationCredentials"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials WHERE id = ?' }"
				FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00132', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFAuthenticationCredentials.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFAuthenticationCredentials">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00133' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFAuthenticationCredentials_Read( l.credentials ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFAuthenticationCredentials">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuthenticationCredentials_Load_ID_Cached" PARAMETERS = "id, credentials var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.id"								VALUE = "{ int( l.id ) }">

	<MvIF EXPR = "{ l.id LE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00134' ) }">
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.cache" 					VARIABLE = "g.Session:cache:owfauthenticationcredentials_load_id">
		<MvDIMENSION INDEX = "{ l.id }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ ISNULL l.cache:result }">
		<MvASSIGN NAME = "l.cache:result"				VALUE = "{ OWFAuthenticationCredentials_Load_ID( l.id, l.cache:credentials ) }">

		<MvIF EXPR = "{ NOT l.cache:result }">
			<MvASSIGN NAME = "l.cache:error_code"		VALUE = "{ g.Error_Code }">
			<MvASSIGN NAME = "l.cache:error_message"	VALUE = "{ g.Error_Message }">
			<MvASSIGN NAME = "l.cache:error_db_eof"		VALUE = "{ g.Error_DB_EOF }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.cache:result }">
		<MvIF EXPR = "{ l.cache:error_db_eof }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( l.cache:error_code ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.cache:error_code, l.cache:error_message ) }">
	</MvIF>

	<MvASSIGN NAME = "l.credentials"					VALUE = "{ l.cache:credentials }">

	<MvFUNCTIONRETURN VALUE = "{ l.cache:result }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuthenticationCredentials_Load_Description" PARAMETERS = "descrip, credentials var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFAuthenticationCredentials"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFAuthenticationCredentials WHERE ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'descrip' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) }"
				FIELDS	= "l.descrip">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00135', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFAuthenticationCredentials.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFAuthenticationCredentials">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00136' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFAuthenticationCredentials_Read( l.credentials ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFAuthenticationCredentials">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_OWFAuditLog
|
</MvCOMMENT>

<MvFUNCTION NAME = "OWFAuditLog_Read" PARAMETERS = "auditlog var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.auditlog:order_id"		VALUE = "{ OWFAuditLog.d.order_id }">
	<MvASSIGN NAME = "l.null"					VALUE = "{ miva_json_decode( OWFAuditLog.d.log_data, l.auditlog:log_data ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuditLog_Insert" PARAMETERS = "auditlog var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.log_data" VALUE = "{ OWFAuditLog_JSON_Encode( l.auditlog:log_data ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'OWFAuditLog
						  ( order_id, log_data )
						  VALUES
						  ( ?, ? )' }"
			 FIELDS	= "l.auditlog:order_id, l.log_data">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00166', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuditLog_Update" PARAMETERS = "auditlog var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.log_data" VALUE = "{ OWFAuditLog_JSON_Encode( l.auditlog:log_data ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'OWFAuditLog
			 			  SET
			 			  	log_data	= ?
			 			  WHERE
			 			  	order_id	= ?' }"
			 FIELDS = "l.log_data,
			 		   l.auditlog:order_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00167', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuditLog_InsertOrUpdate" PARAMETERS = "auditlog var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT OWFAuditLog_Insert( l.auditlog ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_Error_IsIndexDuplicate( g.Error_Message ) }">	<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT OWFAuditLog_Update( l.auditlog ) }">											<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuditLog_Delete_Order_ID" PARAMETERS = "order_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFAuditLog WHERE order_id = ?' }"
			 FIELDS = "l.order_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00168', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuditLog_Load_Order_ID" PARAMETERS = "order_id, auditlog var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFAuditLog"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFAuditLog WHERE order_id = ?' }"
				FIELDS	= "l.order_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00169', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFAuditLog.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFAuditLog">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00170' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFAuditLog_Read( l.auditlog ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFAuditLog">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuditLogUndecodedData_Load_Order_ID" PARAMETERS = "order_id, unencoded_log_data var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFAuditLog"
				QUERY 	= "{ 'SELECT log_data FROM ' $ g.Store_Table_Prefix $ 'OWFAuditLog WHERE order_id = ?' }"
				FIELDS	= "l.order_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00171', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFAuditLog.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFAuditLog">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00172' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.unencoded_log_data" VALUE = "{ OWFAuditLog.d.log_data }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFAuditLog">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuditLog_JSON_Encode" PARAMETERS = "log_data var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.value" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	[
		<MvASSIGN NAME = "l.log_count" VALUE = 0>

		<MvFOREACH ITERATOR = "l.log" ARRAY = "l.log_data">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.log_count ) }">
				"workflow_id":								<MvEVAL EXPR = "{ int( l.log:workflow_id ) }">,
				"workflow_name":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.log:workflow_name ) }">",
				"log_type":									"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.log:log_type ) }">"

				<MvIF EXPR = "{ l.log:log_type EQ 'payment' }">
					, <MvEVAL EXPR = "{ OWFAuditLog_JSON_Encode_Payment( l.log ) }">
				<MvELSEIF EXPR = "{ l.log:log_type EQ 'void' }">
					, <MvEVAL EXPR = "{ OWFAuditLog_JSON_Encode_VOID( l.log ) }">
				</MvIF>
				
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuditLog_JSON_Encode_Payment" PARAMETERS = "log var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.value" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		"action":
		{
			"capture_enabled":						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.log:action:capture_enabled ) }">,
			"capture_includes":						"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.log:action:capture_includes ) }">",
			"capture_nontax_charges":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.log:action:capture_nontax_charges ) }">",
			"capture_dollars_within":				<MvEVAL EXPR = "{ l.log:action:capture_dollars_within ROUND 2 }">,
			"refund_enabled":						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.log:action:refund_enabled ) }">,
			"refund_includes":						"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.log:action:refund_includes ) }">",
			"refund_shipping_charges":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.log:action:refund_shipping_charges ) }">,
			"refund_handling_charges":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.log:action:refund_handling_charges ) }">,
			"refund_payment_charges":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.log:action:refund_payment_charges ) }">,
			"refund_tax_charges":					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.log:action:refund_tax_charges ) }">,
			"refund_other_charges":					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.log:action:refund_other_charges ) }">,
			"prorate_discounts":					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.log:action:prorate_discounts ) }">
		},
		"calculated_capture_amount":				<MvEVAL EXPR = "{ l.log:calculated_capture_amount ROUND 2 }">,
		"net_capt":									<MvEVAL EXPR = "{ l.log:net_capt ROUND 2 }">,
		"operation_type":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.log:operation_type ) }">",

		<MvIF EXPR = "{ l.log:operation_type EQ 'capture' }">
			"capture":
			{
				"amount":							<MvEVAL EXPR = "{ l.log:capture:amount ROUND 2 }">,
				"available":						<MvEVAL EXPR = "{ l.log:capture:available ROUND 2 }">,
				"captured":							<MvEVAL EXPR = "{ l.log:capture:captured ROUND 2 }">,
				"orderpayments":
				[
					<MvASSIGN NAME = "l.orderpayment_count" VALUE = 0>

					<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.log:capture:orderpayments">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.orderpayment_count ) }">
							"id":					<MvEVAL EXPR = "{ int( l.orderpayment:id ) }">,
							"available":			<MvEVAL EXPR = "{ l.orderpayment:available ROUND 2 }">,
							"captured":				<MvEVAL EXPR = "{ l.orderpayment:captured ROUND 2 }">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					</MvFOREACH>
				]
			},
		<MvELSE>
			"refund":
			{
				"amount":							<MvEVAL EXPR = "{ l.log:refund:amount ROUND 2 }">,
				"available":						<MvEVAL EXPR = "{ l.log:refund:available ROUND 2 }">,
				"refunded":							<MvEVAL EXPR = "{ l.log:refund:refunded ROUND 2 }">,
				"orderpayments":
				[
					<MvASSIGN NAME = "l.orderpayment_count" VALUE = 0>

					<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.log:refund:orderpayments">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.orderpayment_count ) }">
							"id":					<MvEVAL EXPR = "{ int( l.orderpayment:id ) }">,
							"available":			<MvEVAL EXPR = "{ l.orderpayment:available ROUND 2 }">,
							"refunded":				<MvEVAL EXPR = "{ l.orderpayment:refunded ROUND 2 }">
						<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					</MvFOREACH>
				]
			},
		</MvIF>

		"items":
		[
			<MvASSIGN NAME = "l.item_count" VALUE = 0>

			<MvFOREACH ITERATOR = "l.item" ARRAY = "l.log:items">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.item_count ) }">
					"code":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item:code ) }">",
					"name":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item:name ) }">",
					"sku":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.item:sku ) }">",
					"quantity":						<MvEVAL EXPR = "{ int( l.item:quantity ) }">,
					"tax":							<MvEVAL EXPR = "{ l.item:tax ROUND 2 }">,
					"item_discount":				<MvEVAL EXPR = "{ l.item:item_discount ROUND 2 }">,
					"prorated_order_discount":		<MvEVAL EXPR = "{ l.item:prorated_order_discount ROUND 2 }">,
					"subtotal":						<MvEVAL EXPR = "{ l.item:subtotal ROUND 2 }">,
					"total":						<MvEVAL EXPR = "{ l.item:total ROUND 2 }">,
					"calculated_capture_amount":	<MvEVAL EXPR = "{ l.item:calculated_capture_amount ROUND 2 }">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			</MvFOREACH>
		],
		"charges":
		[
			<MvASSIGN NAME = "l.charge_count" VALUE = 0>

			<MvFOREACH ITERATOR = "l.charge" ARRAY = "l.log:charges">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.charge_count ) }">
					"charge_id":					<MvEVAL EXPR = "{ int( l.charge:charge_id ) }">,
					"type":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.charge:type ) }">",
					"descrip":						"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.charge:descrip ) }">",
					"amount":						<MvEVAL EXPR = "{ l.charge:amount ROUND 2 }">,
					"tax":							<MvEVAL EXPR = "{ l.charge:tax ROUND 2 }">,
					"calculated_capture_amount":	<MvEVAL EXPR = "{ l.charge:calculated_capture_amount ROUND 2 }">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			</MvFOREACH>
		],
		"starting_orderpayments":
		[
			<MvASSIGN NAME = "l.orderpayment_count" VALUE = 0>

			<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.log:starting_orderpayments">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.orderpayment_count ) }">
					"id":							<MvEVAL EXPR = "{ int( l.orderpayment:id ) }">,
					"type":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.orderpayment:type ) }">",
					"refnum":						"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.orderpayment:refnum ) }">",
					"amount":						<MvEVAL EXPR = "{ l.orderpayment:amount ROUND 2 }">,
					"available":					<MvEVAL EXPR = "{ l.orderpayment:available ROUND 2 }">,
					"pay_id":						<MvEVAL EXPR = "{ int( l.orderpayment:pay_id ) }">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			</MvFOREACH>
		],
		"ending_orderpayments":
		[
			<MvASSIGN NAME = "l.orderpayment_count" VALUE = 0>

			<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.log:ending_orderpayments">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.orderpayment_count ) }">
					"id":							<MvEVAL EXPR = "{ int( l.orderpayment:id ) }">,
					"type":							"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.orderpayment:type ) }">",
					"refnum":						"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.orderpayment:refnum ) }">",
					"amount":						<MvEVAL EXPR = "{ l.orderpayment:amount ROUND 2 }">,
					"available":					<MvEVAL EXPR = "{ l.orderpayment:available ROUND 2 }">,
					"pay_id":						<MvEVAL EXPR = "{ int( l.orderpayment:pay_id ) }">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			</MvFOREACH>
		]
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFAuditLog_JSON_Encode_VOID" PARAMETERS = "log var" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.value" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
		"void":
		{
			"amount":					<MvEVAL EXPR = "{ l.log:void:amount ROUND 2 }">,
			"available":				<MvEVAL EXPR = "{ l.log:void:available ROUND 2 }">,
			"voided":					<MvEVAL EXPR = "{ l.log:void:voided ROUND 2 }">,
			"orderpayments":
			[
				<MvASSIGN NAME = "l.orderpayment_count" VALUE = 0>

				<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.log:void:orderpayments">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.orderpayment_count ) }">
						"id":			<MvEVAL EXPR = "{ int( l.orderpayment:id ) }">,
						"available":	<MvEVAL EXPR = "{ l.orderpayment:available ROUND 2 }">,
						"voided":		<MvEVAL EXPR = "{ l.orderpayment:voided ROUND 2 }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
				</MvFOREACH>
			]
		},
		"starting_orderpayments":
		[
			<MvASSIGN NAME = "l.orderpayment_count" VALUE = 0>

			<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.log:starting_orderpayments">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.orderpayment_count ) }">
					"id":				<MvEVAL EXPR = "{ int( l.orderpayment:id ) }">,
					"type":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.orderpayment:type ) }">",
					"refnum":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.orderpayment:refnum ) }">",
					"amount":			<MvEVAL EXPR = "{ l.orderpayment:amount ROUND 2 }">,
					"available":		<MvEVAL EXPR = "{ l.orderpayment:available ROUND 2 }">,
					"pay_id":			<MvEVAL EXPR = "{ int( l.orderpayment:pay_id ) }">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			</MvFOREACH>
		],
		"ending_orderpayments":
		[
			<MvASSIGN NAME = "l.orderpayment_count" VALUE = 0>

			<MvFOREACH ITERATOR = "l.orderpayment" ARRAY = "l.log:ending_orderpayments">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.orderpayment_count ) }">
					"id":				<MvEVAL EXPR = "{ int( l.orderpayment:id ) }">,
					"type":				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.orderpayment:type ) }">",
					"refnum":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.orderpayment:refnum ) }">",
					"amount":			<MvEVAL EXPR = "{ l.orderpayment:amount ROUND 2 }">,
					"available":		<MvEVAL EXPR = "{ l.orderpayment:available ROUND 2 }">,
					"pay_id":			<MvEVAL EXPR = "{ int( l.orderpayment:pay_id ) }">
				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
			</MvFOREACH>
		]
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_OWFWorkflows
|
</MvCOMMENT>

<MvFUNCTION NAME = "OWFWorkflow_Read" PARAMETERS = "workflow var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow:id"			VALUE = "{ OWFWorkflows.d.id }">
	<MvASSIGN NAME = "l.workflow:enabled"		VALUE = "{ OWFWorkflows.d.enabled }">
	<MvASSIGN NAME = "l.workflow:name"			VALUE = "{ OWFWorkflows.d.name }">
	<MvASSIGN NAME = "l.workflow:cond"			VALUE = "{ miva_array_deserialize( OWFWorkflows.d.cond ) }">
	<MvASSIGN NAME = "l.workflow:wait_for"		VALUE = "{ OWFWorkflows.d.wait_for }">
	<MvASSIGN NAME = "l.workflow:wait_int"		VALUE = "{ OWFWorkflows.d.wait_int }">
	<MvASSIGN NAME = "l.workflow:wait_max"		VALUE = "{ OWFWorkflows.d.wait_max }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Insert" PARAMETERS = "workflow var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflow:id"			VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'OWFWorkflows' ) }">
	<MvASSIGN NAME = "l.serialized_cond"		VALUE = "{ miva_array_serialize( l.workflow:cond ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'OWFWorkflows
						  ( id, enabled, name, cond, wait_for, wait_int, wait_max )
						  VALUES
						  ( ?, ?, ?, ?, ?, ?, ? )' }"
			 FIELDS	= "l.workflow:id, l.workflow:enabled, l.workflow:name, l.serialized_cond,
			 		   l.workflow:wait_for, l.workflow:wait_int, l.workflow:wait_max">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00060', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Update" PARAMETERS = "workflow var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.serialized_cond"		VALUE = "{ miva_array_serialize( l.workflow:cond ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'OWFWorkflows
			 			  SET
			 			  	enabled		= ?,
			 			  	name		= ?,
			 			  	cond		= ?,
			 			  	wait_for	= ?,
			 			  	wait_int	= ?,
			 			  	wait_max	= ?
			 			  WHERE
			 			  	id			= ?' }"
			 FIELDS = "l.workflow:enabled, l.workflow:name, l.serialized_cond,
			 		   l.workflow:wait_for, l.workflow:wait_int, l.workflow:wait_max,
			 		   l.workflow:id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00061', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Delete" PARAMETERS = "workflow var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.action" ARRAY = "l.actions" COUNT = "{ OWFWorkflowActionList_Load_Workflow( l.workflow:id, l.actions ) }">
		<MvIF EXPR = "{ NOT OWFWorkflowAction_Delete_ID( l.action:id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ ( l.action:act EQ 'webhook_get' OR l.action:act EQ 'webhook_post_order' ) AND l.action:act_data:cred_id }">
			<MvIF EXPR = "{ NOT OWFAuthenticationCredentials_Decrement_ReferenceCount( l.action:act_data:cred_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ NOT OWFWaitQueue_Delete_All_Workflow_ID( l.workflow:id ) OR
					NOT OWFWorkflowTrigger_Delete_All_Workflow( l.workflow:id ) OR
					NOT OWFWorkflow_Delete_ID( l.workflow:id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Delete_ID" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflows WHERE id = ?' }"
			 FIELDS = "l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00062', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Load_ID" PARAMETERS = "id, workflow var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFWorkflows"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflows WHERE id = ?' }"
				FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00063', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFWorkflows.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflows">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00064' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFWorkflow_Read( l.workflow ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflows">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflow_Load_Name" PARAMETERS = "name, workflow var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFWorkflows"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflows WHERE ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( 'name' ) $ ' = ' $ [ g.Module_Library_Native_DBAPI ].DB_Compare_UPPER( '?' ) }"
				FIELDS	= "l.name">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00065', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFWorkflows.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflows">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00066' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFWorkflow_Read( l.workflow ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflows">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowList_Load_All" PARAMETERS = "workflows var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFWorkflows"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflows ORDER BY id' }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00067', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT OWFWorkflows.d.EOF }">
		<MvEVAL EXPR = "{ OWFWorkflow_Read( l.workflows[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFWorkflows" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflows">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00068', l.count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowList_Load_Trigger" PARAMETERS = "trigger, workflows var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFWorkflows"
				QUERY 	= "{ 'SELECT
							  	wf.*
							  FROM ' $
							  	g.Store_Table_Prefix $ 'OWFWorkflows wf,' $ 
							  	g.Store_Table_Prefix $ 'OWFWorkflowTriggers wft
							  WHERE
							  	wft.trig_code	= ?				AND
							  	wf.id			= wft.flow_id	AND
							  	wf.enabled		= 1
							  ORDER BY wf.id' }"
				FIELDS	= "l.trigger">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00069', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT OWFWorkflows.d.EOF }">
		<MvEVAL EXPR = "{ OWFWorkflow_Read( l.workflows[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFWorkflows" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflows">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00070', l.count ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_OWFWorkflowTriggers
|
</MvCOMMENT>

<MvFUNCTION NAME = "OWFWorkflowTrigger_Read" PARAMETERS = "workflowtrigger var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.workflowtrigger:flow_id"	VALUE = "{ OWFWorkflowTriggers.d.flow_id }">
	<MvASSIGN NAME = "l.workflowtrigger:trig_code"	VALUE = "{ OWFWorkflowTriggers.d.trig_code }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowTrigger_Insert" PARAMETERS = "flow_id, trig_code" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers
					      ( flow_id, trig_code )
						  VALUES
						  ( ?, ? )' }"
			 FIELDS	= "l.flow_id, l.trig_code">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00071', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowTrigger_Delete" PARAMETERS = "flow_id, trig_code" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers
						  WHERE
							flow_id		= ? AND
							trig_code	= ?' }"
			 FIELDS	= "l.flow_id, l.trig_code">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00072', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowTrigger_Load" PARAMETERS = "flow_id, trig_code, workflowtrigger var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "OWFWorkflowTriggers"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers WHERE flow_id = ? AND trig_code = ?' }"
			    FIELDS	= "l.flow_id, l.trig_code">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00073', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFWorkflowTriggers.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflowTriggers">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00074' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFWorkflowTrigger_Read( l.workflowtrigger ) }">
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflowTriggers">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowTriggerList_Load_Workflow" PARAMETERS = "flow_id, workflowtriggerlist var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "OWFWorkflowTriggers"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers where flow_id = ?' }"
				FIELDS	= "l.flow_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00075', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>
	<MvWHILE EXPR = "{ NOT OWFWorkflowTriggers.d.EOF }">
		<MvEVAL EXPR = "{ OWFWorkflowTrigger_Read( l.workflowtriggerlist[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFWorkflowTriggers" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflowTriggers">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00076', l.count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowTriggerList_Load_Trigger" PARAMETERS = "trig_code, workflowtriggerlist var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "OWFWorkflowTriggers"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers where trig_code = ?' }"
				FIELDS	= "l.trig_code">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00077', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>
	<MvWHILE EXPR = "{ NOT OWFWorkflowTriggers.d.EOF }">
		<MvEVAL EXPR = "{ OWFWorkflowTrigger_Read( l.workflowtriggerlist[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFWorkflowTriggers" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflowTriggers">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00078', l.count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowTrigger_Delete_All_Workflow" PARAMETERS = "flow_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers WHERE flow_id = ?' }"
			 FIELDS	= "l.flow_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00079', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowTrigger_Delete_All_Trigger" PARAMETERS = "trig_code" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowTriggers WHERE trig_code = ?' }"
			 FIELDS	= "l.trig_code">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00080', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_OWFWorkflowActions
|
</MvCOMMENT>

<MvFUNCTION NAME = "OWFWorkflowAction_Read" PARAMETERS = "action var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.action:id"			VALUE = "{ OWFWorkflowActions.d.id }">
	<MvASSIGN NAME = "l.action:flow_id"		VALUE = "{ OWFWorkflowActions.d.flow_id }">
	<MvASSIGN NAME = "l.action:act"			VALUE = "{ OWFWorkflowActions.d.act }">
	<MvASSIGN NAME = "l.action:act_data"	VALUE = "{ miva_array_deserialize( OWFWorkflowActions.d.act_data ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowAction_Insert" PARAMETERS = "action var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.action:id"				VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'OWFWorkflowActions' ) }">
	<MvASSIGN NAME = "l.serialized_act_data"	VALUE = "{ miva_array_serialize( l.action:act_data ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions
						  ( id, flow_id, act, act_data )
						  VALUES
						  ( ?, ?, ?, ? )' }"
			 FIELDS	= "l.action:id, l.action:flow_id, l.action:act, l.serialized_act_data">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00081', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowAction_Update" PARAMETERS = "action var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.serialized_act_data"	VALUE = "{ miva_array_serialize( l.action:act_data ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions
			 			  SET
			 			  	act			= ?,
			 			  	act_data	= ?
			 			  WHERE
			 			  	id			= ?' }"
			 FIELDS = "l.action:act, l.serialized_act_data,
			 		   l.action:id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00082', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowAction_Delete_ID" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions WHERE id = ?' }"
			 FIELDS = "l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00083', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowAction_Delete_All_Workflow" PARAMETERS = "flow_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions WHERE flow_id = ?' }"
			 FIELDS = "l.flow_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00084', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowAction_Load_ID" PARAMETERS = "id, action var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFWorkflowActions"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions WHERE id = ?' }"
				FIELDS	= "l.id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00085', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFWorkflowActions.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflowActions">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00086' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFWorkflowAction_Read( l.action ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflowActions">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWorkflowActionList_Load_Workflow" PARAMETERS = "flow_id, actions var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFWorkflowActions"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWorkflowActions WHERE flow_id = ? ORDER BY id' }"
				FIELDS	= "l.flow_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00087', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT OWFWorkflowActions.d.EOF }">
		<MvEVAL EXPR = "{ OWFWorkflowAction_Read( l.actions[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFWorkflowActions" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWorkflowActions">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00088', l.count ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_OWFQueueXOrder
|
</MvCOMMENT>

<MvFUNCTION NAME = "OWFQueueXOrder_Read" PARAMETERS = "queuexorder var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.queuexorder:queue_id" VALUE = "{ OWFQueueXOrder.d.queue_id }">
	<MvASSIGN NAME = "l.queuexorder:order_id" VALUE = "{ OWFQueueXOrder.d.order_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueueXOrder_Insert" PARAMETERS = "queue_id, order_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder
					      ( queue_id, order_id )
						  VALUES
						  ( ?, ? )' }"
			 FIELDS	= "l.queue_id, l.order_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00089', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueueXOrder_Delete" PARAMETERS = "queue_id, order_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder
						  WHERE
							queue_id	= ? AND
							order_id	= ?' }"
			 FIELDS	= "l.queue_id, l.order_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00090', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueueXOrder_Load" PARAMETERS = "queue_id, order_id, queuexorder var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "OWFQueueXOrder"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder WHERE queue_id = ? AND order_id = ?' }"
			    FIELDS	= "l.queue_id, l.order_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00091', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ OWFQueueXOrder.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueueXOrder">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( 'MER-UTIL-ORWF-00092' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ OWFQueueXOrder_Read( l.queuexorder ) }">
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueueXOrder">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueueXOrderList_Load_Order" PARAMETERS = "order_id, queuexorderlist var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFQueueXOrder"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder WHERE order_id = ? ORDER BY queue_id' }"
			    FIELDS	= "l.order_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00093', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT OWFQueueXOrder.d.EOF }">
		<MvEVAL EXPR = "{ OWFQueueXOrder_Read( l.queuexorderlist[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFQueueXOrder" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFQueueXOrder">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00094', l.count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueueXOrder_Delete_All_Queue" PARAMETERS = "queue_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder WHERE queue_id = ?' }"
			 FIELDS	= "l.queue_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00095', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFQueueXOrder_Delete_All_Order" PARAMETERS = "order_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFQueueXOrder WHERE order_id = ?' }"
			 FIELDS	= "l.order_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00096', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| sNN_OWFWaitQueue
|
</MvCOMMENT>

<MvFUNCTION NAME = "OWFWaitQueue_Read" PARAMETERS = "entry var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.entry:flow_id"		VALUE = "{ OWFWaitQueue.d.flow_id }">
	<MvASSIGN NAME = "l.entry:order_id"		VALUE = "{ OWFWaitQueue.d.order_id }">
	<MvASSIGN NAME = "l.entry:firstcheck"	VALUE = "{ OWFWaitQueue.d.firstcheck }">
	<MvASSIGN NAME = "l.entry:lastcheck"	VALUE = "{ OWFWaitQueue.d.lastcheck }">
	<MvASSIGN NAME = "l.entry:nextcheck"	VALUE = "{ OWFWaitQueue.d.nextcheck }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWaitQueue_Insert" PARAMETERS = "entry var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'OWFWaitQueue
						  ( flow_id, order_id, firstcheck, lastcheck, nextcheck )
						  VALUES
						  ( ?, ?, ?, ?, ? )' }"
			 FIELDS	= "l.entry:flow_id, l.entry:order_id, l.entry:firstcheck, l.entry:lastcheck, l.entry:nextcheck">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00097', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWaitQueue_Update" PARAMETERS = "entry var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'OWFWaitQueue
			 			  SET
			 			  	firstcheck	= ?,
			 			  	lastcheck	= ?,
			 			  	nextcheck	= ?
			 			  WHERE
			 			  	flow_id		= ? AND
			 			  	order_id	= ?' }"
			 FIELDS = "l.entry:firstcheck, l.entry:lastcheck, l.entry:nextcheck,
			 		   l.entry:flow_id, l.entry:order_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00098', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWaitQueue_Delete" PARAMETERS = "flow_id, order_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFWaitQueue WHERE flow_id = ? AND order_id = ?' }"
			 FIELDS = "l.flow_id, l.order_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00099', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWaitQueue_Delete_All_Workflow_ID" PARAMETERS = "flow_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFWaitQueue WHERE flow_id = ?' }"
			 FIELDS = "l.flow_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00100', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWaitQueue_Delete_All_Order_ID" PARAMETERS = "order_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'OWFWaitQueue WHERE order_id = ?' }"
			 FIELDS = "l.order_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00101', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWaitQueueList_Load_All" PARAMETERS = "entries var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFWaitQueue"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWaitQueue ORDER BY flow_id, order_id' }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00102', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT OWFWaitQueue.d.EOF }">
		<MvEVAL EXPR = "{ OWFWaitQueue_Read( l.entries[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFWaitQueue" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWaitQueue">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00103', l.count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OWFWaitQueueList_Load_Pending" PARAMETERS = "nextcheck, entries var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "OWFWaitQueue"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'OWFWaitQueue WHERE nextcheck <= ? ORDER BY nextcheck, flow_id, order_id' }"
				FIELDS	= "l.nextcheck">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTIL-ORWF-00114', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvWHILE EXPR = "{ NOT OWFWaitQueue.d.EOF }">
		<MvEVAL EXPR = "{ OWFWaitQueue_Read( l.entries[ ++l.count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "OWFWaitQueue" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "OWFWaitQueue">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTIL-ORWF-00115', l.count ) }">
</MvFUNCTION>

<MvINCLUDE FILE = "modules/util/orderworkflow/functions.mv">
<MvINCLUDE FILE = "modules/util/orderworkflow/authenticationcredentialslist.mv">
<MvINCLUDE FILE = "modules/util/orderworkflow/authenticationcredentialsdialog.mv">
<MvINCLUDE FILE = "modules/util/orderworkflow/queuelist.mv">
<MvINCLUDE FILE = "modules/util/orderworkflow/queueadddialog.mv">
<MvINCLUDE FILE = "modules/util/orderworkflow/workflowlist.mv">
<MvINCLUDE FILE = "modules/util/orderworkflow/workflowaddeditdialog.mv">
<MvINCLUDE FILE = "json/mivascript.mv">
