<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2025 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-UTL-IGR-
| Next Error Code: 39   
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "mmlsk-imagemanagement">
	<MvASSIGN NAME = "l.module:name"		VALUE = "Image Management">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Miva Merchant">
	<MvASSIGN NAME = "l.module:version"		VALUE = "10.1201">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "5.70">
	<MvASSIGN NAME = "l.module:description"	VALUE = "The Image Management screen is used to manage Images on the Product page.  Once you have installed the module, you can access Image Management under Utilities in the main menu.">
	<MvASSIGN NAME = "l.module:features"	VALUE = "util, clientside, clientside_sri, json, provision_store, scheduledtask">
</MvFUNCTION>

<MvCOMMENT>
|
| Store Utilities Feature (util)
|
</MvCOMMENT>

<MvFUNCTION NAME = "StoreUtilityModule_Validate" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Action" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Screen" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ ISNULL g.Admin_Open_Store }">							<MvFUNCTIONRETURN VALUE = 1>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN VALUE = 1>	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginScreen_Start( 'Image Management', '', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_AdminUI_CSS() }">
	<MvEVAL EXPR = "{ Element_ImageManagement_ImageList_CSS( l.module ) }">

	<MvIF EXPR = "{ [ g.Module_Admin ].Element_Admin_Core_JavaScript_Combined_Begin() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_UI_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_AJAX_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_Functions_JavaScript() }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_Admin_Core_JavaScript_Combined_End() }">
	</MvIF>

	<MvIF EXPR = "{ Element_ImageManagement_JavaScript_Combined_Begin( l.module ) }">
		<MvEVAL EXPR = "{ Element_ImageManagement_ImageList_JavaScript( l.module ) }">
		<MvEVAL EXPR = "{ Element_ImageManagement_JavaScript_Combined_End( l.module ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginScreen_End( 'Image Management', '', '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginContent() }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawTabs( 'IMGM', 'IMGM:Image Management' ) }">

	<script language="JavaScript">
		MMScreen_LoadFinished( function() { new ImageManagement_ImageList(); } );
	</script>

	<MvHIDE FIELDS = "g.Module_Code">

	<MvEVAL EXPR = "{ Element_ImageManagement_ImageList_HTML( l.module ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].EndContent() }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawButtons( '' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].EndScreen() }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_LeftNavigation"  PARAMETERS = "module var, indent" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.Admin_Open_Store }">							<MvFUNCTIONRETURN VALUE = 1>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN VALUE = 1>	</MvIF>
	
	<MvEVAL EXPR = "{ [ g.Module_Admin ].LeftNavigation_Dot( l.indent - 1, 'Screen=SUTL&Store_Code=' $ encodeattribute( g.Store:code ) $ '&Module_Code=' $ encodeattribute( l.module:code ), 'Main', 'Image Management' ) }">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Module Client Side Feature (clientside)
|
</MvCOMMENT>

<MvINCLUDE FILE = "modules/util/imagemanagement/combined.mv">

<MvFUNCTION NAME = "Module_Clientside" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( '.js' EIN g.Filename ) EQ len_var( g.Filename ) }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Filename EQ 'combined.js' }">									<MvFUNCTIONRETURN VALUE = "{ Element_ImageManagement_JavaScript_Combined( l.module ) }">
	<MvELSEIF EXPR = "{ Module_Clientside_Output_File( l.module, g.Filename ) }">	<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.null"	VALUE = "{ miva_output_header( 'Status', '404 Not Found' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Output_File" PARAMETERS = "module var, filename" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/util/imagemanagement/output.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_File_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/util/imagemanagement/integrity.mv">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Clientside_Combined_Integrity" PARAMETERS = "module var, filename, minified" STANDARDOUTPUTLEVEL = "">
	<MvINCLUDE FILE = "modules/util/imagemanagement/combined_integrity.mv">
</MvFUNCTION>

<MvCOMMENT>
|
| Module JSON Feature (json)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'ImageManagement_ImageList_Load_Query' }">						<MvFUNCTIONRETURN VALUE = "{ JSON_ImageManagement_ImageList_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'ImageManagement_Image_Delete' }">							<MvFUNCTIONRETURN VALUE = "{ JSON_ImageManagement_Image_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'ImageManagement_ImageList_Delete_GeneratedImages' }">		<MvFUNCTIONRETURN VALUE = "{ JSON_ImageManagement_ImageList_Delete_GeneratedImages( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'ImageManagement_CheckForUpdatedMasterImages' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_ImageManagement_CheckForUpdatedMasterImages( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'ImageManagement_CheckForUpdatedGeneratedImages' }">		<MvFUNCTIONRETURN VALUE = "{ JSON_ImageManagement_CheckForUpdatedGeneratedImages( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'ImageManagement_GeneratedImageList_Load_Image' }">		<MvFUNCTIONRETURN VALUE = "{ JSON_ImageManagement_GeneratedImageList_Load_Image( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'ImageManagement_GeneratedImageList_Delete' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_ImageManagement_GeneratedImageList_Delete( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'ImageManagement_PartitionImages' }">						<MvFUNCTIONRETURN VALUE = "{ JSON_ImageManagement_PartitionImages( l.module ) }">
	<MvELSEIF EXPR = "{ g.Module_Function EQ 'ImageManagement_PartitionGeneratedImages' }">				<MvFUNCTIONRETURN VALUE = "{ JSON_ImageManagement_PartitionGeneratedImages( l.module ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Image" PARAMETERS = "image var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	"id":		<MvEVAL EXPR = "{ l.image:id }">,
	"image":	"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.image:image ) }">",
	"width":	<MvEVAL EXPR = "{ l.image:width }">,
	"height":	<MvEVAL EXPR = "{ l.image:height }">,
	"refcount":	<MvEVAL EXPR = "{ l.image:refcount }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Image_Load" PARAMETERS = "image var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Image_ID" VALUE = "{ int( g.Image_ID ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_ID( g.Image_ID, l.image ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00007', 'Unable to load image' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageManagement_ImageList_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Filter"						VALUE = "{ trim( g.Filter ) }">
	<MvASSIGN NAME = "g.Sort"						VALUE = "{ trim( g.Sort ) }">
	<MvASSIGN NAME = "g.Offset"						VALUE = "{ int( g.Offset ) }">
	<MvASSIGN NAME = "g.Count"						VALUE = "{ int( g.Count ) }">
	<MvASSIGN NAME = "l.search_query"				VALUE = "">
	
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query, '*' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Images', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, g.Filter, 'image,width,height,refcount' ) }">
	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields( l.search_query, g.Sort, 'image,width,height,refcount', 'image' ) }">

	<MvASSIGN NAME = "l.search_sql"					VALUE = "{ [ g.Module_Library_DB ].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Images', l.search_sql, l.search_fields, g.Offset, g.Count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-UTL-IGR-00008', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count"						VALUE = 0>
	
	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
		"start_offset": <MvEVAL EXPR = "{ int( g.Offset ) }">,
		"data":
		[
		<MvWHILE EXPR = "{ ( NOT Images.d.EOF ) AND ( ( g.Count EQ 0 ) OR ( l.count LT g.Count ) ) }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].Image_Read( l.image ) }">

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.count ) }">
				<MvEVAL EXPR = "{ JSON_Image( l.image ) }">,

				<MvIF EXPR = "{ sexists( g.imageroot $ l.image:image ) }">
					"image_size":		<MvEVAL EXPR = "{ ssize( g.imageroot $ l.image:image ) }">,
					"image_mtime":		<MvEVAL EXPR = "{ stime( g.imageroot $ l.image:image ) }">
				<MvELSE>
					"image_size":		0,
					"image_mtime":		0
				</MvIF>
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">

			<MvSKIP NAME = "Merchant" VIEW = "Images" ROWS = 1>
		</MvWHILE>
		]
	}
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Images">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageManagement_Image_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ JSON_Image_Load( l.image ) }">
		<MvFOREACH ITERATOR = "l.generatedimage" ARRAY = "l.generatedimages" COUNT = "{ [ g.Module_Library_DB ].GeneratedImageList_Load_Image( l.image:id, l.generatedimages ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GeneratedImage_Delete_ID( l.generatedimage:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvCOMMENT>
			|
			| Delete the image file as long as the image is not being used as a master image
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_File( l.generatedimage:image, l.null ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.null"	VALUE = "{ sdelete( g.imageroot $ l.generatedimage:image ) }">
			</MvIF>
		</MvFOREACH>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Delete( l.image:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvASSIGN NAME = "l.null"			VALUE = "{ sdelete( g.imageroot $ l.image:image ) }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTL-IGR-00009', 'Image \'' $ l.image:image $ '\' deleted' ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageManagement_ImageList_Delete_GeneratedImages" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvFOREACH ITERATOR = "l.image_id" ARRAY = "l.image_ids" COUNT = "{ [ g.Module_JSON ].JSON_Array_Integer( g.Image_IDs, l.image_ids ) }">
		<MvFOREACH ITERATOR = "l.generatedimage" ARRAY = "l.generatedimages" COUNT = "{ [ g.Module_Library_DB ].GeneratedImageList_Load_Image( l.image_id, l.generatedimages ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GeneratedImage_Delete_ID( l.generatedimage:id ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvCOMMENT>
			|
			| Delete the image file as long as the image is not being used as a master image
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_File( l.generatedimage:image, l.null ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.null"	VALUE = "{ sdelete( g.imageroot $ l.generatedimage:image ) }">
			</MvIF>
			
			<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTL-IGR-00025', 'Deleted generated image ' $ l.generatedimage:image ) }">
		</MvFOREACH>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageManagement_CheckForUpdatedMasterImages" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.last_image_id"	VALUE = 0>
	<MvASSIGN NAME = "l.recycle_time_t"	VALUE = "{ s.dyn_time_t + 5 }">
	<MvASSIGN NAME = "l.errors" 		VALUE = "">
	<MvASSIGN NAME = "l.error_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.complete"		VALUE = 1>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'o', 'Last_MasterImage_ID', l.last_image_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Initialize( l.last_image_id, l.state ) }">

	<MvWHILE EXPR = 1>
		<MvASSIGN NAME = "l.result" VALUE = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Process( l.state ) }">

		<MvIF EXPR = "{ l.result EQ -1 }">
			<MvASSIGN NAME = "l.error_count" VALUE = "{ miva_array_insert_var( l.errors, g.Error_Message, -1 ) }">
		<MvELSEIF EXPR = "{ l.result EQ 0 }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvWHILESTOP>
		</MvIF>

		<MvIF EXPR = "{ ( s.dyn_time_t GE l.recycle_time_t ) OR ( ( s.dyn_time_remaining NE -1 ) AND ( s.dyn_time_remaining LE 3 ) ) }">
			<MvASSIGN NAME = "l.complete" VALUE = 0>

			<MvWHILESTOP>
		</MvIF>
	</MvWHILE>

	<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Cleanup( l.state ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTL-IGR-00027', 'Checked for updated master images' ) }">

	<MvIF EXPR = "{ NOT Image_Count( l.image_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"complete":				<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.complete ) }">,
		"last_masterimage_id":	<MvEVAL EXPR = "{ int( l.state:last_image_id ) }">,
		"count":				<MvEVAL EXPR = "{ int( l.image_count ) }">,
		"processed":			<MvEVAL EXPR = "{ int( l.state:processed ) }">,
		"errors":
		[
			<MvFOREACH ITERATOR = "l.error" ARRAY = "l.errors" INDEX = "l.index" COUNT = "{ l.error_count }">
				<MvIF EXPR = "{ l.index GT 1 }">
					,
				</MvIF>

				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.error ) }">"
			</MvFOREACH>
		]
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageManagement_CheckForUpdatedGeneratedImages" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "l.last_generatedimage_id"	VALUE = 0>
	<MvASSIGN NAME = "l.recycle_time_t"			VALUE = "{ s.dyn_time_t + 5 }">
	<MvASSIGN NAME = "l.complete"				VALUE = 1>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'o', 'Last_GeneratedImage_ID', l.last_generatedimage_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Initialize( l.last_generatedimage_id, l.state ) }">

	<MvWHILE EXPR = 1>
		<MvIF EXPR = "{ NOT ImageManagement_CheckForUpdatedImages_GeneratedImages_Process( l.state ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvWHILESTOP>
		</MvIF>
		
		<MvIF EXPR = "{ ( s.dyn_time_t GE l.recycle_time_t ) OR ( ( s.dyn_time_remaining NE -1 ) AND ( s.dyn_time_remaining LE 3 ) ) }">
			<MvASSIGN NAME = "l.complete" VALUE = 0>

			<MvWHILESTOP>
		</MvIF>
	</MvWHILE>

	<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Cleanup( l.state ) }">

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTL-IGR-00028', 'Checked for updated generated images' ) }">

	<MvIF EXPR = "{ NOT GeneratedImage_Count( l.image_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		"complete":					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Boolean( l.complete ) }">,
		"last_generatedimage_id":	<MvEVAL EXPR = "{ int( l.state:last_image_id ) }">,
		"count":					<MvEVAL EXPR = "{ int( l.image_count ) }">,
		"processed":				<MvEVAL EXPR = "{ int( l.state:processed ) }">
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageManagement_GeneratedImageList_Load_Image" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvASSIGN NAME = "g.Image_ID"				VALUE = "{ int( g.Image_ID ) }">
	<MvASSIGN NAME = "l.generatedimage_count"	VALUE = "{ [ g.Module_Library_DB ].GeneratedImageList_Load_Image( g.Image_ID, l.generatedimages ) }">

	<MvIF EXPR = "{ l.generatedimage_count EQ 0 }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	[
		<MvFOREACH ITERATOR = "l.generatedimage" ARRAY = "l.generatedimages" COUNT = "{ l.generatedimage_count }">
			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.output_generatedimage_count ) }">
			"id":				<MvEVAL EXPR = "{ l.generatedimage:id }">,
			"image_id":			<MvEVAL EXPR = "{ l.generatedimage:image_id }">,
			"image":			"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.generatedimage:image ) }">",
			"width":			<MvEVAL EXPR = "{ l.generatedimage:width }">,
			"height":			<MvEVAL EXPR = "{ l.generatedimage:height }">,

			<MvIF EXPR = "{ sexists( g.imageroot $ l.generatedimage:image ) }">
				"image_size":	<MvEVAL EXPR = "{ ssize( g.imageroot $ l.generatedimage:image ) }">,
				"image_mtime":	<MvEVAL EXPR = "{ stime( g.imageroot $ l.generatedimage:image ) }">
			<MvELSE>
				"image_size":	0,
				"image_mtime":	0
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
		</MvFOREACH>
	]
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageManagement_GeneratedImageList_Delete" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvFOREACH ITERATOR = "l.generatedimage_id" ARRAY = "l.generatedimage_ids" COUNT = "{ [ g.Module_JSON ].JSON_Array_Integer( g.GeneratedImage_IDs, l.generatedimage_ids ) }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GeneratedImage_Load_ID( l.generatedimage_id, l.generatedimage ) }">
			<MvIF EXPR = "{ [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GeneratedImage_Delete_ID( l.generatedimage:id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
		</MvIF>

		<MvCOMMENT>
		|
		| Delete the image file as long as the image is not being used as a master image
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_File( l.generatedimage:image, l.null ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.imageroot $ l.generatedimage:image ) }">
		</MvIF>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTL-IGR-00029', 'Deleted generated image ' $ l.generatedimage:image ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageManagement_PartitionImages" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'o', 'Last_Image_ID', l.last_image_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.recycle_time_t"				VALUE = "{ s.dyn_time_t + 30 }">
	<MvASSIGN NAME = "l.errors" 					VALUE = "">
	<MvASSIGN NAME = "l.error_count" 				VALUE = 0>
	<MvASSIGN NAME = "l.processed" 					VALUE = 0>
	<MvASSIGN NAME = "l.timed_out" 					VALUE = 0>
	<MvASSIGN NAME = "l.image_basedir"				VALUE = "{ 'graphics/' $ padl( g.Store:id, 8, '0' ) $ '/' }">

	<MvIF EXPR = "{ NOT Image_Count( l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFOR COUNT = "{ 5 }">
		<MvASSIGN NAME = "l.images"					VALUE = "">
		<MvASSIGN NAME = "l.image_count"			VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'Images',
																				 'SELECT i.*
																				  FROM
																					' $ g.Store_Table_Prefix $ 'Images i
																				  WHERE
																					i.id > ?
																				  ORDER BY
																					i.id',
																				  [ g.Module_Library_DB ].SQL_Query_Field( l.last_image_id ), 0, 200 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-UTL-IGR-00019', g.MvOPENVIEW_Error ) }">
		</MvIF>

		<MvIF EXPR = "{ Images.d.EOF }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "Images">
			<MvFORSTOP>
		</MvIF>
		
		<MvWHILE EXPR = "{ NOT Images.d.EOF }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].Image_Read( l.images[ ++l.image_count ] ) }">

			<MvSKIP NAME = "Merchant" VIEW = "Images" ROWS = 1>
		</MvWHILE>

		<MvCLOSEVIEW NAME = "Merchant" VIEW = "Images">

		<MvFOREACH ITERATOR = "l.image" ARRAY = "l.images" COUNT = "{ l.image_count }">
			<MvASSIGN NAME = "l.processed" 					VALUE = "{ l.processed + 1 }">
			<MvASSIGN NAME = "l.last_image_id" 				VALUE = "{ l.image:id }">
			<MvASSIGN NAME = "l.expected_dir"				VALUE = "{ l.image_basedir $ ( floor( ( l.image:id ) / 2500 ) + 1 ) $ '/' }">
			<MvASSIGN NAME = "l.expected_path"				VALUE = "{ l.expected_dir $ [ g.Module_Library_Utilities ].BaseName( l.image:image ) }">
			<MvASSIGN NAME = "l.expected_md5" 				VALUE = "{ crypto_md5( l.expected_path ) }">

			<MvIF EXPR = "{ indexof( l.image_basedir, l.image:image, 1 ) NE 1 }">
				<MvFOREACHCONTINUE>
			</MvIF>
			
			<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].EnsurePathExists( 'script', g.imageroot $ l.expected_dir ) }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvIF EXPR = "{ l.expected_path NE l.image:image OR l.expected_md5 NE l.image:image_md5 }">
				<MvIF EXPR = "{ l.expected_path NE l.image:image }">				
					<MvIF EXPR = "{ NOT sexists( g.imageroot $ l.image:image ) }">
						<MvASSIGN NAME = "l.error_count" 	VALUE = "{ miva_array_insert( l.errors, 'Image "' $ l.image:image $ '" does not exist', -1 ) }">

						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ sexists( g.imageroot $ l.expected_path ) }">
						<MvASSIGN NAME = "l.error_count" 	VALUE = "{ miva_array_insert( l.errors, 'Target "' $ l.expected_path $ '" already exists', -1 ) }">

						<MvFOREACHCONTINUE>
					</MvIF>

					<MvIF EXPR = "{ NOT srename( g.imageroot $ l.image:image, g.imageroot $ l.expected_path ) }">
						<MvASSIGN NAME = "l.error_count" 	VALUE = "{ miva_array_insert( l.errors, 'Could not move "' $ l.image:image $ '" to "' $ l.expected_path $ '": ' $ file_last_error(), -1 ) }">

						<MvFOREACHCONTINUE>
					</MvIF>

					<MvASSIGN NAME = "l.image:image" 		VALUE = "{ l.expected_path }">
				</MvIF>

				<MvIF EXPR = "{ l.expected_md5 NE l.image:image_md5 }">
					<MvASSIGN NAME = "l.image:image_md5" 	VALUE = "{ l.expected_md5 }">
				</MvIF>

				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Update_PathAndHash( l.image ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.timed_out" 					VALUE = "{ ( s.dyn_time_t GE l.recycle_time_t ) OR ( ( s.dyn_time_remaining NE -1 ) AND ( s.dyn_time_remaining LE 3 ) ) }">

			<MvIF EXPR = "{ l.timed_out }">
				<MvFORSTOP>
			</MvIF>
		</MvFOREACH>
	</MvFOR>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTL-IGR-00030', 'Partitioned images' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvIF EXPR = "{ ( l.image_count LT 200 AND NOT l.timed_out ) OR l.total_count EQ l.processed }">
		"complete":					true,
		<MvELSE>
		"complete":					false,
		</MvIF>
		"last_image_id":			<MvEVAL EXPR = "{ int( l.last_image_id ) }">,
		"count":					<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"processed":				<MvEVAL EXPR = "{ int( l.processed ) }">,
		"errors":
		[
			<MvFOREACH ITERATOR = "l.error" ARRAY = "l.errors" INDEX = "l.index" COUNT = "{ l.error_count }">
				<MvIF EXPR = "{ l.index GT 1 }">
					,
				</MvIF>

				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.error ) }">"
			</MvFOREACH>
		]
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ImageManagement_PartitionGeneratedImages" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Session_Type NE 'admin' }">							<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">				<MvFUNCTIONRETURN>	</MvIF>
	<MvIF EXPR = "{ ( NOT g.Admin_User_Administrator ) AND
					( g.Admin_User_ID NE g.Store:manager_id ) }">			<MvFUNCTIONRETURN>	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Integer( 'o', 'Last_GeneratedImage_ID', l.last_generatedimage_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvASSIGN NAME = "l.recycle_time_t"				VALUE = "{ s.dyn_time_t + 30 }">
	<MvASSIGN NAME = "l.errors" 					VALUE = "">
	<MvASSIGN NAME = "l.error_count" 				VALUE = 0>
	<MvASSIGN NAME = "l.processed" 					VALUE = 0>
	<MvASSIGN NAME = "l.timed_out" 					VALUE = 0>
	<MvASSIGN NAME = "l.image_basedir"				VALUE = "{ 'graphics/' $ padl( g.Store:id, 8, '0' ) $ '/' }">

	<MvIF EXPR = "{ NOT GeneratedImage_Count( l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
	</MvIF>

	<MvFOR COUNT = "{ 5 }">
		<MvASSIGN NAME = "l.generatedimages"		VALUE = "">
		<MvASSIGN NAME = "l.generatedimage_count"	VALUE = 0>

		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'GeneratedImages',
																				 'SELECT 
																				 	g.*, 
																				 	i.image AS master_image
																				  FROM
																					' $ g.Store_Table_Prefix $ 'GeneratedImages g,
																					' $ g.Store_Table_Prefix $ 'Images i
																				  WHERE
																					g.image_id = i.id AND
																					g.id > ? 
																				  ORDER BY
																					g.id',
																				  [ g.Module_Library_DB ].SQL_Query_Field( l.last_generatedimage_id ), 0, 200 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'MER-UTL-IGR-00024', g.MvOPENVIEW_Error ) }">
		</MvIF>

		<MvIF EXPR = "{ GeneratedImages.d.EOF }">
			<MvCLOSEVIEW NAME = "Merchant" VIEW = "GeneratedImages">
			<MvFORSTOP>
		</MvIF>

		<MvWHILE EXPR = "{ NOT GeneratedImages.d.EOF }">
			<MvEVAL EXPR = "{ [ g.Module_Library_DB ].GeneratedImage_Read( l.generatedimage ) }">

			<MvASSIGN NAME = "l.generatedimage:master_image" 	VALUE = "{ GeneratedImages.d.master_image }">
			<MvASSIGN NAME = "l.generatedimage_count"			VALUE = "{ miva_array_insert_var( l.generatedimages, l.generatedimage, -1 ) }">

			<MvSKIP NAME = "Merchant" VIEW = "GeneratedImages" ROWS = 1>
		</MvWHILE>

		<MvCLOSEVIEW NAME = "Merchant" VIEW = "GeneratedImages">

		<MvFOREACH ITERATOR = "l.image" ARRAY = "l.generatedimages" COUNT = "{ l.generatedimage_count }">
			<MvASSIGN NAME = "l.processed" 						VALUE = "{ l.processed + 1 }">
			<MvASSIGN NAME = "l.last_generatedimage_id" 		VALUE = "{ l.image:id }">
			<MvASSIGN NAME = "l.expected_dir"					VALUE = "{ l.image_basedir $ ( floor( ( l.image:image_id ) / 2500 ) + 1 ) $ '/' }">
			<MvASSIGN NAME = "l.expected_path"					VALUE = "{ l.expected_dir $ [ g.Module_Library_Utilities ].BaseName( l.image:image ) }">
			<MvASSIGN NAME = "l.expected_master_path"			VALUE = "{ l.expected_dir $ [ g.Module_Library_Utilities ].BaseName( l.image:master_image ) }">
			<MvASSIGN NAME = "l.expected_md5" 					VALUE = "{ crypto_md5( l.expected_path ) }">

			<MvIF EXPR = "{ indexof( l.image_basedir, l.image:image, 1 ) NE 1 }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.expected_master_path NE l.image:master_image }">
				<MvASSIGN NAME = "l.error_count" 				VALUE = "{ miva_array_insert( l.errors, 'Image "' $ l.image:master_image $ '" has not been partitioned', -1 ) }">

				<MvFOREACHCONTINUE>
			</MvIF>

			<MvIF EXPR = "{ l.expected_path NE l.image:image OR l.expected_md5 NE l.image:image_md5 }">
				<MvIF EXPR = "{ l.expected_path NE l.image:image }">				
					<MvIF EXPR = "{ NOT sexists( g.imageroot $ l.image:image ) }">
						<MvASSIGN NAME = "l.error_count"		VALUE = "{ miva_array_insert( l.errors, 'Image "' $ l.image:image $ '" does not exist', -1 ) }">

						<MvFOREACHCONTINUE>
					<MvELSEIF EXPR = "{ sexists( g.imageroot $ l.expected_path ) }">
						<MvASSIGN NAME = "l.error_count"		VALUE = "{ miva_array_insert( l.errors, 'Target "' $ l.expected_path $ '" already exists', -1 ) }">

						<MvFOREACHCONTINUE>
					</MvIF>

					<MvIF EXPR = "{ NOT srename( g.imageroot $ l.image:image, g.imageroot $ l.expected_path ) }">
						<MvASSIGN NAME = "l.error_count"		VALUE = "{ miva_array_insert( l.errors, 'Could not move "' $ l.image:image $ '" to "' $ l.expected_path $ '": ' $ file_last_error(), -1 ) }">

						<MvFOREACHCONTINUE>
					</MvIF>

					<MvASSIGN NAME = "l.image:image"			VALUE = "{ l.expected_path }">
				</MvIF>

				<MvIF EXPR = "{ l.expected_md5 NE l.image:image_md5 }">
					<MvASSIGN NAME = "l.image:image_md5" 		VALUE = "{ l.expected_md5 }">
				</MvIF>

				<MvIF EXPR = "{ NOT GeneratedImage_Update_PathAndHash( l.image ) }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.timed_out"						VALUE = "{ ( s.dyn_time_t GE l.recycle_time_t ) OR ( ( s.dyn_time_remaining NE -1 ) AND ( s.dyn_time_remaining LE 3 ) ) }">

			<MvIF EXPR = "{ l.timed_out }">
				<MvFORSTOP>
			</MvIF>
		</MvFOREACH>
	</MvFOR>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Admin_Log_Action( 'MER-UTL-IGR-00031', 'Partitioned generated images' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
	{
		<MvIF EXPR = "{ ( l.generatedimage_count LT 200 AND NOT l.timed_out ) OR l.total_count EQ l.processed }">
		"complete":					true,
		<MvELSE>
		"complete":					false,
		</MvIF>
		"last_generatedimage_id":	<MvEVAL EXPR = "{ int( l.last_generatedimage_id ) }">,
		"count":					<MvEVAL EXPR = "{ int( l.total_count ) }">,
		"processed":				<MvEVAL EXPR = "{ int( l.processed ) }">,
		"errors":
		[
			<MvFOREACH ITERATOR = "l.error" ARRAY = "l.errors" INDEX = "l.index" COUNT = "{ l.error_count }">
				<MvIF EXPR = "{ l.index GT 1 }">
					,
				</MvIF>

				"<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.error ) }">"
			</MvFOREACH>
		]
	}
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_End() }">
</MvFUNCTION>

<MvCOMMENT>
|
| Module Provisioning Feature (provision_store)
|
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Provision_Store" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.child" ARRAY = "l.provide_xml:children">
		<MvASSIGN NAME = "l.tag" VALUE = "{ tolower( l.child:name ) }">

		<MvIF EXPR = "{ l.tag EQ 'check_updatedimages' }">
			<MvEVAL EXPR = "{ Module_Provision_Store_Check_UpdatedImages( l.module, l.child ) }">
		<MvELSE>
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.child, 'Unknown tag \'' $ l.tag $ '\'' ) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Provision_Store_Check_UpdatedImages" PARAMETERS = "module var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Check for updated master images
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Initialize( 0, l.state ) }">

	<MvWHILE EXPR = 1>
		<MvASSIGN NAME = "l.result" VALUE = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Process( l.state ) }">

		<MvIF EXPR = "{ l.result EQ -1 }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, g.Error_Message ) }">
		<MvELSEIF EXPR = "{ l.result EQ 0 }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvWHILESTOP>
		</MvIF>
	</MvWHILE>

	<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Cleanup( l.state ) }">

	<MvCOMMENT>
	|
	| Check for updated generated images
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Initialize( 0, l.state ) }">

	<MvWHILE EXPR = 1>
		<MvASSIGN NAME = "l.result" VALUE = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Process( l.state ) }">

		<MvIF EXPR = "{ l.result EQ -1 }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PRV_AD ].PRV_LogMessage( l.provide_xml, g.Error_Message ) }">
		<MvELSEIF EXPR = "{ l.result EQ 0 }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_PRV_AD ].PRV_LogError( l.provide_xml ) }">
			</MvIF>

			<MvWHILESTOP>
		</MvIF>
	</MvWHILE>

	<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Cleanup( l.state ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Scheduled Task (scheduledtask)
|
</MvCOMMENT>

<MvFUNCTION NAME = "ScheduledTaskModule_Capabilities" PARAMETERS = "module var, capabilities var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.capabilities:provision"	VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Operations" PARAMETERS = "module var, operations var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.operations" INDEX = 1 MEMBER = "code"		VALUE = "updated">
	<MvASSIGN NAME = "l.operations" INDEX = 1 MEMBER = "descrip"	VALUE = "Check for Updated Images">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Fields" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Invalid" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Prompt" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Field" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Validate" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Update" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Delete" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Execute" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.task:operation EQ 'updated' }">
		<MvFUNCTIONRETURN VALUE = "{ ScheduledTaskModule_Execute_CheckForUpdatedImages( l.module, l.task ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00015', 'Unsupported operation' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Execute_CheckForUpdatedImages" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.task:state }">
		<MvASSIGN NAME = "l.task:state"									VALUE = "">
		<MvASSIGN NAME = "l.task:state:masterimage"						VALUE = "">
		<MvASSIGN NAME = "l.task:state:masterimage:completed"			VALUE = 0>
		<MvASSIGN NAME = "l.task:state:masterimage:last_image_id"		VALUE = 0>
		<MvASSIGN NAME = "l.task:state:generatedimage"					VALUE = "">
		<MvASSIGN NAME = "l.task:state:generatedimage:completed"		VALUE = 0>
		<MvASSIGN NAME = "l.task:state:generatedimage:last_image_id"	VALUE = 0>
	</MvIF>

	<MvREFERENCE NAME = "l.masterimages_state"		VARIABLE = "l.task:state:masterimage">
	<MvREFERENCE NAME = "l.generatedimages_state"	VARIABLE = "l.task:state:generatedimage">

	<MvCOMMENT>
	|
	| Check for updated master images
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT l.masterimages_state:completed }">
		<MvIF EXPR = "{ ISNULL l.masterimages_state:last_image_id }">	<MvASSIGN NAME = "l.last_image_id" VALUE = 0>
		<MvELSE>														<MvASSIGN NAME = "l.last_image_id" VALUE = "{ l.masterimages_state:last_image_id }">
		</MvIF>

		<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Initialize( l.last_image_id, l.state ) }">

		<MvWHILE EXPR = 1>
			<MvASSIGN NAME = "l.result" VALUE = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Process( l.state ) }">

			<MvIF EXPR = "{ l.result EQ -1 }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_SCH_UT ].ScheduledTask_Log( l.task, 'W', g.Error_Code $ ': ' $ g.Error_Message ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.result EQ 0 }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvWHILESTOP>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_RecycleRecommended() }">
				<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Cleanup( l.state ) }">

				<MvASSIGN NAME = "l.masterimages_state:last_image_id" VALUE = "{ l.state:last_image_id }">
				<MvFUNCTIONRETURN VALUE = -1>
			</MvIF>
		</MvWHILE>

		<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Cleanup( l.state ) }">

		<MvASSIGN NAME = "l.masterimages_state:completed" VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Check for updated generated images
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT l.generatedimages_state:completed }">
		<MvIF EXPR = "{ ISNULL l.generatedimages_state:last_image_id }">	<MvASSIGN NAME = "l.last_image_id" VALUE = 0>
		<MvELSE>															<MvASSIGN NAME = "l.last_image_id" VALUE = "{ l.generatedimages_state:last_image_id }">
		</MvIF>

		<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Initialize( l.last_image_id, l.state ) }">

		<MvWHILE EXPR = 1>
			<MvASSIGN NAME = "l.result" VALUE = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Process( l.state ) }">

			<MvIF EXPR = "{ l.result EQ -1 }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_SCH_UT ].ScheduledTask_Log( l.task, 'W', g.Error_Code $ ': ' $ g.Error_Message ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSEIF EXPR = "{ l.result EQ 0 }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvWHILESTOP>
			</MvIF>

			<MvIF EXPR = "{ [ g.Module_Feature_SCH_UT ].ScheduledTask_RecycleRecommended() }">
				<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Cleanup( l.state ) }">

				<MvASSIGN NAME = "l.generatedimages_state:last_image_id" VALUE = "{ l.state:last_image_id }">
				<MvFUNCTIONRETURN VALUE = -1>
			</MvIF>
		</MvWHILE>
		
		<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Cleanup( l.state ) }">

		<MvASSIGN NAME = "l.generatedimages_state:completed" VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Utility Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "Image_Count" PARAMETERS = "count var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.count" VALUE = 0>
	
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "Images"
				QUERY	= "{ 'SELECT COUNT( id ) AS total FROM ' $ g.Store_Table_Prefix $ 'Images' }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00017', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT Images.d.EOF }">
		<MvASSIGN NAME = "l.count" VALUE = "{ Images.d.total }">
	</MvIF>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Images">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "GeneratedImage_Count" PARAMETERS = "count var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.count" VALUE = 0>
	
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "GeneratedImages"
				QUERY	= "{ 'SELECT COUNT( id ) AS total FROM ' $ g.Store_Table_Prefix $ 'GeneratedImages' }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00018', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT GeneratedImages.d.EOF }">
		<MvASSIGN NAME = "l.count" VALUE = "{ GeneratedImages.d.total }">
	</MvIF>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "GeneratedImages">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "GeneratedImage_Update_PathAndHash" PARAMETERS = "generatedimage var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME	= "Merchant"
			 QUERY	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'GeneratedImages
					      SET
							image		= ?,
							image_md5	= ?
						  WHERE
							id			= ?' }"
			 FIELDS	= "l.generatedimage:image, l.generatedimage:image_md5, l.generatedimage:id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00021', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "GeneratedImageList_Load_Image_Continue" PARAMETERS = "image_id, last_generated_image_id, generatedimages var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "GeneratedImages"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'GeneratedImages WHERE image_id = ? AND id > ? ORDER BY id' }"
				FIELDS	= "l.image_id, l.last_generated_image_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00022', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.generatedimage_count"		VALUE = 0>
	<MvWHILE EXPR = "{ NOT GeneratedImages.d.EOF }">
		<MvASSIGN NAME = "l.generatedimage_count"	VALUE = "{ l.generatedimage_count + 1 }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].GeneratedImage_Read( l.generatedimages[ l.generatedimage_count ] ) }">

		<MvSKIP NAME = "Merchant" VIEW = "GeneratedImages" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "GeneratedImages">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-UTL-IGR-00023', l.generatedimage_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ImageManagement_CheckForUpdatedImages_MasterImages_Initialize" PARAMETERS = "last_image_id, state var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Configure the state structure.  It should be noted that the iteration member keeps
	| track of the where we are in the result set and the processed member keeps track
	| of the total number of records processed.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.state"					VALUE = "">
	<MvASSIGN NAME = "l.state:last_image_id"	VALUE = "{ l.last_image_id }">
	<MvASSIGN NAME = "l.state:iteration"		VALUE = 0>
	<MvASSIGN NAME = "l.state:processed"		VALUE = 0>
	<MvASSIGN NAME = "l.state:has_records"		VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ImageManagement_CheckForUpdatedImages_MasterImages_Process" PARAMETERS = "state var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| If we've processed 1000+ records we need to reload the result set
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.state:iteration GE 1000 }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "ImageManagement_Images">

		<MvASSIGN NAME = "l.state:iteration"	VALUE = 0>
		<MvASSIGN NAME = "l.state:has_records"	VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Only load a result set if one doesn't already exist
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT l.state:has_records }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'ImageManagement_Images',
																				 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'Images WHERE id > ? ORDER BY id',
																				  [ g.Module_Library_DB ].SQL_Query_Field( l.state:last_image_id ),
																				  0, 1001 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00032', g.MvOPENVIEW_Error ) }">
		</MvIF>

		<MvASSIGN NAME = "l.state:has_records" VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| All records have been processed and so return an EOF
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ImageManagement_Images.d.EOF }">
		<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Cleanup( l.state ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_ListLoad_EOF( 'MER-UTL-IGR-00033' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Process 1 record
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.image"				VALUE = "">
	<MvASSIGN NAME = "l.image:id"			VALUE = "{ ImageManagement_Images.d.id }">
	<MvASSIGN NAME = "l.image:image"		VALUE = "{ ImageManagement_Images.d.image }">
	<MvASSIGN NAME = "l.image:image_md5"	VALUE = "{ ImageManagement_Images.d.image_md5 }">
	<MvASSIGN NAME = "l.image:width"		VALUE = "{ ImageManagement_Images.d.width }">
	<MvASSIGN NAME = "l.image:height"		VALUE = "{ ImageManagement_Images.d.height }">
	<MvASSIGN NAME = "l.image:refcount"		VALUE = "{ ImageManagement_Images.d.refcount }">

	<MvSKIP NAME = "Merchant" VIEW = "ImageManagement_Images" ROWS = 1>

	<MvASSIGN NAME = "l.state:iteration"		VALUE = "{ l.state:iteration + 1 }">
	<MvASSIGN NAME = "l.state:processed"		VALUE = "{ l.state:processed + 1 }">
	<MvASSIGN NAME = "l.state:last_image_id"	VALUE = "{ l.image:id }">		

	<MvIF EXPR = "{ NOT [ g.Module_Library_Utilities ].Image_Dimensions( g.imageroot $ l.image:image, 'script', l.width, l.height ) }">
		<MvASSIGN NAME = "l.gd_error_message"		VALUE = "{ gdLastError() }">

		<MvIF EXPR = "{ NOT ISNULL l.gd_error_message }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00034', 'Error processing file \'' $ g.imageroot $ l.image:image $ '\': ' $ l.gd_error_message ) }">
			<MvFUNCTIONRETURN VALUE = -1>
		<MvELSEIF EXPR = "{ sexists( g.imageroot $ l.image:image ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00035', 'File \'' $ g.imageroot $ l.image:image $ '\' is corrupt or is not a supported image type' ) }">
			<MvFUNCTIONRETURN VALUE = -1>
		<MvELSE>
			<MvASSIGN NAME = "l.null" VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00036', 'File \'' $ g.imageroot $ l.image:image $ '\' does not exist' ) }">
			<MvFUNCTIONRETURN VALUE = -1>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.image:width NE l.width OR l.image:height NE l.height }">
		<MvASSIGN NAME = "l.image:width"	VALUE = "{ l.width }">
		<MvASSIGN NAME = "l.image:height"	VALUE = "{ l.height }">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Update_Dimensions( l.image ) }">
			<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Cleanup( l.state ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFOREACH ITERATOR = "l.generatedimage" ARRAY = "l.generatedimages" COUNT = "{ [ g.Module_Library_DB ].GeneratedImageList_Load_Image( l.image:id, l.generatedimages ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GeneratedImage_Delete_ID( l.generatedimage:id ) }">
				<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_MasterImages_Cleanup( l.state ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvCOMMENT>
			|
			| Delete the image file as long as the image is not being used as a master image
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_File( l.generatedimage:image, l.null ) }">
				<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
				</MvIF>

				<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.imageroot $ l.generatedimage:image ) }">
			</MvIF>
		</MvFOREACH>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImageManagement_CheckForUpdatedImages_MasterImages_Cleanup" PARAMETERS = "state var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.state:has_records }">
		<MvASSIGN NAME = "l.state:has_records" VALUE = 0>

		<MvCLOSEVIEW NAME = "Merchant" VIEW = "ImageManagement_Images">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ImageManagement_CheckForUpdatedImages_GeneratedImages_Initialize" PARAMETERS = "last_image_id, state var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Configure the state structure.  It should be noted that the iteration member keeps
	| track of the where we are in the result set and the processed member keeps track
	| of the total number of records processed.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.state"					VALUE = "">
	<MvASSIGN NAME = "l.state:last_image_id"	VALUE = "{ l.last_image_id }">
	<MvASSIGN NAME = "l.state:iteration"		VALUE = 0>
	<MvASSIGN NAME = "l.state:processed"		VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ImageManagement_CheckForUpdatedImages_GeneratedImages_Process" PARAMETERS = "state var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| If we've processed 1000+ records we need to reload the result set
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.state:iteration GE 1000 }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "GeneratedImages">

		<MvASSIGN NAME = "l.state:iteration"	VALUE = 0>
		<MvASSIGN NAME = "l.state:has_records"	VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Only load a result set if one doesn't already exist
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT l.state:has_records }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range( 'Merchant', 'GeneratedImages',
																				 'SELECT
																				 	gi.*,
																				 	i.image AS master_image
																				   FROM ' $
																				   	g.Store_Table_Prefix $ 'GeneratedImages gi
																				   	LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'Images i ON i.id = gi.image_id
																				   WHERE
																				   	gi.id > ?
																				   ORDER BY
																				   	gi.id',
																				  [ g.Module_Library_DB ].SQL_Query_Field( l.state:last_image_id ),
																				  0, 1001 ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-IGR-00037', g.MvOPENVIEW_Error ) }">
		</MvIF>

		<MvASSIGN NAME = "l.state:has_records" VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| All records have been processed and so return an EOF
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ GeneratedImages.d.EOF }">
		<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Cleanup( l.state ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_ListLoad_EOF( 'MER-UTL-IGR-00038' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	| Process 1 record
	|
	</MvCOMMENT>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].GeneratedImage_Read( l.generatedimage ) }">
	<MvASSIGN NAME = "l.generatedimage:master_image" VALUE = "{ GeneratedImages.d.master_image }">
	<MvSKIP NAME = "Merchant" VIEW = "GeneratedImages" ROWS = 1>

	<MvASSIGN NAME = "l.state:iteration"		VALUE = "{ l.state:iteration + 1 }">
	<MvASSIGN NAME = "l.state:processed"		VALUE = "{ l.state:processed + 1 }">
	<MvASSIGN NAME = "l.state:last_image_id"	VALUE = "{ l.generatedimage:id }">

	<MvIF EXPR = "{ sexists( g.imageroot $ l.generatedimage:master_image ) }">	<MvASSIGN NAME = "l.master_stime"		VALUE = "{ stime( g.imageroot $ l.generatedimage:master_image ) }">
	<MvELSE>																	<MvASSIGN NAME = "l.master_stime"		VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ sexists( g.imageroot $ l.generatedimage:image ) }">			<MvASSIGN NAME = "l.generated_stime"	VALUE = "{ stime( g.imageroot $ l.generatedimage:image ) }">
	<MvELSE>																	<MvASSIGN NAME = "l.generated_stime"	VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.generatedimage:master_image OR l.generated_stime LT l.master_stime }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].GeneratedImage_Delete_ID( l.generatedimage:id ) }">
			<MvEVAL EXPR = "{ ImageManagement_CheckForUpdatedImages_GeneratedImages_Cleanup( l.state ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| Delete the image file as long as the image is not being used as a master image
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Image_Load_File( l.generatedimage:image, l.null ) }">
			<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Error_Is_EOF() }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( g.Error_Code, g.Error_Message ) }">
			</MvIF>

			<MvASSIGN NAME = "l.null" VALUE = "{ sdelete( g.imageroot $ l.generatedimage:image ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ImageManagement_CheckForUpdatedImages_GeneratedImages_Cleanup" PARAMETERS = "state var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.state:has_records }">
		<MvASSIGN NAME = "l.state:has_records" VALUE = 0>

		<MvCLOSEVIEW NAME = "Merchant" VIEW = "GeneratedImages">
	</MvIF>
</MvFUNCTION>

<MvINCLUDE FILE = "modules/util/imagemanagement/functions.mv">
<MvINCLUDE FILE = "modules/util/imagemanagement/imagelist.mv">
<MvINCLUDE FILE = "modules/util/imagemanagement/imagedialog.mv">
<MvINCLUDE FILE = "modules/util/imagemanagement/updatedimagesdialog.mv">
<MvINCLUDE FILE = "modules/util/imagemanagement/partitionimagesdialog.mv">
