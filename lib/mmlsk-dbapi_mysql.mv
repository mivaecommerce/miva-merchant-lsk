<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-DBA-MYS-
| Next Error Code: 14    
|
</MvCOMMENT>

<MvFUNCTION NAME = "DB_Open" PARAMETERS = "database, username, password" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPEN NAME		= "Merchant"
			DATABASE	= "{ l.database }"
			USERNAME	= "{ l.username }"
			PASSWORD	= "{ l.password }"
			TYPE		= "MySQL">
	<MvIF EXPR = "{ g.MvOPEN_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MYS-00001', 'Unable to connect to database' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Close" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCLOSE NAME = "Merchant">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Open_PrivateKey" PARAMETERS = "database, username, password" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPEN NAME		= "Merchant_PrivateKey"
			DATABASE	= "{ l.database }"
			USERNAME	= "{ l.username }"
			PASSWORD	= "{ l.password }"
			TYPE		= "MySQL">
	<MvIF EXPR = "{ g.MvOPEN_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MYS-00005', 'Unable to connect to database' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Close_PrivateKey" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCLOSE NAME = "Merchant_PrivateKey">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Apply_Flags" PARAMETERS = "name, flags" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Parse flags and issue MvDBCOMMANDs for each one
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.pos"	VALUE = 1>
	<MvASSIGN NAME = "l.flag"	VALUE = "{ gettoken( l.flags, ',', l.pos ) }">

	<MvWHILE EXPR = "{ NOT ISNULL l.flag }">
		<MvASSIGN NAME = "l.equals_pos"		VALUE = "{ '=' IN l.flag }">
		<MvIF EXPR = "{ l.equals_pos EQ 0 }">
			<MvASSIGN NAME = "l.command"	VALUE = "{ l.flag }">
			<MvASSIGN NAME = "l.parameter"	VALUE = "">
		<MvELSE>
			<MvASSIGN NAME = "l.command"	VALUE = "{ substring_var( l.flag, 1, l.equals_pos  - 1 ) }">
			<MvASSIGN NAME = "l.parameter"	VALUE = "{ substring_var( l.flag, l.equals_pos + 1, len_var( l.flag ) - l.equals_pos ) }">
		</MvIF>

		<MvIF EXPR = "{ l.command EQ 'charset' }">
			<MvQUERY NAME = "{ l.name }" QUERY = "{ 'SET NAMES ' $ [ g.Library_Filename_Utilities ].AlphaNumericOnly( l.parameter ) }">
			<MvQUERY NAME = "{ l.name }" QUERY = "{ 'SET CHARACTER SET ' $ [ g.Library_Filename_Utilities ].AlphaNumericOnly( l.parameter ) }">
		<MvELSEIF EXPR = "{ l.command EQ 'write_password' }">
			<MvDBCOMMAND NAME = "{ l.name }" COMMAND = "{ l.command }" PARAMETER = "{ [ g.Library_Filename_DBAPI ].DB_Decrypt_Password( l.parameter ) }">
		<MvELSE>
			<MvDBCOMMAND NAME = "{ l.name }" COMMAND = "{ l.command }" PARAMETER = "{ l.parameter }">
		</MvIF>

		<MvASSIGN NAME = "l.pos"	VALUE = "{ l.pos + 1 }">
		<MvASSIGN NAME = "l.flag"	VALUE = "{ gettoken( l.flags, ',', l.pos ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_CHAR" PARAMETERS = "length" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'VARCHAR(' $ l.length $ ')' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_BOOL" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "BOOLEAN">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_MEMO" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "MEDIUMTEXT">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_INTEGER" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "INTEGER">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_NUMBER"	PARAMETERS = "precision, scale" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.precision }">
		<MvIF EXPR = "{ l.scale }">
			<MvFUNCTIONRETURN VALUE = "{ 'NUMERIC(' $ l.precision $ ',' $ l.scale $ ')' }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ 'NUMERIC(' $ l.precision $ ')' }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "INTEGER">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_DOUBLE" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "DOUBLE">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Lock_Table" PARAMETERS = "primary_table, additional_tables" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.query"		VALUE = "{ 'LOCK TABLES ' $ l.primary_table $ ' WRITE' }">

	<MvASSIGN NAME = "l.pos"		VALUE = 1>
	<MvASSIGN NAME = "l.table"		VALUE = "{ gettoken( l.additional_tables, ',', l.pos ) }">

	<MvWHILE EXPR = "{ len( l.table ) }">
		<MvASSIGN NAME = "l.query"	VALUE = "{ l.query $ ', ' $ l.table $ ' READ' }">

		<MvASSIGN NAME = "l.pos"	VALUE = "{ l.pos + 1 }">
		<MvASSIGN NAME = "l.table"	VALUE = "{ gettoken( l.additional_tables, ',', l.pos ) }">
	</MvWHILE>

	<MvQUERY NAME = "Merchant" QUERY = "{ l.query }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MYS-00002', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Unlock_Table" PARAMETERS = "primary_table" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME = "Merchant" QUERY = "UNLOCK TABLES">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Increment_Requires_Lock" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Index_DESC" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "DESC">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Compare_CaseSensitive" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'BINARY ' $ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Compare_UPPER" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Compare_TimeT" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'CAST( ' $ l.value $ ' AS UNSIGNED )' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Max_INTEGER" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "2147483647">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Max_NUMBER" PARAMETERS = "precision, scale" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( l.precision EQ 10 ) AND ( l.scale EQ 2 ) }">
		<MvFUNCTIONRETURN VALUE = "99999999.99">
	</MvIF>

	<MvIF EXPR = "{ l.scale NE 0 }">
		<MvIF EXPR = "{ l.scale GT l.precision }">
			<MvFUNCTIONRETURN VALUE = "0">
		</MvIF>

		<MvASSIGN NAME = "l.precision"	VALUE = "{ l.precision - l.scale }">
	</MvIF>

	<MvASSIGN NAME = "l.value"			VALUE = "">
	<MvASSIGN NAME = "l.pos"			VALUE = 1>

	<MvWHILE EXPR = "{ l.pos LE l.precision }">
		<MvASSIGN NAME = "l.value"		VALUE = "{ l.value $ '9' }">
		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ l.scale }">
		<MvASSIGN NAME = "l.value"		VALUE = "{ l.value $ '.' }">
		<MvASSIGN NAME = "l.pos"		VALUE = 1>

		<MvWHILE EXPR = "{ l.pos LE l.scale }">
			<MvASSIGN NAME = "l.value"	VALUE = "{ l.value $ '9' }">
			<MvASSIGN NAME = "l.pos"	VALUE = "{ l.pos + 1 }">
		</MvWHILE>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Error_IsIndexDuplicate" PARAMETERS = "error" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ 'Duplicate entry' CIN l.error }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Error_IndexDuplicate" PARAMETERS = "error_code, error_message" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.error_code, 'Duplicate entry: ' $ l.error_message ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_OPENVIEW_Range" PARAMETERS = "db, view, query, fields, offset, count" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.offset"	VALUE = "{ int( l.offset ) }">
	<MvASSIGN NAME = "l.count"	VALUE = "{ int( l.count ) }">

	<MvIF EXPR = "{ l.offset LT 0 }">			<MvASSIGN NAME = "l.offset"	VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ l.count LT 0 }">			<MvASSIGN NAME = "l.count"	VALUE = 0>	</MvIF>

	<MvIF EXPR = "{ l.offset AND l.count }">	<MvASSIGN NAME = "l.query"	VALUE = "{ l.query $ ' LIMIT ' $ l.count $ ' OFFSET ' $ l.offset }">
	<MvELSEIF EXPR = "{ l.offset }">			<MvASSIGN NAME = "l.query"	VALUE = "{ l.query $ ' LIMIT 18446744073709551610 OFFSET ' $ l.offset }">
	<MvELSEIF EXPR = "{ l.count }">				<MvASSIGN NAME = "l.query"	VALUE = "{ l.query $ ' LIMIT ' $ l.count }">
	</MvIF>

	<MvOPENVIEW NAME = "{ l.db }" VIEW = "{ l.view }" QUERY = "{ l.query }" FIELDS = "{ l.fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Drop_Index" PARAMETERS = "table, index" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP INDEX ' $ l.index $ ' ON ' $ l.table }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MYS-00004', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_TableList_Load" PARAMETERS = "tables var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "Tables"
				QUERY 	= "{ 'SELECT table_name FROM information_schema.tables WHERE table_schema = DATABASE() ORDER BY table_name ASC' }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DBA-MYS-00010', g.MvOPENVIEW_Error ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.table_count" VALUE = 0>
	
	<MvWHILE EXPR = "{ NOT Tables.d.EOF }">
		<MvASSIGN NAME = "l.tables" INDEX = "{ ++l.table_count }" VALUE = "{ Tables.d.table_name }">
	
		<MvSKIP NAME = "Merchant" VIEW = "Tables" ROWS = 1>
	</MvWHILE>
	
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Tables">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].ListLoad_EOF_Return( 'MER-DBA-MYS-00011', l.table_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Table_Optimize" PARAMETERS = "table" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'OPTIMIZE TABLE ' $ l.table }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DBA-MYS-00012', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Table_Analyze" PARAMETERS = "table" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'ANALYZE TABLE ' $ l.table }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-DBA-MYS-00013', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Index_Exists" PARAMETERS = "table, index, exists var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.exists" VALUE = 0>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "Index_Exists"
				QUERY	= "{ 'SHOW INDEX FROM ' $ l.table }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MYS-00006', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvWHILE EXPR = "{ NOT Index_Exists.d.EOF }">
		<MvIF EXPR = "{ Index_Exists.d.key_name EQ l.index }">
			<MvASSIGN NAME = "l.exists" VALUE = 1>
			<MvWHILESTOP>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "Index_Exists" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Index_Exists">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Escape_Identifier" PARAMETERS = "keyword" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ '`' $ l.keyword $ '`' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_FULLTEXT_Supported" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| MyISAM supports FULLTEXT indexes
	| InnoDB supports FULLTEXT indexes on MySQL versions >= 5.6
	|
	| If the default engine is set to MyISAM, we assume FULLTEXT is supported
	| If the default engine is set to InnoDB, we check the version to determine if it is supported
	| If the default engine is some other engine, we assume FULLTEXT is not supported
	|
	</MvCOMMENT>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "Engines"
				QUERY 	= "{ 'SHOW ENGINES' }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MYS-00007', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.default_engine" VALUE = "">

	<MvWHILE EXPR = "{ NOT Engines.d.EOF }">
		<MvIF EXPR = "{ tolower( Engines.d.support ) EQ 'default' }">
			<MvASSIGN NAME = "l.default_engine" VALUE = "{ tolower( Engines.d.engine ) }">
			<MvWHILESTOP>
		</MvIF>

		<MvSKIP NAME = "Merchant" VIEW = "Engines" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Engines">

	<MvIF EXPR = "{ l.default_engine EQ 'myisam' }">		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.default_engine NE 'innodb' }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Running the VERSION() function on different systems has yielded the following result formats:
	|	: 5.5.33
	|	: 5.5.41-MariaDB
	|	: 5.6.33-0ubuntu0.14.04.1
	|	: 10.1.24-MariaDB
	|
	</MvCOMMENT>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "Version"
				QUERY 	= "{ 'SELECT VERSION() AS version' }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MYS-00008', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.major" VALUE = "{ int( gettoken( Version.d.version, '.', 1 ) ) }">
	<MvASSIGN NAME = "l.minor" VALUE = "{ int( gettoken( Version.d.version, '.', 2 ) ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "Version">
	<MvFUNCTIONRETURN VALUE = "{ ( l.major GT 5 ) OR ( l.major EQ 5 AND l.minor GE 6 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Create_FULLTEXT_Index" PARAMETERS = "table, index, columns" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'ALTER TABLE ' $ l.table $ ' ADD FULLTEXT ' $ l.index $ ' ( ' $ l.columns $ ' )' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MYS-00009', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_IFNULL" PARAMETERS = "expr1, expr2" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.expr1 $ ', ' $ l.expr2 $ ' )' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_Normalize_Value" PARAMETERS = "type, value var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This function intentionally does nothing
	|
	</MvCOMMENT>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_EQ" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) = ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) = ?' }">
	</MvIF>
 
	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' = ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_NE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) <> ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) <> ?' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <> ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_GT" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) > ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) > ?' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' > ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_GE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) >= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) >= ?' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' >= ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_LT" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) < ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) < ?' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' < ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_LE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) <= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) <= ?' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <= ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_CO" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) LIKE ?' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' LIKE ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_NC" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) NOT LIKE ?' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' NOT LIKE ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_LIKE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) LIKE ?' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' LIKE ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_NOTLIKE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) NOT LIKE ?' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' NOT LIKE ?' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_TRUE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) = 1' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) = \'1\'' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' = 1' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_FALSE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) = 0' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) = \'0\'' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' = 0' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_ISNULL" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) = \'\'' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ '( ' $ l.column $ ' IS NULL OR ' $ l.column $ ' = \'\' )' }">
</MvFUNCTION>
