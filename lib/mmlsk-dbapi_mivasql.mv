<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-DBA-MVS-
| Next Error Code: 14    
|
</MvCOMMENT>

<MvFUNCTION NAME = "DB_Open" PARAMETERS = "file, username, password" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ substring( l.file , 1, 10 ) NE 'Merchant5/' }"> 
		<MvASSIGN NAME = "l.database" VALUE = "{ 'Merchant5/' $ l.file }">
	<MvELSE>
		<MvASSIGN NAME = "l.database" VALUE = "{ l.file }">
	</MvIF>
	
	<MvIF EXPR = "{ fexists( l.database ) }">
		<MvOPEN NAME		= "Merchant"
				DATABASE	= "{ l.database }"
				USERNAME	= "{ l.username }"
				PASSWORD	= "{ l.password }"
				TYPE		= "mivasql">
		<MvIF EXPR = "{ g.MvOPEN_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00001', 'Unable to connect to database' ) }">
		</MvIF>
	<MvELSE>
		<MvCREATE NAME		= "Merchant"
				  DATABASE	= "{ l.database }"
				  FIELDS	= ""
				  TYPE		= "mivasql">
		<MvIF EXPR = "{ g.MvCREATE_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00002', 'Unable to connect to database' ) }">
		</MvIF>
	</MvIF>

	<MvDBCOMMAND NAME = "Merchant" COMMAND = "subdir_char" PARAMETER = "_">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Close" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCLOSE NAME = "Merchant">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Open_PrivateKey" PARAMETERS = "file, username, password" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ substring( l.file , 1, 10 ) NE 'Merchant5/' }"> 
		<MvASSIGN NAME = "l.database" VALUE = "{ 'Merchant5/' $ l.file }">
	<MvELSE>
		<MvASSIGN NAME = "l.database" VALUE = "{ l.file }">
	</MvIF>
	
	<MvIF EXPR = "{ fexists( l.database ) }">
		<MvOPEN NAME		= "Merchant_PrivateKey"
				DATABASE	= "{ l.database }"
				USERNAME	= "{ l.username }"
				PASSWORD	= "{ l.password }"
				TYPE		= "mivasql">
		<MvIF EXPR = "{ g.MvOPEN_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00005', 'Unable to connect to database' ) }">
		</MvIF>
	<MvELSE>
		<MvCREATE NAME		= "Merchant_PrivateKey"
				  DATABASE	= "{ l.database }"
				  FIELDS	= ""
				  TYPE		= "mivasql">
		<MvIF EXPR = "{ g.MvCREATE_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00006', 'Unable to connect to database' ) }">
		</MvIF>
	</MvIF>

	<MvDBCOMMAND NAME = "Merchant_PrivateKey" COMMAND = "subdir_char" PARAMETER = "_">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Close_PrivateKey" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCLOSE NAME = "Merchant_PrivateKey">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Apply_Flags" PARAMETERS = "name, flags" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Parse flags and issue MvDBCOMMANDs for each one
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.pos"	VALUE = 1>
	<MvASSIGN NAME = "l.flag"	VALUE = "{ gettoken( l.flags, ',', l.pos ) }">

	<MvWHILE EXPR = "{ NOT ISNULL l.flag }">
		<MvASSIGN NAME = "l.command"	VALUE = "{ gettoken( l.flag, '=', 1 ) }">
		<MvASSIGN NAME = "l.parameter"	VALUE = "{ gettoken( l.flag, '=', 2 ) }">

		<MvDBCOMMAND NAME = "{ l.name }" COMMAND = "{ l.command }" PARAMETER = "{ l.parameter }">

		<MvASSIGN NAME = "l.pos"	VALUE = "{ l.pos + 1 }">
		<MvASSIGN NAME = "l.flag"	VALUE = "{ gettoken( l.flags, ',', l.pos ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_CHAR" PARAMETERS = "length" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.length LE 254 }">	<MvFUNCTIONRETURN VALUE = "{ 'CHAR(' $ l.length $ ')' }">
	<MvELSE>							<MvFUNCTIONRETURN VALUE = "MEMO">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_BOOL" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "BOOL">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_MEMO" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "MEMO">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_INTEGER" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "INTEGER">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_NUMBER"	PARAMETERS = "precision, scale" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.precision }">
		<MvIF EXPR = "{ l.scale }">
			<MvFUNCTIONRETURN VALUE = "{ 'NUMERIC(' $ l.precision $ ',' $ l.scale $ ')' }">
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ 'NUMERIC(' $ l.precision $ ')' }">
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "INTEGER">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Type_DOUBLE" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "CHAR( 64 )">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Lock_Table" PARAMETERS = "primary_table, additional_tables" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ miva_lockfile( g.MerchantPath $ l.primary_table $ '.dbf.lck', 'data' ) LE 0 }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00003', 'Unable to create table lockfile \'' $ g.MerchantPath $ l.primary_table $ '.dbf.lck' $ '\': ' $ file_last_error() ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Unlock_Table" PARAMETERS = "primary_table" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ fdelete( g.MerchantPath $ l.primary_table $ '.dbf.lck' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Increment_Requires_Lock" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ s.mivaversion LT 5.33 }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Index_DESC" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "DESC">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Compare_CaseSensitive" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Compare_UPPER" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.value $ ' )' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Compare_TimeT" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Max_INTEGER" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "9999999999">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Max_NUMBER" PARAMETERS = "precision, scale" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( l.precision EQ 10 ) AND ( l.scale EQ 2 ) }">
		<MvFUNCTIONRETURN VALUE = "999999999.99">
	</MvIF>

	<MvIF EXPR = "{ ( l.scale NE 0 ) AND ( l.precision GT 1 ) }">
		<MvASSIGN NAME = "l.precision"	VALUE = "{ l.precision - 1 }">
	</MvIF>

	<MvASSIGN NAME = "l.value"			VALUE = "">
	<MvASSIGN NAME = "l.pos"			VALUE = 1>

	<MvWHILE EXPR = "{ l.pos LE l.precision }">
		<MvASSIGN NAME = "l.value"		VALUE = "{ l.value $ '9' }">
		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ l.scale }">
		<MvASSIGN NAME = "l.value"		VALUE = "{ l.value $ '.' }">
		<MvASSIGN NAME = "l.pos"		VALUE = 1>

		<MvWHILE EXPR = "{ l.pos LE l.scale }">
			<MvASSIGN NAME = "l.value"	VALUE = "{ l.value $ '9' }">
			<MvASSIGN NAME = "l.pos"	VALUE = "{ l.pos + 1 }">
		</MvWHILE>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Error_IsIndexDuplicate" PARAMETERS = "error" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ 'record violates UNIQUE constraint' CIN l.error }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Error_IndexDuplicate" PARAMETERS = "error_code, error_message" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( l.error_code, 'record violates UNIQUE constraint: ' $ l.error_message ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_OPENVIEW_Range" PARAMETERS = "db, view, query, fields, offset, count" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME = "{ l.db }" VIEW = "{ l.view }" QUERY = "{ l.query }" FIELDS = "{ l.fields }">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.offset GT 0 }">
		<MvSKIP NAME = "{ l.db }" VIEW = "{ l.view }" ROWS = "{ l.offset }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Drop_Index" PARAMETERS = "table, index" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP INDEX ' $ l.index }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00004', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Index_Exists" PARAMETERS = "table, index, exists var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.exists" VALUE = 0>

	<MvIMPORT FILE = "merchdb.dat" FIELDS = "l.type, l.file" DELIMITER = "|">
		<MvIMPORTSTOP>
	</MvIMPORT>

	<MvIF EXPR = "{ g.MvIMPORT_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00007', g.MvIMPORT_Error ) }">
	<MvELSEIF EXPR = "{ l.type NE 'mivasql' }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00008', 'Unexpected database type "' $ l.type $ '"' ) }">
	<MvELSEIF EXPR = "{ substring_var( l.file, 1, 10 ) NE 'Merchant5/' }">
		<MvASSIGN NAME = "l.file" VALUE = "{ 'Merchant5/' $ l.file }">
	</MvIF>

	<MvOPEN NAME		= "Index_Exists"
			TYPE		= "xbase3"
			DATABASE	= "{ l.file }"
			INDEXES		= "{ glosub( l.file, '.dbf', '.mvx' ) }">
	<MvIF EXPR = "{ g.MvOPEN_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00009', g.MvOPEN_Error ) }">
	</MvIF>

	<MvFILTER NAME = "Index_Exists" FILTER = "{ NOT d.deleted }">
	<MvFIND NAME = "Index_Exists"	VALUE = "{ 'I:' $ toupper( l.table ) $ ':' $ toupper( l.index ) }" EXACT = "exact">
	<MvASSIGN NAME = "l.exists"		VALUE = "{ NOT Index_Exists.d.EOF }">

	<MvCLOSE NAME = "Index_Exists">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_TableList_Load" PARAMETERS = "tables var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00011', 'DB_TableList_Load not supported' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Table_Optimize" PARAMETERS = "table" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00012', 'DB_Table_Optimize not supported' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Table_Analyze" PARAMETERS = "table" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00013', 'DB_Table_Analyze not supported' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Escape_Identifier" PARAMETERS = "keyword" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.keyword }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_FULLTEXT_Supported" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Create_FULLTEXT_Index" PARAMETERS = "table, index, columns" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBA-MVS-00010', 'MivaSQL does not support FULLTEXT indexes' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_IFNULL" PARAMETERS = "expr1, expr2" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.expr1 $ ', ' $ l.expr2 $ ' )' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_Normalize_Value" PARAMETERS = "type, value var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| This function intentionally does nothing
	|
	</MvCOMMENT>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_EQ" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' = ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' = ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'DOUBLE' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' = ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' = ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) = UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) = UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) = ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) = ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) = ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) = UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) = UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_NE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <> ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <> ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'DOUBLE' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <> ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <> ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) <> UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) <> UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) <> ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) <> ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) <> ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) <> UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) <> UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_GT" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' > ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' > ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'DOUBLE' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' > ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' > ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) > UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) > UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) > ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) > ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) > ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) > UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) > UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_GE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' >= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' >= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'DOUBLE' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' >= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' >= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) >= UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) >= UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) >= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) >= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) >= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) >= UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) >= UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_LT" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' < ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' < ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'DOUBLE' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' < ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' < ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) < UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) < UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) < ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) < ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) < ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) < UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) < UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_LE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'DOUBLE' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' <= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) <= UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) <= UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) <= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) <= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) <= ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) <= UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) <= UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_CO" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'DOUBLE' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) LIKE UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) LIKE UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) LIKE UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) LIKE UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_NC" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'DOUBLE' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) NOT LIKE UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) NOT LIKE UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) NOT LIKE UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) NOT LIKE UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_LIKE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) LIKE UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) LIKE UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) LIKE UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) LIKE UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_NOTLIKE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'INTEGER' }">				<MvFUNCTIONRETURN VALUE = "{ l.column $ ' NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NUMBER' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'BOOL' }">			<MvFUNCTIONRETURN VALUE = "{ l.column $ ' NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'CHAR' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) NOT LIKE UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'MEMO' }">			<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) NOT LIKE UPPER( ? )' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_INTEGER' }">	<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_NUMBER' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_BOOL' }">		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) NOT LIKE ?' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">		<MvFUNCTIONRETURN VALUE = "{ 'UPPER( IFNULL( ' $ l.column $ ', \'\' ) ) NOT LIKE UPPER( ? )' }">
	<MvELSE>											<MvFUNCTIONRETURN VALUE = "{ 'UPPER( ' $ l.column $ ' ) NOT LIKE UPPER( ? )' }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_TRUE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) = 1' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) = 1' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' = 1' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_FALSE" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'NULL_INTEGER' OR
					l.type EQ 'NULL_NUMBER'  OR
					l.type EQ 'NULL_BOOL' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', 0 ) = 0' }">
	<MvELSEIF EXPR = "{ l.type EQ 'NULL_CHAR' }">
		<MvFUNCTIONRETURN VALUE = "{ 'IFNULL( ' $ l.column $ ', \'\' ) = 0' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' = 0' }">
</MvFUNCTION>

<MvFUNCTION NAME = "DB_Filter_ISNULL" PARAMETERS = "type, column, value var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ l.column $ ' IS NULL' }">
</MvFUNCTION>
