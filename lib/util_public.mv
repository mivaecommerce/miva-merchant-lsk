<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2024 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-UTL-PUB-
| Next Error Code: 61
|
</MvCOMMENT>

<MvCOMMENT>
|
| Examines the contents of the shopping basket in g.Basket to determine if it meets the minimum checkout settings for the store.
| Both the minimum quantity of items and the minimum total price are verified.
|
</MvCOMMENT>

<MvFUNCTION NAME = "OrderMinimumsMet" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( g.Store:omin_quant EQ 0 ) AND ( g.Store:omin_price EQ 0 ) }">
		<MvASSIGN NAME = "l.minimum_met" VALUE = 1>
	<MvELSE>
		<MvIF EXPR = "{ g.Store:omin_all }">
			<MvASSIGN NAME = "l.minimum_met" VALUE = 1>
			<MvIF EXPR = "{ g.Store:omin_quant }">
				<MvDO FILE = "{ g.Library_Filename_DB }" NAME = "l.basketquantity" VALUE = "{ Basket_Quantity_All( g.Basket:basket_id ) }">
				<MvASSIGN NAME = "l.minimum_met" VALUE = "{ ( l.basketquantity GE g.Store:omin_quant ) AND l.minimum_met }">
			</MvIF>

			<MvIF EXPR = "{ g.Store:omin_price }">
				<MvCOMMENT>
					We need to call the SubTotal here instead of BasketTotal so that BasketCharges 
					that effect the cart's price dont force it to fall below the Order Minimum
				</MvCOMMENT>

				<MvDO FILE = "{ g.Library_Filename_DB }" NAME = "l.basketprice" VALUE = "{ Basket_SubTotal( g.Basket:basket_id ) }">
				<MvASSIGN NAME = "l.minimum_met" VALUE = "{ ( l.basketprice GE g.Store:omin_price ) AND l.minimum_met }">
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.minimum_met" VALUE = 0>
			<MvIF EXPR = "{ g.Store:omin_quant }">
				<MvDO FILE = "{ g.Library_Filename_DB }" NAME = "l.basketquantity" VALUE = "{ Basket_Quantity_All( g.Basket:basket_id ) }">
				<MvASSIGN NAME = "l.minimum_met" VALUE = "{ ( l.basketquantity GE g.Store:omin_quant ) OR l.minimum_met }">
			</MvIF>

			<MvIF EXPR = "{ g.Store:omin_price }">
				<MvCOMMENT>
					We need to call the SubTotal here instead of BasketTotal so that BasketCharges 
					that effect the cart's price dont force it to fall below the Order Minimum
				</MvCOMMENT>

				<MvDO FILE = "{ g.Library_Filename_DB }" NAME = "l.basketprice" VALUE = "{ Basket_SubTotal( g.Basket:basket_id ) }">
				<MvASSIGN NAME = "l.minimum_met" VALUE = "{ ( l.basketprice GE g.Store:omin_price ) OR l.minimum_met }">
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.minimum_met }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function parses input parameters and cookies to identify and verify a shopping interface session.
| The function also calls SetRuntimePaths() to initialize variables dependent on the current site configuration.
| Initializing g.Store_Code prior to calling this function will eliminate overhead.
|
| Input cookies are parsed using ParseCookies() and stored in the variable g.Request_Cookies.
|
</MvCOMMENT>

<MvFUNCTION NAME = "DetermineSessionID" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Parse input cookies
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "g.Output_Cookies"		VALUE = "">
	<MvEVAL EXPR = "{ ParseCookies( g.Request_Cookies ) }">

	<MvCOMMENT>
	|
	| Passed in values override cookies
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ len( g.Store_Code ) }">
		<MvASSIGN NAME = "l.store_code"		VALUE = "{ g.Store_Code }">
	<MvELSE>
		<MvCOMMENT>
		|
		| This is backwards compatibility code for older callers of DetermineSessionID that do so before establishing g.Store_Code.
		| This code mirrors the default behavior in merchant.mvc.  For efficiency, g.Store_Code should be established prior to
		| calling this function.  It does not matter if the store has been opened or not.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ [ g.Library_Filename_DB ].StoreList_Load_All( l.stores ) NE 1 }">
			<MvEVAL EXPR = "{ SetRuntimePaths() }">
			<MvFUNCTIONRETURN VALUE = "{ g.Session_ID }">
		</MvIF>

		<MvASSIGN NAME = "l.store_code"	VALUE = "{ l.stores[ 1 ]:code }">
	</MvIF>

	<MvASSIGN NAME = "l.cookie_prefix"	VALUE = "{ 'mm5-' $ AlphaNumericOnly( l.store_code ) $ '-' }">

	<MvIF EXPR = "{ len( g.Session_ID ) EQ 0 }">			<MvASSIGN NAME = "g.Session_ID"				VALUE = "{ miva_variable_value( 'g.Request_Cookies:' $ l.cookie_prefix $ 'basket-id' ) }">			</MvIF>
	<MvIF EXPR = "{ len( g.Customer_Session_ID ) EQ 0 }">	<MvASSIGN NAME = "g.Customer_Session_ID"	VALUE = "{ miva_variable_value( 'g.Request_Cookies:' $ l.cookie_prefix $ 'customer-session' ) }">	</MvIF>
	<MvIF EXPR = "{ len( g.Affiliate_Session_ID ) EQ 0 }">	<MvASSIGN NAME = "g.Affiliate_Session_ID"	VALUE = "{ miva_variable_value( 'g.Request_Cookies:' $ l.cookie_prefix $ 'affiliate-session' ) }">	</MvIF>
	<MvIF EXPR = "{ len( g.Checkout_Session_ID ) EQ 0 }">	<MvASSIGN NAME = "g.Checkout_Session_ID"	VALUE = "{ miva_variable_value( 'g.Request_Cookies:' $ l.cookie_prefix $ 'checkout-session' ) }">	</MvIF>

	<MvEVAL EXPR = "{ SetRuntimePaths() }">

	<MvFUNCTIONRETURN VALUE = "{ g.Session_ID }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function should be called whenever the value of one of the session variables is changed.
|
</MvCOMMENT>

<MvFUNCTION NAME = "UpdateSessionID" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ SetRuntimeURLs() }">
	<MvASSIGN NAME = "l.null" VALUE = "{ SetRuntimeCookies() }">
</MvFUNCTION>

<MvFUNCTION NAME = "AppendRuntimeParameter" PARAMETERS = "url, name, value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.value ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.url }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.url $ l.name $ '=' $ encodeattribute( l.value ) $ '&' }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function examines the current shopping environment, configuration, and session, then initializes variables
| required for proper navigation of the store.
|
</MvCOMMENT>

<MvFUNCTION NAME = "SetRuntimePaths" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.baseurl"						VALUE = "{ g.Domain:base_url }">

	<MvIF EXPR = "{ NOT ISNULL g.Domain:base_surl }">
		<MvASSIGN NAME = "g.secure_baseurl"				VALUE = "{ g.Domain:base_surl }">
	<MvELSE>
		<MvASSIGN NAME = "g.secure_baseurl"				VALUE = "{ g.baseurl }">
	</MvIF>

	<MvIF EXPR = "{ 'https://' IN s.documenturl }">
		<MvASSIGN NAME = "g.Secure"						VALUE = 1>
		<MvASSIGN NAME = "g.basehref"					VALUE = "{ g.secure_baseurl }">
		<MvASSIGN NAME = "g.cookiedomain"				VALUE = "{ g.Domain:mmc_sdomn }">
		<MvASSIGN NAME = "g.cookiepath"					VALUE = "{ g.Domain:mmc_spath }">
		<MvASSIGN NAME = "g.Module_Root_Versionless"	VALUE = "{ g.Domain:mod_sroot }">
		<MvASSIGN NAME = "g.imageroot"					VALUE = "{ g.Domain:img_sroot }">
	<MvELSE>
		<MvASSIGN NAME = "g.Secure"						VALUE = 0>
		<MvASSIGN NAME = "g.basehref"					VALUE = "{ g.baseurl }">
		<MvASSIGN NAME = "g.cookiedomain"				VALUE = "{ g.Domain:mmc_domn }">
		<MvASSIGN NAME = "g.cookiepath"					VALUE = "{ g.Domain:mmc_path }">
		<MvASSIGN NAME = "g.Module_Root_Versionless"	VALUE = "{ g.Domain:mod_root }">
		<MvASSIGN NAME = "g.imageroot"					VALUE = "{ g.Domain:image_root }">
	</MvIF>
	
	<MvASSIGN NAME = "g.Module_Root"					VALUE = "{ g.Module_Root_Versionless $ g.Version_Path }">
	<MvASSIGN NAME = "l.null"							VALUE = "{ SetPaths() }">

	<MvFUNCTIONRETURN VALUE = "{ SetRuntimeURLs() }">
</MvFUNCTION>

<MvFUNCTION NAME = "SetRuntimeURLs" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( g.Domain:mm_surl ) EQ 0 }">
		<MvCOMMENT>
		|
		| If there is no secure URL, there is no need to pass Session_ID across the HTTP <-> HTTPS boundary, as it should never exist
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "g.sessionurl"					VALUE = "{ g.Domain:mm_url }">
		<MvASSIGN NAME = "l.failsafe_url"				VALUE = "{ g.Domain:mm_url }">

		<MvIF EXPR = "{ g.Domain:mm_params EQ 'always' }">
			<MvASSIGN NAME = "g.sessionurl"				VALUE = "{ AppendRuntimeParameter( g.sessionurl,		'Session_ID',			g.Session_ID ) }">
			<MvASSIGN NAME = "g.sessionurl"				VALUE = "{ AppendRuntimeParameter( g.sessionurl,		'Customer_Session_ID',	g.Customer_Session_ID ) }">
			<MvASSIGN NAME = "g.sessionurl"				VALUE = "{ AppendRuntimeParameter( g.sessionurl,		'Affiliate_Session_ID',	g.Affiliate_Session_ID ) }">
			<MvASSIGN NAME = "g.sessionurl"				VALUE = "{ AppendRuntimeParameter( g.sessionurl,		'Checkout_Session_ID',	g.Checkout_Session_ID ) }">
		</MvIF>

		<MvASSIGN NAME = "g.secure_sessionurl"			VALUE = "{ g.sessionurl }">
	<MvELSEIF EXPR = "{ g.Secure }">
		<MvCOMMENT>
		|
		| If we are currently secure, Session_ID may be required to be passed when transitioning back to an HTTP connection, as the cookies expiration
		| is not updated on a secure page, and it may expire before the Basket does.
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "g.sessionurl"					VALUE = "{ g.Domain:mm_url }">

		<MvIF EXPR = "{ ( g.Domain:mm_params EQ 'always' ) OR ( g.Domain:mm_params EQ 'switch' ) }">
			<MvASSIGN NAME = "g.sessionurl"				VALUE = "{ AppendRuntimeParameter( g.sessionurl,		'Session_ID',			g.Session_ID ) }">
		</MvIF>

		<MvASSIGN NAME = "g.secure_sessionurl"			VALUE = "{ g.Domain:mm_surl }">
		<MvASSIGN NAME = "l.failsafe_url"				VALUE = "{ g.Domain:mm_surl }">

		<MvIF EXPR = "{ g.Domain:mm_params EQ 'switch' }">
			<MvASSIGN NAME = "g.secure_sessionurl"		VALUE = "{ AppendRuntimeParameter( g.secure_sessionurl,	'Session_ID',			g.Session_ID ) }">
		<MvELSEIF EXPR = "{ g.Domain:mm_params EQ 'always' }">
			<MvASSIGN NAME = "g.secure_sessionurl"		VALUE = "{ AppendRuntimeParameter( g.secure_sessionurl,	'Session_ID',			g.Session_ID ) }">
			<MvASSIGN NAME = "g.secure_sessionurl"		VALUE = "{ AppendRuntimeParameter( g.secure_sessionurl,	'Customer_Session_ID',	g.Customer_Session_ID ) }">
			<MvASSIGN NAME = "g.secure_sessionurl"		VALUE = "{ AppendRuntimeParameter( g.secure_sessionurl,	'Affiliate_Session_ID',	g.Affiliate_Session_ID ) }">
			<MvASSIGN NAME = "g.secure_sessionurl"		VALUE = "{ AppendRuntimeParameter( g.secure_sessionurl,	'Checkout_Session_ID',	g.Checkout_Session_ID ) }">
		</MvIF>
	<MvELSE>
		<MvCOMMENT>
		|
		| If we are not secure, Session_ID may be required to be passed when transitioning to an HTTPS connection, as the secure URL may not
		| receive the non-secure cookie (shared SSL certificates, separate secure server, etc...)
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "g.sessionurl"					VALUE = "{ g.Domain:mm_url }">
		<MvASSIGN NAME = "l.failsafe_url"				VALUE = "{ g.Domain:mm_url }">

		<MvIF EXPR = "{ g.Domain:mm_params EQ 'always' }">
			<MvASSIGN NAME = "g.sessionurl"				VALUE = "{ AppendRuntimeParameter( g.sessionurl,		'Session_ID',			g.Session_ID ) }">
		</MvIF>

		<MvASSIGN NAME = "g.secure_sessionurl"			VALUE = "{ g.Domain:mm_surl }">

		<MvIF EXPR = "{ ( g.Domain:mm_params EQ 'always' ) OR ( g.Domain:mm_params EQ 'switch' ) }">
			<MvASSIGN NAME = "g.secure_sessionurl"		VALUE = "{ AppendRuntimeParameter( g.secure_sessionurl,	'Session_ID',			g.Session_ID ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "g.sessionurl_nosep"				VALUE = "{ substring( g.sessionurl, 1, len( g.sessionurl ) - 1 ) }">
	<MvASSIGN NAME = "g.secure_sessionurl_nosep"		VALUE = "{ substring( g.secure_sessionurl, 1, len( g.secure_sessionurl ) - 1 ) }">

	<MvCOMMENT>
	|
	| clientside_url and json urls must be based off of documenturl to avoid issues with JavaScript tainting
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.basename"						VALUE = "{ BaseName( s.arg1 ) }">
	<MvASSIGN NAME = "l.self_url"						VALUE = "{ SelfReferentialURL_Failsafe( l.failsafe_url ) }">

	<MvASSIGN NAME = "g.clientside_url"					VALUE = "{ glosub( l.self_url, l.basename, 'clientside.mvc' ) $ 'T=' $ [ 'config.mvc' ].Version_Token() $ '&' }">

	<MvIF EXPR = "{ g.Domain:javascript EQ 'minified' }">	<MvASSIGN NAME = "g.Session:clientside_minified"	VALUE = 1>
	<MvELSE>												<MvASSIGN NAME = "g.Session:clientside_minified"	VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ g.Session:clientside_minified }">
		<MvASSIGN NAME = "g.clientside_url"				VALUE = "{ g.clientside_url $ 'M=1&' }">
	</MvIF>

	<MvASSIGN NAME = "g.json_nosessionurl"				VALUE = "{ glosub( l.self_url, l.basename, 'json.mvc' ) }">
	<MvASSIGN NAME = "g.json_url"						VALUE = "{ g.json_nosessionurl }">
</MvFUNCTION>

<MvFUNCTION NAME = "ValidatePaths" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( NOT ISNULL g.Domain:mod_root ) AND ( g.Domain:mod_sroot EQ g.Domain:mod_root ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvCOMMENT>
	|
	| Toggle secure/non-secure root directory for modules if the configured value is not correct--for example, loading
	| from the secure configuration without https or vice-versa.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ g.Secure }">
		<MvIF EXPR = "{ sexists( g.Domain:mod_sroot $ g.Version_Path $ 'lib/config.mvc' ) }">			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ NOT sexists( g.Domain:mod_root $ g.Version_Path$ 'lib/config.mvc' ) }">		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00019', 'The secure root directory for modules is not configured properly and the system was unable to determine the correct path' ) }">
		</MvIF>

		<MvASSIGN NAME = "g.Module_Root_Versionless"	VALUE = "{ g.Domain:mod_root }">
	<MvELSE>
		<MvIF EXPR = "{ sexists( g.Domain:mod_root $ g.Version_Path $ 'lib/config.mvc' ) }">			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSEIF EXPR = "{ NOT sexists( g.Domain:mod_sroot $ g.Version_Path $ 'lib/config.mvc' ) }">	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00020', 'The root directory for modules is not configured properly and the system was unable to determine the correct path' ) }">
		</MvIF>

		<MvASSIGN NAME = "g.Module_Root_Versionless"	VALUE = "{ g.Domain:mod_sroot }">
	</MvIF>

	<MvASSIGN NAME = "g.Module_Root"					VALUE = "{ g.Module_Root_Versionless $ g.Version_Path }">
	<MvASSIGN NAME = "l.null"							VALUE = "{ SetPaths() }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| This function outputs Set-Cookie headers to update or create shopping session cookies.  
|
| When called in response to an HTTP request, the following cookies are updated:
| 	mm5-[store_code]-basket-id
|
| When called in response to an HTTPS request, the following cookies are updated:
| 	mm5-[store_code]-customer-session
| 	mm5-[store_code]-affiliate-session
| 	mm5-[store_code]-checkout-session
|
| If a session value does not exist for any of the cookies above, that cookie is explicitly cleared by specifying an expiration date one year in the past.
|
| Cookies are contained in the cookie list g.Output_Cookies.
|
</MvCOMMENT>

<MvFUNCTION NAME = "SetRuntimeCookies" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Domain:mmcexp }">		<MvASSIGN NAME = "l.expires"		VALUE = "{ s.dyn_time_t + ( g.Domain:mmcexp * 60 ) }">
	<MvELSE>								<MvASSIGN NAME = "l.expires"		VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ g.Domain:mmcsexp }">	<MvASSIGN NAME = "l.secure_expires"	VALUE = "{ s.dyn_time_t + ( g.Domain:mmcsexp * 60 ) }">
	<MvELSE>								<MvASSIGN NAME = "l.secure_expires"	VALUE = "">
	</MvIF>

	<MvASSIGN NAME = "l.cookie_prefix"	VALUE = "{ 'mm5-' $ AlphaNumericOnly( g.Store:code ) $ '-' }">

	<MvIF EXPR = "{ g.Domain:mmc_output EQ 'https' }">
		<MvIF EXPR = "{ g.Secure }">
			<MvEVAL EXPR = "{ v10_SetCookie( g.Output_Cookies,	l.cookie_prefix $ 'basket-id',			g.Session_ID,			g.cookiedomain, l.expires,			g.cookiepath,	1,			g.Domain:mmc_site ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ ( g.Domain:mmc_output EQ 'http_https' ) OR ( NOT g.Secure ) }">
		<MvCOMMENT>
		|
		| Also covers "http" when not secure and treats unexpected values the
		| same as "http".
		|
		</MvCOMMENT>

		<MvEVAL EXPR = "{ v10_SetCookie( g.Output_Cookies,		l.cookie_prefix $ 'basket-id',			g.Session_ID,			g.cookiedomain, l.expires,			g.cookiepath,	0,			g.Domain:mmc_site ) }">
	</MvIF>

	<MvIF EXPR = "{ g.Secure OR ( len( g.Domain:mm_surl ) EQ 0 ) }">
		<MvIF EXPR = "{ len( g.Customer_Session_ID ) }">
			<MvEVAL EXPR = "{ v10_SetCookie( g.Output_Cookies,	l.cookie_prefix $ 'customer-session',	g.Customer_Session_ID,	g.cookiedomain, l.secure_expires,	g.cookiepath,	g.Secure,	g.Domain:mmc_ssite ) }">
		<MvELSEIF EXPR = "{ NOT ISNULL miva_variable_value( 'g.Request_Cookies:' $ l.cookie_prefix $ 'customer-session' ) }">
			<MvEVAL EXPR = "{ ClearCookie( g.Output_Cookies,	l.cookie_prefix $ 'customer-session',	g.cookiedomain,			g.cookiepath,	g.Secure ) }">
		</MvIF>

		<MvIF EXPR = "{ len( g.Affiliate_Session_ID ) }">
			<MvEVAL EXPR = "{ v10_SetCookie( g.Output_Cookies,	l.cookie_prefix $ 'affiliate-session',	g.Affiliate_Session_ID,	g.cookiedomain, l.secure_expires,	g.cookiepath,	g.Secure,	g.Domain:mmc_ssite ) }">
		<MvELSEIF EXPR = "{ NOT ISNULL miva_variable_value( 'g.Request_Cookies:' $ l.cookie_prefix $ 'affiliate-session' ) }">
			<MvEVAL EXPR = "{ ClearCookie( g.Output_Cookies,	l.cookie_prefix $ 'affiliate-session',	g.cookiedomain,			g.cookiepath,	g.Secure ) }">
		</MvIF>

		<MvIF EXPR = "{ len( g.Checkout_Session_ID ) }">
			<MvEVAL EXPR = "{ v10_SetCookie( g.Output_Cookies,	l.cookie_prefix $ 'checkout-session',	g.Checkout_Session_ID,	g.cookiedomain, l.secure_expires,	g.cookiepath,	g.Secure,	g.Domain:mmc_ssite ) }">
		<MvELSEIF EXPR = "{ NOT ISNULL miva_variable_value( 'g.Request_Cookies:' $ l.cookie_prefix $ 'checkout-session' ) }">
			<MvEVAL EXPR = "{ ClearCookie( g.Output_Cookies,	l.cookie_prefix $ 'checkout-session',	g.cookiedomain,			g.cookiepath,	g.Secure ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ OutputCookies( g.Output_Cookies ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function attempts to locate a Basket record for the session identified by g.Session_ID.
| If a Basket record exists, it is checked for expiration and discarded if it has expired.
|
| If a valid, unexpired Basket record is found, shopping session parameters are verified and the following
| verification variables are set:
|
|	g.Customer_Session_Verified
|	g.Affiliate_Session_Verified
|	g.Checkout_Session_Verified
|
</MvCOMMENT>

<MvFUNCTION NAME = "OpenBasket" PARAMETERS = "basket var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.basket"								VALUE = "">
	<MvASSIGN NAME = "l.opened"								VALUE = "{ OpenBasket_LowLevel( l.basket ) }">

	<MvASSIGN NAME = "g.Customer_Session_Verified"			VALUE = 0>
	<MvASSIGN NAME = "g.Affiliate_Session_Verified"			VALUE = 0>
	<MvASSIGN NAME = "g.Checkout_Session_Verified"			VALUE = 0>

	<MvIF EXPR = "{ NOT l.opened }">
		<MvASSIGN NAME = "g.Session_ID"						VALUE = "{ MakeSessionID() }">
		<MvASSIGN NAME = "g.Customer_Session_ID"			VALUE = "">
		<MvASSIGN NAME = "g.Checkout_Session_ID"			VALUE = "">
	<MvELSE>
		<MvIF EXPR = "{ ( NOT ISNULL l.basket:cussess_id ) AND ( NOT ISNULL g.Customer_Session_ID ) AND ( g.Customer_Session_ID EQ l.basket:cussess_id ) }">
			<MvASSIGN NAME = "g.Customer_Session_Verified"	VALUE = 1>
		<MvELSE>
			<MvASSIGN NAME = "g.Customer_Session_ID"		VALUE = "">
		</MvIF>

		<MvIF EXPR = "{ ( NOT ISNULL l.basket:affsess_id ) AND ( NOT ISNULL g.Affiliate_Session_ID ) AND ( g.Affiliate_Session_ID EQ l.basket:affsess_id ) }">
			<MvASSIGN NAME = "g.Affiliate_Session_Verified"	VALUE = 1>
		<MvELSE>
			<MvASSIGN NAME = "g.Affiliate_Session_ID"		VALUE = "">
		</MvIF>

		<MvIF EXPR = "{ ( NOT ISNULL l.basket:chksess_id ) AND ( NOT ISNULL g.Checkout_Session_ID ) AND ( g.Checkout_Session_ID EQ l.basket:chksess_id ) }">
			<MvASSIGN NAME = "g.Checkout_Session_Verified"	VALUE = 1>
		<MvELSE>
			<MvASSIGN NAME = "g.Checkout_Session_ID"		VALUE = "">
		</MvIF>
	</MvIF>

	<MvEVAL EXPR = "{ UpdateSessionID() }">

	<MvFUNCTIONRETURN VALUE = "{ l.opened }">
</MvFUNCTION>

<MvFUNCTION NAME = "OpenBasket_LowLevel" PARAMETERS = "basket var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.Session_ID }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Basket_Load_Session( g.Session_ID, l.basket ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( s.time_t - l.basket:lastupdate ) GT ( g.Store:baskexp * 60 ) }">
		<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Library_Filename_DB ].Runtime_Basket_Empty( l.basket:basket_id ) }">
		<MvASSIGN NAME = "l.null"					VALUE = "{ [ g.Library_Filename_DB ].Basket_Load_ID( l.basket:basket_id, l.basket ) }">

		<MvIF EXPR = "{ l.basket:cust_id }">
			<MvASSIGN NAME = "l.basket:cust_id"		VALUE = 0>
			<MvASSIGN NAME = "l.basket:cussess_id"	VALUE = "">
			<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Library_Filename_DB ].Basket_Update_Customer_ID( l.basket ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.basket:lastupdate"	VALUE = "{ s.time_t }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Library_Filename_DB ].Basket_Update_LastUpdate( l.basket ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.basket:basket_id }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function outputs an HTML <select> tag containing all of the countries in the domain country list.
|
</MvCOMMENT>

<MvFUNCTION NAME = "Country_Select" PARAMETERS = "name, default" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ '<SELECT NAME = \"' $ l.name $ '\">' }">
	<MvEVAL EXPR = "{ DrawOption_SelectOne() }">
	<MvDO FILE = "{ g.Library_Filename_DB }" NAME = "l.country_count" VALUE = "{ CountryList_Load_All( l.country ) }">

	<MvASSIGN NAME = "l.pos" VALUE = 1>
	<MvWHILE EXPR = "{ l.pos LE l.country_count }">
		<MvIF EXPR = "{ l.country[ l.pos ]:alpha EQ l.default }">
			<MvEVAL EXPR = "{ '<OPTION VALUE = \"' $ encodeentities( l.country[ l.pos ]:alpha ) $ '\" SELECTED>' $ encodeentities( l.country[ l.pos ]:name ) $ '</OPTION>' }">
		<MvELSE>
			<MvEVAL EXPR = "{ '<OPTION VALUE = \"' $ encodeentities( l.country[ l.pos ]:alpha ) $ '\">' $ encodeentities( l.country[ l.pos ]:name ) $ '</OPTION>' }">
		</MvIF>

		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvEVAL EXPR = "</SELECT>">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| This function outputs an HTML <select> tag containing all of the countries in the current store's country list.
|
</MvCOMMENT>

<MvFUNCTION NAME = "StoreCountry_Select" PARAMETERS = "name, default" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.pos" VALUE = 1>

	<MvDO FILE = "{ g.Library_Filename_DB }" NAME = "l.country_count" VALUE = "{ StoreCountryList_Load_All( l.country ) }">

	<MvASSIGN NAME = "l.first_country_name" 	VALUE = "{ l.country[ l.pos ]:name }">
	<MvASSIGN NAME = "l.first_country_alpha" 	VALUE = "{ l.country[ l.pos ]:alpha }">

	<MvIF EXPR = "{ l.country_count EQ 1 }">
		<b><MvEVAL EXPR = "{ l.first_country_name }"></b>
		<input type="hidden" name="{ l.name }" value="{ encodeentities( l.first_country_alpha ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ '<SELECT NAME = "' $ l.name $ '">' }">
		<MvEVAL EXPR = "{ DrawOption_SelectOne() }">

		<MvWHILE EXPR = "{ l.pos LE l.country_count }">
			<MvIF EXPR = "{ l.country[ l.pos ]:alpha EQ l.default }">
				<MvEVAL EXPR = "{ '<OPTION VALUE = \"' $ encodeentities( l.country[ l.pos ]:alpha ) $ '\" SELECTED>' $ encodeentities( l.country[ l.pos ]:name ) $ '</OPTION>' }">
			<MvELSE>
				<MvEVAL EXPR = "{ '<OPTION VALUE = \"' $ encodeentities( l.country[ l.pos ]:alpha ) $ '\">' $ encodeentities( l.country[ l.pos ]:name ) $ '</OPTION>' }">
			</MvIF>

			<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
		</MvWHILE>

		<MvEVAL EXPR = "</SELECT>">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| This function outputs an HTML <select> tag containing all of the states in the current store's state list.
|
</MvCOMMENT>

<MvFUNCTION NAME = "State_Select" PARAMETERS = "name, default" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.selected" VALUE = 0>

	<MvEVAL EXPR = "{ '<SELECT NAME = \"' $ encodeentities( l.name ) $ '\">' }">
	<MvDO FILE = "{ g.Library_Filename_DB }" NAME = "l.state_count" VALUE = "{ StateList_Load_All( l.state ) }">

	<MvASSIGN NAME = "l.pos" VALUE = 1>
	<MvWHILE EXPR = "{ l.pos LE l.state_count }">
		<MvIF EXPR = "{ l.state[ l.pos ]:code EQ l.default }">
			<MvEVAL EXPR = "{ '<OPTION VALUE = \"' $ encodeentities( l.state[ l.pos ]:code ) $ '\" SELECTED>' $ encodeentities( l.state[ l.pos ]:name ) $ '</OPTION>' }">
			<MvASSIGN NAME = "l.selected" VALUE = 1>
		<MvELSE>
			<MvEVAL EXPR = "{ '<OPTION VALUE = \"' $ encodeentities( l.state[ l.pos ]:code ) $ '\">' $ encodeentities( l.state[ l.pos ]:name ) $ '</OPTION>' }">
		</MvIF>

		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvEVAL EXPR = "</SELECT>">

	<MvFUNCTIONRETURN VALUE = "{ l.selected }">
</MvFUNCTION>

<MvFUNCTION NAME = "State_Select_US_Init" PARAMETERS = "states var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.state_count" VALUE = 0>

	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Outside US">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Alabama">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "AL">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Alaska">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "AK">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Arizona">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "AZ">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Arkansas">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "AR">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "California">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "CA">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Colorado">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "CO">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Connecticut">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "CT">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Delaware">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "DE">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "District of Columbia">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "DC">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Florida">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "FL">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Georgia">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "GA">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Hawaii">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "HI">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Idaho">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "ID">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Illinois">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "IL">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Indiana">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "IN">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Iowa">					<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "IA">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Kansas">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "KS">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Kentucky">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "KY">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Louisiana">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "LA">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Maine">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "ME">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Maryland">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "MD">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Massachusetts">		<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "MA">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Michigan">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "MI">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Minnesota">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "MN">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Mississippi">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "MS">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Missouri">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "MO">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Montana">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "MT">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Nebraska">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "NE">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Nevada">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "NV">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "New Hampshire">		<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "NH">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "New Jersey">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "NJ">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "New Mexico">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "NM">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "New York">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "NY">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "North Carolina">		<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "NC">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "North Dakota">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "ND">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Ohio">					<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "OH">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Oklahoma">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "OK">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Oregon">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "OR">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Pennsylvania">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "PA">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Rhode Island">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "RI">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "South Carolina">		<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "SC">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "South Dakota">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "SD">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Tennessee">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "TN">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Texas">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "TX">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Utah">					<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "UT">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Vermont">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "VT">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Virginia">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "VA">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Washington">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "WA">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "West Virginia">		<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "WV">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Wisconsin">			<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "WI">
	<MvASSIGN NAME = "l.state_count" VALUE = "{ l.state_count + 1 }">	<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "name" VALUE = "Wyoming">				<MvASSIGN NAME = "l.states" INDEX = "{ l.state_count }" MEMBER = "code" VALUE = "WY">

	<MvFUNCTIONRETURN VALUE = "{ l.state_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "State_Select_US" PARAMETERS = "name, select_value var, other_value var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.state_count"	VALUE = "{ State_Select_US_Init( l.states ) }">
	<MvASSIGN NAME = "l.have_state"		VALUE = 0>

	<MvIF EXPR = "{ len( l.other_value ) NE 0 }">
		<MvASSIGN NAME = "l.value"		VALUE = "{ l.other_value }">
	<MvELSE>
		<MvASSIGN NAME = "l.value"		VALUE = "{ l.select_value }">
	</MvIF>

	<select name="{ encodeentities( l.name ) }">
	<MvASSIGN NAME = "l.state" VALUE = 1>
	<MvWHILE EXPR = "{ l.state LT l.state_count }">
		<MvEVAL EXPR = "{ DrawOption( l.states[ l.state ]:code, toupper( l.value ), l.states[ l.state ]:name ) }">

		<MvIF EXPR = "{ l.states[ l.state ]:code EQ toupper( l.value ) }">
			<MvASSIGN NAME = "l.have_state"	VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.state" VALUE = "{ l.state + 1 }">
	</MvWHILE>
	</select>

	<MvIF EXPR = "{ l.have_state }">
		<MvASSIGN NAME = "l.select_value"	VALUE = "{ l.value }">
		<MvASSIGN NAME = "l.other_value"	VALUE = "">
	<MvELSE>
		<MvASSIGN NAME = "l.select_value"	VALUE = "">
		<MvASSIGN NAME = "l.other_value"	VALUE = "{ l.value }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| This function copies its parameters to the global variables Error_Code and Error_Message, then returns 0.
|
</MvCOMMENT>

<MvFUNCTION NAME = "Error" PARAMETERS = "code, message" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Error_DB_EOF" 	VALUE = 0>
	<MvASSIGN NAME = "g.Error_Code"		VALUE = "{ l.code }">
	<MvASSIGN NAME = "g.Error_Message"	VALUE = "{ l.message }">

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Error_Clear" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Error_Code"		VALUE = "">
	<MvASSIGN NAME = "g.Error_Message"	VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "Error_No_ShippingMethods" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ Error( 'no_shipping_methods', 'Shipping could not be calculated for your basket.  This may be due to a network or configuration error, or the contents of your basket may not be able to be shipped in a single shipment.' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Error_ShippingMethod_Invalid" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ Error( 'invalid_shipping_method', 'The specified shipping method is invalid' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Error_Is_ShippingMethod_Invalid" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.Error_Code EQ 'invalid_shipping_method' }">
</MvFUNCTION>

<MvFUNCTION NAME = "Error_PaymentMethod_Invalid" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ Error( 'invalid_payment_method', 'The specified payment method is invalid' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Error_Is_PaymentMethod_Invalid" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ g.Error_Code EQ 'invalid_payment_method' }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function adds containing angle brackets to one or more comma separated email addresses in parameter address.  
| Some SMTP servers require email addresses to be contained in angle brackets.
|
| Returns The email addresses in address, with angle brackets added
|
</MvCOMMENT>

<MvFUNCTION NAME = "Email_Add_AngleBrackets" PARAMETERS = "address" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pos" 		VALUE = 1>

	<MvASSIGN NAME = "l.current" 	VALUE = "{ gettoken( l.address, ',', l.pos ) }">
	<MvWHILE EXPR = "{ l.current }">
		<MvASSIGN NAME = "l.current" VALUE = "{ trim( l.current ) }">
		<MvIF EXPR = "{ substring( l.current, 1, 1 ) NE '<' }">
			<MvASSIGN NAME = "l.current" VALUE = "{ '<' $ l.current }">
		</MvIF>

		<MvIF EXPR = "{ substring( l.current, len( l.current ), 1 ) NE '>' }">
			<MvASSIGN NAME = "l.current" VALUE = "{ l.current $ '>' }">
		</MvIF>

		<MvIF EXPR = "{ l.pos EQ 1 }">
			<MvASSIGN NAME = "l.rewritten" VALUE = "{ l.current }">
		<MvELSE>
			<MvASSIGN NAME = "l.rewritten" VALUE = "{ l.rewritten $ ', ' $ l.current }">
		</MvIF>

		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
		<MvASSIGN NAME = "l.current" VALUE = "{ gettoken( l.address, ',', l.pos ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.rewritten }">
</MvFUNCTION>

<MvCOMMENT>
|
| Validates an email address
|
</MvCOMMENT>

<MvFUNCTION NAME = "Email_Validate" PARAMETERS = "address" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ' ' IN l.address }">		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ '..' IN l.address }">	<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.atpos" VALUE = "{ '@' IN l.address }">
	<MvIF EXPR = "{ l.atpos GT 1 }">
		<MvASSIGN NAME = "l.before" VALUE = "{ substring( l.address, 1, l.atpos - 1 ) }">
		<MvASSIGN NAME = "l.after" 	VALUE = "{ substring( l.address, l.atpos + 1, len( l.address ) - l.atpos ) }">

		<MvIF EXPR = "{ ( '.' IN l.after ) AND ( len( l.after ) GE 3 ) AND isalpha( substring( l.after, len( l.after ) - 1, 2 ) ) AND ( isalnum( substring( l.after, 1, 1 ) ) ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvCOMMENT>
|
| Validates a phone number
|
| For the US and Germany, the phone number must contain only digits and common delimiter characters.
| For all countries, the phone number must be non-empty.
|
</MvCOMMENT>

<MvFUNCTION NAME = "Phone_Validate" PARAMETERS = "phone, country" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( l.country EQ 'US' ) OR
			( l.country EQ 'DE' ) }">
		<MvASSIGN NAME = "l.phone" VALUE = "{ glosub( l.phone, '+', '' ) }">
		<MvASSIGN NAME = "l.phone" VALUE = "{ glosub( l.phone, '/', '' ) }">
		<MvASSIGN NAME = "l.phone" VALUE = "{ glosub( l.phone, '(', '' ) }">
		<MvASSIGN NAME = "l.phone" VALUE = "{ glosub( l.phone, ')', '' ) }">
		<MvASSIGN NAME = "l.phone" VALUE = "{ glosub( l.phone, '-', '' ) }">
		<MvASSIGN NAME = "l.phone" VALUE = "{ glosub( l.phone, 'x', '' ) }">
		<MvASSIGN NAME = "l.phone" VALUE = "{ glosub( l.phone, '.', '' ) }">
		<MvASSIGN NAME = "l.phone" VALUE = "{ glosub( l.phone, ' ', '' ) }">

		<MvIF EXPR = "{ NOT isdigit( l.phone ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ len( l.phone ) EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ len( l.phone ) GT 0 }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Validates a zip or postal code
|
| For the US, zip must be a valid 5 digit or Zip+4 zip code
| For Germany, zip must be exactly 5 numeric digits
| For all other countries, zip must have a length greater than 0
|
</MvCOMMENT>

<MvFUNCTION NAME = "Zip_Validate" PARAMETERS = "zip, country" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ len( l.zip ) GT 0 }">
		<MvIF EXPR = "{ l.country EQ 'US' }">
			<MvASSIGN NAME = "l.dash_pos" VALUE = "{ '-' IN l.zip }">
			<MvIF EXPR = "{ l.dash_pos EQ 0 }">
				<MvIF EXPR = "{ ( NOT isdigit( l.zip ) ) OR ( len( l.zip ) NE 5 ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.zip_noplus4" VALUE = "{ substring( l.zip, 1, l.dash_pos - 1 ) }">
				<MvASSIGN NAME = "l.plus4" VALUE = "{ substring( l.zip, l.dash_pos + 1, len( l.zip ) ) }">

				<MvIF EXPR = "{ ( NOT isdigit( l.zip_noplus4 ) ) OR ( len( l.zip_noplus4 ) NE 5 ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				<MvELSE>
					<MvIF EXPR = "{ ( NOT isdigit( l.plus4 ) ) OR ( len( l.plus4 ) NE 4 ) }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ l.country EQ 'DE' }">
			<MvIF EXPR = "{ ( NOT isdigit( l.zip ) ) OR
							( len( l.zip ) NE 5 ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| This function validates a non-required address according to the passed in fields variable, which is usually loaded from the StandardFields database for the current store.
|
| address contains the following members:
|	fname
|	lname
|	email
|	phone
|	fax
|	comp
|	addr1
|	addr2
|	city
|	state
|	zip
|	cntry
|
| If one or more of the fields is invalid, a variable with the following name, prepended by prefix is set to 1:
|	[prefix]FirstName_Invalid
|	[prefix]LastName_Invalid
|	[prefix]Email_Invalid
|	[prefix]Phone_Invalid
|	[prefix]Fax_Invalid
|	[prefix]Company_Invalid
|	[prefix]Address1_Invalid
|	[prefix]Address2_Invalid
|	[prefix]City_Invalid
|	[prefix]State_Invalid
|	[prefix]Zip_Invalid
|	[prefix]Country_Invalid
|
</MvCOMMENT>

<MvFUNCTION NAME = "StandardFields_Validate_NonOptional_Address" PARAMETERS = "fields var, address var, prefix" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.valid" VALUE = 1>

	<MvIF EXPR = "{ ( l.fields:mode_fname EQ 'R' )	AND ( ISNULL l.address:fname ) }">		<MvASSIGN NAME = "{ l.prefix $ 'FirstName_Invalid' }"	VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( l.fields:mode_lname EQ 'R' )	AND ( ISNULL l.address:lname ) }">		<MvASSIGN NAME = "{ l.prefix $ 'LastName_Invalid' }"	VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( ( ISNULL l.address:email ) AND ( l.fields:mode_email EQ 'R' ) ) OR (
					  ( NOT ISNULL l.address:email ) AND 
					  ( NOT Email_Validate( l.address:email ) ) ) }">						<MvASSIGN NAME = "{ l.prefix $ 'Email_Invalid' }"		VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( ( ISNULL l.address:phone ) AND ( l.fields:mode_phone EQ 'R' ) ) OR (
					  ( NOT ISNULL l.address:phone ) AND 
					  ( NOT Phone_Validate( l.address:phone, l.address:cntry ) ) ) }">		<MvASSIGN NAME = "{ l.prefix $ 'Phone_Invalid' }"		VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( l.fields:mode_fax EQ 'R' )	AND ( ISNULL l.address:fax ) }">		<MvASSIGN NAME = "{ l.prefix $ 'Fax_Invalid' }"			VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( l.fields:mode_comp EQ 'R' )	AND ( ISNULL l.address:comp ) }">		<MvASSIGN NAME = "{ l.prefix $ 'Company_Invalid' }"		VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( l.fields:mode_addr EQ 'R' )	AND ( ISNULL l.address:addr1 ) }">		<MvASSIGN NAME = "{ l.prefix $ 'Address1_Invalid' }"	VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( l.fields:mode_addr2 EQ 'R' )	AND ( ISNULL l.address:addr2 ) }">		<MvASSIGN NAME = "{ l.prefix $ 'Address2_Invalid' }"	VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( l.fields:mode_city EQ 'R' )	AND ( ISNULL l.address:city ) }">		<MvASSIGN NAME = "{ l.prefix $ 'City_Invalid' }"		VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( l.fields:mode_state EQ 'R' )	AND ( ISNULL l.address:state ) }">		<MvASSIGN NAME = "{ l.prefix $ 'State_Invalid' }"		VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( ( ISNULL l.address:zip ) AND ( l.fields:mode_zip EQ 'R' )	) OR (
					  ( NOT ISNULL l.address:zip ) AND 
					  ( NOT Zip_Validate( l.address:zip, l.address:cntry ) ) ) }">			<MvASSIGN NAME = "{ l.prefix $ 'Zip_Invalid' }"			VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>
	<MvIF EXPR = "{ ( l.fields:mode_cntry EQ 'R' )	AND ( ISNULL l.address:cntry ) }">		<MvASSIGN NAME = "{ l.prefix $ 'Country_Invalid' }"		VALUE = 1>	<MvASSIGN NAME = "l.valid" VALUE = 0>	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.valid }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function validates a set of primary and secondary addresses according to the passed in fields variable, which is usually loaded from the StandardFields database for the current store.
|
| primary_address and secondary_address contain the following members:
| 	fname
| 	lname
| 	email
| 	phone
| 	fax
| 	comp
| 	addr1
| 	addr2
| 	city
| 	state
| 	zip
| 	cntry
|
| If one or more of the fields is invalid, a variable with the following name, prepended by prefix is set to 1:
| 	[prefix]FirstName_Invalid
| 	[prefix]LastName_Invalid
| 	[prefix]Email_Invalid
| 	[prefix]Phone_Invalid
| 	[prefix]Fax_Invalid
| 	[prefix]Company_Invalid
| 	[prefix]Address1_Invalid
| 	[prefix]Address2_Invalid
| 	[prefix]City_Invalid
| 	[prefix]State_Invalid
| 	[prefix]Zip_Invalid
| 	[prefix]Country_Invalid
|
</MvCOMMENT>

<MvFUNCTION NAME = "StandardFields_Validate" PARAMETERS = "fields var, primary_setting, secondary_setting, primary_address var, primary_prefix, secondary_address var, secondary_prefix" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.valid"			VALUE = 1>

	<MvIF EXPR = "{ l.primary_setting EQ 'D' }">
		<MvIF EXPR = "{ NOT StandardFields_Validate_NonOptional_Address( l.fields, l.primary_address, l.primary_prefix ) }">
			<MvASSIGN NAME = "l.valid"	VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( l.secondary_setting EQ 'D' ) OR
					( ( l.secondary_setting EQ 'O' ) AND (
					    ( len( l.secondary_address:fname )	NE 0 ) OR
					    ( len( l.secondary_address:lname )	NE 0 ) OR
					    ( len( l.secondary_address:email )	NE 0 ) OR
					    ( len( l.secondary_address:phone )	NE 0 ) OR
					    ( len( l.secondary_address:fax )	NE 0 ) OR
					    ( len( l.secondary_address:comp )	NE 0 ) OR
					    ( len( l.secondary_address:addr1 )	NE 0 ) OR
					    ( len( l.secondary_address:addr2 )	NE 0 ) OR
					    ( len( l.secondary_address:city )	NE 0 ) OR
					    ( len( l.secondary_address:state )	NE 0 ) OR
					    ( len( l.secondary_address:zip )	NE 0 ) OR
					    ( ( len( l.secondary_address:cntry ) NE 0 ) AND
						  ( l.secondary_address:cntry NE l.primary_address:cntry ) ) ) ) }">
		<MvIF EXPR = "{ NOT StandardFields_Validate_NonOptional_Address( l.fields, l.secondary_address, l.secondary_prefix ) }">
			<MvASSIGN NAME = "l.valid"	VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.fields:mode_cntry EQ 'H' }">
			<MvASSIGN NAME = "l.secondary_address:cntry"	VALUE = "{ l.primary_address:cntry }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.valid }">
		<MvASSIGN NAME = "l.secondary_address:fname"		VALUE = "{ l.primary_address:fname }">
		<MvASSIGN NAME = "l.secondary_address:lname"		VALUE = "{ l.primary_address:lname }">
		<MvASSIGN NAME = "l.secondary_address:email"		VALUE = "{ l.primary_address:email }">
		<MvASSIGN NAME = "l.secondary_address:phone"		VALUE = "{ l.primary_address:phone }">
		<MvASSIGN NAME = "l.secondary_address:fax"			VALUE = "{ l.primary_address:fax }">
		<MvASSIGN NAME = "l.secondary_address:comp"			VALUE = "{ l.primary_address:comp }">
		<MvASSIGN NAME = "l.secondary_address:addr1"		VALUE = "{ l.primary_address:addr1 }">
		<MvASSIGN NAME = "l.secondary_address:addr2"		VALUE = "{ l.primary_address:addr2 }">
		<MvASSIGN NAME = "l.secondary_address:city"			VALUE = "{ l.primary_address:city }">
		<MvASSIGN NAME = "l.secondary_address:state"		VALUE = "{ l.primary_address:state }">
		<MvASSIGN NAME = "l.secondary_address:zip"			VALUE = "{ l.primary_address:zip }">
		<MvASSIGN NAME = "l.secondary_address:cntry"		VALUE = "{ l.primary_address:cntry }">
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.primary_address:cntry }">
		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].StoreCountry_Load_Alpha( l.primary_address:cntry, l.null ) }">
			<MvASSIGN NAME = "{ l.primary_prefix $ 'Country_Invalid' }"		VALUE = 1>
			<MvASSIGN NAME = "l.valid" 										VALUE = 0>
		<MvELSEIF EXPR = "{ ( l.primary_address:cntry EQ g.Store:country ) AND ( NOT ISNULL l.primary_address:state ) }">
			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].State_Load_Code( l.primary_address:state, l.null ) }">
				<MvASSIGN NAME = "{ l.primary_prefix $ 'State_Invalid' }" 	VALUE = 1>
				<MvASSIGN NAME = "l.valid" 									VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.secondary_address:cntry }">
		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].StoreCountry_Load_Alpha( l.secondary_address:cntry, l.null ) }">
			<MvASSIGN NAME = "{ l.secondary_prefix $ 'Country_Invalid' }"	VALUE = 1>
			<MvASSIGN NAME = "l.valid" 										VALUE = 0>
		<MvELSEIF EXPR = "{ ( l.secondary_address:cntry EQ g.Store:country ) AND ( NOT ISNULL l.secondary_address:state ) }">
			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].State_Load_Code( l.secondary_address:state, l.null ) }">
				<MvASSIGN NAME = "{ l.secondary_prefix $ 'State_Invalid' }" VALUE = 1>
				<MvASSIGN NAME = "l.valid" 									VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.valid }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function takes into account the price groups of a currently logged in shopping account as well as the price group overlap setting of the current store.
|
| Returns the sale price according to all price groups
|
</MvCOMMENT>

<MvFUNCTION NAME = "Adjusted_Price" PARAMETERS = "product var, price, cost" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.product:pgrpcount EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.price }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Adjusted_Price_LowLevel( g.Customer, l.product, l.price, l.cost ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function takes into account the price groups of the specified Customer as well as the price group overlap setting of the current store.
|
| Returns the sale price according to all price groups
|
</MvCOMMENT>

<MvFUNCTION NAME = "Adjusted_Price_LowLevel" PARAMETERS = "customer var, product var, price, cost" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pricegroup_count"			VALUE = "{ [ g.Module_Feature_PGR_UT ].ResolvedPriceGroupAndModuleList_Load_Customer_Cached( l.customer:id, l.pricegroups ) }">
	<MvIF EXPR = "{ l.pricegroup_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ l.price }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Adjusted_Price_PriceGroups( l.product, l.price, l.cost, l.pricegroups, l.pricegroup_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Adjusted_Price_PriceGroups" PARAMETERS = "product var, price, cost, pricegroups var, pricegroup_count" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroupXProductLookup_Load_Product_Cached( l.product:id, l.pricegroup_lookup ) }">
		<MvFUNCTIONRETURN VALUE = "{ l.price }">
	</MvIF>

	<MvFOREACH ITERATOR = "l.pricegroup" ARRAY = "l.pricegroups" COUNT = "{ l.pricegroup_count }">
		<MvIF EXPR = "{ l.pricegroup:module_id }">							<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ l.pricegroup:exclusion_count GT 0 }">			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ NOT l.pricegroup_lookup[ l.pricegroup:id ] }">	<MvFOREACHCONTINUE>
		</MvIF>
		
		<MvIF EXPR = "{ l.pricegroup:rate EQ 'C' }">		<MvASSIGN NAME = "l.adjusted"	VALUE = "{ l.cost }">
		<MvELSEIF EXPR = "{ l.pricegroup:rate EQ 'R' }">	<MvASSIGN NAME = "l.adjusted"	VALUE = "{ l.price }">
		<MvELSEIF EXPR = "{ l.pricegroup:rate EQ 'D' }">	<MvASSIGN NAME = "l.adjusted"	VALUE = "{ ( l.price - ( l.price * ( l.pricegroup:discount / 100 ) ) ) ROUND 2 }">
		<MvELSEIF EXPR = "{ l.pricegroup:rate EQ 'M' }">	<MvASSIGN NAME = "l.adjusted"	VALUE = "{ ( l.cost + ( l.cost * ( l.pricegroup:markup / 100 ) ) ) ROUND 2 }">
		</MvIF>

		<MvIF EXPR = "{ g.Store:pgrp_ovlp EQ 'PRIORITY' }">
			<MvFUNCTIONRETURN VALUE = "{ l.adjusted }">
		<MvELSEIF EXPR = "{ ISNULL l.min_adjusted }">
			<MvASSIGN NAME = "l.min_adjusted"		VALUE = "{ l.adjusted }">
			<MvASSIGN NAME = "l.max_adjusted"		VALUE = "{ l.adjusted }">
		<MvELSE>
			<MvIF EXPR = "{ l.adjusted LT l.min_adjusted }">
				<MvASSIGN NAME = "l.min_adjusted"	VALUE = "{ l.adjusted }">
			</MvIF>

			<MvIF EXPR = "{ l.adjusted GT l.max_adjusted }">
				<MvASSIGN NAME = "l.max_adjusted"	VALUE = "{ l.adjusted }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ ISNULL l.min_adjusted }">
		<MvFUNCTIONRETURN VALUE = "{ l.price }">
	</MvIF>

	<MvIF EXPR = "{ g.Store:pgrp_ovlp EQ 'HIGHEST' }">		<MvFUNCTIONRETURN VALUE = "{ l.max_adjusted }">
	<MvELSEIF EXPR = "{ g.Store:pgrp_ovlp EQ 'LOWEST' }">	<MvFUNCTIONRETURN VALUE = "{ l.min_adjusted }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Draws an HTML option tag. If value is equal to selected_value, the selected attribute is included in the generated option tag.
|
</MvCOMMENT>

<MvFUNCTION NAME = "DrawOption" PARAMETERS = "value, selected_value, text" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.value EQ l.selected_value }">	<option value="{ encodeentities( l.value ) }" selected><MvEVAL EXPR = "{ l.text }"></option>
	<MvELSE>										<option value="{ encodeentities( l.value ) }"><MvEVAL EXPR = "{ l.text }"></option>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawOption_Encode" PARAMETERS = "value, default, text" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ DrawOption( l.value, l.default, encodeentities( l.text ) ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Draws an HTML <option> tag containing the text "Select One"
|
</MvCOMMENT>

<MvFUNCTION NAME = "DrawOption_SelectOne" PARAMETERS = "" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<option value="" selectone>&lt;Select One&gt;</option>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawCredentialInput" PARAMETERS = "name, type, value, id, classname, onchange, size" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT Value_In_List( l.type, 'text,password,email,number,tel,url' ) }">
		<MvASSIGN NAME = "l.type" VALUE = "text">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.id }">
		<MvASSIGN NAME = "l.id" VALUE = "{ MakeSessionID() }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.classname }">	<MvASSIGN NAME = "l.class" VALUE = "mm_credential_input">
	<MvELSE>								<MvASSIGN NAME = "l.class" VALUE = "{ 'mm_credential_input ' $ l.classname }">
	</MvIF>

	<span id="{ encodeentities( l.id ) $ '_container' }" class="mm_credential_container">
		<input id="{ encodeentities( l.id ) $ '_hidden' }"
			   type="hidden"
			   name="{ encodeentities( l.name ) }"
			   value="{ encodeentities( l.value ) }" />

		<input id="{ encodeentities( l.id ) }"
			   class="{ encodeentities( l.class ) }"
			   type="{ encodeentities( l.type ) }"
			   name=""
			   value="{ encodeentities( l.value ) }"
			   onchange="{ encodeentities( l.onchange ) }"
			   size="{ encodeentities( l.size ) }"
			   disabled />
	</span>

	<script type="text/javascript">
		DrawCredentialInput( '<MvEVAL EXPR = "{ encodejavascriptstring( l.id ) }">' );
	</script>
</MvFUNCTION>

<MvCOMMENT>
|
| Draws an HTML radio button. If  value is equal to default, the checked attribute is included in the generated input tag.
|
</MvCOMMENT>

<MvFUNCTION NAME = "DrawRadio" PARAMETERS = "name, value, default, text" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.value EQ l.default }">
		<input type="radio" name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }" checked> <MvEVAL EXPR = "{ l.text }">
	<MvELSE>
		<input type="radio" name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }"> <MvEVAL EXPR = "{ l.text }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawRadio_With_Label" PARAMETERS = "name, value, default, text" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<label><MvEVAL EXPR = "{ DrawRadio( l.name, l.value, l.default, l.text ) }"></label>
</MvFUNCTION>

<MvCOMMENT>
|
| Draws an HTML checkbox. If checked is true, the checked attribute is included in the generated input tag.
| This function does not encode the text passed in. If you're using a global variable to construct your Checkbox text, you should encode it when calling DrawCheckbox. 
|
</MvCOMMENT>

<MvFUNCTION NAME = "DrawCheckbox" PARAMETERS = "checked, name, value, text" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.checked }">
		<input type="checkbox" name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }" checked> <MvEVAL EXPR = "{ l.text }">
	<MvELSE>
		<input type="checkbox" name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }"> <MvEVAL EXPR = "{ l.text }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawCheckbox_With_Label" PARAMETERS = "checked, name, value, text" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<label><MvEVAL EXPR = "{ DrawCheckbox( l.checked, l.name, l.value, l.text ) }"></label>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawMMCheckbox" PARAMETERS = "checked, name, value, text" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.checked }">
		<mm-checkbox name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }" text="{ encodeentities( l.text ) }" checked></checkbox>
	<MvELSE>
		<mm-checkbox name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }" text="{ encodeentities( l.text ) }"></checkbox>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawMMCheckboxSlider" PARAMETERS = "checked, name, value, text" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.checked }">
		<mm-checkbox name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }" text="{ encodeentities( l.text ) }" checked slider></checkbox>
	<MvELSE>
		<mm-checkbox name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }" text="{ encodeentities( l.text ) }" slider></checkbox>
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Draws an HTML checkbox which calls the JavaScript function SetModified() when clicked.
| If checked is true, the  checked attribute is included in the generated input tag.
|
</MvCOMMENT>

<MvFUNCTION NAME = "DrawCheckboxModAlert" PARAMETERS = "checked, name, value, text" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.checked }">
		<input type="checkbox" name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }" checked onclick="SetModified();"> <MvEVAL EXPR = "{ l.text }">
	<MvELSE>
		<input type="checkbox" name="{ encodeentities( l.name ) }" value="{ encodeentities( l.value ) }" onclick="SetModified();"> <MvEVAL EXPR = "{ l.text }">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
|
| Draws an HTML textarea with 100% width and an attached color selector.
|
| The output textarea also contains connected JavaScript which provides tab functionality in common browsers.  If the current
| browser does not support 100% width, the width of the textarea will fall back to the value specified in cols.
|
</MvCOMMENT>

<MvFUNCTION NAME = "DrawTemplateTextArea" PARAMETERS = "name, value var, rows, cols" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT g.Store:id }">	<MvASSIGN NAME = "l.store_id" VALUE = 0>
	<MvELSE>							<MvASSIGN NAME = "l.store_id" VALUE = "{ g.Store:id }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].MMTextEditor_Enabled( l.store_id, g.Screen, g.Tab, l.name ) }">
		<MvFUNCTIONRETURN VALUE = "{ DrawMMTextEditor( l.name, l.value, l.rows, l.cols, 0, 0 ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ DrawTemplateTextArea_LowLevel( l.name, l.value, l.rows, l.cols, 0 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DrawTemplateTextArea_SetModified" PARAMETERS = "name, value var, rows, cols" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT g.Store:id }">	<MvASSIGN NAME = "l.store_id" VALUE = 0>
	<MvELSE>							<MvASSIGN NAME = "l.store_id" VALUE = "{ g.Store:id }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].MMTextEditor_Enabled( l.store_id, g.Screen, g.Tab, l.name ) }">
		<MvFUNCTIONRETURN VALUE = "{ DrawMMTextEditor( l.name, l.value, l.rows, l.cols, 0, 1 ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ DrawTemplateTextArea_LowLevel( l.name, l.value, l.rows, l.cols, 1 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DrawTemplateTextArea_WithRecall" PARAMETERS = "name, value var, rows, cols, template_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT g.Store:id }">	<MvASSIGN NAME = "l.store_id" VALUE = 0>
	<MvELSE>							<MvASSIGN NAME = "l.store_id" VALUE = "{ g.Store:id }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].MMTextEditor_Enabled( l.store_id, g.Screen, g.Tab, l.name ) }">
		<MvFUNCTIONRETURN VALUE = "{ DrawMMTextEditor_WithRecall( l.name, l.value, l.rows, l.cols, 0, 0, l.template_id ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ DrawTemplateTextArea_WithRecall_LowLevel( l.name, l.value, l.rows, l.cols, 0, l.template_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DrawTemplateTextArea_WithRecall_SetModified" PARAMETERS = "name, value var, rows, cols, template_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT g.Store:id }">	<MvASSIGN NAME = "l.store_id" VALUE = 0>
	<MvELSE>							<MvASSIGN NAME = "l.store_id" VALUE = "{ g.Store:id }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Library_DB ].MMTextEditor_Enabled( l.store_id, g.Screen, g.Tab, l.name ) }">
		<MvFUNCTIONRETURN VALUE = "{ DrawMMTextEditor_WithRecall( l.name, l.value, l.rows, l.cols, 0, 1, l.template_id ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ DrawTemplateTextArea_WithRecall_LowLevel( l.name, l.value, l.rows, l.cols, 1, l.template_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DrawTemplateTextArea_LowLevel" PARAMETERS = "name, value var, rows, cols, set_modified" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ DrawTemplateTextArea_WithRecall_LowLevel( l.name, l.value, l.rows, l.cols, l.set_modified, 0 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DrawTemplateTextArea_WithRecall_LowLevel" PARAMETERS = "name, value var, rows, cols, set_modified, template_id" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.parent_id" VALUE = "{ MakeSessionID() }">

	<table cellspacing="0" cellpadding="0" border="0" width="100%"><tr>
		<td valign="top"><textarea name="{ encodeentities( l.name ) }" rows="{ encodeentities( l.rows ) }" wrap="off" onkeydown="TextArea_TabCapture_OnKeyDown( event ? event : window.event, this );" class="mm_template_textarea" style="width: 100%;"><MvEVAL EXPR = "{ encodeentities( l.value ) }"></textarea></td>
		<td valign="top" align="right" style="width: 45px;">
			<span id="{ l.parent_id }" class="mm_template_textarea_button_container"></span>

			<script type="text/javascript">
				(function()
				{
					var name, editor, parent_id;

					name		= '<MvEVAL EXPR = "{ encodejavascriptstring( l.name ) }">';
					parent_id	= '<MvEVAL EXPR = "{ encodejavascriptstring( l.parent_id ) }">';
					editor		= new MMTemplateTextArea( parent_id, name );

					<MvIF EXPR = "{ l.set_modified }">
						editor.SetModified_Enable();
					</MvIF>

					<MvIF EXPR = "{ l.template_id }">
						editor.TemplateRecall_Enable( <MvEVAL EXPR = "{ int( g.Store:branch:id ) }">, <MvEVAL EXPR = "{ int( l.template_id ) }"> );
					</MvIF>
				})();
			</script>
		</td>
	</tr></table>

	<MvIF EXPR = "{ NOT g.Session:cache:template_present_flag_output }">
		<MvASSIGN NAME = "g.Session:cache:template_present_flag_output" VALUE = 1>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_Set_A_Variable_Boolean( 'Template_Present', 'Yes' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawMMTextEditor" PARAMETERS = "name, value var, rows, cols, allow_richtext, set_modified" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ DrawMMTextEditor_WithRecall( l.name, l.value, l.rows, l.cols, l.allow_richtext, l.set_modified, 0 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "DrawMMTextEditor_WithRecall" PARAMETERS = "name, value var, rows, cols, allow_richtext, set_modified, template_id" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT g.Store:id }">	<MvASSIGN NAME = "l.store_id" VALUE = 0>
	<MvELSE>							<MvASSIGN NAME = "l.store_id" VALUE = "{ g.Store:id }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].MMTextEditor_Enabled( l.store_id, g.Screen, g.Tab, l.name ) }">
		<MvIF EXPR = "{ l.set_modified }">	<MvFUNCTIONRETURN VALUE = "{ DrawTemplateTextArea_LowLevel( l.name, l.value, l.rows, l.cols, 1 ) }">
		<MvELSE>							<MvFUNCTIONRETURN VALUE = "{ DrawTemplateTextArea_LowLevel( l.name, l.value, l.rows, l.cols, 0 ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.generated_id"					VALUE = "{ MakeSessionID() }">
	<MvASSIGN NAME = "l.texteditor_menuheight_offset"	VALUE = 50>

	<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert( l.attributes, 'id="' $ encodeentities( l.generated_id ) $ '"', -1 ) }">
	<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert( l.attributes, 'name="' $ encodeentities( l.name ) $ '"', -1 ) }">
	<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert( l.attributes, 'value="' $ encodeentities( l.value ) $ '"', -1 ) }">
	<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert( l.attributes, 'height="' $ ( ( int( l.rows ) * 15 ) + l.texteditor_menuheight_offset ) $ '"', -1 ) }">
	<MvASSIGN NAME = "l.null"							VALUE = "{ miva_array_insert( l.attributes, 'resize', -1 ) }">

	<MvIF EXPR = "{ l.allow_richtext }">
		<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert( l.attributes, 'richtext', -1 ) }">
	</MvIF>

	<MvIF EXPR = "{ l.set_modified }">
		<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert( l.attributes, 'set-modified', -1 ) }">
	</MvIF>

	<MvIF EXPR = "{ l.template_id }">
		<MvASSIGN NAME = "l.null"						VALUE = "{ miva_array_insert( l.attributes, 'template-recall="' $ int( l.template_id ) $ '"', -1 ) }">
	</MvIF>

	<MvEVAL EXPR = "{ '<mm-texteditor ' $ miva_joinstring( l.attributes, ' ', '' ) $ '></mm-texteditor>' }">

	<script type="text/javascript">
		MMScreen_LoadFinished( function()
		{
			var texteditor, update_action;

			texteditor = document.getElementById( '<MvEVAL EXPR = "{ encodejavascriptstring( l.generated_id ) }">' );

			if ( ( update_action = MMScreen_GetUpdateAction() ) !== null && ( typeof update_action === 'function' ) )
			{
				texteditor.fullscreensaveenabled	= true;
				texteditor.onsave					= function( value ) { update_action(); };
			}

			<MvIF EXPR = "{ [ g.Module_Feature_AI_DB ].AISettings_Load_Cached( l.aisettings ) AND l.aisettings:enabled }">
				texteditor.texteditor().SetAIEnabled?.();
			</MvIF>
		} );
	</script>

	<MvIF EXPR = "{ NOT g.Session:cache:template_present_flag_output }">
		<MvASSIGN NAME = "g.Session:cache:template_present_flag_output" VALUE = 1>

		<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_Set_A_Variable_Boolean( 'Template_Present', 'Yes' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawMMImagePicker_SingleSelect" PARAMETERS = "field_name, value, allow_generated_images" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<input type="text" size="40" name="{ encodeentities( l.field_name ) }" value="{ encodeentities( l.value ) }" />

	<a href="{ 'JavaScript:MMImagePicker_SingleSelect( \'' $ encodejavascriptstring( l.field_name ) $ '\', ' $ [ g.Module_Admin ].Trim_Boolean( l.allow_generated_images ) $ ' );' }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawImgButton_Upload( 0 ) }">
	</a>
</MvFUNCTION>

<MvCOMMENT>
|
| Arranges an address in a format suitable for display.
| The address is formatted into a multi-line format, using seperator (sic) as the line delimiter.
|
| Returns the formatted address
|
</MvCOMMENT>

<MvFUNCTION NAME = "Format_Address" PARAMETERS = "company, name, street, city, state, zip, cntry, seperater" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.address" VALUE = "">

	<MvIF EXPR = "{ len( l.company ) }">
		<MvIF EXPR = "{ len( l.address ) }">
			<MvASSIGN NAME = "l.address" VALUE = "{ l.address $ l.seperater $ l.company }">
		<MvELSE>
			<MvASSIGN NAME = "l.address" VALUE = "{ l.company }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ len( l.name ) }">
		<MvIF EXPR = "{ len( l.address ) }">
			<MvASSIGN NAME = "l.address" VALUE = "{ l.address $ l.seperater $ l.name }">
		<MvELSE>
			<MvASSIGN NAME = "l.address" VALUE = "{ l.name }">
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ len( l.street ) }">
		<MvIF EXPR = "{ len( l.address ) }">
			<MvASSIGN NAME = "l.address" VALUE = "{ l.address $ l.seperater $ l.street }">
		<MvELSE>
			<MvASSIGN NAME = "l.address" VALUE = "{ l.street }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.state_zip" VALUE = "{ trim( l.state $ ' ' $ l.zip ) }">

	<MvIF EXPR = "{ len( l.city ) AND len( l.state_zip ) }">
		<MvASSIGN NAME = "l.address_line" VALUE = "{ l.city $ ', ' $ l.state_zip }">
	<MvELSE>
		<MvASSIGN NAME = "l.address_line" VALUE = "{ l.city $ l.state_zip }">
	</MvIF>

	<MvIF EXPR = "{ len( l.address_line ) }">
		<MvIF EXPR = "{ len( l.address ) }">
			<MvASSIGN NAME = "l.address" VALUE = "{ l.address $ l.seperater $ l.address_line }">
		<MvELSE>
			<MvASSIGN NAME = "l.address" VALUE = "{ l.address_line }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.address }">
</MvFUNCTION>

<MvCOMMENT>
|
| Converts a RFC 3339 timestamp string to time_t
|
</MvCOMMENT>

<MvFUNCTION NAME = "Timestamp_RFC3339_To_Time" PARAMETERS = "timestamp, time_t var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.time_sep" 						VALUE = "{ toupper( substring_var( l.timestamp, 11, 1 ) ) }">
	<MvASSIGN NAME = "l.timezone" 						VALUE = "{ toupper( substring_var( l.timestamp, 20, 1 ) ) }">
	<MvASSIGN NAME = "l.timezone_offset" 				VALUE = 0>
	<MvASSIGN NAME = "l.timezone_min_offset" 			VALUE = 0>
	<MvASSIGN NAME = "l.microsecond" 					VALUE = 0>

	<MvIF EXPR = "{ l.time_sep NE 'T' }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00033', 'Invalid RFC3339 string. Invalid time identifier, expecting T.' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.timezone EQ 'Z' }">
		<MvASSIGN NAME = "l.timezone_offset"			VALUE = 0>
	<MvELSE>		
		<MvIF EXPR = "{ l.timezone EQ '.' }">
			<MvASSIGN NAME = "l.microsecond" 			VALUE = "{ substring_var( l.timestamp, 21, 2 ) }">
			<MvASSIGN NAME = "l.timezone" 				VALUE = "{ toupper( substring_var( l.timestamp, 23, 1 ) ) }">
			<MvASSIGN NAME = "l.timezone_offset" 		VALUE = "{ substring_var( l.timestamp, 24, 2 ) }">
			<MvASSIGN NAME = "l.timezone_min_offset" 	VALUE = "{ substring_var( l.timestamp, 27, 2 ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.timezone_offset" 		VALUE = "{ substring_var( l.timestamp, 21, 2 ) }">
			<MvASSIGN NAME = "l.timezone_min_offset" 	VALUE = "{ substring_var( l.timestamp, 24, 2 ) }">
		</MvIF>

		<MvIF EXPR = "{ l.timezone EQ 'Z' }">			
			<MvASSIGN NAME = "l.timezone_offset"		VALUE = 0>
		<MvELSEIF EXPR = "{ l.timezone EQ '+' OR l.timezone EQ '-' }">			
			<MvIF EXPR = "{ NOT isdigit( l.timezone_offset ) }">
				<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00034', 'Invalid RFC3339 string. Invalid timezone offset, expecting numeric value.' ) }">
			<MvELSEIF EXPR = "{ NOT isdigit( l.timezone_min_offset ) }">
				<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00035', 'Invalid RFC3339 string. Invalid timezone minute offset, expecting numeric value.' ) }">
			<MvELSEIF EXPR = "{ l.timezone EQ '-' AND l.timezone_offset EQ 0 AND l.timezone_min_offset EQ 0 }">
				<MvASSIGN NAME = "l.timezone_offset"	VALUE = "{ g.Merchant_Local_Timezone }">
			<MvELSEIF EXPR = "{ l.timezone EQ '-' }">
				<MvASSIGN NAME = "l.timezone_offset"	VALUE = "{ 0 - l.timezone_offset - ( ( ( ( l.timezone_min_offset * 100 ) / 60 ) / 100 ) ROUND 2 ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.timezone_offset"	VALUE = "{ l.timezone_offset + ( ( ( ( l.timezone_min_offset * 100 ) / 60 ) / 100 ) ROUND 2 ) }">
			</MvIF>
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00036', 'Invalid RFC3339 string. Invalid timezone identifier. Expecting Z or +/- UTC offset.' ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.year" 		VALUE = "{ substring_var( l.timestamp, 1, 4 ) }">
	<MvASSIGN NAME = "l.month" 		VALUE = "{ substring_var( l.timestamp, 6, 2 ) }">
	<MvASSIGN NAME = "l.day" 		VALUE = "{ substring_var( l.timestamp, 9, 2 ) }">
	<MvASSIGN NAME = "l.hour" 		VALUE = "{ substring_var( l.timestamp, 12, 2 ) }">
	<MvASSIGN NAME = "l.minute" 	VALUE = "{ substring_var( l.timestamp, 15, 2 ) }">
	<MvASSIGN NAME = "l.second" 	VALUE = "{ substring_var( l.timestamp, 18, 2 ) }">

	<MvIF EXPR = "{ NOT isdigit( l.year ) OR NOT isdigit( l.month ) OR NOT isdigit( l.day ) OR l.year EQ 0 OR l.month EQ 0 OR l.day EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00037', 'Invalid RFC3339 string. Invalid date format.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT isdigit( l.hour ) OR NOT isdigit( l.minute ) OR NOT isdigit( l.second ) OR NOT isdigit( l.microsecond ) }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00051', 'Invalid RFC3339 string. Invalid time format.' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.microsecond NE 0 }">
		<MvASSIGN NAME = "l.second" VALUE = "{ l.second $ '.' $ l.microsecond }">
	</MvIF>

	<MvASSIGN NAME = "l.time_t" VALUE = "{ mktime_t( l.year, l.month, l.day, l.hour, l.minute, l.second, l.timezone_offset ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Format_RFC3339_DateTime" PARAMETERS = "time_t" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.year"							VALUE = "{ padl( time_t_year(		l.time_t, g.Merchant_Local_Timezone ), 4, '0' ) }">
	<MvASSIGN NAME = "l.month"							VALUE = "{ padl( time_t_month(		l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
	<MvASSIGN NAME = "l.day"							VALUE = "{ padl( time_t_dayofmonth(	l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
	<MvASSIGN NAME = "l.hour"							VALUE = "{ padl( time_t_hour(		l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
	<MvASSIGN NAME = "l.min"							VALUE = "{ padl( time_t_min(		l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
	<MvASSIGN NAME = "l.sec"							VALUE = "{ padl( time_t_sec(		l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">

	<MvIF EXPR = "{ timezone() EQ 0 }">
		<MvASSIGN NAME = "l.rfc3339_timezone"			VALUE = "Z">
	<MvELSE>
		<MvASSIGN NAME = "l.fixed_timezone"				VALUE = "{ abs( timezone() ) ROUND 2 }">
		<MvASSIGN NAME = "l.decimal"					VALUE = "{ '.' IN l.fixed_timezone }">
		<MvASSIGN NAME = "l.len"						VALUE = "{ len_var( l.fixed_timezone ) }">

		<MvIF EXPR = "{ l.decimal }">
			<MvASSIGN NAME = "l.fixed_timezone_hours" 	VALUE = "{ substring_var( l.fixed_timezone, 1, l.decimal - 1 ) }">
			<MvASSIGN NAME = "l.fixed_timezone_minutes" VALUE = "{ floor( substring_var( l.fixed_timezone, l.decimal + 1, l.len - l.decimal ) * 60 ) / 100 }">
		<MvELSE>
			<MvASSIGN NAME = "l.fixed_timezone_hours" 	VALUE = "{ l.fixed_timezone }">
			<MvASSIGN NAME = "l.fixed_timezone_minutes" VALUE = "00">
		</MvIF>

		<MvIF EXPR = "{ timezone() GT 0 }">
			<MvASSIGN NAME = "l.fixed_timezone_prefix"	VALUE = "+">
		<MvELSE>
			<MvASSIGN NAME = "l.fixed_timezone_prefix"	VALUE = "-">
		</MvIF>

		<MvASSIGN NAME = "l.rfc3339_timezone"			VALUE = "{ l.fixed_timezone_prefix $ padl( l.fixed_timezone_hours, 2, '0' ) $ padl( l.fixed_timezone_minutes, 2, '0' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.year $ '-' $ l.month $ '-' $ l.day $ 'T' $ l.hour $ ':' $ l.min $ ':' $ l.sec $ l.rfc3339_timezone }">
</MvFUNCTION>

<MvCOMMENT>
|
| Formats a time_t into an RFC 1123 compatible date/time.
| RFC 1123 defines the date/time format used for many internet protocols.
| The output date/time from this function is suitable for the use in a Set-Cookie tag.
|
| Returns the formatted date/time
|
</MvCOMMENT>

<MvFUNCTION NAME = "Format_RFC1123_DateTime" PARAMETERS = "time_t" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.dow"	VALUE = "{ time_t_dayofweek( l.time_t, 0 ) }">
	<MvASSIGN NAME = "l.month"	VALUE = "{ time_t_month( l.time_t, 0 ) }">

	<MvIF EXPR = "{ l.dow EQ 1 }">			<MvASSIGN NAME = "l.wdy"	VALUE = "Sun">
	<MvELSEIF EXPR = "{ l.dow EQ 2 }">		<MvASSIGN NAME = "l.wdy"	VALUE = "Mon">
	<MvELSEIF EXPR = "{ l.dow EQ 3 }">		<MvASSIGN NAME = "l.wdy"	VALUE = "Tue">
	<MvELSEIF EXPR = "{ l.dow EQ 4 }">		<MvASSIGN NAME = "l.wdy"	VALUE = "Wed">
	<MvELSEIF EXPR = "{ l.dow EQ 5 }">		<MvASSIGN NAME = "l.wdy"	VALUE = "Thu">
	<MvELSEIF EXPR = "{ l.dow EQ 6 }">		<MvASSIGN NAME = "l.wdy"	VALUE = "Fri">
	<MvELSEIF EXPR = "{ l.dow EQ 7 }">		<MvASSIGN NAME = "l.wdy"	VALUE = "Sat">
	</MvIF>

	<MvIF EXPR = "{ l.month EQ 1 }">		<MvASSIGN NAME = "l.mon"	VALUE = "Jan">
	<MvELSEIF EXPR = "{ l.month EQ 2 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Feb">
	<MvELSEIF EXPR = "{ l.month EQ 3 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Mar">
	<MvELSEIF EXPR = "{ l.month EQ 4 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Apr">
	<MvELSEIF EXPR = "{ l.month EQ 5 }">	<MvASSIGN NAME = "l.mon"	VALUE = "May">
	<MvELSEIF EXPR = "{ l.month EQ 6 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Jun">
	<MvELSEIF EXPR = "{ l.month EQ 7 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Jul">
	<MvELSEIF EXPR = "{ l.month EQ 8 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Aug">
	<MvELSEIF EXPR = "{ l.month EQ 9 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Sep">
	<MvELSEIF EXPR = "{ l.month EQ 10 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Oct">
	<MvELSEIF EXPR = "{ l.month EQ 11 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Nov">
	<MvELSEIF EXPR = "{ l.month EQ 12 }">	<MvASSIGN NAME = "l.mon"	VALUE = "Dec">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.wdy $
								 ', ' $
								 padl( time_t_dayofmonth( l.time_t, 0 ), 2, '0' ) $ '-' $ l.mon $ '-' $ padl( time_t_year( l.time_t, 0 ), 4, '0' ) $
								 ' ' $
								 padl( time_t_hour( l.time_t, 0 ), 2, '0' ) $ ':' $ padl( time_t_min( l.time_t, 0 ), 2, '0' ) $ ':' $ padl( time_t_sec( l.time_t, 0 ), 2, '0' ) $
								 ' GMT' }">
</MvFUNCTION>

<MvCOMMENT>
|
| Formats the date portion of a time_t according to a specified language for the following languages:
|	en-US mm/dd/yyyy
|	de-DE dd/mm/yyyy
|
| Returns the formatted date if language is a supported value, or an empty string
|
</MvCOMMENT>

<MvFUNCTION NAME = "Format_Date" PARAMETERS = "time_t, language" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.date" VALUE = "">

	<MvIF EXPR = "{ l.language EQ 'en-US' }">
		<MvASSIGN NAME = "l.date" VALUE = "{ padl( time_t_month( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ '/' $ padl( time_t_dayofmonth( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ '/' $ time_t_year( l.time_t, g.Merchant_Local_Timezone ) }">
	</MvIF>

	<MvIF EXPR = "{ l.language EQ 'de-DE' }">
		<MvASSIGN NAME = "l.date" VALUE = "{ padl( time_t_dayofmonth( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ '.' $ padl( time_t_month( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ '.' $ time_t_year( l.time_t, g.Merchant_Local_Timezone ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.date }">
</MvFUNCTION>

<MvCOMMENT>
|
| Formats the time portion of a time_t according to a specified language for the following languages:
|	en-US HH:MM:SS PST
|	de-DE HH:MM:SS
|
| Returns the formatted time if language is a supported value, or an empty string
|
</MvCOMMENT>

<MvFUNCTION NAME = "Format_Time" PARAMETERS = "time_t, language" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.time" VALUE = "">

	<MvIF EXPR = "{ l.language EQ 'en-US' }">
		<MvASSIGN NAME = "l.time" VALUE = "{ padl( time_t_hour( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ ':' $
											 padl( time_t_min( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ ':' $
											 padl( time_t_sec( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ ' ' $ s.stm_zone }">
	</MvIF>

	<MvIF EXPR = "{ l.language EQ 'de-DE' }">
		<MvASSIGN NAME = "l.time" VALUE = "{ padl( time_t_hour( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ ':' $
											 padl( time_t_min( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ ':' $
											 padl( time_t_sec( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.time }">
</MvFUNCTION>

<MvCOMMENT>
|
| Formats the time portion of a time_t according to a specified language, excluding time zone for the following languages:
|	en-US HH:MM:SS
|	de-DE HH:MM:SS
|
| Returns the formatted time if language is a supported value, or an empty string
|
</MvCOMMENT>

<MvFUNCTION NAME = "Format_Time_Short" PARAMETERS = "time_t, language" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.time" VALUE = "">

	<MvIF EXPR = "{ l.language EQ 'en-US' }">
		<MvASSIGN NAME = "l.time" VALUE = "{ padl( time_t_hour( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ ':' $
											 padl( time_t_min( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ ':' $
											 padl( time_t_sec( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.language EQ 'de-DE' }">
		<MvASSIGN NAME = "l.time" VALUE = "{ padl( time_t_hour( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ ':' $
											 padl( time_t_min( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) $ ':' $
											 padl( time_t_sec( l.time_t, g.Merchant_Local_Timezone ), 2, '0' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.time }">
</MvFUNCTION>

<MvFUNCTION NAME = "FormatDateTime_ClientLocale" PARAMETERS = "time_t, default_text" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.id"	VALUE = "{ MakeSessionID() }">

	<span id="{ encodeentities( l.id ) }" class="mm9_formatteddatetime_local"></span>

	<script type="text/javascript">
		var date_<MvEVAL EXPR = "{ l.id }"> = new Date( <MvEVAL EXPR = "{ ( l.time_t * 1000 ) }"> );
		var element_<MvEVAL EXPR = "{ l.id }"> = document.getElementById( '<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScriptEncode( l.id ) }">' );

		<MvIF EXPR = "{ NOT l.time_t }">
			element_<MvEVAL EXPR = "{ l.id }">.appendChild( document.createTextNode( '<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScriptEncode( l.default_text ) }">' ) );
		<MvELSE>
			element_<MvEVAL EXPR = "{ l.id }">.appendChild( document.createTextNode( date_<MvEVAL EXPR = "{ l.id }">.toLocaleString() ) );
		</MvIF>
	</script>
</MvFUNCTION>

<MvCOMMENT>
|
| Converts textual representations of special characters into their HTML equivalents
|
| Returns the input data with any textual representations converted to HTML
|
</MvCOMMENT>

<MvFUNCTION NAME = "HTML_Format_Marks" PARAMETERS = "data" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.data" VALUE = "{ glosub( l.data, ' (R)', '<SUP>&reg;</SUP>' ) }">
	<MvASSIGN NAME = "l.data" VALUE = "{ glosub( l.data, ' (sm)', '<SUP> SM</SUP>' ) }">
	<MvASSIGN NAME = "l.data" VALUE = "{ glosub( l.data, ' (TM)', '<SUP> TM</SUP>' ) }">
	<MvASSIGN NAME = "l.data" VALUE = "{ glosub( l.data, encodeentities( ' (R)' ), '<SUP>&reg;</SUP>' ) }">
	<MvASSIGN NAME = "l.data" VALUE = "{ glosub( l.data, encodeentities( ' (sm)' ), '<SUP> SM</SUP>' ) }">
	<MvASSIGN NAME = "l.data" VALUE = "{ glosub( l.data, encodeentities( ' (TM)' ), '<SUP> TM</SUP>' ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.data }">
</MvFUNCTION>

<MvCOMMENT>
|
| Appends an error message to the global array Error_Messages
| These messages are displayed by the cmp-mv-messages component.
|
</MvCOMMENT>

<MvFUNCTION NAME = "Message_Error" PARAMETERS = "message" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCE NAME = "g.Error_Message_Count"	VARIABLE = "g.Session:cache:error_message_count">
	<MvREFERENCE NAME = "g.Error_Messages"		VARIABLE = "g.Session:cache:error_messages">

	<MvASSIGN NAME = "g.Error_Messages" INDEX = "{ ++g.Error_Message_Count }" VALUE = "{ l.message }">
</MvFUNCTION>

<MvCOMMENT>
|
| Appends an informational message to the global array Information_Messages
| These messages are displayed by the cmp-mv-messages component.
|
</MvCOMMENT>

<MvFUNCTION NAME = "Message_Information" PARAMETERS = "message" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCE NAME = "g.Information_Message_Count"	VARIABLE = "g.Session:cache:information_message_count">
	<MvREFERENCE NAME = "g.Information_Messages"		VARIABLE = "g.Session:cache:information_messages">

	<MvASSIGN NAME = "g.Information_Messages" INDEX = "{ ++g.Information_Message_Count }" VALUE = "{ l.message }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function sets the global variable Data_Entry_Error to 1 and appends message to the global array Data_Entry_Error_Message.  
| These fields are displayed by various component modules.
|
</MvCOMMENT>

<MvFUNCTION NAME = "Data_Entry_Error" PARAMETERS = "message" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "g.Data_Entry_Error" VALUE = 1>
	<MvIF EXPR = "{ len( l.message ) }">
		<MvASSIGN NAME = "l.pos" VALUE = "{ miva_array_max( g.Data_Entry_Error_Message ) + 1 }">
		<MvASSIGN NAME = "g.Data_Entry_Error_Message" INDEX = "{ l.pos }" VALUE = "{ l.message }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Sends an email message according to the domain settings, either by using <MvSMTP> or an external commerce library.
|
</MvCOMMENT>

<MvFUNCTION NAME = "SendEmail" PARAMETERS = "to, from, cc, subject, headers, message" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.email:to" 		VALUE = "{ l.to }">
	<MvASSIGN NAME = "l.email:from" 	VALUE = "{ l.from }">
	<MvASSIGN NAME = "l.email:cc" 		VALUE = "{ l.cc }">
	<MvASSIGN NAME = "l.email:subject" 	VALUE = "{ l.subject }">
	<MvASSIGN NAME = "l.email:headers" 	VALUE = "{ l.headers }">
	<MvASSIGN NAME = "l.email:message" 	VALUE = "{ l.message }">

	<MvFUNCTIONRETURN VALUE = "{ v9_SendEmail( l.email ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "v9_SendEmail" PARAMETERS = "email var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.to" 		VALUE = "{ l.email:to }">
	<MvASSIGN NAME = "l.from" 		VALUE = "{ l.email:from }">
	<MvASSIGN NAME = "l.cc" 		VALUE = "{ l.email:cc }">
	<MvASSIGN NAME = "l.bcc" 		VALUE = "{ l.email:bcc }">
	<MvASSIGN NAME = "l.subject" 	VALUE = "{ l.email:subject }">
	<MvASSIGN NAME = "l.headers" 	VALUE = "{ l.email:headers }">
	<MvASSIGN NAME = "l.message" 	VALUE = "{ l.email:message }">
	<MvASSIGN NAME = "l.mailhost" 	VALUE = "{ g.Domain:mailhost }">

	<MvIF EXPR = "{ len( g.Domain:mailmeth ) }">
		<MvIF EXPR = "{ g.Domain:mail_angl }">
			<MvASSIGN NAME = "l.from" 	VALUE = "{ Email_Add_AngleBrackets( l.from ) }">
			<MvASSIGN NAME = "l.to" 	VALUE = "{ Email_Add_AngleBrackets( l.to ) }">
			<MvASSIGN NAME = "l.cc" 	VALUE = "{ Email_Add_AngleBrackets( l.cc ) }">
		</MvIF>

		<MIVA MvCOMMERCE_ERROR = "nonfatal, nodisplay">
		<MvCOMMERCE METHOD = "{ g.Domain:mailmeth }" FIELDS = "to,from,cc,subject,headers,message,mailhost">
		</MvCOMMERCE>
		<MIVA MvCOMMERCE_ERROR = "fatal, display">

		<MvIF EXPR = "{ g.MvCOMMERCE_ERROR }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00001', g.MvCOMMERCE_ERROR ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.null"				VALUE = "{ Create_Address_Format( l.from, l.from_header, l.from_address ) }">
		<MvASSIGN NAME = "l.null" 				VALUE = "{ Create_Address_Formats( l.to, l.to_headers, l.to_addresses ) }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ Create_Address_Formats( l.cc, l.cc_headers, l.cc_addresses ) }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ Create_Address_Formats( l.bcc, l.null, l.bcc_addresses ) }">
		
		<MvIF EXPR = "{ g.Domain:mail_angl }">
			<MvASSIGN NAME = "l.from_address" 	VALUE = "{ Email_Add_AngleBrackets( l.from_address ) }">
			<MvASSIGN NAME = "l.to_addresses" 	VALUE = "{ Email_Add_AngleBrackets( l.to_addresses ) }">
			<MvASSIGN NAME = "l.cc_addresses" 	VALUE = "{ Email_Add_AngleBrackets( l.cc_addresses ) }">
			<MvASSIGN NAME = "l.bcc_addresses" 	VALUE = "{ Email_Add_AngleBrackets( l.bcc_addresses ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT ISNULL l.bcc_addresses }">
			<MvASSIGN NAME = "l.to_addresses" 	VALUE = "{ l.to_addresses $ ',' $ l.bcc_addresses }">
		</MvIF>

		<MvASSIGN NAME = "l.miva_headers" 		VALUE = "{ Create_Miva_Email_Headers( l.from_header, l.to_headers, l.cc_headers, l.subject ) }">
		<MvASSIGN NAME = "l.port" 				VALUE = "{ g.Domain:mailport }">
		<MvASSIGN NAME = "l.username" 			VALUE = "{ g.Domain:mailuser }">
		<MvASSIGN NAME = "l.password" 			VALUE = "{ [ g.Library_Filename_Crypto ].Decrypt_Payment_Password( g.Domain:mailpass ) }">
		
		<MvIF EXPR = "{ NOT ISNULL g.Domain:mailflags }">
			<MvASSIGN NAME = "l.flags" 			VALUE = "{ g.Domain:mailflags $ ', noheaders' }">
		<MvELSE>
			<MvASSIGN NAME = "l.flags" 			VALUE = "noheaders">
		</MvIF>

		<MvIF EXPR = "{ ISNULL l.headers }">
			<MvCOMMENT>
			|
			| l.miva_headers only has a single CRLF, so we need to add an additional if l.headers is null
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.additional_headers"				VALUE = "{ asciichar( 13 ) $ asciichar( 10 ) }">
		<MvELSE>
			<MvIF EXPR = "{ substring_var( l.headers, len_var( l.headers ) - 3, 4 ) EQ ( asciichar( 13 ) $ asciichar( 10 ) $ asciichar( 13 ) $ asciichar( 10 ) ) }">
				<MvASSIGN NAME = "l.additional_headers"			VALUE = "{ l.headers }">
			<MvELSEIF EXPR = "{ substring_var( l.headers, len_var( l.headers ) - 1, 2 ) EQ ( asciichar( 13 ) $ asciichar( 10 ) ) }">
				<MvASSIGN NAME = "l.additional_headers"			VALUE = "{ l.headers $ asciichar( 13 ) $ asciichar( 10 ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.additional_headers"			VALUE = "{ l.headers $ asciichar( 13 ) $ asciichar( 10 ) $ asciichar( 13 ) $ asciichar( 10 ) }">
			</MvIF>
		</MvIF>

		<MIVA MvSMTP_Error = "nonfatal, nodisplay">
		<MvSMTP FROM 	 = "{ l.from_address }" 
				TO 		 = "{ l.to_addresses }" 
				CC 		 = "{ l.cc_addresses }" 
				SUBJECT  = "{ l.subject }" 
				MAILHOST = "{ l.mailhost }" 
				FLAGS 	 = "{ l.flags }" 
				PORT 	 = "{ l.port }" 
				PASSWORD = "{ l.password }" 
				USERNAME = "{ l.username }">
			<MvEVAL EXPR = "{ l.miva_headers }">

			<MvEVAL EXPR = "{ l.additional_headers }">
			<MvEVAL EXPR = "{ l.message $ asciichar( 13 ) $ asciichar( 10 ) }">
		</MvSMTP>
		<MIVA MvSMTP_Error = "nonfatal, display">

		<MvIF EXPR = "{ g.MvSMTP_Error }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00002', g.MvSMTP_Error ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Breaks a name into first, middle, and last name components
|
| Returns a structure containing the following members first middle last
|
</MvCOMMENT>

<MvFUNCTION NAME = "Tokenize_Name" PARAMETERS = "full_name" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.name:middle" 	VALUE = "">
	<MvASSIGN NAME = "l.name:first" 	VALUE = "{ gettoken( l.full_name, ' ', 1 ) }">
	<MvASSIGN NAME = "l.name:middle" 	VALUE = "">
	<MvASSIGN NAME = "l.name:last" 		VALUE = "{ gettoken( l.full_name, ' ', 2 ) }">

	<MvASSIGN NAME = "l.pos" 	VALUE = 3>
	<MvASSIGN NAME = "l.word" 	VALUE = "{ gettoken( l.full_name, ' ', l.pos ) }">
	<MvWHILE EXPR = "{ len( l.word ) }">
		<MvIF EXPR = "l.name:last">
			<MvIF EXPR = "{ len( l.name:middle ) }">
				<MvASSIGN NAME = "l.name:middle" VALUE = "{ l.name:middle $ ' ' $ l.name:last }">
			<MvELSE>
				<MvASSIGN NAME = "l.name:middle" VALUE = "{ l.name:last }">
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.name:last" VALUE = "{ l.word }">

		<MvASSIGN NAME = "l.pos" VALUE = "{ l.pos + 1 }">
		<MvASSIGN NAME = "l.word" VALUE = "{ gettoken( l.full_name, ' ', l.pos ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.name }">
</MvFUNCTION>

<MvFUNCTION NAME = "Encryption_Available" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ s.miva_sslavailable }">
</MvFUNCTION>

<MvCOMMENT>	
|
| Validates a set of product attributes. In order to be valid, all required attributes must have values present, 
| and all values must match an option in the database.
|
| attributes is an array of structures with the following members:
| 	template_code	(optional) An attribute template code
| 	code			Attribute code
| 	value			Option or input field value
|
| This function is deprecated and Validate_Attributes_DetermineVariant() should be called instead, which additionally returns a variant ID.
|
</MvCOMMENT>

<MvFUNCTION NAME = "Validate_Attributes" PARAMETERS = "product var, prompt, attributes var, attribute_count, basketoptions var, basketoption_count var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ Validate_Attributes_DetermineVariant( l.product, l.prompt, l.attributes, l.attribute_count, l.basketoptions, l.basketoption_count, l.null ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Build_Attribute_Hash" PARAMETERS = "attributes var, attribute_count, attribute_hash var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.attribute_pos"		VALUE = 1>

	<MvWHILE EXPR = "{ l.attribute_pos LE l.attribute_count }">
		<MvIF EXPR = "{ len( l.attributes[ l.attribute_pos ]:template_code ) }">
			<MvASSIGNARRAY NAME = "l.attribute_hash" VALUE = "{ l.attributes[ l.attribute_pos ]:value }">
				<MvMEMBER NAME = "template">
				<MvMEMBER NAME = "{ l.attributes[ l.attribute_pos ]:code }">
				<MvMEMBER NAME = "{ l.attributes[ l.attribute_pos ]:template_code }">
			</MvASSIGNARRAY>
		<MvELSE>
			<MvASSIGNARRAY NAME = "l.attribute_hash" VALUE = "{ l.attributes[ l.attribute_pos ]:value }">
				<MvMEMBER NAME = "non_template">
				<MvMEMBER NAME = "{ l.attributes[ l.attribute_pos ]:code }">
			</MvASSIGNARRAY>
		</MvIF>

		<MvASSIGN NAME = "l.attribute_pos"	VALUE = "{ l.attribute_pos + 1 }">
	</MvWHILE>
</MvFUNCTION>

<MvCOMMENT>
|
| Validates a set of product attributes, returning a variant representing these attributes (if configured)
|
| In order to be valid, all required attributes must have values present, and all values must match an option in the database.
|
| attributes is an array of structures with the following members:
|	template_code	(optional) An attribute template code
|	code			Attribute code
|	value			Option or input field value
|
</MvCOMMENT>

<MvFUNCTION NAME = "Validate_Attributes_DetermineVariant" PARAMETERS = "product var, prompt, attributes var, attribute_count, basketoptions var, basketoption_count var, variant_id var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.inventory_attribute_count"	VALUE = 0>
	<MvASSIGN NAME = "l.product_has_inv_attrs"		VALUE = 0>

	<MvASSIGN NAME = "l.product_attribute_pos"		VALUE = 1>
	<MvASSIGN NAME = "l.product_attribute_count"	VALUE = "{ [ g.Library_Filename_DB ].AttributeList_Load_Product( l.product:id, l.product_attributes ) }">

	<MvCOMMENT>
	|
	| If prompt is set we fail as long as the product has an attribute, or an attribute template that contains
	| at least one attribute, required or not.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.prompt }">
		<MvASSIGN NAME = "l.variant_id"				VALUE = 0>

		<MvWHILE EXPR = "{ l.product_attribute_pos LE l.product_attribute_count }">
			<MvIF EXPR = "{ l.product_attributes[ l.product_attribute_pos ]:type NE 'template' }">
				<MvFUNCTIONRETURN VALUE = 0>
			<MvELSE>
				<MvIF EXPR = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplateAttrList_Load_Template( l.product_attributes[ l.product_attribute_pos ]:attemp_id, l.template_attributes ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvIF>

			<MvASSIGN NAME = "l.product_attribute_pos"	VALUE = "{ l.product_attribute_pos + 1 }">
		</MvWHILE>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvEVAL EXPR = "{ Build_Attribute_Hash( l.attributes, l.attribute_count, l.attribute_hash ) }">

	<MvWHILE EXPR = "{ l.product_attribute_pos LE l.product_attribute_count }">
		<MvREFERENCEARRAY NAME = "l.product_attribute" VARIABLE = "l.product_attributes">
			<MvDIMENSION INDEX = "{ l.product_attribute_pos }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ( l.product_attribute:type NE 'template' ) AND l.product_attribute:inventory }">
			<MvASSIGN NAME = "l.product_has_inv_attrs"	VALUE = 1>
		</MvIF>

		<MvIF EXPR = "{ ( l.product_attribute:type EQ 'radio' ) OR
						( l.product_attribute:type EQ 'select' ) OR
						( l.product_attribute:type EQ 'swatch-select' ) }">
			<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.attribute_hash">
				<MvMEMBER NAME = "non_template">
				<MvMEMBER NAME = "{ l.product_attribute:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ len( l.value ) EQ 0 }">
				<MvIF EXPR = "{ l.product_attribute:required }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Option_Load_Code( l.product_attribute:id, l.value, l.option ) }">
					<MvIF EXPR = "{ l.product_attribute:required }">
						<MvFUNCTIONRETURN VALUE = 0>
					</MvIF>

					<MvASSIGN NAME = "l.option:id"			VALUE = 0>
					<MvASSIGN NAME = "l.option:product_id"	VALUE = "{ l.product_attribute:product_id }">
					<MvASSIGN NAME = "l.option:attr_id"		VALUE = "{ l.product_attribute:id }">
					<MvASSIGN NAME = "l.option:disp_order"	VALUE = 0>
					<MvASSIGN NAME = "l.option:code"		VALUE = "">
					<MvASSIGN NAME = "l.option:prompt"		VALUE = "">
					<MvASSIGN NAME = "l.option:price"		VALUE = 0.00>
					<MvASSIGN NAME = "l.option:cost"		VALUE = 0.00>
					<MvASSIGN NAME = "l.option:weight"		VALUE = 0>
					<MvASSIGN NAME = "l.option:image"		VALUE = "">
				</MvIF>

				<MvASSIGN NAME = "l.basketoption_count"														VALUE = "{ l.basketoption_count + 1 }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attr_id"	VALUE = "{ l.product_attribute:id }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attr_code"	VALUE = "{ l.product_attribute:code }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attmpat_id"	VALUE = 0>
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "option_id"	VALUE = "{ l.option:id }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "opt_code"	VALUE = "{ l.option:code }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "retail"		VALUE = "{ l.option:price }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "base_price"	VALUE = "{ Adjusted_Price( l.product, l.option:price, l.option:cost ) }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "price"		VALUE = "{ l.basketoptions[ l.basketoption_count ]:base_price }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "weight"		VALUE = "{ l.option:weight }">

				<MvIF EXPR = "{ l.product_attribute:inventory }">
					<MvASSIGN NAME = "l.inventory_attribute_count"	VALUE = "{ l.inventory_attribute_count + 1 }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"		VALUE = "{ l.product_attribute:id }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"	VALUE = 0>
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"	VALUE = "{ l.option:id }">
				</MvIF>
			</MvIF>
		<MvELSEIF EXPR = "{ ( l.product_attribute:type EQ 'text' ) OR
							( l.product_attribute:type EQ 'memo' ) OR
							( l.product_attribute:type EQ 'checkbox' ) }">
			<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.attribute_hash">
				<MvMEMBER NAME = "non_template">
				<MvMEMBER NAME = "{ l.product_attribute:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ len( l.value ) EQ 0 }">
				<MvIF EXPR = "{ l.product_attribute:required }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ l.product_attribute:inventory }">
					<MvASSIGN NAME = "l.inventory_attribute_count"	VALUE = "{ l.inventory_attribute_count + 1 }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"		VALUE = "{ l.product_attribute:id }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"	VALUE = 0>
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"	VALUE = 0>
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.basketoption_count"														VALUE = "{ l.basketoption_count + 1 }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attr_id"	VALUE = "{ l.product_attribute:id }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attr_code"	VALUE = "{ l.product_attribute:code }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attmpat_id"	VALUE = 0>
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "option_id"	VALUE = 0>
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "opt_code"	VALUE = "">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "retail"		VALUE = "{ l.product_attribute:price }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "base_price"	VALUE = "{ Adjusted_Price( l.product, l.product_attribute:price, l.product_attribute:cost ) }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "price"		VALUE = "{ l.basketoptions[ l.basketoption_count ]:base_price }">
				<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "weight"		VALUE = "{ l.product_attribute:weight }">

				<MvIF EXPR = "{ l.product_attribute:type NE 'checkbox' }">
					<MvIF EXPR = "{ len( l.value ) GT 254 }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "data"		VALUE = "">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "data_long"	VALUE = "{ l.value }">
					<MvELSE>
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "data"		VALUE = "{ l.value }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "data_long"	VALUE = "">
					</MvIF>
				</MvIF>

				<MvIF EXPR = "{ l.product_attribute:inventory }">
					<MvASSIGN NAME = "l.inventory_attribute_count"	VALUE = "{ l.inventory_attribute_count + 1 }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"		VALUE = "{ l.product_attribute:id }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"	VALUE = 0>
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"	VALUE = 1>
				</MvIF>
			</MvIF>
		<MvELSEIF EXPR = "{ l.product_attribute:type EQ 'template' }">
			<MvASSIGN NAME = "l.template_attribute_pos"		VALUE = 1>
			<MvASSIGN NAME = "l.template_attribute_count"	VALUE = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplateAttrList_Load_Template( l.product_attribute:attemp_id, l.template_attributes ) }">

			<MvWHILE EXPR = "{ l.template_attribute_pos LE l.template_attribute_count }">
				<MvREFERENCEARRAY NAME = "l.template_attribute" VARIABLE = "l.template_attributes">
					<MvDIMENSION INDEX = "{ l.template_attribute_pos }">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ l.template_attribute:inventory }">
					<MvASSIGN NAME = "l.product_has_inv_attrs"	VALUE = 1>
				</MvIF>

				<MvIF EXPR = "{ ( l.template_attribute:type EQ 'radio' ) OR
								( l.template_attribute:type EQ 'select' ) OR
								( l.template_attribute:type EQ 'swatch-select' ) }">
					<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.attribute_hash">
						<MvMEMBER NAME = "template">
						<MvMEMBER NAME = "{ l.product_attribute:code }">
						<MvMEMBER NAME = "{ l.template_attribute:code }">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ len( l.value ) EQ 0 }">
						<MvIF EXPR = "{ l.template_attribute:required }">
							<MvFUNCTIONRETURN VALUE = 0>
						</MvIF>
					<MvELSE>
						<MvIF EXPR = "{ NOT [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Load_Code( l.template_attribute:id, l.value, l.option ) }">
							<MvIF EXPR = "{ l.template_attribute:required }">
								<MvFUNCTIONRETURN VALUE = 0>
							</MvIF>

							<MvASSIGN NAME = "l.option:id"			VALUE = 0>
							<MvASSIGN NAME = "l.option:attemp_id"	VALUE = "{ l.product_attribute:attemp_id }">
							<MvASSIGN NAME = "l.option:attmpat_id"	VALUE = "{ l.template_attribute:id }">
							<MvASSIGN NAME = "l.option:disporder"	VALUE = 0>
							<MvASSIGN NAME = "l.option:code"		VALUE = "">
							<MvASSIGN NAME = "l.option:prompt"		VALUE = "">
							<MvASSIGN NAME = "l.option:price"		VALUE = 0.00>
							<MvASSIGN NAME = "l.option:cost"		VALUE = 0.00>
							<MvASSIGN NAME = "l.option:weight"		VALUE = 0>
							<MvASSIGN NAME = "l.option:image"		VALUE = "">
						</MvIF>

						<MvASSIGN NAME = "l.basketoption_count"														VALUE = "{ l.basketoption_count + 1 }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attr_id"	VALUE = "{ l.product_attribute:id }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attr_code"	VALUE = "{ l.template_attribute:code }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attmpat_id"	VALUE = "{ l.template_attribute:id }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "option_id"	VALUE = "{ l.option:id }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "opt_code"	VALUE = "{ l.option:code }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "retail"		VALUE = "{ l.option:price }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "base_price"	VALUE = "{ Adjusted_Price( l.product, l.option:price, l.option:cost ) }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "price"		VALUE = "{ l.basketoptions[ l.basketoption_count ]:base_price }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "weight"		VALUE = "{ l.option:weight }">

						<MvIF EXPR = "{ l.template_attribute:inventory }">
							<MvASSIGN NAME = "l.inventory_attribute_count"	VALUE = "{ l.inventory_attribute_count + 1 }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"		VALUE = "{ l.product_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"	VALUE = "{ l.template_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"	VALUE = "{ l.option:id }">
						</MvIF>
					</MvIF>
				<MvELSEIF EXPR = "{ ( l.template_attribute:type EQ 'text' ) OR
									( l.template_attribute:type EQ 'memo' ) OR
									( l.template_attribute:type EQ 'checkbox' ) }">
					<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.attribute_hash">
						<MvMEMBER NAME = "template">
						<MvMEMBER NAME = "{ l.product_attribute:code }">
						<MvMEMBER NAME = "{ l.template_attribute:code }">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ len( l.value ) EQ 0 }">
						<MvIF EXPR = "{ l.template_attribute:required }">
							<MvFUNCTIONRETURN VALUE = 0>
						</MvIF>

						<MvIF EXPR = "{ l.template_attribute:inventory }">
							<MvASSIGN NAME = "l.inventory_attribute_count"	VALUE = "{ l.inventory_attribute_count + 1 }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"		VALUE = "{ l.product_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"	VALUE = "{ l.template_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"	VALUE = 0>
						</MvIF>
					<MvELSE>
						<MvASSIGN NAME = "l.basketoption_count"														VALUE = "{ l.basketoption_count + 1 }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attr_id"	VALUE = "{ l.product_attribute:id }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attr_code"	VALUE = "{ l.template_attribute:code }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "attmpat_id"	VALUE = "{ l.template_attribute:id }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "option_id"	VALUE = 0>
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "opt_code"	VALUE = "">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "retail"		VALUE = "{ l.template_attribute:price }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "base_price"	VALUE = "{ Adjusted_Price( l.product, l.template_attribute:price, l.template_attribute:cost ) }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "price"		VALUE = "{ l.basketoptions[ l.basketoption_count ]:base_price }">
						<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "weight"		VALUE = "{ l.template_attribute:weight }">

						<MvIF EXPR = "{ l.template_attribute:type NE 'checkbox' }">
							<MvIF EXPR = "{ len( l.value ) GT 254 }">
								<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "data"		VALUE = "">
								<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "data_long"	VALUE = "{ l.value }">
							<MvELSE>
								<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "data"		VALUE = "{ l.value }">
								<MvASSIGN NAME = "l.basketoptions" INDEX = "{ l.basketoption_count }" MEMBER = "data_long"	VALUE = "">
							</MvIF>
						</MvIF>

						<MvIF EXPR = "{ l.template_attribute:inventory }">
							<MvASSIGN NAME = "l.inventory_attribute_count"	VALUE = "{ l.inventory_attribute_count + 1 }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"		VALUE = "{ l.product_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"	VALUE = "{ l.template_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"	VALUE = 1>
						</MvIF>
					</MvIF>
				</MvIF>

				<MvASSIGN NAME = "l.template_attribute_pos"	VALUE = "{ l.template_attribute_pos + 1 }">
			</MvWHILE>
		</MvIF>

		<MvASSIGN NAME = "l.product_attribute_pos"			VALUE = "{ l.product_attribute_pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ l.inventory_attribute_count EQ 0 }">
		<MvIF EXPR = "{ l.product_has_inv_attrs }">
			<MvASSIGN NAME = "l.variant_id"					VALUE = -1>
		<MvELSE>
			<MvASSIGN NAME = "l.variant_id"					VALUE = 0>
		</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].ProductVariant_Load_Attributes( l.product:id, l.inventory_attributes, l.inventory_attribute_count, l.productvariant ) }">
			<MvASSIGN NAME = "l.variant_id"					VALUE = -1>
		<MvELSE>
			<MvASSIGN NAME = "l.variant_id"					VALUE = "{ l.productvariant:variant_id }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
|
| Attempts to generate a unique item code from a longer identifier
|
| If unique_code is empty, an initial code is generated by extracting the first letter of each word in name.
| If unique_code has a value, a series of random digits is appended.
|
| Returns an item code
|
</MvCOMMENT>

<MvFUNCTION NAME = "Unique_Code" PARAMETERS = "name, unique_code" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.unique_code }">
		<MvASSIGN NAME = "l.pos"					VALUE = 1>
		<MvASSIGN NAME = "l.char"					VALUE = "{ toupper( substring( gettoken( l.name, ' ', l.pos ), 1, 1 ) ) }">

		<MvWHILE EXPR = "{ ( NOT ISNULL l.char ) AND ( len( l.unique_code ) LT 50 ) }">
			<MvIF EXPR = "{ isalnum( l.char ) }">
				<MvASSIGN NAME = "l.unique_code"	VALUE = "{ l.unique_code $ l.char }">
			</MvIF>

			<MvASSIGN NAME = "l.pos"				VALUE = "{ l.pos + 1 }">
			<MvASSIGN NAME = "l.char"				VALUE = "{ toupper( substring( gettoken( l.name, ' ', l.pos ), 1, 1 ) ) }">
		</MvWHILE>

		<MvIF EXPR = "{ NOT ISNULL l.unique_code }">
			<MvFUNCTIONRETURN VALUE = "{ l.unique_code }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| If we hit the code length limit, just give up and start over with completely random characters
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ len( l.unique_code ) GE 50 }">
		<MvASSIGN NAME = "l.unique_code"			VALUE = "">
	</MvIF>

	<MvIF EXPR = "{ random( 1 ) }">		<MvASSIGN NAME = "l.unique_code" VALUE = "{ l.unique_code $ asciichar( random( 25 ) + 65 ) }">
	<MvELSE>							<MvASSIGN NAME = "l.unique_code" VALUE = "{ l.unique_code $ asciichar( random( 9 ) + 48 ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.unique_code }">
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ProgressBar_Begin" STANDARDOUTPUTLEVEL = "text,html,compresswhitespace">
	<head>
	<title>Progress Bar</title>
	<style type="text/css">
	html {
		height:100%;
	}

	body {
		margin: 0;
		padding: 0;
		font-size:small;
		font-family:Verdana, Arial, Helvetica, sans-serif;
		height:100%;
	}

	h1 {
		font-family: Georgia, "Times New Roman", Times, serif;
		font-size: 1.5em;
		color: #000000;
		margin: 0px 0px 12px 0px;
		font-weight:bold;
	}

	#contentarea {
		padding: 20px 28px 28px 28px;
		font-size: 85%;
	}
	</style>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_SetVariables( 'g', 'Screen, Sessionurl, Module_Code, Store_Code, Adminurl' ) }">

	<script type="text/javascript">
	<!--
		if ( top.mm9_screen )
		{
			top.mm9_screen.Frame_SetVisible();
			top.mm9_screen.SetIgnoreNextFrameLoad( true );
			top.mm9_screen.SetIgnoreNextFrameUnload( true );
			top.mm9_screen.Resize();
		}
		
		function CancelProgress()
		{
			if ( top.mm9_screen )
			{
				top.mm9_screen.SetIgnoreNextFrameLoad( false );
				top.mm9_screen.SetIgnoreNextFrameUnload( false );
			}

			parent.Main.location.replace( Adminurl + 'Screen=' + encodeURIComponent( Screen ) + '&Module_Code=' + encodeURIComponent( Module_Code ) + '&Store_Code=' + encodeURIComponent( Store_Code ) );
		}
	//-->
	</script>
	</head>

	<body>
		<div id="mm9_content_container">
			<div id="mm9_content">
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ProgressBar_End" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
			</div>
		</div>
	</body>
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ProgressBar" PARAMETERS = "title, cycle_count, cycle_total_count" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.cycle_count"		VALUE = "{ int( l.cycle_count ) }">
	<MvASSIGN NAME = "l.cycle_total_count"	VALUE = "{ int( l.cycle_total_count ) }">
	<MvASSIGN NAME = "l.current_percent" 	VALUE = "{ ( l.cycle_count / l.cycle_total_count * 100 ) ROUND 0 }">
	<MvASSIGN NAME = "l.remaining_percent"	VALUE = "{ 100 - l.current_percent }">

	<div style="padding: 50px;">
		<table width="100%">
		<tr><td nowrap>
			0%
		</td><td nowrap width="100%">
			<table border="0" cellpadding="1" width="100%">
			<tr><td bgcolor="#000000">
				<table border="0" cellspacing="0" cellpadding="0" width="100%">
				<tr>
					<td width="100%" bgcolor="#000000">
						<table border="0" cellspacing="0" cellpadding="0" width="100%">
						<tr>
							<td id="current_pcnt" width="{ l.current_percent $ '%' }" bgcolor="blue">&nbsp;</td>
							<td id="remaining_pcnt" width="{ l.remaining_percent $ '%' }" bgcolor="white">&nbsp;</td>
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</td></tr>
			</table>
		</td><td nowrap>
			100%
		</td></tr>
		</table>

		<center><span id="cycle_count"><MvEVAL EXPR = "{ l.cycle_count $ '/' $ l.cycle_total_count }"></span></center>
		<center><input type="button" value="Cancel" onclick="CancelProgress();"></center>
	</div>

	<script type="text/javascript">
		if ( top.mm9_screen )
		{
			top.mm9_screen.Scrape_Content();
			top.mm9_screen.Resize();
		}
	</script>
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ProgressBar_Update" PARAMETERS = "cycle_count, cycle_total_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.cycle_count"		VALUE = "{ int( l.cycle_count ) }">
	<MvASSIGN NAME = "l.cycle_total_count"	VALUE = "{ int( l.cycle_total_count ) }">
	<MvASSIGN NAME = "l.current_percent" 	VALUE = "{ ( l.cycle_count / l.cycle_total_count * 100 ) ROUND 0 }">

	<MvCOMMENT>This condition will prevent a javascript error when setting the width of remaining percent to 0%</MvCOMMENT>
	<MvIF EXPR = "{ l.current_percent EQ 100 }">
		<MvASSIGN NAME = "l.current_percent" VALUE = 99>
	</MvIF>

	<MvASSIGN NAME = "l.remaining_percent"	VALUE = "{ 100 - l.current_percent }">

	<MvIF EXPR = "{ l.current_percent GT g.Progress_Bar }">
		<MvASSIGN NAME = "g.Progress_Bar" VALUE = "{ l.current_percent }">

		<MvEVAL EXPR = "{ '<script type="text/javascript">' 					$ asciichar( 10 ) $ 
				 '<!--' 								$ asciichar( 10 ) $ 
				 'var current_pcnt = ' 							$ l.current_percent $ ';' $ asciichar( 10 ) $ 
				 'var pcnt_left = ' 							$ l.remaining_percent $ ';' $ asciichar( 10 ) $ 
				 'document.getElementById("current_pcnt").width=current_pcnt+\'%\';' 	$ asciichar( 10 ) $ 
				 'document.getElementById("remaining_pcnt").width=pcnt_left+\'%\';' 	$ asciichar( 10 ) $ 
				 'document.getElementById("cycle_count").innerHTML="' 			$ l.cycle_count $ '/' $ l.cycle_total_count $ '";' 		$ asciichar( 10 ) $ 
				 '//-->' 								$ asciichar( 10 ) $ 
				 '</script>' 								$ asciichar( 10 ) }">

		<MvASSIGN NAME = "l.flush" VALUE = "{ miva_output_flush() }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ExportProgressBar_Start" PARAMETERS = "title, action" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginScreen( l.title, l.action, l.null ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].BeginContent() }">

	<MvASSIGN NAME = "l.flush" VALUE = "{ miva_output_flush() }">
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ExportProgressBar_End" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].EndContent() }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].EndScreen() }">
</MvFUNCTION>

<MvFUNCTION NAME = "Element_ExportProgressBar_JavaScript" PARAMETERS = "title, screen, action" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ g.Element_ExportProgressBar_JavaScript }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_ProgressDialog_JavaScript() }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_SetVariables( 'g', 'clientside_url' ) }">

	<script type="text/javascript">
	function RunImportExport( button )
	{
		var id, iframe, render, progressdialog, original_target;

		if ( !( iframe = document.getElementById( 'importexport_iframe' ) ) )
		{
			try						{ iframe = document.createElement( '<iframe name="importexport_iframe">' ); }
			catch ( exception )		{ iframe = document.createElement( 'iframe' ); }

			iframe.id				= 'importexport_iframe';
			iframe.name				= 'importexport_iframe';
			iframe.style.display	= 'none';

			document.body.appendChild( iframe );
		}

		render						= function()
		{
			var message;

			if ( iframe.contentWindow.Fatal_Error_Set )
			{
				message = 'Miva Merchant has encountered a fatal error and is unable to continue. \n\n' + 
						  'Error: ' + iframe.contentWindow.Fatal_Error_Code + '\n' + 
						  'Message: ' + iframe.contentWindow.Fatal_Error_Message;

				if ( progressdialog.visible )	progressdialog.Hide();
				else							progressdialog.onhide();

				return Modal_Alert( message );
			}

			if ( iframe.contentWindow.FieldError_Set )
			{
				if ( iframe.contentWindow.FieldError_Field.length )
				{
					document.forms[ Screen ].elements[ iframe.contentWindow.FieldError_Field ].select();
					document.forms[ Screen ].elements[ iframe.contentWindow.FieldError_Field ].focus();
				}

				message = iframe.contentWindow.FieldError_Message;

				if ( progressdialog.visible )	progressdialog.Hide();
				else							progressdialog.onhide();

				return Modal_Alert( message );
			}

			if ( iframe.contentWindow.Show_ProgressBar )
			{
				progressdialog.Show();
				progressbar.Initialize( null, true );
				iframe.contentWindow.Show_ProgressBar = 0;
			}

			if ( iframe.contentWindow.Percent_Updated )
			{
				progressbar.Progress( iframe.contentWindow.Current_Percent );
				iframe.contentWindow.Percent_Updated = 0;
			}

			if ( iframe.contentWindow.Progress_Complete )
			{
				message = iframe.contentWindow.Progress_Complete_Message;

				progressbar.Complete();

				if ( top.mm9_screen )	return top.mm9_screen.UpdateMessage_Display( message );
				else					return Modal_Alert( message );
			}

			if ( id )
			{
				cancelAnimationFrame( id );
				id = null;
			}
				
			id = window.requestAnimationFrame( render );
		}
		
		id									= window.requestAnimationFrame( render );

		progressdialog						= new ProgressDialog( '<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScriptEncode( l.title ) }">' );
		progressdialog.onhide				= function()
		{
			window.cancelAnimationFrame( id );
			iframe.src						= clientside_url + 'Filename=blank.html';
			EnableButtons( button );
		};

		progressbar							= progressdialog.ProgressBar_Append( true )

		original_target						= document.forms[ Screen ].target;
		document.forms[ Screen ].target		= 'importexport_iframe';

		SubmitForm( '<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScriptEncode( l.screen ) }">', '<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScriptEncode( l.action ) }">', button );
		document.forms[ Screen ].target		= original_target;
	}
	</script>

	<MvASSIGN NAME = "g.Element_ExportProgressBar_JavaScript" VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Element_ExportProgressBar_CSS" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Element_ExportProgressBar_CSS }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_ProgressDialog_CSS() }">

	<MvASSIGN NAME = "g.Element_ExportProgressBar_CSS" VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Element_ExportProgressBar_HTML" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Element_ExportProgressBar_HTML }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_ProgressDialog_HTML() }">

	<MvASSIGN NAME = "g.Element_ExportProgressBar_HTML" VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ExportProgressBar_Buttons" PARAMETERS = "text, action" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].DrawButtons( l.action $ ':' $ l.text $ ';RunImportExport( this )' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ExportProgressBar_Show" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_Set_A_Variable( 'Show_ProgressBar', '1' ) }">
	<MvASSIGN NAME = "l.flush" VALUE = "{ miva_output_flush() }">
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ExportProgressBar_Update" PARAMETERS = "cycle_count, cycle_total_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.cycle_count"		VALUE = "{ int( l.cycle_count ) }">
	<MvASSIGN NAME = "l.cycle_total_count"	VALUE = "{ int( l.cycle_total_count ) }">
	<MvASSIGN NAME = "l.current_percent" 	VALUE = "{ ( l.cycle_count / l.cycle_total_count * 100 ) ROUND 0 }">

	<MvIF EXPR = "{ l.current_percent GT g.Progress_Bar }">
		<MvASSIGN NAME = "g.Progress_Bar"	VALUE = "{ l.current_percent }">

		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_AJAX_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_Set_A_Variable( 'Current_Percent', l.current_percent ) }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_Set_A_Variable( 'Percent_Updated', '1' ) }">

		<MvASSIGN NAME = "l.flush" VALUE = "{ miva_output_flush() }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Draw_ExportProgressBar_ProgressComplete" PARAMETERS = "message" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_Set_A_Variable( 'Progress_Complete_Message', l.message ) }">
	<MvEVAL EXPR = "{ [ g.Module_Admin ].JavaScript_Set_A_Variable( 'Progress_Complete', '1' ) }">

	<MvASSIGN NAME = "l.flush" VALUE = "{ miva_output_flush() }">
</MvFUNCTION>

<MvCOMMENT>
|
| Sends an email message with an attached binary file
|
</MvCOMMENT>

<MvFUNCTION NAME = "Send_Email_Attachment" PARAMETERS = "from, to, cc, subject, file_name, file_dir, file_location" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.crlf"	VALUE = "{ asciichar( 13 ) $ asciichar( 10 ) }">

	<MvASSIGN NAME = "l.mix_boundary"	VALUE = "{ 'miva-mixed_' $ GenerateBoundary() }">
	<MvASSIGN NAME = "l.alt_boundary"	VALUE = "{ 'miva-alt_' $ GenerateBoundary() }">

	<MvASSIGN NAME = "l.mailhost"		VALUE = "{ g.Domain:mailhost }">
	<MvASSIGN NAME = "l.body_message"	VALUE = "{ 'By your request, Miva Merchant has emailed your exported file \'' $ l.file_name $ '\' from your \'' $ g.Store:name $ '\' store.' }">

	<MvIF EXPR = "{ len( g.Domain:mailmeth ) }">
		<MvIF EXPR = "{ g.Domain:mail_angl }">
			<MvASSIGN NAME = "l.from" 	VALUE = "{ Email_Add_AngleBrackets( l.from ) }">
			<MvASSIGN NAME = "l.to" 	VALUE = "{ Email_Add_AngleBrackets( l.to ) }">
			<MvASSIGN NAME = "l.cc" 	VALUE = "{ Email_Add_AngleBrackets( l.cc ) }">
		</MvIF>

		<MvCAPTURE VARIABLE = "l.headers"><MvASSIGN NAME = "l.ok" VALUE = "{ BuildMIMEAttachmentEmailHeaders( l.mix_boundary, l.alt_boundary, l.body_message, l.crlf  ) }"></MvCAPTURE>
		<MvCAPTURE VARIABLE = "l.message"><MvASSIGN NAME = "l.ok" VALUE = "{ BuildMIMEAttachmentEmailMessage( l.mix_boundary, l.file_name, l.file_dir, l.file_location, l.crlf ) }"></MvCAPTURE>
	
		<MIVA MvCOMMERCE_ERROR = "nonfatal, nodisplay">
		<MvCOMMERCE METHOD = "{ g.Domain:mailmeth }" FIELDS = "to,from,cc,subject,headers,message,mailhost">
		</MvCOMMERCE>
		<MIVA MvCOMMERCE_ERROR = "fatal, display">

		<MvIF EXPR = "{ g.MvCOMMERCE_ERROR }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00017', g.MvCOMMERCE_ERROR ) }">
		</MvIF>
	<MvELSE>
		<MvASSIGN NAME = "l.null"				VALUE = "{ Create_Address_Format( l.from, l.from_header, l.from_address ) }">
		<MvASSIGN NAME = "l.null" 				VALUE = "{ Create_Address_Formats( l.to, l.to_headers, l.to_addresses ) }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ Create_Address_Formats( l.cc, l.cc_headers, l.cc_addresses ) }">
		
		<MvIF EXPR = "{ g.Domain:mail_angl }">
			<MvASSIGN NAME = "l.from_address" 	VALUE = "{ Email_Add_AngleBrackets( l.from_address ) }">
			<MvASSIGN NAME = "l.to_addresses" 	VALUE = "{ Email_Add_AngleBrackets( l.to_addresses ) }">
			<MvASSIGN NAME = "l.cc_addresses" 	VALUE = "{ Email_Add_AngleBrackets( l.cc_addresses ) }">
		</MvIF>

		<MvASSIGN NAME = "l.miva_headers" 		VALUE = "{ Create_Miva_Email_Headers( l.from_header, l.to_headers, l.cc_headers, l.subject ) }">
		<MvASSIGN NAME = "l.port" 				VALUE = "{ g.Domain:mailport }">
		<MvASSIGN NAME = "l.username" 			VALUE = "{ g.Domain:mailuser }">
		<MvASSIGN NAME = "l.password" 			VALUE = "{ [ g.Library_Filename_Crypto ].Decrypt_Payment_Password( g.Domain:mailpass ) }">
		
		<MvIF EXPR = "{ NOT ISNULL g.Domain:mailflags }">
			<MvASSIGN NAME = "l.flags" 			VALUE = "{ g.Domain:mailflags $ ', noheaders' }">
		<MvELSE>
			<MvASSIGN NAME = "l.flags" 			VALUE = "noheaders">
		</MvIF>

		<MIVA MvSMTP_Error = "nonfatal, nodisplay">
		<MvSMTP FROM 	 = "{ l.from_address }" 
				TO 		 = "{ l.to_addresses }" 
				CC 		 = "{ l.cc_addresses }" 
				SUBJECT  = "{ l.subject }" 
				MAILHOST = "{ l.mailhost }"
				FLAGS 	 = "{ l.flags }"
				PORT 	 = "{ l.port }"
				USERNAME = "{ l.username }"
				PASSWORD = "{ l.password }">
			<MvEVAL EXPR = "{ l.miva_headers }">

			<MvASSIGN NAME = "l.ok" 			VALUE = "{ BuildMIMEAttachmentEmailHeaders( l.mix_boundary, l.alt_boundary, l.body_message, l.crlf ) }">
			<MvASSIGN NAME = "l.ok" 			VALUE = "{ BuildMIMEAttachmentEmailMessage( l.mix_boundary, l.file_name, l.file_dir, l.file_location, l.crlf ) }">
		</MvSMTP>
		<MIVA MvSMTP_Error = "nonfatal, display">

		<MvIF EXPR = "{ g.MvSMTP_Error }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00018', g.MvSMTP_Error ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "BuildMIMEAttachmentEmailHeaders" PARAMETERS = "mix_boundary, alt_boundary, body_message, crlf" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ 'Content-Type: multipart/mixed; boundary="' $ l.mix_boundary $ '"' $ l.crlf }">
	<MvEVAL EXPR = "{ 'Mime-Version: 1.0' $ l.crlf }">
	<MvEVAL EXPR = "{ l.crlf }">
	<MvEVAL EXPR = "{ '--' $ l.mix_boundary $ l.crlf }">
	<MvEVAL EXPR = "{ 'Content-Type: multipart/alternative; boundary="' $ l.alt_boundary $ '"' $ l.crlf }">
	<MvEVAL EXPR = "{ l.crlf }">
	<MvEVAL EXPR = "{ '--' $ l.alt_boundary $ l.crlf }">
	<MvEVAL EXPR = "{ 'Content-Type: text/plain; charset="utf-8"' $ l.crlf }">
	<MvEVAL EXPR = "{ 'Content-Transfer-Encoding: 7bit' $ l.crlf }">
	<MvEVAL EXPR = "{ l.crlf }">
	<MvEVAL EXPR = "{ l.body_message $ l.crlf}">
	<MvEVAL EXPR = "{ l.crlf }">
	<MvEVAL EXPR = "{ '--' $ l.alt_boundary $ l.crlf }">
	<MvEVAL EXPR = "{ 'Content-Type: text/html; charset="utf-8"' $ l.crlf }">
	<MvEVAL EXPR = "{ 'Content-Disposition: inline;' $ l.crlf }">
	<MvEVAL EXPR = "{ 'Content-Transfer-Encoding: 7bit;' $ l.crlf }">
	<MvEVAL EXPR = "{ l.crlf }">
	<MvEVAL EXPR = "{ l.body_message $ l.crlf }">
	<MvEVAL EXPR = "{ l.crlf }">
	<MvEVAL EXPR = "{ '--' $ l.alt_boundary $ '--' $ l.crlf }">
	<MvEVAL EXPR = "{ '--' $ l.mix_boundary $ l.crlf }">
</MvFUNCTION>

<MvFUNCTION NAME = "BuildMIMEAttachmentEmailMessage" PARAMETERS = "mix_boundary, file_name, file_dir, file_location, crlf" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.size" VALUE = "{ file_read( l.file_dir $ l.file_name, l.file_location, l.data ) }">
	
	<MvEVAL EXPR = "{ BuildMIMEAttachmentEmailMessage_Output( l.mix_boundary, l.file_name, l.data, l.crlf ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "BuildMIMEAttachmentEmailMessage_Output" PARAMETERS = "mix_boundary, file_name, data var, crlf" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.encoded"		VALUE = "{ crypto_base64_encode( l.data ) }">
	<MvASSIGN NAME = "l.data_length"	VALUE = "{ len( l.encoded ) }">
	<MvASSIGN NAME = "l.data"			VALUE = "">
	
	<MvEVAL EXPR = "{ 'Content-Type: application/octet-stream; name="' $ l.file_name $ '"' $ l.crlf }">
	<MvEVAL EXPR = "{ 'Content-Description: ' $ l.file_name $ l.crlf }">
	<MvEVAL EXPR = "{ 'Content-Disposition: attachment; filename="' $ l.file_name $ '"; size=' $ l.data_length $ l.crlf }"> 
	<MvEVAL EXPR = "{ 'Content-Transfer-Encoding: base64' $ l.crlf }">
	<MvEVAL EXPR = "{ l.crlf }">
	<MvEVAL EXPR = "{ Chunk_Split_Output( l.encoded, l.data_length, 72, l.crlf ) }">
	<MvEVAL EXPR = "{ l.crlf }">
	<MvEVAL EXPR = "{ '--' $ l.mix_boundary $ '--' }">
</MvFUNCTION>

<MvFUNCTION NAME = "StartMimeEmail" PARAMETERS = "email_structure var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.email_structure" 			VALUE = "">
	<MvASSIGN NAME = "l.email_structure:crlf" 		VALUE = "{ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.email_structure:boundary" 	VALUE = "{ GenerateBoundary() }">
	<MvASSIGN NAME = "l.email_structure:headers" 	VALUE = "{ 'MIME-Version: 1.0' $ l.email_structure:crlf }">
	<MvASSIGN NAME = "l.email_structure:headers" 	VALUE = "{ l.email_structure:headers $ 'Content-Type: multipart/mixed; boundary=' $ l.email_structure:boundary }">
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Chunk_Split" PARAMETERS = "string var, chunk, end" STANDARDOUTPUTLEVEL = "">
	<MvCAPTURE VARIABLE = "l.string"><MvEVAL EXPR = "{ Chunk_Split_Output( l.string, len( l.string ), l.chunk, l.end ) }"></MvCAPTURE>
</MvFUNCTION>

<MvFUNCTION NAME = "Chunk_Split_Output" PARAMETERS = "data var, data_len, chunk_size, line_terminator" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.num_chunks"		VALUE = "{ int( ( l.data_len + l.chunk_size - 1 ) / l.chunk_size ) }">
	<MvIF EXPR = "{ l.num_chunks GT 500 }">
		<MvASSIGN NAME = "l.split_pos"	VALUE = "{ ( ( l.num_chunks / 2 ) ROUND 0 ) * l.chunk_size }">
		<MvASSIGN NAME = "l.right_size"	VALUE = "{ l.data_len - l.split_pos }">

		<MvASSIGN NAME = "l.split_data"	VALUE = "{ substring( l.data, 1, l.split_pos ) }">
		<MvEVAL EXPR = "{ Chunk_Split_Output( l.split_data, l.split_pos, l.chunk_size, l.line_terminator ) }">

		<MvASSIGN NAME = "l.split_data"	VALUE = "{ substring( l.data, l.split_pos + 1, l.right_size ) }">
		<MvEVAL EXPR = "{ Chunk_Split_Output( l.split_data, l.right_size, l.chunk_size, l.line_terminator ) }">

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.pos"			VALUE = 1>
	<MvWHILE EXPR = "{ ( l.pos + l.chunk_size - 1 ) LE l.data_len }">
		<MvEVAL EXPR = "{ substring( l.data, l.pos, l.chunk_size ) }">
		<MvEVAL EXPR = "{ l.line_terminator }">
		<MvEVAL EXPR = "{ miva_output_flush() }">

		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + l.chunk_size }">
	</MvWHILE>

	<MvIF EXPR = "{ l.pos LE l.data_len }">
		<MvEVAL EXPR = "{ substring( l.data, l.pos, l.data_len - l.pos + 1 ) }">
		<MvEVAL EXPR = "{ l.line_terminator }">
		<MvEVAL EXPR = "{ miva_output_flush() }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "GenerateBoundary" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.x" VALUE = 1>
	<MvWHILE EXPR = "{ l.x LE 20 }" >
		<MvASSIGN NAME = "l.num" 	VALUE = "{ random( 25 ) }">
		<MvASSIGN NAME = "l.retval" 	VALUE = "{ l.retval $ asciichar( 97 + l.num ) }">
		<MvASSIGN NAME = "l.x" 		VALUE = "{ l.x + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.retval }">
</MvFUNCTION>

<MvFUNCTION NAME = "GenerateAttachmentMIME" PARAMETERS = "email_structure var, extra_content_headers, file_name, file_dir, file_location" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" 			VALUE = "{ file_read( l.file_dir $ l.file_name, l.file_location, l.mydata ) }">

	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.email_structure:crlf $ '--' $ l.email_structure:boundary $ l.email_structure:crlf }">
	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.msg $ 'Content-Type: application/octet-stream; name="' $ l.file_name $ '"' }">
	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.msg $ l.email_structure:crlf $ 'Content-Disposition: attachment;' }">

	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.msg $ l.email_structure:crlf }">
	<MvIF EXPR = "{ l.extra_content_headers }">
		<MvASSIGN NAME = "l.msg" 		VALUE = "{ l.msg $ l.extra_content_headers }">
	</MvIF>

	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.msg $ l.email_structure:crlf $ l.mydata $ l.email_structure:crlf $ l.email_structure:crlf }">
	<MvASSIGN NAME = "l.email_structure:msg" 	VALUE="{ l.email_structure:msg $ l.msg}">
	
	<MvFUNCTIONRETURN VALUE=1>
</MvFUNCTION>

<MvFUNCTION NAME = "GenerateBodyMIME" PARAMETERS = "email_structure var, content_type, content_description, extra_content_headers, data" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.email_structure:crlf $ '--' $ l.email_structure:boundary $ l.email_structure:crlf }">
	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.msg $ 'Content-Type: ' $ l.content_type }">

	<MvIF EXPR = "{ l.content_description }">
		<MvASSIGN NAME = "l.msg" 		VALUE = "{ l.msg $ '; ' $ l.content_description }">
	</MvIF>

	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.msg $ l.email_structure:crlf }">
	<MvIF EXPR = "{ l.extra_content_headers }">
		<MvASSIGN NAME = "l.msg" 		VALUE = "{ l.msg $ l.extra_content_headers }">
	</MvIF>

	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.msg $ l.email_structure:crlf }">
	<MvASSIGN NAME = "l.msg" 			VALUE = "{ l.msg $ l.email_structure:crlf $ l.data $ l.email_structure:crlf $ l.email_structure:crlf }">
	<MvASSIGN NAME = "l.email_structure:msg" 	VALUE = "{ l.email_structure:msg $ l.msg }">

	<MvFUNCTIONRETURN VALUE=1>
</MvFUNCTION>

<MvFUNCTION NAME = "SendMimeEmail" PARAMETERS = "email_structure var, to, from, cc, subject" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.email:to" 		VALUE = "{ l.to }">
	<MvASSIGN NAME = "l.email:from" 	VALUE = "{ l.from }">
	<MvASSIGN NAME = "l.email:cc" 		VALUE = "{ l.cc }">
	<MvASSIGN NAME = "l.email:subject" 	VALUE = "{ l.subject }">

	<MvFUNCTIONRETURN VALUE="{ v9_SendMimeEmail( l.email_structure, l.email ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "v9_SendMimeEmail" PARAMETERS = "mime_structure var, email var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.mime_structure:msg" VALUE = "{ l.mime_structure:msg $ '--' $ l.mime_structure:boundary $ '--' }">
	<MvASSIGN NAME = "l.email:headers" 		VALUE = "{ l.mime_structure:headers }">
	<MvASSIGN NAME = "l.email:message" 		VALUE = "{ l.mime_structure:msg }">

	<MvFUNCTIONRETURN VALUE = "{ v9_SendEmail( l.email ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Sorts a PR5-style item sort input array
|
| This function sorts an OffsetArray used to implement the PR6-style numeric product, category, etc... sort.
|
</MvCOMMENT>

<MvFUNCTION NAME = "SortOffsetArray" PARAMETERS = "array var, count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.up_array_count"		VALUE = 0>
	<MvASSIGN NAME = "l.down_array_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.array" COUNT = "{ l.count }">
		<MvIF EXPR = "{ l.item:offset LT l.item:original_offset }">	<MvASSIGN NAME = "l.up_array_count" 	VALUE = "{ miva_array_insert_var( l.up_array, l.item, -1 ) }">
		<MvELSE>													<MvASSIGN NAME = "l.down_array_count" 	VALUE = "{ miva_array_insert_var( l.down_array, l.item, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.up_array_count GT 1 }"> 		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_sort( l.up_array, 'SortOffsetArray_Sort_Ascending_Callback', l.null ) }"> 		</MvIF>
	<MvIF EXPR = "{ l.down_array_count GT 1 }"> 	<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_sort( l.down_array, 'SortOffsetArray_Sort_Descending_Callback', l.null ) }"> 	</MvIF>

	<MvASSIGN NAME = "l.array" VALUE = "">

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.up_array" COUNT = "{ l.up_array_count }">
		<MvASSIGN NAME = "l.count" VALUE = "{ miva_array_insert_var( l.array, l.item, -1 ) }">
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.item" ARRAY = "l.down_array" COUNT = "{ l.down_array_count }">
		<MvASSIGN NAME = "l.count" VALUE = "{ miva_array_insert_var( l.array, l.item, -1 ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "SortOffsetArray_Sort_Ascending_Callback" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.left:offset LT l.right:offset }">							<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:offset GT l.right:offset }">						<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.left:original_offset LT l.right:original_offset }">		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.left:original_offset GT l.right:original_offset }">	<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "SortOffsetArray_Sort_Descending_Callback" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.left:offset LT l.right:offset }">							<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.left:offset GT l.right:offset }">						<MvFUNCTIONRETURN VALUE = -1>
	</MvIF>

	<MvIF EXPR = "{ l.left:original_offset LT l.right:original_offset }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left:original_offset GT l.right:original_offset }">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "SortOffsetArray_PastEnd" PARAMETERS = "array var, count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.comparisons" INDEX = 1 MEMBER = "subelement"	VALUE = ":offset">
	<MvASSIGN NAME = "l.comparisons" INDEX = 1 MEMBER = "direction"		VALUE = 1>
	<MvASSIGN NAME = "l.comparisons" INDEX = 2 MEMBER = "subelement"	VALUE = ":original_offset">
	<MvASSIGN NAME = "l.comparisons" INDEX = 2 MEMBER = "direction"		VALUE = 1>

	<MvEVAL EXPR = "{ QuickSortArray_Sort( l.array, 1, l.count, l.comparisons, 2 ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Sorts an array using the Quick Sort algorithm. Subelement must contain a leading colon (:) if sorting an array of structures by a single member,
| or may be empty if sorting an array of simple values.  Elements are compared using the MivaScript EQ operator.
|
</MvCOMMENT>

<MvFUNCTION NAME = "QuickSortArray" PARAMETERS = "array var, subelement, direction" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.comparisons" INDEX = 1 MEMBER = "subelement"	VALUE = "{ l.subelement }">
	<MvASSIGN NAME = "l.comparisons" INDEX = 1 MEMBER = "direction"		VALUE = "{ l.direction }">

	<MvEVAL EXPR = "{ QuickSortArray_Sort( l.array, 1, miva_array_elements( l.array ), l.comparisons, 1 ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Sorts an array using multiple comparisons to break ties using the Quick Sort algorithm.
|
| Each element in comparisons contains the following members:
|	subelement The member to sort by, including the leading colon (:)
|	direction The direction in which to sort
|
| Elements are compared using the MivaScript EQ operator according to each element in comparisons.
| If a comparison results in a tie, the next comparison is used.
|
</MvCOMMENT>

<MvFUNCTION NAME = "QuickSortArray_Sort" PARAMETERS = "array var, left, right, comparisons var, comparison_count" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.right LE l.left }">
		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.pivot_index"	VALUE = "{ QuickSortArray_Partition( l.array, l.left, l.right, l.left, l.comparisons, l.comparison_count ) }">

	<MvEVAL EXPR = "{ QuickSortArray_Sort( l.array, l.left, l.pivot_index - 1, l.comparisons, l.comparison_count ) }">
	<MvEVAL EXPR = "{ QuickSortArray_Sort( l.array, l.pivot_index + 1, l.right, l.comparisons, l.comparison_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "QuickSortArray_Partition" PARAMETERS = "array var, left, right, pivot_index, comparisons var, comparison_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pivot_element"			VALUE = "{ l.array[ l.pivot_index ] }">
	<MvASSIGN NAME = "l.store_index"			VALUE = "{ l.left }">

	<MvEVAL EXPR = "{ QuickSortArray_Swap( l.array, l.pivot_index, l.right ) }">

	<MvASSIGN NAME = "l.i"						VALUE = "{ l.left }">
	<MvWHILE EXPR = "{ l.i LT l.right }">
		<MvIF EXPR = "{ QuickSortArray_Compare( l.array[ l.i ], l.pivot_element, l.comparisons, l.comparison_count ) LE 0 }">
			<MvEVAL EXPR = "{ QuickSortArray_Swap( l.array, l.i, l.store_index ) }">
			<MvASSIGN NAME = "l.store_index"	VALUE = "{ l.store_index + 1 }">
		</MvIF>

		<MvASSIGN NAME = "l.i"					VALUE = "{ l.i + 1 }">
	</MvWHILE>

	<MvEVAL EXPR = "{ QuickSortArray_Swap( l.array, l.store_index, l.right ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.store_index }">
</MvFUNCTION>

<MvFUNCTION NAME = "QuickSortArray_Compare" PARAMETERS = "left_element var, right_element var, comparisons var, comparison_count" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.comp_pos"	VALUE = 1>
	<MvASSIGN NAME = "l.result"		VALUE = 0>

	<MvWHILE EXPR = "{ l.comp_pos LE l.comparison_count }">
		<MvASSIGN NAME = "l.left_value"		VALUE = "{ miva_variable_value( 'l.left_element' $ l.comparisons[ l.comp_pos ]:subelement ) }">
		<MvASSIGN NAME = "l.right_value"	VALUE = "{ miva_variable_value( 'l.right_element' $ l.comparisons[ l.comp_pos ]:subelement ) }">

		<MvIF EXPR = "{ l.left_value LT l.right_value }">
			<MvFUNCTIONRETURN VALUE = "{ 0 - l.comparisons[ l.comp_pos ]:direction }">
		<MvELSEIF EXPR = "{ l.left_value GT l.right_value }">
			<MvFUNCTIONRETURN VALUE = "{ l.comparisons[ l.comp_pos ]:direction }">
		</MvIF>

		<MvASSIGN NAME = "l.comp_pos"		VALUE = "{ l.comp_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "QuickSortArray_Swap" PARAMETERS = "array var, a, b" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.temp"						VALUE = "{ l.array[ l.a ] }">

	<MvASSIGN NAME = "l.array" INDEX = "{ l.a }"	VALUE = "{ l.array[ l.b ] }">
	<MvASSIGN NAME = "l.array" INDEX = "{ l.b }"	VALUE = "{ l.temp }">
</MvFUNCTION>

<MvCOMMENT>
|
| Encodes a string in hexidecimal notation
|
| Returns the hexidecimal notation of string
|
</MvCOMMENT>

<MvFUNCTION NAME = "Hex_Encode" PARAMETERS = "string, length" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pos"			VALUE = 1>
	<MvASSIGN NAME = "l.result"			VALUE = "">

	<MvWHILE EXPR = "{ l.pos LE l.length }">
		<MvASSIGN NAME = "l.byte"		VALUE = "{ asciivalue( substring( l.string, l.pos, 1 ) ) }">

		<MvASSIGN NAME = "l.msb"		VALUE = "{ ( l.byte BITAND 240 ) BITSR 4 }">
		<MvIF EXPR = "{ l.msb GT 9 }">
			<MvASSIGN NAME = "l.msb"	VALUE = "{ asciichar( 97 + ( l.msb - 10 ) ) }">
		</MvIF>

		<MvASSIGN NAME = "l.lsb"		VALUE = "{ l.byte BITAND 15 }">
		<MvIF EXPR = "{ l.lsb GT 9 }">
			<MvASSIGN NAME = "l.lsb"	VALUE = "{ asciichar( 97 + ( l.lsb - 10 ) ) }">
		</MvIF>

		<MvASSIGN NAME = "l.result"		VALUE = "{ l.result $ l.msb $ l.lsb }">
		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvCOMMENT>
|
| Decodes a hexidecimal string
|
| Returns the decoded string
|
</MvCOMMENT>

<MvFUNCTION NAME = "Hex_Decode" PARAMETERS = "string, length" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pos"			VALUE = 1>
	<MvASSIGN NAME = "l.result"			VALUE = "">

	<MvWHILE EXPR = "{ l.pos LE l.length }">
		<MvASSIGN NAME = "l.msb"		VALUE = "{ tolower( substring( l.string, l.pos, 1 ) ) }">
		<MvASSIGN NAME = "l.lsb"		VALUE = "{ tolower( substring( l.string, l.pos + 1, 1 ) ) }">

		<MvIF EXPR = "{ isdigit( l.msb ) }">							<MvASSIGN NAME = "l.value" VALUE = "{ ( asciivalue( l.msb ) - 48 ) * 16 }">
		<MvELSEIF EXPR = "{ ( l.msb GE 'a' ) AND ( l.msb LE 'f' ) }">	<MvASSIGN NAME = "l.value" VALUE = "{ ( 10 + ( asciivalue( l.msb ) - 97 ) ) * 16 }">
		</MvIF>

		<MvIF EXPR = "{ isdigit( l.lsb ) }">							<MvASSIGN NAME = "l.value" VALUE = "{ l.value + ( asciivalue( l.lsb ) - 48 ) }">
		<MvELSEIF EXPR = "{ ( l.lsb GE 'a' ) AND ( l.lsb LE 'f' ) }">	<MvASSIGN NAME = "l.value" VALUE = "{ l.value + 10 + ( asciivalue( l.lsb ) - 97 ) }">
		</MvIF>

		<MvASSIGN NAME = "l.result"		VALUE = "{ l.result $ asciichar( l.value ) }">	
		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + 2 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "HexByte_To_Decimal" PARAMETERS = "hex" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.msb"		VALUE = "{ tolower( substring( l.hex, 1, 1 ) ) }">
	<MvASSIGN NAME = "l.lsb"		VALUE = "{ tolower( substring( l.hex, 2, 1 ) ) }">

	<MvIF EXPR = "{ isdigit( l.msb ) }">							<MvASSIGN NAME = "l.value" VALUE = "{ ( asciivalue( l.msb ) - 48 ) * 16 }">
	<MvELSEIF EXPR = "{ ( l.msb GE 'a' ) AND ( l.msb LE 'f' ) }">	<MvASSIGN NAME = "l.value" VALUE = "{ ( 10 + ( asciivalue( l.msb ) - 97 ) ) * 16 }">
	</MvIF>

	<MvIF EXPR = "{ isdigit( l.lsb ) }">							<MvASSIGN NAME = "l.value" VALUE = "{ l.value + ( asciivalue( l.lsb ) - 48 ) }">
	<MvELSEIF EXPR = "{ ( l.lsb GE 'a' ) AND ( l.lsb LE 'f' ) }">	<MvASSIGN NAME = "l.value" VALUE = "{ l.value + 10 + ( asciivalue( l.lsb ) - 97 ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.value }">
</MvFUNCTION>

<MvCOMMENT>
|
| Strips non digit, non letter characters from a string
|
| Returns the stripped string
|
</MvCOMMENT>

<MvFUNCTION NAME = "AlphaNumericOnly" PARAMETERS = "name" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pos"				VALUE = 1>
	<MvASSIGN NAME = "l.length"				VALUE = "{ len( l.name ) }">
	<MvASSIGN NAME = "l.result"				VALUE = "">

	<MvWHILE EXPR = "{ l.pos LE l.length }">
		<MvASSIGN NAME = "l.char"			VALUE = "{ substring( l.name, l.pos, 1 ) }">
		<MvIF EXPR = "{ isdigit( l.char ) }">
			<MvASSIGN NAME = "l.result"		VALUE = "{ l.result $ l.char }">
		<MvELSEIF EXPR = "{ isalpha( l.char ) }">
			<MvASSIGN NAME = "l.result"		VALUE = "{ l.result $ l.char }">
		</MvIF>

		<MvASSIGN NAME = "l.pos"			VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvCOMMENT>
|
| Strips any characters that are not valid in an RFC 2616 (HTTP) token from a string
|
| Returns the stripped string
|
</MvCOMMENT>

<MvFUNCTION NAME = "SanitizeRFC2616Token" PARAMETERS = "token" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.length"		VALUE = "{ len_var( l.token ) }">
	<MvASSIGN NAME = "l.result"		VALUE = "">

	<MvFOR INDEX = "l.pos" COUNT = "{ l.length }">
		<MvASSIGN NAME = "l.byte"	VALUE = "{ substring_var( l.token, l.pos, 1 ) }">

		<MvIF EXPR = "{ asciivalue( l.byte ) LE 31 }">			<MvFORCONTINUE>
		<MvELSEIF EXPR = "{ l.byte IN '()<>@,;:\\\"/[]?={}' }">	<MvFORCONTINUE>
		<MvELSEIF EXPR = "{ asciivalue( l.byte ) EQ 127 }">		<MvFORCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.result"	VALUE = "{ l.result $ l.byte }">
	</MvFOR>

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvCOMMENT>
|
| Returns the lowest index of a sparse array
|
</MvCOMMENT>

<MvFUNCTION NAME = "FirstSparseArrayElement" PARAMETERS = "array var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.min"	VALUE = "{ miva_array_min( l.array ) }">
	<MvIF EXPR = "{ l.min LE 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.min }">
</MvFUNCTION>

<MvCOMMENT>
|
| Returns the index of the next element in a sparse array if present, otherwise pos + 1
|
</MvCOMMENT>

<MvFUNCTION NAME = "NextSparseArrayElement" PARAMETERS = "array var, pos" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ miva_array_next( l.array, l.pos ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Returns the index of the previous element in a sparse array if present, otherwise pos - 1
|
</MvCOMMENT>

<MvFUNCTION NAME = "PreviousSparseArrayElement" PARAMETERS = "array var, pos" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ miva_array_previous( l.array, l.pos ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Builds an array containing the names of all members of a structure
|
| Returns the count of members within struct
|
</MvCOMMENT>

<MvFUNCTION NAME = "StructureMembers" PARAMETERS = "struct var, members var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ miva_struct_members( l.struct, l.members ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Parses cookies sent by the browser and stores them in a structure. A member is created in cookies with the name of the cookie equal to
| the member name, and the value of the member equal to the cookie's value. This allows cookies to be referenced directly by name.
|
</MvCOMMENT>

<MvFUNCTION NAME = "ParseCookies" PARAMETERS = "cookies var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.cookies"									VALUE = "">

	<MvASSIGN NAME = "l.pos"										VALUE = 1>
	<MvASSIGN NAME = "l.cookie"										VALUE = "{ trim( gettoken( s.http_cookie, ';', l.pos ) ) }">
	
	<MvWHILE EXPR = "{ len( l.cookie ) }">
		<MvASSIGN NAME = "l.cookie_name"							VALUE = "{ trim( gettoken( l.cookie, '=', 1 ) ) }">
		<MvASSIGN NAME = "l.cookie_value"							VALUE = "{ trim( gettoken( l.cookie, '=', 2 ) ) }">

		<MvASSIGN NAME = "l.cookies" MEMBER = "{ l.cookie_name }"	VALUE = "{ l.cookie_value }">

		<MvASSIGN NAME = "l.pos"									VALUE = "{ l.pos + 1 }">
		<MvASSIGN NAME = "l.cookie"									VALUE = "{ trim( gettoken( s.http_cookie, ';', l.pos ) ) }">
	</MvWHILE>
</MvFUNCTION>

<MvCOMMENT>
|
| This function adds or updates a cookie in a cookie list, which may then be output in its entirety using OutputCookies().
| In pr7-bugfix-2 and later, all cookies are created with the HttpOnly attribute.
|
</MvCOMMENT>

<MvFUNCTION NAME = "SetCookie" PARAMETERS = "cookies var, name, value, domain, expires, path, secure" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ v10_SetCookie( l.cookies, l.name, l.value, l.domain, l.expires, l.path, l.secure, '' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "v10_SetCookie" PARAMETERS = "cookies var, name, value, domain, expires, path, secure, samesite" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCEARRAY NAME = "l.cookie" VARIABLE = "l.cookies">
		<MvMEMBER NAME = "{ l.name }">
	</MvREFERENCEARRAY>

	<MvASSIGN NAME = "l.cookie"				VALUE = "">
	<MvASSIGN NAME = "l.cookie:name"		VALUE = "{ l.name }">
	<MvASSIGN NAME = "l.cookie:value"		VALUE = "{ l.value }">
	<MvASSIGN NAME = "l.cookie:domain"		VALUE = "{ l.domain }">
	<MvASSIGN NAME = "l.cookie:expires"		VALUE = "{ l.expires }">
	<MvASSIGN NAME = "l.cookie:path"		VALUE = "{ l.path }">
	<MvASSIGN NAME = "l.cookie:secure"		VALUE = "{ l.secure }">
	<MvASSIGN NAME = "l.cookie:httponly"	VALUE = 1>
	<MvASSIGN NAME = "l.cookie:samesite"	VALUE = "{ l.samesite }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function modifies a cookie list so that the specified cookie is explicitly cleared upon the next call to OutputCookies().  
| Clearing of the cookie is accomplished by setting its expiration date to a time one year in the past.
|
</MvCOMMENT>

<MvFUNCTION NAME = "ClearCookie" PARAMETERS = "cookies var, name, domain, path, secure" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ SetCookie( l.cookies, l.name, 'deleted', l.domain, s.dyn_time_t - ( 60 * 60 * 24 * 365 ), l.path, l.secure ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Outputs a cookie list to the browser
|
</MvCOMMENT>

<MvFUNCTION NAME = "OutputCookies" PARAMETERS = "cookies var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.set_cookie_header"				VALUE = "">
	<MvASSIGN NAME = "l.cookie_pos"						VALUE = 1>
	<MvASSIGN NAME = "l.cookie_count"					VALUE = "{ StructureMembers( l.cookies, l.cookie_names ) }">

	<MvWHILE EXPR = "{ l.cookie_pos LE l.cookie_count }">
		<MvREFERENCEARRAY NAME = "l.cookie" VARIABLE = "l.cookies">
			<MvMEMBER NAME = "{ l.cookie_names[ l.cookie_pos ] }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ( NOT ISNULL l.cookie:value ) OR l.cookie:expires }">
			<MvIF EXPR = "{ NOT ISNULL l.set_cookie_header }">
				<MvASSIGN NAME = "l.set_cookie_header"	VALUE = "{ l.set_cookie_header $ asciichar( 13 ) $ asciichar( 10 ) $ 'Set-Cookie: ' }">
			</MvIF>

			<MvASSIGN NAME = "l.set_cookie_header"		VALUE = "{ l.set_cookie_header $ l.cookie:name $ '=' $ l.cookie:value }">

			<MvIF EXPR = "{ NOT ISNULL l.cookie:domain }">		<MvASSIGN NAME = "l.set_cookie_header" VALUE = "{ l.set_cookie_header $ '; domain=' $ l.cookie:domain }">								</MvIF>
			<MvIF EXPR = "{ NOT ISNULL l.cookie:expires }">
				<MvIF EXPR = "{ isdigit( l.cookie:expires ) }">	<MvASSIGN NAME = "l.set_cookie_header" VALUE = "{ l.set_cookie_header $ '; expires=' $ Format_RFC1123_DateTime( l.cookie:expires ) }">
				<MvELSE>										<MvASSIGN NAME = "l.set_cookie_header" VALUE = "{ l.set_cookie_header $ '; expires=' $ l.cookie:expires }">
				</MvIF>
			</MvIF>
			<MvIF EXPR = "{ NOT ISNULL l.cookie:path }">		<MvASSIGN NAME = "l.set_cookie_header" VALUE = "{ l.set_cookie_header $ '; path=' $ l.cookie:path }">									</MvIF>
			<MvIF EXPR = "{ l.cookie:secure }">					<MvASSIGN NAME = "l.set_cookie_header" VALUE = "{ l.set_cookie_header $ '; secure' }">													</MvIF>
			<MvIF EXPR = "{ l.cookie:httponly }">				<MvASSIGN NAME = "l.set_cookie_header" VALUE = "{ l.set_cookie_header $ '; HttpOnly' }">												</MvIF>
			<MvIF EXPR = "{ NOT ISNULL l.cookie:samesite }">	<MvASSIGN NAME = "l.set_cookie_header" VALUE = "{ l.set_cookie_header $ '; SameSite=' $ l.cookie:samesite }">							</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.cookie_pos"					VALUE = "{ l.cookie_pos + 1 }">
	</MvWHILE>

	<MvIF EXPR = "{ ISNULL l.set_cookie_header }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ miva_output_header( 'Set-Cookie', l.set_cookie_header ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| This function examines s.documenturl to ensure that it matches the HTTP Host header sent by the client.  Depending
| on the server configuration, this may or may not be the case.  If s.documenturl does not appear to be directly
| self-referential, this function constructs a URL based on the HTTP Host header and remaining contents of s.documenturl.
|
| The resulting URL will most likely work for the specific client that made the original request, but may not work for
| other clients depending on their configuration.
|
</MvCOMMENT>

<MvFUNCTION NAME = "SelfReferentialURL" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL s.http_host }">
		<MvFUNCTIONRETURN VALUE = "{ s.documenturl }">
	</MvIF>

	<MvASSIGN NAME = "l.documenturl_protocol"	VALUE = "{ gettoken( s.documenturl, ':', 1 ) }">
	<MvASSIGN NAME = "l.documenturl_hostport"	VALUE = "{ gettoken( s.documenturl, '/', 3 ) }">

	<MvASSIGN NAME = "l.documenturl_host"		VALUE = "{ gettoken( l.documenturl_hostport, ':', 1 ) }">
	<MvASSIGN NAME = "l.documenturl_port"		VALUE = "{ gettoken( l.documenturl_hostport, ':', 2 ) }">

	<MvASSIGN NAME = "l.httphost_host"			VALUE = "{ gettoken( s.http_host, ':', 1 ) }">
	<MvASSIGN NAME = "l.httphost_port"			VALUE = "{ gettoken( s.http_host, ':', 2 ) }">

	<MvIF EXPR = "{ l.documenturl_protocol EQ 'https' }">
		<MvIF EXPR = "{ ISNULL l.documenturl_port }">	<MvASSIGN NAME = "l.documenturl_port"	VALUE = 443>	</MvIF>
		<MvIF EXPR = "{ ISNULL l.httphost_port }">		<MvASSIGN NAME = "l.httphost_port"		VALUE = 443>	</MvIF>
	<MvELSE>
		<MvIF EXPR = "{ ISNULL l.documenturl_port }">	<MvASSIGN NAME = "l.documenturl_port"	VALUE = 80>		</MvIF>
		<MvIF EXPR = "{ ISNULL l.httphost_port }">		<MvASSIGN NAME = "l.httphost_port"		VALUE = 80>		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ ( l.httphost_host EQ l.documenturl_host ) AND
					( l.httphost_port EQ l.documenturl_port ) }">
		<MvFUNCTIONRETURN VALUE = "{ s.documenturl }">
	</MvIF>

	<MvASSIGN NAME = "l.documenturl_rempos"		VALUE = "{ ( l.documenturl_hostport $ '/' ) EIN s.documenturl }">
	<MvASSIGN NAME = "l.documenturl_remlength"	VALUE = "{ ( len( s.documenturl ) - l.documenturl_rempos ) + 1 }">
	<MvASSIGN NAME = "l.documenturl_remainder"	VALUE = "{ substring( s.documenturl, l.documenturl_rempos, l.documenturl_remlength ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.documenturl_protocol $ '://' $ s.http_host $ l.documenturl_remainder }">
</MvFUNCTION>

<MvCOMMENT>
|
| Constructs a self-referential URL using s.documenturl and the HTTP Host header, using a fallback URL in certain cases
|
| This function behaves identically to SelfReferentialURL(), except if the number of forward slashes in s.documenturl and the parameter failsafe_url
| differ, s.documenturl is assumed to be malformed and failsafe_url is returned instead.
|
</MvCOMMENT>

<MvFUNCTION NAME = "SelfReferentialURL_Failsafe" PARAMETERS = "failsafe_url" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ CountOccurrences( '/', s.documenturl ) NE CountOccurrences( '/', l.failsafe_url ) }">
		<MvFUNCTIONRETURN VALUE = "{ l.failsafe_url }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ SelfReferentialURL() }">
</MvFUNCTION>

<MvFUNCTION NAME = "BaseName" PARAMETERS = "path" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.path"			VALUE = "{ glosub( l.path, '\\', '/' ) }">

	<MvASSIGN NAME = "l.slash_pos"		VALUE = "{ '/' IN l.path }">
	<MvWHILE EXPR = "{ l.slash_pos }">
		<MvASSIGN NAME = "l.path"	VALUE = "{ substring( l.path, l.slash_pos + 1, len( l.path ) - l.slash_pos ) }">
		<MvASSIGN NAME = "l.slash_pos"	VALUE = "{ '/' IN l.path }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.path }">
</MvFUNCTION>

<MvFUNCTION NAME = "BasePath" PARAMETERS = "file_path" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.split_count" VALUE = "{ miva_splitstring( l.file_path, '/', l.split_path, 'noempty' ) }">
	<MvASSIGN NAME = "l.split_count" VALUE = "{ miva_array_delete( l.split_path, l.split_count, 1 ) }">

	<MvIF EXPR = "{ l.split_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = "/">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ '/' $ miva_joinstring( l.split_path, '/', '' ) $ '/' }">
</MvFUNCTION>

<MvFUNCTION NAME = "NormalizePath" PARAMETERS = "file_path" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.path_array"				VALUE = "">
	<MvASSIGN NAME = "l.path_array_count"		VALUE = 0>
	<MvASSIGN NAME = "l.path_is_absolute"		VALUE = "{ ( '/' IN l.file_path ) EQ 1 }">

	<MvFOREACH ITERATOR = "l.path" ARRAY = "l.paths" COUNT = "{ miva_splitstring( l.file_path, '/', l.paths, '' ) }">
		<MvIF EXPR = "{ ( ISNULL l.path ) OR ( l.path EQ '.' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.path NE '..' }">			<MvASSIGN NAME = "l.path_array_count" VALUE = "{ miva_array_insert( l.path_array, l.path, -1 ) }">
		<MvELSEIF EXPR = "{ l.path_array_count }">	<MvASSIGN NAME = "l.path_array_count" VALUE = "{ miva_array_delete( l.path_array, l.path_array_count, 1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvASSIGN NAME = "l.normalized_path"		VALUE = "{ miva_joinstring( l.path_array, '/', '' ) }">

	<MvIF EXPR = "{ l.path_is_absolute }">
		<MvASSIGN NAME = "l.normalized_path"	VALUE = "{ '/' $ l.normalized_path }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.normalized_path }">
</MvFUNCTION>

<MvFUNCTION NAME = "Extension_NoDot" PARAMETERS = "filename" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.dot_pos"		VALUE = "{ '.' IN l.filename }">
	<MvWHILE EXPR = "{ l.dot_pos }">
		<MvASSIGN NAME = "l.filename"	VALUE = "{ substring( l.filename, l.dot_pos + 1, len( l.filename ) - l.dot_pos ) }">
		<MvASSIGN NAME = "l.dot_pos"	VALUE = "{ '.' IN l.filename }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.filename }">
</MvFUNCTION>

<MvFUNCTION NAME = "Extension" PARAMETERS = "filename" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ '.' $ Extension_NoDot( l.filename ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Directory_Delete" PARAMETERS = "directory, location" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.file" ARRAY = "l.files" COUNT = "{ dir( l.directory, l.location, l.files ) }">
		<MvIF EXPR = "{ ( l.file EQ '.' OR l.file EQ '..' ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.filepath" VALUE = "{ ConcatenatePath( l.directory, l.file ) }">

		<MvIF EXPR = "{ l.location EQ 'script' }">			<MvASSIGN NAME = "l.is_dir" VALUE = "{ sisdir( l.filepath ) }">
		<MvELSEIF EXPR = "{ l.location EQ 'data' }">		<MvASSIGN NAME = "l.is_dir" VALUE = "{ fisdir( l.filepath ) }">
		<MvELSE>											<MvASSIGN NAME = "l.is_dir" VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.is_dir }">
			<MvIF EXPR = "{ NOT Directory_Delete( l.filepath, l.location ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ l.location EQ 'script' }">		<MvASSIGN NAME = "l.result" VALUE = "{ sdelete( l.filepath ) }">
			<MvELSEIF EXPR = "{ l.location EQ 'data' }">	<MvASSIGN NAME = "l.result" VALUE = "{ fdelete( l.filepath ) }">
			<MvELSE>										<MvASSIGN NAME = "l.result" VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT l.result }">
				<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00052', 'Unable to delete \'' $ l.filepath $ '\': ' $ file_last_error() ) }">
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ l.location EQ 'script' }">				<MvASSIGN NAME = "l.result" VALUE = "{ sdelete( l.directory ) }">
	<MvELSEIF EXPR = "{ l.location EQ 'data' }">			<MvASSIGN NAME = "l.result" VALUE = "{ fdelete( l.directory ) }">
	<MvELSE>												<MvASSIGN NAME = "l.result" VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00053', 'Unable to delete \'' $ l.directory $ '\': ' $ file_last_error() ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SanitizePath" PARAMETERS = "path" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.path" VALUE = "{ glosub( l.path, '\\', '/' ) }">
	<MvASSIGN NAME = "l.path" VALUE = "{ glosub( l.path, '//', '/' ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.path }">
</MvFUNCTION>

<MvFUNCTION NAME = "ConcatenatePath" PARAMETERS = "first_path, second_path" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.first_path"			VALUE = "{ SanitizePath( l.first_path ) }">
	<MvASSIGN NAME = "l.second_path"		VALUE = "{ SanitizePath( l.second_path ) }">

	<MvWHILE EXPR = "{ substring_var( l.first_path, len_var( l.first_path ), 1 ) EQ '/' }">
		<MvASSIGN NAME = "l.first_path" 	VALUE = "{ substring_var( l.first_path, 1, len_var( l.first_path ) - 1 ) }">
	</MvWHILE>

	<MvWHILE EXPR = "{ substring_var( l.second_path, 1, 1 ) EQ '/' }">
		<MvASSIGN NAME = "l.second_path" 	VALUE = "{ substring_var( l.second_path, 2, len_var( l.second_path ) - 1 ) }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.first_path $ '/' $ l.second_path }">
</MvFUNCTION>

<MvCOMMENT>
|
| Counts and returns the number of occurrences of one string in another
|
</MvCOMMENT>

<MvFUNCTION NAME = "CountOccurrences" PARAMETERS = "needle, haystack" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.needle_count"		VALUE = 0>
	<MvASSIGN NAME = "l.needle_len"			VALUE = "{ len( l.needle ) }">
	<MvASSIGN NAME = "l.haystack_len"		VALUE = "{ len( l.haystack ) }">

	<MvASSIGN NAME = "l.needle_pos"			VALUE = "{ l.needle IN l.haystack }">

	<MvWHILE EXPR = "{ l.needle_pos }">
		<MvASSIGN NAME = "l.needle_count"	VALUE = "{ l.needle_count + 1 }">

		<MvASSIGN NAME = "l.haystack_len"	VALUE = "{ l.haystack_len - ( l.needle_pos + l.needle_len - 1 ) }">
		<MvIF EXPR = "{ l.haystack_len EQ 0 }">
			<MvWHILESTOP>
		</MvIF>

		<MvASSIGN NAME = "l.haystack"		VALUE = "{ substring( l.haystack, l.needle_pos + l.needle_len, l.haystack_len ) }">
		<MvASSIGN NAME = "l.needle_pos"		VALUE = "{ l.needle IN l.haystack }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.needle_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "ShippingMethodList_Load_Enabled" PARAMETERS = "shipping_methods var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Feature_SHP_UT ].ShippingMethodList_Load_Enabled( l.shipping_methods ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_Type_From_Header" PARAMETERS = "filepath, location, type var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ file_read_bytes( l.filepath, l.location, 0, 12, l.header ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00004', 'File does not exist or is not a valid image' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Image_Type_From_Header_Memory( l.header, l.type ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_Type_From_Header_Memory" PARAMETERS = "buffer var, type var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Attempt to determine the file type by looking at the contents of the file, ala file(1)
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.header" VALUE = "{ substring_var( l.buffer, 1, 4 ) }">

	<MvIF EXPR = "{ l.header EQ 'GIF8' }">																					<MvASSIGN NAME = "l.type" VALUE = "gif">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.header EQ ( asciichar( 137 ) $ 'PNG' ) }">														<MvASSIGN NAME = "l.type" VALUE = "png">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ substring_var( l.header, 1, 3 ) EQ ( asciichar( 255 ) $ asciichar( 216 ) $ asciichar( 255 ) ) }">	<MvASSIGN NAME = "l.type" VALUE = "jpg">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ substring_var( l.buffer, 1, 4 ) EQ 'RIFF' AND substring_var( l.buffer, 9, 4 ) EQ 'WEBP' }">			<MvASSIGN NAME = "l.type" VALUE = "webp">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00043', 'Unable to determine image file format' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_Type_From_Extension" PARAMETERS = "filepath, type var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.extension"	VALUE = "{ tolower( Extension_NoDot( l.filepath ) ) }">

	<MvIF EXPR = "{ l.extension EQ 'gif' }">			<MvASSIGN NAME = "l.type" VALUE = "gif">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ ( l.extension EQ 'jpg' ) OR
						( l.extension EQ 'jpeg' ) }">	<MvASSIGN NAME = "l.type" VALUE = "jpg">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.extension EQ 'png' }">		<MvASSIGN NAME = "l.type" VALUE = "png">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.extension EQ 'webp' }">		<MvASSIGN NAME = "l.type" VALUE = "webp">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00044', 'Unable to determine image file format' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_Type" PARAMETERS = "filepath, location, type var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ Image_Type_From_Header( l.filepath, l.location, l.type ) }">	<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ Image_Type_From_Extension( l.filepath, l.type ) }">			<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00005', 'Unable to determine image file format' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_gdCreateFromFile" PARAMETERS = "filepath, location" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Image_Type( l.filepath, l.location, l.type ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Image_gdCreateFromFile_Type( l.type, l.filepath, l.location ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_gdCreateFromFile_Type" PARAMETERS = "type, filepath, location" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ gdClearLastError() }">

	<MvIF EXPR = "{ l.type EQ 'jpg' }">			<MvASSIGN NAME = "l.gd_image" VALUE = "{ gdImageCreateFromJpeg( l.filepath, l.location ) }">
	<MvELSEIF EXPR = "{ l.type EQ 'gif' }">		<MvASSIGN NAME = "l.gd_image" VALUE = "{ gdImageCreateFromGif( l.filepath, l.location ) }">
	<MvELSEIF EXPR = "{ l.type EQ 'png' }">		<MvASSIGN NAME = "l.gd_image" VALUE = "{ gdImageCreateFromPng( l.filepath, l.location ) }">
	<MvELSEIF EXPR = "{ l.type EQ 'webp' }">	<MvASSIGN NAME = "l.gd_image" VALUE = "{ gdImageCreateFromWebp( l.filepath, l.location ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00006', 'Unknown or unsupported image type' ) }">
	</MvIF>

    <MvIF EXPR = "{ l.gd_image LE 0 }">
		<MvASSIGN NAME = "l.gd_error_message"	VALUE = "{ gdLastError() }">

		<MvIF EXPR = "{ ISNULL l.gd_error_message }">														<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00013', 'File is corrupt or is not a supported image type' ) }">
		<MvELSEIF EXPR = "{ l.type EQ 'webp' AND ( 'unable to load function' CIN l.gd_error_message ) }">	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00054', 'Miva now supports WebP, however, an underlying dependency has not yet been installed.  Please contact support to have this prioritized on your account.' ) }">
		<MvELSE>																							<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00007', l.gd_error_message ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.gd_image }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_gdSaveToFile_Type" PARAMETERS = "gd_image var, type, filepath, location" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ gdClearLastError() }">
	
	<MvIF EXPR = "{ l.type EQ 'jpg' }">			<MvASSIGN NAME = "l.result" VALUE = "{ gdImageJpeg( l.gd_image, l.filepath, l.location, g.Domain:img_qual ) }">
	<MvELSEIF EXPR = "{ l.type EQ 'gif' }">		<MvASSIGN NAME = "l.result" VALUE = "{ gdImageGif( l.gd_image, l.filepath, l.location ) }">
	<MvELSEIF EXPR = "{ l.type EQ 'png' }">		<MvASSIGN NAME = "l.result" VALUE = "{ gdImagePng( l.gd_image, l.filepath, l.location ) }">
	<MvELSEIF EXPR = "{ l.type EQ 'webp' }">	<MvASSIGN NAME = "l.result" VALUE = "{ gdImageWebp( l.gd_image, l.filepath, l.location, g.Domain:img_qual ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00008', 'Unknown or unsupported image type' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.result LT 0 }">
		<MvASSIGN NAME = "l.gd_error_message"	VALUE = "{ gdLastError() }">

		<MvIF EXPR = "{ ISNULL l.gd_error_message }">														<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00014', 'Unable to write destination file' ) }">
		<MvELSEIF EXPR = "{ l.type EQ 'webp' AND ( 'unable to load function' CIN l.gd_error_message ) }">	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00055', 'Miva now supports WebP, however, an underlying dependency has not yet been installed.  Please contact support to have this prioritized on your account.' ) }">
		<MvELSE>																							<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00009', l.gd_error_message ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Image_gdSaveToMemory_Type" PARAMETERS = "gd_image var, type, buffer var" STANDARDOUTPUTLEVEL = "">
	<MvEVAL EXPR = "{ gdClearLastError() }">
	
	<MvIF EXPR = "{ l.type EQ 'jpg' }">			<MvASSIGN NAME = "l.result" VALUE = "{ gdImageJpegMem( l.gd_image, l.buffer, g.Domain:img_qual ) }">
	<MvELSEIF EXPR = "{ l.type EQ 'gif' }">		<MvASSIGN NAME = "l.result" VALUE = "{ gdImageGifMem( l.gd_image, l.buffer ) }">
	<MvELSEIF EXPR = "{ l.type EQ 'png' }">		<MvASSIGN NAME = "l.result" VALUE = "{ gdImagePngMem( l.gd_image, l.buffer ) }">
	<MvELSEIF EXPR = "{ l.type EQ 'webp' }">	<MvASSIGN NAME = "l.result" VALUE = "{ gdImageWebpMem( l.gd_image, l.buffer, g.Domain:img_qual ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00010', 'Unknown or unsupported image type' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.result LT 0 }">
		<MvASSIGN NAME = "l.gd_error_message"	VALUE = "{ gdLastError() }">

		<MvIF EXPR = "{ ISNULL l.gd_error_message }">														<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00015', 'Unable to write image to memory' ) }">
		<MvELSEIF EXPR = "{ l.type EQ 'webp' AND ( 'unable to load function' CIN l.gd_error_message ) }">	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00056', 'Miva now supports WebP, however, an underlying dependency has not yet been installed.  Please contact support to have this prioritized on your account.' ) }">
		<MvELSE>																							<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00011', l.gd_error_message ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Image_Dimensions_From_Header" PARAMETERS = "filepath, location, type, width var, height var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.type EQ 'gif' }">
		<MvIF EXPR = "{ ( file_read_bytes( l.filepath, l.location, 6, 4, l.dimensions ) EQ 4 ) }">
			<MvASSIGN NAME = "l.width" 	VALUE = "{ ( ( asciivalue( substring_var( l.dimensions, 2, 1 ) ) ) BITSL 8 ) BITOR ( asciivalue( substring_var( l.dimensions, 1, 1 ) ) ) }">
			<MvASSIGN NAME = "l.height" VALUE = "{ ( ( asciivalue( substring_var( l.dimensions, 4, 1 ) ) ) BITSL 8 ) BITOR ( asciivalue( substring_var( l.dimensions, 3, 1 ) ) ) }">
			
			<MvFUNCTIONRETURN VALUE = 1>			
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'png' }">
		<MvIF EXPR = "{ ( file_read_bytes( l.filepath, l.location, 16, 8, l.dimensions ) EQ 8 ) }">
			<MvASSIGN NAME = "l.width"	VALUE = "{ ( ( asciivalue( substring_var( l.dimensions, 1, 1 ) ) ) BITSL 24 ) 	BITOR
												   ( ( asciivalue( substring_var( l.dimensions, 2, 1 ) ) ) BITSL 16 ) 	BITOR
												   ( ( asciivalue( substring_var( l.dimensions, 3, 1 ) ) ) BITSL 8 ) 	BITOR
												   ( ( asciivalue( substring_var( l.dimensions, 4, 1 ) ) ) ) }">
			<MvASSIGN NAME = "l.height" VALUE = "{ ( ( asciivalue( substring_var( l.dimensions, 5, 1 ) ) ) BITSL 24 )	BITOR
												   ( ( asciivalue( substring_var( l.dimensions, 6, 1 ) ) ) BITSL 16 ) 	BITOR
												   ( ( asciivalue( substring_var( l.dimensions, 7, 1 ) ) ) BITSL 8 ) 	BITOR
												   ( ( asciivalue( substring_var( l.dimensions, 8, 1 ) ) ) ) }">
			
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'jpg' }">
		<MvIF EXPR = "{ Image_Dimensions_JPEG( l.filepath, l.location, l.width, l.height ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSEIF EXPR = "{ l.type EQ 'webp' }">
		<MvIF EXPR = "{ Image_Dimensions_WebP( l.filepath, l.location, l.width, l.height ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00046', 'Unknown or unsupported image type' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00047', 'Unable to determine image dimensions') }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_Dimensions_From_GD" PARAMETERS = "filepath, location, type, width var, height var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.gd_image"	VALUE = "{ Image_gdCreateFromFile_Type( l.type, l.filepath, l.location ) }">
	
	<MvIF EXPR = "{ l.gd_image LE 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.width"		VALUE = "{ gdImageSX( l.gd_image ) }">
	<MvASSIGN NAME = "l.height"		VALUE = "{ gdImageSY( l.gd_image ) }">
	<MvASSIGN NAME = "l.null"		VALUE = "{ gdImageDestroy( l.gd_image ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Image_Dimensions" PARAMETERS = "filepath, location, width var, height var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ Image_Type_From_Header( l.filepath, l.location, l.type ) }">
		<MvIF EXPR = "{ Image_Dimensions_From_Header( l.filepath, l.location, l.type, l.width, l.height ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ Image_Dimensions_From_GD( l.filepath, l.location, l.type, l.width, l.height ) }">
	<MvELSEIF EXPR = "{ Image_Type_From_Extension( l.filepath, l.type ) }">
		<MvFUNCTIONRETURN VALUE = "{ Image_Dimensions_From_GD( l.filepath, l.location, l.type, l.width, l.height ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00045', 'Unable to determine image file format' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_Dimensions_JPEG" PARAMETERS = "filepath, location, width var, height var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ file_read_bytes( l.filepath, l.location, 0, 6, l.binary ) LT 6 }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00023', 'File is not a valid image' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ substring_var( l.binary, 3, 1 ) NE asciichar( 255 ) }"> <MvCOMMENT> Check for FF </MvCOMMENT>
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00024', 'Invalid image, expected ff, found \'' $ Hex_Encode( substring_var( l.binary, 3, 1 ), 1 ) $ '\'' ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.buffer" VALUE = "{ 4 + ( ( asciivalue( substring_var( l.binary, 5, 1 ) ) BITSL 8 ) BITOR ( asciivalue( substring_var( l.binary, 6, 1 ) ) ) ) }">
	
	<MvWHILE EXPR = "{ file_read_bytes( l.filepath, l.location, l.buffer, 10, l.binary ) GT 0 }">
		<MvIF EXPR = "{ substring_var( l.binary, 1, 1 ) NE asciichar( 255 ) }"> <MvCOMMENT> Check for FF </MvCOMMENT>
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00025', 'Invalid image, expected ff, found \'' $ Hex_Encode( l.binary, 1 ) $ '\'' ) }">
		<MvELSEIF EXPR = "{ ( substring_var( l.binary, 2, 1 ) EQ asciichar( 192 ) ) OR
							( substring_var( l.binary, 2, 1 ) EQ asciichar( 194 ) ) }"> <MvCOMMENT> Check for C0 or C2 </MvCOMMENT>
			<MvASSIGN NAME = "l.width" 	VALUE = "{ ( asciivalue( substring_var( l.binary, 8, 1 ) ) BITSL 8 ) BITOR ( asciivalue( substring_var( l.binary, 9, 1 ) ) ) }">
			<MvASSIGN NAME = "l.height" VALUE = "{ ( asciivalue( substring_var( l.binary, 6, 1 ) ) BITSL 8 ) BITOR ( asciivalue( substring_var( l.binary, 7, 1 ) ) ) }">
			
			<MvFUNCTIONRETURN VALUE = 1>
		<MvELSE>
			<MvASSIGN NAME = "l.buffer"	VALUE = "{ l.buffer + 2 + ( ( asciivalue( substring_var( l.binary, 3, 1 ) ) BITSL 8 ) BITOR ( asciivalue( substring_var( l.binary, 4, 1 ) ) ) ) }">
		</MvIF>
	</MvWHILE>
	
	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00026', 'Missing proper markers' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_Dimensions_WebP" PARAMETERS = "filepath, location, width var, height var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ file_read_bytes( l.filepath, l.location, 0, 30, l.binary ) LT 0 }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00057', 'File is not a valid image' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.format" VALUE = "{ substring_var( l.binary, 9, 8 ) }">

	<MvIF EXPR = "{ l.format EQ 'WEBPVP8 ' }">
		<MvIF EXPR = "{ substring_var( l.binary, 24, 3 ) NE miva_hex_decode( '9d012a' ) }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00058', 'Invalid image, expected signature 0x9d012a' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.width"	VALUE = "{ ( ( asciivalue( substring_var( l.binary, 28, 1 ) ) BITSL 8 ) BITOR ( asciivalue( substring_var( l.binary, 27, 1 ) ) ) ) BITAND 0x3FFF }">
		<MvASSIGN NAME = "l.height"	VALUE = "{ ( ( asciivalue( substring_var( l.binary, 30, 1 ) ) BITSL 8 ) BITOR ( asciivalue( substring_var( l.binary, 29, 1 ) ) ) ) BITAND 0x3FFF }">

		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ l.format EQ 'WEBPVP8L' }">
		<MvIF EXPR = "{ substring_var( l.binary, 21, 1 ) NE miva_hex_decode( '2f' ) }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00059', 'Invalid image, expected signature 0x2f' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.width"	VALUE = "{ ( ( ( asciivalue( substring_var( l.binary, 23, 1 ) ) BITAND 0x3F ) BITSL 8 ) BITOR ( asciivalue( substring_var( l.binary, 22, 1 ) ) ) ) + 1 }">
		<MvASSIGN NAME = "l.height" VALUE = "{ ( ( ( asciivalue( substring_var( l.binary, 25, 1 ) ) BITAND 0xF ) BITSL 10 ) BITOR ( asciivalue( substring_var( l.binary, 24, 1 ) ) BITSL 2 ) BITOR ( ( asciivalue( substring_var( l.binary, 23, 1 ) ) BITAND 0xC0 ) BITSR 6 ) ) + 1 }">
		
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00060', 'Missing proper markers' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Image_ResizeIntoBoundingBox_gdImage" PARAMETERS = "source_gdimage var, max_width, max_height, output_gdimage var, output_width var, output_height var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.max_width"				VALUE = "{ int( l.max_width ) }">
	<MvASSIGN NAME = "l.max_height"				VALUE = "{ int( l.max_height ) }">

    <MvASSIGN NAME = "l.source_width"			VALUE = "{ gdImageSX( l.source_gdimage ) }">
	<MvASSIGN NAME = "l.source_height"			VALUE = "{ gdImageSY( l.source_gdimage ) }">
	<MvASSIGN NAME = "l.source_truecolor"		VALUE = "{ gdImageTrueColor( l.source_gdimage ) }">

	<MvASSIGN NAME = "l.x_ratio"				VALUE = "{ l.max_width / l.source_width }">
	<MvASSIGN NAME = "l.y_ratio"				VALUE = "{ l.max_height / l.source_height }">

	<MvIF EXPR = "{ l.x_ratio LT l.y_ratio }">
		<MvASSIGN NAME = "l.output_width"		VALUE = "{ l.max_width }">
		<MvASSIGN NAME = "l.output_height"		VALUE = "{ ( l.source_height * l.x_ratio ) ROUND 0 }">
	<MvELSE>
		<MvASSIGN NAME = "l.output_width"		VALUE = "{ ( l.source_width * l.y_ratio ) ROUND 0 }">
		<MvASSIGN NAME = "l.output_height"		VALUE = "{ l.max_height }">
	</MvIF>

	<MvCOMMENT>
	|
	| Prevent the ROUND operations above from rounding to a value greater than the maximum allowed
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.output_width GT l.max_width }">	<MvASSIGN NAME = "l.output_width"	VALUE = "{ l.max_width }">	</MvIF>
	<MvIF EXPR = "{ l.output_height GT l.max_height }">	<MvASSIGN NAME = "l.output_height"	VALUE = "{ l.max_height }">	</MvIF>

	<MvEVAL EXPR = "{ gdClearLastError() }">
	<MvASSIGN NAME = "l.gd_error"				VALUE = 1>

	<MvFOR COUNT = "{ 1 }">
		<MvIF EXPR = "{ l.source_truecolor }">			<MvASSIGN NAME = "l.output_gdimage" VALUE = "{ gdImageCreateTrueColor( l.output_width, l.output_height ) }">
		<MvELSE>										<MvASSIGN NAME = "l.output_gdimage"	VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ l.output_gdimage LE 0 }">		<MvASSIGN NAME = "l.output_gdimage" VALUE = "{ gdImageCreate( l.output_width, l.output_height ) }">								</MvIF>
		<MvIF EXPR = "{ l.output_gdimage LE 0 }">																															<MvFORSTOP>	</MvIF>

		<MvIF EXPR = "{ l.source_truecolor }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ gdImageSaveAlpha( l.output_gdimage, 1 ) }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ gdImageAlphaBlending( l.output_gdimage, 0 ) }">
		<MvELSE>
			<MvIF EXPR = "{ gdImagePaletteCopy( l.output_gdimage, l.source_gdimage ) LT 0 }">																				<MvFORSTOP>	</MvIF>

			<MvASSIGN NAME = "l.transparent"	VALUE = "{ gdImageGetTransparent( l.source_gdimage ) }">
			<MvIF EXPR = "{ l.transparent GE 0 }">
				<MvIF EXPR = "{ gdImageColorTransparent( l.output_gdimage, l.transparent ) LT 0 }">																			<MvFORSTOP>	</MvIF>
				<MvIF EXPR = "{ gdImageFill( l.output_gdimage, 0, 0, l.transparent ) LT 0 }">																				<MvFORSTOP>	</MvIF>
			</MvIF>
		</MvIF>

		<MvIF EXPR = "{ gdImageCopyResampled( l.output_gdimage, l.source_gdimage, 0, 0, 0, 0, l.output_width, l.output_height, l.source_width, l.source_height ) LT 0 }">
			<MvIF EXPR = "{ gdImageCopyResized( l.output_gdimage, l.source_gdimage, 0, 0, 0, 0, l.output_width, l.output_height, l.source_width, l.source_height ) LT 0 }">	<MvFORSTOP>	</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.gd_error"			VALUE = 0>
	</MvFOR>

	<MvIF EXPR = "{ l.gd_error }">
		<MvASSIGN NAME = "l.gd_error_message"	VALUE = "{ gdLastError() }">

		<MvIF EXPR = "{ ISNULL l.gd_error_message }">	<MvASSIGN NAME = "l.error" VALUE = "{ Error( 'MER-UTL-PUB-00016', 'Unable to resize image' ) }">
		<MvELSE>										<MvASSIGN NAME = "l.error" VALUE = "{ Error( 'MER-UTL-PUB-00012', l.gd_error_message ) }">
		</MvIF>

		<MvIF EXPR = "{ l.output_gdimage GT 0 }">
			<MvASSIGN NAME = "l.null"			VALUE = "{ gdImageDestroy( l.output_gdimage ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ l.error }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Image_ResizeIntoBoundingBox" PARAMETERS = "sourcefile_path, sourcefile_location, max_width, max_height, destfile_path, dest_location, output_width var, output_height var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Image_Type( l.sourcefile_path, l.sourcefile_location, l.sourcefile_type ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.source_gdimage"		VALUE = "{ Image_gdCreateFromFile_Type( l.sourcefile_type, l.sourcefile_path, l.sourcefile_location ) }">

	<MvIF EXPR = "{ l.source_gdimage LE 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.result"				VALUE = "{ Image_ResizeIntoBoundingBox_gdImage( l.source_gdimage, l.max_width, l.max_height, l.output_gdimage, l.output_width, l.output_height ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ gdImageDestroy( l.source_gdimage ) }">

	<MvIF EXPR = "{ NOT l.result }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.result"				VALUE = "{ Image_gdSaveToFile_Type( l.output_gdimage, l.sourcefile_type, l.destfile_path, l.dest_location ) }">
	<MvASSIGN NAME = "l.null"				VALUE = "{ gdImageDestroy( l.output_gdimage ) }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "GetBasehrefPath" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Return just the path in basehref (without the domain info)
	| For example if g.baseurl is "http://localhost:8000/mm5/", then return "/mm5/"
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.basehref_path"		VALUE = "">
	<MvIF EXPR = "{ g.Secure }">
		<MvASSIGN NAME = "l.basehref_path"	VALUE = "{ glosub( g.secure_baseurl, '\\', '/' ) }">
	<MvELSE>
		<MvASSIGN NAME = "l.basehref_path"	VALUE = "{ glosub( g.baseurl, '\\', '/' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.slashslash"			VALUE = "{ '//' CIN l.basehref_path }">
	<MvASSIGN NAME = "l.basehref_path"		VALUE = "{ substring( l.basehref_path, l.slashslash + 2, len( l.basehref_path ) ) }">
	<MvASSIGN NAME = "l.slash"				VALUE = "{ '/' CIN l.basehref_path }">
	<MvASSIGN NAME = "l.basehref_path"		VALUE = "{ substring( l.basehref_path, l.slash, len( l.basehref_path ) ) }">	

	<MvIF EXPR = "{ '/~' CIN l.basehref_path EQ 1 }">
		<MvASSIGN NAME = "l.basehref_path"      VALUE = "{ substring( l.basehref_path, 3, len( l.basehref_path ) ) }">
		<MvASSIGN NAME = "l.slash"              VALUE = "{ '/' CIN l.basehref_path }">
		<MvASSIGN NAME = "l.basehref_path"      VALUE = "{ substring( l.basehref_path, l.slash, len( l.basehref_path ) ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.basehref_path }">
</MvFUNCTION>

<MvFUNCTION NAME = "OrderItem_Build_Attribute_Lookup" PARAMETERS = "orderoptions var, orderoption_count, numeric_lookup var, attribute_hash var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.orderoption" ARRAY = "l.orderoptions" COUNT = "{ l.orderoption_count }">
		<MvASSIGNARRAY NAME = "l.attribute_hash" VALUE = 1>
			<MvMEMBER NAME = "{ l.orderoption:attr_code }">
			<MvMEMBER NAME = "exists">
		</MvASSIGNARRAY>

		<MvASSIGNARRAY NAME = "l.attribute_hash" VALUE = "{ l.orderoption:option_id }">
			<MvMEMBER NAME = "{ l.orderoption:attr_code }">
			<MvMEMBER NAME = "option_id">
		</MvASSIGNARRAY>

		<MvASSIGNARRAY NAME = "l.attribute_hash" VALUE = "{ l.orderoption:opt_code }">
			<MvMEMBER NAME = "{ l.orderoption:attr_code }">
			<MvMEMBER NAME = "opt_code">
		</MvASSIGNARRAY>

		<MvASSIGNARRAY NAME = "l.attribute_hash" VALUE = "{ l.orderoption:data $ l.orderoption:data_long }">
			<MvMEMBER NAME = "{ l.orderoption:attr_code }">
			<MvMEMBER NAME = "data">
		</MvASSIGNARRAY>

		<MvIF EXPR = "{ ( l.orderoption:attr_id GT 0 ) AND ( l.orderoption:attmpat_id GE 0 ) }">
			<MvASSIGNARRAY NAME = "l.numeric_lookup" VALUE = 1>
				<MvDIMENSION INDEX = "{ l.orderoption:attr_id }">
				<MvDIMENSION INDEX = "{ l.orderoption:attmpat_id + 1 }">
				<MvMEMBER NAME = "exists">
			</MvASSIGNARRAY>

			<MvASSIGNARRAY NAME = "l.numeric_lookup" VALUE = "{ l.orderoption:option_id }">
				<MvDIMENSION INDEX = "{ l.orderoption:attr_id }">
				<MvDIMENSION INDEX = "{ l.orderoption:attmpat_id + 1 }">
				<MvMEMBER NAME = "option_id">
			</MvASSIGNARRAY>

			<MvASSIGNARRAY NAME = "l.numeric_lookup" VALUE = "{ l.orderoption:opt_code }">
				<MvDIMENSION INDEX = "{ l.orderoption:attr_id }">
				<MvDIMENSION INDEX = "{ l.orderoption:attmpat_id + 1 }">
				<MvMEMBER NAME = "opt_code">
			</MvASSIGNARRAY>

			<MvASSIGNARRAY NAME = "l.numeric_lookup" VALUE = "{ l.orderoption:data $ l.orderoption:data_long }">
				<MvDIMENSION INDEX = "{ l.orderoption:attr_id }">
				<MvDIMENSION INDEX = "{ l.orderoption:attmpat_id + 1 }">
				<MvMEMBER NAME = "data">
			</MvASSIGNARRAY>
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "OrderItem_DetermineVariant" PARAMETERS = "orderitem var, product var, variant_id var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Product_Load_Code_WithRuntimeInventory( l.orderitem:code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.product:id"				VALUE = 0>
		<MvASSIGN NAME = "l.variant_id"				VALUE = 0>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.product_attribute_count"	VALUE = "{ [ g.Library_Filename_DB ].AttributeList_Load_Product( l.product:id, l.product_attributes ) }">
	<MvASSIGN NAME = "l.orderoption_count"			VALUE = "{ [ g.Library_Filename_DB ].OrderOptionList_Load_Line( l.orderitem:line_id, l.orderoptions ) }">

	<MvFUNCTIONRETURN VALUE = "{ OrderItem_DetermineVariant_LowLevel( l.product, l.product_attributes, l.product_attribute_count, l.orderoptions, l.orderoption_count, l.variant_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OrderItem_DetermineVariant_WithOptions" PARAMETERS = "orderitem var, orderoptions var, orderoption_count, product var, variant_id var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Product_Load_Code_WithRuntimeInventory( l.orderitem:code, l.product ) }">
		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.product:id"				VALUE = 0>
		<MvASSIGN NAME = "l.variant_id"				VALUE = 0>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.product_attribute_count"	VALUE = "{ [ g.Library_Filename_DB ].AttributeList_Load_Product( l.product:id, l.product_attributes ) }">

	<MvFUNCTIONRETURN VALUE = "{ OrderItem_DetermineVariant_LowLevel( l.product, l.product_attributes, l.product_attribute_count, l.orderoptions, l.orderoption_count, l.variant_id ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "OrderItem_DetermineVariant_LowLevel" PARAMETERS = "product var, product_attributes var, product_attribute_count, orderoptions var, orderoption_count, variant_id var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.product:id EQ 0 }">
		<MvASSIGN NAME = "l.variant_id"	VALUE = 0>
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.inventory_attribute_count"	VALUE = 0>
	<MvASSIGN NAME = "l.product_attribute_pos"		VALUE = 1>

	<MvEVAL EXPR = "{ OrderItem_Build_Attribute_Lookup( l.orderoptions, l.orderoption_count, l.numeric_lookup, l.attribute_hash ) }">

	<MvWHILE EXPR = "{ l.product_attribute_pos LE l.product_attribute_count }">
		<MvREFERENCEARRAY NAME = "l.product_attribute" VARIABLE = "l.product_attributes">
			<MvDIMENSION INDEX = "{ l.product_attribute_pos }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.product_attribute:type EQ 'template' }">
			<MvASSIGN NAME = "l.template_attribute_pos"		VALUE = 1>
			<MvASSIGN NAME = "l.template_attribute_count"	VALUE = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplateAttrList_Load_Template( l.product_attribute:attemp_id, l.template_attributes ) }">

			<MvWHILE EXPR = "{ l.template_attribute_pos LE l.template_attribute_count }">
				<MvREFERENCEARRAY NAME = "l.template_attribute" VARIABLE = "l.template_attributes">
					<MvDIMENSION INDEX = "{ l.template_attribute_pos }">
				</MvREFERENCEARRAY>

				<MvIF EXPR = "{ l.template_attribute:inventory }">
					<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.numeric_lookup">
						<MvDIMENSION INDEX = "{ l.product_attribute:id }">
						<MvDIMENSION INDEX = "{ l.template_attribute:id + 1 }">
					</MvREFERENCEARRAY>

					<MvIF EXPR = "{ NOT l.value:exists }">
						<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.attribute_hash">
							<MvMEMBER NAME = "{ l.template_attribute:code }">
						</MvREFERENCEARRAY>
					</MvIF>

					<MvIF EXPR = "{ ( l.template_attribute:type EQ 'radio' ) OR
									( l.template_attribute:type EQ 'select' ) OR
									( l.template_attribute:type EQ 'swatch-select' ) }">
						<MvIF EXPR = "{ l.value:exists }">
							<MvIF EXPR = "{ [ g.Module_Feature_ATT_DB ].AttributeTemplateOption_Load_Code( l.template_attribute:id, l.value:opt_code, l.option ) }">
								<MvASSIGN NAME = "l.inventory_attribute_count"																	VALUE = "{ l.inventory_attribute_count + 1 }">
								<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"			VALUE = "{ l.product_attribute:id }">
								<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"		VALUE = "{ l.template_attribute:id }">
								<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"		VALUE = "{ l.option:id }">
							<MvELSE>
								<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Error_Is_EOF() }">
									<MvFUNCTIONRETURN VALUE = 0>
								</MvIF>

								<MvIF EXPR = "{ l.value:option_id }">
									<MvASSIGN NAME = "l.inventory_attribute_count"																VALUE = "{ l.inventory_attribute_count + 1 }">
									<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"		VALUE = "{ l.product_attribute:id }">
									<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"	VALUE = "{ l.template_attribute:id }">
									<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"	VALUE = "{ l.value:option_id }">
								</MvIF>
							</MvIF>
						</MvIF>
					<MvELSEIF EXPR = "{ ( l.template_attribute:type EQ 'text' ) OR
										( l.template_attribute:type EQ 'memo' ) OR
										( l.template_attribute:type EQ 'checkbox' ) }">
						<MvIF EXPR = "{ l.value:exists }">
							<MvASSIGN NAME = "l.inventory_attribute_count"																		VALUE = "{ l.inventory_attribute_count + 1 }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"				VALUE = "{ l.product_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"			VALUE = "{ l.template_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"			VALUE = 1>
						<MvELSE>
							<MvASSIGN NAME = "l.inventory_attribute_count"																		VALUE = "{ l.inventory_attribute_count + 1 }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"				VALUE = "{ l.product_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"			VALUE = "{ l.template_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"			VALUE = 0>
						</MvIF>
					</MvIF>
				</MvIF>

				<MvASSIGN NAME = "l.template_attribute_pos"	VALUE = "{ l.template_attribute_pos + 1 }">
			</MvWHILE>
		<MvELSEIF EXPR = "{ l.product_attribute:inventory }">
			<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.attribute_hash">
				<MvMEMBER NAME = "{ l.product_attribute:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT l.value:exists }">
				<MvREFERENCEARRAY NAME = "l.value" VARIABLE = "l.numeric_lookup">
					<MvDIMENSION INDEX = "{ l.product_attribute:id }">
					<MvDIMENSION INDEX = 1>
				</MvREFERENCEARRAY>
			</MvIF>

			<MvIF EXPR = "{ ( l.product_attribute:type EQ 'radio' ) OR
							( l.product_attribute:type EQ 'select' ) OR
							( l.product_attribute:type EQ 'swatch-select' ) }">
				<MvIF EXPR = "{ l.value:exists }">
					<MvIF EXPR = "{ [ g.Library_Filename_DB ].Option_Load_Code( l.product_attribute:id, l.value:opt_code, l.option ) }">
						<MvASSIGN NAME = "l.inventory_attribute_count"																			VALUE = "{ l.inventory_attribute_count + 1 }">
						<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"					VALUE = "{ l.product_attribute:id }">
						<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"				VALUE = 0>
						<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"				VALUE = "{ l.option:id }">
					<MvELSE>
						<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Error_Is_EOF() }">
							<MvFUNCTIONRETURN VALUE = 0>
						</MvIF>

						<MvIF EXPR = "{ l.value:option_id }">
							<MvASSIGN NAME = "l.inventory_attribute_count"																		VALUE = "{ l.inventory_attribute_count + 1 }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"				VALUE = "{ l.product_attribute:id }">
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"			VALUE = 0>
							<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"			VALUE = "{ l.value:option_id }">
						</MvIF>
					</MvIF>
				</MvIF>
			<MvELSEIF EXPR = "{ ( l.product_attribute:type EQ 'text' ) OR
								( l.product_attribute:type EQ 'memo' ) OR
								( l.product_attribute:type EQ 'checkbox' ) }">
				<MvIF EXPR = "{ l.value:exists }">
					<MvASSIGN NAME = "l.inventory_attribute_count"																				VALUE = "{ l.inventory_attribute_count + 1 }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"						VALUE = "{ l.product_attribute:id }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"					VALUE = 0>
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"					VALUE = 1>
				<MvELSE>
					<MvASSIGN NAME = "l.inventory_attribute_count"																				VALUE = "{ l.inventory_attribute_count + 1 }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attr_id"						VALUE = "{ l.product_attribute:id }">
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "attmpat_id"					VALUE = 0>
					<MvASSIGN NAME = "l.inventory_attributes" INDEX = "{ l.inventory_attribute_count }" MEMBER = "option_id"					VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.product_attribute_pos"			VALUE = "{ l.product_attribute_pos + 1 }">
	</MvWHILE>

	<MvASSIGN NAME = "l.variant_id"							VALUE = 0>

	<MvIF EXPR = "{ l.inventory_attribute_count }">
		<MvIF EXPR = "{ [ g.Library_Filename_DB ].ProductVariant_Load_Attributes( l.product:id, l.inventory_attributes, l.inventory_attribute_count, l.productvariant ) }">
			<MvASSIGN NAME = "l.variant_id"					VALUE = "{ l.productvariant:variant_id }">
		<MvELSEIF EXPR = "{ NOT [ g.Library_Filename_DB ].Error_Is_EOF() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Decimal_To_Binary" PARAMETERS = "decimal" STANDARDOUTPUTLEVEL = "">	
	<MvIF EXPR = "{ l.decimal EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
	
	<MvASSIGN NAME = "l.binary" VALUE = "">

	<MvWHILE EXPR = "{ l.decimal GT 0 }">
		<MvIF EXPR = "{ ( l.decimal MOD 2 ) EQ 0 }">	<MvASSIGN NAME = "l.binary" VALUE = "{ '0' $ l.binary }">
		<MvELSE>										<MvASSIGN NAME = "l.binary" VALUE = "{ '1' $ l.binary }">
		</MvIF>
		
		<MvASSIGN NAME = "l.decimal" VALUE = "{ int( l.decimal / 2 ) }">
	</MvWHILE>
	
	<MvFUNCTIONRETURN VALUE = "{ l.binary }">
</MvFUNCTION>

<MvFUNCTION NAME = "Binary_To_Decimal" PARAMETERS = "binary" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.decimal"		VALUE = 0>
	<MvASSIGN NAME = "l.pos"			VALUE = 0>
	<MvASSIGN NAME = "l.len"			VALUE = "{ len_var( l.binary ) }">

	<MvWHILE EXPR = "{ l.pos LT l.len }">
		<MvASSIGN NAME = "l.bit"		VALUE = "{ substring_var( l.binary, l.pos + 1, 1 ) }">
		<MvASSIGN NAME = "l.decimal"	VALUE = "{ l.decimal + ( l.bit * ( 2 POW ( l.len - l.pos - 1 ) ) ) }">
		<MvASSIGN NAME = "l.pos"		VALUE = "{ l.pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = "{ l.decimal }">
</MvFUNCTION>

<MvFUNCTION NAME = "Hex_To_Binary" PARAMETERS = "hex" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.binary" VALUE = "">
	
	<MvFOR INDEX = "l.pos" COUNT = "{ len_var( l.hex ) }">
		<MvASSIGN NAME = "l.char" VALUE = "{ tolower( substring_var( l.hex, l.pos, 1 ) ) }">
		
		<MvIF EXPR = "{ l.char EQ 0 }">			<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '0000' }">
		<MvELSEIF EXPR = "{ l.char EQ 1 }">		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '0001' }">
		<MvELSEIF EXPR = "{ l.char EQ 2 }">		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '0010' }">
		<MvELSEIF EXPR = "{ l.char EQ 3 }">		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '0011' }">
		<MvELSEIF EXPR = "{ l.char EQ 4 }">		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '0100' }">
		<MvELSEIF EXPR = "{ l.char EQ 5 }">		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '0101' }">
		<MvELSEIF EXPR = "{ l.char EQ 6 }">		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '0110' }">
		<MvELSEIF EXPR = "{ l.char EQ 7 }">		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '0111' }">
		<MvELSEIF EXPR = "{ l.char EQ 8 }">		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '1000' }">
		<MvELSEIF EXPR = "{ l.char EQ 9 }">		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '1001' }">
		<MvELSEIF EXPR = "{ l.char EQ 'a' }">	<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '1010' }">
		<MvELSEIF EXPR = "{ l.char EQ 'b' }">	<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '1011' }">
		<MvELSEIF EXPR = "{ l.char EQ 'c' }">	<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '1100' }">
		<MvELSEIF EXPR = "{ l.char EQ 'd' }">	<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '1101' }">
		<MvELSEIF EXPR = "{ l.char EQ 'e' }">	<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '1110' }">
		<MvELSEIF EXPR = "{ l.char EQ 'f' }">	<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ '1111' }">
		</MvIF>
	</MvFOR>
	
	<MvFUNCTIONRETURN VALUE = "{ l.binary }">
</MvFUNCTION>

<MvFUNCTION NAME = "IPv4_Invalid_Binary" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ padl( '', 32, '0' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "IPv6_Invalid_Binary" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ padl( '', 128, '0' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "IPv4_To_Binary" PARAMETERS = "ip" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.ip" 			VALUE = "{ gettoken( l.ip, '/', 1 ) }">
	<MvASSIGN NAME = "l.period_count" 	VALUE = "{ SplitString( l.ip, '.', l.bytes ) }">

	<MvIF EXPR = "{ l.period_count NE 4 }">
		<MvFUNCTIONRETURN VALUE = "{ IPv4_Invalid_Binary() }">
	</MvIF>
	
	<MvFOREACH ITERATOR = "l.byte" ARRAY = "l.bytes" COUNT = "{ l.period_count }">
		<MvIF EXPR = "{ ( NOT isdigit( l.byte ) ) OR
						( l.byte LT 0 ) OR
						( l.byte GT 255 ) }">
			<MvFUNCTIONRETURN VALUE = "{ IPv4_Invalid_Binary() }">
		</MvIF>

		<MvASSIGN NAME = "l.binary" VALUE = "{ l.binary $ padl( Decimal_To_Binary( l.byte ), 8, 0 ) }">
	</MvFOREACH>
	
	<MvFUNCTIONRETURN VALUE = "{ l.binary }">
</MvFUNCTION>

<MvFUNCTION NAME = "IPv6_To_Binary" PARAMETERS = "ip" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.ip" 				VALUE = "{ gettoken( l.ip, '/', 1 ) }">
	<MvASSIGN NAME = "l.ip" 				VALUE = "{ gettoken( l.ip, '%', 1 ) }">
	<MvASSIGN NAME = "l.single_colon_count" VALUE = "{ len_var( l.ip ) - len( glosub( l.ip, ':', '' ) ) }">
	<MvASSIGN NAME = "l.double_colon_count" VALUE = "{ SplitString( l.ip, '::', l.double_colon_groups ) }">
	
	<MvFOREACH ITERATOR = "l.double_colon_group" ARRAY = "l.double_colon_groups" INDEX = "l.pos" COUNT = "{ l.double_colon_count }">
		<MvFOREACH ITERATOR = "l.group" ARRAY = "l.groups" COUNT = "{ SplitString( l.double_colon_group, ':', l.groups ) }">
			<MvIF EXPR = "{ ( len_var( l.group ) GT 4 ) OR
							( NOT isxdigit( l.group ) ) }">
				<MvFUNCTIONRETURN VALUE = "{ IPv6_Invalid_Binary() }">
			</MvIF>
			
			<MvASSIGN NAME = "l.split_binary" INDEX = "{ l.pos }" VALUE = "{ l.split_binary[ l.pos ] $ padl( Hex_To_Binary( l.group ), 16, 0 ) }">
		</MvFOREACH>
	</MvFOREACH>
	
	<MvIF EXPR = "{ l.double_colon_count EQ 1 }">
		<MvIF EXPR = "{ l.single_colon_count NE 7 }">
			<MvFUNCTIONRETURN VALUE = "{ IPv6_Invalid_Binary() }">
		</MvIF>
		
		<MvASSIGN NAME = "l.binary" VALUE = "{ l.split_binary[ 1 ] }">
	<MvELSE>
		<MvIF EXPR = "{ l.single_colon_count GT 7 }">
			<MvFUNCTIONRETURN VALUE = "{ IPv6_Invalid_Binary() }">
		</MvIF>

		<MvASSIGN NAME = "l.binary" VALUE = "{ l.split_binary[ 1 ] $ padl( '', 128 - len_var( l.split_binary[ 1 ] ) - len_var( l.split_binary[ 2 ] ), '0' ) $ l.split_binary[ 2 ] }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.binary }">
</MvFUNCTION>

<MvFUNCTION NAME = "Validate_CIDR" PARAMETERS = "version, routing_prefix" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.version EQ 4 }">
		<MvIF EXPR = "{ l.routing_prefix GE 0 AND l.routing_prefix LE 32 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	<MvELSEIF EXPR = "{ l.version EQ 6 }">
		<MvIF EXPR = "{ l.routing_prefix GE 0 AND l.routing_prefix LE 128 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "IP_In_CIDR_IP_List" PARAMETERS = "remote_address, cidrs" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.ip_version" VALUE = "{ miva_ip_version( l.remote_address ) }">

	<MvIF EXPR = "{ l.ip_version EQ 4 }">		<MvASSIGN NAME = "l.remote_ip_binary" VALUE = "{ IPv4_To_Binary( l.remote_address ) }">
	<MvELSEIF EXPR = "{ l.ip_version EQ 6 }">	<MvASSIGN NAME = "l.remote_ip_binary" VALUE = "{ IPv6_To_Binary( l.remote_address ) }">
	<MvELSE>									<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFOREACH ITERATOR = "l.entry" ARRAY = "l.entries" COUNT = "{ miva_splitstring( l.cidrs, ',', l.entries, 'trim,noempty' ) }">
		<MvIF EXPR = "{ NOT Parse_CIDR_Components( l.entry, l.components ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.components:version EQ 4 AND l.ip_version EQ 4 }">
			<MvIF EXPR = "{ NOT Validate_CIDR( 4, l.components:routing_prefix ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.remote_address_bits" 	VALUE = "{ substring_var( l.remote_ip_binary, 1, l.components:routing_prefix ) }">
			<MvASSIGN NAME = "l.current_address_bits" 	VALUE = "{ substring_var( IPv4_To_Binary( l.components:ip ), 1, l.components:routing_prefix ) }">
		<MvELSEIF EXPR = "{ l.components:version EQ 6 AND l.ip_version EQ 6 }">
			<MvIF EXPR = "{ NOT Validate_CIDR( 6, l.components:routing_prefix ) }">
				<MvFOREACHCONTINUE>
			</MvIF>
			
			<MvASSIGN NAME = "l.remote_address_bits" 	VALUE = "{ substring_var( l.remote_ip_binary, 1, l.components:routing_prefix ) }">
			<MvASSIGN NAME = "l.current_address_bits" 	VALUE = "{ substring_var( IPv6_To_Binary( l.components:ip ), 1, l.components:routing_prefix ) }">
		<MvELSE>
			<MvFOREACHCONTINUE>
		</MvIF>
			
		<MvIF EXPR = "{ strcmp( l.remote_address_bits, l.current_address_bits ) EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>
	
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "SortCustomFieldList" PARAMETERS = "customfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_sort( l.customfields, 'SortCustomFieldList_Callback', l.null ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SortCustomFieldList_Callback" PARAMETERS = "left var, right var, data var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.left_name"	VALUE = "{ tolower( l.left:name ) }">
	<MvASSIGN NAME = "l.right_name"	VALUE = "{ tolower( l.right:name ) }">

	<MvIF EXPR = "{ l.left_name LT l.right_name }">		<MvFUNCTIONRETURN VALUE = -1>
	<MvELSEIF EXPR = "{ l.left_name GT l.right_name }">	<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ProductCustomFieldList_Load" PARAMETERS = "customfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customfields"						VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"					VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" INDEX = "l.module_pos" COUNT = "{ [ g.Library_Filename_DB ].StoreModuleList_Load_Features_Cached( 'fields_prod', l.modules ) }">
		<MvASSIGN NAME = "l.null"							VALUE = "{ [ g.Library_Filename_DB ].Module_Load_Features_Cached( l.module ) }">
		<MvASSIGN NAME = "l.module_fields"					VALUE = "">

		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Product_Fields( l.module, l.module_fields ) }">
			<MvREFERENCEARRAY NAME = "l.customfield"		VARIABLE = "l.customfields">
				<MvDIMENSION INDEX = "{ ++l.customfield_count }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.customfield:module"	VARIABLE = "l.modules">
				<MvDIMENSION INDEX = "{ l.module_pos }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.customfield:code"			VALUE = "{ l.module_field:code }">
			<MvASSIGN NAME = "l.customfield:name"			VALUE = "{ l.module_field:name }">
			<MvASSIGN NAME = "l.customfield:type"			VALUE = "text">
			<MvASSIGN NAME = "l.customfield:choices"		VALUE = "">

			<MvIF EXPR = "{ l.module_field:public }">	<MvASSIGN NAME = "l.customfield:public" VALUE = 1>
			<MvELSE>									<MvASSIGN NAME = "l.customfield:public" VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.module_field:readonly }">	<MvASSIGN NAME = "l.customfield:readonly" VALUE = 1>
			<MvELSE>									<MvASSIGN NAME = "l.customfield:readonly" VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.module:api_ver GE 9.07 }">
				<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Product_Field_Capabilities( l.module, l.customfield:code, l.customfield:capabilities ) }">

				<MvIF EXPR = "{ NOT ISNULL l.module_field:type }">
					<MvASSIGN NAME = "l.customfield:type"	VALUE = "{ l.module_field:type }">

					<MvIF EXPR = "{ l.customfield:type EQ 'choice' }">
						<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Product_Field_Choices( l.module, l.customfield:code, l.customfield:choices ) }">
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvEVAL EXPR = "{ SortCustomFieldList( l.customfields ) }">
	<MvFUNCTIONRETURN VALUE = "{ l.customfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "ProductCustomFieldList_Load_Facets" PARAMETERS = "customfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customfields"						VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"					VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" INDEX = "l.module_pos" COUNT = "{ [ g.Library_Filename_DB ].StoreModuleList_Load_Features_Cached( 'fields_prod', l.modules ) }">
		<MvASSIGN NAME = "l.module_fields"					VALUE = "">

		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Product_Fields( l.module, l.module_fields ) }">
			<MvIF EXPR = "{ NOT l.module_field:facet }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvREFERENCEARRAY NAME = "l.customfield"		VARIABLE = "l.customfields">
				<MvDIMENSION INDEX = "{ ++l.customfield_count }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.customfield:code"			VALUE = "{ l.module_field:code }">
			<MvASSIGN NAME = "l.customfield:name"			VALUE = "{ l.module_field:name }">
			<MvASSIGN NAME = "l.customfield:module"			VALUE = "{ l.module:code }">

			<MvIF EXPR = "{ l.module:api_ver GE 9.07 }">
				<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Product_Field_Capabilities( l.module, l.customfield:code, l.customfield:capabilities ) }">

				<MvIF EXPR = "{ NOT ISNULL l.module_field:type }">
					<MvASSIGN NAME = "l.customfield:type"	VALUE = "{ l.module_field:type }">

					<MvIF EXPR = "{ l.customfield:type EQ 'choice' }">
						<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Product_Field_Choices( l.module, l.customfield:code, l.customfield:choices ) }">
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvEVAL EXPR = "{ SortCustomFieldList( l.customfields ) }">
	<MvFUNCTIONRETURN VALUE = "{ l.customfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "CategoryCustomFieldList_Load" PARAMETERS = "customfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customfields"						VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"					VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" INDEX = "l.module_pos" COUNT = "{ [ g.Library_Filename_DB ].StoreModuleList_Load_Features_Cached( 'fields_cat', l.modules ) }">
		<MvASSIGN NAME = "l.null"							VALUE = "{ [ g.Library_Filename_DB ].Module_Load_Features_Cached( l.module ) }">
		<MvASSIGN NAME = "l.module_fields"					VALUE = "">

		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Category_Fields( l.module, l.module_fields ) }">
			<MvREFERENCEARRAY NAME = "l.customfield"		VARIABLE = "l.customfields">
				<MvDIMENSION INDEX = "{ ++l.customfield_count }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.customfield:module"	VARIABLE = "l.modules">
				<MvDIMENSION INDEX = "{ l.module_pos }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.customfield:code"			VALUE = "{ l.module_field:code }">
			<MvASSIGN NAME = "l.customfield:name"			VALUE = "{ l.module_field:name }">
			<MvASSIGN NAME = "l.customfield:type"			VALUE = "text">
			<MvASSIGN NAME = "l.customfield:choices"		VALUE = "">

			<MvIF EXPR = "{ l.module_field:public }">	<MvASSIGN NAME = "l.customfield:public" VALUE = 1>
			<MvELSE>									<MvASSIGN NAME = "l.customfield:public" VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.module_field:readonly }">	<MvASSIGN NAME = "l.customfield:readonly" VALUE = 1>
			<MvELSE>									<MvASSIGN NAME = "l.customfield:readonly" VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.module:api_ver GE 9.07 }">
				<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Category_Field_Capabilities( l.module, l.customfield:code, l.customfield:capabilities ) }">

				<MvIF EXPR = "{ NOT ISNULL l.module_field:type }">
					<MvASSIGN NAME = "l.customfield:type"	VALUE = "{ l.module_field:type }">

					<MvIF EXPR = "{ l.customfield:type EQ 'choice' }">
						<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Category_Field_Choices( l.module, l.customfield:code, l.customfield:choices ) }">
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvEVAL EXPR = "{ SortCustomFieldList( l.customfields ) }">
	<MvFUNCTIONRETURN VALUE = "{ l.customfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "CustomerCustomFieldList_Load" PARAMETERS = "customfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customfields"						VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"					VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" INDEX = "l.module_pos" COUNT = "{ [ g.Library_Filename_DB ].StoreModuleList_Load_Features_Cached( 'fields_cust', l.modules ) }">
		<MvASSIGN NAME = "l.module_fields"					VALUE = "">

		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Customer_Fields( l.module, l.module_fields ) }">
			<MvREFERENCEARRAY NAME = "l.customfield"		VARIABLE = "l.customfields">
				<MvDIMENSION INDEX = "{ ++l.customfield_count }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.customfield:module"	VARIABLE = "l.modules">
				<MvDIMENSION INDEX = "{ l.module_pos }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.customfield:code"			VALUE = "{ l.module_field:code }">
			<MvASSIGN NAME = "l.customfield:name"			VALUE = "{ l.module_field:name }">
			<MvASSIGN NAME = "l.customfield:type"			VALUE = "text">
			<MvASSIGN NAME = "l.customfield:choices"		VALUE = "">

			<MvIF EXPR = "{ l.module_field:public }">	<MvASSIGN NAME = "l.customfield:public" VALUE = 1>
			<MvELSE>									<MvASSIGN NAME = "l.customfield:public" VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.module_field:readonly }">	<MvASSIGN NAME = "l.customfield:readonly" VALUE = 1>
			<MvELSE>									<MvASSIGN NAME = "l.customfield:readonly" VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.module:api_ver GE 9.07 }">
				<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Customer_Field_Capabilities( l.module, l.customfield:code, l.customfield:capabilities ) }">

				<MvIF EXPR = "{ NOT ISNULL l.module_field:type }">
					<MvASSIGN NAME = "l.customfield:type"	VALUE = "{ l.module_field:type }">

					<MvIF EXPR = "{ l.customfield:type EQ 'choice' }">
						<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Customer_Field_Choices( l.module, l.customfield:code, l.customfield:choices ) }">
					</MvIF>
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvEVAL EXPR = "{ SortCustomFieldList( l.customfields ) }">
	<MvFUNCTIONRETURN VALUE = "{ l.customfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "OrderCustomFieldList_Load" PARAMETERS = "customfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customfields"					VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"				VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" INDEX = "l.module_pos" COUNT = "{ [ g.Library_Filename_DB ].StoreModuleList_Load_Features_Cached( 'fields_ordr', l.modules ) }">
		<MvASSIGN NAME = "l.module_fields"				VALUE = "">

		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Order_Fields( l.module, l.module_fields ) }">
			<MvREFERENCEARRAY NAME = "l.customfield" VARIABLE = "l.customfields">
				<MvDIMENSION INDEX = "{ ++l.customfield_count }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.customfield:module" VARIABLE = "l.modules">
				<MvDIMENSION INDEX = "{ l.module_pos }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.customfield:code"		VALUE = "{ l.module_field:code }">
			<MvASSIGN NAME = "l.customfield:name"		VALUE = "{ l.module_field:name }">
			<MvASSIGN NAME = "l.customfield:type"		VALUE = "text">
			<MvASSIGN NAME = "l.customfield:choices"	VALUE = "">

			<MvIF EXPR = "{ l.module_field:public }">	<MvASSIGN NAME = "l.customfield:public" VALUE = 1>
			<MvELSE>									<MvASSIGN NAME = "l.customfield:public" VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.module_field:readonly }">	<MvASSIGN NAME = "l.customfield:readonly" VALUE = 1>
			<MvELSE>									<MvASSIGN NAME = "l.customfield:readonly" VALUE = 0>
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Order_Field_Capabilities( l.module, l.customfield:code, l.customfield:capabilities ) }">

			<MvIF EXPR = "{ NOT ISNULL l.module_field:type }">
				<MvASSIGN NAME = "l.customfield:type"	VALUE = "{ l.module_field:type }">

				<MvIF EXPR = "{ l.customfield:type EQ 'choice' }">
					<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Order_Field_Choices( l.module, l.customfield:code, l.customfield:choices ) }">
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvEVAL EXPR = "{ SortCustomFieldList( l.customfields ) }">
	<MvFUNCTIONRETURN VALUE = "{ l.customfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "BoxCustomFieldList_Load" PARAMETERS = "customfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customfields"					VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"				VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" INDEX = "l.module_pos" COUNT = "{ [ g.Library_Filename_DB ].StoreModuleList_Load_Features_Cached( 'fields_box', l.modules ) }">
		<MvASSIGN NAME = "l.module_fields"				VALUE = "">

		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Box_Fields( l.module, l.module_fields ) }">
			<MvREFERENCEARRAY NAME = "l.customfield" VARIABLE = "l.customfields">
				<MvDIMENSION INDEX = "{ ++l.customfield_count }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.customfield:module" VARIABLE = "l.modules">
				<MvDIMENSION INDEX = "{ l.module_pos }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.customfield:code"		VALUE = "{ l.module_field:code }">
			<MvASSIGN NAME = "l.customfield:name"		VALUE = "{ l.module_field:name }">
			<MvASSIGN NAME = "l.customfield:type"		VALUE = "text">
			<MvASSIGN NAME = "l.customfield:choices"	VALUE = "">

			<MvIF EXPR = "{ l.module_field:readonly }">	<MvASSIGN NAME = "l.customfield:readonly" VALUE = 1>
			<MvELSE>									<MvASSIGN NAME = "l.customfield:readonly" VALUE = 0>
			</MvIF>

			<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Box_Field_Capabilities( l.module, l.customfield:code, l.customfield:capabilities ) }">

			<MvIF EXPR = "{ NOT ISNULL l.module_field:type }">
				<MvASSIGN NAME = "l.customfield:type"	VALUE = "{ l.module_field:type }">

				<MvIF EXPR = "{ l.customfield:type EQ 'choice' }">
					<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Box_Field_Choices( l.module, l.customfield:code, l.customfield:choices ) }">
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvEVAL EXPR = "{ SortCustomFieldList( l.customfields ) }">
	<MvFUNCTIONRETURN VALUE = "{ l.customfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "PageCustomFieldList_Load" PARAMETERS = "customfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.customfields"					VALUE = "">
	<MvASSIGN NAME = "l.customfield_count"				VALUE = 0>

	<MvFOREACH ITERATOR = "l.module" ARRAY = "l.modules" INDEX = "l.module_pos" COUNT = "{ [ g.Library_Filename_DB ].StoreModuleList_Load_Features_Cached( 'fields_page', l.modules ) }">
		<MvASSIGN NAME = "l.null"						VALUE = "{ [ g.Library_Filename_DB ].Module_Load_Features_Cached( l.module ) }">
		<MvASSIGN NAME = "l.module_fields"				VALUE = "">

		<MvFOREACH ITERATOR = "l.module_field" ARRAY = "l.module_fields" COUNT = "{ [ g.Module_Root $ l.module:module ].Module_Page_Fields( l.module, l.module_fields ) }">
			<MvREFERENCEARRAY NAME = "l.customfield" VARIABLE = "l.customfields">
				<MvDIMENSION INDEX = "{ ++l.customfield_count }">
			</MvREFERENCEARRAY>

			<MvREFERENCEARRAY NAME = "l.customfield:module"	VARIABLE = "l.modules">
				<MvDIMENSION INDEX = "{ l.module_pos }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.customfield:code"		VALUE = "{ l.module_field:code }">
			<MvASSIGN NAME = "l.customfield:name"		VALUE = "{ l.module_field:name }">
			<MvASSIGN NAME = "l.customfield:type"		VALUE = "text">
			<MvASSIGN NAME = "l.customfield:public"		VALUE = "{ ternary( l.module_field:public, 1, 0 ) }">
			<MvASSIGN NAME = "l.customfield:readonly"	VALUE = "{ ternary( l.module_field:readonly, 1, 0 ) }">
			<MvASSIGN NAME = "l.customfield:choices"	VALUE = "">

			<MvEVAL EXPR = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Capabilities( l.module, l.customfield:code, l.customfield:capabilities ) }">

			<MvIF EXPR = "{ NOT ISNULL l.module_field:type }">
				<MvASSIGN NAME = "l.customfield:type"	VALUE = "{ l.module_field:type }">

				<MvIF EXPR = "{ l.customfield:type EQ 'choice' }">
					<MvASSIGN NAME = "l.null"			VALUE = "{ [ g.Module_Root $ l.module:module ].Module_Page_Field_Choices( l.module, l.customfield:code, l.customfield:choices ) }">
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>

	<MvEVAL EXPR = "{ SortCustomFieldList( l.customfields ) }">
	<MvFUNCTIONRETURN VALUE = "{ l.customfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "InitializeCustomFieldSelect" PARAMETERS = "selectedfields var, input_field var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Translate selectedfields into the same format that will be sent by the browser during a form submit,
	| with the exception that we create an array when only a single element is selected.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.input_field"			VALUE = "">
	<MvASSIGN NAME = "l.field_count"			VALUE = 0>

	<MvFOREACH ITERATOR = "l.selectedfield" ARRAY = "l.selectedfields">
		<MvASSIGN NAME = "l.field_count"								VALUE = "{ l.field_count + 1 }">
		<MvASSIGN NAME = "l.input_field" INDEX = "{ l.field_count }"	VALUE = "{ l.selectedfield:module $ ':' $ l.selectedfield:code }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawCustomFieldSelect" PARAMETERS = "field_name, input_field var, customfields var, customfield_count" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.field_id" VALUE = "{ AlphaNumericOnly( l.field_name ) }">

	<MvEVAL EXPR = "{ DrawCustomFieldSelect_LowLevel( l.field_name, l.field_id, l.input_field, l.customfields, l.customfield_count ) }">

	<script type="text/javascript">
		var multipleselect_<MvEVAL EXPR = "{ l.field_id }"> = new MultipleSelect( '<MvEVAL EXPR = "{ l.field_id }">' );
	</script>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawCustomFieldSelect_SetModified" PARAMETERS = "field_name, input_field var, customfields var, customfield_count" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "l.field_id" VALUE = "{ AlphaNumericOnly( l.field_name ) }">

	<MvEVAL EXPR = "{ DrawCustomFieldSelect_LowLevel( l.field_name, l.field_id, l.input_field, l.customfields, l.customfield_count ) }">

	<script type="text/javascript">
		var multipleselect_<MvEVAL EXPR = "{ l.field_id }">;
		
		multipleselect_<MvEVAL EXPR = "{ l.field_id }">				= new MultipleSelect( '<MvEVAL EXPR = "{ l.field_id }">' );
		multipleselect_<MvEVAL EXPR = "{ l.field_id }">.onmodified	= function() { SetModified(); };
	</script>
</MvFUNCTION>

<MvFUNCTION NAME = "DrawCustomFieldSelect_LowLevel" PARAMETERS = "field_name, field_id, input_field var, customfields var, customfield_count" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvCOMMENT>
	|
	| Build a lookup table from the existing input field value.  This will have been populated
	| by InitializeCustomFieldSelect above or by a prior form submit.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ miva_array_elements( l.input_field ) GT 0 }">
		<MvFOREACH ITERATOR = "l.selectedfield" ARRAY = "l.input_field">
			<MvASSIGNARRAY NAME = "l.selected_lookup" VALUE = 1>
				<MvMEMBER NAME = "{ gettoken( l.selectedfield, ':', 1 ) }">
				<MvMEMBER NAME = "{ gettoken( l.selectedfield, ':', 2 ) }">
			</MvASSIGNARRAY>
		</MvFOREACH>
	<MvELSEIF EXPR = "{ NOT ISNULL l.input_field }">
		<MvASSIGNARRAY NAME = "l.selected_lookup" VALUE = 1>
			<MvMEMBER NAME = "{ gettoken( l.input_field, ':', 1 ) }">
			<MvMEMBER NAME = "{ gettoken( l.input_field, ':', 2 ) }">
		</MvASSIGNARRAY>
	</MvIF>

	<select id="{ l.field_id }" name="{ encodeentities( l.field_name ) }" size="5" multiple>
		<MvFOREACH ITERATOR = "l.customfield" ARRAY = "l.customfields" COUNT = "{ l.customfield_count }">
			<MvREFERENCEARRAY NAME = "l.selected" VARIABLE = "l.selected_lookup">
				<MvMEMBER NAME = "{ l.customfield:module:code }">
				<MvMEMBER NAME = "{ l.customfield:code }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ l.selected }">
				<option value="{ encodeentities( l.customfield:module:code ) $ ':' $ encodeentities( l.customfield:code ) }" selected><MvEVAL EXPR = "{ encodeentities( l.customfield:name ) }"></option>
			<MvELSE>
				<option value="{ encodeentities( l.customfield:module:code ) $ ':' $ encodeentities( l.customfield:code ) }"><MvEVAL EXPR = "{ encodeentities( l.customfield:name ) }"></option>
			</MvIF>
		</MvFOREACH>
	</select>
</MvFUNCTION>

<MvFUNCTION NAME = "CustomFieldSelect_Selected" PARAMETERS = "input_field var, selectedfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.selectedfields"			VALUE = "">

	<MvIF EXPR = "{ miva_array_elements( l.input_field ) EQ 0 }">
		<MvIF EXPR = "{ ISNULL l.input_field }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.selectedfields" INDEX = 1 MEMBER = "module"	VALUE = "{ gettoken( l.input_field, ':', 1 ) }">
		<MvASSIGN NAME = "l.selectedfields" INDEX = 1 MEMBER = "code"	VALUE = "{ gettoken( l.input_field, ':', 2 ) }">

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.selectedfield_count"	VALUE = 0>

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.input_field">
		<MvASSIGN NAME = "l.selectedfield_count"													VALUE = "{ l.selectedfield_count + 1 }">
		<MvASSIGN NAME = "l.selectedfields" INDEX = "{ l.selectedfield_count }" MEMBER = "module"	VALUE = "{ gettoken( l.field, ':', 1 ) }">
		<MvASSIGN NAME = "l.selectedfields" INDEX = "{ l.selectedfield_count }" MEMBER = "code"		VALUE = "{ gettoken( l.field, ':', 2 ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.selectedfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "CustomFieldSelect_Selected_WithModules" PARAMETERS = "input_field var, module_feature, selectedfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.selectedfields"				VALUE = "">

	<MvIF EXPR = "{ miva_array_elements( l.input_field ) EQ 0 }">
		<MvIF EXPR = "{ ISNULL l.input_field }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].ModuleAndFeatures_Load_Code( gettoken( l.input_field, ':', 1 ), l.module ) OR
						NOT miva_member_exists( l.module:feature_hash, l.module_feature ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvREFERENCE NAME = "l.selectedfields" INDEX = 1 MEMBER = "module"	VARIABLE = "l.module">
		<MvASSIGN NAME = "l.selectedfields" INDEX = 1 MEMBER = "code"		VALUE = "{ gettoken( l.input_field, ':', 2 ) }">

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.selectedfield_count"		VALUE = 0>
	<MvASSIGN NAME = "l.module_hash"				VALUE = "">

	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.input_field">
		<MvASSIGN NAME = "l.module_code"			VALUE = "{ gettoken( l.field, ':', 1 ) }">

		<MvREFERENCEARRAY NAME = "l.module" VARIABLE = "l.module_hash">
			<MvMEMBER NAME = "{ l.module_code }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.module:skip }">
			<MvFOREACHCONTINUE>
		<MvELSEIF EXPR = "{ ISNULL l.module:code }">
			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].ModuleAndFeatures_Load_Code( l.module_code, l.module ) OR
							NOT miva_member_exists( l.module:feature_hash, l.module_feature ) }">
				<MvASSIGN NAME = "l.module:skip"	VALUE = 1>
				<MvFOREACHCONTINUE>
			</MvIF>
		</MvIF>

		<MvASSIGN NAME = "l.selectedfield_count"														VALUE = "{ l.selectedfield_count + 1 }">
		<MvASSIGN NAME = "l.selectedfields" INDEX = "{ l.selectedfield_count }" MEMBER = "code"			VALUE = "{ gettoken( l.field, ':', 2 ) }">
		<MvREFERENCE NAME = "l.selectedfields" INDEX = "{ l.selectedfield_count }" MEMBER = "module"	VARIABLE = "{ 'l.module_hash:' $ l.module_code }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ l.selectedfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "DrawImageTypeSelect" PARAMETERS = "field_name, input_field var, imagetypes var, imagetype_count" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<table border="0" cellpadding="0" cellspacing="0">
		<tr>
			<MvIF EXPR = "{ miva_array_elements( l.input_field ) EQ 0 }">
				<MvIF EXPR = "{ NOT ISNULL l.input_field }">
					<MvASSIGNARRAY NAME = "l.assigned_imagetypes" VALUE = 1>
						<MvMEMBER NAME = "{ l.input_field }">
					</MvASSIGNARRAY>
				</MvIF>
			<MvELSE>
				<MvFOREACH ITERATOR = "l.field" ARRAY = "l.input_field">
					<MvASSIGNARRAY NAME = "l.assigned_imagetypes" VALUE = 1>
						<MvMEMBER NAME = "{ l.field }">
					</MvASSIGNARRAY>
				</MvFOREACH>
			</MvIF>

			<MvFOREACH ITERATOR = "l.imagetype" ARRAY = "l.imagetypes" INDEX = "l.imagetype_pos" COUNT = "{ l.imagetype_count }">
				<MvIF EXPR = "{ ( l.imagetype_pos GT 1 ) AND ( ( l.imagetype_pos MOD 2 ) EQ 1 ) }">
					</tr><tr>
				</MvIF>

				<MvREFERENCEARRAY NAME = "l.assigned" VARIABLE = "l.assigned_imagetypes">
					<MvMEMBER NAME = "{ l.imagetype:code }">
				</MvREFERENCEARRAY>

				<td><MvEVAL EXPR = "{ DrawCheckbox_With_Label( l.assigned, l.field_name, l.imagetype:code, encodeentities( l.imagetype:descrip ) ) }"></td>
			</MvFOREACH>
			
			<MvIF EXPR = "{ ( l.imagetype_pos MOD 2 ) EQ 0 }">
				<td>&nbsp;</td>
			</MvIF>
		</tr>
	</table>
</MvFUNCTION>

<MvFUNCTION NAME = "ImageTypeSelect_Selected" PARAMETERS = "input_field var, selectedfields var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.selectedfields"											VALUE = "">
	
	<MvIF EXPR = "{ miva_array_elements( l.input_field ) EQ 0 }">
		<MvIF EXPR = "{ ISNULL l.input_field }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.selectedfields" INDEX = 1							VALUE = "{ tolower( l.input_field ) }">

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.selectedfield_count"									VALUE = 0>
	
	<MvFOREACH ITERATOR = "l.field" ARRAY = "l.input_field">
		<MvASSIGN NAME = "l.selectedfield_count"								VALUE = "{ l.selectedfield_count + 1 }">
		<MvASSIGN NAME = "l.selectedfields" INDEX = "{ l.selectedfield_count }"	VALUE = "{ tolower( l.field ) }">
	</MvFOREACH>

    <MvFUNCTIONRETURN VALUE = "{ l.selectedfield_count }">
</MvFUNCTION>

<MvFUNCTION NAME = "FailedLoginDelay" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Domain:logindelay }">
		<MvEVAL EXPR = "{ miva_sleep( g.Domain:logindelay ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "GeneratePassword" PARAMETERS = "settings var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.set_upper"		VALUE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ">
	<MvASSIGN NAME = "l.set_lower"		VALUE = "abcdefghijklmnopqrstuvwxyz">
	<MvASSIGN NAME = "l.set_digits"		VALUE = "0123456789">
	<MvASSIGN NAME = "l.set_other"		VALUE = "!@$%&*=">

	<MvASSIGN NAME = "l.set_all"		VALUE = "{ l.set_lower $ l.set_upper $ l.set_digits $ l.set_other }">
	<MvASSIGN NAME = "l.set_all_len"	VALUE = "{ len_var( l.set_all ) }">

	<MvIF EXPR = "{ l.settings:pw_min_len LT 6 }">	<MvASSIGN NAME = "l.length"	VALUE = 6>
	<MvELSE>										<MvASSIGN NAME = "l.length" VALUE = "{ l.settings:pw_min_len }">
	</MvIF>

	<MvASSIGN NAME = "l.have_upper"		VALUE = 0>
	<MvASSIGN NAME = "l.have_lower"		VALUE = 0>
	<MvASSIGN NAME = "l.have_digit"		VALUE = 0>
	<MvASSIGN NAME = "l.have_other"		VALUE = 0>

	<MvASSIGN NAME = "l.password"		VALUE = "">

	<MvFOR COUNT = "{ l.length }">
		<MvASSIGN NAME = "l.char"		VALUE = "{ substring_var( l.set_all, ( asciivalue( crypto_rand_bytes( 1 ) ) MOD l.set_all_len ) + 1, 1 ) }">
		<MvASSIGN NAME = "l.password"	VALUE = "{ l.password $ l.char }">

		<MvIF EXPR = "{ l.char IN l.set_upper }">		<MvASSIGN NAME = "l.have_upper"	VALUE = 1>
		<MvELSEIF EXPR = "{ l.char IN l.set_lower }">	<MvASSIGN NAME = "l.have_lower" VALUE = 1>
		<MvELSEIF EXPR = "{ l.char IN l.set_digits }">	<MvASSIGN NAME = "l.have_digit" VALUE = 1>
		<MvELSEIF EXPR = "{ l.char IN l.set_other }">	<MvASSIGN NAME = "l.have_other" VALUE = 1>
		</MvIF>
	</MvFOR>

	<MvIF EXPR = "{ l.settings:pw_complex EQ 1 }">
		<MvIF EXPR = "{ ( l.have_upper + l.have_lower ) EQ 0 }">
			<MvEVAL EXPR = "{ GeneratePassword_InsertRandom( l.password, l.set_upper $ l.set_lower ) }">
		</MvIF>

		<MvIF EXPR = "{ ( l.have_digit + l.have_other ) EQ 0 }">
			<MvEVAL EXPR = "{ GeneratePassword_InsertRandom( l.password, l.set_digits $ l.set_other ) }">
		</MvIF>
	<MvELSEIF EXPR = "{ l.settings:pw_complex EQ 2 }">
		<MvIF EXPR = "{ l.have_upper EQ 0 }">
			<MvEVAL EXPR = "{ GeneratePassword_InsertRandom( l.password, l.set_upper ) }">
		</MvIF>

		<MvIF EXPR = "{ l.have_lower EQ 0 }">
			<MvEVAL EXPR = "{ GeneratePassword_InsertRandom( l.password, l.set_lower ) }">
		</MvIF>

		<MvIF EXPR = "{ ( l.have_digit + l.have_other ) EQ 0 }">
			<MvEVAL EXPR = "{ GeneratePassword_InsertRandom( l.password, l.set_digits $ l.set_other ) }">
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.password }">
</MvFUNCTION>

<MvFUNCTION NAME = "GeneratePassword_InsertRandom" PARAMETERS = "password var, set" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.password_len"	VALUE = "{ len_var( l.password ) }">
	<MvASSIGN NAME = "l.char"			VALUE = "{ substring_var( l.set, ( asciivalue( crypto_rand_bytes( 1 ) ) MOD len_var( l.set ) ) + 1, 1 ) }">
	<MvASSIGN NAME = "l.position"		VALUE = "{ random( l.password_len ) + 1 }">

	<MvIF EXPR = "{ l.position EQ 1 }">						<MvASSIGN NAME = "l.password" VALUE = "{ l.char $ l.password }">
	<MvELSEIF EXPR = "{ l.position GT l.password_len }">	<MvASSIGN NAME = "l.password" VALUE = "{ l.password $ l.char }">
	<MvELSE>												<MvASSIGN NAME = "l.password" VALUE = "{ substring_var( l.password, 1, l.position - 1 ) $ l.char $ substring_var( l.password, l.position, l.password_len - l.position + 1 ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "EnsurePathExists" PARAMETERS = "location, directory" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.location EQ 'data' }">		<MvASSIGN NAME = "l.exists" VALUE = "{ fexists( l.directory ) }">
	<MvELSEIF EXPR = "{ l.location EQ 'script' }">	<MvASSIGN NAME = "l.exists" VALUE = "{ sexists( l.directory ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00021', 'Invalid location' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.exists }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.path" VALUE = "">

	<MvFOREACH ITERATOR = "l.component" ARRAY = "l.components" COUNT = "{ miva_splitstring( l.directory, '/', l.components, '' ) }">
		<MvASSIGN NAME = "l.path" VALUE = "{ l.path $ l.component $ '/' }">

		<MvIF EXPR = "{ l.path EQ '/' }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.location EQ 'data' }">		<MvASSIGN NAME = "l.result" VALUE = "{ fexists( l.path ) }">
		<MvELSEIF EXPR = "{ l.location EQ 'script' }">	<MvASSIGN NAME = "l.result" VALUE = "{ sexists( l.path ) }">
		</MvIF>

		<MvIF EXPR = "{ l.result }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.location EQ 'data' }">		<MvASSIGN NAME = "l.result" VALUE = "{ fmkdir( l.path ) }">
		<MvELSEIF EXPR = "{ l.location EQ 'script' }">	<MvASSIGN NAME = "l.result" VALUE = "{ smkdir( l.path ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.result }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00022', 'Unable to create directory \'' $ l.path $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "EnsurePathPermissions" PARAMETERS = "location, directory, permission" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.location EQ 'data' }">		<MvASSIGN NAME = "l.exists" VALUE = "{ fexists( l.directory ) }">
	<MvELSEIF EXPR = "{ l.location EQ 'script' }">	<MvASSIGN NAME = "l.exists" VALUE = "{ sexists( l.directory ) }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00031', 'Invalid location' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.exists }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00050', 'Directory \'' $ l.directory $ '\' does not exist' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.path" VALUE = "">

	<MvFOREACH ITERATOR = "l.component" ARRAY = "l.components" COUNT = "{ miva_splitstring( l.directory, '/', l.components, '' ) }">
		<MvASSIGN NAME = "l.path" VALUE = "{ l.path $ l.component $ '/' }">

		<MvCOMMENT>
		|
		| Never change permissions on the root level path
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.path EQ '/' }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.location EQ 'data' }">		<MvASSIGN NAME = "l.result" VALUE = "{ fchmod( l.path, l.permission ) }">
		<MvELSEIF EXPR = "{ l.location EQ 'script' }">	<MvASSIGN NAME = "l.result" VALUE = "{ schmod( l.path, l.permission ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT l.result }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00032', 'Unable to update permissions on directory \'' $ l.path $ '\': ' $ file_last_error() ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SplitString" PARAMETERS = "string, delimiter, output var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ miva_splitstring( l.string, l.delimiter, l.output, '' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SplitStringAndTrim" PARAMETERS = "string, delimiter, output var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ miva_splitstring( l.string, l.delimiter, l.output, 'trim' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SplitStringWithin" PARAMETERS = "string, delimiter, bound, output var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.counter" 	VALUE = 0>
	<MvASSIGN NAME = "l.pos" 		VALUE = 1>
	<MvASSIGN NAME = "l.start" 		VALUE = 1>
	<MvASSIGN NAME = "l.length" 	VALUE = "{ len_var( l.string ) }">

	<MvWHILE EXPR = "{ l.pos LE l.length }">
		<MvASSIGN NAME = "l.char" 	VALUE = "{ substring_var( l.string, l.pos, 1 ) }">

		<MvIF EXPR = "{ l.char EQ l.delimiter }">
			<MvIF EXPR = "{ NOT l.in_bound }">
				<MvASSIGN NAME = "l.counter" 							VALUE = "{ l.counter + 1 }">
				<MvASSIGN NAME = "l.output" INDEX = "{ l.counter }"		VALUE = "{ trim( substring_var( l.string, l.start, l.pos - l.start ) ) }">
				<MvASSIGN NAME = "l.start" 								VALUE = "{ l.pos + 1 }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.char EQ l.bound }">
			<MvIF EXPR = "{ NOT l.in_bound }">
				<MvASSIGN NAME = "l.in_bound" 							VALUE = 1>
			<MvELSE>
				<MvIF EXPR = "{ substring_var( l.string, l.pos - 1, 1 ) NE '\\' }">
					<MvASSIGN NAME = "l.in_bound" 						VALUE = 0>
				</MvIF>
			</MvIF>
		</MvIF>
		
		<MvASSIGN NAME = "l.pos" 										VALUE = "{ l.pos + 1 }">
	</MvWHILE>
	
	<MvASSIGN NAME = "l.counter" 							VALUE = "{ l.counter + 1 }">
	<MvASSIGN NAME = "l.output" INDEX = "{ l.counter }" 	VALUE = "{ trim( substring_var( l.string, l.start, l.pos - l.start ) ) }">
	
	<MvFUNCTIONRETURN VALUE = "{ l.counter }">
</MvFUNCTION>

<MvFUNCTION NAME = "Create_Address_Formats" PARAMETERS = "emails, headers var, addresses var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.email" ARRAY = "l.emails_array" INDEX = "l.pos" COUNT = "{ SplitStringWithin( l.emails, ',', '"', l.emails_array ) }">
		<MvIF EXPR = "{ l.pos GT 1 }">
			<MvASSIGN NAME = "l.addresses" 	VALUE = "{ l.addresses $ ', ' }">
			<MvASSIGN NAME = "l.headers" 	VALUE = "{ l.headers $ ', ' }">
		</MvIF>

		<MvASSIGN NAME = "l.null" VALUE = "{ Create_Address_Format( l.email, l.headers, l.addresses ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Create_Address_Format" PARAMETERS = "email, headers var, addresses var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ EmailNameLong( l.email, l.email_parts ) }">
		<MvASSIGN NAME = "l.addresses" 	VALUE = "{ l.addresses $ l.email_parts:email }">
		<MvASSIGN NAME = "l.headers" 	VALUE = "{ l.headers $ '"' $ l.email_parts:name $ '" <' $ l.email_parts:email $ '>' }">
	<MvELSE>
		<MvASSIGN NAME = "l.addresses" 	VALUE = "{ l.addresses $ l.email }">
		<MvASSIGN NAME = "l.headers" 	VALUE = "{ l.headers $ l.email }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Create_Miva_Email_Headers" PARAMETERS = "from, to, cc, subject" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.miva_headers" 		VALUE = "{ 'From: ' $ l.from $ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.miva_headers"		VALUE = "{ l.miva_headers $ 'To: ' $ l.to $ asciichar( 13 ) $ asciichar( 10 ) }">
	
	<MvIF EXPR = "{ NOT ISNULL l.cc }">
		<MvASSIGN NAME = "l.miva_headers" 	VALUE = "{ l.miva_headers $ 'CC: ' $ l.cc $ asciichar( 13 ) $ asciichar( 10 ) }">
	</MvIF>
	
	<MvASSIGN NAME = "l.miva_headers" 		VALUE = "{ l.miva_headers $ 'Date: ' $ Format_RFC5322_DateTime() $ asciichar( 13 ) $ asciichar( 10 ) }">
	<MvASSIGN NAME = "l.miva_headers" 		VALUE = "{ l.miva_headers $ 'Subject: ' $ l.subject $ asciichar( 13 ) $ asciichar( 10 )  }">
	
	<MvFUNCTIONRETURN VALUE = "{ l.miva_headers }">
</MvFUNCTION>

<MvFUNCTION NAME = "EmailNameLong" PARAMETERS = "email, parts var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pos" 	VALUE = 1>
	<MvASSIGN NAME = "l.start" 	VALUE = 1>
	<MvASSIGN NAME = "l.state" 	VALUE = "SWITCH">
	<MvASSIGN NAME = "l.email" 	VALUE = "{ trim( l.email ) }">
	<MvASSIGN NAME = "l.length" VALUE = "{ len_var( l.email ) }">
	
	<MvIF EXPR = "{ substring_var( l.email, 1, 1 ) NE '"' }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00027', 'Expected quote' ) }">
	<MvELSEIF EXPR = "{ substring_var( l.email, len_var( l.email ), 1 ) NE '>' }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00028', 'Expected closing angle bracket' ) }">
	</MvIF>
	
	<MvWHILE EXPR = "{ l.pos LE l.length }">
		<MvASSIGN NAME = "l.char" 	VALUE = "{ substring_var( l.email, l.pos, 1 ) }">
		
		<MvIF EXPR = "{ l.state EQ 'SWITCH' }">
			<MvIF EXPR = "{ isspace( l.char ) }">
				<MvASSIGN NAME = "l.state" VALUE = "SPACE">
			<MvELSEIF EXPR = "{ l.char EQ '"' }">
				<MvASSIGN NAME = "l.state" VALUE = "NAME">
				<MvASSIGN NAME = "l.start" VALUE = "{ l.pos + 1 }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ 'SPACE' }">
			<MvIF EXPR = "{ NOT isspace( l.char ) }">
				<MvASSIGN NAME = "l.json:state" VALUE = "SWITCH">
				<MvWHILECONTINUE>
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ 'NAME' }">
			<MvIF EXPR = "{ l.char EQ '"' AND substring_var( l.email, l.pos - 1 , 1 ) NE '\\' }">
				<MvASSIGN NAME = "l.parts:name" VALUE = "{ trim( substring_var( l.email, 2, l.pos - 2 ) ) }">
				<MvASSIGN NAME = "l.state" 		VALUE = "EMAIL">
			</MvIF>
		<MvELSEIF EXPR = "{ l.state EQ 'EMAIL' }">
			<MvIF EXPR = "{ NOT isspace( l.char ) }">
				<MvIF EXPR = "{ l.char NE '<' }">
					<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00029', 'Expected opening angle bracket' ) }">
				</MvIF>
				
				<MvASSIGN NAME = "l.parts:email" VALUE = "{ trim( substring_var( l.email, l.pos + 1, len_var( l.email ) - l.pos - 1 ) ) }">
				<MvWHILESTOP>
			</MvIF>
		</MvIF>		
		
		<MvASSIGN NAME = "l.pos" 	VALUE = "{ l.pos + 1 }">
	</MvWHILE>
	
	<MvIF EXPR = "{ ISNULL l.parts:email OR ISNULL l.parts:name }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00030', 'Missing email or name' ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Format_RFC5322_DateTime" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.timezone" 	VALUE = "{ timezone() }">
	<MvASSIGN NAME = "l.dow"		VALUE = "{ time_t_dayofweek( s.dyn_time_t, l.timezone ) }">
	<MvASSIGN NAME = "l.month"		VALUE = "{ time_t_month( s.dyn_time_t, l.timezone ) }">

	<MvIF EXPR = "{ l.timezone LT 0 }">		<MvASSIGN NAME = "l.timezone_prefix" VALUE = "-">
	<MvELSE>								<MvASSIGN NAME = "l.timezone_prefix" VALUE = "+">
	</MvIF>

	<MvIF EXPR = "{ l.dow EQ 1 }">			<MvASSIGN NAME = "l.wdy"			VALUE = "Sun">
	<MvELSEIF EXPR = "{ l.dow EQ 2 }">		<MvASSIGN NAME = "l.wdy"			VALUE = "Mon">
	<MvELSEIF EXPR = "{ l.dow EQ 3 }">		<MvASSIGN NAME = "l.wdy"			VALUE = "Tue">
	<MvELSEIF EXPR = "{ l.dow EQ 4 }">		<MvASSIGN NAME = "l.wdy"			VALUE = "Wed">
	<MvELSEIF EXPR = "{ l.dow EQ 5 }">		<MvASSIGN NAME = "l.wdy"			VALUE = "Thu">
	<MvELSEIF EXPR = "{ l.dow EQ 6 }">		<MvASSIGN NAME = "l.wdy"			VALUE = "Fri">
	<MvELSEIF EXPR = "{ l.dow EQ 7 }">		<MvASSIGN NAME = "l.wdy"			VALUE = "Sat">
	</MvIF>

	<MvIF EXPR = "{ l.month EQ 1 }">		<MvASSIGN NAME = "l.mon"			VALUE = "Jan">
	<MvELSEIF EXPR = "{ l.month EQ 2 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Feb">
	<MvELSEIF EXPR = "{ l.month EQ 3 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Mar">
	<MvELSEIF EXPR = "{ l.month EQ 4 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Apr">
	<MvELSEIF EXPR = "{ l.month EQ 5 }">	<MvASSIGN NAME = "l.mon"			VALUE = "May">
	<MvELSEIF EXPR = "{ l.month EQ 6 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Jun">
	<MvELSEIF EXPR = "{ l.month EQ 7 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Jul">
	<MvELSEIF EXPR = "{ l.month EQ 8 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Aug">
	<MvELSEIF EXPR = "{ l.month EQ 9 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Sep">
	<MvELSEIF EXPR = "{ l.month EQ 10 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Oct">
	<MvELSEIF EXPR = "{ l.month EQ 11 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Nov">
	<MvELSEIF EXPR = "{ l.month EQ 12 }">	<MvASSIGN NAME = "l.mon"			VALUE = "Dec">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = "{ l.wdy 	$
								 ', ' 	$
								 padl( time_t_dayofmonth( s.dyn_time_t, l.timezone ), 2, '0' ) $ ' ' $ l.mon $ ' ' $ padl( time_t_year( s.dyn_time_t, l.timezone ), 4, '0' ) $
								 ' ' 	$
								 padl( time_t_hour( s.dyn_time_t, l.timezone ), 2, '0' ) $ ':' $ padl( time_t_min( s.dyn_time_t, l.timezone ), 2, '0' ) $ ':' $ padl( time_t_sec( s.dyn_time_t, l.timezone ), 2, '0' ) $
								 ' ' 	$
								 l.timezone_prefix $ padl( abs( l.timezone ) * 100, 4, '0' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "LastIndexOf" PARAMETERS = "search, source var, start" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ indexofl( l.search, l.source, l.start ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "LastIndexOfI" PARAMETERS = "search, source var, start" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ indexofli( l.search, l.source, l.start ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Plural" PARAMETERS = "count, word, plural" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.count EQ 1 }">		<MvFUNCTIONRETURN VALUE = "{ l.word }"> 	</MvIF>
	<MvIF EXPR = "{ NOT ISNULL l.plural }">	<MvFUNCTIONRETURN VALUE = "{ l.plural }">	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.word $ 's' }">
</MvFUNCTION>

<MvFUNCTION NAME = "TimeT_DaysInMonth" PARAMETERS = "year, month" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.month EQ 1 }">		<MvFUNCTIONRETURN VALUE = 31>
	<MvELSEIF EXPR = "{ l.month EQ 3 }">	<MvFUNCTIONRETURN VALUE = 31>
	<MvELSEIF EXPR = "{ l.month EQ 4 }">	<MvFUNCTIONRETURN VALUE = 30>
	<MvELSEIF EXPR = "{ l.month EQ 5 }">	<MvFUNCTIONRETURN VALUE = 31>
	<MvELSEIF EXPR = "{ l.month EQ 6 }">	<MvFUNCTIONRETURN VALUE = 30>
	<MvELSEIF EXPR = "{ l.month EQ 7 }">	<MvFUNCTIONRETURN VALUE = 31>
	<MvELSEIF EXPR = "{ l.month EQ 8 }">	<MvFUNCTIONRETURN VALUE = 31>
	<MvELSEIF EXPR = "{ l.month EQ 9 }">	<MvFUNCTIONRETURN VALUE = 30>
	<MvELSEIF EXPR = "{ l.month EQ 10 }">	<MvFUNCTIONRETURN VALUE = 31>
	<MvELSEIF EXPR = "{ l.month EQ 11 }">	<MvFUNCTIONRETURN VALUE = 30>
	<MvELSEIF EXPR = "{ l.month EQ 12 }">	<MvFUNCTIONRETURN VALUE = 31>
	</MvIF>

	<MvIF EXPR = "{ ( ( ( l.year MOD 4 ) EQ 0 ) AND ( l.year MOD 100 ) NE 0 ) OR ( ( l.year MOD 400 ) EQ 0 ) }">
		<MvFUNCTIONRETURN VALUE = 29>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 28>
</MvFUNCTION>

<MvFUNCTION NAME = "TimeT_PreviousDays" PARAMETERS = "days" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Go back to roughly the middle of the previous day to compensate for DST changes and leap seconds, then reset to
	| 00:00:00
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.prior_t"		VALUE = "{ mktime_t( s.tm_year, s.tm_mon, s.tm_mday, 0, 0, 0, g.Merchant_Local_Timezone ) - ( ( l.days - 1 ) * 86400 ) - 43200 }">
	<MvASSIGN NAME = "l.prior_year"		VALUE = "{ time_t_year( l.prior_t, g.Merchant_Local_Timezone ) }">
	<MvASSIGN NAME = "l.prior_month"	VALUE = "{ time_t_month( l.prior_t, g.Merchant_Local_Timezone ) }">
	<MvASSIGN NAME = "l.prior_day"		VALUE = "{ time_t_dayofmonth( l.prior_t, g.Merchant_Local_Timezone ) }">

	<MvFUNCTIONRETURN VALUE = "{ mktime_t( l.prior_year, l.prior_month, l.prior_day, 0, 0, 0, g.Merchant_Local_Timezone ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Timestamp_ISO8601" PARAMETERS = "time_t" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.timezone"		VALUE = "{ timezone() }">
	<MvASSIGN NAME = "l.soap_time"		VALUE = "{ time_t_year( l.time_t, l.timezone )						$ '-' $
												   padl( time_t_month( l.time_t, l.timezone ), 2, 0 )		$ '-' $
												   padl( time_t_dayofmonth( l.time_t, l.timezone ), 2, 0 )	$ 'T' $
												   padl( time_t_hour( l.time_t, l.timezone ), 2, 0 )		$ ':' $
												   padl( time_t_min( l.time_t, l.timezone ), 2, 0 )			$ ':' $
												   padl( time_t_sec( l.time_t, l.timezone ), 2, 0 ) }">

	<MvIF EXPR = "{ l.timezone EQ 0 }">
		<MvASSIGN NAME = "l.soap_time"		VALUE = "{ l.soap_time $ 'Z' }">
	<MvELSE>
		<MvIF EXPR = "{ l.timezone LT 0 }">	<MvASSIGN NAME = "l.soap_time"	VALUE = "{ l.soap_time $ '-' }">
		<MvELSE>							<MvASSIGN NAME = "l.soap_time"	VALUE = "{ l.soap_time $ '+' }">
		</MvIF>

		<MvASSIGN NAME = "l.soap_time"		VALUE = "{ l.soap_time $ padl( abs( l.timezone ), 2, '0' ) $ ':00' }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.soap_time }">
</MvFUNCTION>

<MvFUNCTION NAME = "Base32_Encode" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.pos"			VALUE = 1>
	<MvASSIGN NAME = "l.len"			VALUE = "{ len_var( l.value ) }">

	<MvCAPTURE VARIABLE = "l.encoded">
		<MvWHILE EXPR = "{ l.pos LE l.len }">
			<MvASSIGN NAME = "l.bytes"	VALUE = "{ ( l.len - l.pos ) + 1 }">

												<MvASSIGN NAME = "l.v1"	VALUE = "{ asciivalue( substring_var( l.value, l.pos++, 1 ) ) }">

			<MvIF EXPR = "{ l.bytes GE 2 }">	<MvASSIGN NAME = "l.v2"	VALUE = "{ asciivalue( substring_var( l.value, l.pos++, 1 ) ) }">
			<MvELSE>							<MvASSIGN NAME = "l.v2"	VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 3 }">	<MvASSIGN NAME = "l.v3"	VALUE = "{ asciivalue( substring_var( l.value, l.pos++, 1 ) ) }">
			<MvELSE>							<MvASSIGN NAME = "l.v3"	VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 4 }">	<MvASSIGN NAME = "l.v4"	VALUE = "{ asciivalue( substring_var( l.value, l.pos++, 1 ) ) }">
			<MvELSE>							<MvASSIGN NAME = "l.v4"	VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 5 }">	<MvASSIGN NAME = "l.v5"	VALUE = "{ asciivalue( substring_var( l.value, l.pos++, 1 ) ) }">
			<MvELSE>							<MvASSIGN NAME = "l.v5"	VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 1 }">
				<MvEVAL EXPR = "{ Base32_Encode_Symbol( l.v1 BITSR 3 ) }">
				<MvEVAL EXPR = "{ Base32_Encode_Symbol( ( ( l.v1 BITAND 7 ) BITSL 2 ) BITOR ( l.v2 BITSR 6 ) ) }">
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 2 }">
				<MvEVAL EXPR = "{ Base32_Encode_Symbol( ( l.v2 BITSR 1 ) BITAND 31 ) }">
				<MvEVAL EXPR = "{ Base32_Encode_Symbol( ( ( l.v2 BITAND 1 ) BITSL 4 ) BITOR ( l.v3 BITSR 4 ) ) }">
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 3 }">
				<MvEVAL EXPR = "{ Base32_Encode_Symbol( ( ( l.v3 BITAND 15 ) BITSL 1 ) BITOR ( l.v4 BITSR 7 ) ) }">
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 4 }">
				<MvEVAL EXPR = "{ Base32_Encode_Symbol( ( l.v4 BITSR 2 ) BITAND 31 ) }">
				<MvEVAL EXPR = "{ Base32_Encode_Symbol( ( ( l.v4 BITAND 3 ) BITSL 3 ) BITOR ( l.v5 BITSR 5 ) ) }">
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 5 }">
				<MvEVAL EXPR = "{ Base32_Encode_Symbol( l.v5 BITAND 31 ) }">
			</MvIF>
		</MvWHILE>
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ padr( l.encoded, ceil( len_var( l.encoded ) / 8 ) * 8, '=' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Base32_Encode_Symbol" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.value GE 0 }">
		<MvIF EXPR = "{ l.value LT 26 }">
			<MvFUNCTIONRETURN VALUE = "{ asciichar( 65 + l.value ) }">	<MvCOMMENT> A-Z </MvCOMMENT>
		<MvELSEIF EXPR = "{ l.value LE 31 }">
			<MvFUNCTIONRETURN VALUE = "{ asciichar( 24 + l.value ) }">	<MvCOMMENT> 2-7 </MvCOMMENT>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "Base32_Decode" PARAMETERS = "encoded" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.len"				VALUE = "{ len_var( l.encoded ) }">

	<MvWHILE EXPR = "{ substring_var( l.encoded, l.len, 1 ) EQ '=' }">
		<MvASSIGN NAME = "l.len"			VALUE = "{ l.len - 1 }">
	</MvWHILE>

	<MvCAPTURE VARIABLE = "l.decoded">
		<MvASSIGN NAME = "l.pos"			VALUE = 0>
		<MvWHILE EXPR = "{ l.pos LT l.len }">
			<MvASSIGN NAME = "l.bytes"		VALUE = "{ l.len - l.pos }">

			<MvIF EXPR = "{ l.bytes GE 2 }">
				<MvASSIGN NAME = "l.b1"		VALUE = "{ Base32_Decode_Symbol( substring_var( l.encoded, ++l.pos, 1 ) ) }">
				<MvASSIGN NAME = "l.b2"		VALUE = "{ Base32_Decode_Symbol( substring_var( l.encoded, ++l.pos, 1 ) ) }">

				<MvEVAL EXPR = "{ asciichar( ( l.b1 BITSL 3 ) BITOR ( l.b2 BITSR 2 ) ) }">
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 4 }">
				<MvASSIGN NAME = "l.b3"		VALUE = "{ Base32_Decode_Symbol( substring_var( l.encoded, ++l.pos, 1 ) ) }">
				<MvASSIGN NAME = "l.b4"		VALUE = "{ Base32_Decode_Symbol( substring_var( l.encoded, ++l.pos, 1 ) ) }">

				<MvEVAL EXPR = "{ asciichar( ( ( l.b2 BITAND 3 ) BITSL 6 ) BITOR ( l.b3 BITSL 1 ) BITOR ( l.b4 BITSR 4 ) ) }">
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 5 }">
				<MvASSIGN NAME = "l.b5"		VALUE = "{ Base32_Decode_Symbol( substring_var( l.encoded, ++l.pos, 1 ) ) }">

				<MvEVAL EXPR = "{ asciichar( ( ( l.b4 BITAND 15 ) BITSL 4 ) BITOR ( l.b5 BITSR 1 ) ) }">
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 7 }">
				<MvASSIGN NAME = "l.b6"		VALUE = "{ Base32_Decode_Symbol( substring_var( l.encoded, ++l.pos, 1 ) ) }">
				<MvASSIGN NAME = "l.b7"		VALUE = "{ Base32_Decode_Symbol( substring_var( l.encoded, ++l.pos, 1 ) ) }">

				<MvEVAL EXPR = "{ asciichar( ( ( l.b5 BITAND 1 ) BITSL 7 ) BITOR ( l.b6 BITSL 2 ) BITOR ( l.b7 BITSR 3 ) ) }">
			</MvIF>

			<MvIF EXPR = "{ l.bytes GE 8 }">
				<MvASSIGN NAME = "l.b8"		VALUE = "{ Base32_Decode_Symbol( substring_var( l.encoded, ++l.pos, 1 ) ) }">

				<MvEVAL EXPR = "{ asciichar( ( ( l.b7 BITAND 7 ) BITSL 5 ) BITOR l.b8 ) }">
			</MvIF>
		</MvWHILE>
	</MvCAPTURE>

	<MvFUNCTIONRETURN VALUE = "{ l.decoded }">
</MvFUNCTION>

<MvFUNCTION NAME = "Base32_Decode_Symbol" PARAMETERS = "symbol" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( l.symbol GE 'A' ) AND ( l.symbol LE 'Z' ) }">
		<MvFUNCTIONRETURN VALUE = "{ asciivalue( l.symbol ) - 65 }">	<MvCOMMENT> A-Z map to 0-26 </MvCOMMENT>
	<MvELSEIF EXPR = "{ ( l.symbol GE 'a' ) AND ( l.symbol LE 'z' ) }">
		<MvFUNCTIONRETURN VALUE = "{ asciivalue( l.symbol ) - 97 }">	<MvCOMMENT> a-z map to 0-26 </MvCOMMENT>
	<MvELSEIF EXPR = "{ ( l.symbol GE '2' ) AND ( l.symbol LE '7' ) }">
		<MvFUNCTIONRETURN VALUE = "{ asciivalue( l.symbol ) - 24 }">	<MvCOMMENT> 2-7 map to 26-31 </MvCOMMENT>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Base32_Validate" PARAMETERS = "encoded" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.len"			VALUE = "{ len_var( l.encoded ) }">

	<MvWHILE EXPR = "{ substring_var( l.encoded, l.len, 1 ) EQ '=' }">
		<MvASSIGN NAME = "l.len"		VALUE = "{ l.len - 1 }">
	</MvWHILE>

	<MvASSIGN NAME = "l.pos"			VALUE = 0>
	<MvWHILE EXPR = "{ l.pos LT l.len }">
		<MvASSIGN NAME = "l.symbol"		VALUE = "{ substring_var( l.encoded, ++l.pos, 1 ) }">

		<MvIF EXPR = "{ NOT ( ( ( l.symbol GE 'A' ) AND ( l.symbol LE 'Z' ) ) OR
							  ( ( l.symbol GE 'a' ) AND ( l.symbol LE 'z' ) ) OR
							  ( ( l.symbol GE '2' ) AND ( l.symbol LE '7' ) ) ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "IEEE754_Normalize" PARAMETERS = "significant_digits, value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ miva_ieee754_normalize( l.significant_digits, l.value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "CDATA_Encode" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ miva_cdata_encode( l.value ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ZipInList" PARAMETERS = "zip_list, zip" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.zip }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.end_pos"			VALUE = "{ ',' IN l.zip_list }">

	<MvWHILE EXPR = "{ l.end_pos }">
		<MvASSIGN NAME = "l.zip_range"		VALUE = "{ trim( substring_var( l.zip_list, 1, l.end_pos - 1 ) ) }">

		<MvIF EXPR = "{ ZipInRange( l.zip_range, l.zip ) }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvASSIGN NAME = "l.zip_list"		VALUE = "{ substring_var( l.zip_list, l.end_pos + 1, len_var( l.zip_list ) - l.end_pos ) }">
		<MvASSIGN NAME = "l.end_pos"		VALUE = "{ ',' IN l.zip_list }">
	</MvWHILE>

	<MvASSIGN NAME = "l.zip_list"			VALUE = "{ trim( l.zip_list ) }">

	<MvIF EXPR = "{ ISNULL l.zip_list }">	<MvFUNCTIONRETURN VALUE = 0>
	<MvELSE>								<MvFUNCTIONRETURN VALUE = "{ ZipInRange( l.zip_list, l.zip ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "ZipInRange" PARAMETERS = "zip_range, zip" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.zip_range }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.zip_range" 					VALUE = "{ toupper( glosub( l.zip_range, ' ', '' ) ) }">
	<MvASSIGN NAME = "l.zip" 						VALUE = "{ toupper( glosub( glosub( l.zip, '-', '.' ), ' ', '' ) ) }">
	<MvASSIGN NAME = "l.dash_pos"					VALUE = "{ '-' IN l.zip_range }">
	<MvASSIGN NAME = "l.zip_period_pos" 			VALUE = "{ '.' IN l.zip }">

	<MvIF EXPR = "{ l.dash_pos EQ 0 }">
		<MvASSIGN NAME = "l.zip_range_period_pos" 	VALUE = "{ '.' IN l.zip_range }">

		<MvIF EXPR = "{ NOT l.zip_range_period_pos AND l.zip_period_pos }">
			<MvASSIGN NAME = "l.zip" 				VALUE = "{ substring_var( l.zip, 1, l.zip_period_pos ) }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = "{ l.zip EQ l.zip_range }">
	</MvIF>

	<MvASSIGN NAME = "l.range_low"					VALUE = "{ substring_var( l.zip_range, 1, l.dash_pos - 1 ) }">
	<MvASSIGN NAME = "l.range_high"					VALUE = "{ substring_var( l.zip_range, l.dash_pos + 1, len_var( l.zip_range ) - l.dash_pos ) }">
	<MvASSIGN NAME = "l.range_low_period_pos" 		VALUE = "{ '.' IN l.range_low }">
	<MvASSIGN NAME = "l.range_high_period_pos" 		VALUE = "{ '.' IN l.range_high }">

	<MvIF EXPR = "{ NOT ISNULL l.range_low }">
		<MvIF EXPR = "{ NOT l.range_low_period_pos AND l.zip_period_pos }">
			<MvASSIGN NAME = "l.zip_low" 			VALUE = "{ substring_var( l.zip, 1, l.zip_period_pos ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.zip_low"			VALUE = "{ l.zip }">
		</MvIF>

		<MvIF EXPR = "{ l.zip_low LT l.range_low }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT ISNULL l.range_high }">
		<MvIF EXPR = "{ NOT l.range_high_period_pos AND l.zip_period_pos }">
			<MvASSIGN NAME = "l.zip_high" 			VALUE = "{ substring_var( l.zip, 1, l.zip_period_pos ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.zip_high"			VALUE = "{ l.zip }">
		</MvIF>

		<MvIF EXPR = "{ l.zip_high GT l.range_high }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Value_In_List" PARAMETERS = "value, list" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.element" ARRAY = "l.elements" COUNT = "{ miva_splitstring( l.list, ',', l.elements, 'trim' ) }">
		<MvIF EXPR = "{ l.element EQ l.value }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "OrdinalNumber" PARAMETERS = "n" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ( ISNULL l.n ) OR ( NOT isdigit( l.n ) ) }">
		<MvFUNCTIONRETURN VALUE = "{ l.n }">
	</MvIF>

	<MvASSIGN NAME = "l.mod10"	VALUE = "{ l.n MOD 10 }">
	<MvASSIGN NAME = "l.mod100" VALUE = "{ l.n MOD 100 }">

	<MvIF EXPR = "{ l.mod100 GE 11 AND l.mod100 LE 13 }">	<MvASSIGN NAME = "l.suffix" VALUE = "th">
	<MvELSEIF EXPR = "{ l.mod10 EQ 1 }">					<MvASSIGN NAME = "l.suffix" VALUE = "st">
	<MvELSEIF EXPR = "{ l.mod10 EQ 2 }">					<MvASSIGN NAME = "l.suffix" VALUE = "nd">
	<MvELSEIF EXPR = "{ l.mod10 EQ 3 }">					<MvASSIGN NAME = "l.suffix" VALUE = "rd">
	<MvELSE>												<MvASSIGN NAME = "l.suffix" VALUE = "th">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ l.n $ l.suffix }">
</MvFUNCTION>

<MvFUNCTION NAME = "CBOR_Decode" PARAMETERS = "input var, output var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.input_pos"		VALUE = 1>
	<MvASSIGN NAME = "l.input_len"		VALUE = "{ len_var( l.input ) }">

	<MvFUNCTIONRETURN VALUE = "{ CBOR_Decode_Value( l.input, l.input_pos, l.input_len, l.output ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "CBOR_Decode_Value" PARAMETERS = "input var, input_pos var, input_len var, output var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.byte"		VALUE = "{ asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) }">
	<MvASSIGN NAME = "l.major_type"	VALUE = "{ l.byte BITSR 5 }">
	<MvASSIGN NAME = "l.addl_info"	VALUE = "{ l.byte BITAND 31 }">

	<MvCOMMENT>
	|
	| Most of the types encode an integer length (or value) in the same way
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.addl_info LE 23 }">
		<MvASSIGN NAME = "l.value"			VALUE = "{ l.addl_info }">
	<MvELSEIF EXPR = "{ l.addl_info EQ 24 }">
		<MvASSIGN NAME = "l.value"			VALUE = "{ asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) }">
	<MvELSEIF EXPR = "{ l.addl_info EQ 25 }">
		<MvASSIGN NAME = "l.value"			VALUE = "{ ( asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) BITSL 8 ) BITOR
													   asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) }">
	<MvELSEIF EXPR = "{ l.addl_info EQ 26 }">
		<MvASSIGN NAME = "l.value"			VALUE = "{ ( asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) BITSL 24 ) BITOR
													   ( asciivalue( substring_var( l.input, l.input_pos++, 1, ) ) BITSL 16 ) BITOR
													   ( asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) BITSL 8 ) BITOR
													   asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) }">
	<MvELSEIF EXPR = "{ l.addl_info EQ 27 }">
		<MvASSIGN NAME = "l.value_high"		VALUE = "{ ( asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) BITSL 24 ) BITOR
													   ( asciivalue( substring_var( l.input, l.input_pos++, 1, ) ) BITSL 16 ) BITOR
													   ( asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) BITSL 8 ) BITOR
													   asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) }">
		
		<MvASSIGN NAME = "l.value_low"		VALUE = "{ ( asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) BITSL 24 ) BITOR
													   ( asciivalue( substring_var( l.input, l.input_pos++, 1, ) ) BITSL 16 ) BITOR
													   ( asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) BITSL 8 ) BITOR
													   asciivalue( substring_var( l.input, l.input_pos++, 1 ) ) }">
	<MvELSEIF EXPR = "{ l.addl_info NE 31 }">
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00039', 'Unexpected additional info ' $ l.addl_info ) }">
	</MvIF>

	<MvIF EXPR = "{ l.major_type EQ 0 }">			<MvCOMMENT> Unsigned Integer </MvCOMMENT>
		<MvIF EXPR = "{ l.addl_info EQ 27 }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00040', 'MivaScript cannot decode 64-bit integers' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.output"			VALUE = "{ l.value }">
	<MvELSEIF EXPR = "{ l.major_type EQ 1 }">		<MvCOMMENT> Negative Integer </MvCOMMENT>
		<MvIF EXPR = "{ l.addl_info EQ 27 }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00041', 'MivaScript cannot decode 64-bit integers' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.output"			VALUE = "{ -1 - l.value }">
	<MvELSEIF EXPR = "{ ( l.major_type EQ 2 ) OR
						( l.major_type EQ 3 ) }">	<MvCOMMENT> Byte/Text String </MvCOMMENT>
		<MvIF EXPR = "{ l.addl_info NE 31 }">
			<MvASSIGN NAME = "l.output"		VALUE = "{ substring_var( l.input, l.input_pos, l.value ) }">
			<MvASSIGN NAME = "l.input_pos"	VALUE = "{ l.input_pos + l.value }">
		<MvELSE>
			<MvASSIGN NAME = "l.output"		VALUE = "">

			<MvWHILE EXPR = "{ 1 }">
				<MvIF EXPR = "{ NOT CBOR_Decode_Value( l.input, l.input_pos, l.input_len, l.chunk ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
				
				<MvASSIGN NAME = "l.output"	VALUE = "{ l.output $ l.chunk }">

				<MvIF EXPR = "{ asciivalue( substring_var( l.input, l.input_pos, 1 ) ) EQ 255 }">
					<MvWHILESTOP>
				</MvIF>
			</MvWHILE>
		</MvIF>
	<MvELSEIF EXPR = "{ l.major_type EQ 4 }">		<MvCOMMENT> Array </MvCOMMENT>
		<MvASSIGN NAME = "l.element_pos"	VALUE = 1>

		<MvWHILE EXPR = "{ ( l.addl_info EQ 31 ) OR l.value }">
			<MvREFERENCEARRAY NAME = "l.element" VARIABLE = "l.output">
				<MvDIMENSION INDEX = "{ l.element_pos++ }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT CBOR_Decode_Value( l.input, l.input_pos, l.input_len, l.element ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
	
			<MvIF EXPR = "{ l.addl_info EQ 31 }">
				<MvIF EXPR = "{ asciivalue( substring_var( l.input, l.input_pos, 1 ) ) EQ 255 }">
					<MvWHILESTOP>
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.value"	VALUE = "{ l.value - 1 }">
			</MvIF>
		</MvWHILE>
	<MvELSEIF EXPR = "{ l.major_type EQ 5 }">		<MvCOMMENT> Structure </MvCOMMENT>
		<MvWHILE EXPR = "{ ( l.addl_info EQ 31 ) OR l.value }">
			<MvIF EXPR = "{ NOT CBOR_Decode_Value( l.input, l.input_pos, l.input_len, l.member_name ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvREFERENCEARRAY NAME = "l.member" VARIABLE = "l.output">
				<MvMEMBER NAME = "{ l.member_name }">
			</MvREFERENCEARRAY>

			<MvIF EXPR = "{ NOT CBOR_Decode_Value( l.input, l.input_pos, l.input_len, l.member ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ l.addl_info EQ 31 }">
				<MvIF EXPR = "{ asciivalue( substring_var( l.input, l.input_pos, 1 ) ) EQ 255 }">
					<MvWHILESTOP>
				</MvIF>
			<MvELSE>
				<MvASSIGN NAME = "l.value"	VALUE = "{ l.value - 1 }">
			</MvIF>
		</MvWHILE>
	<MvELSEIF EXPR = "{ l.major_type EQ 6 }">		<MvCOMMENT> Tag </MvCOMMENT>
		<MvCOMMENT>
		|
		| Currently ignored
		|
		</MvCOMMENT>

		<MvFUNCTIONRETURN VALUE = "{ CBOR_Decode_Value( l.input, l.input_pos, l.input_len, l.output ) }">
	<MvELSEIF EXPR = "{ l.major_type EQ 7 }">		<MvCOMMENT> Simple Value or Float </MvCOMMENT>
		<MvIF EXPR = "{ l.addl_info EQ 20 }">		<MvCOMMENT> False </MvCOMMENT>
			<MvASSIGN NAME = "l.output"		VALUE = 0>
		<MvELSEIF EXPR = "{ l.addl_info EQ 21 }">	<MvCOMMENT> True </MvCOMMENT>
			<MvASSIGN NAME = "l.output"		VALUE = 1>
		<MvELSEIF EXPR = "{ l.addl_info EQ 22 }">	<MvCOMMENT> Null </MvCOMMENT>
			<MvASSIGN NAME = "l.output"		VALUE = "">
		<MvELSEIF EXPR = "{ l.addl_info EQ 25 }">	<MvCOMMENT> 16-bit float </MvCOMMENT>
			<MvASSIGN NAME = "l.exp"		VALUE = "{ ( l.value BITSR 10 ) BITAND 0x1F }">
			<MvASSIGN NAME = "l.mant"		VALUE = "{ l.value BITAND 0x3FF }">

			<MvIF EXPR = "{ l.exp EQ 0 }">				<MvASSIGN NAME = "l.abs_value" VALUE = "{ l.mant * power( 2, -14 - 11 + 1 ) }">
			<MvELSEIF EXPR = "{ l.exp NE 0x1F }">		<MvASSIGN NAME = "l.abs_value" VALUE = "{ ( l.mant BITOR 0x400 ) * power( 2, l.exp - ( 15 + 11 - 1 ) ) }">
			<MvELSEIF EXPR = "{ l.mant EQ 0 }">			<MvASSIGN NAME = "l.abs_value" VALUE = "Infinity">
			<MvELSE>									<MvASSIGN NAME = "l.abs_value" VALUE = "NaN">
			</MvIF>

			<MvIF EXPR = "{ l.value BITAND 0x8000 }">
				<MvIF EXPR = "{ l.abs_value EQ 0 }">	<MvASSIGN NAME = "l.output" VALUE = "{ -0.0 }">
				<MvELSE>								<MvASSIGN NAME = "l.output"	VALUE = "{ 0.0 - l.abs_value }">
				</MvIF>
			<MvELSE>									<MvASSIGN NAME = "l.output" VALUE = "{ l.abs_value }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.addl_info EQ 26 }">	<MvCOMMENT> 32-bit float </MvCOMMENT>
			<MvASSIGN NAME = "l.exp"		VALUE = "{ ( l.value BITSR 23 ) BITAND 0xFF }">
			<MvASSIGN NAME = "l.mant"		VALUE = "{ l.value BITAND 0x7FFFFF }">

			<MvIF EXPR = "{ l.exp EQ 0 }">				<MvASSIGN NAME = "l.abs_value" VALUE = "{ l.mant * power( 2, -126 - 24 + 1 ) }">
			<MvELSEIF EXPR = "{ l.exp NE 0xFF }">		<MvASSIGN NAME = "l.abs_value" VALUE = "{ ( l.mant BITOR 0x800000 ) * power( 2, l.exp - ( 127 + 24 - 1 ) ) }">
			<MvELSEIF EXPR = "{ l.mant EQ 0 }">			<MvASSIGN NAME = "l.abs_value" VALUE = "Infinity">
			<MvELSE>									<MvASSIGN NAME = "l.abs_value" VALUE = "NaN">
			</MvIF>

			<MvIF EXPR = "{ l.value BITAND 0x80000000 }">
				<MvIF EXPR = "{ l.abs_value EQ 0 }">	<MvASSIGN NAME = "l.output" VALUE = "{ -0.0 }">
				<MvELSE>								<MvASSIGN NAME = "l.output"	VALUE = "{ 0.0 - l.abs_value }">
				</MvIF>
			<MvELSE>									<MvASSIGN NAME = "l.output" VALUE = "{ l.abs_value }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.addl_info EQ 27 }">	<MvCOMMENT> 64-bit float </MvCOMMENT>
			<MvASSIGN NAME = "l.exp"		VALUE = "{ ( l.value_high BITAND 0x7FF00000 ) BITSR 20 }">
			<MvASSIGN NAME = "l.mant"		VALUE = "{ ( ( l.value_high BITAND 0xFFFFF ) * power( 2, 32 ) ) + ( l.value_low BITAND 0x7FFFFFFF ) }">

			<MvCOMMENT>
			|
			| Handle high order bit in value_low
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ l.value_low BITAND 0x80000000 }">
				<MvASSIGN NAME = "l.mant"	VALUE = "{ l.mant + 2147483648.0 }">
			</MvIF>

			<MvCOMMENT>
			|
			| Implicit 53rd bit if not all 0s or all 1s
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ ( l.mant NE 0 ) AND ( l.mant NE 4503599627370495.0 ) }">
				<MvASSIGN NAME = "l.mant"	VALUE = "{ l.mant + 4503599627370496.0 }">
			</MvIF>

			<MvIF EXPR = "{ l.exp EQ 0 }">				<MvASSIGN NAME = "l.abs_value" VALUE = "{ l.mant * power( 2, -1022 - 53 + 1 ) }">
			<MvELSEIF EXPR = "{ l.exp NE 0x7FF }">		<MvASSIGN NAME = "l.abs_value" VALUE = "{ l.mant * power( 2, l.exp - ( 1023 + 53 - 1 ) ) }">
			<MvELSEIF EXPR = "{ l.mant EQ 0 }">			<MvASSIGN NAME = "l.abs_value" VALUE = "Infinity">
			<MvELSE>									<MvASSIGN NAME = "l.abs_value" VALUE = "NaN">
			</MvIF>

			<MvIF EXPR = "{ l.value_high BITAND 0x80000000 }">
				<MvIF EXPR = "{ l.abs_value EQ 0 }">	<MvASSIGN NAME = "l.output" VALUE = "{ -0.0 }">
				<MvELSE>								<MvASSIGN NAME = "l.output"	VALUE = "{ 0.0 - l.abs_value }">
				</MvIF>
			<MvELSE>									<MvASSIGN NAME = "l.output" VALUE = "{ l.abs_value }">
			</MvIF>
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00042', 'Unexpected major type ' $ l.major_type ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Base64URLEncode" PARAMETERS = "value" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.search" INDEX = 1 VALUE = "=">	<MvASSIGN NAME = "l.replace" INDEX = 1 VALUE = "">
	<MvASSIGN NAME = "l.search" INDEX = 2 VALUE = "+">	<MvASSIGN NAME = "l.replace" INDEX = 2 VALUE = "-">
	<MvASSIGN NAME = "l.search" INDEX = 3 VALUE = "/">	<MvASSIGN NAME = "l.replace" INDEX = 3 VALUE = "_">

	<MvFUNCTIONRETURN VALUE = "{ glosub_array( crypto_base64_encode( l.value ), l.search, l.replace ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Parse_CIDR_Components" PARAMETERS = "cidr, components var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.slash_pos"			VALUE = "{ '/' IN l.cidr }">

	<MvIF EXPR = "{ l.slash_pos EQ 0 }">
		<MvASSIGN NAME = "l.ip"				VALUE = "{ l.cidr }">
		<MvASSIGN NAME = "l.routing_prefix" VALUE = "">
	<MvELSE>
		<MvASSIGN NAME = "l.ip"				VALUE = "{ substring_var( l.cidr, 1, l.slash_pos - 1 ) }">
		<MvASSIGN NAME = "l.routing_prefix"	VALUE = "{ substring_var( l.cidr, l.slash_pos + 1, len_var( l.cidr ) - l.slash_pos ) }">

		<MvIF EXPR = "{ ISNULL l.routing_prefix }">
			<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00049', 'Invalid CIDR notation' ) }">
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "l.ip_version"				VALUE = "{ miva_ip_version( l.ip ) }">

	<MvIF EXPR = "{ l.ip_version EQ 4 }">
		<MvASSIGN NAME = "l.version"			VALUE = 4>

		<MvIF EXPR = "{ ISNULL l.routing_prefix }">
			<MvASSIGN NAME = "l.routing_prefix" VALUE = 32>
		</MvIF>
	<MvELSEIF EXPR = "{ l.ip_version EQ 6 }">
		<MvASSIGN NAME = "l.version"			VALUE = 6>

		<MvIF EXPR = "{ ISNULL l.routing_prefix }">
			<MvASSIGN NAME = "l.routing_prefix" VALUE = 128>
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ Error( 'MER-UTL-PUB-00048', 'Invalid IPv4 / IPv6 address format' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.components"					VALUE = "">
	<MvASSIGN NAME = "l.components:version" 		VALUE = "{ l.version }">
	<MvASSIGN NAME = "l.components:ip"				VALUE = "{ l.ip }">
	<MvASSIGN NAME = "l.components:routing_prefix"	VALUE = "{ l.routing_prefix }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Normalize_CIDR_List" PARAMETERS = "cidrs" STANDARDOUTPUTLEVEL = "">	
	<MvASSIGN NAME = "l.unique_cidrs" VALUE = "">

	<MvFOREACH ITERATOR = "l.entry" ARRAY = "l.entries" COUNT = "{ miva_splitstring( l.cidrs, ',', l.entries, 'trim,noempty' ) }">
		<MvIF EXPR = "{ NOT miva_array_search( l.unique_cidrs, 1, l.element, 'l.element EQ l.entry' ) }">
			<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_insert_var( l.unique_cidrs, l.entry, -1 ) }">
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ miva_joinstring( l.unique_cidrs, ', ', '' ) }">
</MvFUNCTION>

<MvCOMMENT>
|
| Dummy Basket Functions
|
</MvCOMMENT>

<MvFUNCTION NAME = "DummyBasket_Create" PARAMETERS = "order var, basket var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Session:dummybasket:basket:order_id EQ l.order:id }">
		<MvASSIGN NAME = "l.basket" VALUE = "{ g.Session:dummybasket:basket }">
		<MvFUNCTIONRETURN VALUE = 1>
	<MvELSEIF EXPR = "{ NOT ISNULL g.Session:dummybasket }">
		<MvIF EXPR = "{ NOT DummyBasket_Cleanup() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvASSIGN NAME = "g.Session:dummybasket:orderitem_lookup"			VALUE = "">
	<MvASSIGN NAME = "g.Session:dummybasket:orderitem_count"			VALUE = "{ [ g.Library_Filename_DB ].OrderItemList_Load_Order( l.order:id, g.Session:dummybasket:orderitems ) }">

	<MvASSIGN NAME = "g.Session:dummybasket:ordercharge_lookup"			VALUE = "">
	<MvASSIGN NAME = "g.Session:dummybasket:ordercharge_count"			VALUE = "{ [ g.Library_Filename_DB ].OrderChargeList_Load_Order( l.order:id, g.Session:dummybasket:ordercharges ) }">

	<MvASSIGN NAME = "g.Session:dummybasket:orderinfo_lookup"			VALUE = "">
	<MvASSIGN NAME = "g.Session:dummybasket:orderinfo_count"			VALUE = "{ [ g.Library_Filename_DB ].OrderInfoList_Load_Order( l.order:id, g.Session:dummybasket:orderinfos ) }">

	<MvASSIGN NAME = "g.Session:dummybasket:orderdiscounttotal_lookup"	VALUE = "">
	<MvASSIGN NAME = "g.Session:dummybasket:orderdiscounttotal_count"	VALUE = "{ [ g.Module_Feature_PGR_DB ].OrderDiscountTotalList_Load_Order( l.order:id, g.Session:dummybasket:orderdiscounttotals ) }">

	<MvASSIGN NAME = "g.Session:dummybasket:ordercoupon_lookup"			VALUE = "">
	<MvASSIGN NAME = "g.Session:dummybasket:ordercoupon_count"			VALUE = "{ [ g.Module_Feature_PGR_DB ].OrderCouponList_Load_Order( l.order:id, g.Session:dummybasket:ordercoupons ) }">

	<MvCOMMENT>
	|
	| Create a dummy basket record with the information from the order
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.basket"				VALUE = "">
	<MvASSIGN NAME = "l.basket:cust_id"		VALUE = "{ l.order:cust_id }">
	<MvASSIGN NAME = "l.basket:order_id"	VALUE = "{ l.order:id }">
	<MvASSIGN NAME = "l.basket:order_proc"	VALUE = 0>
	<MvASSIGN NAME = "l.basket:ship_id"		VALUE = "{ l.order:ship_id }">
	<MvASSIGN NAME = "l.basket:ship_data"	VALUE = "{ l.order:ship_data }">
	<MvASSIGN NAME = "l.basket:session_id"	VALUE = "{ MakeSessionID() }">
	<MvASSIGN NAME = "l.basket:lastupdate"	VALUE = "{ s.time_t }">

	<MvASSIGN NAME = "l.basket:ship_fname"	VALUE = "{ l.order:ship_fname }">
	<MvASSIGN NAME = "l.basket:ship_lname"	VALUE = "{ l.order:ship_lname }">
	<MvASSIGN NAME = "l.basket:ship_email"	VALUE = "{ l.order:ship_email }">
	<MvASSIGN NAME = "l.basket:ship_comp"	VALUE = "{ l.order:ship_comp }">
	<MvASSIGN NAME = "l.basket:ship_phone"	VALUE = "{ l.order:ship_phone }">
	<MvASSIGN NAME = "l.basket:ship_fax"	VALUE = "{ l.order:ship_fax }">
	<MvASSIGN NAME = "l.basket:ship_addr1"	VALUE = "{ l.order:ship_addr1 }">
	<MvASSIGN NAME = "l.basket:ship_addr2"	VALUE = "{ l.order:ship_addr2 }">
	<MvASSIGN NAME = "l.basket:ship_city"	VALUE = "{ l.order:ship_city }">
	<MvASSIGN NAME = "l.basket:ship_state"	VALUE = "{ l.order:ship_state }">
	<MvASSIGN NAME = "l.basket:ship_zip"	VALUE = "{ l.order:ship_zip }">
	<MvASSIGN NAME = "l.basket:ship_cntry"	VALUE = "{ l.order:ship_cntry }">
	<MvASSIGN NAME = "l.basket:ship_res"	VALUE = "{ l.order:ship_res }">

	<MvASSIGN NAME = "l.basket:bill_fname"	VALUE = "{ l.order:bill_fname }">
	<MvASSIGN NAME = "l.basket:bill_lname"	VALUE = "{ l.order:bill_lname }">
	<MvASSIGN NAME = "l.basket:bill_email"	VALUE = "{ l.order:bill_email }">
	<MvASSIGN NAME = "l.basket:bill_comp"	VALUE = "{ l.order:bill_comp }">
	<MvASSIGN NAME = "l.basket:bill_phone"	VALUE = "{ l.order:bill_phone }">
	<MvASSIGN NAME = "l.basket:bill_fax"	VALUE = "{ l.order:bill_fax }">
	<MvASSIGN NAME = "l.basket:bill_addr1"	VALUE = "{ l.order:bill_addr1 }">
	<MvASSIGN NAME = "l.basket:bill_addr2"	VALUE = "{ l.order:bill_addr2 }">
	<MvASSIGN NAME = "l.basket:bill_city"	VALUE = "{ l.order:bill_city }">
	<MvASSIGN NAME = "l.basket:bill_state"	VALUE = "{ l.order:bill_state }">
	<MvASSIGN NAME = "l.basket:bill_zip"	VALUE = "{ l.order:bill_zip }">
	<MvASSIGN NAME = "l.basket:bill_cntry"	VALUE = "{ l.order:bill_cntry }">
	<MvASSIGN NAME = "l.basket:tax_exempt"  VALUE = 0>

	<MvIF EXPR = "{ l.basket:cust_id }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_CUS_UT ].TaxExempt_Load_Customer_ID( l.basket:cust_id, l.basket:tax_exempt ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Basket_Insert( l.basket ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Copy all non-cancelled OrderItems into basket items
	|
	</MvCOMMENT>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.orderitem" ARRAY = "g.Session:dummybasket:orderitems" COUNT = "{ g.Session:dummybasket:orderitem_count }">
		<MvIF EXPR = "{ l.orderitem:status EQ 300 }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.basketitem"				VALUE = "{ l.orderitem }">
		<MvASSIGN NAME = "l.basketitem:basket_id"	VALUE = "{ l.basket:basket_id }">
		<MvASSIGN NAME = "l.orderoption_count"		VALUE = "{ [ g.Library_Filename_DB ].OrderOptionList_Load_Line( l.orderitem:line_id, l.orderoptions ) }">

		<MvIF EXPR = "{ NOT OrderItem_DetermineVariant_WithOptions( l.orderitem, l.orderoptions, l.orderoption_count, l.null, l.basketitem:variant_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvCOMMENT>
		|
		| Delete the basket item to ensure any vestigial items/option/discounts with the
		| same line id are removed, then insert the basketitem using the lowlevel function
		| to maintain the order item's line_id
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketItem_Delete( l.basketitem:line_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		<MvELSEIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketItem_Insert_LowLevel( l.basketitem ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvREFERENCE NAME = "g.Session:dummybasket:orderitem_lookup" INDEX = "{ l.basketitem:line_id }" VARIABLE = "{ 'g.Session:dummybasket:orderitems[' $ l.pos $ ']' }">

		<MvFOREACH ITERATOR = "l.orderitemdiscount" ARRAY = "l.orderitemdiscounts" COUNT = "{ [ g.Library_Filename_DB ].OrderItemDiscountList_Load_Line( l.orderitem:line_id, l.orderitemdiscounts ) }">
			<MvASSIGN NAME = "l.basketitemdiscount"				VALUE = "{ l.orderitemdiscount }">
			<MvASSIGN NAME = "l.basketitemdiscount:basket_id"	VALUE = "{ l.basket:basket_id }">

			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketItemDiscount_Insert( l.basketitemdiscount ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvFOREACH>

		<MvFOREACH ITERATOR = "l.orderoption" ARRAY = "l.orderoptions" COUNT = "{ l.orderoption_count }">
			<MvASSIGN NAME = "l.basketoption"			VALUE = "{ l.orderoption }">
			<MvASSIGN NAME = "l.basketoption:basket_id"	VALUE = "{ l.basket:basket_id }">

			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketOption_Insert( l.basketoption ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFOREACH ITERATOR = "l.orderoptiondiscount" ARRAY = "l.orderoptiondiscounts" COUNT = "{ [ g.Library_Filename_DB ].OrderOptionDiscountList_Load_LineOption_ID( l.orderoption:id, l.orderoptiondiscounts ) }">
				<MvASSIGN NAME = "l.basketoptiondiscount"				VALUE = "{ l.orderoptiondiscount }">
				<MvASSIGN NAME = "l.basketoptiondiscount:basket_id"		VALUE = "{ l.basket:basket_id }">

				<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketOptionDiscount_Insert( l.basketoptiondiscount ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvFOREACH>
		</MvFOREACH>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Copy OrderCharges
	|
	</MvCOMMENT>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.ordercharge" ARRAY = "g.Session:dummybasket:ordercharges" COUNT = "{ g.Session:dummybasket:ordercharge_count }">
		<MvASSIGN NAME = "l.ordercharge:deleted"	VALUE = 1>
		<MvASSIGN NAME = "l.basketcharge" 			VALUE = "{ l.ordercharge }">
		<MvASSIGN NAME = "l.basketcharge:basket_id" VALUE = "{ l.basket:basket_id }">

		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketCharge_Insert( l.basketcharge ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvREFERENCE NAME = "g.Session:dummybasket:ordercharge_lookup" INDEX = "{ l.basketcharge:charge_id }" VARIABLE = "{ 'g.Session:dummybasket:ordercharges[' $ l.pos $ ']' }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Copy OrderInfos
	|
	</MvCOMMENT>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.orderinfo" ARRAY = "g.Session:dummybasket:orderinfos" COUNT = "{ g.Session:dummybasket:orderinfo_count }">
		<MvASSIGN NAME = "l.orderinfo:deleted"		VALUE = 1>
		<MvASSIGN NAME = "l.basketinfo" 			VALUE = "{ l.orderinfo }">
		<MvASSIGN NAME = "l.basketinfo:basket_id"	VALUE = "{ l.basket:basket_id }">
		<MvASSIGN NAME = "l.basketinfo:clronmod"	VALUE = 0>
		<MvASSIGN NAME = "l.basketinfo:orderinfo"	VALUE = 1>

		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketInfo_Insert( l.basketinfo ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvREFERENCE NAME = "g.Session:dummybasket:orderinfo_lookup" MEMBER = "{ l.basketinfo:module_id $ ':' $ l.basketinfo:type }" VARIABLE = "{ 'g.Session:dummybasket:orderinfos[' $ l.pos $ ']' }">
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Copy OrderDiscountTotals
	|
	</MvCOMMENT>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.orderdiscounttotal" ARRAY = "g.Session:dummybasket:orderdiscounttotals" COUNT = "{ g.Session:dummybasket:orderdiscounttotal_count }">
		<MvASSIGN NAME = "l.basketdiscounttotal" 			VALUE = "{ l.orderdiscounttotal }">
		<MvASSIGN NAME = "l.basketdiscounttotal:basket_id"	VALUE = "{ l.basket:basket_id }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].BasketDiscountTotal_Insert( l.basketdiscounttotal ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvREFERENCE NAME = "g.Session:dummybasket:orderdiscounttotal_lookup" INDEX = "{ l.basketdiscounttotal:pgrp_id }" VARIABLE = "{ 'g.Session:dummybasket:orderdiscounttotals[' $ l.pos $ ']' }">
	</MvFOREACH>
	
	<MvCOMMENT>
	|
	| Copy OrderCoupons
	|
	</MvCOMMENT>

	<MvFOREACH INDEX = "l.pos" ITERATOR = "l.ordercoupon" ARRAY = "g.Session:dummybasket:ordercoupons" COUNT = "{ g.Session:dummybasket:ordercoupon_count }">
		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].BasketCoupon_Insert( l.basket:basket_id, l.ordercoupon:coupon_id, l.ordercoupon:total ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvREFERENCE NAME = "g.Session:dummybasket:ordercoupon_lookup" INDEX = "{ l.ordercoupon:coupon_id }" VARIABLE = "{ 'g.Session:dummybasket:ordercoupons[' $ l.pos $ ']' }">
	</MvFOREACH>

	<MvASSIGN NAME = "g.Session:dummybasket:basket" VALUE = "{ l.basket }">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DummyBasket_Copy" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.Session:dummybasket }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvREFERENCE NAME = "l.basket" VARIABLE = "g.Session:dummybasket:basket">

	<MvCOMMENT>
	|
	| Update item-level tax
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.basketitem" ARRAY = "l.basketitems" COUNT = "{ [ g.Library_Filename_DB ].BasketItemList_Load_Basket( l.basket:basket_id, l.basketitems ) }">
		<MvIF EXPR = "{ NOT miva_element_exists( g.Session:dummybasket:orderitem_lookup, l.basketitem:line_id ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.updated_orderitem" VARIABLE = "g.Session:dummybasket:orderitem_lookup">
			<MvDIMENSION INDEX = "{ l.basketitem:line_id }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.updated_orderitem:tax EQ l.basketitem:tax }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.updated_orderitem:tax"	VALUE = "{ l.basketitem:tax }">

		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].OrderItem_Update_Tax( l.updated_orderitem ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Reconcile charges: tax is updated for all charges, and other fields for SHIPPING, HANDLING and TAX fields
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.basketcharge" ARRAY = "l.basketcharges" COUNT = "{ [ g.Library_Filename_DB ].BasketChargeList_Load_Basket( l.basket:basket_id, l.basketcharges ) }">
		<MvIF EXPR = "{ NOT miva_element_exists( g.Session:dummybasket:ordercharge_lookup, l.basketcharge:charge_id ) }">
			<MvASSIGN NAME = "l.inserted_ordercharge"				VALUE = "{ l.basketcharge }">
			<MvASSIGN NAME = "l.inserted_ordercharge:order_id"		VALUE = "{ l.basket:order_id }">

			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].OrderCharge_Insert( l.inserted_ordercharge ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvREFERENCEARRAY NAME = "l.updated_ordercharge" VARIABLE = "g.Session:dummybasket:ordercharge_lookup">
				<MvDIMENSION INDEX = "{ l.basketcharge:charge_id }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.updated_ordercharge:deleted"		VALUE = 0>

			<MvIF EXPR = "{	( l.updated_ordercharge:module_id EQ l.basketcharge:module_id )		AND
							( l.updated_ordercharge:type EQ l.basketcharge:type )				AND
							( l.updated_ordercharge:descrip EQ l.basketcharge:descrip )			AND
							( l.updated_ordercharge:amount EQ l.basketcharge:amount )			AND
							( l.updated_ordercharge:disp_amt EQ l.basketcharge:disp_amt )		AND
							( l.updated_ordercharge:tax_exempt EQ l.basketcharge:tax_exempt )	AND
							( l.updated_ordercharge:tax EQ l.basketcharge:tax ) }">
				<MvFOREACHCONTINUE>
			</MvIF>

			<MvASSIGN NAME = "l.updated_ordercharge:tax"			VALUE = "{ l.basketcharge:tax }">

			<MvIF EXPR = "{ ( l.basketcharge:type EQ 'SHIPPING' ) OR
							( l.basketcharge:type EQ 'HANDLING' ) OR
							( l.basketcharge:type EQ 'TAX' ) }">
				<MvASSIGN NAME = "l.updated_ordercharge:module_id"	VALUE = "{ l.basketcharge:module_id }">
				<MvASSIGN NAME = "l.updated_ordercharge:type"		VALUE = "{ l.basketcharge:type }">
				<MvASSIGN NAME = "l.updated_ordercharge:descrip"	VALUE = "{ l.basketcharge:descrip }">
				<MvASSIGN NAME = "l.updated_ordercharge:amount"		VALUE = "{ l.basketcharge:amount }">
				<MvASSIGN NAME = "l.updated_ordercharge:disp_amt"	VALUE = "{ l.basketcharge:disp_amt }">
				<MvASSIGN NAME = "l.updated_ordercharge:tax_exempt"	VALUE = "{ l.basketcharge:tax_exempt }">
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].OrderCharge_Update( l.updated_ordercharge ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.deleted_ordercharge" ARRAY = "l.deleted_ordercharges" COUNT = "{ miva_array_filter_ref( g.Session:dummybasket:ordercharges, 1, l.ordercharge, 'l.ordercharge:deleted', l.deleted_ordercharges ) }">
		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].OrderCharge_Delete_Charge( l.deleted_ordercharge:charge_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Reconcile info
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.basketinfo" ARRAY = "l.basketinfos" COUNT = "{ [ g.Library_Filename_DB ].BasketInfoList_Load_Basket( l.basket:basket_id, l.basketinfos ) }">
		<MvIF EXPR = "{ NOT l.basketinfo:orderinfo }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.updated_orderinfo" VARIABLE = "g.Session:dummybasket:orderinfo_lookup">
			<MvMEMBER NAME = "{ l.basketinfo:module_id $ ':' $ l.basketinfo:type }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ ISNULL l.updated_orderinfo }">
			<MvASSIGN NAME = "l.inserted_orderinfo"				VALUE = "{ l.basketinfo }">
			<MvASSIGN NAME = "l.inserted_orderinfo:order_id"	VALUE = "{ l.basket:order_id }">

			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].OrderInfo_Insert( l.inserted_orderinfo ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvASSIGN NAME = "l.updated_orderinfo:info"			VALUE = "{ l.basketinfo:info }">
			<MvASSIGN NAME = "l.updated_orderinfo:deleted"		VALUE = 0>

			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].OrderInfo_Update( l.updated_orderinfo ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFOREACH ITERATOR = "l.deleted_orderinfo" ARRAY = "l.deleted_orderinfos" COUNT = "{ miva_array_filter_ref( g.Session:dummybasket:orderinfos, 1, l.orderinfo, 'l.orderinfo:deleted', l.deleted_orderinfos ) }">
		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].OrderInfo_Delete( l.deleted_orderinfo:order_id, l.deleted_orderinfo:module_id, l.deleted_orderinfo:type ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Reconcile discount totals
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.basketdiscounttotal" ARRAY = "l.basketdiscounttotals" COUNT = "{ [ g.Module_Feature_PGR_DB ].BasketDiscountTotalList_Load_Basket( l.basket:basket_id, l.basketdiscounttotals ) }">
		<MvIF EXPR = "{ NOT miva_element_exists( g.Session:dummybasket:orderdiscounttotal_lookup, l.basketdiscounttotal:pgrp_id ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.updated_orderdiscounttotal" VARIABLE = "g.Session:dummybasket:orderdiscounttotal_lookup">
			<MvDIMENSION INDEX = "{ l.basketdiscounttotal:pgrp_id }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.updated_orderdiscounttotal:total EQ l.basketdiscounttotal:total }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.updated_orderdiscounttotal:total"	VALUE = "{ l.basketdiscounttotal:total }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].OrderDiscountTotal_Update_Total( l.updated_orderdiscounttotal ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvCOMMENT>
	|
	| Reconcile coupon totals
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.basketcoupon" ARRAY = "l.basketcoupons" COUNT = "{ [ g.Module_Feature_PGR_DB ].BasketCouponList_Load_Basket( l.basket:basket_id, l.basketcoupons ) }">
		<MvIF EXPR = "{ NOT miva_element_exists( g.Session:dummybasket:ordercoupon_lookup, l.basketcoupon:coupon_id ) }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvREFERENCEARRAY NAME = "l.updated_ordercoupon" VARIABLE = "g.Session:dummybasket:ordercoupon_lookup">
			<MvDIMENSION INDEX = "{ l.basketcoupon:coupon_id }">
		</MvREFERENCEARRAY>

		<MvIF EXPR = "{ l.updated_ordercoupon:total EQ l.basketcoupon:total }">
			<MvFOREACHCONTINUE>
		</MvIF>

		<MvASSIGN NAME = "l.updated_ordercoupon:total"	VALUE = "{ l.basketcoupon:total }">

		<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].OrderCoupon_Update_Total( l.updated_ordercoupon:order_id, l.updated_ordercoupon:coupon_id, l.updated_ordercoupon:total ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DummyBasket_Cleanup" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL g.Session:dummybasket }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Basket_Reset( g.Session:dummybasket:basket ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "g.Session:dummybasket"	VALUE = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Order_Calculate_Charges_BuildParam_CalculateShipping" PARAMETERS = "params var, shipping_module var, shipping_data" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.params:shipping"					VALUE = 1>
	<MvASSIGN NAME = "l.params:shipping_retainonfailure"	VALUE = 0>
	<MvASSIGN NAME = "l.params:shipping_module"				VALUE = "{ l.shipping_module }">
	<MvASSIGN NAME = "l.params:shipping_data"				VALUE = "{ l.shipping_data }">
</MvFUNCTION>

<MvFUNCTION NAME = "Order_Calculate_Charges_BuildParam_CalculateShipping_RetainOnFailure" PARAMETERS = "params var, shipping_module var, shipping_data" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.params:shipping"					VALUE = 1>
	<MvASSIGN NAME = "l.params:shipping_retainonfailure"	VALUE = 1>
	<MvASSIGN NAME = "l.params:shipping_module"				VALUE = "{ l.shipping_module }">
	<MvASSIGN NAME = "l.params:shipping_data"				VALUE = "{ l.shipping_data }">
</MvFUNCTION>

<MvFUNCTION NAME = "Order_Calculate_Charges_BuildParam_CalculateTax" PARAMETERS = "params var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.params:tax"	VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Order_Calculate_Charges" PARAMETERS = "order var, params var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Set legacy runtime variables for modules that may not have transitioned to using g.Store:xxx_mod
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Module_Load_ID_Cached( g.Store:currncy_id, g.Store_Module_Currency )	OR
					NOT [ g.Library_Filename_DB ].Module_Load_ID_Cached( g.Store:tax_id, g.Store_Module_Tax )			OR
					NOT [ g.Library_Filename_DB ].Module_Load_ID_Cached( g.Store:ui_id, g.Store_Module_UI ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "g.Module_Store_Module_Currency" 	VALUE = "{ g.Module_Root $ g.Store_Module_Currency:module }">
	<MvASSIGN NAME = "g.Module_Store_Module_Tax" 		VALUE = "{ g.Module_Root $ g.Store_Module_Tax:module }">
	<MvASSIGN NAME = "g.Module_Store_Module_UI"			VALUE = "{ g.Module_Root $ g.Store_Module_UI:module }">

	<MvCOMMENT>
	|
	| A dummy basket is created to calculate shipping and tax (depending on the API version of the tax module)
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT DummyBasket_Create( l.order, g.Basket ) }">
		<MvASSIGN NAME = "l.result"	VALUE = 0>
	<MvELSE>
		<MvASSIGN NAME = "l.result"	VALUE = "{ Order_Calculate_Charges_LowLevel( l.order, l.params ) }">
	</MvIF>

	<MvASSIGN NAME = "l.null"		VALUE = "{ DummyBasket_Cleanup() }">

	<MvASSIGN NAME = "g.Store_Module_Currency"			VALUE = "{ g.Store_Module_Currency:module }">
	<MvASSIGN NAME = "g.Store_Module_Tax"				VALUE = "{ g.Store_Module_Tax:module }">
	<MvASSIGN NAME = "g.Store_Module_UI"				VALUE = "{ g.Store_Module_UI:module }">

	<MvASSIGN NAME = "g.Module_Store_Module_Currency" 	VALUE = "{ g.Module_Root $ g.Store_Module_Currency }">
	<MvASSIGN NAME = "g.Module_Store_Module_Tax" 		VALUE = "{ g.Module_Root $ g.Store_Module_Tax }">
	<MvASSIGN NAME = "g.Module_Store_Module_UI"			VALUE = "{ g.Module_Root $ g.Store_Module_UI }">

	<MvFUNCTIONRETURN VALUE = "{ l.result }">
</MvFUNCTION>

<MvFUNCTION NAME = "Order_Calculate_Charges_LowLevel" PARAMETERS = "order var, params var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.shipping_basketcharges"			VALUE = "">
	<MvASSIGN NAME = "l.shipping_basketcharge_count"	VALUE = 0>
	<MvASSIGN NAME = "l.dummybasket_copied"				VALUE = 0>

	<MvCOMMENT>
	|
	| Clear existing SHIPPING and TAX charges from the dummy basket.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ l.params:shipping }">
		<MvIF EXPR = "{ l.params:shipping_retainonfailure }">
			<MvASSIGN NAME = "l.shipping_basketcharge_count" VALUE = "{ [ g.Library_Filename_DB ].BasketChargeList_Load_Type( g.Basket:basket_id, 'SHIPPING', l.shipping_basketcharges ) }">
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'SHIPPING' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.params:tax }">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Basket_Reset_Tax( g.Basket:basket_id ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, 'TAX' ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.params:shipping }">
		<MvCOMMENT>
		|
		| Recalculate shipping
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_UT ].ShippingMethod_ApplyToBasket_LowLevel( l.params:shipping_module, l.params:shipping_data ) }">
			<MvIF EXPR = "{ NOT l.params:shipping_retainonfailure }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvCOMMENT>
			|
			| Shipping recalculation has failed and our caller wants us to retain existing charges in this case, so reinsert previously deleted shipping charges.
			| Handling and discounts could already be applied in these charges, so we bypass the rest of the shipping logic.
			|
			</MvCOMMENT>

			<MvFOREACH ITERATOR = "l.shipping_basketcharge" ARRAY = "l.shipping_basketcharges" COUNT = "{ l.shipping_basketcharge_count }">
				<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].BasketCharge_Insert_LowLevel( l.shipping_basketcharge ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>
			</MvFOREACH>
		<MvELSE>
			<MvCOMMENT>
			|
			| Recalculate handling charge
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_SHP_UT ].HandlingCharge_CalculateAndApplyToBasket() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvCOMMENT>
			|
			| Apply shipping discounts.  This code is slightly odd looking, in that we create and apply the discount_state
			| using the basket, but load the applicable price groups from the order.
			|
			</MvCOMMENT>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_CreateFromBasket( g.Basket, l.discount_state ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.pricegroup_count" VALUE = "{ [ g.Module_Feature_PGR_DB ].PriceGroupAndModuleList_Load_Order( l.order:id, l.pricegroups ) }">
			<MvEVAL EXPR = "{ [ g.Module_Feature_PGR_UT ].DiscountState_Set_PriceGroups( l.discount_state, l.pricegroups, l.pricegroup_count ) }">

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Basket( l.discount_state ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_Discount_Shipping( l.discount_state, l.params:shipping_module, l.params:shipping_data ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_UpdateShippingBasketCharges( l.discount_state ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_UT ].DiscountState_UpdateShippingBasketDiscountTotals( l.discount_state ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].BasketCoupon_Recalculate_Basket( g.Basket:basket_id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.params:tax }">
		<MvCOMMENT>
		|
		| If we are using a legacy tax module, we can apply tax directly to the dummy basket and allow its results
		| to be copied over.  Otherwise, we copy the dummy basket to the order (which will delete any existing TAX charges),
		| and then allow the tax module to process the resulting order.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ g.Store:tax_mod:api_ver LT 10.01 }">
			<MvIF EXPR = "{ NOT [ g.Module_Root $ g.Store:tax_mod:module ].TaxModule_Calculate_Basket( g.Store:tax_mod ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ NOT DummyBasket_Copy() }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.dummybasket_copied"	VALUE = 1>

			<MvIF EXPR = "{ NOT [ g.Library_Filename_DB ].Order_Reset_Tax( l.order:id ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ NOT [ g.Module_Root $ g.Store:tax_mod:module ].TaxModule_Calculate_Order( g.Store:tax_mod, l.order ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ NOT l.dummybasket_copied }">
		<MvIF EXPR = "{ NOT DummyBasket_Copy() }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>
