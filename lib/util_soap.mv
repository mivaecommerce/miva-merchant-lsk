<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2019 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-UTL-SOAP-
| Next Error Code: 1   
|
</MvCOMMENT>

<MvFUNCTION NAME = "Format_SOAP_DateTime" PARAMETERS = "time_t" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.soap_time" VALUE = "{ time_t_year( l.time_t, 0 ) $ '-' $ padl( time_t_month( l.time_t, 0 ), 2, '0' ) $ '-' $ padl( time_t_dayofmonth( l.time_t, 0 ), 2, '0' ) $
											  'T' $ padl( time_t_hour( l.time_t, 0 ), 2, '0' ) $ ':' $ padl( time_t_min( l.time_t, 0 ), 2, '0' ) $ ':' $ padl( time_t_sec( l.time_t, 0 ), 2, '0' ) $ 'Z' }">
	<MvFUNCTIONRETURN VALUE = "{ l.soap_time }">
</MvFUNCTION>

<MvFUNCTION NAME = "SOAP_Call" PARAMETERS = "endpoint, soap_action, response_namespace_domain, message var, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.soap_action }">
		<MvASSIGN NAME = "l.headers"	VALUE = "{ 'SOAPAction: "' $ l.soap_action $ '"' $ asciichar( 13 ) $ asciichar( 10 ) }">
	</MvIF>
												
	<MvFUNCTIONRETURN VALUE = "{ SOAP_Call_LowLevel( l.endpoint, l.response_namespace_domain, l.headers, '', '', '', l.message, l.output ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SOAP_Call_Timeout" PARAMETERS = "endpoint, soap_action, response_namespace_domain, timeout, message var, output var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ISNULL l.soap_action }">
		<MvASSIGN NAME = "l.headers"	VALUE = "{ 'SOAPAction: "' $ l.soap_action $ '"' $ asciichar( 13 ) $ asciichar( 10 ) }">
	</MvIF>

	<MvREFERENCE NAME = "l.params:endpoint"						VARIABLE = "l.endpoint">
	<MvREFERENCE NAME = "l.params:response_namespace_domain"	VARIABLE = "l.response_namespace_domain">
	<MvREFERENCE NAME = "l.params:timeout"						VARIABLE = "l.timeout">
	<MvREFERENCE NAME = "l.params:headers"						VARIABLE = "l.headers">
												
	<MvFUNCTIONRETURN VALUE = "{ SOAP_Call_Parameters_LowLevel( l.params, l.message, l.output ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SOAP_Authenticated_Call" PARAMETERS = "endpoint, soap_action, response_namespace_domain, login, password,  message var, output var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.headers"		VALUE = "{ 'Authorization: Basic ' $ crypto_base64_encode( l.login $ ':' $ l.password ) $ asciichar( 13 ) $ asciichar( 10 ) }">

	<MvIF EXPR = "{ NOT ISNULL l.soap_action }">
		<MvASSIGN NAME = "l.headers"	VALUE = "{ l.headers $ 'SOAPAction: "' $ l.soap_action $ '"' $ asciichar( 13 ) $ asciichar( 10 ) }">
	</MvIF>
												
	<MvFUNCTIONRETURN VALUE = "{ SOAP_Call_LowLevel( l.endpoint, l.response_namespace_domain, l.headers, '', '', '', l.message, l.output ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SOAP_Authenticated_Call_WithCertificate" PARAMETERS = "endpoint, soap_action, response_namespace_domain, login, password,  certfile, certtype, certpass, message var, output var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.headers"		VALUE = "{ 'Authorization: Basic ' $ crypto_base64_encode( l.login $ ':' $ l.password ) $ asciichar( 13 ) $ asciichar( 10 ) }">

	<MvIF EXPR = "{ NOT ISNULL l.soap_action }">
		<MvASSIGN NAME = "l.headers"	VALUE = "{ l.headers $ 'SOAPAction: "' $ l.soap_action $ '"' $ asciichar( 13 ) $ asciichar( 10 ) }">
	</MvIF>
												
	<MvFUNCTIONRETURN VALUE = "{ SOAP_Call_LowLevel( l.endpoint, l.response_namespace_domain, l.headers, l.certfile, l.certtype, l.certpass, l.message, l.output ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SOAP_Call_LowLevel" PARAMETERS = "endpoint, response_namespace_domain, headers var, certfile, certtype, certpass, message var, output var" STANDARDOUTPUTLEVEL = "">
	<MvREFERENCE NAME = "l.params:endpoint"						VARIABLE = "l.endpoint">
	<MvREFERENCE NAME = "l.params:response_namespace_domain"	VARIABLE = "l.response_namespace_domain">
	<MvREFERENCE NAME = "l.params:headers"						VARIABLE = "l.headers">
	<MvREFERENCE NAME = "l.params:certfile"						VARIABLE = "l.certfile">
	<MvREFERENCE NAME = "l.params:certtype"						VARIABLE = "l.certtype">
	<MvREFERENCE NAME = "l.params:certpass"						VARIABLE = "l.certpass">
	
	<MvFUNCTIONRETURN VALUE = "{ SOAP_Call_Parameters_LowLevel( l.params, l.message, l.output ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SOAP_Call_Parameters" PARAMETERS = "params, message var, response var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "{ SOAP_Call_Parameters_LowLevel( l.params, l.message, l.response ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SOAP_Call_Parameters_LowLevel" PARAMETERS = "params var, message var, response var" STANDARDOUTPUTLEVEL = "">
	<MIVA MvCALL_Error = "nonfatal, nodisplay">
	<MvCAPTURE VARIABLE = "l.response_raw">
		<MvIF EXPR = "{ ( NOT ISNULL l.params:certfile ) AND ( NOT ISNULL l.params:certtype ) }">
			<MvCALL METHOD			= "RAW"
					ACTION			= "{ l.params:endpoint }"
					HEADERS			= "{ l.params:headers }"
					CONTENT-TYPE	= "text/xml; charset=utf-8"
					CERTFILE		= "{ l.params:certfile }"
					CERTTYPE		= "{ l.params:certtype }"
					CERTPASS		= "{ l.params:certpass }"
					TIMEOUT			= "{ l.params:timeout }"
					FIELDS			= "l.message"
					FLAGS			= "{ l.params:flags }">
				<MvASSIGN NAME = "l.http_response"					VALUE = "{ s.callreturnheader[ 1 ] }">

				<MvIF EXPR = "{ s.callobjecttype EQ 'tag' }">
					<MvIF EXPR = "{ s.callobjectelement EQ '?xml' }">
						<MvFOREACH INDEX = "l.pos" ITERATOR = "l.attribute" ARRAY = "s.callobjectattribute" COUNT = "{ s.callobjectnumattributes }">
							<MvIF EXPR = "{ tolower( l.attribute ) EQ 'encoding' }">
								<MvASSIGN NAME = "l.xml_encoding"	VALUE = "{ s.callobjectvalue[ l.pos ] }">
							</MvIF>
						</MvFOREACH>

						<MvCALLCONTINUE>
					<MvELSEIF EXPR = "{ '/>' IN s.callvalue }">
						<MvEVAL EXPR = "{ glosub( s.callvalue, '/>', ' />' ) }">
						<MvCALLCONTINUE>
					</MvIF>
				</MvIF>

				<MvEVAL EXPR = "{ s.callvalue }">
			</MvCALL>
		<MvELSE>
			<MvCALL METHOD			= "RAW"
					ACTION			= "{ l.params:endpoint }"
					HEADERS			= "{ l.params:headers }"
					CONTENT-TYPE	= "text/xml; charset=utf-8"
					TIMEOUT			= "{ l.params:timeout }"
					FIELDS			= "l.message"
					FLAGS			= "{ l.params:flags }">
				<MvASSIGN NAME = "l.http_response"						VALUE = "{ s.callreturnheader[ 1 ] }">

				<MvIF EXPR = "{ s.callobjecttype EQ 'tag' }">
					<MvIF EXPR = "{ s.callobjectelement EQ '?xml' }">
						<MvFOREACH INDEX = "l.pos" ITERATOR = "l.attribute" ARRAY = "s.callobjectattribute" COUNT = "{ s.callobjectnumattributes }">
							<MvIF EXPR = "{ tolower( l.attribute ) EQ 'encoding' }">
								<MvASSIGN NAME = "l.xml_encoding"		VALUE = "{ s.callobjectvalue[ l.pos ] }">
							</MvIF>
						</MvFOREACH>

						<MvCALLCONTINUE>
					<MvELSEIF EXPR = "{ '/>' IN s.callvalue }">
						<MvEVAL EXPR = "{ glosub( s.callvalue, '/>', ' />' ) }">
						<MvCALLCONTINUE>
					</MvIF>
				</MvIF>

				<MvEVAL EXPR = "{ s.callvalue }">
			</MvCALL>
		</MvIF>
	</MvCAPTURE>
	<MIVA MvCALL_Error = "fatal, display">

	<MvIF EXPR = "{ g.MvCALL_Error }">
		<MvASSIGN NAME = "g.SOAP_Error_Type"			VALUE = "MvCALL">
		<MvASSIGN NAME = "g.SOAP_Error"					VALUE = "{ g.MvCALL_Error }">

		<MvFUNCTIONRETURN VALUE = 0>
	<MvELSEIF EXPR = "{ gettoken( l.http_response, ' ', 2 ) NE '200' }">
		<MvASSIGN NAME = "l.space_pos"					VALUE = "{ ' ' IN l.http_response }">

		<MvASSIGN NAME = "g.SOAP_Error_Type"			VALUE = "HTTP">
		<MvASSIGN NAME = "g.SOAP_Error"					VALUE = "{ substring_var( l.http_response, l.space_pos + 1, len_var( l.http_response ) - l.space_pos ) }">

		<MvCOMMENT>
		|
		| We do not return here, as we may also have a SOAP fault, so we need
		| to continue processing.
		|
		</MvCOMMENT>
	<MvELSE>
		<MvASSIGN NAME = "g.SOAP_Error_Type"			VALUE = "">
		<MvASSIGN NAME = "g.SOAP_Error"					VALUE = "">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ SOAP_Call_Response_ValidateParseAndFlatten( l.params:response_namespace_domain, l.xml_encoding, l.response_raw, l.response ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "SOAP_Call_Response_ValidateParseAndFlatten" PARAMETERS = "response_namespace_domain, xml_encoding, response_raw var, response var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT xml_parse_var( l.response_raw, l.xml ) }">
		<MvIF EXPR = "{ ISNULL g.SOAP_Error }">
			<MvEVAL EXPR = "{ xml_parse_error( l.error_line, l.error_message ) }">

			<MvASSIGN NAME = "g.SOAP_Error_Type"		VALUE = "XML">
			<MvASSIGN NAME = "g.SOAP_Error"				VALUE = "{ 'Unable to parse SOAP response: ' $ l.error_line $ ': ' $ l.error_message }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Begin parsing.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.null"							VALUE = "{ miva_struct_members( l.xml, l.xml_members ) }">
	<MvASSIGN NAME = "l.root_tag"						VALUE = "{ l.xml_members[ 1 ] }">

	<MvREFERENCEARRAY NAME = "l.soap_envelope"			VARIABLE = "l.xml">
		<MvMEMBER NAME = "{ l.root_tag }">
	</MvREFERENCEARRAY>

	<MvASSIGN NAME = "l.colon_pos"						VALUE = "{ ':' IN l.root_tag }">

	<MvIF EXPR = "{ l.colon_pos EQ 0 }">
		<MvREFERENCE NAME = "l.soap_domain" 			VARIABLE = "l.soap_envelope:attribute:xmlns">
	<MvELSE>
		<MvASSIGN NAME = "l.soap_namespace"				VALUE = "{ substring( l.root_tag, 1, l.colon_pos - 1 ) }">

		<MvREFERENCEARRAY NAME = "l.soap_domain"		VARIABLE = "l.soap_envelope">
			<MvMEMBER NAME = "attribute">
			<MvMEMBER NAME = "{ 'xmlns:' $ l.soap_namespace }">
		</MvREFERENCEARRAY>
	</MvIF>

	<MvIF EXPR = "{ l.soap_domain NE 'http://schemas.xmlsoap.org/soap/envelope/' }">
		<MvIF EXPR = "{ ISNULL g.SOAP_Error }">
			<MvASSIGN NAME = "g.SOAP_Error_Type"		VALUE = "XML">
			<MvASSIGN NAME = "g.SOAP_Error"				VALUE = "Invalid or missing SOAP Envelope namespace">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ( 'Envelope' ECIN l.soap_envelope:name ) NE len_var( l.soap_envelope:name ) }">
		<MvIF EXPR = "{ ISNULL g.SOAP_Error }">
			<MvASSIGN NAME = "g.SOAP_Error_Type"		VALUE = "XML">
			<MvASSIGN NAME = "g.SOAP_Error"				VALUE = "Invalid or missing SOAP Envelope">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Attempt to locate a soap:Body tag
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.soap_body" ARRAY = "l.soap_envelope:children">
		<MvIF EXPR = "{ ( 'Body' ECIN l.soap_body:name ) EQ len_var( l.soap_body:name ) }">
			<MvFOREACHSTOP>
		</MvIF>
	</MvFOREACH>

	<MvIF EXPR = "{ ( 'Body' ECIN l.soap_body:name ) NE len_var( l.soap_body:name ) }">
		<MvIF EXPR = "{ ISNULL g.SOAP_Error }">
			<MvASSIGN NAME = "g.SOAP_Error_Type"		VALUE = "XML">
			<MvASSIGN NAME = "g.SOAP_Error"				VALUE = "Invalid or missing SOAP Body">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Parse the soap:Body.  There can be either a soap:Fault tag or
	| a tag with the name of the action, which may have an optional
	| namespace.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.response"						VALUE = "{ l.soap_body:children[ 1 ] }">
	<MvASSIGN NAME = "l.response:encoding"				VALUE = "{ l.xml_encoding }">

	<MvIF EXPR = "{ ( 'Fault' ECIN l.response:name ) EQ len_var( l.response:name ) }">
		<MvASSIGN NAME = "g.SOAP_Error_Type"			VALUE = "SOAPFault">
		<MvASSIGN NAME = "g.SOAP_Error"					VALUE = "{ 'SOAP Fault: ' $ l.response:tags:faultcode[ 1 ]:value $ ': ' $ l.response:tags:faultstring[ 1 ]:value }">

		<MvIF EXPR = "{ len_var( l.response:tags:detail[ 1 ]:value ) }">
			<MvASSIGN NAME = "g.SOAP_Error"				VALUE = "{ g.SOAP_Error $ ': ' $ l.response:tags:detail[ 1 ]:value }">
		</MvIF>

		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	| Look for our target namespace
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.attributes" COUNT = "{ miva_struct_members( l.response:attribute, l.attributes ) }">
		<MvASSIGN NAME = "l.attribute"					VALUE = "{ tolower( l.attribute ) }">

		<MvIF EXPR = "{ l.attribute EQ 'xmlns' }">
			<MvIF EXPR = "{ l.response:attribute:xmlns NE l.response_namespace_domain }">
				<MvASSIGN NAME = "g.SOAP_Error_Type"	VALUE = "XML">
				<MvASSIGN NAME = "g.SOAP_Error"			VALUE = "{ 'Invalid response namespace domain.  Expected \'' $ l.response_namespace_domain $ '\', got \'' $ l.response:attribute:xmlns $ '\'' }">

				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.response:namespace"		VALUE = "">

			<MvFOREACHSTOP>
		<MvELSEIF EXPR = "{ ( 'xmlns:' CIN l.attribute ) EQ 1 }">
			<MvASSIGN NAME = "l.namespace"				VALUE = "{ substring( l.attribute, 7, len_var( l.attribute ) - 6 ) }">
		
			<MvREFERENCEARRAY NAME = "l.namespace_domain" VARIABLE = "l.response">
				<MvMEMBER NAME = "attribute">
				<MvMEMBER NAME = "{ l.attribute }">
			</MvREFERENCEARRAY>
				
			<MvIF EXPR = "{ l.namespace_domain EQ l.response_namespace_domain }">
				<MvASSIGN NAME = "l.response:namespace"	VALUE = "{ l.namespace $ ':' }">
				<MvFOREACHSTOP>
			</MvIF>
		</MvIF>
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = "{ ISNULL g.SOAP_Error }">
</MvFUNCTION>
