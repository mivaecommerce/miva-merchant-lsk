<MIVA STANDARDOUTPUTLEVEL = "">

<MvCOMMENT>
|
| Miva Merchant
|
| This file and the source codes contained herein are the property of
| Miva, Inc.  Use of this file is restricted to the specific terms and
| conditions in the License Agreement associated with this file.  Distribution
| of this file or portions of this file for uses not covered by the License
| Agreement is not allowed without a written agreement signed by an officer of
| Miva, Inc.
|
| Copyright 1998-2023 Miva, Inc.  All rights reserved.
| http://www.miva.com
|
| Prefix         : MER-DBE-PKT-
| Next Error Code: 3    
|
</MvCOMMENT>

<MvFUNCTION NAME = "AttributeTree_Load_ProductKit" PARAMETERS = "product_id, attributes var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	| Boolean options (checkbox, text, memo) always have a "present" variant component, with option_id 1.  If the
	| option is not requred, it also gets a "not present" variant component, with option_id 0.
	|
	</MvCOMMENT>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "ProductKits"
				QUERY	= "{ 'SELECT
								a.id			AS attr_id,
								0				AS attmpat_id,
								o.id			AS option_id,
								pk.part_id		AS part_id,
								pk.quantity		AS quantity,
								a.type			AS type,
								a.required		AS required
							  FROM
								' $ g.Store_Table_Prefix $ 'Attributes a
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'Options o ON o.attr_id = a.id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ProductKits pk ON pk.product_id = a.product_id AND pk.attr_id = a.id AND pk.attmpat_id = 0 AND pk.option_id = o.id
							  WHERE
								a.product_id	= ?								AND
								a.attemp_id		= 0								AND
								a.inventory		= 1								AND
								( a.type = \'radio\' OR a.type = \'select\' OR a.type = \'swatch-select\' )	AND
								o.id IS NOT NULL
							  UNION ALL
							  SELECT
								a.id			AS attr_id,
								0				AS attmpat_id,
								0				AS option_id,
								pk.part_id		AS part_id,
								pk.quantity		AS quantity,
								a.type			AS type,
								a.required		AS required
							  FROM
								' $ g.Store_Table_Prefix $ 'Attributes a
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ProductKits pk ON pk.product_id = a.product_id AND pk.attr_id = a.id AND pk.attmpat_id = 0 AND pk.option_id = 0
							  WHERE
								a.product_id	= ?	AND
								a.attemp_id		= 0	AND
								a.inventory		= 1 AND
								a.required		= 0 AND
								( a.type = \'text\' OR a.type = \'memo\' OR a.type = \'checkbox\' )
							  UNION ALL
							  SELECT
								a.id			AS attr_id,
								0				AS attmpat_id,
								1				AS option_id,
								pk.part_id		AS part_id,
								pk.quantity		AS quantity,
								a.type			AS type,
								a.required		AS required
							  FROM
								' $ g.Store_Table_Prefix $ 'Attributes a
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ProductKits pk ON pk.product_id = a.product_id AND pk.attr_id = a.id AND pk.attmpat_id = 0 AND pk.option_id = 1
							  WHERE
								a.product_id	= ?	AND
								a.attemp_id		= 0	AND
								a.inventory		= 1 AND
								( a.type = \'text\' OR a.type = \'memo\' OR a.type = \'checkbox\' )
							  UNION ALL
							  SELECT
								a.id			AS attr_id,
								ata.id			AS attmpat_id,
								ato.id			AS option_id,
								pk.part_id		AS part_id,
								pk.quantity		AS quantity,
								ata.type		AS type,
								ata.required	AS required
							  FROM
								' $ g.Store_Table_Prefix $ 'Attributes a
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'AttributeTemplateAttrs ata ON ata.attemp_id = a.attemp_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'AttributeTemplateOptions ato ON ato.attmpat_id = ata.id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ProductKits pk ON pk.product_id = a.product_id AND pk.attr_id = a.id AND pk.attmpat_id = ata.id AND pk.option_id = ato.id
							  WHERE
								a.product_id	= ?									AND
								a.attemp_id		<> 0								AND
								ata.inventory	= 1									AND
								( ata.type = \'radio\' OR ata.type = \'select\' OR ata.type = \'swatch-select\' )	AND
								ato.id IS NOT NULL
							  UNION ALL
							  SELECT
								a.id			AS attr_id,
								ata.id			AS attmpat_id,
								0				AS option_id,
								pk.part_id		AS part_id,
								pk.quantity		AS quantity,
								ata.type		AS type,
								ata.required	AS required
							  FROM
								' $ g.Store_Table_Prefix $ 'Attributes a
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'AttributeTemplateAttrs ata ON ata.attemp_id = a.attemp_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ProductKits pk ON pk.product_id = a.product_id AND pk.attr_id = a.id AND pk.attmpat_id = ata.id AND pk.option_id = 0
							  WHERE
								a.product_id	= ?				AND
								a.attemp_id		<> 0			AND
								ata.inventory	= 1				AND
								ata.required	= 0				AND
								( ata.type = \'text\' OR ata.type = \'memo\' OR ata.type = \'checkbox\' )
							  UNION ALL
							  SELECT
								a.id			AS attr_id,
								ata.id			AS attmpat_id,
								1				AS option_id,
								pk.part_id		AS part_id,
								pk.quantity		AS quantity,
								ata.type		AS type,
								ata.required	AS required
							  FROM
								' $ g.Store_Table_Prefix $ 'Attributes a
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'AttributeTemplateAttrs ata ON ata.attemp_id = a.attemp_id
								LEFT OUTER JOIN ' $ g.Store_Table_Prefix $ 'ProductKits pk ON pk.product_id = a.product_id AND pk.attr_id = a.id AND pk.attmpat_id = ata.id AND pk.option_id = 1
							  WHERE
								a.product_id	= ?				AND
								a.attemp_id		<> 0			AND
								ata.inventory	= 1				AND
								( ata.type = \'text\' OR ata.type = \'memo\' OR ata.type = \'checkbox\' )
							  ORDER BY
								attr_id, attmpat_id, option_id' }"
				FIELDS	= "l.product_id, l.product_id, l.product_id, l.product_id, l.product_id, l.product_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBE-PKT-00001', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.attribute_count"				VALUE = 0>
	<MvWHILE EXPR = "{ NOT ProductKits.d.EOF }">
		<MvASSIGN NAME = "l.attribute_count"			VALUE = "{ l.attribute_count + 1 }">
		<MvREFERENCEARRAY NAME = "l.attribute" VARIABLE = "l.attributes">
			<MvDIMENSION INDEX = "{ l.attribute_count }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.attribute:id"				VALUE = "{ ProductKits.d.attr_id }">
		<MvASSIGN NAME = "l.attribute:attmpat_id"		VALUE = "{ ProductKits.d.attmpat_id }">
		<MvASSIGN NAME = "l.attribute:type"				VALUE = "{ ProductKits.d.type }">
		<MvASSIGN NAME = "l.attribute:required"			VALUE = "{ ProductKits.d.required }">
		<MvASSIGN NAME = "l.attribute:option_count"		VALUE = 0>

		<MvWHILE EXPR = "{ ( NOT ProductKits.d.EOF ) AND
						   ( ProductKits.d.attr_id EQ l.attribute:id ) AND
						   ( ProductKits.d.attmpat_id EQ l.attribute:attmpat_id ) }">
			<MvASSIGN NAME = "l.attribute:option_count"	VALUE = "{ l.attribute:option_count + 1 }">
			<MvREFERENCEARRAY NAME = "l.option" VARIABLE = "l.attribute">
				<MvMEMBER NAME = "options">
				<MvDIMENSION INDEX = "{ l.attribute:option_count }">
			</MvREFERENCEARRAY>

			<MvASSIGN NAME = "l.option:id"				VALUE = "{ ProductKits.d.option_id }">
			<MvASSIGN NAME = "l.option:part_count"		VALUE = 0>

			<MvIF EXPR = "{ len( ProductKits.d.part_id ) EQ 0 }">
				<MvSKIP NAME = "Merchant" VIEW = "ProductKits" ROWS = 1>
			<MvELSE>
				<MvWHILE EXPR = "{ ( NOT ProductKits.d.EOF ) AND
								   ( ProductKits.d.attr_id EQ l.attribute:id ) AND
								   ( ProductKits.d.attmpat_id EQ l.attribute:attmpat_id ) AND
								   ( ProductKits.d.option_id EQ l.option:id ) }">
					<MvASSIGN NAME = "l.option:part_count"	VALUE = "{ l.option:part_count + 1 }">

					<MvASSIGN NAME = "l.option:parts" INDEX = "{ l.option:part_count }" MEMBER = "product_id"	VALUE = "{ ProductKits.d.part_id }">
					<MvASSIGN NAME = "l.option:parts" INDEX = "{ l.option:part_count }" MEMBER = "quantity"		VALUE = "{ ProductKits.d.quantity }">

					<MvSKIP NAME = "Merchant" VIEW = "ProductKits" ROWS = 1>
				</MvWHILE>
			</MvIF>
		</MvWHILE>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ProductKits">
	<MvFUNCTIONRETURN VALUE = "{ ListLoad_EOF_Return( 'MER-DBE-PKT-00002', l.attribute_count ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ProductKit_Generate_Variants" PARAMETERS = "product_id, pricing_method" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT ProductVariant_Delete_All_Product_NotDefault( l.product_id ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.attribute_count"	VALUE = "{ AttributeTree_Load_ProductKit( l.product_id, l.attributes ) }">

	<MvIF EXPR = "{ l.attribute_count EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.variants"			VALUE = "">
	<MvASSIGN NAME = "l.parts"				VALUE = "">

	<MvFUNCTIONRETURN VALUE = "{ ProductKit_Generate_Variants_Recursive( l.product_id, l.pricing_method, 1, l.attribute_count, l.attributes, l.variants, 0, l.parts, 0, 0 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ProductKit_Generate_Variants_Recursive" PARAMETERS = "product_id, pricing_method, attribute_pos, attribute_count, attributes var, variants var, variant_count, parts var, part_count, dimensions" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.attribute_pos GT l.attribute_count }">
		<MvCOMMENT>
		|
		| Skip variants with 0 parts, which can be generated by boolean attributes with no configured parts in combination
		| with other non-required attributes.
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.part_count EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 1>
		</MvIF>

		<MvCOMMENT>
		|
		| Insert the variant components
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.variant_id"			VALUE = "{ StoreKey_Generate( 'ProductVariants' ) }">

		<MvASSIGN NAME = "l.variant_pos"		VALUE = 1>
		<MvWHILE EXPR = "{ l.variant_pos LE l.variant_count }">
			<MvASSIGN NAME = "l.variants" INDEX = "{ l.variant_pos }" MEMBER = "variant_id"	VALUE = "{ l.variant_id }">
			<MvASSIGN NAME = "l.variants" INDEX = "{ l.variant_pos }" MEMBER = "dimensions"	VALUE = "{ l.dimensions }">
			<MvASSIGN NAME = "l.variants" INDEX = "{ l.variant_pos }" MEMBER = "part_count"	VALUE = "{ l.part_count }">

			<MvIF EXPR = "{ NOT ProductVariant_Insert_LowLevel( l.variants[ l.variant_pos ] ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.variant_pos"	VALUE = "{ l.variant_pos + 1 }">
		</MvWHILE>

		<MvCOMMENT>
		|
		| Insert a ProductVariantPricing record, if required
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ l.pricing_method NE 0 }">
			<MvASSIGN NAME = "l.pricing:product_id"	VALUE = "{ l.product_id }">
			<MvASSIGN NAME = "l.pricing:variant_id"	VALUE = "{ l.variant_id }">
			<MvASSIGN NAME = "l.pricing:method"		VALUE = "{ l.pricing_method }">
			<MvASSIGN NAME = "l.pricing:price"		VALUE = 0.00>
			<MvASSIGN NAME = "l.pricing:cost"		VALUE = 0.00>
			<MvASSIGN NAME = "l.pricing:weight"		VALUE = 0.00>

			<MvIF EXPR = "{ NOT ProductVariantPricing_Insert( l.pricing ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>

		<MvCOMMENT>
		|
		| Insert the variant parts
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.part_pos"			VALUE = 1>
		<MvWHILE EXPR = "{ l.part_pos LE l.part_count }">
			<MvASSIGN NAME = "l.parts" INDEX = "{ l.part_pos }" MEMBER = "variant_id" VALUE = "{ l.variant_id }">
	
			<MvIF EXPR = "{ NOT ProductVariantPart_Insert( l.parts[ l.part_pos ] ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvASSIGN NAME = "l.part_pos"		VALUE = "{ l.part_pos + 1 }">
		</MvWHILE>

		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvREFERENCEARRAY NAME = "l.attribute" VARIABLE = "l.attributes">
		<MvDIMENSION INDEX = "{ l.attribute_pos }">
	</MvREFERENCEARRAY>

	<MvIF EXPR = "{ ( NOT l.attribute:required ) AND
					( l.attribute:type NE 'text' ) AND
					( l.attribute:type NE 'memo' ) AND
					( l.attribute:type NE 'checkbox' ) }">
		<MvCOMMENT>
		|
		| Recurse without this attribute to handle the "empty" value
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT ProductKit_Generate_Variants_Recursive( l.product_id, l.pricing_method, l.attribute_pos + 1, l.attribute_count, l.attributes, l.variants, l.variant_count, l.parts, l.part_count, l.dimensions ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>

	<MvCOMMENT>
	|
	| Set up a ProductVariant record and recurse once for each option.  For required boolean attributes, there will
	| be a single option_id (1).  For non-required boolean attributes, there will be two option_ids, 0 and 1.  For
	| radio or select attributes, there will be options for each corresponding sNN_Options record, and the handling
	| of non-required attributes will have been handled above.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.variant_count"			VALUE = "{ l.variant_count + 1 }">
	<MvREFERENCEARRAY NAME = "l.variant" VARIABLE = "l.variants">
		<MvDIMENSION INDEX = "{ l.variant_count }">
	</MvREFERENCEARRAY>

	<MvASSIGN NAME = "l.variant:product_id"		VALUE = "{ l.product_id }">
	<MvASSIGN NAME = "l.variant:attr_id"		VALUE = "{ l.attribute:id }">
	<MvASSIGN NAME = "l.variant:attmpat_id"		VALUE = "{ l.attribute:attmpat_id }">

	<MvASSIGN NAME = "l.option_pos"				VALUE = 1>
	<MvWHILE EXPR = "{ l.option_pos LE l.attribute:option_count }">
		<MvREFERENCEARRAY NAME = "l.option" VARIABLE = "l.attribute">
			<MvMEMBER NAME = "options">
			<MvDIMENSION INDEX = "{ l.option_pos }">
		</MvREFERENCEARRAY>

		<MvASSIGN NAME = "l.variant:option_id"	VALUE = "{ l.option:id }">

		<MvCOMMENT>
		|
		| Merge the parts for this option into the existing parts
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.new_parts"					VALUE = "{ l.parts }">
		<MvASSIGN NAME = "l.new_part_count"				VALUE = "{ l.part_count }">

		<MvASSIGN NAME = "l.part_pos"					VALUE = 1>
		<MvWHILE EXPR = "{ l.part_pos LE l.option:part_count }">
			<MvASSIGN NAME = "l.existing_part_pos"		VALUE = 1>
			<MvWHILE EXPR = "{ l.existing_part_pos LE l.new_part_count }">
				<MvIF EXPR = "{ l.new_parts[ l.existing_part_pos ]:part_id EQ l.option:parts[ l.part_pos ]:product_id }">
					<MvASSIGN NAME = "l.new_parts" INDEX = "{ l.existing_part_pos }" MEMBER = "quantity" VALUE = "{ l.new_parts[ l.existing_part_pos ]:quantity + l.option:parts[ l.part_pos ]:quantity }">
					<MvWHILESTOP>
				</MvIF>

				<MvASSIGN NAME = "l.existing_part_pos"	VALUE = "{ l.existing_part_pos + 1 }">
			</MvWHILE>

			<MvIF EXPR = "{ l.existing_part_pos GT l.new_part_count }">
				<MvASSIGN NAME = "l.new_part_count"		VALUE = "{ l.new_part_count + 1 }">
				<MvASSIGN NAME = "l.new_parts" INDEX = "{ l.new_part_count }" MEMBER = "product_id"	VALUE = "{ l.product_id }">
				<MvASSIGN NAME = "l.new_parts" INDEX = "{ l.new_part_count }" MEMBER = "part_id"	VALUE = "{ l.option:parts[ l.part_pos ]:product_id }">
				<MvASSIGN NAME = "l.new_parts" INDEX = "{ l.new_part_count }" MEMBER = "quantity"	VALUE = "{ l.option:parts[ l.part_pos ]:quantity }">
			</MvIF>

			<MvASSIGN NAME = "l.part_pos"				VALUE = "{ l.part_pos + 1 }">
		</MvWHILE>

		<MvCOMMENT>
		|
		| Recurse
		|
		</MvCOMMENT>

		<MvIF EXPR = "{ NOT ProductKit_Generate_Variants_Recursive( l.product_id, l.pricing_method, l.attribute_pos + 1, l.attribute_count, l.attributes, l.variants, l.variant_count, l.new_parts, l.new_part_count, l.dimensions + 1 ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvASSIGN NAME = "l.option_pos"			VALUE = "{ l.option_pos + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>
